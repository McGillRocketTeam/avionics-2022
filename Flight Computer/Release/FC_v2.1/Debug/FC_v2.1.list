
FC_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017550  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a90  08017700  08017700  00027700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018190  08018190  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  08018190  08018190  00028190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018198  08018198  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018198  08018198  00028198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080181a0  080181a0  000281a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  080181a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030378  2**0
                  CONTENTS
 10 .bss          00007038  20000378  20000378  00030378  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  200073b0  200073b0  00030378  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 13 .debug_info   00057c5f  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008349  00000000  00000000  00088007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000038b8  00000000  00000000  00090350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000035f8  00000000  00000000  00093c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c7be  00000000  00000000  00097200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003987e  00000000  00000000  000a39be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011418b  00000000  00000000  000dd23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001f13c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010c50  00000000  00000000  001f141c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000378 	.word	0x20000378
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080176e8 	.word	0x080176e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000037c 	.word	0x2000037c
 80001ec:	080176e8 	.word	0x080176e8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f004 fc70 	bl	800591c <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f004 fd4d 	bl	8005b10 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f009 fb44 	bl	800a72a <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f003 fd68 	bl	8004b84 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fb6a 	bl	8004794 <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f009 fb2d 	bl	800a72a <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f009 fb21 	bl	800a72a <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f009 fb19 	bl	800a72a <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f012 fb3b 	bl	8013780 <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4620      	mov	r0, r4
 8001128:	f009 faff 	bl	800a72a <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f009 faf7 	bl	800a72a <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f009 faee 	bl	800a72a <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fb2e 	bl	80047b6 <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f003 fd11 	bl	8004b84 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f003 fb4a 	bl	8004802 <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f003 f9b9 	bl	80044f4 <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f002 ff95 	bl	80040b8 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f003 f8b1 	bl	80042fc <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 ff63 	bl	800406c <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 f87f 	bl	80042b0 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f009 fab4 	bl	800a72a <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20005284 	.word	0x20005284
 80011e0:	08017700 	.word	0x08017700
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	200003a4 	.word	0x200003a4
 80011f0:	08017718 	.word	0x08017718
 80011f4:	08017730 	.word	0x08017730
 80011f8:	0801773c 	.word	0x0801773c
 80011fc:	08017750 	.word	0x08017750
 8001200:	08017758 	.word	0x08017758
 8001204:	08017770 	.word	0x08017770
 8001208:	200003a5 	.word	0x200003a5
 800120c:	08017778 	.word	0x08017778

08001210 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 800121e:	f107 0217 	add.w	r2, r7, #23
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f003 f98a 	bl	8004540 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02d      	beq.n	800128e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001232:	2206      	movs	r2, #6
 8001234:	2100      	movs	r1, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001238:	f011 fab2 	bl	80127a0 <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fa36 	bl	80046b2 <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f002 fec1 	bl	8003fd4 <lsm6dsr_from_fs2g_to_mg>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 800125e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	1d1c      	adds	r4, r3, #4
 8001266:	4610      	mov	r0, r2
 8001268:	f002 feb4 	bl	8003fd4 <lsm6dsr_from_fs2g_to_mg>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001276:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f103 0408 	add.w	r4, r3, #8
 8001280:	4610      	mov	r0, r2
 8001282:	f002 fea7 	bl	8003fd4 <lsm6dsr_from_fs2g_to_mg>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	20000394 	.word	0x20000394

0800129c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	1d3c      	adds	r4, r7, #4
 80012a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a8:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 f976 	bl	80045a4 <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d017      	beq.n	80012ee <MRT_LSM6DSR_getTemperature+0x52>
		//Read temperature data
		memset(lsm_data_raw_temperature, 0x00, sizeof(int16_t));
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MRT_LSM6DSR_getTemperature+0x5c>)
 80012c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c4:	2202      	movs	r2, #2
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f011 fa69 	bl	80127a0 <memset>
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4909      	ldr	r1, [pc, #36]	; (80012f8 <MRT_LSM6DSR_getTemperature+0x5c>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 f97f 	bl	80045d6 <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <MRT_LSM6DSR_getTemperature+0x5c>)
 80012da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fea8 	bl	8004034 <lsm6dsr_from_lsb_to_celsius>
 80012e4:	eef0 7a40 	vmov.f32	s15, s0
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80012ee:	bf00      	nop
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200003a2 	.word	0x200003a2

080012fc <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	1d3c      	adds	r4, r7, #4
 8001304:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001308:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 800130a:	f107 0217 	add.w	r2, r7, #23
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f003 f92d 	bl	8004572 <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d02d      	beq.n	800137a <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800131e:	2206      	movs	r2, #6
 8001320:	2100      	movs	r1, #0
 8001322:	4818      	ldr	r0, [pc, #96]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001324:	f011 fa3c 	bl	80127a0 <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4916      	ldr	r1, [pc, #88]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 800132c:	4618      	mov	r0, r3
 800132e:	f003 f975 	bl	800461c <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fe63 	bl	8004004 <lsm6dsr_from_fs2000dps_to_mdps>
 800133e:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 800134a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001352:	4610      	mov	r0, r2
 8001354:	f002 fe56 	bl	8004004 <lsm6dsr_from_fs2000dps_to_mdps>
 8001358:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 800135c:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001362:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 800136c:	4610      	mov	r0, r2
 800136e:	f002 fe49 	bl	8004004 <lsm6dsr_from_fs2000dps_to_mdps>
 8001372:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 8001376:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800137a:	bf00      	nop
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	2000039c 	.word	0x2000039c

08001388 <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b08d      	sub	sp, #52	; 0x34
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001394:	4a4b      	ldr	r2, [pc, #300]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800139a:	4b4a      	ldr	r3, [pc, #296]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	2216      	movs	r2, #22
 80013a4:	4948      	ldr	r1, [pc, #288]	; (80014c8 <MRT_LPS22HH_Setup+0x140>)
 80013a6:	f009 f9c0 	bl	800a72a <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 80013aa:	4b48      	ldr	r3, [pc, #288]	; (80014cc <MRT_LPS22HH_Setup+0x144>)
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80013ae:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <MRT_LPS22HH_Setup+0x148>)
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80013b6:	2064      	movs	r0, #100	; 0x64
 80013b8:	f003 fbe4 	bl	8004b84 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 80013bc:	4b45      	ldr	r3, [pc, #276]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4943      	ldr	r1, [pc, #268]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fd82 	bl	8003ed2 <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 80013ce:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	2216      	movs	r2, #22
 80013d8:	493f      	ldr	r1, [pc, #252]	; (80014d8 <MRT_LPS22HH_Setup+0x150>)
 80013da:	f009 f9a6 	bl	800a72a <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2bb3      	cmp	r3, #179	; 0xb3
 80013e4:	d031      	beq.n	800144a <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80013e6:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	2208      	movs	r2, #8
 80013f0:	493a      	ldr	r1, [pc, #232]	; (80014dc <MRT_LPS22HH_Setup+0x154>)
 80013f2:	f009 f99a 	bl	800a72a <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	2210      	movs	r2, #16
 8001400:	4937      	ldr	r1, [pc, #220]	; (80014e0 <MRT_LPS22HH_Setup+0x158>)
 8001402:	f009 f992 	bl	800a72a <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4934      	ldr	r1, [pc, #208]	; (80014e4 <MRT_LPS22HH_Setup+0x15c>)
 8001412:	4618      	mov	r0, r3
 8001414:	f012 f9b4 	bl	8013780 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800141a:	681c      	ldr	r4, [r3, #0]
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe fee5 	bl	80001f0 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	f107 0114 	add.w	r1, r7, #20
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	4620      	mov	r0, r4
 8001434:	f009 f979 	bl	800a72a <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	2216      	movs	r2, #22
 8001442:	4929      	ldr	r1, [pc, #164]	; (80014e8 <MRT_LPS22HH_Setup+0x160>)
 8001444:	f009 f971 	bl	800a72a <HAL_UART_Transmit>
		  while(1);
 8001448:	e7fe      	b.n	8001448 <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	2204      	movs	r2, #4
 8001454:	4925      	ldr	r1, [pc, #148]	; (80014ec <MRT_LPS22HH_Setup+0x164>)
 8001456:	f009 f968 	bl	800a72a <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	2101      	movs	r1, #1
 8001460:	4618      	mov	r0, r3
 8001462:	f002 fd47 	bl	8003ef4 <lps22hh_reset_set>

	  HAL_Delay(1000);
 8001466:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800146a:	f003 fb8b 	bl	8004b84 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	491f      	ldr	r1, [pc, #124]	; (80014f0 <MRT_LPS22HH_Setup+0x168>)
 8001474:	4618      	mov	r0, r3
 8001476:	f002 fd63 	bl	8003f40 <lps22hh_reset_get>
	  } while (lps_rst);
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <MRT_LPS22HH_Setup+0x168>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f5      	bne.n	800146e <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2101      	movs	r1, #1
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fc49 	bl	8003d20 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 800148e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001492:	2115      	movs	r1, #21
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fc69 	bl	8003d6c <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	2218      	movs	r2, #24
 80014a4:	4913      	ldr	r1, [pc, #76]	; (80014f4 <MRT_LPS22HH_Setup+0x16c>)
 80014a6:	f009 f940 	bl	800a72a <HAL_UART_Transmit>

	  return lps_ctx;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	461c      	mov	r4, r3
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	3734      	adds	r7, #52	; 0x34
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd90      	pop	{r4, r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20005284 	.word	0x20005284
 80014c8:	08017790 	.word	0x08017790
 80014cc:	080015b9 	.word	0x080015b9
 80014d0:	080015f3 	.word	0x080015f3
 80014d4:	200003ae 	.word	0x200003ae
 80014d8:	08017718 	.word	0x08017718
 80014dc:	08017730 	.word	0x08017730
 80014e0:	0801773c 	.word	0x0801773c
 80014e4:	08017750 	.word	0x08017750
 80014e8:	08017758 	.word	0x08017758
 80014ec:	08017770 	.word	0x08017770
 80014f0:	200003af 	.word	0x200003af
 80014f4:	080177a8 	.word	0x080177a8

080014f8 <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	1d3c      	adds	r4, r7, #4
 8001500:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001504:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8001506:	f107 0214 	add.w	r2, r7, #20
 800150a:	1d38      	adds	r0, r7, #4
 800150c:	2301      	movs	r3, #1
 800150e:	2127      	movs	r1, #39	; 0x27
 8001510:	f002 fba4 	bl	8003c5c <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001514:	7d3b      	ldrb	r3, [r7, #20]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d015      	beq.n	800154c <MRT_LPS22HH_getPressure+0x54>
	//if (reg) {
	  memset(data_raw_pressure, 0x00, sizeof(uint32_t));
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MRT_LPS22HH_getPressure+0x5c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2204      	movs	r2, #4
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f011 f939 	bl	80127a0 <memset>
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	4908      	ldr	r1, [pc, #32]	; (8001554 <MRT_LPS22HH_getPressure+0x5c>)
 8001532:	4618      	mov	r0, r3
 8001534:	f002 fc81 	bl	8003e3a <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MRT_LPS22HH_getPressure+0x5c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f002 fbbd 	bl	8003cbc <lps22hh_from_lsb_to_hpa>
 8001542:	eef0 7a40 	vmov.f32	s15, s0
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800154c:	bf00      	nop
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd90      	pop	{r4, r7, pc}
 8001554:	200003a8 	.word	0x200003a8

08001558 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	1d3c      	adds	r4, r7, #4
 8001560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001564:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001566:	f107 0217 	add.w	r2, r7, #23
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fc4a 	bl	8003e08 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d017      	beq.n	80015aa <MRT_LPS22HH_getTemperature+0x52>
	  memset(lps_data_raw_temperature, 0x00, sizeof(int16_t));
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MRT_LPS22HH_getTemperature+0x5c>)
 800157c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001580:	2202      	movs	r2, #2
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f011 f90b 	bl	80127a0 <memset>
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4909      	ldr	r1, [pc, #36]	; (80015b4 <MRT_LPS22HH_getTemperature+0x5c>)
 800158e:	4618      	mov	r0, r3
 8001590:	f002 fc7c 	bl	8003e8c <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <MRT_LPS22HH_getTemperature+0x5c>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fba6 	bl	8003cec <lps22hh_from_lsb_to_celsius>
 80015a0:	eef0 7a40 	vmov.f32	s15, s0
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80015aa:	bf00      	nop
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200003ac 	.word	0x200003ac

080015b8 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af04      	add	r7, sp, #16
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	461a      	mov	r2, r3
 80015c4:	460b      	mov	r3, r1
 80015c6:	72fb      	strb	r3, [r7, #11]
 80015c8:	4613      	mov	r3, r2
 80015ca:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015cc:	7afb      	ldrb	r3, [r7, #11]
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	893b      	ldrh	r3, [r7, #8]
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2301      	movs	r3, #1
 80015e0:	21b9      	movs	r1, #185	; 0xb9
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f004 f99a 	bl	800591c <HAL_I2C_Mem_Write>
  return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b088      	sub	sp, #32
 80015f6:	af04      	add	r7, sp, #16
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	461a      	mov	r2, r3
 80015fe:	460b      	mov	r3, r1
 8001600:	72fb      	strb	r3, [r7, #11]
 8001602:	4613      	mov	r3, r2
 8001604:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8001606:	7afb      	ldrb	r3, [r7, #11]
 8001608:	b29a      	uxth	r2, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	893b      	ldrh	r3, [r7, #8]
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2301      	movs	r3, #1
 800161a:	21b9      	movs	r1, #185	; 0xb9
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f004 fa77 	bl	8005b10 <HAL_I2C_Mem_Read>
  return 0;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	b0a7      	sub	sp, #156	; 0x9c
 8001630:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001632:	f003 fa65 	bl	8004b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001636:	f000 f997 	bl	8001968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163a:	f000 fd17 	bl	800206c <MX_GPIO_Init>
  MX_ADC1_Init();
 800163e:	f000 f9ff 	bl	8001a40 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001642:	f000 fa4f 	bl	8001ae4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001646:	f000 fa8d 	bl	8001b64 <MX_I2C2_Init>
  MX_I2C3_Init();
 800164a:	f000 facb 	bl	8001be4 <MX_I2C3_Init>
  MX_SPI2_Init();
 800164e:	f000 fb95 	bl	8001d7c <MX_SPI2_Init>
  MX_SPI4_Init();
 8001652:	f000 fbc9 	bl	8001de8 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001656:	f000 fbfd 	bl	8001e54 <MX_SPI5_Init>
  MX_TIM2_Init();
 800165a:	f000 fc31 	bl	8001ec0 <MX_TIM2_Init>
  MX_UART8_Init();
 800165e:	f000 fc87 	bl	8001f70 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001662:	f000 fcaf 	bl	8001fc4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001666:	f000 fcd7 	bl	8002018 <MX_USART6_UART_Init>
  MX_RTC_Init();
 800166a:	f000 fafb 	bl	8001c64 <MX_RTC_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2102      	movs	r1, #2
 8001672:	4896      	ldr	r0, [pc, #600]	; (80018cc <main+0x2a0>)
 8001674:	f003 fff4 	bl	8005660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2104      	movs	r1, #4
 800167c:	4893      	ldr	r0, [pc, #588]	; (80018cc <main+0x2a0>)
 800167e:	f003 ffef 	bl	8005660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2108      	movs	r1, #8
 8001686:	4891      	ldr	r0, [pc, #580]	; (80018cc <main+0x2a0>)
 8001688:	f003 ffea 	bl	8005660 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001692:	488f      	ldr	r0, [pc, #572]	; (80018d0 <main+0x2a4>)
 8001694:	f003 ffe4 	bl	8005660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169e:	488c      	ldr	r0, [pc, #560]	; (80018d0 <main+0x2a4>)
 80016a0:	f003 ffde 	bl	8005660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016aa:	4889      	ldr	r0, [pc, #548]	; (80018d0 <main+0x2a4>)
 80016ac:	f003 ffd8 	bl	8005660 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, RESET); //PG1 ARMING_PROP
 80016b0:	2200      	movs	r2, #0
 80016b2:	2102      	movs	r1, #2
 80016b4:	4886      	ldr	r0, [pc, #536]	; (80018d0 <main+0x2a4>)
 80016b6:	f003 ffd3 	bl	8005660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c0:	4884      	ldr	r0, [pc, #528]	; (80018d4 <main+0x2a8>)
 80016c2:	f003 ffcd 	bl	8005660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016cc:	4881      	ldr	r0, [pc, #516]	; (80018d4 <main+0x2a8>)
 80016ce:	f003 ffc7 	bl	8005660 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80016d2:	2200      	movs	r2, #0
 80016d4:	2104      	movs	r1, #4
 80016d6:	4880      	ldr	r0, [pc, #512]	; (80018d8 <main+0x2ac>)
 80016d8:	f003 ffc2 	bl	8005660 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e2:	487d      	ldr	r0, [pc, #500]	; (80018d8 <main+0x2ac>)
 80016e4:	f003 ffbc 	bl	8005660 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ee:	4878      	ldr	r0, [pc, #480]	; (80018d0 <main+0x2a4>)
 80016f0:	f003 ffb6 	bl	8005660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80016f4:	2200      	movs	r2, #0
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	4878      	ldr	r0, [pc, #480]	; (80018dc <main+0x2b0>)
 80016fa:	f003 ffb1 	bl	8005660 <HAL_GPIO_WritePin>
}¸
#define HAL_UART_Transmit(u,b,size,HAL_MAX_DELAY)		CDC_Transmit_FS(b, size); //TODO if we use USB instead of huart for debugging
*/


  checkForI2CDevices(huart8,hi2c1);
 80016fe:	4e78      	ldr	r6, [pc, #480]	; (80018e0 <main+0x2b4>)
 8001700:	4a78      	ldr	r2, [pc, #480]	; (80018e4 <main+0x2b8>)
 8001702:	ab0d      	add	r3, sp, #52	; 0x34
 8001704:	4611      	mov	r1, r2
 8001706:	2254      	movs	r2, #84	; 0x54
 8001708:	4618      	mov	r0, r3
 800170a:	f011 f821 	bl	8012750 <memcpy>
 800170e:	466d      	mov	r5, sp
 8001710:	f106 0410 	add.w	r4, r6, #16
 8001714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	602b      	str	r3, [r5, #0]
 8001724:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001728:	f001 ff70 	bl	800360c <checkForI2CDevices>
  checkForI2CDevices(huart8,hi2c2);
 800172c:	4e6c      	ldr	r6, [pc, #432]	; (80018e0 <main+0x2b4>)
 800172e:	4a6e      	ldr	r2, [pc, #440]	; (80018e8 <main+0x2bc>)
 8001730:	ab0d      	add	r3, sp, #52	; 0x34
 8001732:	4611      	mov	r1, r2
 8001734:	2254      	movs	r2, #84	; 0x54
 8001736:	4618      	mov	r0, r3
 8001738:	f011 f80a 	bl	8012750 <memcpy>
 800173c:	466d      	mov	r5, sp
 800173e:	f106 0410 	add.w	r4, r6, #16
 8001742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	602b      	str	r3, [r5, #0]
 8001752:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001756:	f001 ff59 	bl	800360c <checkForI2CDevices>
  checkForI2CDevices(huart8,hi2c3);
 800175a:	4e61      	ldr	r6, [pc, #388]	; (80018e0 <main+0x2b4>)
 800175c:	4a63      	ldr	r2, [pc, #396]	; (80018ec <main+0x2c0>)
 800175e:	ab0d      	add	r3, sp, #52	; 0x34
 8001760:	4611      	mov	r1, r2
 8001762:	2254      	movs	r2, #84	; 0x54
 8001764:	4618      	mov	r0, r3
 8001766:	f010 fff3 	bl	8012750 <memcpy>
 800176a:	466d      	mov	r5, sp
 800176c:	f106 0410 	add.w	r4, r6, #16
 8001770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	602b      	str	r3, [r5, #0]
 8001780:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001784:	f001 ff42 	bl	800360c <checkForI2CDevices>

  /*
   * For LSM6DSR
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
  lsm_ctx = MRT_LSM6DSR_Setup(&hi2c3,&DEBUG_USART);
 8001788:	4c59      	ldr	r4, [pc, #356]	; (80018f0 <main+0x2c4>)
 800178a:	463b      	mov	r3, r7
 800178c:	4a54      	ldr	r2, [pc, #336]	; (80018e0 <main+0x2b4>)
 800178e:	4957      	ldr	r1, [pc, #348]	; (80018ec <main+0x2c0>)
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fc75 	bl	8001080 <MRT_LSM6DSR_Setup>
 8001796:	463b      	mov	r3, r7
 8001798:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800179c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   /*
    * For LPS22HH
    *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
    */
  lps_ctx = MRT_LPS22HH_Setup(&hi2c3,&DEBUG_USART);
 80017a0:	4c54      	ldr	r4, [pc, #336]	; (80018f4 <main+0x2c8>)
 80017a2:	463b      	mov	r3, r7
 80017a4:	4a4e      	ldr	r2, [pc, #312]	; (80018e0 <main+0x2b4>)
 80017a6:	4951      	ldr	r1, [pc, #324]	; (80018ec <main+0x2c0>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fded 	bl	8001388 <MRT_LPS22HH_Setup>
 80017ae:	463b      	mov	r3, r7
 80017b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    * For the GPS:
    * -huart6 on v4.3
    * -Set its uart to 9600)
    *
    */
   GPS_init(&huart6, &huart8);
 80017b8:	4949      	ldr	r1, [pc, #292]	; (80018e0 <main+0x2b4>)
 80017ba:	484f      	ldr	r0, [pc, #316]	; (80018f8 <main+0x2cc>)
 80017bc:	f001 ff08 	bl	80035d0 <GPS_init>

   /*
    * For the SRadio
    * -SPI2 on v4.3
    */
	HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017ca:	f003 ff49 	bl	8005660 <HAL_GPIO_WritePin>
	set_hspi(SRADIO_SPI);
 80017ce:	4c4b      	ldr	r4, [pc, #300]	; (80018fc <main+0x2d0>)
 80017d0:	4668      	mov	r0, sp
 80017d2:	f104 0310 	add.w	r3, r4, #16
 80017d6:	2248      	movs	r2, #72	; 0x48
 80017d8:	4619      	mov	r1, r3
 80017da:	f010 ffb9 	bl	8012750 <memcpy>
 80017de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017e2:	f00a ff6f 	bl	800c6c4 <set_hspi>
	// SPI2_SX_CS_GPIO_Port
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 80017e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ea:	4845      	ldr	r0, [pc, #276]	; (8001900 <main+0x2d4>)
 80017ec:	f00a ff12 	bl	800c614 <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 80017f0:	2108      	movs	r1, #8
 80017f2:	4837      	ldr	r0, [pc, #220]	; (80018d0 <main+0x2a4>)
 80017f4:	f00a ff24 	bl	800c640 <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 80017f8:	2104      	movs	r1, #4
 80017fa:	4835      	ldr	r0, [pc, #212]	; (80018d0 <main+0x2a4>)
 80017fc:	f00a ff36 	bl	800c66c <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 8001800:	2110      	movs	r1, #16
 8001802:	4833      	ldr	r0, [pc, #204]	; (80018d0 <main+0x2a4>)
 8001804:	f00a ff48 	bl	800c698 <set_DIO1_pin>
	Tx_setup();
 8001808:	f00a ff74 	bl	800c6f4 <Tx_setup>
   * -Define what you want in the alarms callback functions (check the MRT_RTOS_f4xx .h file)
   * -(Optional) Setup alarm A and the clock time in .ioc
   * The rest have been taken care of
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */
  MRT_SetupRTOS(DEBUG_USART,10);
 800180c:	4e34      	ldr	r6, [pc, #208]	; (80018e0 <main+0x2b4>)
 800180e:	230a      	movs	r3, #10
 8001810:	930d      	str	r3, [sp, #52]	; 0x34
 8001812:	466d      	mov	r5, sp
 8001814:	f106 0410 	add.w	r4, r6, #16
 8001818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	602b      	str	r3, [r5, #0]
 8001828:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800182c:	f003 f88e 	bl	800494c <MRT_SetupRTOS>

  HAL_UART_Transmit(&DEBUG_USART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
 8001834:	2213      	movs	r2, #19
 8001836:	4933      	ldr	r1, [pc, #204]	; (8001904 <main+0x2d8>)
 8001838:	4829      	ldr	r0, [pc, #164]	; (80018e0 <main+0x2b4>)
 800183a:	f008 ff76 	bl	800a72a <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800183e:	f00c fff7 	bl	800e830 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MEMORY */
  MEMORYHandle = osMutexNew(&MEMORY_attributes);
 8001842:	4831      	ldr	r0, [pc, #196]	; (8001908 <main+0x2dc>)
 8001844:	f00d f8fc 	bl	800ea40 <osMutexNew>
 8001848:	4603      	mov	r3, r0
 800184a:	4a30      	ldr	r2, [pc, #192]	; (800190c <main+0x2e0>)
 800184c:	6013      	str	r3, [r2, #0]

  /* creation of TELEMETRY */
  TELEMETRYHandle = osMutexNew(&TELEMETRY_attributes);
 800184e:	4830      	ldr	r0, [pc, #192]	; (8001910 <main+0x2e4>)
 8001850:	f00d f8f6 	bl	800ea40 <osMutexNew>
 8001854:	4603      	mov	r3, r0
 8001856:	4a2f      	ldr	r2, [pc, #188]	; (8001914 <main+0x2e8>)
 8001858:	6013      	str	r3, [r2, #0]

  /* creation of SENSOR_POLLING */
  SENSOR_POLLINGHandle = osMutexNew(&SENSOR_POLLING_attributes);
 800185a:	482f      	ldr	r0, [pc, #188]	; (8001918 <main+0x2ec>)
 800185c:	f00d f8f0 	bl	800ea40 <osMutexNew>
 8001860:	4603      	mov	r3, r0
 8001862:	4a2e      	ldr	r2, [pc, #184]	; (800191c <main+0x2f0>)
 8001864:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001866:	4a2e      	ldr	r2, [pc, #184]	; (8001920 <main+0x2f4>)
 8001868:	2100      	movs	r1, #0
 800186a:	482e      	ldr	r0, [pc, #184]	; (8001924 <main+0x2f8>)
 800186c:	f00d f82a 	bl	800e8c4 <osThreadNew>
 8001870:	4603      	mov	r3, r0
 8001872:	4a2d      	ldr	r2, [pc, #180]	; (8001928 <main+0x2fc>)
 8001874:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001876:	4a2d      	ldr	r2, [pc, #180]	; (800192c <main+0x300>)
 8001878:	2100      	movs	r1, #0
 800187a:	482d      	ldr	r0, [pc, #180]	; (8001930 <main+0x304>)
 800187c:	f00d f822 	bl	800e8c4 <osThreadNew>
 8001880:	4603      	mov	r3, r0
 8001882:	4a2c      	ldr	r2, [pc, #176]	; (8001934 <main+0x308>)
 8001884:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 8001886:	4a2c      	ldr	r2, [pc, #176]	; (8001938 <main+0x30c>)
 8001888:	2100      	movs	r1, #0
 800188a:	482c      	ldr	r0, [pc, #176]	; (800193c <main+0x310>)
 800188c:	f00d f81a 	bl	800e8c4 <osThreadNew>
 8001890:	4603      	mov	r3, r0
 8001892:	4a2b      	ldr	r2, [pc, #172]	; (8001940 <main+0x314>)
 8001894:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 8001896:	4a2b      	ldr	r2, [pc, #172]	; (8001944 <main+0x318>)
 8001898:	2100      	movs	r1, #0
 800189a:	482b      	ldr	r0, [pc, #172]	; (8001948 <main+0x31c>)
 800189c:	f00d f812 	bl	800e8c4 <osThreadNew>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a2a      	ldr	r2, [pc, #168]	; (800194c <main+0x320>)
 80018a4:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80018a6:	4a2a      	ldr	r2, [pc, #168]	; (8001950 <main+0x324>)
 80018a8:	2100      	movs	r1, #0
 80018aa:	482a      	ldr	r0, [pc, #168]	; (8001954 <main+0x328>)
 80018ac:	f00d f80a 	bl	800e8c4 <osThreadNew>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4a29      	ldr	r2, [pc, #164]	; (8001958 <main+0x32c>)
 80018b4:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 80018b6:	4a29      	ldr	r2, [pc, #164]	; (800195c <main+0x330>)
 80018b8:	2100      	movs	r1, #0
 80018ba:	4829      	ldr	r0, [pc, #164]	; (8001960 <main+0x334>)
 80018bc:	f00d f802 	bl	800e8c4 <osThreadNew>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4a28      	ldr	r2, [pc, #160]	; (8001964 <main+0x338>)
 80018c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018c6:	f00c ffd7 	bl	800e878 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <main+0x29e>
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40021800 	.word	0x40021800
 80018d4:	40021400 	.word	0x40021400
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40020c00 	.word	0x40020c00
 80018e0:	20005804 	.word	0x20005804
 80018e4:	200053f4 	.word	0x200053f4
 80018e8:	20005448 	.word	0x20005448
 80018ec:	2000528c 	.word	0x2000528c
 80018f0:	200058f0 	.word	0x200058f0
 80018f4:	200058e0 	.word	0x200058e0
 80018f8:	20005848 	.word	0x20005848
 80018fc:	200052e0 	.word	0x200052e0
 8001900:	40020400 	.word	0x40020400
 8001904:	08017828 	.word	0x08017828
 8001908:	08017c30 	.word	0x08017c30
 800190c:	20005708 	.word	0x20005708
 8001910:	08017c40 	.word	0x08017c40
 8001914:	20005930 	.word	0x20005930
 8001918:	08017c50 	.word	0x08017c50
 800191c:	20005784 	.word	0x20005784
 8001920:	08017b58 	.word	0x08017b58
 8001924:	080023a9 	.word	0x080023a9
 8001928:	200054ac 	.word	0x200054ac
 800192c:	08017b7c 	.word	0x08017b7c
 8001930:	080023b9 	.word	0x080023b9
 8001934:	200057fc 	.word	0x200057fc
 8001938:	08017ba0 	.word	0x08017ba0
 800193c:	080023c5 	.word	0x080023c5
 8001940:	20005800 	.word	0x20005800
 8001944:	08017bc4 	.word	0x08017bc4
 8001948:	08002615 	.word	0x08002615
 800194c:	200058dc 	.word	0x200058dc
 8001950:	08017be8 	.word	0x08017be8
 8001954:	0800271d 	.word	0x0800271d
 8001958:	200058fc 	.word	0x200058fc
 800195c:	08017c0c 	.word	0x08017c0c
 8001960:	08002729 	.word	0x08002729
 8001964:	2000578c 	.word	0x2000578c

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b094      	sub	sp, #80	; 0x50
 800196c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2230      	movs	r2, #48	; 0x30
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f010 ff12 	bl	80127a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <SystemClock_Config+0xd0>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <SystemClock_Config+0xd0>)
 8001996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
 800199c:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <SystemClock_Config+0xd0>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <SystemClock_Config+0xd4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019b4:	4a21      	ldr	r2, [pc, #132]	; (8001a3c <SystemClock_Config+0xd4>)
 80019b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <SystemClock_Config+0xd4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019c8:	2309      	movs	r3, #9
 80019ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019d2:	2301      	movs	r3, #1
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d6:	2302      	movs	r3, #2
 80019d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019e0:	2308      	movs	r3, #8
 80019e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019e4:	2348      	movs	r3, #72	; 0x48
 80019e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019ec:	2303      	movs	r3, #3
 80019ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	f107 0320 	add.w	r3, r7, #32
 80019f4:	4618      	mov	r0, r3
 80019f6:	f006 f983 	bl	8007d00 <HAL_RCC_OscConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a00:	f000 feaa 	bl	8002758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a04:	230f      	movs	r3, #15
 8001a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f006 fbe5 	bl	80081f0 <HAL_RCC_ClockConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a2c:	f000 fe94 	bl	8002758 <Error_Handler>
  }
}
 8001a30:	bf00      	nop
 8001a32:	3750      	adds	r7, #80	; 0x50
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40007000 	.word	0x40007000

08001a40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a46:	463b      	mov	r3, r7
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a54:	4a21      	ldr	r2, [pc, #132]	; (8001adc <MX_ADC1_Init+0x9c>)
 8001a56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a80:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <MX_ADC1_Init+0xa0>)
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a9e:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001aa0:	f003 f894 	bl	8004bcc <HAL_ADC_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001aaa:	f000 fe55 	bl	8002758 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001aae:	2306      	movs	r3, #6
 8001ab0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	4619      	mov	r1, r3
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001ac0:	f003 f8c8 	bl	8004c54 <HAL_ADC_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001aca:	f000 fe45 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200054b4 	.word	0x200054b4
 8001adc:	40012000 	.word	0x40012000
 8001ae0:	0f000001 	.word	0x0f000001

08001ae4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001aea:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <MX_I2C1_Init+0x78>)
 8001aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001af0:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <MX_I2C1_Init+0x7c>)
 8001af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b22:	f003 fdb7 	bl	8005694 <HAL_I2C_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b2c:	f000 fe14 	bl	8002758 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b30:	2100      	movs	r1, #0
 8001b32:	4809      	ldr	r0, [pc, #36]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b34:	f004 fed1 	bl	80068da <HAL_I2CEx_ConfigAnalogFilter>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001b3e:	f000 fe0b 	bl	8002758 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b42:	2100      	movs	r1, #0
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b46:	f004 ff04 	bl	8006952 <HAL_I2CEx_ConfigDigitalFilter>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001b50:	f000 fe02 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200053f4 	.word	0x200053f4
 8001b5c:	40005400 	.word	0x40005400
 8001b60:	000186a0 	.word	0x000186a0

08001b64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <MX_I2C2_Init+0x78>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b70:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <MX_I2C2_Init+0x7c>)
 8001b72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001ba2:	f003 fd77 	bl	8005694 <HAL_I2C_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bac:	f000 fdd4 	bl	8002758 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001bb4:	f004 fe91 	bl	80068da <HAL_I2CEx_ConfigAnalogFilter>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001bbe:	f000 fdcb 	bl	8002758 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001bc6:	f004 fec4 	bl	8006952 <HAL_I2CEx_ConfigDigitalFilter>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001bd0:	f000 fdc2 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20005448 	.word	0x20005448
 8001bdc:	40005800 	.word	0x40005800
 8001be0:	000186a0 	.word	0x000186a0

08001be4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001bea:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <MX_I2C3_Init+0x78>)
 8001bec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001bf0:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <MX_I2C3_Init+0x7c>)
 8001bf2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c06:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c22:	f003 fd37 	bl	8005694 <HAL_I2C_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c2c:	f000 fd94 	bl	8002758 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c30:	2100      	movs	r1, #0
 8001c32:	4809      	ldr	r0, [pc, #36]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c34:	f004 fe51 	bl	80068da <HAL_I2CEx_ConfigAnalogFilter>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c3e:	f000 fd8b 	bl	8002758 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c42:	2100      	movs	r1, #0
 8001c44:	4804      	ldr	r0, [pc, #16]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c46:	f004 fe84 	bl	8006952 <HAL_I2CEx_ConfigDigitalFilter>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c50:	f000 fd82 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	2000528c 	.word	0x2000528c
 8001c5c:	40005c00 	.word	0x40005c00
 8001c60:	000186a0 	.word	0x000186a0

08001c64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b090      	sub	sp, #64	; 0x40
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2228      	movs	r2, #40	; 0x28
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f010 fd8b 	bl	80127a0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <MX_RTC_Init+0x110>)
 8001c8c:	4a3a      	ldr	r2, [pc, #232]	; (8001d78 <MX_RTC_Init+0x114>)
 8001c8e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c90:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <MX_RTC_Init+0x110>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c96:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <MX_RTC_Init+0x110>)
 8001c98:	227f      	movs	r2, #127	; 0x7f
 8001c9a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c9c:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <MX_RTC_Init+0x110>)
 8001c9e:	22ff      	movs	r2, #255	; 0xff
 8001ca0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ca2:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <MX_RTC_Init+0x110>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ca8:	4b32      	ldr	r3, [pc, #200]	; (8001d74 <MX_RTC_Init+0x110>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cae:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <MX_RTC_Init+0x110>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cb4:	482f      	ldr	r0, [pc, #188]	; (8001d74 <MX_RTC_Init+0x110>)
 8001cb6:	f006 fe85 	bl	80089c4 <HAL_RTC_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001cc0:	f000 fd4a 	bl	8002758 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4823      	ldr	r0, [pc, #140]	; (8001d74 <MX_RTC_Init+0x110>)
 8001ce8:	f006 fefd 	bl	8008ae6 <HAL_RTC_SetTime>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001cf2:	f000 fd31 	bl	8002758 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d12:	2201      	movs	r2, #1
 8001d14:	4619      	mov	r1, r3
 8001d16:	4817      	ldr	r0, [pc, #92]	; (8001d74 <MX_RTC_Init+0x110>)
 8001d18:	f006 ffa2 	bl	8008c60 <HAL_RTC_SetDate>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001d22:	f000 fd19 	bl	8002758 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d56:	463b      	mov	r3, r7
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_RTC_Init+0x110>)
 8001d5e:	f007 f827 	bl	8008db0 <HAL_RTC_SetAlarm_IT>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001d68:	f000 fcf6 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	3740      	adds	r7, #64	; 0x40
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20005764 	.word	0x20005764
 8001d78:	40002800 	.word	0x40002800

08001d7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <MX_SPI2_Init+0x68>)
 8001d84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001d88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001dc8:	220a      	movs	r2, #10
 8001dca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dcc:	4804      	ldr	r0, [pc, #16]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001dce:	f007 fa41 	bl	8009254 <HAL_SPI_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001dd8:	f000 fcbe 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200052e0 	.word	0x200052e0
 8001de4:	40003800 	.word	0x40003800

08001de8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001dee:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <MX_SPI4_Init+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001df4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001df8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e18:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e34:	220a      	movs	r2, #10
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e3a:	f007 fa0b 	bl	8009254 <HAL_SPI_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001e44:	f000 fc88 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2000570c 	.word	0x2000570c
 8001e50:	40013400 	.word	0x40013400

08001e54 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e5a:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <MX_SPI5_Init+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e64:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e84:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001ea0:	220a      	movs	r2, #10
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001ea6:	f007 f9d5 	bl	8009254 <HAL_SPI_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001eb0:	f000 fc52 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20005340 	.word	0x20005340
 8001ebc:	40015000 	.word	0x40015000

08001ec0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec6:	f107 0320 	add.w	r3, r7, #32
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]
 8001ede:	615a      	str	r2, [r3, #20]
 8001ee0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ee2:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001ee4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f0a:	4818      	ldr	r0, [pc, #96]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f0c:	f007 fe9e 	bl	8009c4c <HAL_TIM_PWM_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f16:	f000 fc1f 	bl	8002758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f22:	f107 0320 	add.w	r3, r7, #32
 8001f26:	4619      	mov	r1, r3
 8001f28:	4810      	ldr	r0, [pc, #64]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f2a:	f008 fb21 	bl	800a570 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f34:	f000 fc10 	bl	8002758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f38:	2360      	movs	r3, #96	; 0x60
 8001f3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4807      	ldr	r0, [pc, #28]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f50:	f007 ffd4 	bl	8009efc <HAL_TIM_PWM_ConfigChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f5a:	f000 fbfd 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f5e:	4803      	ldr	r0, [pc, #12]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f60:	f000 fe50 	bl	8002c04 <HAL_TIM_MspPostInit>

}
 8001f64:	bf00      	nop
 8001f66:	3728      	adds	r7, #40	; 0x28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20005894 	.word	0x20005894

08001f70 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <MX_UART8_Init+0x50>)
 8001f78:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f80:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f96:	220c      	movs	r2, #12
 8001f98:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001fa8:	f008 fb72 	bl	800a690 <HAL_UART_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001fb2:	f000 fbd1 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20005804 	.word	0x20005804
 8001fc0:	40007c00 	.word	0x40007c00

08001fc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <MX_USART3_UART_Init+0x50>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001ffc:	f008 fb48 	bl	800a690 <HAL_UART_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002006:	f000 fba7 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2000539c 	.word	0x2000539c
 8002014:	40004800 	.word	0x40004800

08002018 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <MX_USART6_UART_Init+0x50>)
 8002020:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 8002024:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002028:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 800203e:	220c      	movs	r2, #12
 8002040:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 8002050:	f008 fb1e 	bl	800a690 <HAL_UART_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800205a:	f000 fb7d 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20005848 	.word	0x20005848
 8002068:	40011400 	.word	0x40011400

0800206c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08e      	sub	sp, #56	; 0x38
 8002070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
 8002086:	4bb5      	ldr	r3, [pc, #724]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4ab4      	ldr	r2, [pc, #720]	; (800235c <MX_GPIO_Init+0x2f0>)
 800208c:	f043 0310 	orr.w	r3, r3, #16
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4bb2      	ldr	r3, [pc, #712]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	623b      	str	r3, [r7, #32]
 800209c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	4bae      	ldr	r3, [pc, #696]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4aad      	ldr	r2, [pc, #692]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4bab      	ldr	r3, [pc, #684]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	4ba7      	ldr	r3, [pc, #668]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4aa6      	ldr	r2, [pc, #664]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020c4:	f043 0320 	orr.w	r3, r3, #32
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4ba4      	ldr	r3, [pc, #656]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	4ba0      	ldr	r3, [pc, #640]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a9f      	ldr	r2, [pc, #636]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b9d      	ldr	r3, [pc, #628]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b99      	ldr	r3, [pc, #612]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a98      	ldr	r2, [pc, #608]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b96      	ldr	r3, [pc, #600]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b92      	ldr	r3, [pc, #584]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a91      	ldr	r2, [pc, #580]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b8f      	ldr	r3, [pc, #572]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	4b8b      	ldr	r3, [pc, #556]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a8a      	ldr	r2, [pc, #552]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b88      	ldr	r3, [pc, #544]	; (800235c <MX_GPIO_Init+0x2f0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4b84      	ldr	r3, [pc, #528]	; (800235c <MX_GPIO_Init+0x2f0>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a83      	ldr	r2, [pc, #524]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002150:	f043 0308 	orr.w	r3, r3, #8
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b81      	ldr	r3, [pc, #516]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	f248 4184 	movw	r1, #33924	; 0x8484
 8002168:	487d      	ldr	r0, [pc, #500]	; (8002360 <MX_GPIO_Init+0x2f4>)
 800216a:	f003 fa79 	bl	8005660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8002174:	487b      	ldr	r0, [pc, #492]	; (8002364 <MX_GPIO_Init+0x2f8>)
 8002176:	f003 fa73 	bl	8005660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 800217a:	2200      	movs	r2, #0
 800217c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002180:	4879      	ldr	r0, [pc, #484]	; (8002368 <MX_GPIO_Init+0x2fc>)
 8002182:	f003 fa6d 	bl	8005660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	2108      	movs	r1, #8
 800218a:	4878      	ldr	r0, [pc, #480]	; (800236c <MX_GPIO_Init+0x300>)
 800218c:	f003 fa68 	bl	8005660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8002190:	2200      	movs	r2, #0
 8002192:	f645 213e 	movw	r1, #23102	; 0x5a3e
 8002196:	4876      	ldr	r0, [pc, #472]	; (8002370 <MX_GPIO_Init+0x304>)
 8002198:	f003 fa62 	bl	8005660 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 800219c:	2200      	movs	r2, #0
 800219e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021a2:	4874      	ldr	r0, [pc, #464]	; (8002374 <MX_GPIO_Init+0x308>)
 80021a4:	f003 fa5c 	bl	8005660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80021a8:	2200      	movs	r2, #0
 80021aa:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80021ae:	4872      	ldr	r0, [pc, #456]	; (8002378 <MX_GPIO_Init+0x30c>)
 80021b0:	f003 fa56 	bl	8005660 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80021b4:	f248 4384 	movw	r3, #33924	; 0x8484
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ba:	2301      	movs	r3, #1
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ca:	4619      	mov	r1, r3
 80021cc:	4864      	ldr	r0, [pc, #400]	; (8002360 <MX_GPIO_Init+0x2f4>)
 80021ce:	f003 f883 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 80021d2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d8:	2301      	movs	r3, #1
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e8:	4619      	mov	r1, r3
 80021ea:	485e      	ldr	r0, [pc, #376]	; (8002364 <MX_GPIO_Init+0x2f8>)
 80021ec:	f003 f874 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 80021f0:	2301      	movs	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80021fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002202:	4619      	mov	r1, r3
 8002204:	4858      	ldr	r0, [pc, #352]	; (8002368 <MX_GPIO_Init+0x2fc>)
 8002206:	f003 f867 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800220a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002210:	2301      	movs	r3, #1
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002220:	4619      	mov	r1, r3
 8002222:	4851      	ldr	r0, [pc, #324]	; (8002368 <MX_GPIO_Init+0x2fc>)
 8002224:	f003 f858 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8002228:	2308      	movs	r3, #8
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222c:	2301      	movs	r3, #1
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8002238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223c:	4619      	mov	r1, r3
 800223e:	484b      	ldr	r0, [pc, #300]	; (800236c <MX_GPIO_Init+0x300>)
 8002240:	f003 f84a 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002244:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800224a:	2300      	movs	r3, #0
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002256:	4619      	mov	r1, r3
 8002258:	4843      	ldr	r0, [pc, #268]	; (8002368 <MX_GPIO_Init+0x2fc>)
 800225a:	f003 f83d 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800225e:	2302      	movs	r3, #2
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002262:	2300      	movs	r3, #0
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226e:	4619      	mov	r1, r3
 8002270:	4840      	ldr	r0, [pc, #256]	; (8002374 <MX_GPIO_Init+0x308>)
 8002272:	f003 f831 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8002276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227c:	2300      	movs	r3, #0
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002288:	4619      	mov	r1, r3
 800228a:	4836      	ldr	r0, [pc, #216]	; (8002364 <MX_GPIO_Init+0x2f8>)
 800228c:	f003 f824 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 8002290:	f242 4301 	movw	r3, #9217	; 0x2401
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002296:	2300      	movs	r3, #0
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800229e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a2:	4619      	mov	r1, r3
 80022a4:	4832      	ldr	r0, [pc, #200]	; (8002370 <MX_GPIO_Init+0x304>)
 80022a6:	f003 f817 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 80022aa:	f645 233e 	movw	r3, #23102	; 0x5a3e
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c0:	4619      	mov	r1, r3
 80022c2:	482b      	ldr	r0, [pc, #172]	; (8002370 <MX_GPIO_Init+0x304>)
 80022c4:	f003 f808 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80022c8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022da:	4619      	mov	r1, r3
 80022dc:	4820      	ldr	r0, [pc, #128]	; (8002360 <MX_GPIO_Init+0x2f4>)
 80022de:	f002 fffb 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 80022e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e8:	2301      	movs	r3, #1
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 80022f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f8:	4619      	mov	r1, r3
 80022fa:	481e      	ldr	r0, [pc, #120]	; (8002374 <MX_GPIO_Init+0x308>)
 80022fc:	f002 ffec 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002300:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002306:	2301      	movs	r3, #1
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230e:	2300      	movs	r3, #0
 8002310:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	4619      	mov	r1, r3
 8002318:	4817      	ldr	r0, [pc, #92]	; (8002378 <MX_GPIO_Init+0x30c>)
 800231a:	f002 ffdd 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 800231e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002330:	4619      	mov	r1, r3
 8002332:	4811      	ldr	r0, [pc, #68]	; (8002378 <MX_GPIO_Init+0x30c>)
 8002334:	f002 ffd0 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8002338:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800233e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234c:	4619      	mov	r1, r3
 800234e:	4808      	ldr	r0, [pc, #32]	; (8002370 <MX_GPIO_Init+0x304>)
 8002350:	f002 ffc2 	bl	80052d8 <HAL_GPIO_Init>

}
 8002354:	bf00      	nop
 8002356:	3738      	adds	r7, #56	; 0x38
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40023800 	.word	0x40023800
 8002360:	40021000 	.word	0x40021000
 8002364:	40021400 	.word	0x40021400
 8002368:	40020800 	.word	0x40020800
 800236c:	40020000 	.word	0x40020000
 8002370:	40021800 	.word	0x40021800
 8002374:	40020400 	.word	0x40020400
 8002378:	40020c00 	.word	0x40020c00

0800237c <XTend_Transmit>:

/**
 * @brief   Function to transmit message to XTend
 * @param  Msg : char array (range 1-800)
 */
static void XTend_Transmit(char* Msg){
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&XTEND_USART, Msg, strlen(Msg), HAL_Delay);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7fd ff33 	bl	80001f0 <strlen>
 800238a:	4603      	mov	r3, r0
 800238c:	b29a      	uxth	r2, r3
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <XTend_Transmit+0x24>)
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4804      	ldr	r0, [pc, #16]	; (80023a4 <XTend_Transmit+0x28>)
 8002394:	f008 f9c9 	bl	800a72a <HAL_UART_Transmit>
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	08004b85 	.word	0x08004b85
 80023a4:	2000539c 	.word	0x2000539c

080023a8 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80023b0:	f00f fb7c 	bl	8011aac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	osThreadExit();
 80023b4:	f00c fb23 	bl	800e9fe <osThreadExit>

080023b8 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b094      	sub	sp, #80	; 0x50
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	osThreadExit();
 80023c0:	f00c fb1d 	bl	800e9fe <osThreadExit>

080023c4 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 80023c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c8:	b0b0      	sub	sp, #192	; 0xc0
 80023ca:	af1a      	add	r7, sp, #104	; 0x68
 80023cc:	6578      	str	r0, [r7, #84]	; 0x54
  /* USER CODE BEGIN StartTelemetry2 */

	//osThreadExit();

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 80023ce:	f00c fb0b 	bl	800e9e8 <osThreadGetId>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4a79      	ldr	r2, [pc, #484]	; (80025bc <StartTelemetry2+0x1f8>)
 80023d6:	6093      	str	r3, [r2, #8]
	//Mutex
	//while( (TELEMETRY = xSemaphoreCreateMutex()) == NULL) osDelay(10);

	//Make the thread joinable?

	osDelay(1000);
 80023d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023dc:	f00c fb15 	bl	800ea0a <osDelay>
  {
	  //Poll sensors data in other thread

	  //while( xSemaphoreTake( _SENSORS, ( TickType_t ) 10 ) != pdTRUE ) osDelay(10);

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 80023e0:	2201      	movs	r2, #1
 80023e2:	2108      	movs	r1, #8
 80023e4:	4876      	ldr	r0, [pc, #472]	; (80025c0 <StartTelemetry2+0x1fc>)
 80023e6:	f003 f93b 	bl	8005660 <HAL_GPIO_WritePin>

	  //Updating data variables

	  //Need to verify these six to make sure they are in the right order

  	  ACCx = acceleration_mg[0];
 80023ea:	4b76      	ldr	r3, [pc, #472]	; (80025c4 <StartTelemetry2+0x200>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a76      	ldr	r2, [pc, #472]	; (80025c8 <StartTelemetry2+0x204>)
 80023f0:	6013      	str	r3, [r2, #0]
  	  ACCy = acceleration_mg[1];
 80023f2:	4b74      	ldr	r3, [pc, #464]	; (80025c4 <StartTelemetry2+0x200>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4a75      	ldr	r2, [pc, #468]	; (80025cc <StartTelemetry2+0x208>)
 80023f8:	6013      	str	r3, [r2, #0]
  	  ACCz = acceleration_mg[2];
 80023fa:	4b72      	ldr	r3, [pc, #456]	; (80025c4 <StartTelemetry2+0x200>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4a74      	ldr	r2, [pc, #464]	; (80025d0 <StartTelemetry2+0x20c>)
 8002400:	6013      	str	r3, [r2, #0]
  	  GYROx = angular_rate_mdps[0];
 8002402:	4b74      	ldr	r3, [pc, #464]	; (80025d4 <StartTelemetry2+0x210>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a74      	ldr	r2, [pc, #464]	; (80025d8 <StartTelemetry2+0x214>)
 8002408:	6013      	str	r3, [r2, #0]
  	  GYROy = angular_rate_mdps[1];
 800240a:	4b72      	ldr	r3, [pc, #456]	; (80025d4 <StartTelemetry2+0x210>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4a73      	ldr	r2, [pc, #460]	; (80025dc <StartTelemetry2+0x218>)
 8002410:	6013      	str	r3, [r2, #0]
  	  GYROz = angular_rate_mdps[2];
 8002412:	4b70      	ldr	r3, [pc, #448]	; (80025d4 <StartTelemetry2+0x210>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	4a72      	ldr	r2, [pc, #456]	; (80025e0 <StartTelemetry2+0x21c>)
 8002418:	6013      	str	r3, [r2, #0]
  	  PRESSURE = pressure_hPa;
 800241a:	4b72      	ldr	r3, [pc, #456]	; (80025e4 <StartTelemetry2+0x220>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a72      	ldr	r2, [pc, #456]	; (80025e8 <StartTelemetry2+0x224>)
 8002420:	6013      	str	r3, [r2, #0]
  	  LAT = 0.0;
 8002422:	4b72      	ldr	r3, [pc, #456]	; (80025ec <StartTelemetry2+0x228>)
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
  	  LONG = 0.0;
 800242a:	4b71      	ldr	r3, [pc, #452]	; (80025f0 <StartTelemetry2+0x22c>)
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
  	  MIN = 0.0;
 8002432:	4b70      	ldr	r3, [pc, #448]	; (80025f4 <StartTelemetry2+0x230>)
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
  	  SEC = 0.0;
 800243a:	4b6f      	ldr	r3, [pc, #444]	; (80025f8 <StartTelemetry2+0x234>)
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
  	  SUBSEC = 0.0;
 8002442:	4b6e      	ldr	r3, [pc, #440]	; (80025fc <StartTelemetry2+0x238>)
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
  	  STATE = 0.0;
 800244a:	4b6d      	ldr	r3, [pc, #436]	; (8002600 <StartTelemetry2+0x23c>)
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
  	  CONT = 0.0;
 8002452:	4b6c      	ldr	r3, [pc, #432]	; (8002604 <StartTelemetry2+0x240>)
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
	  */


	  //TODO maybe add variable for GPS time and both temperature values?

  	  memset (xtend_tx_buffer,0,512);
 800245a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800245e:	2100      	movs	r1, #0
 8002460:	4869      	ldr	r0, [pc, #420]	; (8002608 <StartTelemetry2+0x244>)
 8002462:	f010 f99d 	bl	80127a0 <memset>
  	  sprintf(xtend_tx_buffer,"S,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%i,%i,%i,%i,%i,E", ACCx,ACCy,ACCz,GYROx,GYROy,GYROz,PRESSURE,LAT,LONG,MIN,SEC,SUBSEC,STATE,CONT);
 8002466:	4b58      	ldr	r3, [pc, #352]	; (80025c8 <StartTelemetry2+0x204>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe f87c 	bl	8000568 <__aeabi_f2d>
 8002470:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8002474:	4b55      	ldr	r3, [pc, #340]	; (80025cc <StartTelemetry2+0x208>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe f875 	bl	8000568 <__aeabi_f2d>
 800247e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8002482:	4b53      	ldr	r3, [pc, #332]	; (80025d0 <StartTelemetry2+0x20c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f86e 	bl	8000568 <__aeabi_f2d>
 800248c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8002490:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <StartTelemetry2+0x214>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f867 	bl	8000568 <__aeabi_f2d>
 800249a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 800249e:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <StartTelemetry2+0x218>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f860 	bl	8000568 <__aeabi_f2d>
 80024a8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80024ac:	4b4c      	ldr	r3, [pc, #304]	; (80025e0 <StartTelemetry2+0x21c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f859 	bl	8000568 <__aeabi_f2d>
 80024b6:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80024ba:	4b4b      	ldr	r3, [pc, #300]	; (80025e8 <StartTelemetry2+0x224>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f852 	bl	8000568 <__aeabi_f2d>
 80024c4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80024c8:	4b48      	ldr	r3, [pc, #288]	; (80025ec <StartTelemetry2+0x228>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f84b 	bl	8000568 <__aeabi_f2d>
 80024d2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80024d6:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <StartTelemetry2+0x22c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe f844 	bl	8000568 <__aeabi_f2d>
 80024e0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80024e4:	4b43      	ldr	r3, [pc, #268]	; (80025f4 <StartTelemetry2+0x230>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe f83d 	bl	8000568 <__aeabi_f2d>
 80024ee:	e9c7 0100 	strd	r0, r1, [r7]
 80024f2:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <StartTelemetry2+0x234>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe f836 	bl	8000568 <__aeabi_f2d>
 80024fc:	4682      	mov	sl, r0
 80024fe:	468b      	mov	fp, r1
 8002500:	4b3e      	ldr	r3, [pc, #248]	; (80025fc <StartTelemetry2+0x238>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f82f 	bl	8000568 <__aeabi_f2d>
 800250a:	4680      	mov	r8, r0
 800250c:	4689      	mov	r9, r1
 800250e:	4b3c      	ldr	r3, [pc, #240]	; (8002600 <StartTelemetry2+0x23c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe f828 	bl	8000568 <__aeabi_f2d>
 8002518:	4604      	mov	r4, r0
 800251a:	460d      	mov	r5, r1
 800251c:	4b39      	ldr	r3, [pc, #228]	; (8002604 <StartTelemetry2+0x240>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f821 	bl	8000568 <__aeabi_f2d>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 800252e:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 8002532:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8002536:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 800253a:	ed97 7b00 	vldr	d7, [r7]
 800253e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002542:	ed97 7b02 	vldr	d7, [r7, #8]
 8002546:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800254a:	ed97 7b04 	vldr	d7, [r7, #16]
 800254e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002552:	ed97 7b06 	vldr	d7, [r7, #24]
 8002556:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800255a:	ed97 7b08 	vldr	d7, [r7, #32]
 800255e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002562:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002566:	ed8d 7b06 	vstr	d7, [sp, #24]
 800256a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800256e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002572:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002576:	ed8d 7b02 	vstr	d7, [sp, #8]
 800257a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800257e:	ed8d 7b00 	vstr	d7, [sp]
 8002582:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002586:	4921      	ldr	r1, [pc, #132]	; (800260c <StartTelemetry2+0x248>)
 8002588:	481f      	ldr	r0, [pc, #124]	; (8002608 <StartTelemetry2+0x244>)
 800258a:	f011 f8f9 	bl	8013780 <siprintf>

	  //Xtend send
	  XTend_Transmit(xtend_tx_buffer);
 800258e:	481e      	ldr	r0, [pc, #120]	; (8002608 <StartTelemetry2+0x244>)
 8002590:	f7ff fef4 	bl	800237c <XTend_Transmit>

	  //Iridium send
	  //MRT_Static_Iridium_getTime(); TODO doesn't cost anything
	  //MRT_Static_Iridium_sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8002594:	2200      	movs	r2, #0
 8002596:	2108      	movs	r1, #8
 8002598:	4809      	ldr	r0, [pc, #36]	; (80025c0 <StartTelemetry2+0x1fc>)
 800259a:	f003 f861 	bl	8005660 <HAL_GPIO_WritePin>


	  //while(xSemaphoreGive(_SENSORS)!= pdTRUE) osDelay(10);

    osDelay(1000/SEND_FREQ);
 800259e:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <StartTelemetry2+0x24c>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00c fa2c 	bl	800ea0a <osDelay>
    osDelay(1000);
 80025b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025b6:	f00c fa28 	bl	800ea0a <osDelay>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 80025ba:	e711      	b.n	80023e0 <StartTelemetry2+0x1c>
 80025bc:	200053e0 	.word	0x200053e0
 80025c0:	40020800 	.word	0x40020800
 80025c4:	200003b8 	.word	0x200003b8
 80025c8:	200057f8 	.word	0x200057f8
 80025cc:	2000588c 	.word	0x2000588c
 80025d0:	200054b0 	.word	0x200054b0
 80025d4:	200003c4 	.word	0x200003c4
 80025d8:	200054a4 	.word	0x200054a4
 80025dc:	2000549c 	.word	0x2000549c
 80025e0:	20005500 	.word	0x20005500
 80025e4:	200003b0 	.word	0x200003b0
 80025e8:	200054a0 	.word	0x200054a0
 80025ec:	20005928 	.word	0x20005928
 80025f0:	20005398 	.word	0x20005398
 80025f4:	20005924 	.word	0x20005924
 80025f8:	200054a8 	.word	0x200054a8
 80025fc:	2000591c 	.word	0x2000591c
 8002600:	20005704 	.word	0x20005704
 8002604:	20005914 	.word	0x20005914
 8002608:	20005504 	.word	0x20005504
 800260c:	0801783c 	.word	0x0801783c
 8002610:	200003d4 	.word	0x200003d4

08002614 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//osThreadExit();

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 800261c:	f00c f9e4 	bl	800e9e8 <osThreadGetId>
 8002620:	4603      	mov	r3, r0
 8002622:	4a2f      	ldr	r2, [pc, #188]	; (80026e0 <StartSensors3+0xcc>)
 8002624:	60d3      	str	r3, [r2, #12]


	//Mutex
	while( (_SENSORS = xSemaphoreCreateMutex()) == NULL) osDelay(10);
 8002626:	e002      	b.n	800262e <StartSensors3+0x1a>
 8002628:	200a      	movs	r0, #10
 800262a:	f00c f9ee 	bl	800ea0a <osDelay>
 800262e:	2001      	movs	r0, #1
 8002630:	f00c fccb 	bl	800efca <xQueueCreateMutex>
 8002634:	4603      	mov	r3, r0
 8002636:	4a2b      	ldr	r2, [pc, #172]	; (80026e4 <StartSensors3+0xd0>)
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <StartSensors3+0xd0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f2      	beq.n	8002628 <StartSensors3+0x14>

  for(;;)
  {

	  while( xSemaphoreTake( _SENSORS, ( TickType_t ) 10 ) != pdTRUE ) {
 8002642:	e009      	b.n	8002658 <StartSensors3+0x44>
		  HAL_UART_Transmit(&DEBUG_USART,"No sense\r\n",10,HAL_MAX_DELAY);
 8002644:	f04f 33ff 	mov.w	r3, #4294967295
 8002648:	220a      	movs	r2, #10
 800264a:	4927      	ldr	r1, [pc, #156]	; (80026e8 <StartSensors3+0xd4>)
 800264c:	4827      	ldr	r0, [pc, #156]	; (80026ec <StartSensors3+0xd8>)
 800264e:	f008 f86c 	bl	800a72a <HAL_UART_Transmit>
		  osDelay(10);
 8002652:	200a      	movs	r0, #10
 8002654:	f00c f9d9 	bl	800ea0a <osDelay>
	  while( xSemaphoreTake( _SENSORS, ( TickType_t ) 10 ) != pdTRUE ) {
 8002658:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <StartSensors3+0xd0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	210a      	movs	r1, #10
 800265e:	4618      	mov	r0, r3
 8002660:	f00c ff60 	bl	800f524 <xQueueSemaphoreTake>
 8002664:	4603      	mov	r3, r0
 8002666:	2b01      	cmp	r3, #1
 8002668:	d1ec      	bne.n	8002644 <StartSensors3+0x30>
	  }


	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 800266a:	2201      	movs	r2, #1
 800266c:	2102      	movs	r1, #2
 800266e:	4820      	ldr	r0, [pc, #128]	; (80026f0 <StartSensors3+0xdc>)
 8002670:	f002 fff6 	bl	8005660 <HAL_GPIO_WritePin>



	  //GPS
	  GPS_Poll(&latitude, &longitude, &time);
 8002674:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <StartSensors3+0xe0>)
 8002676:	4920      	ldr	r1, [pc, #128]	; (80026f8 <StartSensors3+0xe4>)
 8002678:	4820      	ldr	r0, [pc, #128]	; (80026fc <StartSensors3+0xe8>)
 800267a:	f000 fd47 	bl	800310c <GPS_Poll>

  	  //LSM6DSR
  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 800267e:	4a20      	ldr	r2, [pc, #128]	; (8002700 <StartSensors3+0xec>)
 8002680:	4b20      	ldr	r3, [pc, #128]	; (8002704 <StartSensors3+0xf0>)
 8002682:	ca07      	ldmia	r2, {r0, r1, r2}
 8002684:	f7fe fdc4 	bl	8001210 <MRT_LSM6DSR_getAcceleration>
  	  /*
  	   * TODO NEEDS FILTERING BUT WORKS (maybe acceleration needs filtering too)
  	   */
  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 8002688:	4a1d      	ldr	r2, [pc, #116]	; (8002700 <StartSensors3+0xec>)
 800268a:	4b1f      	ldr	r3, [pc, #124]	; (8002708 <StartSensors3+0xf4>)
 800268c:	ca07      	ldmia	r2, {r0, r1, r2}
 800268e:	f7fe fe35 	bl	80012fc <MRT_LSM6DSR_getAngularRate>
	  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 8002692:	4a1b      	ldr	r2, [pc, #108]	; (8002700 <StartSensors3+0xec>)
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <StartSensors3+0xf8>)
 8002696:	ca07      	ldmia	r2, {r0, r1, r2}
 8002698:	f7fe fe00 	bl	800129c <MRT_LSM6DSR_getTemperature>


	  //LPS22HH
  	  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 800269c:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <StartSensors3+0xfc>)
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <StartSensors3+0x100>)
 80026a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80026a2:	f7fe ff29 	bl	80014f8 <MRT_LPS22HH_getPressure>
	  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 80026a6:	4a1a      	ldr	r2, [pc, #104]	; (8002710 <StartSensors3+0xfc>)
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <StartSensors3+0x104>)
 80026aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80026ac:	f7fe ff54 	bl	8001558 <MRT_LPS22HH_getTemperature>


	  //Thermocouple (don't have it)


	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 80026b0:	2200      	movs	r2, #0
 80026b2:	2102      	movs	r1, #2
 80026b4:	480e      	ldr	r0, [pc, #56]	; (80026f0 <StartSensors3+0xdc>)
 80026b6:	f002 ffd3 	bl	8005660 <HAL_GPIO_WritePin>

	  while(xSemaphoreGive(_SENSORS)!= pdTRUE) osDelay(10);
 80026ba:	e002      	b.n	80026c2 <StartSensors3+0xae>
 80026bc:	200a      	movs	r0, #10
 80026be:	f00c f9a4 	bl	800ea0a <osDelay>
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <StartSensors3+0xd0>)
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	2300      	movs	r3, #0
 80026c8:	2200      	movs	r2, #0
 80026ca:	2100      	movs	r1, #0
 80026cc:	f00c fcb0 	bl	800f030 <xQueueGenericSend>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d1f2      	bne.n	80026bc <StartSensors3+0xa8>

	  osDelay(1000);
 80026d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026da:	f00c f996 	bl	800ea0a <osDelay>
	  while( xSemaphoreTake( _SENSORS, ( TickType_t ) 10 ) != pdTRUE ) {
 80026de:	e7bb      	b.n	8002658 <StartSensors3+0x44>
 80026e0:	200053e0 	.word	0x200053e0
 80026e4:	20005288 	.word	0x20005288
 80026e8:	0801787c 	.word	0x0801787c
 80026ec:	20005804 	.word	0x20005804
 80026f0:	40020800 	.word	0x40020800
 80026f4:	200057f4 	.word	0x200057f4
 80026f8:	20005788 	.word	0x20005788
 80026fc:	20005890 	.word	0x20005890
 8002700:	200058f0 	.word	0x200058f0
 8002704:	200003b8 	.word	0x200003b8
 8002708:	200003c4 	.word	0x200003c4
 800270c:	200003d0 	.word	0x200003d0
 8002710:	200058e0 	.word	0x200058e0
 8002714:	200003b0 	.word	0x200003b0
 8002718:	200003b4 	.word	0x200003b4

0800271c <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	osThreadExit();
 8002724:	f00c f96b 	bl	800e9fe <osThreadExit>

08002728 <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b090      	sub	sp, #64	; 0x40
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrinting */

	osThreadExit();
 8002730:	f00c f965 	bl	800e9fe <osThreadExit>

08002734 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002746:	f002 f9fd 	bl	8004b44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40001000 	.word	0x40001000

08002758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_MspInit+0x54>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	4a11      	ldr	r2, [pc, #68]	; (80027bc <HAL_MspInit+0x54>)
 8002778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_MspInit+0x54>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_MspInit+0x54>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_MspInit+0x54>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <HAL_MspInit+0x54>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	210f      	movs	r1, #15
 80027aa:	f06f 0001 	mvn.w	r0, #1
 80027ae:	f002 fd5b 	bl	8005268 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800

080027c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a17      	ldr	r2, [pc, #92]	; (800283c <HAL_ADC_MspInit+0x7c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d127      	bne.n	8002832 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <HAL_ADC_MspInit+0x80>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	4a15      	ldr	r2, [pc, #84]	; (8002840 <HAL_ADC_MspInit+0x80>)
 80027ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f0:	6453      	str	r3, [r2, #68]	; 0x44
 80027f2:	4b13      	ldr	r3, [pc, #76]	; (8002840 <HAL_ADC_MspInit+0x80>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <HAL_ADC_MspInit+0x80>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <HAL_ADC_MspInit+0x80>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <HAL_ADC_MspInit+0x80>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800281a:	2340      	movs	r3, #64	; 0x40
 800281c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800281e:	2303      	movs	r3, #3
 8002820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	4619      	mov	r1, r3
 800282c:	4805      	ldr	r0, [pc, #20]	; (8002844 <HAL_ADC_MspInit+0x84>)
 800282e:	f002 fd53 	bl	80052d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002832:	bf00      	nop
 8002834:	3728      	adds	r7, #40	; 0x28
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40012000 	.word	0x40012000
 8002840:	40023800 	.word	0x40023800
 8002844:	40020000 	.word	0x40020000

08002848 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08e      	sub	sp, #56	; 0x38
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a5c      	ldr	r2, [pc, #368]	; (80029d8 <HAL_I2C_MspInit+0x190>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d12d      	bne.n	80028c6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	623b      	str	r3, [r7, #32]
 800286e:	4b5b      	ldr	r3, [pc, #364]	; (80029dc <HAL_I2C_MspInit+0x194>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a5a      	ldr	r2, [pc, #360]	; (80029dc <HAL_I2C_MspInit+0x194>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b58      	ldr	r3, [pc, #352]	; (80029dc <HAL_I2C_MspInit+0x194>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	623b      	str	r3, [r7, #32]
 8002884:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002886:	f44f 7340 	mov.w	r3, #768	; 0x300
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800288c:	2312      	movs	r3, #18
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002890:	2301      	movs	r3, #1
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002894:	2303      	movs	r3, #3
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002898:	2304      	movs	r3, #4
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a0:	4619      	mov	r1, r3
 80028a2:	484f      	ldr	r0, [pc, #316]	; (80029e0 <HAL_I2C_MspInit+0x198>)
 80028a4:	f002 fd18 	bl	80052d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
 80028ac:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <HAL_I2C_MspInit+0x194>)
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	4a4a      	ldr	r2, [pc, #296]	; (80029dc <HAL_I2C_MspInit+0x194>)
 80028b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028b6:	6413      	str	r3, [r2, #64]	; 0x40
 80028b8:	4b48      	ldr	r3, [pc, #288]	; (80029dc <HAL_I2C_MspInit+0x194>)
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80028c4:	e083      	b.n	80029ce <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a46      	ldr	r2, [pc, #280]	; (80029e4 <HAL_I2C_MspInit+0x19c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d12d      	bne.n	800292c <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	4b41      	ldr	r3, [pc, #260]	; (80029dc <HAL_I2C_MspInit+0x194>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	4a40      	ldr	r2, [pc, #256]	; (80029dc <HAL_I2C_MspInit+0x194>)
 80028da:	f043 0302 	orr.w	r3, r3, #2
 80028de:	6313      	str	r3, [r2, #48]	; 0x30
 80028e0:	4b3e      	ldr	r3, [pc, #248]	; (80029dc <HAL_I2C_MspInit+0x194>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f2:	2312      	movs	r3, #18
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028f6:	2301      	movs	r3, #1
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028fe:	2304      	movs	r3, #4
 8002900:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002906:	4619      	mov	r1, r3
 8002908:	4835      	ldr	r0, [pc, #212]	; (80029e0 <HAL_I2C_MspInit+0x198>)
 800290a:	f002 fce5 	bl	80052d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	4b32      	ldr	r3, [pc, #200]	; (80029dc <HAL_I2C_MspInit+0x194>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	4a31      	ldr	r2, [pc, #196]	; (80029dc <HAL_I2C_MspInit+0x194>)
 8002918:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800291c:	6413      	str	r3, [r2, #64]	; 0x40
 800291e:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <HAL_I2C_MspInit+0x194>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	697b      	ldr	r3, [r7, #20]
}
 800292a:	e050      	b.n	80029ce <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a2d      	ldr	r2, [pc, #180]	; (80029e8 <HAL_I2C_MspInit+0x1a0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d14b      	bne.n	80029ce <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	4b28      	ldr	r3, [pc, #160]	; (80029dc <HAL_I2C_MspInit+0x194>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a27      	ldr	r2, [pc, #156]	; (80029dc <HAL_I2C_MspInit+0x194>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
 8002946:	4b25      	ldr	r3, [pc, #148]	; (80029dc <HAL_I2C_MspInit+0x194>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <HAL_I2C_MspInit+0x194>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	4a20      	ldr	r2, [pc, #128]	; (80029dc <HAL_I2C_MspInit+0x194>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6313      	str	r3, [r2, #48]	; 0x30
 8002962:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <HAL_I2C_MspInit+0x194>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800296e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002974:	2312      	movs	r3, #18
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002978:	2301      	movs	r3, #1
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297c:	2303      	movs	r3, #3
 800297e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002980:	2304      	movs	r3, #4
 8002982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002988:	4619      	mov	r1, r3
 800298a:	4818      	ldr	r0, [pc, #96]	; (80029ec <HAL_I2C_MspInit+0x1a4>)
 800298c:	f002 fca4 	bl	80052d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002996:	2312      	movs	r3, #18
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299a:	2301      	movs	r3, #1
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299e:	2303      	movs	r3, #3
 80029a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029a2:	2304      	movs	r3, #4
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029aa:	4619      	mov	r1, r3
 80029ac:	4810      	ldr	r0, [pc, #64]	; (80029f0 <HAL_I2C_MspInit+0x1a8>)
 80029ae:	f002 fc93 	bl	80052d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_I2C_MspInit+0x194>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a08      	ldr	r2, [pc, #32]	; (80029dc <HAL_I2C_MspInit+0x194>)
 80029bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_I2C_MspInit+0x194>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
}
 80029ce:	bf00      	nop
 80029d0:	3738      	adds	r7, #56	; 0x38
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40005400 	.word	0x40005400
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40020400 	.word	0x40020400
 80029e4:	40005800 	.word	0x40005800
 80029e8:	40005c00 	.word	0x40005c00
 80029ec:	40020800 	.word	0x40020800
 80029f0:	40020000 	.word	0x40020000

080029f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08e      	sub	sp, #56	; 0x38
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029fc:	f107 0308 	add.w	r3, r7, #8
 8002a00:	2230      	movs	r2, #48	; 0x30
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f00f fecb 	bl	80127a0 <memset>
  if(hrtc->Instance==RTC)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <HAL_RTC_MspInit+0x5c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d119      	bne.n	8002a48 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a14:	2320      	movs	r3, #32
 8002a16:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a1c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	4618      	mov	r0, r3
 8002a24:	f005 fe10 	bl	8008648 <HAL_RCCEx_PeriphCLKConfig>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002a2e:	f7ff fe93 	bl	8002758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a32:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <HAL_RTC_MspInit+0x60>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2105      	movs	r1, #5
 8002a3c:	2029      	movs	r0, #41	; 0x29
 8002a3e:	f002 fc13 	bl	8005268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002a42:	2029      	movs	r0, #41	; 0x29
 8002a44:	f002 fc2c 	bl	80052a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a48:	bf00      	nop
 8002a4a:	3738      	adds	r7, #56	; 0x38
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40002800 	.word	0x40002800
 8002a54:	42470e3c 	.word	0x42470e3c

08002a58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08e      	sub	sp, #56	; 0x38
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a4c      	ldr	r2, [pc, #304]	; (8002ba8 <HAL_SPI_MspInit+0x150>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d12d      	bne.n	8002ad6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	623b      	str	r3, [r7, #32]
 8002a7e:	4b4b      	ldr	r3, [pc, #300]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a4a      	ldr	r2, [pc, #296]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b48      	ldr	r3, [pc, #288]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a92:	623b      	str	r3, [r7, #32]
 8002a94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	4b44      	ldr	r3, [pc, #272]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	4a43      	ldr	r2, [pc, #268]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002aa0:	f043 0302 	orr.w	r3, r3, #2
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa6:	4b41      	ldr	r3, [pc, #260]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ab2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ac4:	2305      	movs	r3, #5
 8002ac6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002acc:	4619      	mov	r1, r3
 8002ace:	4838      	ldr	r0, [pc, #224]	; (8002bb0 <HAL_SPI_MspInit+0x158>)
 8002ad0:	f002 fc02 	bl	80052d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002ad4:	e064      	b.n	8002ba0 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a36      	ldr	r2, [pc, #216]	; (8002bb4 <HAL_SPI_MspInit+0x15c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d12d      	bne.n	8002b3c <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae8:	4a30      	ldr	r2, [pc, #192]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002aea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002aee:	6453      	str	r3, [r2, #68]	; 0x44
 8002af0:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	4a29      	ldr	r2, [pc, #164]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002b06:	f043 0310 	orr.w	r3, r3, #16
 8002b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0c:	4b27      	ldr	r3, [pc, #156]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002b18:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002b2a:	2305      	movs	r3, #5
 8002b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b32:	4619      	mov	r1, r3
 8002b34:	4820      	ldr	r0, [pc, #128]	; (8002bb8 <HAL_SPI_MspInit+0x160>)
 8002b36:	f002 fbcf 	bl	80052d8 <HAL_GPIO_Init>
}
 8002b3a:	e031      	b.n	8002ba0 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <HAL_SPI_MspInit+0x164>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d12c      	bne.n	8002ba0 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	4a17      	ldr	r2, [pc, #92]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b54:	6453      	str	r3, [r2, #68]	; 0x44
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	4a10      	ldr	r2, [pc, #64]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002b6c:	f043 0320 	orr.w	r3, r3, #32
 8002b70:	6313      	str	r3, [r2, #48]	; 0x30
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <HAL_SPI_MspInit+0x154>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002b7e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002b90:	2305      	movs	r3, #5
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4809      	ldr	r0, [pc, #36]	; (8002bc0 <HAL_SPI_MspInit+0x168>)
 8002b9c:	f002 fb9c 	bl	80052d8 <HAL_GPIO_Init>
}
 8002ba0:	bf00      	nop
 8002ba2:	3738      	adds	r7, #56	; 0x38
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40003800 	.word	0x40003800
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	40013400 	.word	0x40013400
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40015000 	.word	0x40015000
 8002bc0:	40021400 	.word	0x40021400

08002bc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d10d      	bne.n	8002bf2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <HAL_TIM_PWM_MspInit+0x3c>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_TIM_PWM_MspInit+0x3c>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800

08002c04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c24:	d11d      	bne.n	8002c62 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <HAL_TIM_MspPostInit+0x68>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	4a0f      	ldr	r2, [pc, #60]	; (8002c6c <HAL_TIM_MspPostInit+0x68>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6313      	str	r3, [r2, #48]	; 0x30
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <HAL_TIM_MspPostInit+0x68>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002c42:	2304      	movs	r3, #4
 8002c44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c52:	2301      	movs	r3, #1
 8002c54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002c56:	f107 030c 	add.w	r3, r7, #12
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4804      	ldr	r0, [pc, #16]	; (8002c70 <HAL_TIM_MspPostInit+0x6c>)
 8002c5e:	f002 fb3b 	bl	80052d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c62:	bf00      	nop
 8002c64:	3720      	adds	r7, #32
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40020000 	.word	0x40020000

08002c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08e      	sub	sp, #56	; 0x38
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a4b      	ldr	r2, [pc, #300]	; (8002dc0 <HAL_UART_MspInit+0x14c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d12c      	bne.n	8002cf0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	623b      	str	r3, [r7, #32]
 8002c9a:	4b4a      	ldr	r3, [pc, #296]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a49      	ldr	r2, [pc, #292]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002ca0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cae:	623b      	str	r3, [r7, #32]
 8002cb0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	4b43      	ldr	r3, [pc, #268]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	4a42      	ldr	r2, [pc, #264]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002cbc:	f043 0310 	orr.w	r3, r3, #16
 8002cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc2:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	61fb      	str	r3, [r7, #28]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002cde:	2308      	movs	r3, #8
 8002ce0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4837      	ldr	r0, [pc, #220]	; (8002dc8 <HAL_UART_MspInit+0x154>)
 8002cea:	f002 faf5 	bl	80052d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cee:	e063      	b.n	8002db8 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a35      	ldr	r2, [pc, #212]	; (8002dcc <HAL_UART_MspInit+0x158>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d12d      	bne.n	8002d56 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d08:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0a:	4b2e      	ldr	r3, [pc, #184]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a29      	ldr	r2, [pc, #164]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002d20:	f043 0308 	orr.w	r3, r3, #8
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002d32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d40:	2303      	movs	r3, #3
 8002d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d44:	2307      	movs	r3, #7
 8002d46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4820      	ldr	r0, [pc, #128]	; (8002dd0 <HAL_UART_MspInit+0x15c>)
 8002d50:	f002 fac2 	bl	80052d8 <HAL_GPIO_Init>
}
 8002d54:	e030      	b.n	8002db8 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <HAL_UART_MspInit+0x160>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d12b      	bne.n	8002db8 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d60:	2300      	movs	r3, #0
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	4a16      	ldr	r2, [pc, #88]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002d6a:	f043 0320 	orr.w	r3, r3, #32
 8002d6e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d70:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	4a0f      	ldr	r2, [pc, #60]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002d86:	f043 0304 	orr.w	r3, r3, #4
 8002d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002d98:	23c0      	movs	r3, #192	; 0xc0
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da4:	2303      	movs	r3, #3
 8002da6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002da8:	2308      	movs	r3, #8
 8002daa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db0:	4619      	mov	r1, r3
 8002db2:	4809      	ldr	r0, [pc, #36]	; (8002dd8 <HAL_UART_MspInit+0x164>)
 8002db4:	f002 fa90 	bl	80052d8 <HAL_GPIO_Init>
}
 8002db8:	bf00      	nop
 8002dba:	3738      	adds	r7, #56	; 0x38
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40007c00 	.word	0x40007c00
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40004800 	.word	0x40004800
 8002dd0:	40020c00 	.word	0x40020c00
 8002dd4:	40011400 	.word	0x40011400
 8002dd8:	40020800 	.word	0x40020800

08002ddc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08c      	sub	sp, #48	; 0x30
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	2036      	movs	r0, #54	; 0x36
 8002df2:	f002 fa39 	bl	8005268 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002df6:	2036      	movs	r0, #54	; 0x36
 8002df8:	f002 fa52 	bl	80052a0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	4b1f      	ldr	r3, [pc, #124]	; (8002e80 <HAL_InitTick+0xa4>)
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	4a1e      	ldr	r2, [pc, #120]	; (8002e80 <HAL_InitTick+0xa4>)
 8002e06:	f043 0310 	orr.w	r3, r3, #16
 8002e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0c:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <HAL_InitTick+0xa4>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e18:	f107 0210 	add.w	r2, r7, #16
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f005 fbde 	bl	80085e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002e28:	f005 fbb4 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <HAL_InitTick+0xa8>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	0c9b      	lsrs	r3, r3, #18
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_InitTick+0xac>)
 8002e42:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <HAL_InitTick+0xb0>)
 8002e44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <HAL_InitTick+0xac>)
 8002e48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e4c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e4e:	4a0e      	ldr	r2, [pc, #56]	; (8002e88 <HAL_InitTick+0xac>)
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <HAL_InitTick+0xac>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_InitTick+0xac>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e60:	4809      	ldr	r0, [pc, #36]	; (8002e88 <HAL_InitTick+0xac>)
 8002e62:	f006 fe29 	bl	8009ab8 <HAL_TIM_Base_Init>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e6c:	4806      	ldr	r0, [pc, #24]	; (8002e88 <HAL_InitTick+0xac>)
 8002e6e:	f006 fe7d 	bl	8009b6c <HAL_TIM_Base_Start_IT>
 8002e72:	4603      	mov	r3, r0
 8002e74:	e000      	b.n	8002e78 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3730      	adds	r7, #48	; 0x30
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40023800 	.word	0x40023800
 8002e84:	431bde83 	.word	0x431bde83
 8002e88:	20005934 	.word	0x20005934
 8002e8c:	40001000 	.word	0x40001000

08002e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea2:	e7fe      	b.n	8002ea2 <HardFault_Handler+0x4>

08002ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ea8:	e7fe      	b.n	8002ea8 <MemManage_Handler+0x4>

08002eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eae:	e7fe      	b.n	8002eae <BusFault_Handler+0x4>

08002eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eb4:	e7fe      	b.n	8002eb4 <UsageFault_Handler+0x4>

08002eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <RTC_Alarm_IRQHandler+0x10>)
 8002eca:	f006 f8a9 	bl	8009020 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20005764 	.word	0x20005764

08002ed8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002edc:	4802      	ldr	r0, [pc, #8]	; (8002ee8 <TIM6_DAC_IRQHandler+0x10>)
 8002ede:	f006 ff04 	bl	8009cea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20005934 	.word	0x20005934

08002eec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002ef0:	4802      	ldr	r0, [pc, #8]	; (8002efc <OTG_FS_IRQHandler+0x10>)
 8002ef2:	f003 febd 	bl	8006c70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20006f98 	.word	0x20006f98

08002f00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
	return 1;
 8002f04:	2301      	movs	r3, #1
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <_kill>:

int _kill(int pid, int sig)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f1a:	f00f fae5 	bl	80124e8 <__errno>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2216      	movs	r2, #22
 8002f22:	601a      	str	r2, [r3, #0]
	return -1;
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <_exit>:

void _exit (int status)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f38:	f04f 31ff 	mov.w	r1, #4294967295
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ffe7 	bl	8002f10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f42:	e7fe      	b.n	8002f42 <_exit+0x12>

08002f44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	e00a      	b.n	8002f6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f56:	f3af 8000 	nop.w
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	60ba      	str	r2, [r7, #8]
 8002f62:	b2ca      	uxtb	r2, r1
 8002f64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	dbf0      	blt.n	8002f56 <_read+0x12>
	}

return len;
 8002f74:	687b      	ldr	r3, [r7, #4]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e009      	b.n	8002fa4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	60ba      	str	r2, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	dbf1      	blt.n	8002f90 <_write+0x12>
	}
	return len;
 8002fac:	687b      	ldr	r3, [r7, #4]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <_close>:

int _close(int file)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
	return -1;
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fde:	605a      	str	r2, [r3, #4]
	return 0;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <_isatty>:

int _isatty(int file)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ff6:	2301      	movs	r3, #1
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
	return 0;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003028:	4a14      	ldr	r2, [pc, #80]	; (800307c <_sbrk+0x5c>)
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <_sbrk+0x60>)
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <_sbrk+0x64>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <_sbrk+0x64>)
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <_sbrk+0x68>)
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <_sbrk+0x64>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	429a      	cmp	r2, r3
 800304e:	d207      	bcs.n	8003060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003050:	f00f fa4a 	bl	80124e8 <__errno>
 8003054:	4603      	mov	r3, r0
 8003056:	220c      	movs	r2, #12
 8003058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
 800305e:	e009      	b.n	8003074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <_sbrk+0x64>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	4a05      	ldr	r2, [pc, #20]	; (8003084 <_sbrk+0x64>)
 8003070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20030000 	.word	0x20030000
 8003080:	00000400 	.word	0x00000400
 8003084:	200003d8 	.word	0x200003d8
 8003088:	200073b0 	.word	0x200073b0

0800308c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <SystemInit+0x28>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <SystemInit+0x28>)
 8003098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800309c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <SystemInit+0x28>)
 80030a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030a6:	609a      	str	r2, [r3, #8]
#endif
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030be:	e003      	b.n	80030c8 <LoopCopyDataInit>

080030c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030c6:	3104      	adds	r1, #4

080030c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030c8:	480b      	ldr	r0, [pc, #44]	; (80030f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030d0:	d3f6      	bcc.n	80030c0 <CopyDataInit>
  ldr  r2, =_sbss
 80030d2:	4a0b      	ldr	r2, [pc, #44]	; (8003100 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030d4:	e002      	b.n	80030dc <LoopFillZerobss>

080030d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030d8:	f842 3b04 	str.w	r3, [r2], #4

080030dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030e0:	d3f9      	bcc.n	80030d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030e2:	f7ff ffd3 	bl	800308c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030e6:	f00f fafb 	bl	80126e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ea:	f7fe fa9f 	bl	800162c <main>
  bx  lr    
 80030ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030f0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80030f4:	080181a4 	.word	0x080181a4
  ldr  r0, =_sdata
 80030f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030fc:	20000378 	.word	0x20000378
  ldr  r2, =_sbss
 8003100:	20000378 	.word	0x20000378
  ldr  r3, = _ebss
 8003104:	200073b0 	.word	0x200073b0

08003108 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003108:	e7fe      	b.n	8003108 <ADC_IRQHandler>
	...

0800310c <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08c      	sub	sp, #48	; 0x30
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8003118:	2364      	movs	r3, #100	; 0x64
 800311a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8003124:	e073      	b.n	800320e <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 8003126:	4b3f      	ldr	r3, [pc, #252]	; (8003224 <GPS_Poll+0x118>)
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	2364      	movs	r3, #100	; 0x64
 800312c:	2201      	movs	r2, #1
 800312e:	493e      	ldr	r1, [pc, #248]	; (8003228 <GPS_Poll+0x11c>)
 8003130:	f007 fb8d 	bl	800a84e <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8003134:	4b3c      	ldr	r3, [pc, #240]	; (8003228 <GPS_Poll+0x11c>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b0a      	cmp	r3, #10
 800313a:	d00f      	beq.n	800315c <GPS_Poll+0x50>
 800313c:	4b3b      	ldr	r3, [pc, #236]	; (800322c <GPS_Poll+0x120>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b63      	cmp	r3, #99	; 0x63
 8003142:	d80b      	bhi.n	800315c <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8003144:	4b39      	ldr	r3, [pc, #228]	; (800322c <GPS_Poll+0x120>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	b2d1      	uxtb	r1, r2
 800314c:	4a37      	ldr	r2, [pc, #220]	; (800322c <GPS_Poll+0x120>)
 800314e:	7011      	strb	r1, [r2, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b35      	ldr	r3, [pc, #212]	; (8003228 <GPS_Poll+0x11c>)
 8003154:	7819      	ldrb	r1, [r3, #0]
 8003156:	4b36      	ldr	r3, [pc, #216]	; (8003230 <GPS_Poll+0x124>)
 8003158:	5499      	strb	r1, [r3, r2]
 800315a:	e021      	b.n	80031a0 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 800315c:	4834      	ldr	r0, [pc, #208]	; (8003230 <GPS_Poll+0x124>)
 800315e:	f000 f86b 	bl	8003238 <GPS_validate>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8003168:	4831      	ldr	r0, [pc, #196]	; (8003230 <GPS_Poll+0x124>)
 800316a:	f000 f8c7 	bl	80032fc <GPS_parse>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00d      	beq.n	8003190 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8003174:	4b2f      	ldr	r3, [pc, #188]	; (8003234 <GPS_Poll+0x128>)
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 800317c:	4b2d      	ldr	r3, [pc, #180]	; (8003234 <GPS_Poll+0x128>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8003184:	4b2b      	ldr	r3, [pc, #172]	; (8003234 <GPS_Poll+0x128>)
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	601a      	str	r2, [r3, #0]
					done = 1;
 800318c:	2301      	movs	r3, #1
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8003190:	4b26      	ldr	r3, [pc, #152]	; (800322c <GPS_Poll+0x120>)
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8003196:	2264      	movs	r2, #100	; 0x64
 8003198:	2100      	movs	r1, #0
 800319a:	4825      	ldr	r0, [pc, #148]	; (8003230 <GPS_Poll+0x124>)
 800319c:	f00f fb00 	bl	80127a0 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 80031a0:	2300      	movs	r3, #0
 80031a2:	623b      	str	r3, [r7, #32]
 80031a4:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <GPS_Poll+0x118>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	623b      	str	r3, [r7, #32]
 80031ae:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <GPS_Poll+0x118>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	623b      	str	r3, [r7, #32]
 80031b8:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	4b19      	ldr	r3, [pc, #100]	; (8003224 <GPS_Poll+0x118>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	4b16      	ldr	r3, [pc, #88]	; (8003224 <GPS_Poll+0x118>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 80031d4:	2300      	movs	r3, #0
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	4b12      	ldr	r3, [pc, #72]	; (8003224 <GPS_Poll+0x118>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	4b10      	ldr	r3, [pc, #64]	; (8003224 <GPS_Poll+0x118>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <GPS_Poll+0x118>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	4b09      	ldr	r3, [pc, #36]	; (8003224 <GPS_Poll+0x118>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8003208:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800320a:	3301      	adds	r3, #1
 800320c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 800320e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003210:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003212:	429a      	cmp	r2, r3
 8003214:	d202      	bcs.n	800321c <GPS_Poll+0x110>
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	2b00      	cmp	r3, #0
 800321a:	d084      	beq.n	8003126 <GPS_Poll+0x1a>
	}
}
 800321c:	bf00      	nop
 800321e:	3730      	adds	r7, #48	; 0x30
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20005338 	.word	0x20005338
 8003228:	200003dc 	.word	0x200003dc
 800322c:	200003dd 	.word	0x200003dd
 8003230:	200059d4 	.word	0x200059d4
 8003234:	2000597c 	.word	0x2000597c

08003238 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8003244:	2300      	movs	r3, #0
 8003246:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b24      	cmp	r3, #36	; 0x24
 8003252:	d103      	bne.n	800325c <GPS_validate+0x24>
        i++;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	3301      	adds	r3, #1
 8003258:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800325a:	e00c      	b.n	8003276 <GPS_validate+0x3e>
        return 0;
 800325c:	2300      	movs	r3, #0
 800325e:	e047      	b.n	80032f0 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4053      	eors	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        i++;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3301      	adds	r3, #1
 8003274:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <GPS_validate+0x5c>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	4413      	add	r3, r2
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b2a      	cmp	r3, #42	; 0x2a
 800328c:	d002      	beq.n	8003294 <GPS_validate+0x5c>
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2b4a      	cmp	r3, #74	; 0x4a
 8003292:	dde5      	ble.n	8003260 <GPS_validate+0x28>
    }

    if(i >= 75){
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b4a      	cmp	r3, #74	; 0x4a
 8003298:	dd01      	ble.n	800329e <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800329a:	2300      	movs	r3, #0
 800329c:	e028      	b.n	80032f0 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b2a      	cmp	r3, #42	; 0x2a
 80032a8:	d119      	bne.n	80032de <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	3301      	adds	r3, #1
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	3302      	adds	r3, #2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80032c6:	f107 0308 	add.w	r3, r7, #8
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	490a      	ldr	r1, [pc, #40]	; (80032f8 <GPS_validate+0xc0>)
 80032ce:	4618      	mov	r0, r3
 80032d0:	f010 fa56 	bl	8013780 <siprintf>
    return((checkcalcstr[0] == check[0])
 80032d4:	7a3a      	ldrb	r2, [r7, #8]
 80032d6:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80032d8:	429a      	cmp	r2, r3
 80032da:	d108      	bne.n	80032ee <GPS_validate+0xb6>
 80032dc:	e001      	b.n	80032e2 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80032de:	2300      	movs	r3, #0
 80032e0:	e006      	b.n	80032f0 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80032e2:	7a7a      	ldrb	r2, [r7, #9]
 80032e4:	7b7b      	ldrb	r3, [r7, #13]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d101      	bne.n	80032ee <GPS_validate+0xb6>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <GPS_validate+0xb8>
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	08017888 	.word	0x08017888

080032fc <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af08      	add	r7, sp, #32
 8003302:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8003304:	2206      	movs	r2, #6
 8003306:	496d      	ldr	r1, [pc, #436]	; (80034bc <GPS_parse+0x1c0>)
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f010 faca 	bl	80138a2 <strncmp>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d139      	bne.n	8003388 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8003314:	4b6a      	ldr	r3, [pc, #424]	; (80034c0 <GPS_parse+0x1c4>)
 8003316:	9307      	str	r3, [sp, #28]
 8003318:	4b6a      	ldr	r3, [pc, #424]	; (80034c4 <GPS_parse+0x1c8>)
 800331a:	9306      	str	r3, [sp, #24]
 800331c:	4b6a      	ldr	r3, [pc, #424]	; (80034c8 <GPS_parse+0x1cc>)
 800331e:	9305      	str	r3, [sp, #20]
 8003320:	4b6a      	ldr	r3, [pc, #424]	; (80034cc <GPS_parse+0x1d0>)
 8003322:	9304      	str	r3, [sp, #16]
 8003324:	4b6a      	ldr	r3, [pc, #424]	; (80034d0 <GPS_parse+0x1d4>)
 8003326:	9303      	str	r3, [sp, #12]
 8003328:	4b6a      	ldr	r3, [pc, #424]	; (80034d4 <GPS_parse+0x1d8>)
 800332a:	9302      	str	r3, [sp, #8]
 800332c:	4b6a      	ldr	r3, [pc, #424]	; (80034d8 <GPS_parse+0x1dc>)
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	4b6a      	ldr	r3, [pc, #424]	; (80034dc <GPS_parse+0x1e0>)
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <GPS_parse+0x1e4>)
 8003336:	4a6b      	ldr	r2, [pc, #428]	; (80034e4 <GPS_parse+0x1e8>)
 8003338:	496b      	ldr	r1, [pc, #428]	; (80034e8 <GPS_parse+0x1ec>)
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f010 fa40 	bl	80137c0 <siscanf>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	f340 80b5 	ble.w	80034b2 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003348:	4b68      	ldr	r3, [pc, #416]	; (80034ec <GPS_parse+0x1f0>)
 800334a:	edd3 7a04 	vldr	s15, [r3, #16]
 800334e:	4b67      	ldr	r3, [pc, #412]	; (80034ec <GPS_parse+0x1f0>)
 8003350:	7e1b      	ldrb	r3, [r3, #24]
 8003352:	4618      	mov	r0, r3
 8003354:	eeb0 0a67 	vmov.f32	s0, s15
 8003358:	f000 f8ec 	bl	8003534 <GPS_nmea_to_dec>
 800335c:	eef0 7a40 	vmov.f32	s15, s0
 8003360:	4b62      	ldr	r3, [pc, #392]	; (80034ec <GPS_parse+0x1f0>)
 8003362:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003366:	4b61      	ldr	r3, [pc, #388]	; (80034ec <GPS_parse+0x1f0>)
 8003368:	edd3 7a03 	vldr	s15, [r3, #12]
 800336c:	4b5f      	ldr	r3, [pc, #380]	; (80034ec <GPS_parse+0x1f0>)
 800336e:	7e5b      	ldrb	r3, [r3, #25]
 8003370:	4618      	mov	r0, r3
 8003372:	eeb0 0a67 	vmov.f32	s0, s15
 8003376:	f000 f8dd 	bl	8003534 <GPS_nmea_to_dec>
 800337a:	eef0 7a40 	vmov.f32	s15, s0
 800337e:	4b5b      	ldr	r3, [pc, #364]	; (80034ec <GPS_parse+0x1f0>)
 8003380:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8003384:	2301      	movs	r3, #1
 8003386:	e095      	b.n	80034b4 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8003388:	2206      	movs	r2, #6
 800338a:	4959      	ldr	r1, [pc, #356]	; (80034f0 <GPS_parse+0x1f4>)
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f010 fa88 	bl	80138a2 <strncmp>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d134      	bne.n	8003402 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8003398:	4b56      	ldr	r3, [pc, #344]	; (80034f4 <GPS_parse+0x1f8>)
 800339a:	9305      	str	r3, [sp, #20]
 800339c:	4b56      	ldr	r3, [pc, #344]	; (80034f8 <GPS_parse+0x1fc>)
 800339e:	9304      	str	r3, [sp, #16]
 80033a0:	4b56      	ldr	r3, [pc, #344]	; (80034fc <GPS_parse+0x200>)
 80033a2:	9303      	str	r3, [sp, #12]
 80033a4:	4b4b      	ldr	r3, [pc, #300]	; (80034d4 <GPS_parse+0x1d8>)
 80033a6:	9302      	str	r3, [sp, #8]
 80033a8:	4b4b      	ldr	r3, [pc, #300]	; (80034d8 <GPS_parse+0x1dc>)
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	4b4b      	ldr	r3, [pc, #300]	; (80034dc <GPS_parse+0x1e0>)
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	4b4b      	ldr	r3, [pc, #300]	; (80034e0 <GPS_parse+0x1e4>)
 80033b2:	4a4c      	ldr	r2, [pc, #304]	; (80034e4 <GPS_parse+0x1e8>)
 80033b4:	4952      	ldr	r1, [pc, #328]	; (8003500 <GPS_parse+0x204>)
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f010 fa02 	bl	80137c0 <siscanf>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	dd77      	ble.n	80034b2 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80033c2:	4b4a      	ldr	r3, [pc, #296]	; (80034ec <GPS_parse+0x1f0>)
 80033c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80033c8:	4b48      	ldr	r3, [pc, #288]	; (80034ec <GPS_parse+0x1f0>)
 80033ca:	7e1b      	ldrb	r3, [r3, #24]
 80033cc:	4618      	mov	r0, r3
 80033ce:	eeb0 0a67 	vmov.f32	s0, s15
 80033d2:	f000 f8af 	bl	8003534 <GPS_nmea_to_dec>
 80033d6:	eef0 7a40 	vmov.f32	s15, s0
 80033da:	4b44      	ldr	r3, [pc, #272]	; (80034ec <GPS_parse+0x1f0>)
 80033dc:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80033e0:	4b42      	ldr	r3, [pc, #264]	; (80034ec <GPS_parse+0x1f0>)
 80033e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <GPS_parse+0x1f0>)
 80033e8:	7e5b      	ldrb	r3, [r3, #25]
 80033ea:	4618      	mov	r0, r3
 80033ec:	eeb0 0a67 	vmov.f32	s0, s15
 80033f0:	f000 f8a0 	bl	8003534 <GPS_nmea_to_dec>
 80033f4:	eef0 7a40 	vmov.f32	s15, s0
 80033f8:	4b3c      	ldr	r3, [pc, #240]	; (80034ec <GPS_parse+0x1f0>)
 80033fa:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80033fe:	2301      	movs	r3, #1
 8003400:	e058      	b.n	80034b4 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8003402:	2206      	movs	r2, #6
 8003404:	493f      	ldr	r1, [pc, #252]	; (8003504 <GPS_parse+0x208>)
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f010 fa4b 	bl	80138a2 <strncmp>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d130      	bne.n	8003474 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8003412:	4b3d      	ldr	r3, [pc, #244]	; (8003508 <GPS_parse+0x20c>)
 8003414:	9303      	str	r3, [sp, #12]
 8003416:	4b33      	ldr	r3, [pc, #204]	; (80034e4 <GPS_parse+0x1e8>)
 8003418:	9302      	str	r3, [sp, #8]
 800341a:	4b2e      	ldr	r3, [pc, #184]	; (80034d4 <GPS_parse+0x1d8>)
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	4b2e      	ldr	r3, [pc, #184]	; (80034d8 <GPS_parse+0x1dc>)
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	4b2e      	ldr	r3, [pc, #184]	; (80034dc <GPS_parse+0x1e0>)
 8003424:	4a2e      	ldr	r2, [pc, #184]	; (80034e0 <GPS_parse+0x1e4>)
 8003426:	4939      	ldr	r1, [pc, #228]	; (800350c <GPS_parse+0x210>)
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f010 f9c9 	bl	80137c0 <siscanf>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	dd3e      	ble.n	80034b2 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003434:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <GPS_parse+0x1f0>)
 8003436:	edd3 7a04 	vldr	s15, [r3, #16]
 800343a:	4b2c      	ldr	r3, [pc, #176]	; (80034ec <GPS_parse+0x1f0>)
 800343c:	7e1b      	ldrb	r3, [r3, #24]
 800343e:	4618      	mov	r0, r3
 8003440:	eeb0 0a67 	vmov.f32	s0, s15
 8003444:	f000 f876 	bl	8003534 <GPS_nmea_to_dec>
 8003448:	eef0 7a40 	vmov.f32	s15, s0
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <GPS_parse+0x1f0>)
 800344e:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003452:	4b26      	ldr	r3, [pc, #152]	; (80034ec <GPS_parse+0x1f0>)
 8003454:	edd3 7a03 	vldr	s15, [r3, #12]
 8003458:	4b24      	ldr	r3, [pc, #144]	; (80034ec <GPS_parse+0x1f0>)
 800345a:	7e5b      	ldrb	r3, [r3, #25]
 800345c:	4618      	mov	r0, r3
 800345e:	eeb0 0a67 	vmov.f32	s0, s15
 8003462:	f000 f867 	bl	8003534 <GPS_nmea_to_dec>
 8003466:	eef0 7a40 	vmov.f32	s15, s0
 800346a:	4b20      	ldr	r3, [pc, #128]	; (80034ec <GPS_parse+0x1f0>)
 800346c:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8003470:	2301      	movs	r3, #1
 8003472:	e01f      	b.n	80034b4 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8003474:	2206      	movs	r2, #6
 8003476:	4926      	ldr	r1, [pc, #152]	; (8003510 <GPS_parse+0x214>)
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f010 fa12 	bl	80138a2 <strncmp>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d116      	bne.n	80034b2 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8003484:	4b23      	ldr	r3, [pc, #140]	; (8003514 <GPS_parse+0x218>)
 8003486:	9305      	str	r3, [sp, #20]
 8003488:	4b23      	ldr	r3, [pc, #140]	; (8003518 <GPS_parse+0x21c>)
 800348a:	9304      	str	r3, [sp, #16]
 800348c:	4b23      	ldr	r3, [pc, #140]	; (800351c <GPS_parse+0x220>)
 800348e:	9303      	str	r3, [sp, #12]
 8003490:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <GPS_parse+0x200>)
 8003492:	9302      	str	r3, [sp, #8]
 8003494:	4b22      	ldr	r3, [pc, #136]	; (8003520 <GPS_parse+0x224>)
 8003496:	9301      	str	r3, [sp, #4]
 8003498:	4b22      	ldr	r3, [pc, #136]	; (8003524 <GPS_parse+0x228>)
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	4b22      	ldr	r3, [pc, #136]	; (8003528 <GPS_parse+0x22c>)
 800349e:	4a23      	ldr	r2, [pc, #140]	; (800352c <GPS_parse+0x230>)
 80034a0:	4923      	ldr	r1, [pc, #140]	; (8003530 <GPS_parse+0x234>)
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f010 f98c 	bl	80137c0 <siscanf>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	dd01      	ble.n	80034b2 <GPS_parse+0x1b6>
            return 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e000      	b.n	80034b4 <GPS_parse+0x1b8>
    }
    return 0;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	08017890 	.word	0x08017890
 80034c0:	200059a8 	.word	0x200059a8
 80034c4:	200059a4 	.word	0x200059a4
 80034c8:	200059a0 	.word	0x200059a0
 80034cc:	2000599c 	.word	0x2000599c
 80034d0:	20005998 	.word	0x20005998
 80034d4:	20005995 	.word	0x20005995
 80034d8:	20005988 	.word	0x20005988
 80034dc:	20005994 	.word	0x20005994
 80034e0:	2000598c 	.word	0x2000598c
 80034e4:	20005990 	.word	0x20005990
 80034e8:	08017898 	.word	0x08017898
 80034ec:	2000597c 	.word	0x2000597c
 80034f0:	080178c0 	.word	0x080178c0
 80034f4:	200059b4 	.word	0x200059b4
 80034f8:	200059b0 	.word	0x200059b0
 80034fc:	200059ac 	.word	0x200059ac
 8003500:	080178c8 	.word	0x080178c8
 8003504:	080178e8 	.word	0x080178e8
 8003508:	200059b8 	.word	0x200059b8
 800350c:	080178f0 	.word	0x080178f0
 8003510:	0801790c 	.word	0x0801790c
 8003514:	200059d0 	.word	0x200059d0
 8003518:	200059cc 	.word	0x200059cc
 800351c:	200059c9 	.word	0x200059c9
 8003520:	200059c8 	.word	0x200059c8
 8003524:	200059c4 	.word	0x200059c4
 8003528:	200059c0 	.word	0x200059c0
 800352c:	200059bc 	.word	0x200059bc
 8003530:	08017914 	.word	0x08017914

08003534 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	ed87 0a01 	vstr	s0, [r7, #4]
 800353e:	4603      	mov	r3, r0
 8003540:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8003542:	ed97 7a01 	vldr	s14, [r7, #4]
 8003546:	eddf 6a20 	vldr	s13, [pc, #128]	; 80035c8 <GPS_nmea_to_dec+0x94>
 800354a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800354e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003552:	ee17 3a90 	vmov	r3, s15
 8003556:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2264      	movs	r2, #100	; 0x64
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	ee07 3a90 	vmov	s15, r3
 8003564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003568:	ed97 7a01 	vldr	s14, [r7, #4]
 800356c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003570:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8003574:	ed97 7a03 	vldr	s14, [r7, #12]
 8003578:	eddf 6a14 	vldr	s13, [pc, #80]	; 80035cc <GPS_nmea_to_dec+0x98>
 800357c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003580:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800358e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003596:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	2b53      	cmp	r3, #83	; 0x53
 800359e:	d002      	beq.n	80035a6 <GPS_nmea_to_dec+0x72>
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	2b57      	cmp	r3, #87	; 0x57
 80035a4:	d105      	bne.n	80035b2 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80035a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80035aa:	eef1 7a67 	vneg.f32	s15, s15
 80035ae:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	ee07 3a90 	vmov	s15, r3
}
 80035b8:	eeb0 0a67 	vmov.f32	s0, s15
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	42c80000 	.word	0x42c80000
 80035cc:	42700000 	.word	0x42700000

080035d0 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 80035da:	4a09      	ldr	r2, [pc, #36]	; (8003600 <GPS_init+0x30>)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 80035e0:	4a08      	ldr	r2, [pc, #32]	; (8003604 <GPS_init+0x34>)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 80035e6:	4b07      	ldr	r3, [pc, #28]	; (8003604 <GPS_init+0x34>)
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	2210      	movs	r2, #16
 80035f0:	4905      	ldr	r1, [pc, #20]	; (8003608 <GPS_init+0x38>)
 80035f2:	f007 f89a 	bl	800a72a <HAL_UART_Transmit>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20005338 	.word	0x20005338
 8003604:	20005a38 	.word	0x20005a38
 8003608:	08017934 	.word	0x08017934

0800360c <checkForI2CDevices>:
 *      Author: Jacoby
 */
#include <stm32f4xx_hal.h>


void checkForI2CDevices(UART_HandleTypeDef uart, I2C_HandleTypeDef I2C ){
 800360c:	b084      	sub	sp, #16
 800360e:	b5b0      	push	{r4, r5, r7, lr}
 8003610:	b092      	sub	sp, #72	; 0x48
 8003612:	af00      	add	r7, sp, #0
 8003614:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8003618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t Buffer[25] = {0};
 800361c:	2300      	movs	r3, #0
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003620:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	611a      	str	r2, [r3, #16]
 8003630:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 8003632:	4b38      	ldr	r3, [pc, #224]	; (8003714 <checkForI2CDevices+0x108>)
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8003636:	4b38      	ldr	r3, [pc, #224]	; (8003718 <checkForI2CDevices+0x10c>)
 8003638:	f107 040c 	add.w	r4, r7, #12
 800363c:	461d      	mov	r5, r3
 800363e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003646:	c403      	stmia	r4!, {r0, r1}
 8003648:	8022      	strh	r2, [r4, #0]
	uint8_t EndMSG[] = "Done! \r\n\r\n";
 800364a:	4a34      	ldr	r2, [pc, #208]	; (800371c <checkForI2CDevices+0x110>)
 800364c:	463b      	mov	r3, r7
 800364e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003650:	c303      	stmia	r3!, {r0, r1}
 8003652:	801a      	strh	r2, [r3, #0]
 8003654:	3302      	adds	r3, #2
 8003656:	0c12      	lsrs	r2, r2, #16
 8003658:	701a      	strb	r2, [r3, #0]

    uint8_t i = 0, ret;
 800365a:	2300      	movs	r3, #0
 800365c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    HAL_Delay(1000);
 8003660:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003664:	f001 fa8e 	bl	8004b84 <HAL_Delay>

    /*-[ I2C Bus Scanning ]-*/
    HAL_UART_Transmit(&uart, StartMSG, sizeof(StartMSG), HAL_MAX_DELAY);
 8003668:	f107 010c 	add.w	r1, r7, #12
 800366c:	f04f 33ff 	mov.w	r3, #4294967295
 8003670:	221a      	movs	r2, #26
 8003672:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8003676:	f007 f858 	bl	800a72a <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 800367a:	2301      	movs	r3, #1
 800367c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003680:	e035      	b.n	80036ee <checkForI2CDevices+0xe2>
    {
        ret = HAL_I2C_IsDeviceReady(&I2C, (uint16_t)(i<<1), 3, 5);
 8003682:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003686:	b29b      	uxth	r3, r3
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	b299      	uxth	r1, r3
 800368c:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8003690:	2305      	movs	r3, #5
 8003692:	2203      	movs	r2, #3
 8003694:	f002 fc62 	bl	8005f5c <HAL_I2C_IsDeviceReady>
 8003698:	4603      	mov	r3, r0
 800369a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        if (ret != HAL_OK) /* No ACK Received At That Address */
 800369e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <checkForI2CDevices+0xae>
        {
            HAL_UART_Transmit(&uart, Space, sizeof(Space), HAL_MAX_DELAY);
 80036a6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80036aa:	f04f 33ff 	mov.w	r3, #4294967295
 80036ae:	2204      	movs	r2, #4
 80036b0:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80036b4:	f007 f839 	bl	800a72a <HAL_UART_Transmit>
 80036b8:	e014      	b.n	80036e4 <checkForI2CDevices+0xd8>
        }
        else if(ret == HAL_OK)
 80036ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d110      	bne.n	80036e4 <checkForI2CDevices+0xd8>
        {
            sprintf(Buffer, "0x%X", i);
 80036c2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80036c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036ca:	4915      	ldr	r1, [pc, #84]	; (8003720 <checkForI2CDevices+0x114>)
 80036cc:	4618      	mov	r0, r3
 80036ce:	f010 f857 	bl	8013780 <siprintf>
            HAL_UART_Transmit(&uart, Buffer, sizeof(Buffer), HAL_MAX_DELAY);
 80036d2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80036d6:	f04f 33ff 	mov.w	r3, #4294967295
 80036da:	2219      	movs	r2, #25
 80036dc:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80036e0:	f007 f823 	bl	800a72a <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 80036e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036e8:	3301      	adds	r3, #1
 80036ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80036ee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	dac5      	bge.n	8003682 <checkForI2CDevices+0x76>
        }
    }
    HAL_UART_Transmit(&uart, EndMSG, sizeof(EndMSG), HAL_MAX_DELAY);
 80036f6:	4639      	mov	r1, r7
 80036f8:	f04f 33ff 	mov.w	r3, #4294967295
 80036fc:	220b      	movs	r2, #11
 80036fe:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8003702:	f007 f812 	bl	800a72a <HAL_UART_Transmit>
    /*--[ Scanning Done ]--*/

}
 8003706:	bf00      	nop
 8003708:	3748      	adds	r7, #72	; 0x48
 800370a:	46bd      	mov	sp, r7
 800370c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003710:	b004      	add	sp, #16
 8003712:	4770      	bx	lr
 8003714:	00202d20 	.word	0x00202d20
 8003718:	08017950 	.word	0x08017950
 800371c:	0801796c 	.word	0x0801796c
 8003720:	08017948 	.word	0x08017948

08003724 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
  while (size--) {
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	1e5a      	subs	r2, r3, #1
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	bf14      	ite	ne
 800373e:	2301      	movne	r3, #1
 8003740:	2300      	moveq	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00e      	beq.n	8003766 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	1c59      	adds	r1, r3, #1
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	4619      	mov	r1, r3
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	4790      	blx	r2
 800375c:	4602      	mov	r2, r0
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	4413      	add	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
  while (size--) {
 8003764:	e7e6      	b.n	8003734 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8003766:	697b      	ldr	r3, [r7, #20]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	4a06      	ldr	r2, [pc, #24]	; (8003794 <_ZN5PrintC1Ev+0x24>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	605a      	str	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4618      	mov	r0, r3
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	08017c80 	.word	0x08017c80

08003798 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff ffe4 	bl	8003770 <_ZN5PrintC1Ev>
 80037a8:	4a05      	ldr	r2, [pc, #20]	; (80037c0 <_ZN6StreamC1Ev+0x28>)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037b4:	609a      	str	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	08017cb0 	.word	0x08017cb0

080037c4 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff ffe1 	bl	8003798 <_ZN6StreamC1Ev>
 80037d6:	4a16      	ldr	r2, [pc, #88]	; (8003830 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3390      	adds	r3, #144	; 0x90
 80037e6:	2220      	movs	r2, #32
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f00e ffd8 	bl	80127a0 <memset>
  rxBufferIndex = 0;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	08017c90 	.word	0x08017c90

08003834 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01d      	beq.n	8003886 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003850:	2b1f      	cmp	r3, #31
 8003852:	d901      	bls.n	8003858 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8003854:	2300      	movs	r3, #0
 8003856:	e028      	b.n	80038aa <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800385e:	4619      	mov	r1, r3
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	440b      	add	r3, r1
 8003866:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800386e:	3301      	adds	r3, #1
 8003870:	b2da      	uxtb	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003884:	e010      	b.n	80038a8 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f984 	bl	8003b94 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 800388c:	1cfb      	adds	r3, r7, #3
 800388e:	2201      	movs	r2, #1
 8003890:	4619      	mov	r1, r3
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f8b7 	bl	8003a06 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f949 	bl	8003b30 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	333c      	adds	r3, #60	; 0x3c
 80038a2:	4618      	mov	r0, r3
 80038a4:	f002 fc88 	bl	80061b8 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 80038a8:	2301      	movs	r3, #1
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b086      	sub	sp, #24
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
  if(transmitting){
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d21e      	bcs.n	8003912 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	440a      	add	r2, r1
 80038e0:	7812      	ldrb	r2, [r2, #0]
 80038e2:	4611      	mov	r1, r2
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	3301      	adds	r3, #1
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	e7ed      	b.n	80038cc <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f94f 	bl	8003b94 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	461a      	mov	r2, r3
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f882 	bl	8003a06 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f914 	bl	8003b30 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	333c      	adds	r3, #60	; 0x3c
 800390c:	4618      	mov	r0, r3
 800390e:	f002 fc53 	bl	80061b8 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8003912:	687b      	ldr	r3, [r7, #4]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800392a:	b2db      	uxtb	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	1ad3      	subs	r3, r2, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  int value = -1;
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003958:	b2da      	uxtb	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003960:	b2db      	uxtb	r3, r3
 8003962:	429a      	cmp	r2, r3
 8003964:	bf34      	ite	cc
 8003966:	2301      	movcc	r3, #1
 8003968:	2300      	movcs	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d012      	beq.n	8003996 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003982:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	3301      	adds	r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8003996:	68fb      	ldr	r3, [r7, #12]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  int value = -1;
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295
 80039b0:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	429a      	cmp	r2, r3
 80039c4:	bf34      	ite	cc
 80039c6:	2301      	movcc	r3, #1
 80039c8:	2300      	movcs	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d009      	beq.n	80039e4 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80039e2:	60fb      	str	r3, [r7, #12]
  }

  return value;
 80039e4:	68fb      	ldr	r3, [r7, #12]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <_ZN7TwoWire15i2c_slave_writeEPKci>:

    return 1;
}

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b089      	sub	sp, #36	; 0x24
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	dd41      	ble.n	8003aa6 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8003a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a26:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a32:	2b80      	cmp	r3, #128	; 0x80
 8003a34:	bf14      	ite	ne
 8003a36:	2301      	movne	r3, #1
 8003a38:	2300      	moveq	r3, #0
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1ed      	bne.n	8003a28 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8003a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a50:	e068      	b.n	8003b24 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	60ba      	str	r2, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	611a      	str	r2, [r3, #16]
        length--;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	607b      	str	r3, [r7, #4]
        size++;
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d104      	bne.n	8003a84 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8003a84:	2300      	movs	r3, #0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0c8      	beq.n	8003a1c <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	60ba      	str	r2, [r7, #8]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	611a      	str	r2, [r3, #16]
            length--;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	607b      	str	r3, [r7, #4]
            size++;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8003aa4:	e7ba      	b.n	8003a1c <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8003aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aaa:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1ec      	bne.n	8003aac <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8003ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad6:	e025      	b.n	8003b24 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ae0:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8003ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ae6:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	bf0c      	ite	eq
 8003af6:	2301      	moveq	r3, #1
 8003af8:	2300      	movne	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ed      	bne.n	8003ae8 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8003b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b10:	e008      	b.n	8003b24 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8003b22:	69bb      	ldr	r3, [r7, #24]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3724      	adds	r7, #36	; 0x24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	4a12      	ldr	r2, [pc, #72]	; (8003b88 <_ZN7TwoWire15enableInterruptEv+0x58>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d106      	bne.n	8003b50 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003b42:	2049      	movs	r0, #73	; 0x49
 8003b44:	f001 fbac 	bl	80052a0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003b48:	2048      	movs	r0, #72	; 0x48
 8003b4a:	f001 fba9 	bl	80052a0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8003b4e:	e016      	b.n	8003b7e <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b54:	4a0d      	ldr	r2, [pc, #52]	; (8003b8c <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d106      	bne.n	8003b68 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003b5a:	2022      	movs	r0, #34	; 0x22
 8003b5c:	f001 fba0 	bl	80052a0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003b60:	2021      	movs	r0, #33	; 0x21
 8003b62:	f001 fb9d 	bl	80052a0 <HAL_NVIC_EnableIRQ>
}
 8003b66:	e00a      	b.n	8003b7e <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	4a08      	ldr	r2, [pc, #32]	; (8003b90 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d105      	bne.n	8003b7e <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b72:	2020      	movs	r0, #32
 8003b74:	f001 fb94 	bl	80052a0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b78:	201f      	movs	r0, #31
 8003b7a:	f001 fb91 	bl	80052a0 <HAL_NVIC_EnableIRQ>
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40005c00 	.word	0x40005c00
 8003b8c:	40005800 	.word	0x40005800
 8003b90:	40005400 	.word	0x40005400

08003b94 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	4a12      	ldr	r2, [pc, #72]	; (8003bec <_ZN7TwoWire16disableInterruptEv+0x58>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d106      	bne.n	8003bb4 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8003ba6:	2049      	movs	r0, #73	; 0x49
 8003ba8:	f001 fb88 	bl	80052bc <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8003bac:	2048      	movs	r0, #72	; 0x48
 8003bae:	f001 fb85 	bl	80052bc <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8003bb2:	e016      	b.n	8003be2 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	4a0d      	ldr	r2, [pc, #52]	; (8003bf0 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d106      	bne.n	8003bcc <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8003bbe:	2022      	movs	r0, #34	; 0x22
 8003bc0:	f001 fb7c 	bl	80052bc <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8003bc4:	2021      	movs	r0, #33	; 0x21
 8003bc6:	f001 fb79 	bl	80052bc <HAL_NVIC_DisableIRQ>
}
 8003bca:	e00a      	b.n	8003be2 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd0:	4a08      	ldr	r2, [pc, #32]	; (8003bf4 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d105      	bne.n	8003be2 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8003bd6:	2020      	movs	r0, #32
 8003bd8:	f001 fb70 	bl	80052bc <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8003bdc:	201f      	movs	r0, #31
 8003bde:	f001 fb6d 	bl	80052bc <HAL_NVIC_DisableIRQ>
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40005c00 	.word	0x40005c00
 8003bf0:	40005800 	.word	0x40005800
 8003bf4:	40005400 	.word	0x40005400

08003bf8 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d110      	bne.n	8003c2a <_Z41__static_initialization_and_destruction_0ii+0x32>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d10b      	bne.n	8003c2a <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8003c12:	4908      	ldr	r1, [pc, #32]	; (8003c34 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003c14:	4808      	ldr	r0, [pc, #32]	; (8003c38 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003c16:	f7ff fdd5 	bl	80037c4 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8003c1a:	4908      	ldr	r1, [pc, #32]	; (8003c3c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003c1c:	4808      	ldr	r0, [pc, #32]	; (8003c40 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003c1e:	f7ff fdd1 	bl	80037c4 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8003c22:	4908      	ldr	r1, [pc, #32]	; (8003c44 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003c24:	4808      	ldr	r0, [pc, #32]	; (8003c48 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003c26:	f7ff fdcd 	bl	80037c4 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40005400 	.word	0x40005400
 8003c38:	200003e0 	.word	0x200003e0
 8003c3c:	40005800 	.word	0x40005800
 8003c40:	20000498 	.word	0x20000498
 8003c44:	40005c00 	.word	0x40005c00
 8003c48:	20000550 	.word	0x20000550

08003c4c <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c54:	2001      	movs	r0, #1
 8003c56:	f7ff ffcf 	bl	8003bf8 <_Z41__static_initialization_and_destruction_0ii>
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	607a      	str	r2, [r7, #4]
 8003c66:	461a      	mov	r2, r3
 8003c68:	460b      	mov	r3, r1
 8003c6a:	72fb      	strb	r3, [r7, #11]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	685c      	ldr	r4, [r3, #4]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6898      	ldr	r0, [r3, #8]
 8003c78:	893b      	ldrh	r3, [r7, #8]
 8003c7a:	7af9      	ldrb	r1, [r7, #11]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	47a0      	blx	r4
 8003c80:	6178      	str	r0, [r7, #20]

  return ret;
 8003c82:	697b      	ldr	r3, [r7, #20]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd90      	pop	{r4, r7, pc}

08003c8c <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003c8c:	b590      	push	{r4, r7, lr}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	461a      	mov	r2, r3
 8003c98:	460b      	mov	r3, r1
 8003c9a:	72fb      	strb	r3, [r7, #11]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681c      	ldr	r4, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6898      	ldr	r0, [r3, #8]
 8003ca8:	893b      	ldrh	r3, [r7, #8]
 8003caa:	7af9      	ldrb	r1, [r7, #11]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	47a0      	blx	r4
 8003cb0:	6178      	str	r0, [r7, #20]

  return ret;
 8003cb2:	697b      	ldr	r3, [r7, #20]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd90      	pop	{r4, r7, pc}

08003cbc <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003ce8 <lps22hh_from_lsb_to_hpa+0x2c>
 8003cd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003cd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8003cda:	eeb0 0a67 	vmov.f32	s0, s15
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	49800000 	.word	0x49800000

08003cec <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8003cf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d02:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003d1c <lps22hh_from_lsb_to_celsius+0x30>
 8003d06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d0a:	eef0 7a66 	vmov.f32	s15, s13
}
 8003d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	42c80000 	.word	0x42c80000

08003d20 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003d2c:	f107 0208 	add.w	r2, r7, #8
 8003d30:	2301      	movs	r3, #1
 8003d32:	2110      	movs	r1, #16
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ff91 	bl	8003c5c <lps22hh_read_reg>
 8003d3a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10f      	bne.n	8003d62 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	7a3b      	ldrb	r3, [r7, #8]
 8003d4c:	f362 0341 	bfi	r3, r2, #1, #1
 8003d50:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003d52:	f107 0208 	add.w	r2, r7, #8
 8003d56:	2301      	movs	r3, #1
 8003d58:	2110      	movs	r1, #16
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ff96 	bl	8003c8c <lps22hh_write_reg>
 8003d60:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d62:	68fb      	ldr	r3, [r7, #12]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003d78:	f107 0210 	add.w	r2, r7, #16
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	2110      	movs	r1, #16
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff6b 	bl	8003c5c <lps22hh_read_reg>
 8003d86:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d107      	bne.n	8003d9e <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003d8e:	f107 020c 	add.w	r2, r7, #12
 8003d92:	2301      	movs	r3, #1
 8003d94:	2111      	movs	r1, #17
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ff60 	bl	8003c5c <lps22hh_read_reg>
 8003d9c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10f      	bne.n	8003dc4 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	7c3b      	ldrb	r3, [r7, #16]
 8003dae:	f362 1306 	bfi	r3, r2, #4, #3
 8003db2:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003db4:	f107 0210 	add.w	r2, r7, #16
 8003db8:	2301      	movs	r3, #1
 8003dba:	2110      	movs	r1, #16
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ff65 	bl	8003c8c <lps22hh_write_reg>
 8003dc2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d119      	bne.n	8003dfe <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	7b3b      	ldrb	r3, [r7, #12]
 8003dd6:	f362 0341 	bfi	r3, r2, #1, #1
 8003dda:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	08db      	lsrs	r3, r3, #3
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	7b3b      	ldrb	r3, [r7, #12]
 8003de8:	f362 0300 	bfi	r3, r2, #0, #1
 8003dec:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003dee:	f107 020c 	add.w	r2, r7, #12
 8003df2:	2301      	movs	r3, #1
 8003df4:	2111      	movs	r1, #17
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ff48 	bl	8003c8c <lps22hh_write_reg>
 8003dfc:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003dfe:	697b      	ldr	r3, [r7, #20]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8003e12:	f107 0208 	add.w	r2, r7, #8
 8003e16:	2301      	movs	r3, #1
 8003e18:	2127      	movs	r1, #39	; 0x27
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff ff1e 	bl	8003c5c <lps22hh_read_reg>
 8003e20:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8003e22:	7a3b      	ldrb	r3, [r7, #8]
 8003e24:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	701a      	strb	r2, [r3, #0]

  return ret;
 8003e30:	68fb      	ldr	r3, [r7, #12]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8003e44:	f107 0208 	add.w	r2, r7, #8
 8003e48:	2303      	movs	r3, #3
 8003e4a:	2128      	movs	r1, #40	; 0x28
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff05 	bl	8003c5c <lps22hh_read_reg>
 8003e52:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8003e54:	7abb      	ldrb	r3, [r7, #10]
 8003e56:	461a      	mov	r2, r3
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	7a7a      	ldrb	r2, [r7, #9]
 8003e64:	441a      	add	r2, r3
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	7a3a      	ldrb	r2, [r7, #8]
 8003e72:	441a      	add	r2, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	021a      	lsls	r2, r3, #8
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	601a      	str	r2, [r3, #0]

  return ret;
 8003e82:	68fb      	ldr	r3, [r7, #12]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8003e96:	f107 0208 	add.w	r2, r7, #8
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	212b      	movs	r1, #43	; 0x2b
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff fedc 	bl	8003c5c <lps22hh_read_reg>
 8003ea4:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8003ea6:	7a7b      	ldrb	r3, [r7, #9]
 8003ea8:	b21a      	sxth	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	7a3b      	ldrb	r3, [r7, #8]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	b21a      	sxth	r2, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	801a      	strh	r2, [r3, #0]

  return ret;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8003edc:	2301      	movs	r3, #1
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	210f      	movs	r1, #15
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff feba 	bl	8003c5c <lps22hh_read_reg>
 8003ee8:	60f8      	str	r0, [r7, #12]

  return ret;
 8003eea:	68fb      	ldr	r3, [r7, #12]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003f00:	f107 0208 	add.w	r2, r7, #8
 8003f04:	2301      	movs	r3, #1
 8003f06:	2111      	movs	r1, #17
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff fea7 	bl	8003c5c <lps22hh_read_reg>
 8003f0e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	7a3b      	ldrb	r3, [r7, #8]
 8003f20:	f362 0382 	bfi	r3, r2, #2, #1
 8003f24:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003f26:	f107 0208 	add.w	r2, r7, #8
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	2111      	movs	r1, #17
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff feac 	bl	8003c8c <lps22hh_write_reg>
 8003f34:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f36:	68fb      	ldr	r3, [r7, #12]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003f4a:	f107 0208 	add.w	r2, r7, #8
 8003f4e:	2301      	movs	r3, #1
 8003f50:	2111      	movs	r1, #17
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff fe82 	bl	8003c5c <lps22hh_read_reg>
 8003f58:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8003f5a:	7a3b      	ldrb	r3, [r7, #8]
 8003f5c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	701a      	strb	r2, [r3, #0]

  return ret;
 8003f68:	68fb      	ldr	r3, [r7, #12]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003f72:	b590      	push	{r4, r7, lr}
 8003f74:	b087      	sub	sp, #28
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	460b      	mov	r3, r1
 8003f80:	72fb      	strb	r3, [r7, #11]
 8003f82:	4613      	mov	r3, r2
 8003f84:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685c      	ldr	r4, [r3, #4]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6898      	ldr	r0, [r3, #8]
 8003f8e:	893b      	ldrh	r3, [r7, #8]
 8003f90:	7af9      	ldrb	r1, [r7, #11]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	47a0      	blx	r4
 8003f96:	6178      	str	r0, [r7, #20]

  return ret;
 8003f98:	697b      	ldr	r3, [r7, #20]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}

08003fa2 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003fa2:	b590      	push	{r4, r7, lr}
 8003fa4:	b087      	sub	sp, #28
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	461a      	mov	r2, r3
 8003fae:	460b      	mov	r3, r1
 8003fb0:	72fb      	strb	r3, [r7, #11]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681c      	ldr	r4, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6898      	ldr	r0, [r3, #8]
 8003fbe:	893b      	ldrh	r3, [r7, #8]
 8003fc0:	7af9      	ldrb	r1, [r7, #11]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	47a0      	blx	r4
 8003fc6:	6178      	str	r0, [r7, #20]

  return ret;
 8003fc8:	697b      	ldr	r3, [r7, #20]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd90      	pop	{r4, r7, pc}
	...

08003fd4 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8003fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fe2:	ee07 3a90 	vmov	s15, r3
 8003fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004000 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8003fee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	3d79db23 	.word	0x3d79db23

08004004 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800400e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800401a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004030 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 800401e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004022:	eeb0 0a67 	vmov.f32	s0, s15
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	428c0000 	.word	0x428c0000

08004034 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 800403e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800404a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004068 <lsm6dsr_from_lsb_to_celsius+0x34>
 800404e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004052:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004056:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800405a:	eeb0 0a67 	vmov.f32	s0, s15
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	43800000 	.word	0x43800000

0800406c <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004078:	f107 0208 	add.w	r2, r7, #8
 800407c:	2301      	movs	r3, #1
 800407e:	2110      	movs	r1, #16
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff ff76 	bl	8003f72 <lsm6dsr_read_reg>
 8004086:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10f      	bne.n	80040ae <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	b2da      	uxtb	r2, r3
 8004096:	7a3b      	ldrb	r3, [r7, #8]
 8004098:	f362 0383 	bfi	r3, r2, #2, #2
 800409c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800409e:	f107 0208 	add.w	r2, r7, #8
 80040a2:	2301      	movs	r3, #1
 80040a4:	2110      	movs	r1, #16
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ff7b 	bl	8003fa2 <lsm6dsr_write_reg>
 80040ac:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80040ae:	68fb      	ldr	r3, [r7, #12]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80040c8:	f107 030c 	add.w	r3, r7, #12
 80040cc:	4619      	mov	r1, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fbb0 	bl	8004834 <lsm6dsr_fsm_enable_get>
 80040d4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f040 80c4 	bne.w	8004266 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80040de:	7b3b      	ldrb	r3, [r7, #12]
 80040e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80040e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80040e6:	7b3b      	ldrb	r3, [r7, #12]
 80040e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80040ec:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80040ee:	4313      	orrs	r3, r2
 80040f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80040f2:	7b3b      	ldrb	r3, [r7, #12]
 80040f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80040f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80040fa:	4313      	orrs	r3, r2
 80040fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80040fe:	7b3b      	ldrb	r3, [r7, #12]
 8004100:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004104:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004106:	4313      	orrs	r3, r2
 8004108:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800410a:	7b3b      	ldrb	r3, [r7, #12]
 800410c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004110:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004112:	4313      	orrs	r3, r2
 8004114:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004116:	7b3b      	ldrb	r3, [r7, #12]
 8004118:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800411c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800411e:	4313      	orrs	r3, r2
 8004120:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004122:	7b3b      	ldrb	r3, [r7, #12]
 8004124:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004128:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800412a:	4313      	orrs	r3, r2
 800412c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800412e:	7b3b      	ldrb	r3, [r7, #12]
 8004130:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004134:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004136:	4313      	orrs	r3, r2
 8004138:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800413a:	7b7b      	ldrb	r3, [r7, #13]
 800413c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004140:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004142:	4313      	orrs	r3, r2
 8004144:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004146:	7b7b      	ldrb	r3, [r7, #13]
 8004148:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800414c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800414e:	4313      	orrs	r3, r2
 8004150:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004152:	7b7b      	ldrb	r3, [r7, #13]
 8004154:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004158:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800415a:	4313      	orrs	r3, r2
 800415c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800415e:	7b7b      	ldrb	r3, [r7, #13]
 8004160:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004164:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004166:	4313      	orrs	r3, r2
 8004168:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800416a:	7b7b      	ldrb	r3, [r7, #13]
 800416c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004170:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004172:	4313      	orrs	r3, r2
 8004174:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004176:	7b7b      	ldrb	r3, [r7, #13]
 8004178:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800417c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800417e:	4313      	orrs	r3, r2
 8004180:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004182:	7b7b      	ldrb	r3, [r7, #13]
 8004184:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004188:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800418a:	4313      	orrs	r3, r2
 800418c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800418e:	7b7b      	ldrb	r3, [r7, #13]
 8004190:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004194:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004196:	4313      	orrs	r3, r2
 8004198:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800419a:	2b01      	cmp	r3, #1
 800419c:	d163      	bne.n	8004266 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800419e:	f107 030b 	add.w	r3, r7, #11
 80041a2:	4619      	mov	r1, r3
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fb71 	bl	800488c <lsm6dsr_fsm_data_rate_get>
 80041aa:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d159      	bne.n	8004266 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80041b2:	7afb      	ldrb	r3, [r7, #11]
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d853      	bhi.n	8004260 <lsm6dsr_xl_data_rate_set+0x1a8>
 80041b8:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <lsm6dsr_xl_data_rate_set+0x108>)
 80041ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041be:	bf00      	nop
 80041c0:	080041d1 	.word	0x080041d1
 80041c4:	080041e3 	.word	0x080041e3
 80041c8:	08004201 	.word	0x08004201
 80041cc:	0800422b 	.word	0x0800422b
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d102      	bne.n	80041dc <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80041da:	e045      	b.n	8004268 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	75fb      	strb	r3, [r7, #23]
            break;
 80041e0:	e042      	b.n	8004268 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d102      	bne.n	80041ee <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80041e8:	2302      	movs	r3, #2
 80041ea:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80041ec:	e03c      	b.n	8004268 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d102      	bne.n	80041fa <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80041f4:	2302      	movs	r3, #2
 80041f6:	75fb      	strb	r3, [r7, #23]
            break;
 80041f8:	e036      	b.n	8004268 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	75fb      	strb	r3, [r7, #23]
            break;
 80041fe:	e033      	b.n	8004268 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d102      	bne.n	800420c <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8004206:	2303      	movs	r3, #3
 8004208:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800420a:	e02d      	b.n	8004268 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d102      	bne.n	8004218 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8004212:	2303      	movs	r3, #3
 8004214:	75fb      	strb	r3, [r7, #23]
            break;
 8004216:	e027      	b.n	8004268 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d102      	bne.n	8004224 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800421e:	2303      	movs	r3, #3
 8004220:	75fb      	strb	r3, [r7, #23]
            break;
 8004222:	e021      	b.n	8004268 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	75fb      	strb	r3, [r7, #23]
            break;
 8004228:	e01e      	b.n	8004268 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800422a:	78fb      	ldrb	r3, [r7, #3]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d102      	bne.n	8004236 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004230:	2304      	movs	r3, #4
 8004232:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004234:	e018      	b.n	8004268 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d102      	bne.n	8004242 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800423c:	2304      	movs	r3, #4
 800423e:	75fb      	strb	r3, [r7, #23]
            break;
 8004240:	e012      	b.n	8004268 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8004242:	78fb      	ldrb	r3, [r7, #3]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d102      	bne.n	800424e <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004248:	2304      	movs	r3, #4
 800424a:	75fb      	strb	r3, [r7, #23]
            break;
 800424c:	e00c      	b.n	8004268 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	2b03      	cmp	r3, #3
 8004252:	d102      	bne.n	800425a <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004254:	2304      	movs	r3, #4
 8004256:	75fb      	strb	r3, [r7, #23]
            break;
 8004258:	e006      	b.n	8004268 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	75fb      	strb	r3, [r7, #23]
            break;
 800425e:	e003      	b.n	8004268 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	75fb      	strb	r3, [r7, #23]
            break;
 8004264:	e000      	b.n	8004268 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8004266:	bf00      	nop
    }
  }

  if (ret == 0)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d107      	bne.n	800427e <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800426e:	f107 0208 	add.w	r2, r7, #8
 8004272:	2301      	movs	r3, #1
 8004274:	2110      	movs	r1, #16
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff fe7b 	bl	8003f72 <lsm6dsr_read_reg>
 800427c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10f      	bne.n	80042a4 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	b2da      	uxtb	r2, r3
 800428c:	7a3b      	ldrb	r3, [r7, #8]
 800428e:	f362 1307 	bfi	r3, r2, #4, #4
 8004292:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004294:	f107 0208 	add.w	r2, r7, #8
 8004298:	2301      	movs	r3, #1
 800429a:	2110      	movs	r1, #16
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff fe80 	bl	8003fa2 <lsm6dsr_write_reg>
 80042a2:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80042a4:	693b      	ldr	r3, [r7, #16]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop

080042b0 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80042bc:	f107 0208 	add.w	r2, r7, #8
 80042c0:	2301      	movs	r3, #1
 80042c2:	2111      	movs	r1, #17
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff fe54 	bl	8003f72 <lsm6dsr_read_reg>
 80042ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10f      	bne.n	80042f2 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	7a3b      	ldrb	r3, [r7, #8]
 80042dc:	f362 0303 	bfi	r3, r2, #0, #4
 80042e0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80042e2:	f107 0208 	add.w	r2, r7, #8
 80042e6:	2301      	movs	r3, #1
 80042e8:	2111      	movs	r1, #17
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff fe59 	bl	8003fa2 <lsm6dsr_write_reg>
 80042f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042f2:	68fb      	ldr	r3, [r7, #12]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800430c:	f107 030c 	add.w	r3, r7, #12
 8004310:	4619      	mov	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fa8e 	bl	8004834 <lsm6dsr_fsm_enable_get>
 8004318:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f040 80c4 	bne.w	80044aa <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004322:	7b3b      	ldrb	r3, [r7, #12]
 8004324:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004328:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800432a:	7b3b      	ldrb	r3, [r7, #12]
 800432c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004330:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004332:	4313      	orrs	r3, r2
 8004334:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004336:	7b3b      	ldrb	r3, [r7, #12]
 8004338:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800433c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800433e:	4313      	orrs	r3, r2
 8004340:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004342:	7b3b      	ldrb	r3, [r7, #12]
 8004344:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004348:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800434a:	4313      	orrs	r3, r2
 800434c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800434e:	7b3b      	ldrb	r3, [r7, #12]
 8004350:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004354:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004356:	4313      	orrs	r3, r2
 8004358:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800435a:	7b3b      	ldrb	r3, [r7, #12]
 800435c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004360:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004362:	4313      	orrs	r3, r2
 8004364:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004366:	7b3b      	ldrb	r3, [r7, #12]
 8004368:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800436c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800436e:	4313      	orrs	r3, r2
 8004370:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004372:	7b3b      	ldrb	r3, [r7, #12]
 8004374:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004378:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800437a:	4313      	orrs	r3, r2
 800437c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800437e:	7b7b      	ldrb	r3, [r7, #13]
 8004380:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004384:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004386:	4313      	orrs	r3, r2
 8004388:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800438a:	7b7b      	ldrb	r3, [r7, #13]
 800438c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004390:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004392:	4313      	orrs	r3, r2
 8004394:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004396:	7b7b      	ldrb	r3, [r7, #13]
 8004398:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800439c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800439e:	4313      	orrs	r3, r2
 80043a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80043a2:	7b7b      	ldrb	r3, [r7, #13]
 80043a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80043a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80043aa:	4313      	orrs	r3, r2
 80043ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80043ae:	7b7b      	ldrb	r3, [r7, #13]
 80043b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80043b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80043b6:	4313      	orrs	r3, r2
 80043b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80043ba:	7b7b      	ldrb	r3, [r7, #13]
 80043bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80043c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80043c2:	4313      	orrs	r3, r2
 80043c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80043c6:	7b7b      	ldrb	r3, [r7, #13]
 80043c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80043cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80043ce:	4313      	orrs	r3, r2
 80043d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80043d2:	7b7b      	ldrb	r3, [r7, #13]
 80043d4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80043d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80043da:	4313      	orrs	r3, r2
 80043dc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d163      	bne.n	80044aa <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80043e2:	f107 030b 	add.w	r3, r7, #11
 80043e6:	4619      	mov	r1, r3
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fa4f 	bl	800488c <lsm6dsr_fsm_data_rate_get>
 80043ee:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d159      	bne.n	80044aa <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80043f6:	7afb      	ldrb	r3, [r7, #11]
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d853      	bhi.n	80044a4 <lsm6dsr_gy_data_rate_set+0x1a8>
 80043fc:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <lsm6dsr_gy_data_rate_set+0x108>)
 80043fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004402:	bf00      	nop
 8004404:	08004415 	.word	0x08004415
 8004408:	08004427 	.word	0x08004427
 800440c:	08004445 	.word	0x08004445
 8004410:	0800446f 	.word	0x0800446f
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d102      	bne.n	8004420 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 800441a:	2301      	movs	r3, #1
 800441c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800441e:	e045      	b.n	80044ac <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	75fb      	strb	r3, [r7, #23]
            break;
 8004424:	e042      	b.n	80044ac <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004426:	78fb      	ldrb	r3, [r7, #3]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800442c:	2302      	movs	r3, #2
 800442e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004430:	e03c      	b.n	80044ac <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d102      	bne.n	800443e <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8004438:	2302      	movs	r3, #2
 800443a:	75fb      	strb	r3, [r7, #23]
            break;
 800443c:	e036      	b.n	80044ac <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	75fb      	strb	r3, [r7, #23]
            break;
 8004442:	e033      	b.n	80044ac <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d102      	bne.n	8004450 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800444a:	2303      	movs	r3, #3
 800444c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800444e:	e02d      	b.n	80044ac <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d102      	bne.n	800445c <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8004456:	2303      	movs	r3, #3
 8004458:	75fb      	strb	r3, [r7, #23]
            break;
 800445a:	e027      	b.n	80044ac <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d102      	bne.n	8004468 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8004462:	2303      	movs	r3, #3
 8004464:	75fb      	strb	r3, [r7, #23]
            break;
 8004466:	e021      	b.n	80044ac <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	75fb      	strb	r3, [r7, #23]
            break;
 800446c:	e01e      	b.n	80044ac <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d102      	bne.n	800447a <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004474:	2304      	movs	r3, #4
 8004476:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004478:	e018      	b.n	80044ac <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800447a:	78fb      	ldrb	r3, [r7, #3]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d102      	bne.n	8004486 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004480:	2304      	movs	r3, #4
 8004482:	75fb      	strb	r3, [r7, #23]
            break;
 8004484:	e012      	b.n	80044ac <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d102      	bne.n	8004492 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800448c:	2304      	movs	r3, #4
 800448e:	75fb      	strb	r3, [r7, #23]
            break;
 8004490:	e00c      	b.n	80044ac <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	2b03      	cmp	r3, #3
 8004496:	d102      	bne.n	800449e <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004498:	2304      	movs	r3, #4
 800449a:	75fb      	strb	r3, [r7, #23]
            break;
 800449c:	e006      	b.n	80044ac <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	75fb      	strb	r3, [r7, #23]
            break;
 80044a2:	e003      	b.n	80044ac <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	75fb      	strb	r3, [r7, #23]
            break;
 80044a8:	e000      	b.n	80044ac <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 80044aa:	bf00      	nop
    }
  }

  if (ret == 0)
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d107      	bne.n	80044c2 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80044b2:	f107 0208 	add.w	r2, r7, #8
 80044b6:	2301      	movs	r3, #1
 80044b8:	2111      	movs	r1, #17
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff fd59 	bl	8003f72 <lsm6dsr_read_reg>
 80044c0:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10f      	bne.n	80044e8 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80044c8:	7dfb      	ldrb	r3, [r7, #23]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	7a3b      	ldrb	r3, [r7, #8]
 80044d2:	f362 1307 	bfi	r3, r2, #4, #4
 80044d6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80044d8:	f107 0208 	add.w	r2, r7, #8
 80044dc:	2301      	movs	r3, #1
 80044de:	2111      	movs	r1, #17
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff fd5e 	bl	8003fa2 <lsm6dsr_write_reg>
 80044e6:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80044e8:	693b      	ldr	r3, [r7, #16]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop

080044f4 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004500:	f107 0208 	add.w	r2, r7, #8
 8004504:	2301      	movs	r3, #1
 8004506:	2112      	movs	r1, #18
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff fd32 	bl	8003f72 <lsm6dsr_read_reg>
 800450e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10f      	bne.n	8004536 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8004516:	78fb      	ldrb	r3, [r7, #3]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	b2da      	uxtb	r2, r3
 800451e:	7a3b      	ldrb	r3, [r7, #8]
 8004520:	f362 1386 	bfi	r3, r2, #6, #1
 8004524:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004526:	f107 0208 	add.w	r2, r7, #8
 800452a:	2301      	movs	r3, #1
 800452c:	2112      	movs	r1, #18
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff fd37 	bl	8003fa2 <lsm6dsr_write_reg>
 8004534:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004536:	68fb      	ldr	r3, [r7, #12]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800454a:	f107 0208 	add.w	r2, r7, #8
 800454e:	2301      	movs	r3, #1
 8004550:	211e      	movs	r1, #30
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff fd0d 	bl	8003f72 <lsm6dsr_read_reg>
 8004558:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 800455a:	7a3b      	ldrb	r3, [r7, #8]
 800455c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004560:	b2db      	uxtb	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	701a      	strb	r2, [r3, #0]

  return ret;
 8004568:	68fb      	ldr	r3, [r7, #12]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800457c:	f107 0208 	add.w	r2, r7, #8
 8004580:	2301      	movs	r3, #1
 8004582:	211e      	movs	r1, #30
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff fcf4 	bl	8003f72 <lsm6dsr_read_reg>
 800458a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 800458c:	7a3b      	ldrb	r3, [r7, #8]
 800458e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004592:	b2db      	uxtb	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	701a      	strb	r2, [r3, #0]

  return ret;
 800459a:	68fb      	ldr	r3, [r7, #12]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80045ae:	f107 0208 	add.w	r2, r7, #8
 80045b2:	2301      	movs	r3, #1
 80045b4:	211e      	movs	r1, #30
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff fcdb 	bl	8003f72 <lsm6dsr_read_reg>
 80045bc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 80045be:	7a3b      	ldrb	r3, [r7, #8]
 80045c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	701a      	strb	r2, [r3, #0]

  return ret;
 80045cc:	68fb      	ldr	r3, [r7, #12]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 80045e0:	f107 0208 	add.w	r2, r7, #8
 80045e4:	2302      	movs	r3, #2
 80045e6:	2120      	movs	r1, #32
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff fcc2 	bl	8003f72 <lsm6dsr_read_reg>
 80045ee:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 80045f0:	7a7b      	ldrb	r3, [r7, #9]
 80045f2:	b21a      	sxth	r2, r3
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	021b      	lsls	r3, r3, #8
 8004602:	b29a      	uxth	r2, r3
 8004604:	7a3b      	ldrb	r3, [r7, #8]
 8004606:	b29b      	uxth	r3, r3
 8004608:	4413      	add	r3, r2
 800460a:	b29b      	uxth	r3, r3
 800460c:	b21a      	sxth	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	801a      	strh	r2, [r3, #0]

  return ret;
 8004612:	68fb      	ldr	r3, [r7, #12]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8004626:	f107 020c 	add.w	r2, r7, #12
 800462a:	2306      	movs	r3, #6
 800462c:	2122      	movs	r1, #34	; 0x22
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff fc9f 	bl	8003f72 <lsm6dsr_read_reg>
 8004634:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004636:	7b7b      	ldrb	r3, [r7, #13]
 8004638:	b21a      	sxth	r2, r3
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004644:	b29b      	uxth	r3, r3
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	b29a      	uxth	r2, r3
 800464a:	7b3b      	ldrb	r3, [r7, #12]
 800464c:	b29b      	uxth	r3, r3
 800464e:	4413      	add	r3, r2
 8004650:	b29b      	uxth	r3, r3
 8004652:	b21a      	sxth	r2, r3
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004658:	7bfa      	ldrb	r2, [r7, #15]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	3302      	adds	r3, #2
 800465e:	b212      	sxth	r2, r2
 8004660:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	3302      	adds	r3, #2
 8004666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800466a:	b29b      	uxth	r3, r3
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	b29a      	uxth	r2, r3
 8004670:	7bbb      	ldrb	r3, [r7, #14]
 8004672:	b29b      	uxth	r3, r3
 8004674:	4413      	add	r3, r2
 8004676:	b29a      	uxth	r2, r3
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	3302      	adds	r3, #2
 800467c:	b212      	sxth	r2, r2
 800467e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004680:	7c7a      	ldrb	r2, [r7, #17]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	3304      	adds	r3, #4
 8004686:	b212      	sxth	r2, r2
 8004688:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	3304      	adds	r3, #4
 800468e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004692:	b29b      	uxth	r3, r3
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	b29a      	uxth	r2, r3
 8004698:	7c3b      	ldrb	r3, [r7, #16]
 800469a:	b29b      	uxth	r3, r3
 800469c:	4413      	add	r3, r2
 800469e:	b29a      	uxth	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	3304      	adds	r3, #4
 80046a4:	b212      	sxth	r2, r2
 80046a6:	801a      	strh	r2, [r3, #0]

  return ret;
 80046a8:	697b      	ldr	r3, [r7, #20]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b086      	sub	sp, #24
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 80046bc:	f107 020c 	add.w	r2, r7, #12
 80046c0:	2306      	movs	r3, #6
 80046c2:	2128      	movs	r1, #40	; 0x28
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff fc54 	bl	8003f72 <lsm6dsr_read_reg>
 80046ca:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80046cc:	7b7b      	ldrb	r3, [r7, #13]
 80046ce:	b21a      	sxth	r2, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	b29a      	uxth	r2, r3
 80046e0:	7b3b      	ldrb	r3, [r7, #12]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	4413      	add	r3, r2
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	b21a      	sxth	r2, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80046ee:	7bfa      	ldrb	r2, [r7, #15]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	3302      	adds	r3, #2
 80046f4:	b212      	sxth	r2, r2
 80046f6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	3302      	adds	r3, #2
 80046fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004700:	b29b      	uxth	r3, r3
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	b29a      	uxth	r2, r3
 8004706:	7bbb      	ldrb	r3, [r7, #14]
 8004708:	b29b      	uxth	r3, r3
 800470a:	4413      	add	r3, r2
 800470c:	b29a      	uxth	r2, r3
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	3302      	adds	r3, #2
 8004712:	b212      	sxth	r2, r2
 8004714:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004716:	7c7a      	ldrb	r2, [r7, #17]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	3304      	adds	r3, #4
 800471c:	b212      	sxth	r2, r2
 800471e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	3304      	adds	r3, #4
 8004724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004728:	b29b      	uxth	r3, r3
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	b29a      	uxth	r2, r3
 800472e:	7c3b      	ldrb	r3, [r7, #16]
 8004730:	b29b      	uxth	r3, r3
 8004732:	4413      	add	r3, r2
 8004734:	b29a      	uxth	r2, r3
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	3304      	adds	r3, #4
 800473a:	b212      	sxth	r2, r2
 800473c:	801a      	strh	r2, [r3, #0]

  return ret;
 800473e:	697b      	ldr	r3, [r7, #20]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8004754:	f107 0208 	add.w	r2, r7, #8
 8004758:	2301      	movs	r3, #1
 800475a:	2101      	movs	r1, #1
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff fc08 	bl	8003f72 <lsm6dsr_read_reg>
 8004762:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10f      	bne.n	800478a <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	f003 0303 	and.w	r3, r3, #3
 8004770:	b2da      	uxtb	r2, r3
 8004772:	7a3b      	ldrb	r3, [r7, #8]
 8004774:	f362 1387 	bfi	r3, r2, #6, #2
 8004778:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800477a:	f107 0208 	add.w	r2, r7, #8
 800477e:	2301      	movs	r3, #1
 8004780:	2101      	movs	r1, #1
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff fc0d 	bl	8003fa2 <lsm6dsr_write_reg>
 8004788:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800478a:	68fb      	ldr	r3, [r7, #12]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 800479e:	2301      	movs	r3, #1
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	210f      	movs	r1, #15
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff fbe4 	bl	8003f72 <lsm6dsr_read_reg>
 80047aa:	60f8      	str	r0, [r7, #12]

  return ret;
 80047ac:	68fb      	ldr	r3, [r7, #12]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	460b      	mov	r3, r1
 80047c0:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80047c2:	f107 0208 	add.w	r2, r7, #8
 80047c6:	2301      	movs	r3, #1
 80047c8:	2112      	movs	r1, #18
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff fbd1 	bl	8003f72 <lsm6dsr_read_reg>
 80047d0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10f      	bne.n	80047f8 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	7a3b      	ldrb	r3, [r7, #8]
 80047e2:	f362 0300 	bfi	r3, r2, #0, #1
 80047e6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80047e8:	f107 0208 	add.w	r2, r7, #8
 80047ec:	2301      	movs	r3, #1
 80047ee:	2112      	movs	r1, #18
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff fbd6 	bl	8003fa2 <lsm6dsr_write_reg>
 80047f6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80047f8:	68fb      	ldr	r3, [r7, #12]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800480c:	f107 0208 	add.w	r2, r7, #8
 8004810:	2301      	movs	r3, #1
 8004812:	2112      	movs	r1, #18
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff fbac 	bl	8003f72 <lsm6dsr_read_reg>
 800481a:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 800481c:	7a3b      	ldrb	r3, [r7, #8]
 800481e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004822:	b2db      	uxtb	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	701a      	strb	r2, [r3, #0]

  return ret;
 800482a:	68fb      	ldr	r3, [r7, #12]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800483e:	2102      	movs	r1, #2
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff ff81 	bl	8004748 <lsm6dsr_mem_bank_set>
 8004846:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800484e:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8004850:	2301      	movs	r3, #1
 8004852:	2146      	movs	r1, #70	; 0x46
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fb8c 	bl	8003f72 <lsm6dsr_read_reg>
 800485a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d107      	bne.n	8004872 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8004866:	2301      	movs	r3, #1
 8004868:	2147      	movs	r1, #71	; 0x47
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff fb81 	bl	8003f72 <lsm6dsr_read_reg>
 8004870:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d104      	bne.n	8004882 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8004878:	2100      	movs	r1, #0
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff ff64 	bl	8004748 <lsm6dsr_mem_bank_set>
 8004880:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004882:	68fb      	ldr	r3, [r7, #12]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8004896:	2102      	movs	r1, #2
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff ff55 	bl	8004748 <lsm6dsr_mem_bank_set>
 800489e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d107      	bne.n	80048b6 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 80048a6:	f107 0208 	add.w	r2, r7, #8
 80048aa:	2301      	movs	r3, #1
 80048ac:	215f      	movs	r1, #95	; 0x5f
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff fb5f 	bl	8003f72 <lsm6dsr_read_reg>
 80048b4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80048bc:	2100      	movs	r1, #0
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff ff42 	bl	8004748 <lsm6dsr_mem_bank_set>
 80048c4:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80048c6:	7a3b      	ldrb	r3, [r7, #8]
 80048c8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d81a      	bhi.n	8004908 <lsm6dsr_fsm_data_rate_get+0x7c>
 80048d2:	a201      	add	r2, pc, #4	; (adr r2, 80048d8 <lsm6dsr_fsm_data_rate_get+0x4c>)
 80048d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d8:	080048e9 	.word	0x080048e9
 80048dc:	080048f1 	.word	0x080048f1
 80048e0:	080048f9 	.word	0x080048f9
 80048e4:	08004901 	.word	0x08004901
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2200      	movs	r2, #0
 80048ec:	701a      	strb	r2, [r3, #0]
      break;
 80048ee:	e00f      	b.n	8004910 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2201      	movs	r2, #1
 80048f4:	701a      	strb	r2, [r3, #0]
      break;
 80048f6:	e00b      	b.n	8004910 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2202      	movs	r2, #2
 80048fc:	701a      	strb	r2, [r3, #0]
      break;
 80048fe:	e007      	b.n	8004910 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2203      	movs	r2, #3
 8004904:	701a      	strb	r2, [r3, #0]
      break;
 8004906:	e003      	b.n	8004910 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
      break;
 800490e:	bf00      	nop
  }

  return ret;
 8004910:	68fb      	ldr	r3, [r7, #12]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop

0800491c <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef sDate = {0};
RTC_AlarmTypeDef sAlarm = {0};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 8004924:	f04f 33ff 	mov.w	r3, #4294967295
 8004928:	2208      	movs	r2, #8
 800492a:	4905      	ldr	r1, [pc, #20]	; (8004940 <HAL_RTC_AlarmAEventCallback+0x24>)
 800492c:	4805      	ldr	r0, [pc, #20]	; (8004944 <HAL_RTC_AlarmAEventCallback+0x28>)
 800492e:	f005 fefc 	bl	800a72a <HAL_UART_Transmit>
	flagA = 1;
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8004934:	2201      	movs	r2, #1
 8004936:	701a      	strb	r2, [r3, #0]
}
 8004938:	bf00      	nop
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	08017978 	.word	0x08017978
 8004944:	20005a3c 	.word	0x20005a3c
 8004948:	20000608 	.word	0x20000608

0800494c <MRT_SetupRTOS>:
}




bool MRT_SetupRTOS(UART_HandleTypeDef uart,uint8_t sleepT){
 800494c:	b084      	sub	sp, #16
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	f107 0c10 	add.w	ip, r7, #16
 8004958:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 800495c:	f04f 33ff 	mov.w	r3, #4294967295
 8004960:	2211      	movs	r2, #17
 8004962:	490e      	ldr	r1, [pc, #56]	; (800499c <MRT_SetupRTOS+0x50>)
 8004964:	480e      	ldr	r0, [pc, #56]	; (80049a0 <MRT_SetupRTOS+0x54>)
 8004966:	f005 fee0 	bl	800a72a <HAL_UART_Transmit>
	rtos.huart = uart;
 800496a:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <MRT_SetupRTOS+0x54>)
 800496c:	4618      	mov	r0, r3
 800496e:	f107 0310 	add.w	r3, r7, #16
 8004972:	2244      	movs	r2, #68	; 0x44
 8004974:	4619      	mov	r1, r3
 8004976:	f00d feeb 	bl	8012750 <memcpy>
	rtos.sleepTime = sleepT;
 800497a:	4a09      	ldr	r2, [pc, #36]	; (80049a0 <MRT_SetupRTOS+0x54>)
 800497c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8004980:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	bool wakingUp = MRT_WUProcedure();
 8004984:	f000 f80e 	bl	80049a4 <MRT_WUProcedure>
 8004988:	4603      	mov	r3, r0
 800498a:	71fb      	strb	r3, [r7, #7]
	return wakingUp;
 800498c:	79fb      	ldrb	r3, [r7, #7]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004998:	b004      	add	sp, #16
 800499a:	4770      	bx	lr
 800499c:	08017990 	.word	0x08017990
 80049a0:	20005a3c 	.word	0x20005a3c

080049a4 <MRT_WUProcedure>:



bool MRT_WUProcedure(void){
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0

	bool wakingUp = false;
 80049aa:	2300      	movs	r3, #0
 80049ac:	71fb      	strb	r3, [r7, #7]

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80049ae:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <MRT_WUProcedure+0x5c>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d11b      	bne.n	80049f2 <MRT_WUProcedure+0x4e>
	{
		wakingUp = true;
 80049ba:	2301      	movs	r3, #1
 80049bc:	71fb      	strb	r3, [r7, #7]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 80049be:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <MRT_WUProcedure+0x5c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a0f      	ldr	r2, [pc, #60]	; (8004a00 <MRT_WUProcedure+0x5c>)
 80049c4:	f043 0308 	orr.w	r3, r3, #8
 80049c8:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <MRT_WUProcedure+0x60>)
 80049cc:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80049ce:	6838      	ldr	r0, [r7, #0]
 80049d0:	f7fb fc0e 	bl	80001f0 <strlen>
 80049d4:	4603      	mov	r3, r0
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	6839      	ldr	r1, [r7, #0]
 80049de:	480a      	ldr	r0, [pc, #40]	; (8004a08 <MRT_WUProcedure+0x64>)
 80049e0:	f005 fea3 	bl	800a72a <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 80049e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80049e8:	f003 f976 	bl	8007cd8 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80049ec:	4807      	ldr	r0, [pc, #28]	; (8004a0c <MRT_WUProcedure+0x68>)
 80049ee:	f004 fbcf 	bl	8009190 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 80049f2:	f000 f80d 	bl	8004a10 <MRT_ClearFlags>

	return wakingUp;
 80049f6:	79fb      	ldrb	r3, [r7, #7]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40007000 	.word	0x40007000
 8004a04:	080179a4 	.word	0x080179a4
 8004a08:	20005a3c 	.word	0x20005a3c
 8004a0c:	20005764 	.word	0x20005764

08004a10 <MRT_ClearFlags>:

void MRT_ClearFlags(void){
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 8004a14:	f04f 33ff 	mov.w	r3, #4294967295
 8004a18:	2214      	movs	r2, #20
 8004a1a:	4932      	ldr	r1, [pc, #200]	; (8004ae4 <MRT_ClearFlags+0xd4>)
 8004a1c:	4832      	ldr	r0, [pc, #200]	; (8004ae8 <MRT_ClearFlags+0xd8>)
 8004a1e:	f005 fe84 	bl	800a72a <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8004a22:	4b32      	ldr	r3, [pc, #200]	; (8004aec <MRT_ClearFlags+0xdc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	22ca      	movs	r2, #202	; 0xca
 8004a28:	625a      	str	r2, [r3, #36]	; 0x24
 8004a2a:	4b30      	ldr	r3, [pc, #192]	; (8004aec <MRT_ClearFlags+0xdc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2253      	movs	r2, #83	; 0x53
 8004a30:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8004a32:	e00f      	b.n	8004a54 <MRT_ClearFlags+0x44>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 8004a34:	f04f 33ff 	mov.w	r3, #4294967295
 8004a38:	2217      	movs	r2, #23
 8004a3a:	492d      	ldr	r1, [pc, #180]	; (8004af0 <MRT_ClearFlags+0xe0>)
 8004a3c:	482a      	ldr	r0, [pc, #168]	; (8004ae8 <MRT_ClearFlags+0xd8>)
 8004a3e:	f005 fe74 	bl	800a72a <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8004a42:	4b2a      	ldr	r3, [pc, #168]	; (8004aec <MRT_ClearFlags+0xdc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	4b28      	ldr	r3, [pc, #160]	; (8004aec <MRT_ClearFlags+0xdc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004a52:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8004a54:	4b25      	ldr	r3, [pc, #148]	; (8004aec <MRT_ClearFlags+0xdc>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e8      	bne.n	8004a34 <MRT_ClearFlags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004a62:	4b22      	ldr	r3, [pc, #136]	; (8004aec <MRT_ClearFlags+0xdc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	22ff      	movs	r2, #255	; 0xff
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004a6a:	4b22      	ldr	r3, [pc, #136]	; (8004af4 <MRT_ClearFlags+0xe4>)
 8004a6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a70:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8004a72:	4b1e      	ldr	r3, [pc, #120]	; (8004aec <MRT_ClearFlags+0xdc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	22ca      	movs	r2, #202	; 0xca
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24
 8004a7a:	4b1c      	ldr	r3, [pc, #112]	; (8004aec <MRT_ClearFlags+0xdc>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2253      	movs	r2, #83	; 0x53
 8004a80:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8004a82:	e00f      	b.n	8004aa4 <MRT_ClearFlags+0x94>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8004a84:	f04f 33ff 	mov.w	r3, #4294967295
 8004a88:	2217      	movs	r2, #23
 8004a8a:	491b      	ldr	r1, [pc, #108]	; (8004af8 <MRT_ClearFlags+0xe8>)
 8004a8c:	4816      	ldr	r0, [pc, #88]	; (8004ae8 <MRT_ClearFlags+0xd8>)
 8004a8e:	f005 fe4c 	bl	800a72a <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8004a92:	4b16      	ldr	r3, [pc, #88]	; (8004aec <MRT_ClearFlags+0xdc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	4b14      	ldr	r3, [pc, #80]	; (8004aec <MRT_ClearFlags+0xdc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004aa2:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8004aa4:	4b11      	ldr	r3, [pc, #68]	; (8004aec <MRT_ClearFlags+0xdc>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e8      	bne.n	8004a84 <MRT_ClearFlags+0x74>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004ab2:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <MRT_ClearFlags+0xdc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	22ff      	movs	r2, #255	; 0xff
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004aba:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <MRT_ClearFlags+0xe4>)
 8004abc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ac0:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8004ac2:	4b0e      	ldr	r3, [pc, #56]	; (8004afc <MRT_ClearFlags+0xec>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a0d      	ldr	r2, [pc, #52]	; (8004afc <MRT_ClearFlags+0xec>)
 8004ac8:	f043 0304 	orr.w	r3, r3, #4
 8004acc:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <MRT_ClearFlags+0xdc>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	4b05      	ldr	r3, [pc, #20]	; (8004aec <MRT_ClearFlags+0xdc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004ade:	60da      	str	r2, [r3, #12]
}
 8004ae0:	bf00      	nop
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	080179c4 	.word	0x080179c4
 8004ae8:	20005a3c 	.word	0x20005a3c
 8004aec:	20005764 	.word	0x20005764
 8004af0:	080179dc 	.word	0x080179dc
 8004af4:	40013c00 	.word	0x40013c00
 8004af8:	080179f4 	.word	0x080179f4
 8004afc:	40007000 	.word	0x40007000

08004b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b04:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <HAL_Init+0x40>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a0d      	ldr	r2, [pc, #52]	; (8004b40 <HAL_Init+0x40>)
 8004b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <HAL_Init+0x40>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a0a      	ldr	r2, [pc, #40]	; (8004b40 <HAL_Init+0x40>)
 8004b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b1c:	4b08      	ldr	r3, [pc, #32]	; (8004b40 <HAL_Init+0x40>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a07      	ldr	r2, [pc, #28]	; (8004b40 <HAL_Init+0x40>)
 8004b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b28:	2003      	movs	r0, #3
 8004b2a:	f000 fb92 	bl	8005252 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b2e:	2000      	movs	r0, #0
 8004b30:	f7fe f954 	bl	8002ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b34:	f7fd fe18 	bl	8002768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40023c00 	.word	0x40023c00

08004b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b48:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <HAL_IncTick+0x20>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_IncTick+0x24>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4413      	add	r3, r2
 8004b54:	4a04      	ldr	r2, [pc, #16]	; (8004b68 <HAL_IncTick+0x24>)
 8004b56:	6013      	str	r3, [r2, #0]
}
 8004b58:	bf00      	nop
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000008 	.word	0x20000008
 8004b68:	20005a84 	.word	0x20005a84

08004b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8004b70:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <HAL_GetTick+0x14>)
 8004b72:	681b      	ldr	r3, [r3, #0]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20005a84 	.word	0x20005a84

08004b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b8c:	f7ff ffee 	bl	8004b6c <HAL_GetTick>
 8004b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d005      	beq.n	8004baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <HAL_Delay+0x44>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004baa:	bf00      	nop
 8004bac:	f7ff ffde 	bl	8004b6c <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d8f7      	bhi.n	8004bac <HAL_Delay+0x28>
  {
  }
}
 8004bbc:	bf00      	nop
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000008 	.word	0x20000008

08004bcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e033      	b.n	8004c4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fd fde8 	bl	80027c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d118      	bne.n	8004c3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c12:	f023 0302 	bic.w	r3, r3, #2
 8004c16:	f043 0202 	orr.w	r2, r3, #2
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f94a 	bl	8004eb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	f043 0201 	orr.w	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
 8004c3a:	e001      	b.n	8004c40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x1c>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e113      	b.n	8004e98 <HAL_ADC_ConfigChannel+0x244>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b09      	cmp	r3, #9
 8004c7e:	d925      	bls.n	8004ccc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68d9      	ldr	r1, [r3, #12]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4613      	mov	r3, r2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	4413      	add	r3, r2
 8004c94:	3b1e      	subs	r3, #30
 8004c96:	2207      	movs	r2, #7
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	43da      	mvns	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	400a      	ands	r2, r1
 8004ca4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68d9      	ldr	r1, [r3, #12]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	4603      	mov	r3, r0
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	4403      	add	r3, r0
 8004cbe:	3b1e      	subs	r3, #30
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	60da      	str	r2, [r3, #12]
 8004cca:	e022      	b.n	8004d12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6919      	ldr	r1, [r3, #16]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4613      	mov	r3, r2
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	4413      	add	r3, r2
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43da      	mvns	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	400a      	ands	r2, r1
 8004cee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6919      	ldr	r1, [r3, #16]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	4618      	mov	r0, r3
 8004d02:	4603      	mov	r3, r0
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	4403      	add	r3, r0
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d824      	bhi.n	8004d64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	3b05      	subs	r3, #5
 8004d2c:	221f      	movs	r2, #31
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43da      	mvns	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	400a      	ands	r2, r1
 8004d3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	4618      	mov	r0, r3
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	3b05      	subs	r3, #5
 8004d56:	fa00 f203 	lsl.w	r2, r0, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	635a      	str	r2, [r3, #52]	; 0x34
 8004d62:	e04c      	b.n	8004dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b0c      	cmp	r3, #12
 8004d6a:	d824      	bhi.n	8004db6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3b23      	subs	r3, #35	; 0x23
 8004d7e:	221f      	movs	r2, #31
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	43da      	mvns	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	400a      	ands	r2, r1
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	3b23      	subs	r3, #35	; 0x23
 8004da8:	fa00 f203 	lsl.w	r2, r0, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
 8004db4:	e023      	b.n	8004dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3b41      	subs	r3, #65	; 0x41
 8004dc8:	221f      	movs	r2, #31
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43da      	mvns	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	400a      	ands	r2, r1
 8004dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	4618      	mov	r0, r3
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	3b41      	subs	r3, #65	; 0x41
 8004df2:	fa00 f203 	lsl.w	r2, r0, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dfe:	4b29      	ldr	r3, [pc, #164]	; (8004ea4 <HAL_ADC_ConfigChannel+0x250>)
 8004e00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a28      	ldr	r2, [pc, #160]	; (8004ea8 <HAL_ADC_ConfigChannel+0x254>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d10f      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x1d8>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b12      	cmp	r3, #18
 8004e12:	d10b      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1d      	ldr	r2, [pc, #116]	; (8004ea8 <HAL_ADC_ConfigChannel+0x254>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d12b      	bne.n	8004e8e <HAL_ADC_ConfigChannel+0x23a>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1c      	ldr	r2, [pc, #112]	; (8004eac <HAL_ADC_ConfigChannel+0x258>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <HAL_ADC_ConfigChannel+0x1f4>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b11      	cmp	r3, #17
 8004e46:	d122      	bne.n	8004e8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a11      	ldr	r2, [pc, #68]	; (8004eac <HAL_ADC_ConfigChannel+0x258>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d111      	bne.n	8004e8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e6a:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <HAL_ADC_ConfigChannel+0x25c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a11      	ldr	r2, [pc, #68]	; (8004eb4 <HAL_ADC_ConfigChannel+0x260>)
 8004e70:	fba2 2303 	umull	r2, r3, r2, r3
 8004e74:	0c9a      	lsrs	r2, r3, #18
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e80:	e002      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f9      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	40012300 	.word	0x40012300
 8004ea8:	40012000 	.word	0x40012000
 8004eac:	10000012 	.word	0x10000012
 8004eb0:	20000000 	.word	0x20000000
 8004eb4:	431bde83 	.word	0x431bde83

08004eb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ec0:	4b79      	ldr	r3, [pc, #484]	; (80050a8 <ADC_Init+0x1f0>)
 8004ec2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6859      	ldr	r1, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	021a      	lsls	r2, r3, #8
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6859      	ldr	r1, [r3, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6899      	ldr	r1, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	4a58      	ldr	r2, [pc, #352]	; (80050ac <ADC_Init+0x1f4>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d022      	beq.n	8004f96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6899      	ldr	r1, [r3, #8]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6899      	ldr	r1, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	e00f      	b.n	8004fb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0202 	bic.w	r2, r2, #2
 8004fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6899      	ldr	r1, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	7e1b      	ldrb	r3, [r3, #24]
 8004fd0:	005a      	lsls	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01b      	beq.n	800501c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005002:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6859      	ldr	r1, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	3b01      	subs	r3, #1
 8005010:	035a      	lsls	r2, r3, #13
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	605a      	str	r2, [r3, #4]
 800501a:	e007      	b.n	800502c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800502a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	3b01      	subs	r3, #1
 8005048:	051a      	lsls	r2, r3, #20
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6899      	ldr	r1, [r3, #8]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800506e:	025a      	lsls	r2, r3, #9
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6899      	ldr	r1, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	029a      	lsls	r2, r3, #10
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	609a      	str	r2, [r3, #8]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	40012300 	.word	0x40012300
 80050ac:	0f000001 	.word	0x0f000001

080050b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050c0:	4b0c      	ldr	r3, [pc, #48]	; (80050f4 <__NVIC_SetPriorityGrouping+0x44>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050cc:	4013      	ands	r3, r2
 80050ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050e2:	4a04      	ldr	r2, [pc, #16]	; (80050f4 <__NVIC_SetPriorityGrouping+0x44>)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	60d3      	str	r3, [r2, #12]
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	e000ed00 	.word	0xe000ed00

080050f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050fc:	4b04      	ldr	r3, [pc, #16]	; (8005110 <__NVIC_GetPriorityGrouping+0x18>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	0a1b      	lsrs	r3, r3, #8
 8005102:	f003 0307 	and.w	r3, r3, #7
}
 8005106:	4618      	mov	r0, r3
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	e000ed00 	.word	0xe000ed00

08005114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	4603      	mov	r3, r0
 800511c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800511e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005122:	2b00      	cmp	r3, #0
 8005124:	db0b      	blt.n	800513e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005126:	79fb      	ldrb	r3, [r7, #7]
 8005128:	f003 021f 	and.w	r2, r3, #31
 800512c:	4907      	ldr	r1, [pc, #28]	; (800514c <__NVIC_EnableIRQ+0x38>)
 800512e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	2001      	movs	r0, #1
 8005136:	fa00 f202 	lsl.w	r2, r0, r2
 800513a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	e000e100 	.word	0xe000e100

08005150 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800515a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515e:	2b00      	cmp	r3, #0
 8005160:	db12      	blt.n	8005188 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	f003 021f 	and.w	r2, r3, #31
 8005168:	490a      	ldr	r1, [pc, #40]	; (8005194 <__NVIC_DisableIRQ+0x44>)
 800516a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	2001      	movs	r0, #1
 8005172:	fa00 f202 	lsl.w	r2, r0, r2
 8005176:	3320      	adds	r3, #32
 8005178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800517c:	f3bf 8f4f 	dsb	sy
}
 8005180:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005182:	f3bf 8f6f 	isb	sy
}
 8005186:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	e000e100 	.word	0xe000e100

08005198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	6039      	str	r1, [r7, #0]
 80051a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	db0a      	blt.n	80051c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	490c      	ldr	r1, [pc, #48]	; (80051e4 <__NVIC_SetPriority+0x4c>)
 80051b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b6:	0112      	lsls	r2, r2, #4
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	440b      	add	r3, r1
 80051bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051c0:	e00a      	b.n	80051d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	4908      	ldr	r1, [pc, #32]	; (80051e8 <__NVIC_SetPriority+0x50>)
 80051c8:	79fb      	ldrb	r3, [r7, #7]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	3b04      	subs	r3, #4
 80051d0:	0112      	lsls	r2, r2, #4
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	440b      	add	r3, r1
 80051d6:	761a      	strb	r2, [r3, #24]
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	e000e100 	.word	0xe000e100
 80051e8:	e000ed00 	.word	0xe000ed00

080051ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b089      	sub	sp, #36	; 0x24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f1c3 0307 	rsb	r3, r3, #7
 8005206:	2b04      	cmp	r3, #4
 8005208:	bf28      	it	cs
 800520a:	2304      	movcs	r3, #4
 800520c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	3304      	adds	r3, #4
 8005212:	2b06      	cmp	r3, #6
 8005214:	d902      	bls.n	800521c <NVIC_EncodePriority+0x30>
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	3b03      	subs	r3, #3
 800521a:	e000      	b.n	800521e <NVIC_EncodePriority+0x32>
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005220:	f04f 32ff 	mov.w	r2, #4294967295
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	43da      	mvns	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	401a      	ands	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005234:	f04f 31ff 	mov.w	r1, #4294967295
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	fa01 f303 	lsl.w	r3, r1, r3
 800523e:	43d9      	mvns	r1, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005244:	4313      	orrs	r3, r2
         );
}
 8005246:	4618      	mov	r0, r3
 8005248:	3724      	adds	r7, #36	; 0x24
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b082      	sub	sp, #8
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff ff28 	bl	80050b0 <__NVIC_SetPriorityGrouping>
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	4603      	mov	r3, r0
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800527a:	f7ff ff3d 	bl	80050f8 <__NVIC_GetPriorityGrouping>
 800527e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	6978      	ldr	r0, [r7, #20]
 8005286:	f7ff ffb1 	bl	80051ec <NVIC_EncodePriority>
 800528a:	4602      	mov	r2, r0
 800528c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff ff80 	bl	8005198 <__NVIC_SetPriority>
}
 8005298:	bf00      	nop
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff ff30 	bl	8005114 <__NVIC_EnableIRQ>
}
 80052b4:	bf00      	nop
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80052c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff ff40 	bl	8005150 <__NVIC_DisableIRQ>
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052d8:	b480      	push	{r7}
 80052da:	b089      	sub	sp, #36	; 0x24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	e177      	b.n	80055e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052f4:	2201      	movs	r2, #1
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4013      	ands	r3, r2
 8005306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	429a      	cmp	r2, r3
 800530e:	f040 8166 	bne.w	80055de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b01      	cmp	r3, #1
 800531c:	d005      	beq.n	800532a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005326:	2b02      	cmp	r3, #2
 8005328:	d130      	bne.n	800538c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	2203      	movs	r2, #3
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	43db      	mvns	r3, r3
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	4013      	ands	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	4313      	orrs	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005360:	2201      	movs	r2, #1
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	43db      	mvns	r3, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	4013      	ands	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	091b      	lsrs	r3, r3, #4
 8005376:	f003 0201 	and.w	r2, r3, #1
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4313      	orrs	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	2b03      	cmp	r3, #3
 8005396:	d017      	beq.n	80053c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	2203      	movs	r2, #3
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	43db      	mvns	r3, r3
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	4013      	ands	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4313      	orrs	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f003 0303 	and.w	r3, r3, #3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d123      	bne.n	800541c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	08da      	lsrs	r2, r3, #3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3208      	adds	r2, #8
 80053dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	220f      	movs	r2, #15
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4013      	ands	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4313      	orrs	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	08da      	lsrs	r2, r3, #3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3208      	adds	r2, #8
 8005416:	69b9      	ldr	r1, [r7, #24]
 8005418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	2203      	movs	r2, #3
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	43db      	mvns	r3, r3
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	4013      	ands	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 0203 	and.w	r2, r3, #3
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	4313      	orrs	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 80c0 	beq.w	80055de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	4b66      	ldr	r3, [pc, #408]	; (80055fc <HAL_GPIO_Init+0x324>)
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	4a65      	ldr	r2, [pc, #404]	; (80055fc <HAL_GPIO_Init+0x324>)
 8005468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800546c:	6453      	str	r3, [r2, #68]	; 0x44
 800546e:	4b63      	ldr	r3, [pc, #396]	; (80055fc <HAL_GPIO_Init+0x324>)
 8005470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800547a:	4a61      	ldr	r2, [pc, #388]	; (8005600 <HAL_GPIO_Init+0x328>)
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	089b      	lsrs	r3, r3, #2
 8005480:	3302      	adds	r3, #2
 8005482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	220f      	movs	r2, #15
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	43db      	mvns	r3, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	4013      	ands	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a58      	ldr	r2, [pc, #352]	; (8005604 <HAL_GPIO_Init+0x32c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d037      	beq.n	8005516 <HAL_GPIO_Init+0x23e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a57      	ldr	r2, [pc, #348]	; (8005608 <HAL_GPIO_Init+0x330>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d031      	beq.n	8005512 <HAL_GPIO_Init+0x23a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a56      	ldr	r2, [pc, #344]	; (800560c <HAL_GPIO_Init+0x334>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d02b      	beq.n	800550e <HAL_GPIO_Init+0x236>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a55      	ldr	r2, [pc, #340]	; (8005610 <HAL_GPIO_Init+0x338>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d025      	beq.n	800550a <HAL_GPIO_Init+0x232>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a54      	ldr	r2, [pc, #336]	; (8005614 <HAL_GPIO_Init+0x33c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d01f      	beq.n	8005506 <HAL_GPIO_Init+0x22e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a53      	ldr	r2, [pc, #332]	; (8005618 <HAL_GPIO_Init+0x340>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d019      	beq.n	8005502 <HAL_GPIO_Init+0x22a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a52      	ldr	r2, [pc, #328]	; (800561c <HAL_GPIO_Init+0x344>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d013      	beq.n	80054fe <HAL_GPIO_Init+0x226>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a51      	ldr	r2, [pc, #324]	; (8005620 <HAL_GPIO_Init+0x348>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00d      	beq.n	80054fa <HAL_GPIO_Init+0x222>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a50      	ldr	r2, [pc, #320]	; (8005624 <HAL_GPIO_Init+0x34c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d007      	beq.n	80054f6 <HAL_GPIO_Init+0x21e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a4f      	ldr	r2, [pc, #316]	; (8005628 <HAL_GPIO_Init+0x350>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d101      	bne.n	80054f2 <HAL_GPIO_Init+0x21a>
 80054ee:	2309      	movs	r3, #9
 80054f0:	e012      	b.n	8005518 <HAL_GPIO_Init+0x240>
 80054f2:	230a      	movs	r3, #10
 80054f4:	e010      	b.n	8005518 <HAL_GPIO_Init+0x240>
 80054f6:	2308      	movs	r3, #8
 80054f8:	e00e      	b.n	8005518 <HAL_GPIO_Init+0x240>
 80054fa:	2307      	movs	r3, #7
 80054fc:	e00c      	b.n	8005518 <HAL_GPIO_Init+0x240>
 80054fe:	2306      	movs	r3, #6
 8005500:	e00a      	b.n	8005518 <HAL_GPIO_Init+0x240>
 8005502:	2305      	movs	r3, #5
 8005504:	e008      	b.n	8005518 <HAL_GPIO_Init+0x240>
 8005506:	2304      	movs	r3, #4
 8005508:	e006      	b.n	8005518 <HAL_GPIO_Init+0x240>
 800550a:	2303      	movs	r3, #3
 800550c:	e004      	b.n	8005518 <HAL_GPIO_Init+0x240>
 800550e:	2302      	movs	r3, #2
 8005510:	e002      	b.n	8005518 <HAL_GPIO_Init+0x240>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <HAL_GPIO_Init+0x240>
 8005516:	2300      	movs	r3, #0
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	f002 0203 	and.w	r2, r2, #3
 800551e:	0092      	lsls	r2, r2, #2
 8005520:	4093      	lsls	r3, r2
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	4313      	orrs	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005528:	4935      	ldr	r1, [pc, #212]	; (8005600 <HAL_GPIO_Init+0x328>)
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	089b      	lsrs	r3, r3, #2
 800552e:	3302      	adds	r3, #2
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005536:	4b3d      	ldr	r3, [pc, #244]	; (800562c <HAL_GPIO_Init+0x354>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	43db      	mvns	r3, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4013      	ands	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800555a:	4a34      	ldr	r2, [pc, #208]	; (800562c <HAL_GPIO_Init+0x354>)
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005560:	4b32      	ldr	r3, [pc, #200]	; (800562c <HAL_GPIO_Init+0x354>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	43db      	mvns	r3, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4013      	ands	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005584:	4a29      	ldr	r2, [pc, #164]	; (800562c <HAL_GPIO_Init+0x354>)
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800558a:	4b28      	ldr	r3, [pc, #160]	; (800562c <HAL_GPIO_Init+0x354>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	43db      	mvns	r3, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4013      	ands	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055ae:	4a1f      	ldr	r2, [pc, #124]	; (800562c <HAL_GPIO_Init+0x354>)
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055b4:	4b1d      	ldr	r3, [pc, #116]	; (800562c <HAL_GPIO_Init+0x354>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	43db      	mvns	r3, r3
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	4013      	ands	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055d8:	4a14      	ldr	r2, [pc, #80]	; (800562c <HAL_GPIO_Init+0x354>)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	3301      	adds	r3, #1
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	2b0f      	cmp	r3, #15
 80055e8:	f67f ae84 	bls.w	80052f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	3724      	adds	r7, #36	; 0x24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800
 8005600:	40013800 	.word	0x40013800
 8005604:	40020000 	.word	0x40020000
 8005608:	40020400 	.word	0x40020400
 800560c:	40020800 	.word	0x40020800
 8005610:	40020c00 	.word	0x40020c00
 8005614:	40021000 	.word	0x40021000
 8005618:	40021400 	.word	0x40021400
 800561c:	40021800 	.word	0x40021800
 8005620:	40021c00 	.word	0x40021c00
 8005624:	40022000 	.word	0x40022000
 8005628:	40022400 	.word	0x40022400
 800562c:	40013c00 	.word	0x40013c00

08005630 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	887b      	ldrh	r3, [r7, #2]
 8005642:	4013      	ands	r3, r2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
 800564c:	e001      	b.n	8005652 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800564e:	2300      	movs	r3, #0
 8005650:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005652:	7bfb      	ldrb	r3, [r7, #15]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	807b      	strh	r3, [r7, #2]
 800566c:	4613      	mov	r3, r2
 800566e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005670:	787b      	ldrb	r3, [r7, #1]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005676:	887a      	ldrh	r2, [r7, #2]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800567c:	e003      	b.n	8005686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800567e:	887b      	ldrh	r3, [r7, #2]
 8005680:	041a      	lsls	r2, r3, #16
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	619a      	str	r2, [r3, #24]
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e12b      	b.n	80058fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fd f8c4 	bl	8002848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2224      	movs	r2, #36	; 0x24
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0201 	bic.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056f8:	f002 ff4c 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 80056fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	4a81      	ldr	r2, [pc, #516]	; (8005908 <HAL_I2C_Init+0x274>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d807      	bhi.n	8005718 <HAL_I2C_Init+0x84>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4a80      	ldr	r2, [pc, #512]	; (800590c <HAL_I2C_Init+0x278>)
 800570c:	4293      	cmp	r3, r2
 800570e:	bf94      	ite	ls
 8005710:	2301      	movls	r3, #1
 8005712:	2300      	movhi	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	e006      	b.n	8005726 <HAL_I2C_Init+0x92>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4a7d      	ldr	r2, [pc, #500]	; (8005910 <HAL_I2C_Init+0x27c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	bf94      	ite	ls
 8005720:	2301      	movls	r3, #1
 8005722:	2300      	movhi	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e0e7      	b.n	80058fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4a78      	ldr	r2, [pc, #480]	; (8005914 <HAL_I2C_Init+0x280>)
 8005732:	fba2 2303 	umull	r2, r3, r2, r3
 8005736:	0c9b      	lsrs	r3, r3, #18
 8005738:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	4a6a      	ldr	r2, [pc, #424]	; (8005908 <HAL_I2C_Init+0x274>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d802      	bhi.n	8005768 <HAL_I2C_Init+0xd4>
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	3301      	adds	r3, #1
 8005766:	e009      	b.n	800577c <HAL_I2C_Init+0xe8>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	4a69      	ldr	r2, [pc, #420]	; (8005918 <HAL_I2C_Init+0x284>)
 8005774:	fba2 2303 	umull	r2, r3, r2, r3
 8005778:	099b      	lsrs	r3, r3, #6
 800577a:	3301      	adds	r3, #1
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6812      	ldr	r2, [r2, #0]
 8005780:	430b      	orrs	r3, r1
 8005782:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800578e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	495c      	ldr	r1, [pc, #368]	; (8005908 <HAL_I2C_Init+0x274>)
 8005798:	428b      	cmp	r3, r1
 800579a:	d819      	bhi.n	80057d0 <HAL_I2C_Init+0x13c>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	1e59      	subs	r1, r3, #1
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80057aa:	1c59      	adds	r1, r3, #1
 80057ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057b0:	400b      	ands	r3, r1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <HAL_I2C_Init+0x138>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	1e59      	subs	r1, r3, #1
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80057c4:	3301      	adds	r3, #1
 80057c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ca:	e051      	b.n	8005870 <HAL_I2C_Init+0x1dc>
 80057cc:	2304      	movs	r3, #4
 80057ce:	e04f      	b.n	8005870 <HAL_I2C_Init+0x1dc>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d111      	bne.n	80057fc <HAL_I2C_Init+0x168>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	1e58      	subs	r0, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6859      	ldr	r1, [r3, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	440b      	add	r3, r1
 80057e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ea:	3301      	adds	r3, #1
 80057ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	bf0c      	ite	eq
 80057f4:	2301      	moveq	r3, #1
 80057f6:	2300      	movne	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	e012      	b.n	8005822 <HAL_I2C_Init+0x18e>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	1e58      	subs	r0, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6859      	ldr	r1, [r3, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	0099      	lsls	r1, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005812:	3301      	adds	r3, #1
 8005814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005818:	2b00      	cmp	r3, #0
 800581a:	bf0c      	ite	eq
 800581c:	2301      	moveq	r3, #1
 800581e:	2300      	movne	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_I2C_Init+0x196>
 8005826:	2301      	movs	r3, #1
 8005828:	e022      	b.n	8005870 <HAL_I2C_Init+0x1dc>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10e      	bne.n	8005850 <HAL_I2C_Init+0x1bc>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	1e58      	subs	r0, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6859      	ldr	r1, [r3, #4]
 800583a:	460b      	mov	r3, r1
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	440b      	add	r3, r1
 8005840:	fbb0 f3f3 	udiv	r3, r0, r3
 8005844:	3301      	adds	r3, #1
 8005846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800584a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800584e:	e00f      	b.n	8005870 <HAL_I2C_Init+0x1dc>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	1e58      	subs	r0, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6859      	ldr	r1, [r3, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	440b      	add	r3, r1
 800585e:	0099      	lsls	r1, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	fbb0 f3f3 	udiv	r3, r0, r3
 8005866:	3301      	adds	r3, #1
 8005868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800586c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	6809      	ldr	r1, [r1, #0]
 8005874:	4313      	orrs	r3, r2
 8005876:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69da      	ldr	r2, [r3, #28]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800589e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6911      	ldr	r1, [r2, #16]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68d2      	ldr	r2, [r2, #12]
 80058aa:	4311      	orrs	r1, r2
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6812      	ldr	r2, [r2, #0]
 80058b0:	430b      	orrs	r3, r1
 80058b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695a      	ldr	r2, [r3, #20]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	000186a0 	.word	0x000186a0
 800590c:	001e847f 	.word	0x001e847f
 8005910:	003d08ff 	.word	0x003d08ff
 8005914:	431bde83 	.word	0x431bde83
 8005918:	10624dd3 	.word	0x10624dd3

0800591c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	4608      	mov	r0, r1
 8005926:	4611      	mov	r1, r2
 8005928:	461a      	mov	r2, r3
 800592a:	4603      	mov	r3, r0
 800592c:	817b      	strh	r3, [r7, #10]
 800592e:	460b      	mov	r3, r1
 8005930:	813b      	strh	r3, [r7, #8]
 8005932:	4613      	mov	r3, r2
 8005934:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005936:	f7ff f919 	bl	8004b6c <HAL_GetTick>
 800593a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b20      	cmp	r3, #32
 8005946:	f040 80d9 	bne.w	8005afc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	2319      	movs	r3, #25
 8005950:	2201      	movs	r2, #1
 8005952:	496d      	ldr	r1, [pc, #436]	; (8005b08 <HAL_I2C_Mem_Write+0x1ec>)
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 fde3 	bl	8006520 <I2C_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
 8005962:	e0cc      	b.n	8005afe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <HAL_I2C_Mem_Write+0x56>
 800596e:	2302      	movs	r3, #2
 8005970:	e0c5      	b.n	8005afe <HAL_I2C_Mem_Write+0x1e2>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b01      	cmp	r3, #1
 8005986:	d007      	beq.n	8005998 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2221      	movs	r2, #33	; 0x21
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2240      	movs	r2, #64	; 0x40
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a3a      	ldr	r2, [r7, #32]
 80059c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80059c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4a4d      	ldr	r2, [pc, #308]	; (8005b0c <HAL_I2C_Mem_Write+0x1f0>)
 80059d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059da:	88f8      	ldrh	r0, [r7, #6]
 80059dc:	893a      	ldrh	r2, [r7, #8]
 80059de:	8979      	ldrh	r1, [r7, #10]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	4603      	mov	r3, r0
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 fc1a 	bl	8006224 <I2C_RequestMemoryWrite>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d052      	beq.n	8005a9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e081      	b.n	8005afe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 fe64 	bl	80066cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00d      	beq.n	8005a26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d107      	bne.n	8005a22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e06b      	b.n	8005afe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	781a      	ldrb	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d11b      	bne.n	8005a9c <HAL_I2C_Mem_Write+0x180>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d017      	beq.n	8005a9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	781a      	ldrb	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1aa      	bne.n	80059fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 fe50 	bl	800674e <I2C_WaitOnBTFFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00d      	beq.n	8005ad0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d107      	bne.n	8005acc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e016      	b.n	8005afe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	e000      	b.n	8005afe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005afc:	2302      	movs	r3, #2
  }
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	00100002 	.word	0x00100002
 8005b0c:	ffff0000 	.word	0xffff0000

08005b10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08c      	sub	sp, #48	; 0x30
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	4608      	mov	r0, r1
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	4603      	mov	r3, r0
 8005b20:	817b      	strh	r3, [r7, #10]
 8005b22:	460b      	mov	r3, r1
 8005b24:	813b      	strh	r3, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b2a:	f7ff f81f 	bl	8004b6c <HAL_GetTick>
 8005b2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	f040 8208 	bne.w	8005f4e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	2319      	movs	r3, #25
 8005b44:	2201      	movs	r2, #1
 8005b46:	497b      	ldr	r1, [pc, #492]	; (8005d34 <HAL_I2C_Mem_Read+0x224>)
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 fce9 	bl	8006520 <I2C_WaitOnFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005b54:	2302      	movs	r3, #2
 8005b56:	e1fb      	b.n	8005f50 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_I2C_Mem_Read+0x56>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e1f4      	b.n	8005f50 <HAL_I2C_Mem_Read+0x440>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d007      	beq.n	8005b8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2222      	movs	r2, #34	; 0x22
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2240      	movs	r2, #64	; 0x40
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4a5b      	ldr	r2, [pc, #364]	; (8005d38 <HAL_I2C_Mem_Read+0x228>)
 8005bcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bce:	88f8      	ldrh	r0, [r7, #6]
 8005bd0:	893a      	ldrh	r2, [r7, #8]
 8005bd2:	8979      	ldrh	r1, [r7, #10]
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	9301      	str	r3, [sp, #4]
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	4603      	mov	r3, r0
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 fbb6 	bl	8006350 <I2C_RequestMemoryRead>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e1b0      	b.n	8005f50 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d113      	bne.n	8005c1e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	623b      	str	r3, [r7, #32]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	623b      	str	r3, [r7, #32]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	623b      	str	r3, [r7, #32]
 8005c0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	e184      	b.n	8005f28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d11b      	bne.n	8005c5e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c36:	2300      	movs	r3, #0
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	61fb      	str	r3, [r7, #28]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	61fb      	str	r3, [r7, #28]
 8005c4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	e164      	b.n	8005f28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d11b      	bne.n	8005c9e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c86:	2300      	movs	r3, #0
 8005c88:	61bb      	str	r3, [r7, #24]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	e144      	b.n	8005f28 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005cb4:	e138      	b.n	8005f28 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	f200 80f1 	bhi.w	8005ea2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d123      	bne.n	8005d10 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fd7f 	bl	80067d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e139      	b.n	8005f50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d0e:	e10b      	b.n	8005f28 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d14e      	bne.n	8005db6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1e:	2200      	movs	r2, #0
 8005d20:	4906      	ldr	r1, [pc, #24]	; (8005d3c <HAL_I2C_Mem_Read+0x22c>)
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fbfc 	bl	8006520 <I2C_WaitOnFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d008      	beq.n	8005d40 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e10e      	b.n	8005f50 <HAL_I2C_Mem_Read+0x440>
 8005d32:	bf00      	nop
 8005d34:	00100002 	.word	0x00100002
 8005d38:	ffff0000 	.word	0xffff0000
 8005d3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005db4:	e0b8      	b.n	8005f28 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	4966      	ldr	r1, [pc, #408]	; (8005f58 <HAL_I2C_Mem_Read+0x448>)
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 fbad 	bl	8006520 <I2C_WaitOnFlagUntilTimeout>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e0bf      	b.n	8005f50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e18:	2200      	movs	r2, #0
 8005e1a:	494f      	ldr	r1, [pc, #316]	; (8005f58 <HAL_I2C_Mem_Read+0x448>)
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 fb7f 	bl	8006520 <I2C_WaitOnFlagUntilTimeout>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e091      	b.n	8005f50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691a      	ldr	r2, [r3, #16]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ea0:	e042      	b.n	8005f28 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 fc92 	bl	80067d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e04c      	b.n	8005f50 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d118      	bne.n	8005f28 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	691a      	ldr	r2, [r3, #16]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	3b01      	subs	r3, #1
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f47f aec2 	bne.w	8005cb6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e000      	b.n	8005f50 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005f4e:	2302      	movs	r3, #2
  }
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3728      	adds	r7, #40	; 0x28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	00010004 	.word	0x00010004

08005f5c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08a      	sub	sp, #40	; 0x28
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	607a      	str	r2, [r7, #4]
 8005f66:	603b      	str	r3, [r7, #0]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005f6c:	f7fe fdfe 	bl	8004b6c <HAL_GetTick>
 8005f70:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005f72:	2301      	movs	r3, #1
 8005f74:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	f040 8111 	bne.w	80061a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	2319      	movs	r3, #25
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	4988      	ldr	r1, [pc, #544]	; (80061b0 <HAL_I2C_IsDeviceReady+0x254>)
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 fac6 	bl	8006520 <I2C_WaitOnFlagUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e104      	b.n	80061a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <HAL_I2C_IsDeviceReady+0x50>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e0fd      	b.n	80061a8 <HAL_I2C_IsDeviceReady+0x24c>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d007      	beq.n	8005fd2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0201 	orr.w	r2, r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fe0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2224      	movs	r2, #36	; 0x24
 8005fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a70      	ldr	r2, [pc, #448]	; (80061b4 <HAL_I2C_IsDeviceReady+0x258>)
 8005ff4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006004:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2200      	movs	r2, #0
 800600e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 fa84 	bl	8006520 <I2C_WaitOnFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00d      	beq.n	800603a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602c:	d103      	bne.n	8006036 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006034:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e0b6      	b.n	80061a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800603a:	897b      	ldrh	r3, [r7, #10]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	461a      	mov	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006048:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800604a:	f7fe fd8f 	bl	8004b6c <HAL_GetTick>
 800604e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b02      	cmp	r3, #2
 800605c:	bf0c      	ite	eq
 800605e:	2301      	moveq	r3, #1
 8006060:	2300      	movne	r3, #0
 8006062:	b2db      	uxtb	r3, r3
 8006064:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006074:	bf0c      	ite	eq
 8006076:	2301      	moveq	r3, #1
 8006078:	2300      	movne	r3, #0
 800607a:	b2db      	uxtb	r3, r3
 800607c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800607e:	e025      	b.n	80060cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006080:	f7fe fd74 	bl	8004b6c <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d302      	bcc.n	8006096 <HAL_I2C_IsDeviceReady+0x13a>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d103      	bne.n	800609e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	22a0      	movs	r2, #160	; 0xa0
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	bf0c      	ite	eq
 80060ac:	2301      	moveq	r3, #1
 80060ae:	2300      	movne	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c2:	bf0c      	ite	eq
 80060c4:	2301      	moveq	r3, #1
 80060c6:	2300      	movne	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2ba0      	cmp	r3, #160	; 0xa0
 80060d6:	d005      	beq.n	80060e4 <HAL_I2C_IsDeviceReady+0x188>
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <HAL_I2C_IsDeviceReady+0x188>
 80060de:	7dbb      	ldrb	r3, [r7, #22]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0cd      	beq.n	8006080 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d129      	bne.n	800614e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006108:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800610a:	2300      	movs	r3, #0
 800610c:	613b      	str	r3, [r7, #16]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	613b      	str	r3, [r7, #16]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	2319      	movs	r3, #25
 8006126:	2201      	movs	r2, #1
 8006128:	4921      	ldr	r1, [pc, #132]	; (80061b0 <HAL_I2C_IsDeviceReady+0x254>)
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f9f8 	bl	8006520 <I2C_WaitOnFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e036      	b.n	80061a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	e02c      	b.n	80061a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800615c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006166:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	2319      	movs	r3, #25
 800616e:	2201      	movs	r2, #1
 8006170:	490f      	ldr	r1, [pc, #60]	; (80061b0 <HAL_I2C_IsDeviceReady+0x254>)
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 f9d4 	bl	8006520 <I2C_WaitOnFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e012      	b.n	80061a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	3301      	adds	r3, #1
 8006186:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	429a      	cmp	r2, r3
 800618e:	f4ff af32 	bcc.w	8005ff6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e000      	b.n	80061a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80061a6:	2302      	movs	r3, #2
  }
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3720      	adds	r7, #32
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	00100002 	.word	0x00100002
 80061b4:	ffff0000 	.word	0xffff0000

080061b8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d124      	bne.n	8006216 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2228      	movs	r2, #40	; 0x28
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d007      	beq.n	80061f2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0201 	orr.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006200:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006210:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e000      	b.n	8006218 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006216:	2302      	movs	r3, #2
  }
}
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af02      	add	r7, sp, #8
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	4608      	mov	r0, r1
 800622e:	4611      	mov	r1, r2
 8006230:	461a      	mov	r2, r3
 8006232:	4603      	mov	r3, r0
 8006234:	817b      	strh	r3, [r7, #10]
 8006236:	460b      	mov	r3, r1
 8006238:	813b      	strh	r3, [r7, #8]
 800623a:	4613      	mov	r3, r2
 800623c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800624c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	2200      	movs	r2, #0
 8006256:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 f960 	bl	8006520 <I2C_WaitOnFlagUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00d      	beq.n	8006282 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006274:	d103      	bne.n	800627e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800627c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e05f      	b.n	8006342 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006282:	897b      	ldrh	r3, [r7, #10]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006290:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	6a3a      	ldr	r2, [r7, #32]
 8006296:	492d      	ldr	r1, [pc, #180]	; (800634c <I2C_RequestMemoryWrite+0x128>)
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 f998 	bl	80065ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e04c      	b.n	8006342 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062a8:	2300      	movs	r3, #0
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c0:	6a39      	ldr	r1, [r7, #32]
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 fa02 	bl	80066cc <I2C_WaitOnTXEFlagUntilTimeout>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00d      	beq.n	80062ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d107      	bne.n	80062e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e02b      	b.n	8006342 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d105      	bne.n	80062fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062f0:	893b      	ldrh	r3, [r7, #8]
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	611a      	str	r2, [r3, #16]
 80062fa:	e021      	b.n	8006340 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062fc:	893b      	ldrh	r3, [r7, #8]
 80062fe:	0a1b      	lsrs	r3, r3, #8
 8006300:	b29b      	uxth	r3, r3
 8006302:	b2da      	uxtb	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800630a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800630c:	6a39      	ldr	r1, [r7, #32]
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 f9dc 	bl	80066cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00d      	beq.n	8006336 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	2b04      	cmp	r3, #4
 8006320:	d107      	bne.n	8006332 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006330:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e005      	b.n	8006342 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006336:	893b      	ldrh	r3, [r7, #8]
 8006338:	b2da      	uxtb	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	00010002 	.word	0x00010002

08006350 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af02      	add	r7, sp, #8
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	4608      	mov	r0, r1
 800635a:	4611      	mov	r1, r2
 800635c:	461a      	mov	r2, r3
 800635e:	4603      	mov	r3, r0
 8006360:	817b      	strh	r3, [r7, #10]
 8006362:	460b      	mov	r3, r1
 8006364:	813b      	strh	r3, [r7, #8]
 8006366:	4613      	mov	r3, r2
 8006368:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006378:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006388:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	2200      	movs	r2, #0
 8006392:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 f8c2 	bl	8006520 <I2C_WaitOnFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00d      	beq.n	80063be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b0:	d103      	bne.n	80063ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e0aa      	b.n	8006514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063be:	897b      	ldrh	r3, [r7, #10]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	6a3a      	ldr	r2, [r7, #32]
 80063d2:	4952      	ldr	r1, [pc, #328]	; (800651c <I2C_RequestMemoryRead+0x1cc>)
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f8fa 	bl	80065ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e097      	b.n	8006514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fc:	6a39      	ldr	r1, [r7, #32]
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 f964 	bl	80066cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00d      	beq.n	8006426 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	2b04      	cmp	r3, #4
 8006410:	d107      	bne.n	8006422 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006420:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e076      	b.n	8006514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006426:	88fb      	ldrh	r3, [r7, #6]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d105      	bne.n	8006438 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800642c:	893b      	ldrh	r3, [r7, #8]
 800642e:	b2da      	uxtb	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	611a      	str	r2, [r3, #16]
 8006436:	e021      	b.n	800647c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006438:	893b      	ldrh	r3, [r7, #8]
 800643a:	0a1b      	lsrs	r3, r3, #8
 800643c:	b29b      	uxth	r3, r3
 800643e:	b2da      	uxtb	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006448:	6a39      	ldr	r1, [r7, #32]
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f93e 	bl	80066cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00d      	beq.n	8006472 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	2b04      	cmp	r3, #4
 800645c:	d107      	bne.n	800646e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800646c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e050      	b.n	8006514 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006472:	893b      	ldrh	r3, [r7, #8]
 8006474:	b2da      	uxtb	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800647c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800647e:	6a39      	ldr	r1, [r7, #32]
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 f923 	bl	80066cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00d      	beq.n	80064a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	2b04      	cmp	r3, #4
 8006492:	d107      	bne.n	80064a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e035      	b.n	8006514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	2200      	movs	r2, #0
 80064c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 f82b 	bl	8006520 <I2C_WaitOnFlagUntilTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00d      	beq.n	80064ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064de:	d103      	bne.n	80064e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e013      	b.n	8006514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80064ec:	897b      	ldrh	r3, [r7, #10]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	6a3a      	ldr	r2, [r7, #32]
 8006500:	4906      	ldr	r1, [pc, #24]	; (800651c <I2C_RequestMemoryRead+0x1cc>)
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 f863 	bl	80065ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e000      	b.n	8006514 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	00010002 	.word	0x00010002

08006520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	4613      	mov	r3, r2
 800652e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006530:	e025      	b.n	800657e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d021      	beq.n	800657e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653a:	f7fe fb17 	bl	8004b6c <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	429a      	cmp	r2, r3
 8006548:	d302      	bcc.n	8006550 <I2C_WaitOnFlagUntilTimeout+0x30>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d116      	bne.n	800657e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	f043 0220 	orr.w	r2, r3, #32
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e023      	b.n	80065c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	0c1b      	lsrs	r3, r3, #16
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b01      	cmp	r3, #1
 8006586:	d10d      	bne.n	80065a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	43da      	mvns	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4013      	ands	r3, r2
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	bf0c      	ite	eq
 800659a:	2301      	moveq	r3, #1
 800659c:	2300      	movne	r3, #0
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	461a      	mov	r2, r3
 80065a2:	e00c      	b.n	80065be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	43da      	mvns	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4013      	ands	r3, r2
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bf0c      	ite	eq
 80065b6:	2301      	moveq	r3, #1
 80065b8:	2300      	movne	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	79fb      	ldrb	r3, [r7, #7]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d0b6      	beq.n	8006532 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	607a      	str	r2, [r7, #4]
 80065da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065dc:	e051      	b.n	8006682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ec:	d123      	bne.n	8006636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006606:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	f043 0204 	orr.w	r2, r3, #4
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e046      	b.n	80066c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663c:	d021      	beq.n	8006682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800663e:	f7fe fa95 	bl	8004b6c <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	429a      	cmp	r2, r3
 800664c:	d302      	bcc.n	8006654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d116      	bne.n	8006682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2220      	movs	r2, #32
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	f043 0220 	orr.w	r2, r3, #32
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e020      	b.n	80066c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	0c1b      	lsrs	r3, r3, #16
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b01      	cmp	r3, #1
 800668a:	d10c      	bne.n	80066a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	43da      	mvns	r2, r3
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	4013      	ands	r3, r2
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	bf14      	ite	ne
 800669e:	2301      	movne	r3, #1
 80066a0:	2300      	moveq	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	e00b      	b.n	80066be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	43da      	mvns	r2, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	4013      	ands	r3, r2
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	bf14      	ite	ne
 80066b8:	2301      	movne	r3, #1
 80066ba:	2300      	moveq	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d18d      	bne.n	80065de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066d8:	e02d      	b.n	8006736 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 f8ce 	bl	800687c <I2C_IsAcknowledgeFailed>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e02d      	b.n	8006746 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f0:	d021      	beq.n	8006736 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f2:	f7fe fa3b 	bl	8004b6c <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d302      	bcc.n	8006708 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d116      	bne.n	8006736 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2220      	movs	r2, #32
 8006712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	f043 0220 	orr.w	r2, r3, #32
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e007      	b.n	8006746 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006740:	2b80      	cmp	r3, #128	; 0x80
 8006742:	d1ca      	bne.n	80066da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800675a:	e02d      	b.n	80067b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f88d 	bl	800687c <I2C_IsAcknowledgeFailed>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e02d      	b.n	80067c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d021      	beq.n	80067b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006774:	f7fe f9fa 	bl	8004b6c <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	429a      	cmp	r2, r3
 8006782:	d302      	bcc.n	800678a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d116      	bne.n	80067b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a4:	f043 0220 	orr.w	r2, r3, #32
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e007      	b.n	80067c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d1ca      	bne.n	800675c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067dc:	e042      	b.n	8006864 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b10      	cmp	r3, #16
 80067ea:	d119      	bne.n	8006820 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0210 	mvn.w	r2, #16
 80067f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e029      	b.n	8006874 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006820:	f7fe f9a4 	bl	8004b6c <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	429a      	cmp	r2, r3
 800682e:	d302      	bcc.n	8006836 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d116      	bne.n	8006864 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006850:	f043 0220 	orr.w	r2, r3, #32
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e007      	b.n	8006874 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686e:	2b40      	cmp	r3, #64	; 0x40
 8006870:	d1b5      	bne.n	80067de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006892:	d11b      	bne.n	80068cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800689c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	f043 0204 	orr.w	r2, r3, #4
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e000      	b.n	80068ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d129      	bne.n	8006944 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2224      	movs	r2, #36	; 0x24
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0201 	bic.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0210 	bic.w	r2, r2, #16
 8006916:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0201 	orr.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	e000      	b.n	8006946 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006944:	2302      	movs	r3, #2
  }
}
 8006946:	4618      	mov	r0, r3
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006952:	b480      	push	{r7}
 8006954:	b085      	sub	sp, #20
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800695c:	2300      	movs	r3, #0
 800695e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b20      	cmp	r3, #32
 800696a:	d12a      	bne.n	80069c2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2224      	movs	r2, #36	; 0x24
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0201 	bic.w	r2, r2, #1
 8006982:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800698c:	89fb      	ldrh	r3, [r7, #14]
 800698e:	f023 030f 	bic.w	r3, r3, #15
 8006992:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	b29a      	uxth	r2, r3
 8006998:	89fb      	ldrh	r3, [r7, #14]
 800699a:	4313      	orrs	r3, r2
 800699c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	89fa      	ldrh	r2, [r7, #14]
 80069a4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f042 0201 	orr.w	r2, r2, #1
 80069b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	e000      	b.n	80069c4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80069c2:	2302      	movs	r3, #2
  }
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80069d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069d2:	b08f      	sub	sp, #60	; 0x3c
 80069d4:	af0a      	add	r7, sp, #40	; 0x28
 80069d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e10f      	b.n	8006c02 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d106      	bne.n	8006a02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f00b fa35 	bl	8011e6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2203      	movs	r2, #3
 8006a06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d102      	bne.n	8006a1c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f004 fb02 	bl	800b02a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	603b      	str	r3, [r7, #0]
 8006a2c:	687e      	ldr	r6, [r7, #4]
 8006a2e:	466d      	mov	r5, sp
 8006a30:	f106 0410 	add.w	r4, r6, #16
 8006a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a40:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a44:	1d33      	adds	r3, r6, #4
 8006a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a48:	6838      	ldr	r0, [r7, #0]
 8006a4a:	f004 f9d9 	bl	800ae00 <USB_CoreInit>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e0d0      	b.n	8006c02 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2100      	movs	r1, #0
 8006a66:	4618      	mov	r0, r3
 8006a68:	f004 faf0 	bl	800b04c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	73fb      	strb	r3, [r7, #15]
 8006a70:	e04a      	b.n	8006b08 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006a72:	7bfa      	ldrb	r2, [r7, #15]
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	4613      	mov	r3, r2
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	1a9b      	subs	r3, r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	440b      	add	r3, r1
 8006a80:	333d      	adds	r3, #61	; 0x3d
 8006a82:	2201      	movs	r2, #1
 8006a84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006a86:	7bfa      	ldrb	r2, [r7, #15]
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	00db      	lsls	r3, r3, #3
 8006a8e:	1a9b      	subs	r3, r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	333c      	adds	r3, #60	; 0x3c
 8006a96:	7bfa      	ldrb	r2, [r7, #15]
 8006a98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006a9a:	7bfa      	ldrb	r2, [r7, #15]
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	b298      	uxth	r0, r3
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	3342      	adds	r3, #66	; 0x42
 8006aae:	4602      	mov	r2, r0
 8006ab0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006ab2:	7bfa      	ldrb	r2, [r7, #15]
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	1a9b      	subs	r3, r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	440b      	add	r3, r1
 8006ac0:	333f      	adds	r3, #63	; 0x3f
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006ac6:	7bfa      	ldrb	r2, [r7, #15]
 8006ac8:	6879      	ldr	r1, [r7, #4]
 8006aca:	4613      	mov	r3, r2
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	440b      	add	r3, r1
 8006ad4:	3344      	adds	r3, #68	; 0x44
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006ada:	7bfa      	ldrb	r2, [r7, #15]
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	1a9b      	subs	r3, r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	440b      	add	r3, r1
 8006ae8:	3348      	adds	r3, #72	; 0x48
 8006aea:	2200      	movs	r2, #0
 8006aec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006aee:	7bfa      	ldrb	r2, [r7, #15]
 8006af0:	6879      	ldr	r1, [r7, #4]
 8006af2:	4613      	mov	r3, r2
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	1a9b      	subs	r3, r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	440b      	add	r3, r1
 8006afc:	3350      	adds	r3, #80	; 0x50
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
 8006b04:	3301      	adds	r3, #1
 8006b06:	73fb      	strb	r3, [r7, #15]
 8006b08:	7bfa      	ldrb	r2, [r7, #15]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d3af      	bcc.n	8006a72 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]
 8006b16:	e044      	b.n	8006ba2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006b18:	7bfa      	ldrb	r2, [r7, #15]
 8006b1a:	6879      	ldr	r1, [r7, #4]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	1a9b      	subs	r3, r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006b2e:	7bfa      	ldrb	r2, [r7, #15]
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	4613      	mov	r3, r2
 8006b34:	00db      	lsls	r3, r3, #3
 8006b36:	1a9b      	subs	r3, r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	440b      	add	r3, r1
 8006b3c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006b40:	7bfa      	ldrb	r2, [r7, #15]
 8006b42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006b44:	7bfa      	ldrb	r2, [r7, #15]
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	1a9b      	subs	r3, r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006b56:	2200      	movs	r2, #0
 8006b58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006b5a:	7bfa      	ldrb	r2, [r7, #15]
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	1a9b      	subs	r3, r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006b70:	7bfa      	ldrb	r2, [r7, #15]
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	4613      	mov	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006b86:	7bfa      	ldrb	r2, [r7, #15]
 8006b88:	6879      	ldr	r1, [r7, #4]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	1a9b      	subs	r3, r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	440b      	add	r3, r1
 8006b94:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006b98:	2200      	movs	r2, #0
 8006b9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	73fb      	strb	r3, [r7, #15]
 8006ba2:	7bfa      	ldrb	r2, [r7, #15]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d3b5      	bcc.n	8006b18 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	603b      	str	r3, [r7, #0]
 8006bb2:	687e      	ldr	r6, [r7, #4]
 8006bb4:	466d      	mov	r5, sp
 8006bb6:	f106 0410 	add.w	r4, r6, #16
 8006bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006bc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8006bca:	1d33      	adds	r3, r6, #4
 8006bcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bce:	6838      	ldr	r0, [r7, #0]
 8006bd0:	f004 fa88 	bl	800b0e4 <USB_DevInit>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d005      	beq.n	8006be6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e00d      	b.n	8006c02 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f005 fb04 	bl	800c208 <USB_DevDisconnect>

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d101      	bne.n	8006c26 <HAL_PCD_Start+0x1c>
 8006c22:	2302      	movs	r3, #2
 8006c24:	e020      	b.n	8006c68 <HAL_PCD_Start+0x5e>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d109      	bne.n	8006c4a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d005      	beq.n	8006c4a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f004 f9da 	bl	800b008 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f005 fab4 	bl	800c1c6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006c70:	b590      	push	{r4, r7, lr}
 8006c72:	b08d      	sub	sp, #52	; 0x34
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f005 fb72 	bl	800c370 <USB_GetMode>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f040 839d 	bne.w	80073ce <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f005 fad6 	bl	800c24a <USB_ReadInterrupts>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8393 	beq.w	80073cc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f005 facd 	bl	800c24a <USB_ReadInterrupts>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d107      	bne.n	8006cca <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	695a      	ldr	r2, [r3, #20]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f002 0202 	and.w	r2, r2, #2
 8006cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f005 fabb 	bl	800c24a <USB_ReadInterrupts>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f003 0310 	and.w	r3, r3, #16
 8006cda:	2b10      	cmp	r3, #16
 8006cdc:	d161      	bne.n	8006da2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	699a      	ldr	r2, [r3, #24]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0210 	bic.w	r2, r2, #16
 8006cec:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	f003 020f 	and.w	r2, r3, #15
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	1a9b      	subs	r3, r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	4413      	add	r3, r2
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	0c5b      	lsrs	r3, r3, #17
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d124      	bne.n	8006d64 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006d20:	4013      	ands	r3, r2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d035      	beq.n	8006d92 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	091b      	lsrs	r3, r3, #4
 8006d2e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006d30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	6a38      	ldr	r0, [r7, #32]
 8006d3a:	f005 f8f2 	bl	800bf22 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	091b      	lsrs	r3, r3, #4
 8006d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d4a:	441a      	add	r2, r3
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	699a      	ldr	r2, [r3, #24]
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	091b      	lsrs	r3, r3, #4
 8006d58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d5c:	441a      	add	r2, r3
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	619a      	str	r2, [r3, #24]
 8006d62:	e016      	b.n	8006d92 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	0c5b      	lsrs	r3, r3, #17
 8006d68:	f003 030f 	and.w	r3, r3, #15
 8006d6c:	2b06      	cmp	r3, #6
 8006d6e:	d110      	bne.n	8006d92 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d76:	2208      	movs	r2, #8
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6a38      	ldr	r0, [r7, #32]
 8006d7c:	f005 f8d1 	bl	800bf22 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	699a      	ldr	r2, [r3, #24]
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	091b      	lsrs	r3, r3, #4
 8006d88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d8c:	441a      	add	r2, r3
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	699a      	ldr	r2, [r3, #24]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f042 0210 	orr.w	r2, r2, #16
 8006da0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f005 fa4f 	bl	800c24a <USB_ReadInterrupts>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006db2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006db6:	d16e      	bne.n	8006e96 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f005 fa55 	bl	800c270 <USB_ReadDevAllOutEpInterrupt>
 8006dc6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006dc8:	e062      	b.n	8006e90 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d057      	beq.n	8006e84 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f005 fa7a 	bl	800c2d8 <USB_ReadDevOutEPInterrupt>
 8006de4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00c      	beq.n	8006e0a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	2301      	movs	r3, #1
 8006e00:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fdb1 	bl	800796c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00c      	beq.n	8006e2e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e20:	461a      	mov	r2, r3
 8006e22:	2308      	movs	r3, #8
 8006e24:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006e26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 feab 	bl	8007b84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d008      	beq.n	8006e4a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e44:	461a      	mov	r2, r3
 8006e46:	2310      	movs	r3, #16
 8006e48:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f003 0320 	and.w	r3, r3, #32
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d008      	beq.n	8006e66 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e60:	461a      	mov	r2, r3
 8006e62:	2320      	movs	r3, #32
 8006e64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d009      	beq.n	8006e84 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e82:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	3301      	adds	r3, #1
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d199      	bne.n	8006dca <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f005 f9d5 	bl	800c24a <USB_ReadInterrupts>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ea6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006eaa:	f040 80c0 	bne.w	800702e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f005 f9f6 	bl	800c2a4 <USB_ReadDevAllInEpInterrupt>
 8006eb8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006ebe:	e0b2      	b.n	8007026 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 80a7 	beq.w	800701a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f005 fa1c 	bl	800c314 <USB_ReadDevInEPInterrupt>
 8006edc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d057      	beq.n	8006f98 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	f003 030f 	and.w	r3, r3, #15
 8006eee:	2201      	movs	r2, #1
 8006ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	43db      	mvns	r3, r3
 8006f02:	69f9      	ldr	r1, [r7, #28]
 8006f04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f08:	4013      	ands	r3, r2
 8006f0a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f18:	461a      	mov	r2, r3
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d132      	bne.n	8006f8c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	00db      	lsls	r3, r3, #3
 8006f2e:	1a9b      	subs	r3, r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	3348      	adds	r3, #72	; 0x48
 8006f36:	6819      	ldr	r1, [r3, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	1a9b      	subs	r3, r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4403      	add	r3, r0
 8006f46:	3344      	adds	r3, #68	; 0x44
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4419      	add	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f50:	4613      	mov	r3, r2
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	1a9b      	subs	r3, r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4403      	add	r3, r0
 8006f5a:	3348      	adds	r3, #72	; 0x48
 8006f5c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d113      	bne.n	8006f8c <HAL_PCD_IRQHandler+0x31c>
 8006f64:	6879      	ldr	r1, [r7, #4]
 8006f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f68:	4613      	mov	r3, r2
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	1a9b      	subs	r3, r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	440b      	add	r3, r1
 8006f72:	3350      	adds	r3, #80	; 0x50
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d108      	bne.n	8006f8c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6818      	ldr	r0, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f84:	461a      	mov	r2, r3
 8006f86:	2101      	movs	r1, #1
 8006f88:	f005 fa24 	bl	800c3d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f00a fff9 	bl	8011f8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d008      	beq.n	8006fb4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fae:	461a      	mov	r2, r3
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f003 0310 	and.w	r3, r3, #16
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d008      	beq.n	8006fd0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fca:	461a      	mov	r2, r3
 8006fcc:	2310      	movs	r3, #16
 8006fce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d008      	beq.n	8006fec <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	2340      	movs	r3, #64	; 0x40
 8006fea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d008      	beq.n	8007008 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007002:	461a      	mov	r2, r3
 8007004:	2302      	movs	r3, #2
 8007006:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007012:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fc1b 	bl	8007850 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	3301      	adds	r3, #1
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	085b      	lsrs	r3, r3, #1
 8007024:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007028:	2b00      	cmp	r3, #0
 800702a:	f47f af49 	bne.w	8006ec0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f005 f909 	bl	800c24a <USB_ReadInterrupts>
 8007038:	4603      	mov	r3, r0
 800703a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800703e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007042:	d122      	bne.n	800708a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	69fa      	ldr	r2, [r7, #28]
 800704e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007052:	f023 0301 	bic.w	r3, r3, #1
 8007056:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800705e:	2b01      	cmp	r3, #1
 8007060:	d108      	bne.n	8007074 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800706a:	2100      	movs	r1, #0
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fe27 	bl	8007cc0 <HAL_PCDEx_LPM_Callback>
 8007072:	e002      	b.n	800707a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f00a ffff 	bl	8012078 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	695a      	ldr	r2, [r3, #20]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007088:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f005 f8db 	bl	800c24a <USB_ReadInterrupts>
 8007094:	4603      	mov	r3, r0
 8007096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800709a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800709e:	d112      	bne.n	80070c6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d102      	bne.n	80070b6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f00a ffbb 	bl	801202c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	695a      	ldr	r2, [r3, #20]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80070c4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f005 f8bd 	bl	800c24a <USB_ReadInterrupts>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070da:	f040 80c7 	bne.w	800726c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ec:	f023 0301 	bic.w	r3, r3, #1
 80070f0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2110      	movs	r1, #16
 80070f8:	4618      	mov	r0, r3
 80070fa:	f004 f957 	bl	800b3ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070fe:	2300      	movs	r3, #0
 8007100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007102:	e056      	b.n	80071b2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007110:	461a      	mov	r2, r3
 8007112:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007116:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	440a      	add	r2, r1
 800712e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007132:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007136:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	69fa      	ldr	r2, [r7, #28]
 800714c:	440a      	add	r2, r1
 800714e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007152:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007156:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007164:	461a      	mov	r2, r3
 8007166:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800716a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	440a      	add	r2, r1
 8007182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007186:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800718a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800718c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800719c:	0151      	lsls	r1, r2, #5
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	440a      	add	r2, r1
 80071a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ae:	3301      	adds	r3, #1
 80071b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d3a3      	bcc.n	8007104 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071ca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80071ce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d016      	beq.n	8007206 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071e8:	f043 030b 	orr.w	r3, r3, #11
 80071ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f8:	69fa      	ldr	r2, [r7, #28]
 80071fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071fe:	f043 030b 	orr.w	r3, r3, #11
 8007202:	6453      	str	r3, [r2, #68]	; 0x44
 8007204:	e015      	b.n	8007232 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007214:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007218:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800721c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	69fa      	ldr	r2, [r7, #28]
 8007228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800722c:	f043 030b 	orr.w	r3, r3, #11
 8007230:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69fa      	ldr	r2, [r7, #28]
 800723c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007240:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007244:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007256:	461a      	mov	r2, r3
 8007258:	f005 f8bc 	bl	800c3d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	695a      	ldr	r2, [r3, #20]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800726a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4618      	mov	r0, r3
 8007272:	f004 ffea 	bl	800c24a <USB_ReadInterrupts>
 8007276:	4603      	mov	r3, r0
 8007278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800727c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007280:	d124      	bne.n	80072cc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f005 f880 	bl	800c38c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4618      	mov	r0, r3
 8007292:	f004 f8e8 	bl	800b466 <USB_GetDevSpeed>
 8007296:	4603      	mov	r3, r0
 8007298:	461a      	mov	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681c      	ldr	r4, [r3, #0]
 80072a2:	f001 f96b 	bl	800857c <HAL_RCC_GetHCLKFreq>
 80072a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	461a      	mov	r2, r3
 80072b0:	4620      	mov	r0, r4
 80072b2:	f003 fe07 	bl	800aec4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f00a fe8f 	bl	8011fda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	695a      	ldr	r2, [r3, #20]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80072ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f004 ffba 	bl	800c24a <USB_ReadInterrupts>
 80072d6:	4603      	mov	r3, r0
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d10a      	bne.n	80072f6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f00a fe6c 	bl	8011fbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695a      	ldr	r2, [r3, #20]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f002 0208 	and.w	r2, r2, #8
 80072f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f004 ffa5 	bl	800c24a <USB_ReadInterrupts>
 8007300:	4603      	mov	r3, r0
 8007302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800730a:	d10f      	bne.n	800732c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	b2db      	uxtb	r3, r3
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f00a fece 	bl	80120b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	695a      	ldr	r2, [r3, #20]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800732a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4618      	mov	r0, r3
 8007332:	f004 ff8a 	bl	800c24a <USB_ReadInterrupts>
 8007336:	4603      	mov	r3, r0
 8007338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800733c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007340:	d10f      	bne.n	8007362 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	b2db      	uxtb	r3, r3
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f00a fea1 	bl	8012094 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	695a      	ldr	r2, [r3, #20]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007360:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f004 ff6f 	bl	800c24a <USB_ReadInterrupts>
 800736c:	4603      	mov	r3, r0
 800736e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007376:	d10a      	bne.n	800738e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f00a feaf 	bl	80120dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695a      	ldr	r2, [r3, #20]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800738c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f004 ff59 	bl	800c24a <USB_ReadInterrupts>
 8007398:	4603      	mov	r3, r0
 800739a:	f003 0304 	and.w	r3, r3, #4
 800739e:	2b04      	cmp	r3, #4
 80073a0:	d115      	bne.n	80073ce <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f00a fe9f 	bl	80120f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6859      	ldr	r1, [r3, #4]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	605a      	str	r2, [r3, #4]
 80073ca:	e000      	b.n	80073ce <HAL_PCD_IRQHandler+0x75e>
      return;
 80073cc:	bf00      	nop
    }
  }
}
 80073ce:	3734      	adds	r7, #52	; 0x34
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd90      	pop	{r4, r7, pc}

080073d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d101      	bne.n	80073ee <HAL_PCD_SetAddress+0x1a>
 80073ea:	2302      	movs	r3, #2
 80073ec:	e013      	b.n	8007416 <HAL_PCD_SetAddress+0x42>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	78fa      	ldrb	r2, [r7, #3]
 80073fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	4611      	mov	r1, r2
 8007406:	4618      	mov	r0, r3
 8007408:	f004 feb7 	bl	800c17a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	4608      	mov	r0, r1
 8007428:	4611      	mov	r1, r2
 800742a:	461a      	mov	r2, r3
 800742c:	4603      	mov	r3, r0
 800742e:	70fb      	strb	r3, [r7, #3]
 8007430:	460b      	mov	r3, r1
 8007432:	803b      	strh	r3, [r7, #0]
 8007434:	4613      	mov	r3, r2
 8007436:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800743c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007440:	2b00      	cmp	r3, #0
 8007442:	da0f      	bge.n	8007464 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	f003 020f 	and.w	r2, r3, #15
 800744a:	4613      	mov	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	1a9b      	subs	r3, r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	3338      	adds	r3, #56	; 0x38
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	4413      	add	r3, r2
 8007458:	3304      	adds	r3, #4
 800745a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	705a      	strb	r2, [r3, #1]
 8007462:	e00f      	b.n	8007484 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	f003 020f 	and.w	r2, r3, #15
 800746a:	4613      	mov	r3, r2
 800746c:	00db      	lsls	r3, r3, #3
 800746e:	1a9b      	subs	r3, r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	4413      	add	r3, r2
 800747a:	3304      	adds	r3, #4
 800747c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	f003 030f 	and.w	r3, r3, #15
 800748a:	b2da      	uxtb	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007490:	883a      	ldrh	r2, [r7, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	78ba      	ldrb	r2, [r7, #2]
 800749a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	785b      	ldrb	r3, [r3, #1]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d004      	beq.n	80074ae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80074ae:	78bb      	ldrb	r3, [r7, #2]
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d102      	bne.n	80074ba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_PCD_EP_Open+0xaa>
 80074c4:	2302      	movs	r3, #2
 80074c6:	e00e      	b.n	80074e6 <HAL_PCD_EP_Open+0xc8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68f9      	ldr	r1, [r7, #12]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f003 ffea 	bl	800b4b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80074e4:	7afb      	ldrb	r3, [r7, #11]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	460b      	mov	r3, r1
 80074f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80074fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	da0f      	bge.n	8007522 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	f003 020f 	and.w	r2, r3, #15
 8007508:	4613      	mov	r3, r2
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	1a9b      	subs	r3, r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	3338      	adds	r3, #56	; 0x38
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	4413      	add	r3, r2
 8007516:	3304      	adds	r3, #4
 8007518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2201      	movs	r2, #1
 800751e:	705a      	strb	r2, [r3, #1]
 8007520:	e00f      	b.n	8007542 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007522:	78fb      	ldrb	r3, [r7, #3]
 8007524:	f003 020f 	and.w	r2, r3, #15
 8007528:	4613      	mov	r3, r2
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	1a9b      	subs	r3, r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	4413      	add	r3, r2
 8007538:	3304      	adds	r3, #4
 800753a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007542:	78fb      	ldrb	r3, [r7, #3]
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	b2da      	uxtb	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007554:	2b01      	cmp	r3, #1
 8007556:	d101      	bne.n	800755c <HAL_PCD_EP_Close+0x6e>
 8007558:	2302      	movs	r3, #2
 800755a:	e00e      	b.n	800757a <HAL_PCD_EP_Close+0x8c>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68f9      	ldr	r1, [r7, #12]
 800756a:	4618      	mov	r0, r3
 800756c:	f004 f828 	bl	800b5c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b086      	sub	sp, #24
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	603b      	str	r3, [r7, #0]
 800758e:	460b      	mov	r3, r1
 8007590:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007592:	7afb      	ldrb	r3, [r7, #11]
 8007594:	f003 020f 	and.w	r2, r3, #15
 8007598:	4613      	mov	r3, r2
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	1a9b      	subs	r3, r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4413      	add	r3, r2
 80075a8:	3304      	adds	r3, #4
 80075aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2200      	movs	r2, #0
 80075bc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2200      	movs	r2, #0
 80075c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075c4:	7afb      	ldrb	r3, [r7, #11]
 80075c6:	f003 030f 	and.w	r3, r3, #15
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d102      	bne.n	80075de <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80075de:	7afb      	ldrb	r3, [r7, #11]
 80075e0:	f003 030f 	and.w	r3, r3, #15
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d109      	bne.n	80075fc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6818      	ldr	r0, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	461a      	mov	r2, r3
 80075f4:	6979      	ldr	r1, [r7, #20]
 80075f6:	f004 fb03 	bl	800bc00 <USB_EP0StartXfer>
 80075fa:	e008      	b.n	800760e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6818      	ldr	r0, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	b2db      	uxtb	r3, r3
 8007606:	461a      	mov	r2, r3
 8007608:	6979      	ldr	r1, [r7, #20]
 800760a:	f004 f8b5 	bl	800b778 <USB_EPStartXfer>
  }

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007624:	78fb      	ldrb	r3, [r7, #3]
 8007626:	f003 020f 	and.w	r2, r3, #15
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	4613      	mov	r3, r2
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	1a9b      	subs	r3, r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	440b      	add	r3, r1
 8007636:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800763a:	681b      	ldr	r3, [r3, #0]
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	460b      	mov	r3, r1
 8007656:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007658:	7afb      	ldrb	r3, [r7, #11]
 800765a:	f003 020f 	and.w	r2, r3, #15
 800765e:	4613      	mov	r3, r2
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	1a9b      	subs	r3, r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	3338      	adds	r3, #56	; 0x38
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	3304      	adds	r3, #4
 800766e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2200      	movs	r2, #0
 8007680:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2201      	movs	r2, #1
 8007686:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007688:	7afb      	ldrb	r3, [r7, #11]
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	b2da      	uxtb	r2, r3
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d102      	bne.n	80076a2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80076a2:	7afb      	ldrb	r3, [r7, #11]
 80076a4:	f003 030f 	and.w	r3, r3, #15
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d109      	bne.n	80076c0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6818      	ldr	r0, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	461a      	mov	r2, r3
 80076b8:	6979      	ldr	r1, [r7, #20]
 80076ba:	f004 faa1 	bl	800bc00 <USB_EP0StartXfer>
 80076be:	e008      	b.n	80076d2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	461a      	mov	r2, r3
 80076cc:	6979      	ldr	r1, [r7, #20]
 80076ce:	f004 f853 	bl	800b778 <USB_EPStartXfer>
  }

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	f003 020f 	and.w	r2, r3, #15
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d901      	bls.n	80076fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e050      	b.n	800779c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80076fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	da0f      	bge.n	8007722 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007702:	78fb      	ldrb	r3, [r7, #3]
 8007704:	f003 020f 	and.w	r2, r3, #15
 8007708:	4613      	mov	r3, r2
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	1a9b      	subs	r3, r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	3338      	adds	r3, #56	; 0x38
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	4413      	add	r3, r2
 8007716:	3304      	adds	r3, #4
 8007718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	705a      	strb	r2, [r3, #1]
 8007720:	e00d      	b.n	800773e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007722:	78fa      	ldrb	r2, [r7, #3]
 8007724:	4613      	mov	r3, r2
 8007726:	00db      	lsls	r3, r3, #3
 8007728:	1a9b      	subs	r3, r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	4413      	add	r3, r2
 8007734:	3304      	adds	r3, #4
 8007736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2201      	movs	r2, #1
 8007742:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	b2da      	uxtb	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007756:	2b01      	cmp	r3, #1
 8007758:	d101      	bne.n	800775e <HAL_PCD_EP_SetStall+0x82>
 800775a:	2302      	movs	r3, #2
 800775c:	e01e      	b.n	800779c <HAL_PCD_EP_SetStall+0xc0>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68f9      	ldr	r1, [r7, #12]
 800776c:	4618      	mov	r0, r3
 800776e:	f004 fc30 	bl	800bfd2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	f003 030f 	and.w	r3, r3, #15
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10a      	bne.n	8007792 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6818      	ldr	r0, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	b2d9      	uxtb	r1, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800778c:	461a      	mov	r2, r3
 800778e:	f004 fe21 	bl	800c3d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	f003 020f 	and.w	r2, r3, #15
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d901      	bls.n	80077c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e042      	b.n	8007848 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80077c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da0f      	bge.n	80077ea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077ca:	78fb      	ldrb	r3, [r7, #3]
 80077cc:	f003 020f 	and.w	r2, r3, #15
 80077d0:	4613      	mov	r3, r2
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	1a9b      	subs	r3, r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	3338      	adds	r3, #56	; 0x38
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	4413      	add	r3, r2
 80077de:	3304      	adds	r3, #4
 80077e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	705a      	strb	r2, [r3, #1]
 80077e8:	e00f      	b.n	800780a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077ea:	78fb      	ldrb	r3, [r7, #3]
 80077ec:	f003 020f 	and.w	r2, r3, #15
 80077f0:	4613      	mov	r3, r2
 80077f2:	00db      	lsls	r3, r3, #3
 80077f4:	1a9b      	subs	r3, r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	4413      	add	r3, r2
 8007800:	3304      	adds	r3, #4
 8007802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	f003 030f 	and.w	r3, r3, #15
 8007816:	b2da      	uxtb	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007822:	2b01      	cmp	r3, #1
 8007824:	d101      	bne.n	800782a <HAL_PCD_EP_ClrStall+0x86>
 8007826:	2302      	movs	r3, #2
 8007828:	e00e      	b.n	8007848 <HAL_PCD_EP_ClrStall+0xa4>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68f9      	ldr	r1, [r7, #12]
 8007838:	4618      	mov	r0, r3
 800783a:	f004 fc38 	bl	800c0ae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08a      	sub	sp, #40	; 0x28
 8007854:	af02      	add	r7, sp, #8
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	4613      	mov	r3, r2
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	1a9b      	subs	r3, r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	3338      	adds	r3, #56	; 0x38
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	4413      	add	r3, r2
 8007874:	3304      	adds	r3, #4
 8007876:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	699a      	ldr	r2, [r3, #24]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	429a      	cmp	r2, r3
 8007882:	d901      	bls.n	8007888 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e06c      	b.n	8007962 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	695a      	ldr	r2, [r3, #20]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	69fa      	ldr	r2, [r7, #28]
 800789a:	429a      	cmp	r2, r3
 800789c:	d902      	bls.n	80078a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	3303      	adds	r3, #3
 80078a8:	089b      	lsrs	r3, r3, #2
 80078aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80078ac:	e02b      	b.n	8007906 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	695a      	ldr	r2, [r3, #20]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	69fa      	ldr	r2, [r7, #28]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d902      	bls.n	80078ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	3303      	adds	r3, #3
 80078ce:	089b      	lsrs	r3, r3, #2
 80078d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	68d9      	ldr	r1, [r3, #12]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	4603      	mov	r3, r0
 80078e8:	6978      	ldr	r0, [r7, #20]
 80078ea:	f004 fadc 	bl	800bea6 <USB_WritePacket>

    ep->xfer_buff  += len;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	441a      	add	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	699a      	ldr	r2, [r3, #24]
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	441a      	add	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	b29b      	uxth	r3, r3
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	429a      	cmp	r2, r3
 800791a:	d809      	bhi.n	8007930 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	699a      	ldr	r2, [r3, #24]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007924:	429a      	cmp	r2, r3
 8007926:	d203      	bcs.n	8007930 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1be      	bne.n	80078ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	695a      	ldr	r2, [r3, #20]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	429a      	cmp	r2, r3
 800793a:	d811      	bhi.n	8007960 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	f003 030f 	and.w	r3, r3, #15
 8007942:	2201      	movs	r2, #1
 8007944:	fa02 f303 	lsl.w	r3, r2, r3
 8007948:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	43db      	mvns	r3, r3
 8007956:	6939      	ldr	r1, [r7, #16]
 8007958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800795c:	4013      	ands	r3, r2
 800795e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3720      	adds	r7, #32
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	333c      	adds	r3, #60	; 0x3c
 8007984:	3304      	adds	r3, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	f040 80a0 	bne.w	8007ae4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f003 0308 	and.w	r3, r3, #8
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d015      	beq.n	80079da <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	4a72      	ldr	r2, [pc, #456]	; (8007b7c <PCD_EP_OutXfrComplete_int+0x210>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	f240 80dd 	bls.w	8007b72 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 80d7 	beq.w	8007b72 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d0:	461a      	mov	r2, r3
 80079d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079d6:	6093      	str	r3, [r2, #8]
 80079d8:	e0cb      	b.n	8007b72 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f003 0320 	and.w	r3, r3, #32
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d009      	beq.n	80079f8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f0:	461a      	mov	r2, r3
 80079f2:	2320      	movs	r3, #32
 80079f4:	6093      	str	r3, [r2, #8]
 80079f6:	e0bc      	b.n	8007b72 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f040 80b7 	bne.w	8007b72 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4a5d      	ldr	r2, [pc, #372]	; (8007b7c <PCD_EP_OutXfrComplete_int+0x210>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d90f      	bls.n	8007a2c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a22:	461a      	mov	r2, r3
 8007a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a28:	6093      	str	r3, [r2, #8]
 8007a2a:	e0a2      	b.n	8007b72 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	4613      	mov	r3, r2
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	1a9b      	subs	r3, r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	440b      	add	r3, r1
 8007a3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007a3e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	0159      	lsls	r1, r3, #5
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	440b      	add	r3, r1
 8007a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007a52:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	1a9b      	subs	r3, r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4403      	add	r3, r0
 8007a62:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007a66:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007a68:	6879      	ldr	r1, [r7, #4]
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	00db      	lsls	r3, r3, #3
 8007a70:	1a9b      	subs	r3, r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007a7a:	6819      	ldr	r1, [r3, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	4613      	mov	r3, r2
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4403      	add	r3, r0
 8007a8a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4419      	add	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	4613      	mov	r3, r2
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	1a9b      	subs	r3, r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4403      	add	r3, r0
 8007aa0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007aa4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d114      	bne.n	8007ad6 <PCD_EP_OutXfrComplete_int+0x16a>
 8007aac:	6879      	ldr	r1, [r7, #4]
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	440b      	add	r3, r1
 8007aba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d108      	bne.n	8007ad6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ace:	461a      	mov	r2, r3
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	f004 fc7f 	bl	800c3d4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f00a fa39 	bl	8011f54 <HAL_PCD_DataOutStageCallback>
 8007ae2:	e046      	b.n	8007b72 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	4a26      	ldr	r2, [pc, #152]	; (8007b80 <PCD_EP_OutXfrComplete_int+0x214>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d124      	bne.n	8007b36 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b02:	461a      	mov	r2, r3
 8007b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b08:	6093      	str	r3, [r2, #8]
 8007b0a:	e032      	b.n	8007b72 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d008      	beq.n	8007b28 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b22:	461a      	mov	r2, r3
 8007b24:	2320      	movs	r3, #32
 8007b26:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f00a fa10 	bl	8011f54 <HAL_PCD_DataOutStageCallback>
 8007b34:	e01d      	b.n	8007b72 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d114      	bne.n	8007b66 <PCD_EP_OutXfrComplete_int+0x1fa>
 8007b3c:	6879      	ldr	r1, [r7, #4]
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	4613      	mov	r3, r2
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	1a9b      	subs	r3, r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	440b      	add	r3, r1
 8007b4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d108      	bne.n	8007b66 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6818      	ldr	r0, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b5e:	461a      	mov	r2, r3
 8007b60:	2100      	movs	r1, #0
 8007b62:	f004 fc37 	bl	800c3d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f00a f9f1 	bl	8011f54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	4f54300a 	.word	0x4f54300a
 8007b80:	4f54310a 	.word	0x4f54310a

08007b84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	333c      	adds	r3, #60	; 0x3c
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4a15      	ldr	r2, [pc, #84]	; (8007c0c <PCD_EP_OutSetupPacket_int+0x88>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d90e      	bls.n	8007bd8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d009      	beq.n	8007bd8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bd6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f00a f9a9 	bl	8011f30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4a0a      	ldr	r2, [pc, #40]	; (8007c0c <PCD_EP_OutSetupPacket_int+0x88>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d90c      	bls.n	8007c00 <PCD_EP_OutSetupPacket_int+0x7c>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d108      	bne.n	8007c00 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	f004 fbea 	bl	800c3d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	4f54300a 	.word	0x4f54300a

08007c10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007c28:	78fb      	ldrb	r3, [r7, #3]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d107      	bne.n	8007c3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007c2e:	883b      	ldrh	r3, [r7, #0]
 8007c30:	0419      	lsls	r1, r3, #16
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	629a      	str	r2, [r3, #40]	; 0x28
 8007c3c:	e028      	b.n	8007c90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c44:	0c1b      	lsrs	r3, r3, #16
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	4413      	add	r3, r2
 8007c4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73fb      	strb	r3, [r7, #15]
 8007c50:	e00d      	b.n	8007c6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
 8007c58:	3340      	adds	r3, #64	; 0x40
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	0c1b      	lsrs	r3, r3, #16
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	4413      	add	r3, r2
 8007c66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	73fb      	strb	r3, [r7, #15]
 8007c6e:	7bfa      	ldrb	r2, [r7, #15]
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d3ec      	bcc.n	8007c52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007c78:	883b      	ldrh	r3, [r7, #0]
 8007c7a:	0418      	lsls	r0, r3, #16
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6819      	ldr	r1, [r3, #0]
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	4302      	orrs	r2, r0
 8007c88:	3340      	adds	r3, #64	; 0x40
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	887a      	ldrh	r2, [r7, #2]
 8007cb0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8007ce0:	4b06      	ldr	r3, [pc, #24]	; (8007cfc <HAL_PWR_DisableWakeUpPin+0x24>)
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	43db      	mvns	r3, r3
 8007ce8:	4904      	ldr	r1, [pc, #16]	; (8007cfc <HAL_PWR_DisableWakeUpPin+0x24>)
 8007cea:	4013      	ands	r3, r2
 8007cec:	604b      	str	r3, [r1, #4]
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40007000 	.word	0x40007000

08007d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e264      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d075      	beq.n	8007e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d1e:	4ba3      	ldr	r3, [pc, #652]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f003 030c 	and.w	r3, r3, #12
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	d00c      	beq.n	8007d44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d2a:	4ba0      	ldr	r3, [pc, #640]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d32:	2b08      	cmp	r3, #8
 8007d34:	d112      	bne.n	8007d5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d36:	4b9d      	ldr	r3, [pc, #628]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d42:	d10b      	bne.n	8007d5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d44:	4b99      	ldr	r3, [pc, #612]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d05b      	beq.n	8007e08 <HAL_RCC_OscConfig+0x108>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d157      	bne.n	8007e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e23f      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d64:	d106      	bne.n	8007d74 <HAL_RCC_OscConfig+0x74>
 8007d66:	4b91      	ldr	r3, [pc, #580]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a90      	ldr	r2, [pc, #576]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	e01d      	b.n	8007db0 <HAL_RCC_OscConfig+0xb0>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d7c:	d10c      	bne.n	8007d98 <HAL_RCC_OscConfig+0x98>
 8007d7e:	4b8b      	ldr	r3, [pc, #556]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a8a      	ldr	r2, [pc, #552]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d88:	6013      	str	r3, [r2, #0]
 8007d8a:	4b88      	ldr	r3, [pc, #544]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a87      	ldr	r2, [pc, #540]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	e00b      	b.n	8007db0 <HAL_RCC_OscConfig+0xb0>
 8007d98:	4b84      	ldr	r3, [pc, #528]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a83      	ldr	r2, [pc, #524]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007da2:	6013      	str	r3, [r2, #0]
 8007da4:	4b81      	ldr	r3, [pc, #516]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a80      	ldr	r2, [pc, #512]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d013      	beq.n	8007de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007db8:	f7fc fed8 	bl	8004b6c <HAL_GetTick>
 8007dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dbe:	e008      	b.n	8007dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007dc0:	f7fc fed4 	bl	8004b6c <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b64      	cmp	r3, #100	; 0x64
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e204      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dd2:	4b76      	ldr	r3, [pc, #472]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0f0      	beq.n	8007dc0 <HAL_RCC_OscConfig+0xc0>
 8007dde:	e014      	b.n	8007e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007de0:	f7fc fec4 	bl	8004b6c <HAL_GetTick>
 8007de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007de6:	e008      	b.n	8007dfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007de8:	f7fc fec0 	bl	8004b6c <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b64      	cmp	r3, #100	; 0x64
 8007df4:	d901      	bls.n	8007dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e1f0      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dfa:	4b6c      	ldr	r3, [pc, #432]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1f0      	bne.n	8007de8 <HAL_RCC_OscConfig+0xe8>
 8007e06:	e000      	b.n	8007e0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d063      	beq.n	8007ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e16:	4b65      	ldr	r3, [pc, #404]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f003 030c 	and.w	r3, r3, #12
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00b      	beq.n	8007e3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e22:	4b62      	ldr	r3, [pc, #392]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e2a:	2b08      	cmp	r3, #8
 8007e2c:	d11c      	bne.n	8007e68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e2e:	4b5f      	ldr	r3, [pc, #380]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d116      	bne.n	8007e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e3a:	4b5c      	ldr	r3, [pc, #368]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d005      	beq.n	8007e52 <HAL_RCC_OscConfig+0x152>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d001      	beq.n	8007e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e1c4      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e52:	4b56      	ldr	r3, [pc, #344]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	4952      	ldr	r1, [pc, #328]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e66:	e03a      	b.n	8007ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d020      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e70:	4b4f      	ldr	r3, [pc, #316]	; (8007fb0 <HAL_RCC_OscConfig+0x2b0>)
 8007e72:	2201      	movs	r2, #1
 8007e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e76:	f7fc fe79 	bl	8004b6c <HAL_GetTick>
 8007e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e7c:	e008      	b.n	8007e90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e7e:	f7fc fe75 	bl	8004b6c <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d901      	bls.n	8007e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e1a5      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e90:	4b46      	ldr	r3, [pc, #280]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0302 	and.w	r3, r3, #2
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0f0      	beq.n	8007e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e9c:	4b43      	ldr	r3, [pc, #268]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	00db      	lsls	r3, r3, #3
 8007eaa:	4940      	ldr	r1, [pc, #256]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	600b      	str	r3, [r1, #0]
 8007eb0:	e015      	b.n	8007ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007eb2:	4b3f      	ldr	r3, [pc, #252]	; (8007fb0 <HAL_RCC_OscConfig+0x2b0>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb8:	f7fc fe58 	bl	8004b6c <HAL_GetTick>
 8007ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ec0:	f7fc fe54 	bl	8004b6c <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e184      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ed2:	4b36      	ldr	r3, [pc, #216]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1f0      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0308 	and.w	r3, r3, #8
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d030      	beq.n	8007f4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d016      	beq.n	8007f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ef2:	4b30      	ldr	r3, [pc, #192]	; (8007fb4 <HAL_RCC_OscConfig+0x2b4>)
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ef8:	f7fc fe38 	bl	8004b6c <HAL_GetTick>
 8007efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007efe:	e008      	b.n	8007f12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f00:	f7fc fe34 	bl	8004b6c <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e164      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f12:	4b26      	ldr	r3, [pc, #152]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0f0      	beq.n	8007f00 <HAL_RCC_OscConfig+0x200>
 8007f1e:	e015      	b.n	8007f4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f20:	4b24      	ldr	r3, [pc, #144]	; (8007fb4 <HAL_RCC_OscConfig+0x2b4>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f26:	f7fc fe21 	bl	8004b6c <HAL_GetTick>
 8007f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f2c:	e008      	b.n	8007f40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f2e:	f7fc fe1d 	bl	8004b6c <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d901      	bls.n	8007f40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e14d      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f40:	4b1a      	ldr	r3, [pc, #104]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f44:	f003 0302 	and.w	r3, r3, #2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1f0      	bne.n	8007f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 80a0 	beq.w	800809a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f5e:	4b13      	ldr	r3, [pc, #76]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10f      	bne.n	8007f8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60bb      	str	r3, [r7, #8]
 8007f6e:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	4a0e      	ldr	r2, [pc, #56]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f78:	6413      	str	r3, [r2, #64]	; 0x40
 8007f7a:	4b0c      	ldr	r3, [pc, #48]	; (8007fac <HAL_RCC_OscConfig+0x2ac>)
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f82:	60bb      	str	r3, [r7, #8]
 8007f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f86:	2301      	movs	r3, #1
 8007f88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f8a:	4b0b      	ldr	r3, [pc, #44]	; (8007fb8 <HAL_RCC_OscConfig+0x2b8>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d121      	bne.n	8007fda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f96:	4b08      	ldr	r3, [pc, #32]	; (8007fb8 <HAL_RCC_OscConfig+0x2b8>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a07      	ldr	r2, [pc, #28]	; (8007fb8 <HAL_RCC_OscConfig+0x2b8>)
 8007f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fa2:	f7fc fde3 	bl	8004b6c <HAL_GetTick>
 8007fa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fa8:	e011      	b.n	8007fce <HAL_RCC_OscConfig+0x2ce>
 8007faa:	bf00      	nop
 8007fac:	40023800 	.word	0x40023800
 8007fb0:	42470000 	.word	0x42470000
 8007fb4:	42470e80 	.word	0x42470e80
 8007fb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fbc:	f7fc fdd6 	bl	8004b6c <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d901      	bls.n	8007fce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e106      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fce:	4b85      	ldr	r3, [pc, #532]	; (80081e4 <HAL_RCC_OscConfig+0x4e4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0f0      	beq.n	8007fbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d106      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x2f0>
 8007fe2:	4b81      	ldr	r3, [pc, #516]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	4a80      	ldr	r2, [pc, #512]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 8007fe8:	f043 0301 	orr.w	r3, r3, #1
 8007fec:	6713      	str	r3, [r2, #112]	; 0x70
 8007fee:	e01c      	b.n	800802a <HAL_RCC_OscConfig+0x32a>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	2b05      	cmp	r3, #5
 8007ff6:	d10c      	bne.n	8008012 <HAL_RCC_OscConfig+0x312>
 8007ff8:	4b7b      	ldr	r3, [pc, #492]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 8007ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffc:	4a7a      	ldr	r2, [pc, #488]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 8007ffe:	f043 0304 	orr.w	r3, r3, #4
 8008002:	6713      	str	r3, [r2, #112]	; 0x70
 8008004:	4b78      	ldr	r3, [pc, #480]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 8008006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008008:	4a77      	ldr	r2, [pc, #476]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 800800a:	f043 0301 	orr.w	r3, r3, #1
 800800e:	6713      	str	r3, [r2, #112]	; 0x70
 8008010:	e00b      	b.n	800802a <HAL_RCC_OscConfig+0x32a>
 8008012:	4b75      	ldr	r3, [pc, #468]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 8008014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008016:	4a74      	ldr	r2, [pc, #464]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 8008018:	f023 0301 	bic.w	r3, r3, #1
 800801c:	6713      	str	r3, [r2, #112]	; 0x70
 800801e:	4b72      	ldr	r3, [pc, #456]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 8008020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008022:	4a71      	ldr	r2, [pc, #452]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 8008024:	f023 0304 	bic.w	r3, r3, #4
 8008028:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d015      	beq.n	800805e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008032:	f7fc fd9b 	bl	8004b6c <HAL_GetTick>
 8008036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008038:	e00a      	b.n	8008050 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800803a:	f7fc fd97 	bl	8004b6c <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	f241 3288 	movw	r2, #5000	; 0x1388
 8008048:	4293      	cmp	r3, r2
 800804a:	d901      	bls.n	8008050 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e0c5      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008050:	4b65      	ldr	r3, [pc, #404]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 8008052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d0ee      	beq.n	800803a <HAL_RCC_OscConfig+0x33a>
 800805c:	e014      	b.n	8008088 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800805e:	f7fc fd85 	bl	8004b6c <HAL_GetTick>
 8008062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008064:	e00a      	b.n	800807c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008066:	f7fc fd81 	bl	8004b6c <HAL_GetTick>
 800806a:	4602      	mov	r2, r0
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	f241 3288 	movw	r2, #5000	; 0x1388
 8008074:	4293      	cmp	r3, r2
 8008076:	d901      	bls.n	800807c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e0af      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800807c:	4b5a      	ldr	r3, [pc, #360]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 800807e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1ee      	bne.n	8008066 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008088:	7dfb      	ldrb	r3, [r7, #23]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d105      	bne.n	800809a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800808e:	4b56      	ldr	r3, [pc, #344]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	4a55      	ldr	r2, [pc, #340]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 8008094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008098:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 809b 	beq.w	80081da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080a4:	4b50      	ldr	r3, [pc, #320]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f003 030c 	and.w	r3, r3, #12
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d05c      	beq.n	800816a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d141      	bne.n	800813c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080b8:	4b4c      	ldr	r3, [pc, #304]	; (80081ec <HAL_RCC_OscConfig+0x4ec>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080be:	f7fc fd55 	bl	8004b6c <HAL_GetTick>
 80080c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080c4:	e008      	b.n	80080d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080c6:	f7fc fd51 	bl	8004b6c <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d901      	bls.n	80080d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e081      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080d8:	4b43      	ldr	r3, [pc, #268]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1f0      	bne.n	80080c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	69da      	ldr	r2, [r3, #28]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	431a      	orrs	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	019b      	lsls	r3, r3, #6
 80080f4:	431a      	orrs	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fa:	085b      	lsrs	r3, r3, #1
 80080fc:	3b01      	subs	r3, #1
 80080fe:	041b      	lsls	r3, r3, #16
 8008100:	431a      	orrs	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008106:	061b      	lsls	r3, r3, #24
 8008108:	4937      	ldr	r1, [pc, #220]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 800810a:	4313      	orrs	r3, r2
 800810c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800810e:	4b37      	ldr	r3, [pc, #220]	; (80081ec <HAL_RCC_OscConfig+0x4ec>)
 8008110:	2201      	movs	r2, #1
 8008112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008114:	f7fc fd2a 	bl	8004b6c <HAL_GetTick>
 8008118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800811a:	e008      	b.n	800812e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800811c:	f7fc fd26 	bl	8004b6c <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	2b02      	cmp	r3, #2
 8008128:	d901      	bls.n	800812e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e056      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800812e:	4b2e      	ldr	r3, [pc, #184]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d0f0      	beq.n	800811c <HAL_RCC_OscConfig+0x41c>
 800813a:	e04e      	b.n	80081da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800813c:	4b2b      	ldr	r3, [pc, #172]	; (80081ec <HAL_RCC_OscConfig+0x4ec>)
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008142:	f7fc fd13 	bl	8004b6c <HAL_GetTick>
 8008146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008148:	e008      	b.n	800815c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800814a:	f7fc fd0f 	bl	8004b6c <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b02      	cmp	r3, #2
 8008156:	d901      	bls.n	800815c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e03f      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800815c:	4b22      	ldr	r3, [pc, #136]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1f0      	bne.n	800814a <HAL_RCC_OscConfig+0x44a>
 8008168:	e037      	b.n	80081da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d101      	bne.n	8008176 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e032      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008176:	4b1c      	ldr	r3, [pc, #112]	; (80081e8 <HAL_RCC_OscConfig+0x4e8>)
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d028      	beq.n	80081d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800818e:	429a      	cmp	r2, r3
 8008190:	d121      	bne.n	80081d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800819c:	429a      	cmp	r2, r3
 800819e:	d11a      	bne.n	80081d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80081a6:	4013      	ands	r3, r2
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d111      	bne.n	80081d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081bc:	085b      	lsrs	r3, r3, #1
 80081be:	3b01      	subs	r3, #1
 80081c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d107      	bne.n	80081d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d001      	beq.n	80081da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e000      	b.n	80081dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	40007000 	.word	0x40007000
 80081e8:	40023800 	.word	0x40023800
 80081ec:	42470060 	.word	0x42470060

080081f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e0cc      	b.n	800839e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008204:	4b68      	ldr	r3, [pc, #416]	; (80083a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 030f 	and.w	r3, r3, #15
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	429a      	cmp	r2, r3
 8008210:	d90c      	bls.n	800822c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008212:	4b65      	ldr	r3, [pc, #404]	; (80083a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	b2d2      	uxtb	r2, r2
 8008218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800821a:	4b63      	ldr	r3, [pc, #396]	; (80083a8 <HAL_RCC_ClockConfig+0x1b8>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 030f 	and.w	r3, r3, #15
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	429a      	cmp	r2, r3
 8008226:	d001      	beq.n	800822c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e0b8      	b.n	800839e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d020      	beq.n	800827a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b00      	cmp	r3, #0
 8008242:	d005      	beq.n	8008250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008244:	4b59      	ldr	r3, [pc, #356]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	4a58      	ldr	r2, [pc, #352]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 800824a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800824e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0308 	and.w	r3, r3, #8
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800825c:	4b53      	ldr	r3, [pc, #332]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	4a52      	ldr	r2, [pc, #328]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008262:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008268:	4b50      	ldr	r3, [pc, #320]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	494d      	ldr	r1, [pc, #308]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008276:	4313      	orrs	r3, r2
 8008278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d044      	beq.n	8008310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d107      	bne.n	800829e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800828e:	4b47      	ldr	r3, [pc, #284]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d119      	bne.n	80082ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e07f      	b.n	800839e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d003      	beq.n	80082ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d107      	bne.n	80082be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082ae:	4b3f      	ldr	r3, [pc, #252]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d109      	bne.n	80082ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e06f      	b.n	800839e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082be:	4b3b      	ldr	r3, [pc, #236]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0302 	and.w	r3, r3, #2
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e067      	b.n	800839e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082ce:	4b37      	ldr	r3, [pc, #220]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f023 0203 	bic.w	r2, r3, #3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	4934      	ldr	r1, [pc, #208]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082e0:	f7fc fc44 	bl	8004b6c <HAL_GetTick>
 80082e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082e6:	e00a      	b.n	80082fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082e8:	f7fc fc40 	bl	8004b6c <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d901      	bls.n	80082fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e04f      	b.n	800839e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082fe:	4b2b      	ldr	r3, [pc, #172]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f003 020c 	and.w	r2, r3, #12
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	429a      	cmp	r2, r3
 800830e:	d1eb      	bne.n	80082e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008310:	4b25      	ldr	r3, [pc, #148]	; (80083a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 030f 	and.w	r3, r3, #15
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	429a      	cmp	r2, r3
 800831c:	d20c      	bcs.n	8008338 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800831e:	4b22      	ldr	r3, [pc, #136]	; (80083a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	b2d2      	uxtb	r2, r2
 8008324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008326:	4b20      	ldr	r3, [pc, #128]	; (80083a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 030f 	and.w	r3, r3, #15
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	429a      	cmp	r2, r3
 8008332:	d001      	beq.n	8008338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e032      	b.n	800839e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d008      	beq.n	8008356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008344:	4b19      	ldr	r3, [pc, #100]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	4916      	ldr	r1, [pc, #88]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008352:	4313      	orrs	r3, r2
 8008354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0308 	and.w	r3, r3, #8
 800835e:	2b00      	cmp	r3, #0
 8008360:	d009      	beq.n	8008376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008362:	4b12      	ldr	r3, [pc, #72]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	00db      	lsls	r3, r3, #3
 8008370:	490e      	ldr	r1, [pc, #56]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008372:	4313      	orrs	r3, r2
 8008374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008376:	f000 f821 	bl	80083bc <HAL_RCC_GetSysClockFreq>
 800837a:	4602      	mov	r2, r0
 800837c:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	091b      	lsrs	r3, r3, #4
 8008382:	f003 030f 	and.w	r3, r3, #15
 8008386:	490a      	ldr	r1, [pc, #40]	; (80083b0 <HAL_RCC_ClockConfig+0x1c0>)
 8008388:	5ccb      	ldrb	r3, [r1, r3]
 800838a:	fa22 f303 	lsr.w	r3, r2, r3
 800838e:	4a09      	ldr	r2, [pc, #36]	; (80083b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008392:	4b09      	ldr	r3, [pc, #36]	; (80083b8 <HAL_RCC_ClockConfig+0x1c8>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4618      	mov	r0, r3
 8008398:	f7fa fd20 	bl	8002ddc <HAL_InitTick>

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	40023c00 	.word	0x40023c00
 80083ac:	40023800 	.word	0x40023800
 80083b0:	08017c60 	.word	0x08017c60
 80083b4:	20000000 	.word	0x20000000
 80083b8:	20000004 	.word	0x20000004

080083bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80083c4:	2300      	movs	r3, #0
 80083c6:	607b      	str	r3, [r7, #4]
 80083c8:	2300      	movs	r3, #0
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	2300      	movs	r3, #0
 80083ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083d4:	4b67      	ldr	r3, [pc, #412]	; (8008574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f003 030c 	and.w	r3, r3, #12
 80083dc:	2b08      	cmp	r3, #8
 80083de:	d00d      	beq.n	80083fc <HAL_RCC_GetSysClockFreq+0x40>
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	f200 80bd 	bhi.w	8008560 <HAL_RCC_GetSysClockFreq+0x1a4>
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <HAL_RCC_GetSysClockFreq+0x34>
 80083ea:	2b04      	cmp	r3, #4
 80083ec:	d003      	beq.n	80083f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80083ee:	e0b7      	b.n	8008560 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083f0:	4b61      	ldr	r3, [pc, #388]	; (8008578 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80083f2:	60bb      	str	r3, [r7, #8]
       break;
 80083f4:	e0b7      	b.n	8008566 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083f6:	4b60      	ldr	r3, [pc, #384]	; (8008578 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80083f8:	60bb      	str	r3, [r7, #8]
      break;
 80083fa:	e0b4      	b.n	8008566 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083fc:	4b5d      	ldr	r3, [pc, #372]	; (8008574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008404:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008406:	4b5b      	ldr	r3, [pc, #364]	; (8008574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d04d      	beq.n	80084ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008412:	4b58      	ldr	r3, [pc, #352]	; (8008574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	099b      	lsrs	r3, r3, #6
 8008418:	461a      	mov	r2, r3
 800841a:	f04f 0300 	mov.w	r3, #0
 800841e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008422:	f04f 0100 	mov.w	r1, #0
 8008426:	ea02 0800 	and.w	r8, r2, r0
 800842a:	ea03 0901 	and.w	r9, r3, r1
 800842e:	4640      	mov	r0, r8
 8008430:	4649      	mov	r1, r9
 8008432:	f04f 0200 	mov.w	r2, #0
 8008436:	f04f 0300 	mov.w	r3, #0
 800843a:	014b      	lsls	r3, r1, #5
 800843c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008440:	0142      	lsls	r2, r0, #5
 8008442:	4610      	mov	r0, r2
 8008444:	4619      	mov	r1, r3
 8008446:	ebb0 0008 	subs.w	r0, r0, r8
 800844a:	eb61 0109 	sbc.w	r1, r1, r9
 800844e:	f04f 0200 	mov.w	r2, #0
 8008452:	f04f 0300 	mov.w	r3, #0
 8008456:	018b      	lsls	r3, r1, #6
 8008458:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800845c:	0182      	lsls	r2, r0, #6
 800845e:	1a12      	subs	r2, r2, r0
 8008460:	eb63 0301 	sbc.w	r3, r3, r1
 8008464:	f04f 0000 	mov.w	r0, #0
 8008468:	f04f 0100 	mov.w	r1, #0
 800846c:	00d9      	lsls	r1, r3, #3
 800846e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008472:	00d0      	lsls	r0, r2, #3
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	eb12 0208 	adds.w	r2, r2, r8
 800847c:	eb43 0309 	adc.w	r3, r3, r9
 8008480:	f04f 0000 	mov.w	r0, #0
 8008484:	f04f 0100 	mov.w	r1, #0
 8008488:	0299      	lsls	r1, r3, #10
 800848a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800848e:	0290      	lsls	r0, r2, #10
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4610      	mov	r0, r2
 8008496:	4619      	mov	r1, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	461a      	mov	r2, r3
 800849c:	f04f 0300 	mov.w	r3, #0
 80084a0:	f7f8 fc02 	bl	8000ca8 <__aeabi_uldivmod>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4613      	mov	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	e04a      	b.n	8008544 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084ae:	4b31      	ldr	r3, [pc, #196]	; (8008574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	099b      	lsrs	r3, r3, #6
 80084b4:	461a      	mov	r2, r3
 80084b6:	f04f 0300 	mov.w	r3, #0
 80084ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80084be:	f04f 0100 	mov.w	r1, #0
 80084c2:	ea02 0400 	and.w	r4, r2, r0
 80084c6:	ea03 0501 	and.w	r5, r3, r1
 80084ca:	4620      	mov	r0, r4
 80084cc:	4629      	mov	r1, r5
 80084ce:	f04f 0200 	mov.w	r2, #0
 80084d2:	f04f 0300 	mov.w	r3, #0
 80084d6:	014b      	lsls	r3, r1, #5
 80084d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80084dc:	0142      	lsls	r2, r0, #5
 80084de:	4610      	mov	r0, r2
 80084e0:	4619      	mov	r1, r3
 80084e2:	1b00      	subs	r0, r0, r4
 80084e4:	eb61 0105 	sbc.w	r1, r1, r5
 80084e8:	f04f 0200 	mov.w	r2, #0
 80084ec:	f04f 0300 	mov.w	r3, #0
 80084f0:	018b      	lsls	r3, r1, #6
 80084f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80084f6:	0182      	lsls	r2, r0, #6
 80084f8:	1a12      	subs	r2, r2, r0
 80084fa:	eb63 0301 	sbc.w	r3, r3, r1
 80084fe:	f04f 0000 	mov.w	r0, #0
 8008502:	f04f 0100 	mov.w	r1, #0
 8008506:	00d9      	lsls	r1, r3, #3
 8008508:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800850c:	00d0      	lsls	r0, r2, #3
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	1912      	adds	r2, r2, r4
 8008514:	eb45 0303 	adc.w	r3, r5, r3
 8008518:	f04f 0000 	mov.w	r0, #0
 800851c:	f04f 0100 	mov.w	r1, #0
 8008520:	0299      	lsls	r1, r3, #10
 8008522:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008526:	0290      	lsls	r0, r2, #10
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	4610      	mov	r0, r2
 800852e:	4619      	mov	r1, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	461a      	mov	r2, r3
 8008534:	f04f 0300 	mov.w	r3, #0
 8008538:	f7f8 fbb6 	bl	8000ca8 <__aeabi_uldivmod>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	4613      	mov	r3, r2
 8008542:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008544:	4b0b      	ldr	r3, [pc, #44]	; (8008574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	0c1b      	lsrs	r3, r3, #16
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	3301      	adds	r3, #1
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	fbb2 f3f3 	udiv	r3, r2, r3
 800855c:	60bb      	str	r3, [r7, #8]
      break;
 800855e:	e002      	b.n	8008566 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008560:	4b05      	ldr	r3, [pc, #20]	; (8008578 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008562:	60bb      	str	r3, [r7, #8]
      break;
 8008564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008566:	68bb      	ldr	r3, [r7, #8]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008572:	bf00      	nop
 8008574:	40023800 	.word	0x40023800
 8008578:	00f42400 	.word	0x00f42400

0800857c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800857c:	b480      	push	{r7}
 800857e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008580:	4b03      	ldr	r3, [pc, #12]	; (8008590 <HAL_RCC_GetHCLKFreq+0x14>)
 8008582:	681b      	ldr	r3, [r3, #0]
}
 8008584:	4618      	mov	r0, r3
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	20000000 	.word	0x20000000

08008594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008598:	f7ff fff0 	bl	800857c <HAL_RCC_GetHCLKFreq>
 800859c:	4602      	mov	r2, r0
 800859e:	4b05      	ldr	r3, [pc, #20]	; (80085b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	0a9b      	lsrs	r3, r3, #10
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	4903      	ldr	r1, [pc, #12]	; (80085b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085aa:	5ccb      	ldrb	r3, [r1, r3]
 80085ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	40023800 	.word	0x40023800
 80085b8:	08017c70 	.word	0x08017c70

080085bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085c0:	f7ff ffdc 	bl	800857c <HAL_RCC_GetHCLKFreq>
 80085c4:	4602      	mov	r2, r0
 80085c6:	4b05      	ldr	r3, [pc, #20]	; (80085dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	0b5b      	lsrs	r3, r3, #13
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	4903      	ldr	r1, [pc, #12]	; (80085e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085d2:	5ccb      	ldrb	r3, [r1, r3]
 80085d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085d8:	4618      	mov	r0, r3
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	40023800 	.word	0x40023800
 80085e0:	08017c70 	.word	0x08017c70

080085e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	220f      	movs	r2, #15
 80085f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80085f4:	4b12      	ldr	r3, [pc, #72]	; (8008640 <HAL_RCC_GetClockConfig+0x5c>)
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f003 0203 	and.w	r2, r3, #3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008600:	4b0f      	ldr	r3, [pc, #60]	; (8008640 <HAL_RCC_GetClockConfig+0x5c>)
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800860c:	4b0c      	ldr	r3, [pc, #48]	; (8008640 <HAL_RCC_GetClockConfig+0x5c>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008618:	4b09      	ldr	r3, [pc, #36]	; (8008640 <HAL_RCC_GetClockConfig+0x5c>)
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	08db      	lsrs	r3, r3, #3
 800861e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008626:	4b07      	ldr	r3, [pc, #28]	; (8008644 <HAL_RCC_GetClockConfig+0x60>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 020f 	and.w	r2, r3, #15
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	601a      	str	r2, [r3, #0]
}
 8008632:	bf00      	nop
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	40023800 	.word	0x40023800
 8008644:	40023c00 	.word	0x40023c00

08008648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10b      	bne.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800866c:	2b00      	cmp	r3, #0
 800866e:	d105      	bne.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008678:	2b00      	cmp	r3, #0
 800867a:	d075      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800867c:	4bad      	ldr	r3, [pc, #692]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008682:	f7fc fa73 	bl	8004b6c <HAL_GetTick>
 8008686:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008688:	e008      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800868a:	f7fc fa6f 	bl	8004b6c <HAL_GetTick>
 800868e:	4602      	mov	r2, r0
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	2b02      	cmp	r3, #2
 8008696:	d901      	bls.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008698:	2303      	movs	r3, #3
 800869a:	e18b      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800869c:	4ba6      	ldr	r3, [pc, #664]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1f0      	bne.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d009      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	019a      	lsls	r2, r3, #6
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	071b      	lsls	r3, r3, #28
 80086c0:	499d      	ldr	r1, [pc, #628]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01f      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80086d4:	4b98      	ldr	r3, [pc, #608]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80086d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086da:	0f1b      	lsrs	r3, r3, #28
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	019a      	lsls	r2, r3, #6
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	061b      	lsls	r3, r3, #24
 80086ee:	431a      	orrs	r2, r3
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	071b      	lsls	r3, r3, #28
 80086f4:	4990      	ldr	r1, [pc, #576]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80086fc:	4b8e      	ldr	r3, [pc, #568]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80086fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008702:	f023 021f 	bic.w	r2, r3, #31
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	3b01      	subs	r3, #1
 800870c:	498a      	ldr	r1, [pc, #552]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800870e:	4313      	orrs	r3, r2
 8008710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00d      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	019a      	lsls	r2, r3, #6
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	061b      	lsls	r3, r3, #24
 800872c:	431a      	orrs	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	071b      	lsls	r3, r3, #28
 8008734:	4980      	ldr	r1, [pc, #512]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008736:	4313      	orrs	r3, r2
 8008738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800873c:	4b7d      	ldr	r3, [pc, #500]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800873e:	2201      	movs	r2, #1
 8008740:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008742:	f7fc fa13 	bl	8004b6c <HAL_GetTick>
 8008746:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008748:	e008      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800874a:	f7fc fa0f 	bl	8004b6c <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	2b02      	cmp	r3, #2
 8008756:	d901      	bls.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e12b      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800875c:	4b76      	ldr	r3, [pc, #472]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0f0      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	d105      	bne.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800877c:	2b00      	cmp	r3, #0
 800877e:	d079      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008780:	4b6e      	ldr	r3, [pc, #440]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008786:	f7fc f9f1 	bl	8004b6c <HAL_GetTick>
 800878a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800878c:	e008      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800878e:	f7fc f9ed 	bl	8004b6c <HAL_GetTick>
 8008792:	4602      	mov	r2, r0
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	2b02      	cmp	r3, #2
 800879a:	d901      	bls.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e109      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80087a0:	4b65      	ldr	r3, [pc, #404]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087ac:	d0ef      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0304 	and.w	r3, r3, #4
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d020      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80087ba:	4b5f      	ldr	r3, [pc, #380]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80087bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c0:	0f1b      	lsrs	r3, r3, #28
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	019a      	lsls	r2, r3, #6
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	061b      	lsls	r3, r3, #24
 80087d4:	431a      	orrs	r2, r3
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	071b      	lsls	r3, r3, #28
 80087da:	4957      	ldr	r1, [pc, #348]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80087dc:	4313      	orrs	r3, r2
 80087de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80087e2:	4b55      	ldr	r3, [pc, #340]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80087e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	021b      	lsls	r3, r3, #8
 80087f4:	4950      	ldr	r1, [pc, #320]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0308 	and.w	r3, r3, #8
 8008804:	2b00      	cmp	r3, #0
 8008806:	d01e      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008808:	4b4b      	ldr	r3, [pc, #300]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800880a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800880e:	0e1b      	lsrs	r3, r3, #24
 8008810:	f003 030f 	and.w	r3, r3, #15
 8008814:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	019a      	lsls	r2, r3, #6
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	061b      	lsls	r3, r3, #24
 8008820:	431a      	orrs	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	071b      	lsls	r3, r3, #28
 8008828:	4943      	ldr	r1, [pc, #268]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800882a:	4313      	orrs	r3, r2
 800882c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008830:	4b41      	ldr	r3, [pc, #260]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008836:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	493e      	ldr	r1, [pc, #248]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008840:	4313      	orrs	r3, r2
 8008842:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008846:	4b3d      	ldr	r3, [pc, #244]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008848:	2201      	movs	r2, #1
 800884a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800884c:	f7fc f98e 	bl	8004b6c <HAL_GetTick>
 8008850:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008852:	e008      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008854:	f7fc f98a 	bl	8004b6c <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	2b02      	cmp	r3, #2
 8008860:	d901      	bls.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e0a6      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008866:	4b34      	ldr	r3, [pc, #208]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800886e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008872:	d1ef      	bne.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0320 	and.w	r3, r3, #32
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 808d 	beq.w	800899c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]
 8008886:	4b2c      	ldr	r3, [pc, #176]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888a:	4a2b      	ldr	r2, [pc, #172]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800888c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008890:	6413      	str	r3, [r2, #64]	; 0x40
 8008892:	4b29      	ldr	r3, [pc, #164]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800889e:	4b28      	ldr	r3, [pc, #160]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a27      	ldr	r2, [pc, #156]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80088a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088aa:	f7fc f95f 	bl	8004b6c <HAL_GetTick>
 80088ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80088b0:	e008      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80088b2:	f7fc f95b 	bl	8004b6c <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d901      	bls.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e077      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80088c4:	4b1e      	ldr	r3, [pc, #120]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0f0      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80088d0:	4b19      	ldr	r3, [pc, #100]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d039      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d032      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80088ee:	4b12      	ldr	r3, [pc, #72]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80088f8:	4b12      	ldr	r3, [pc, #72]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80088fa:	2201      	movs	r2, #1
 80088fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80088fe:	4b11      	ldr	r3, [pc, #68]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008904:	4a0c      	ldr	r2, [pc, #48]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800890a:	4b0b      	ldr	r3, [pc, #44]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800890c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b01      	cmp	r3, #1
 8008914:	d11e      	bne.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008916:	f7fc f929 	bl	8004b6c <HAL_GetTick>
 800891a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800891c:	e014      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800891e:	f7fc f925 	bl	8004b6c <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	f241 3288 	movw	r2, #5000	; 0x1388
 800892c:	4293      	cmp	r3, r2
 800892e:	d90b      	bls.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e03f      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008934:	42470068 	.word	0x42470068
 8008938:	40023800 	.word	0x40023800
 800893c:	42470070 	.word	0x42470070
 8008940:	40007000 	.word	0x40007000
 8008944:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008948:	4b1c      	ldr	r3, [pc, #112]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800894a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894c:	f003 0302 	and.w	r3, r3, #2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0e4      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800895c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008960:	d10d      	bne.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8008962:	4b16      	ldr	r3, [pc, #88]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008976:	4911      	ldr	r1, [pc, #68]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008978:	4313      	orrs	r3, r2
 800897a:	608b      	str	r3, [r1, #8]
 800897c:	e005      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800897e:	4b0f      	ldr	r3, [pc, #60]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	4a0e      	ldr	r2, [pc, #56]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008984:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008988:	6093      	str	r3, [r2, #8]
 800898a:	4b0c      	ldr	r3, [pc, #48]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800898c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008996:	4909      	ldr	r1, [pc, #36]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008998:	4313      	orrs	r3, r2
 800899a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0310 	and.w	r3, r3, #16
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d004      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80089ae:	4b04      	ldr	r3, [pc, #16]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80089b0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	40023800 	.word	0x40023800
 80089c0:	424711e0 	.word	0x424711e0

080089c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d101      	bne.n	80089d6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e083      	b.n	8008ade <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	7f5b      	ldrb	r3, [r3, #29]
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d105      	bne.n	80089ec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7fa f804 	bl	80029f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2202      	movs	r2, #2
 80089f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	22ca      	movs	r2, #202	; 0xca
 80089f8:	625a      	str	r2, [r3, #36]	; 0x24
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2253      	movs	r2, #83	; 0x53
 8008a00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fb7a 	bl	80090fc <RTC_EnterInitMode>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d008      	beq.n	8008a20 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	22ff      	movs	r2, #255	; 0xff
 8008a14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2204      	movs	r2, #4
 8008a1a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e05e      	b.n	8008ade <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	6812      	ldr	r2, [r2, #0]
 8008a2a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a32:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6899      	ldr	r1, [r3, #8]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	431a      	orrs	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	68d2      	ldr	r2, [r2, #12]
 8008a5a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6919      	ldr	r1, [r3, #16]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	041a      	lsls	r2, r3, #16
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a7e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f003 0320 	and.w	r3, r3, #32
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10e      	bne.n	8008aac <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fb0c 	bl	80090ac <HAL_RTC_WaitForSynchro>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d008      	beq.n	8008aac <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	22ff      	movs	r2, #255	; 0xff
 8008aa0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2204      	movs	r2, #4
 8008aa6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e018      	b.n	8008ade <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008aba:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	699a      	ldr	r2, [r3, #24]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	22ff      	movs	r2, #255	; 0xff
 8008ad4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008adc:	2300      	movs	r3, #0
  }
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008ae6:	b590      	push	{r4, r7, lr}
 8008ae8:	b087      	sub	sp, #28
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008af2:	2300      	movs	r3, #0
 8008af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	7f1b      	ldrb	r3, [r3, #28]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d101      	bne.n	8008b02 <HAL_RTC_SetTime+0x1c>
 8008afe:	2302      	movs	r3, #2
 8008b00:	e0aa      	b.n	8008c58 <HAL_RTC_SetTime+0x172>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2201      	movs	r2, #1
 8008b06:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d126      	bne.n	8008b62 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d102      	bne.n	8008b28 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2200      	movs	r2, #0
 8008b26:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f000 fb11 	bl	8009154 <RTC_ByteToBcd2>
 8008b32:	4603      	mov	r3, r0
 8008b34:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	785b      	ldrb	r3, [r3, #1]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fb0a 	bl	8009154 <RTC_ByteToBcd2>
 8008b40:	4603      	mov	r3, r0
 8008b42:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008b44:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	789b      	ldrb	r3, [r3, #2]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 fb02 	bl	8009154 <RTC_ByteToBcd2>
 8008b50:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008b52:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	78db      	ldrb	r3, [r3, #3]
 8008b5a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	617b      	str	r3, [r7, #20]
 8008b60:	e018      	b.n	8008b94 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d102      	bne.n	8008b76 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	2200      	movs	r2, #0
 8008b74:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	785b      	ldrb	r3, [r3, #1]
 8008b80:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008b82:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008b88:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	78db      	ldrb	r3, [r3, #3]
 8008b8e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008b90:	4313      	orrs	r3, r2
 8008b92:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	22ca      	movs	r2, #202	; 0xca
 8008b9a:	625a      	str	r2, [r3, #36]	; 0x24
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2253      	movs	r2, #83	; 0x53
 8008ba2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 faa9 	bl	80090fc <RTC_EnterInitMode>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00b      	beq.n	8008bc8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	22ff      	movs	r2, #255	; 0xff
 8008bb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2204      	movs	r2, #4
 8008bbc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e047      	b.n	8008c58 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008bd2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008bd6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689a      	ldr	r2, [r3, #8]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008be6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6899      	ldr	r1, [r3, #8]
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	68da      	ldr	r2, [r3, #12]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	431a      	orrs	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c0e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f003 0320 	and.w	r3, r3, #32
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d111      	bne.n	8008c42 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 fa44 	bl	80090ac <HAL_RTC_WaitForSynchro>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00b      	beq.n	8008c42 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	22ff      	movs	r2, #255	; 0xff
 8008c30:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2204      	movs	r2, #4
 8008c36:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e00a      	b.n	8008c58 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	22ff      	movs	r2, #255	; 0xff
 8008c48:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008c56:	2300      	movs	r3, #0
  }
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	371c      	adds	r7, #28
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd90      	pop	{r4, r7, pc}

08008c60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008c60:	b590      	push	{r4, r7, lr}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	7f1b      	ldrb	r3, [r3, #28]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d101      	bne.n	8008c7c <HAL_RTC_SetDate+0x1c>
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e094      	b.n	8008da6 <HAL_RTC_SetDate+0x146>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2202      	movs	r2, #2
 8008c86:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10e      	bne.n	8008cac <HAL_RTC_SetDate+0x4c>
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	785b      	ldrb	r3, [r3, #1]
 8008c92:	f003 0310 	and.w	r3, r3, #16
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d008      	beq.n	8008cac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	785b      	ldrb	r3, [r3, #1]
 8008c9e:	f023 0310 	bic.w	r3, r3, #16
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	330a      	adds	r3, #10
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d11c      	bne.n	8008cec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	78db      	ldrb	r3, [r3, #3]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f000 fa4c 	bl	8009154 <RTC_ByteToBcd2>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	785b      	ldrb	r3, [r3, #1]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f000 fa45 	bl	8009154 <RTC_ByteToBcd2>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008cce:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	789b      	ldrb	r3, [r3, #2]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 fa3d 	bl	8009154 <RTC_ByteToBcd2>
 8008cda:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008cdc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	617b      	str	r3, [r7, #20]
 8008cea:	e00e      	b.n	8008d0a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	78db      	ldrb	r3, [r3, #3]
 8008cf0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	785b      	ldrb	r3, [r3, #1]
 8008cf6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008cf8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008cfe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008d06:	4313      	orrs	r3, r2
 8008d08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	22ca      	movs	r2, #202	; 0xca
 8008d10:	625a      	str	r2, [r3, #36]	; 0x24
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2253      	movs	r2, #83	; 0x53
 8008d18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 f9ee 	bl	80090fc <RTC_EnterInitMode>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00b      	beq.n	8008d3e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	22ff      	movs	r2, #255	; 0xff
 8008d2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2204      	movs	r2, #4
 8008d32:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e033      	b.n	8008da6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008d48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d4c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d5c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f003 0320 	and.w	r3, r3, #32
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d111      	bne.n	8008d90 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 f99d 	bl	80090ac <HAL_RTC_WaitForSynchro>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00b      	beq.n	8008d90 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	22ff      	movs	r2, #255	; 0xff
 8008d7e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2204      	movs	r2, #4
 8008d84:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e00a      	b.n	8008da6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	22ff      	movs	r2, #255	; 0xff
 8008d96:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008da4:	2300      	movs	r3, #0
  }
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	371c      	adds	r7, #28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd90      	pop	{r4, r7, pc}
	...

08008db0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008db0:	b590      	push	{r4, r7, lr}
 8008db2:	b089      	sub	sp, #36	; 0x24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	61fb      	str	r3, [r7, #28]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8008dc4:	4b93      	ldr	r3, [pc, #588]	; (8009014 <HAL_RTC_SetAlarm_IT+0x264>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a93      	ldr	r2, [pc, #588]	; (8009018 <HAL_RTC_SetAlarm_IT+0x268>)
 8008dca:	fba2 2303 	umull	r2, r3, r2, r3
 8008dce:	0adb      	lsrs	r3, r3, #11
 8008dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008dd4:	fb02 f303 	mul.w	r3, r2, r3
 8008dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	7f1b      	ldrb	r3, [r3, #28]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d101      	bne.n	8008de6 <HAL_RTC_SetAlarm_IT+0x36>
 8008de2:	2302      	movs	r3, #2
 8008de4:	e111      	b.n	800900a <HAL_RTC_SetAlarm_IT+0x25a>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2201      	movs	r2, #1
 8008dea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2202      	movs	r2, #2
 8008df0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d137      	bne.n	8008e68 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d102      	bne.n	8008e0c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	4618      	mov	r0, r3
 8008e12:	f000 f99f 	bl	8009154 <RTC_ByteToBcd2>
 8008e16:	4603      	mov	r3, r0
 8008e18:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	785b      	ldrb	r3, [r3, #1]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 f998 	bl	8009154 <RTC_ByteToBcd2>
 8008e24:	4603      	mov	r3, r0
 8008e26:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008e28:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	789b      	ldrb	r3, [r3, #2]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 f990 	bl	8009154 <RTC_ByteToBcd2>
 8008e34:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008e36:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	78db      	ldrb	r3, [r3, #3]
 8008e3e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008e40:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 f982 	bl	8009154 <RTC_ByteToBcd2>
 8008e50:	4603      	mov	r3, r0
 8008e52:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008e54:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008e5c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008e62:	4313      	orrs	r3, r2
 8008e64:	61fb      	str	r3, [r7, #28]
 8008e66:	e023      	b.n	8008eb0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d102      	bne.n	8008e7c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	785b      	ldrb	r3, [r3, #1]
 8008e86:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008e88:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008e8e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	78db      	ldrb	r3, [r3, #3]
 8008e94:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008e96:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e9e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008ea0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008ea6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008eac:	4313      	orrs	r3, r2
 8008eae:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	685a      	ldr	r2, [r3, #4]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	22ca      	movs	r2, #202	; 0xca
 8008ec2:	625a      	str	r2, [r3, #36]	; 0x24
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2253      	movs	r2, #83	; 0x53
 8008eca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ed4:	d141      	bne.n	8008f5a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	689a      	ldr	r2, [r3, #8]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ee4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008ef6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	1e5a      	subs	r2, r3, #1
 8008efc:	617a      	str	r2, [r7, #20]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10b      	bne.n	8008f1a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	22ff      	movs	r2, #255	; 0xff
 8008f08:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2203      	movs	r2, #3
 8008f0e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e077      	b.n	800900a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d0e7      	beq.n	8008ef8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	69fa      	ldr	r2, [r7, #28]
 8008f2e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	689a      	ldr	r2, [r3, #8]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f46:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f56:	609a      	str	r2, [r3, #8]
 8008f58:	e040      	b.n	8008fdc <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689a      	ldr	r2, [r3, #8]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f68:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008f7a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	1e5a      	subs	r2, r3, #1
 8008f80:	617a      	str	r2, [r7, #20]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10b      	bne.n	8008f9e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	22ff      	movs	r2, #255	; 0xff
 8008f8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2203      	movs	r2, #3
 8008f92:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e035      	b.n	800900a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d0e7      	beq.n	8008f7c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	69fa      	ldr	r2, [r7, #28]
 8008fb2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	69ba      	ldr	r2, [r7, #24]
 8008fba:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	689a      	ldr	r2, [r3, #8]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fca:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689a      	ldr	r2, [r3, #8]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fda:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008fdc:	4b0f      	ldr	r3, [pc, #60]	; (800901c <HAL_RTC_SetAlarm_IT+0x26c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a0e      	ldr	r2, [pc, #56]	; (800901c <HAL_RTC_SetAlarm_IT+0x26c>)
 8008fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fe6:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8008fe8:	4b0c      	ldr	r3, [pc, #48]	; (800901c <HAL_RTC_SetAlarm_IT+0x26c>)
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	4a0b      	ldr	r2, [pc, #44]	; (800901c <HAL_RTC_SetAlarm_IT+0x26c>)
 8008fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ff2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	22ff      	movs	r2, #255	; 0xff
 8008ffa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2201      	movs	r2, #1
 8009000:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3724      	adds	r7, #36	; 0x24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd90      	pop	{r4, r7, pc}
 8009012:	bf00      	nop
 8009014:	20000000 	.word	0x20000000
 8009018:	10624dd3 	.word	0x10624dd3
 800901c:	40013c00 	.word	0x40013c00

08009020 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d012      	beq.n	800905c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00b      	beq.n	800905c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7fb fc69 	bl	800491c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	b2da      	uxtb	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800905a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d012      	beq.n	8009090 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00b      	beq.n	8009090 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f8e1 	bl	8009240 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	b2da      	uxtb	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800908e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009090:	4b05      	ldr	r3, [pc, #20]	; (80090a8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8009092:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009096:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	775a      	strb	r2, [r3, #29]
}
 800909e:	bf00      	nop
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	40013c00 	.word	0x40013c00

080090ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80090b4:	2300      	movs	r3, #0
 80090b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80090c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090c8:	f7fb fd50 	bl	8004b6c <HAL_GetTick>
 80090cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80090ce:	e009      	b.n	80090e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80090d0:	f7fb fd4c 	bl	8004b6c <HAL_GetTick>
 80090d4:	4602      	mov	r2, r0
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090de:	d901      	bls.n	80090e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e007      	b.n	80090f4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	f003 0320 	and.w	r3, r3, #32
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0ee      	beq.n	80090d0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009104:	2300      	movs	r3, #0
 8009106:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009112:	2b00      	cmp	r3, #0
 8009114:	d119      	bne.n	800914a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f04f 32ff 	mov.w	r2, #4294967295
 800911e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009120:	f7fb fd24 	bl	8004b6c <HAL_GetTick>
 8009124:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009126:	e009      	b.n	800913c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009128:	f7fb fd20 	bl	8004b6c <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009136:	d901      	bls.n	800913c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	e007      	b.n	800914c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009146:	2b00      	cmp	r3, #0
 8009148:	d0ee      	beq.n	8009128 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8009162:	e005      	b.n	8009170 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	3301      	adds	r3, #1
 8009168:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800916a:	79fb      	ldrb	r3, [r7, #7]
 800916c:	3b0a      	subs	r3, #10
 800916e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8009170:	79fb      	ldrb	r3, [r7, #7]
 8009172:	2b09      	cmp	r3, #9
 8009174:	d8f6      	bhi.n	8009164 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	b2db      	uxtb	r3, r3
 800917a:	011b      	lsls	r3, r3, #4
 800917c:	b2da      	uxtb	r2, r3
 800917e:	79fb      	ldrb	r3, [r7, #7]
 8009180:	4313      	orrs	r3, r2
 8009182:	b2db      	uxtb	r3, r3
}
 8009184:	4618      	mov	r0, r3
 8009186:	3714      	adds	r7, #20
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009198:	2300      	movs	r3, #0
 800919a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	7f1b      	ldrb	r3, [r3, #28]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d101      	bne.n	80091a8 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 80091a4:	2302      	movs	r3, #2
 80091a6:	e047      	b.n	8009238 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2202      	movs	r2, #2
 80091b2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	22ca      	movs	r2, #202	; 0xca
 80091ba:	625a      	str	r2, [r3, #36]	; 0x24
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2253      	movs	r2, #83	; 0x53
 80091c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	689a      	ldr	r2, [r3, #8]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091d2:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	689a      	ldr	r2, [r3, #8]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80091e2:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80091e4:	f7fb fcc2 	bl	8004b6c <HAL_GetTick>
 80091e8:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80091ea:	e013      	b.n	8009214 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80091ec:	f7fb fcbe 	bl	8004b6c <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091fa:	d90b      	bls.n	8009214 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	22ff      	movs	r2, #255	; 0xff
 8009202:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2203      	movs	r2, #3
 8009208:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e011      	b.n	8009238 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	f003 0304 	and.w	r3, r3, #4
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0e4      	beq.n	80091ec <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	22ff      	movs	r2, #255	; 0xff
 8009228:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e07b      	b.n	800935e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926a:	2b00      	cmp	r3, #0
 800926c:	d108      	bne.n	8009280 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009276:	d009      	beq.n	800928c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	61da      	str	r2, [r3, #28]
 800927e:	e005      	b.n	800928c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b00      	cmp	r3, #0
 800929c:	d106      	bne.n	80092ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7f9 fbd6 	bl	8002a58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80092d4:	431a      	orrs	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092de:	431a      	orrs	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	431a      	orrs	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	f003 0301 	and.w	r3, r3, #1
 80092f2:	431a      	orrs	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092fc:	431a      	orrs	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009306:	431a      	orrs	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a1b      	ldr	r3, [r3, #32]
 800930c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009310:	ea42 0103 	orr.w	r1, r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009318:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	430a      	orrs	r2, r1
 8009322:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	0c1b      	lsrs	r3, r3, #16
 800932a:	f003 0104 	and.w	r1, r3, #4
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009332:	f003 0210 	and.w	r2, r3, #16
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	430a      	orrs	r2, r1
 800933c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	69da      	ldr	r2, [r3, #28]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800934c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b088      	sub	sp, #32
 800936a:	af00      	add	r7, sp, #0
 800936c:	60f8      	str	r0, [r7, #12]
 800936e:	60b9      	str	r1, [r7, #8]
 8009370:	603b      	str	r3, [r7, #0]
 8009372:	4613      	mov	r3, r2
 8009374:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009380:	2b01      	cmp	r3, #1
 8009382:	d101      	bne.n	8009388 <HAL_SPI_Transmit+0x22>
 8009384:	2302      	movs	r3, #2
 8009386:	e126      	b.n	80095d6 <HAL_SPI_Transmit+0x270>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009390:	f7fb fbec 	bl	8004b6c <HAL_GetTick>
 8009394:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009396:	88fb      	ldrh	r3, [r7, #6]
 8009398:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d002      	beq.n	80093ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80093a6:	2302      	movs	r3, #2
 80093a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80093aa:	e10b      	b.n	80095c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d002      	beq.n	80093b8 <HAL_SPI_Transmit+0x52>
 80093b2:	88fb      	ldrh	r3, [r7, #6]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d102      	bne.n	80093be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80093bc:	e102      	b.n	80095c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2203      	movs	r2, #3
 80093c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	88fa      	ldrh	r2, [r7, #6]
 80093d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	88fa      	ldrh	r2, [r7, #6]
 80093dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009404:	d10f      	bne.n	8009426 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009414:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009424:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009430:	2b40      	cmp	r3, #64	; 0x40
 8009432:	d007      	beq.n	8009444 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009442:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800944c:	d14b      	bne.n	80094e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d002      	beq.n	800945c <HAL_SPI_Transmit+0xf6>
 8009456:	8afb      	ldrh	r3, [r7, #22]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d13e      	bne.n	80094da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009460:	881a      	ldrh	r2, [r3, #0]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946c:	1c9a      	adds	r2, r3, #2
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009476:	b29b      	uxth	r3, r3
 8009478:	3b01      	subs	r3, #1
 800947a:	b29a      	uxth	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009480:	e02b      	b.n	80094da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b02      	cmp	r3, #2
 800948e:	d112      	bne.n	80094b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009494:	881a      	ldrh	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a0:	1c9a      	adds	r2, r3, #2
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	3b01      	subs	r3, #1
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80094b4:	e011      	b.n	80094da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094b6:	f7fb fb59 	bl	8004b6c <HAL_GetTick>
 80094ba:	4602      	mov	r2, r0
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d803      	bhi.n	80094ce <HAL_SPI_Transmit+0x168>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094cc:	d102      	bne.n	80094d4 <HAL_SPI_Transmit+0x16e>
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d102      	bne.n	80094da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80094d4:	2303      	movs	r3, #3
 80094d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80094d8:	e074      	b.n	80095c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094de:	b29b      	uxth	r3, r3
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1ce      	bne.n	8009482 <HAL_SPI_Transmit+0x11c>
 80094e4:	e04c      	b.n	8009580 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <HAL_SPI_Transmit+0x18e>
 80094ee:	8afb      	ldrh	r3, [r7, #22]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d140      	bne.n	8009576 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	330c      	adds	r3, #12
 80094fe:	7812      	ldrb	r2, [r2, #0]
 8009500:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009506:	1c5a      	adds	r2, r3, #1
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009510:	b29b      	uxth	r3, r3
 8009512:	3b01      	subs	r3, #1
 8009514:	b29a      	uxth	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800951a:	e02c      	b.n	8009576 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f003 0302 	and.w	r3, r3, #2
 8009526:	2b02      	cmp	r3, #2
 8009528:	d113      	bne.n	8009552 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	330c      	adds	r3, #12
 8009534:	7812      	ldrb	r2, [r2, #0]
 8009536:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953c:	1c5a      	adds	r2, r3, #1
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009546:	b29b      	uxth	r3, r3
 8009548:	3b01      	subs	r3, #1
 800954a:	b29a      	uxth	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009550:	e011      	b.n	8009576 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009552:	f7fb fb0b 	bl	8004b6c <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	429a      	cmp	r2, r3
 8009560:	d803      	bhi.n	800956a <HAL_SPI_Transmit+0x204>
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009568:	d102      	bne.n	8009570 <HAL_SPI_Transmit+0x20a>
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d102      	bne.n	8009576 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009570:	2303      	movs	r3, #3
 8009572:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009574:	e026      	b.n	80095c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800957a:	b29b      	uxth	r3, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1cd      	bne.n	800951c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009580:	69ba      	ldr	r2, [r7, #24]
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 fa55 	bl	8009a34 <SPI_EndRxTxTransaction>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2220      	movs	r2, #32
 8009594:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d10a      	bne.n	80095b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800959e:	2300      	movs	r3, #0
 80095a0:	613b      	str	r3, [r7, #16]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	613b      	str	r3, [r7, #16]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	613b      	str	r3, [r7, #16]
 80095b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	77fb      	strb	r3, [r7, #31]
 80095c0:	e000      	b.n	80095c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80095c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80095d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3720      	adds	r7, #32
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b08c      	sub	sp, #48	; 0x30
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	60f8      	str	r0, [r7, #12]
 80095e6:	60b9      	str	r1, [r7, #8]
 80095e8:	607a      	str	r2, [r7, #4]
 80095ea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80095ec:	2301      	movs	r3, #1
 80095ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d101      	bne.n	8009604 <HAL_SPI_TransmitReceive+0x26>
 8009600:	2302      	movs	r3, #2
 8009602:	e18a      	b.n	800991a <HAL_SPI_TransmitReceive+0x33c>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800960c:	f7fb faae 	bl	8004b6c <HAL_GetTick>
 8009610:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009622:	887b      	ldrh	r3, [r7, #2]
 8009624:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800962a:	2b01      	cmp	r3, #1
 800962c:	d00f      	beq.n	800964e <HAL_SPI_TransmitReceive+0x70>
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009634:	d107      	bne.n	8009646 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d103      	bne.n	8009646 <HAL_SPI_TransmitReceive+0x68>
 800963e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009642:	2b04      	cmp	r3, #4
 8009644:	d003      	beq.n	800964e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009646:	2302      	movs	r3, #2
 8009648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800964c:	e15b      	b.n	8009906 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d005      	beq.n	8009660 <HAL_SPI_TransmitReceive+0x82>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d002      	beq.n	8009660 <HAL_SPI_TransmitReceive+0x82>
 800965a:	887b      	ldrh	r3, [r7, #2]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d103      	bne.n	8009668 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009666:	e14e      	b.n	8009906 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b04      	cmp	r3, #4
 8009672:	d003      	beq.n	800967c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2205      	movs	r2, #5
 8009678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	887a      	ldrh	r2, [r7, #2]
 800968c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	887a      	ldrh	r2, [r7, #2]
 8009692:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	887a      	ldrh	r2, [r7, #2]
 800969e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	887a      	ldrh	r2, [r7, #2]
 80096a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096bc:	2b40      	cmp	r3, #64	; 0x40
 80096be:	d007      	beq.n	80096d0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096d8:	d178      	bne.n	80097cc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <HAL_SPI_TransmitReceive+0x10a>
 80096e2:	8b7b      	ldrh	r3, [r7, #26]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d166      	bne.n	80097b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ec:	881a      	ldrh	r2, [r3, #0]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f8:	1c9a      	adds	r2, r3, #2
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009702:	b29b      	uxth	r3, r3
 8009704:	3b01      	subs	r3, #1
 8009706:	b29a      	uxth	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800970c:	e053      	b.n	80097b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f003 0302 	and.w	r3, r3, #2
 8009718:	2b02      	cmp	r3, #2
 800971a:	d11b      	bne.n	8009754 <HAL_SPI_TransmitReceive+0x176>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009720:	b29b      	uxth	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	d016      	beq.n	8009754 <HAL_SPI_TransmitReceive+0x176>
 8009726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009728:	2b01      	cmp	r3, #1
 800972a:	d113      	bne.n	8009754 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009730:	881a      	ldrh	r2, [r3, #0]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973c:	1c9a      	adds	r2, r3, #2
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009746:	b29b      	uxth	r3, r3
 8009748:	3b01      	subs	r3, #1
 800974a:	b29a      	uxth	r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009750:	2300      	movs	r3, #0
 8009752:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b01      	cmp	r3, #1
 8009760:	d119      	bne.n	8009796 <HAL_SPI_TransmitReceive+0x1b8>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009766:	b29b      	uxth	r3, r3
 8009768:	2b00      	cmp	r3, #0
 800976a:	d014      	beq.n	8009796 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68da      	ldr	r2, [r3, #12]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009776:	b292      	uxth	r2, r2
 8009778:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977e:	1c9a      	adds	r2, r3, #2
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009788:	b29b      	uxth	r3, r3
 800978a:	3b01      	subs	r3, #1
 800978c:	b29a      	uxth	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009792:	2301      	movs	r3, #1
 8009794:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009796:	f7fb f9e9 	bl	8004b6c <HAL_GetTick>
 800979a:	4602      	mov	r2, r0
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d807      	bhi.n	80097b6 <HAL_SPI_TransmitReceive+0x1d8>
 80097a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ac:	d003      	beq.n	80097b6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80097b4:	e0a7      	b.n	8009906 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1a6      	bne.n	800970e <HAL_SPI_TransmitReceive+0x130>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1a1      	bne.n	800970e <HAL_SPI_TransmitReceive+0x130>
 80097ca:	e07c      	b.n	80098c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d002      	beq.n	80097da <HAL_SPI_TransmitReceive+0x1fc>
 80097d4:	8b7b      	ldrh	r3, [r7, #26]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d16b      	bne.n	80098b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	330c      	adds	r3, #12
 80097e4:	7812      	ldrb	r2, [r2, #0]
 80097e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ec:	1c5a      	adds	r2, r3, #1
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	3b01      	subs	r3, #1
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009800:	e057      	b.n	80098b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f003 0302 	and.w	r3, r3, #2
 800980c:	2b02      	cmp	r3, #2
 800980e:	d11c      	bne.n	800984a <HAL_SPI_TransmitReceive+0x26c>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009814:	b29b      	uxth	r3, r3
 8009816:	2b00      	cmp	r3, #0
 8009818:	d017      	beq.n	800984a <HAL_SPI_TransmitReceive+0x26c>
 800981a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981c:	2b01      	cmp	r3, #1
 800981e:	d114      	bne.n	800984a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	330c      	adds	r3, #12
 800982a:	7812      	ldrb	r2, [r2, #0]
 800982c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009832:	1c5a      	adds	r2, r3, #1
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800983c:	b29b      	uxth	r3, r3
 800983e:	3b01      	subs	r3, #1
 8009840:	b29a      	uxth	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009846:	2300      	movs	r3, #0
 8009848:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f003 0301 	and.w	r3, r3, #1
 8009854:	2b01      	cmp	r3, #1
 8009856:	d119      	bne.n	800988c <HAL_SPI_TransmitReceive+0x2ae>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800985c:	b29b      	uxth	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d014      	beq.n	800988c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68da      	ldr	r2, [r3, #12]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986c:	b2d2      	uxtb	r2, r2
 800986e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800987e:	b29b      	uxth	r3, r3
 8009880:	3b01      	subs	r3, #1
 8009882:	b29a      	uxth	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009888:	2301      	movs	r3, #1
 800988a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800988c:	f7fb f96e 	bl	8004b6c <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009898:	429a      	cmp	r2, r3
 800989a:	d803      	bhi.n	80098a4 <HAL_SPI_TransmitReceive+0x2c6>
 800989c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a2:	d102      	bne.n	80098aa <HAL_SPI_TransmitReceive+0x2cc>
 80098a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d103      	bne.n	80098b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80098b0:	e029      	b.n	8009906 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1a2      	bne.n	8009802 <HAL_SPI_TransmitReceive+0x224>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d19d      	bne.n	8009802 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 f8b2 	bl	8009a34 <SPI_EndRxTxTransaction>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d006      	beq.n	80098e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2220      	movs	r2, #32
 80098e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80098e2:	e010      	b.n	8009906 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10b      	bne.n	8009904 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098ec:	2300      	movs	r3, #0
 80098ee:	617b      	str	r3, [r7, #20]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	617b      	str	r3, [r7, #20]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	e000      	b.n	8009906 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009904:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009916:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800991a:	4618      	mov	r0, r3
 800991c:	3730      	adds	r7, #48	; 0x30
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
	...

08009924 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	4613      	mov	r3, r2
 8009932:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009934:	f7fb f91a 	bl	8004b6c <HAL_GetTick>
 8009938:	4602      	mov	r2, r0
 800993a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993c:	1a9b      	subs	r3, r3, r2
 800993e:	683a      	ldr	r2, [r7, #0]
 8009940:	4413      	add	r3, r2
 8009942:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009944:	f7fb f912 	bl	8004b6c <HAL_GetTick>
 8009948:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800994a:	4b39      	ldr	r3, [pc, #228]	; (8009a30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	015b      	lsls	r3, r3, #5
 8009950:	0d1b      	lsrs	r3, r3, #20
 8009952:	69fa      	ldr	r2, [r7, #28]
 8009954:	fb02 f303 	mul.w	r3, r2, r3
 8009958:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800995a:	e054      	b.n	8009a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009962:	d050      	beq.n	8009a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009964:	f7fb f902 	bl	8004b6c <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	69fa      	ldr	r2, [r7, #28]
 8009970:	429a      	cmp	r2, r3
 8009972:	d902      	bls.n	800997a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d13d      	bne.n	80099f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	685a      	ldr	r2, [r3, #4]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009988:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009992:	d111      	bne.n	80099b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800999c:	d004      	beq.n	80099a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099a6:	d107      	bne.n	80099b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c0:	d10f      	bne.n	80099e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099d0:	601a      	str	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80099f2:	2303      	movs	r3, #3
 80099f4:	e017      	b.n	8009a26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80099fc:	2300      	movs	r3, #0
 80099fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689a      	ldr	r2, [r3, #8]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	4013      	ands	r3, r2
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	bf0c      	ite	eq
 8009a16:	2301      	moveq	r3, #1
 8009a18:	2300      	movne	r3, #0
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d19b      	bne.n	800995c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3720      	adds	r7, #32
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	20000000 	.word	0x20000000

08009a34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b088      	sub	sp, #32
 8009a38:	af02      	add	r7, sp, #8
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a40:	4b1b      	ldr	r3, [pc, #108]	; (8009ab0 <SPI_EndRxTxTransaction+0x7c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a1b      	ldr	r2, [pc, #108]	; (8009ab4 <SPI_EndRxTxTransaction+0x80>)
 8009a46:	fba2 2303 	umull	r2, r3, r2, r3
 8009a4a:	0d5b      	lsrs	r3, r3, #21
 8009a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a50:	fb02 f303 	mul.w	r3, r2, r3
 8009a54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a5e:	d112      	bne.n	8009a86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2200      	movs	r2, #0
 8009a68:	2180      	movs	r1, #128	; 0x80
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f7ff ff5a 	bl	8009924 <SPI_WaitFlagStateUntilTimeout>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d016      	beq.n	8009aa4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a7a:	f043 0220 	orr.w	r2, r3, #32
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009a82:	2303      	movs	r3, #3
 8009a84:	e00f      	b.n	8009aa6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00a      	beq.n	8009aa2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a9c:	2b80      	cmp	r3, #128	; 0x80
 8009a9e:	d0f2      	beq.n	8009a86 <SPI_EndRxTxTransaction+0x52>
 8009aa0:	e000      	b.n	8009aa4 <SPI_EndRxTxTransaction+0x70>
        break;
 8009aa2:	bf00      	nop
  }

  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3718      	adds	r7, #24
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	20000000 	.word	0x20000000
 8009ab4:	165e9f81 	.word	0x165e9f81

08009ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e041      	b.n	8009b4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d106      	bne.n	8009ae4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f839 	bl	8009b56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3304      	adds	r3, #4
 8009af4:	4619      	mov	r1, r3
 8009af6:	4610      	mov	r0, r2
 8009af8:	f000 faea 	bl	800a0d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009b56:	b480      	push	{r7}
 8009b58:	b083      	sub	sp, #12
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009b5e:	bf00      	nop
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
	...

08009b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d001      	beq.n	8009b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e04e      	b.n	8009c22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2202      	movs	r2, #2
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68da      	ldr	r2, [r3, #12]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f042 0201 	orr.w	r2, r2, #1
 8009b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a23      	ldr	r2, [pc, #140]	; (8009c30 <HAL_TIM_Base_Start_IT+0xc4>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d022      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x80>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bae:	d01d      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x80>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a1f      	ldr	r2, [pc, #124]	; (8009c34 <HAL_TIM_Base_Start_IT+0xc8>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d018      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x80>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a1e      	ldr	r2, [pc, #120]	; (8009c38 <HAL_TIM_Base_Start_IT+0xcc>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d013      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x80>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a1c      	ldr	r2, [pc, #112]	; (8009c3c <HAL_TIM_Base_Start_IT+0xd0>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d00e      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x80>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a1b      	ldr	r2, [pc, #108]	; (8009c40 <HAL_TIM_Base_Start_IT+0xd4>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d009      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x80>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a19      	ldr	r2, [pc, #100]	; (8009c44 <HAL_TIM_Base_Start_IT+0xd8>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d004      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x80>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a18      	ldr	r2, [pc, #96]	; (8009c48 <HAL_TIM_Base_Start_IT+0xdc>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d111      	bne.n	8009c10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	f003 0307 	and.w	r3, r3, #7
 8009bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2b06      	cmp	r3, #6
 8009bfc:	d010      	beq.n	8009c20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f042 0201 	orr.w	r2, r2, #1
 8009c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c0e:	e007      	b.n	8009c20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f042 0201 	orr.w	r2, r2, #1
 8009c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3714      	adds	r7, #20
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	40010000 	.word	0x40010000
 8009c34:	40000400 	.word	0x40000400
 8009c38:	40000800 	.word	0x40000800
 8009c3c:	40000c00 	.word	0x40000c00
 8009c40:	40010400 	.word	0x40010400
 8009c44:	40014000 	.word	0x40014000
 8009c48:	40001800 	.word	0x40001800

08009c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d101      	bne.n	8009c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e041      	b.n	8009ce2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d106      	bne.n	8009c78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7f8 ffa6 	bl	8002bc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3304      	adds	r3, #4
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	f000 fa20 	bl	800a0d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b082      	sub	sp, #8
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d122      	bne.n	8009d46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	f003 0302 	and.w	r3, r3, #2
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d11b      	bne.n	8009d46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f06f 0202 	mvn.w	r2, #2
 8009d16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f9b1 	bl	800a094 <HAL_TIM_IC_CaptureCallback>
 8009d32:	e005      	b.n	8009d40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f9a3 	bl	800a080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f9b4 	bl	800a0a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	f003 0304 	and.w	r3, r3, #4
 8009d50:	2b04      	cmp	r3, #4
 8009d52:	d122      	bne.n	8009d9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	f003 0304 	and.w	r3, r3, #4
 8009d5e:	2b04      	cmp	r3, #4
 8009d60:	d11b      	bne.n	8009d9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f06f 0204 	mvn.w	r2, #4
 8009d6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 f987 	bl	800a094 <HAL_TIM_IC_CaptureCallback>
 8009d86:	e005      	b.n	8009d94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f979 	bl	800a080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f98a 	bl	800a0a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	f003 0308 	and.w	r3, r3, #8
 8009da4:	2b08      	cmp	r3, #8
 8009da6:	d122      	bne.n	8009dee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	f003 0308 	and.w	r3, r3, #8
 8009db2:	2b08      	cmp	r3, #8
 8009db4:	d11b      	bne.n	8009dee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f06f 0208 	mvn.w	r2, #8
 8009dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2204      	movs	r2, #4
 8009dc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	69db      	ldr	r3, [r3, #28]
 8009dcc:	f003 0303 	and.w	r3, r3, #3
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d003      	beq.n	8009ddc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f95d 	bl	800a094 <HAL_TIM_IC_CaptureCallback>
 8009dda:	e005      	b.n	8009de8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f94f 	bl	800a080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f960 	bl	800a0a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	f003 0310 	and.w	r3, r3, #16
 8009df8:	2b10      	cmp	r3, #16
 8009dfa:	d122      	bne.n	8009e42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	f003 0310 	and.w	r3, r3, #16
 8009e06:	2b10      	cmp	r3, #16
 8009e08:	d11b      	bne.n	8009e42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f06f 0210 	mvn.w	r2, #16
 8009e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2208      	movs	r2, #8
 8009e18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d003      	beq.n	8009e30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f933 	bl	800a094 <HAL_TIM_IC_CaptureCallback>
 8009e2e:	e005      	b.n	8009e3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f925 	bl	800a080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f936 	bl	800a0a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	f003 0301 	and.w	r3, r3, #1
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d10e      	bne.n	8009e6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f003 0301 	and.w	r3, r3, #1
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d107      	bne.n	8009e6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f06f 0201 	mvn.w	r2, #1
 8009e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7f8 fc63 	bl	8002734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	691b      	ldr	r3, [r3, #16]
 8009e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e78:	2b80      	cmp	r3, #128	; 0x80
 8009e7a:	d10e      	bne.n	8009e9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e86:	2b80      	cmp	r3, #128	; 0x80
 8009e88:	d107      	bne.n	8009e9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fbf1 	bl	800a67c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea4:	2b40      	cmp	r3, #64	; 0x40
 8009ea6:	d10e      	bne.n	8009ec6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb2:	2b40      	cmp	r3, #64	; 0x40
 8009eb4:	d107      	bne.n	8009ec6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f8fb 	bl	800a0bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	f003 0320 	and.w	r3, r3, #32
 8009ed0:	2b20      	cmp	r3, #32
 8009ed2:	d10e      	bne.n	8009ef2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f003 0320 	and.w	r3, r3, #32
 8009ede:	2b20      	cmp	r3, #32
 8009ee0:	d107      	bne.n	8009ef2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f06f 0220 	mvn.w	r2, #32
 8009eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fbbb 	bl	800a668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ef2:	bf00      	nop
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d101      	bne.n	8009f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f16:	2302      	movs	r3, #2
 8009f18:	e0ae      	b.n	800a078 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b0c      	cmp	r3, #12
 8009f26:	f200 809f 	bhi.w	800a068 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009f2a:	a201      	add	r2, pc, #4	; (adr r2, 8009f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f30:	08009f65 	.word	0x08009f65
 8009f34:	0800a069 	.word	0x0800a069
 8009f38:	0800a069 	.word	0x0800a069
 8009f3c:	0800a069 	.word	0x0800a069
 8009f40:	08009fa5 	.word	0x08009fa5
 8009f44:	0800a069 	.word	0x0800a069
 8009f48:	0800a069 	.word	0x0800a069
 8009f4c:	0800a069 	.word	0x0800a069
 8009f50:	08009fe7 	.word	0x08009fe7
 8009f54:	0800a069 	.word	0x0800a069
 8009f58:	0800a069 	.word	0x0800a069
 8009f5c:	0800a069 	.word	0x0800a069
 8009f60:	0800a027 	.word	0x0800a027
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68b9      	ldr	r1, [r7, #8]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f000 f950 	bl	800a210 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	699a      	ldr	r2, [r3, #24]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f042 0208 	orr.w	r2, r2, #8
 8009f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	699a      	ldr	r2, [r3, #24]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f022 0204 	bic.w	r2, r2, #4
 8009f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6999      	ldr	r1, [r3, #24]
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	691a      	ldr	r2, [r3, #16]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	619a      	str	r2, [r3, #24]
      break;
 8009fa2:	e064      	b.n	800a06e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68b9      	ldr	r1, [r7, #8]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 f9a0 	bl	800a2f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	699a      	ldr	r2, [r3, #24]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	699a      	ldr	r2, [r3, #24]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6999      	ldr	r1, [r3, #24]
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	021a      	lsls	r2, r3, #8
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	619a      	str	r2, [r3, #24]
      break;
 8009fe4:	e043      	b.n	800a06e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	68b9      	ldr	r1, [r7, #8]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 f9f5 	bl	800a3dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	69da      	ldr	r2, [r3, #28]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f042 0208 	orr.w	r2, r2, #8
 800a000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	69da      	ldr	r2, [r3, #28]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f022 0204 	bic.w	r2, r2, #4
 800a010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	69d9      	ldr	r1, [r3, #28]
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	691a      	ldr	r2, [r3, #16]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	430a      	orrs	r2, r1
 800a022:	61da      	str	r2, [r3, #28]
      break;
 800a024:	e023      	b.n	800a06e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68b9      	ldr	r1, [r7, #8]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 fa49 	bl	800a4c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	69da      	ldr	r2, [r3, #28]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	69da      	ldr	r2, [r3, #28]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	69d9      	ldr	r1, [r3, #28]
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	021a      	lsls	r2, r3, #8
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	430a      	orrs	r2, r1
 800a064:	61da      	str	r2, [r3, #28]
      break;
 800a066:	e002      	b.n	800a06e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	75fb      	strb	r3, [r7, #23]
      break;
 800a06c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a076:	7dfb      	ldrb	r3, [r7, #23]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3718      	adds	r7, #24
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a09c:	bf00      	nop
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a40      	ldr	r2, [pc, #256]	; (800a1e4 <TIM_Base_SetConfig+0x114>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d013      	beq.n	800a110 <TIM_Base_SetConfig+0x40>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0ee:	d00f      	beq.n	800a110 <TIM_Base_SetConfig+0x40>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a3d      	ldr	r2, [pc, #244]	; (800a1e8 <TIM_Base_SetConfig+0x118>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d00b      	beq.n	800a110 <TIM_Base_SetConfig+0x40>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a3c      	ldr	r2, [pc, #240]	; (800a1ec <TIM_Base_SetConfig+0x11c>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d007      	beq.n	800a110 <TIM_Base_SetConfig+0x40>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a3b      	ldr	r2, [pc, #236]	; (800a1f0 <TIM_Base_SetConfig+0x120>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d003      	beq.n	800a110 <TIM_Base_SetConfig+0x40>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a3a      	ldr	r2, [pc, #232]	; (800a1f4 <TIM_Base_SetConfig+0x124>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d108      	bne.n	800a122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	4313      	orrs	r3, r2
 800a120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a2f      	ldr	r2, [pc, #188]	; (800a1e4 <TIM_Base_SetConfig+0x114>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d02b      	beq.n	800a182 <TIM_Base_SetConfig+0xb2>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a130:	d027      	beq.n	800a182 <TIM_Base_SetConfig+0xb2>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a2c      	ldr	r2, [pc, #176]	; (800a1e8 <TIM_Base_SetConfig+0x118>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d023      	beq.n	800a182 <TIM_Base_SetConfig+0xb2>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a2b      	ldr	r2, [pc, #172]	; (800a1ec <TIM_Base_SetConfig+0x11c>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d01f      	beq.n	800a182 <TIM_Base_SetConfig+0xb2>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a2a      	ldr	r2, [pc, #168]	; (800a1f0 <TIM_Base_SetConfig+0x120>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d01b      	beq.n	800a182 <TIM_Base_SetConfig+0xb2>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a29      	ldr	r2, [pc, #164]	; (800a1f4 <TIM_Base_SetConfig+0x124>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d017      	beq.n	800a182 <TIM_Base_SetConfig+0xb2>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a28      	ldr	r2, [pc, #160]	; (800a1f8 <TIM_Base_SetConfig+0x128>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d013      	beq.n	800a182 <TIM_Base_SetConfig+0xb2>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a27      	ldr	r2, [pc, #156]	; (800a1fc <TIM_Base_SetConfig+0x12c>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d00f      	beq.n	800a182 <TIM_Base_SetConfig+0xb2>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a26      	ldr	r2, [pc, #152]	; (800a200 <TIM_Base_SetConfig+0x130>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d00b      	beq.n	800a182 <TIM_Base_SetConfig+0xb2>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a25      	ldr	r2, [pc, #148]	; (800a204 <TIM_Base_SetConfig+0x134>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d007      	beq.n	800a182 <TIM_Base_SetConfig+0xb2>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a24      	ldr	r2, [pc, #144]	; (800a208 <TIM_Base_SetConfig+0x138>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d003      	beq.n	800a182 <TIM_Base_SetConfig+0xb2>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4a23      	ldr	r2, [pc, #140]	; (800a20c <TIM_Base_SetConfig+0x13c>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d108      	bne.n	800a194 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	4313      	orrs	r3, r2
 800a192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	689a      	ldr	r2, [r3, #8]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	4a0a      	ldr	r2, [pc, #40]	; (800a1e4 <TIM_Base_SetConfig+0x114>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d003      	beq.n	800a1c8 <TIM_Base_SetConfig+0xf8>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a0c      	ldr	r2, [pc, #48]	; (800a1f4 <TIM_Base_SetConfig+0x124>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d103      	bne.n	800a1d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	691a      	ldr	r2, [r3, #16]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	615a      	str	r2, [r3, #20]
}
 800a1d6:	bf00      	nop
 800a1d8:	3714      	adds	r7, #20
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	40010000 	.word	0x40010000
 800a1e8:	40000400 	.word	0x40000400
 800a1ec:	40000800 	.word	0x40000800
 800a1f0:	40000c00 	.word	0x40000c00
 800a1f4:	40010400 	.word	0x40010400
 800a1f8:	40014000 	.word	0x40014000
 800a1fc:	40014400 	.word	0x40014400
 800a200:	40014800 	.word	0x40014800
 800a204:	40001800 	.word	0x40001800
 800a208:	40001c00 	.word	0x40001c00
 800a20c:	40002000 	.word	0x40002000

0800a210 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a210:	b480      	push	{r7}
 800a212:	b087      	sub	sp, #28
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	f023 0201 	bic.w	r2, r3, #1
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a23e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f023 0303 	bic.w	r3, r3, #3
 800a246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	4313      	orrs	r3, r2
 800a250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	f023 0302 	bic.w	r3, r3, #2
 800a258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	697a      	ldr	r2, [r7, #20]
 800a260:	4313      	orrs	r3, r2
 800a262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a20      	ldr	r2, [pc, #128]	; (800a2e8 <TIM_OC1_SetConfig+0xd8>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d003      	beq.n	800a274 <TIM_OC1_SetConfig+0x64>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a1f      	ldr	r2, [pc, #124]	; (800a2ec <TIM_OC1_SetConfig+0xdc>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d10c      	bne.n	800a28e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	f023 0308 	bic.w	r3, r3, #8
 800a27a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	697a      	ldr	r2, [r7, #20]
 800a282:	4313      	orrs	r3, r2
 800a284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	f023 0304 	bic.w	r3, r3, #4
 800a28c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a15      	ldr	r2, [pc, #84]	; (800a2e8 <TIM_OC1_SetConfig+0xd8>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d003      	beq.n	800a29e <TIM_OC1_SetConfig+0x8e>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a14      	ldr	r2, [pc, #80]	; (800a2ec <TIM_OC1_SetConfig+0xdc>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d111      	bne.n	800a2c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	685a      	ldr	r2, [r3, #4]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	621a      	str	r2, [r3, #32]
}
 800a2dc:	bf00      	nop
 800a2de:	371c      	adds	r7, #28
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	40010000 	.word	0x40010000
 800a2ec:	40010400 	.word	0x40010400

0800a2f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	f023 0210 	bic.w	r2, r3, #16
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a31e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	4313      	orrs	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	f023 0320 	bic.w	r3, r3, #32
 800a33a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	011b      	lsls	r3, r3, #4
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	4313      	orrs	r3, r2
 800a346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a22      	ldr	r2, [pc, #136]	; (800a3d4 <TIM_OC2_SetConfig+0xe4>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d003      	beq.n	800a358 <TIM_OC2_SetConfig+0x68>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a21      	ldr	r2, [pc, #132]	; (800a3d8 <TIM_OC2_SetConfig+0xe8>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d10d      	bne.n	800a374 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a35e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	011b      	lsls	r3, r3, #4
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	4313      	orrs	r3, r2
 800a36a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a372:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a17      	ldr	r2, [pc, #92]	; (800a3d4 <TIM_OC2_SetConfig+0xe4>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d003      	beq.n	800a384 <TIM_OC2_SetConfig+0x94>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a16      	ldr	r2, [pc, #88]	; (800a3d8 <TIM_OC2_SetConfig+0xe8>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d113      	bne.n	800a3ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a38a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	693a      	ldr	r2, [r7, #16]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	68fa      	ldr	r2, [r7, #12]
 800a3b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	621a      	str	r2, [r3, #32]
}
 800a3c6:	bf00      	nop
 800a3c8:	371c      	adds	r7, #28
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	40010000 	.word	0x40010000
 800a3d8:	40010400 	.word	0x40010400

0800a3dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a1b      	ldr	r3, [r3, #32]
 800a3ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	69db      	ldr	r3, [r3, #28]
 800a402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a40a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f023 0303 	bic.w	r3, r3, #3
 800a412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	021b      	lsls	r3, r3, #8
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	4313      	orrs	r3, r2
 800a430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a21      	ldr	r2, [pc, #132]	; (800a4bc <TIM_OC3_SetConfig+0xe0>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d003      	beq.n	800a442 <TIM_OC3_SetConfig+0x66>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a20      	ldr	r2, [pc, #128]	; (800a4c0 <TIM_OC3_SetConfig+0xe4>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d10d      	bne.n	800a45e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	021b      	lsls	r3, r3, #8
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	4313      	orrs	r3, r2
 800a454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a45c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a16      	ldr	r2, [pc, #88]	; (800a4bc <TIM_OC3_SetConfig+0xe0>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d003      	beq.n	800a46e <TIM_OC3_SetConfig+0x92>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4a15      	ldr	r2, [pc, #84]	; (800a4c0 <TIM_OC3_SetConfig+0xe4>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d113      	bne.n	800a496 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a47c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	011b      	lsls	r3, r3, #4
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	4313      	orrs	r3, r2
 800a488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	011b      	lsls	r3, r3, #4
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	4313      	orrs	r3, r2
 800a494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	685a      	ldr	r2, [r3, #4]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	697a      	ldr	r2, [r7, #20]
 800a4ae:	621a      	str	r2, [r3, #32]
}
 800a4b0:	bf00      	nop
 800a4b2:	371c      	adds	r7, #28
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr
 800a4bc:	40010000 	.word	0x40010000
 800a4c0:	40010400 	.word	0x40010400

0800a4c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b087      	sub	sp, #28
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a1b      	ldr	r3, [r3, #32]
 800a4de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	021b      	lsls	r3, r3, #8
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	4313      	orrs	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a50e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	031b      	lsls	r3, r3, #12
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	4313      	orrs	r3, r2
 800a51a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a12      	ldr	r2, [pc, #72]	; (800a568 <TIM_OC4_SetConfig+0xa4>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d003      	beq.n	800a52c <TIM_OC4_SetConfig+0x68>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a11      	ldr	r2, [pc, #68]	; (800a56c <TIM_OC4_SetConfig+0xa8>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d109      	bne.n	800a540 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a532:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	019b      	lsls	r3, r3, #6
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	685a      	ldr	r2, [r3, #4]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	621a      	str	r2, [r3, #32]
}
 800a55a:	bf00      	nop
 800a55c:	371c      	adds	r7, #28
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	40010000 	.word	0x40010000
 800a56c:	40010400 	.word	0x40010400

0800a570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a580:	2b01      	cmp	r3, #1
 800a582:	d101      	bne.n	800a588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a584:	2302      	movs	r3, #2
 800a586:	e05a      	b.n	800a63e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2202      	movs	r2, #2
 800a594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a21      	ldr	r2, [pc, #132]	; (800a64c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d022      	beq.n	800a612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5d4:	d01d      	beq.n	800a612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a1d      	ldr	r2, [pc, #116]	; (800a650 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d018      	beq.n	800a612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a1b      	ldr	r2, [pc, #108]	; (800a654 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d013      	beq.n	800a612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a1a      	ldr	r2, [pc, #104]	; (800a658 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d00e      	beq.n	800a612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a18      	ldr	r2, [pc, #96]	; (800a65c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d009      	beq.n	800a612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a17      	ldr	r2, [pc, #92]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d004      	beq.n	800a612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a15      	ldr	r2, [pc, #84]	; (800a664 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d10c      	bne.n	800a62c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a618:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	4313      	orrs	r3, r2
 800a622:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3714      	adds	r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	40010000 	.word	0x40010000
 800a650:	40000400 	.word	0x40000400
 800a654:	40000800 	.word	0x40000800
 800a658:	40000c00 	.word	0x40000c00
 800a65c:	40010400 	.word	0x40010400
 800a660:	40014000 	.word	0x40014000
 800a664:	40001800 	.word	0x40001800

0800a668 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e03f      	b.n	800a722 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d106      	bne.n	800a6bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7f8 fadc 	bl	8002c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2224      	movs	r2, #36	; 0x24
 800a6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68da      	ldr	r2, [r3, #12]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f9cb 	bl	800aa70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	691a      	ldr	r2, [r3, #16]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	695a      	ldr	r2, [r3, #20]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	68da      	ldr	r2, [r3, #12]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2220      	movs	r2, #32
 800a714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2220      	movs	r2, #32
 800a71c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b08a      	sub	sp, #40	; 0x28
 800a72e:	af02      	add	r7, sp, #8
 800a730:	60f8      	str	r0, [r7, #12]
 800a732:	60b9      	str	r1, [r7, #8]
 800a734:	603b      	str	r3, [r7, #0]
 800a736:	4613      	mov	r3, r2
 800a738:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b20      	cmp	r3, #32
 800a748:	d17c      	bne.n	800a844 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d002      	beq.n	800a756 <HAL_UART_Transmit+0x2c>
 800a750:	88fb      	ldrh	r3, [r7, #6]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e075      	b.n	800a846 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a760:	2b01      	cmp	r3, #1
 800a762:	d101      	bne.n	800a768 <HAL_UART_Transmit+0x3e>
 800a764:	2302      	movs	r3, #2
 800a766:	e06e      	b.n	800a846 <HAL_UART_Transmit+0x11c>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2221      	movs	r2, #33	; 0x21
 800a77a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a77e:	f7fa f9f5 	bl	8004b6c <HAL_GetTick>
 800a782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	88fa      	ldrh	r2, [r7, #6]
 800a788:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	88fa      	ldrh	r2, [r7, #6]
 800a78e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a798:	d108      	bne.n	800a7ac <HAL_UART_Transmit+0x82>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d104      	bne.n	800a7ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	61bb      	str	r3, [r7, #24]
 800a7aa:	e003      	b.n	800a7b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a7bc:	e02a      	b.n	800a814 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2180      	movs	r1, #128	; 0x80
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f000 f8e2 	bl	800a992 <UART_WaitOnFlagUntilTimeout>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	e036      	b.n	800a846 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10b      	bne.n	800a7f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	3302      	adds	r3, #2
 800a7f2:	61bb      	str	r3, [r7, #24]
 800a7f4:	e007      	b.n	800a806 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	781a      	ldrb	r2, [r3, #0]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	3301      	adds	r3, #1
 800a804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	3b01      	subs	r3, #1
 800a80e:	b29a      	uxth	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a818:	b29b      	uxth	r3, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1cf      	bne.n	800a7be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	2200      	movs	r2, #0
 800a826:	2140      	movs	r1, #64	; 0x40
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 f8b2 	bl	800a992 <UART_WaitOnFlagUntilTimeout>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d001      	beq.n	800a838 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e006      	b.n	800a846 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2220      	movs	r2, #32
 800a83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a840:	2300      	movs	r3, #0
 800a842:	e000      	b.n	800a846 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a844:	2302      	movs	r3, #2
  }
}
 800a846:	4618      	mov	r0, r3
 800a848:	3720      	adds	r7, #32
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b08a      	sub	sp, #40	; 0x28
 800a852:	af02      	add	r7, sp, #8
 800a854:	60f8      	str	r0, [r7, #12]
 800a856:	60b9      	str	r1, [r7, #8]
 800a858:	603b      	str	r3, [r7, #0]
 800a85a:	4613      	mov	r3, r2
 800a85c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a85e:	2300      	movs	r3, #0
 800a860:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b20      	cmp	r3, #32
 800a86c:	f040 808c 	bne.w	800a988 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d002      	beq.n	800a87c <HAL_UART_Receive+0x2e>
 800a876:	88fb      	ldrh	r3, [r7, #6]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	e084      	b.n	800a98a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a886:	2b01      	cmp	r3, #1
 800a888:	d101      	bne.n	800a88e <HAL_UART_Receive+0x40>
 800a88a:	2302      	movs	r3, #2
 800a88c:	e07d      	b.n	800a98a <HAL_UART_Receive+0x13c>
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2201      	movs	r2, #1
 800a892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2222      	movs	r2, #34	; 0x22
 800a8a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8aa:	f7fa f95f 	bl	8004b6c <HAL_GetTick>
 800a8ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	88fa      	ldrh	r2, [r7, #6]
 800a8b4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	88fa      	ldrh	r2, [r7, #6]
 800a8ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8c4:	d108      	bne.n	800a8d8 <HAL_UART_Receive+0x8a>
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d104      	bne.n	800a8d8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	61bb      	str	r3, [r7, #24]
 800a8d6:	e003      	b.n	800a8e0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a8e8:	e043      	b.n	800a972 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	2120      	movs	r1, #32
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f000 f84c 	bl	800a992 <UART_WaitOnFlagUntilTimeout>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e042      	b.n	800a98a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10c      	bne.n	800a924 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	b29b      	uxth	r3, r3
 800a912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a916:	b29a      	uxth	r2, r3
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	3302      	adds	r3, #2
 800a920:	61bb      	str	r3, [r7, #24]
 800a922:	e01f      	b.n	800a964 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a92c:	d007      	beq.n	800a93e <HAL_UART_Receive+0xf0>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10a      	bne.n	800a94c <HAL_UART_Receive+0xfe>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d106      	bne.n	800a94c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	b2da      	uxtb	r2, r3
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	701a      	strb	r2, [r3, #0]
 800a94a:	e008      	b.n	800a95e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	3301      	adds	r3, #1
 800a962:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a968:	b29b      	uxth	r3, r3
 800a96a:	3b01      	subs	r3, #1
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a976:	b29b      	uxth	r3, r3
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1b6      	bne.n	800a8ea <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2220      	movs	r2, #32
 800a980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	e000      	b.n	800a98a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a988:	2302      	movs	r3, #2
  }
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3720      	adds	r7, #32
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b090      	sub	sp, #64	; 0x40
 800a996:	af00      	add	r7, sp, #0
 800a998:	60f8      	str	r0, [r7, #12]
 800a99a:	60b9      	str	r1, [r7, #8]
 800a99c:	603b      	str	r3, [r7, #0]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9a2:	e050      	b.n	800aa46 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9aa:	d04c      	beq.n	800aa46 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a9ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d007      	beq.n	800a9c2 <UART_WaitOnFlagUntilTimeout+0x30>
 800a9b2:	f7fa f8db 	bl	8004b6c <HAL_GetTick>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	1ad3      	subs	r3, r2, r3
 800a9bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d241      	bcs.n	800aa46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	330c      	adds	r3, #12
 800a9c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9cc:	e853 3f00 	ldrex	r3, [r3]
 800a9d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	330c      	adds	r3, #12
 800a9e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9e2:	637a      	str	r2, [r7, #52]	; 0x34
 800a9e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9ea:	e841 2300 	strex	r3, r2, [r1]
 800a9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1e5      	bne.n	800a9c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3314      	adds	r3, #20
 800a9fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	e853 3f00 	ldrex	r3, [r3]
 800aa04:	613b      	str	r3, [r7, #16]
   return(result);
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	f023 0301 	bic.w	r3, r3, #1
 800aa0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3314      	adds	r3, #20
 800aa14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa16:	623a      	str	r2, [r7, #32]
 800aa18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1a:	69f9      	ldr	r1, [r7, #28]
 800aa1c:	6a3a      	ldr	r2, [r7, #32]
 800aa1e:	e841 2300 	strex	r3, r2, [r1]
 800aa22:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1e5      	bne.n	800a9f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2220      	movs	r2, #32
 800aa36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800aa42:	2303      	movs	r3, #3
 800aa44:	e00f      	b.n	800aa66 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	4013      	ands	r3, r2
 800aa50:	68ba      	ldr	r2, [r7, #8]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	bf0c      	ite	eq
 800aa56:	2301      	moveq	r3, #1
 800aa58:	2300      	movne	r3, #0
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	79fb      	ldrb	r3, [r7, #7]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d09f      	beq.n	800a9a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3740      	adds	r7, #64	; 0x40
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
	...

0800aa70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa74:	b09f      	sub	sp, #124	; 0x7c
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	691b      	ldr	r3, [r3, #16]
 800aa80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aa84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa86:	68d9      	ldr	r1, [r3, #12]
 800aa88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	ea40 0301 	orr.w	r3, r0, r1
 800aa90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aa92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa94:	689a      	ldr	r2, [r3, #8]
 800aa96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	431a      	orrs	r2, r3
 800aa9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	431a      	orrs	r2, r3
 800aaa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaa4:	69db      	ldr	r3, [r3, #28]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800aaaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aab4:	f021 010c 	bic.w	r1, r1, #12
 800aab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aabe:	430b      	orrs	r3, r1
 800aac0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aacc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aace:	6999      	ldr	r1, [r3, #24]
 800aad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	ea40 0301 	orr.w	r3, r0, r1
 800aad8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	4bc5      	ldr	r3, [pc, #788]	; (800adf4 <UART_SetConfig+0x384>)
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d004      	beq.n	800aaee <UART_SetConfig+0x7e>
 800aae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	4bc3      	ldr	r3, [pc, #780]	; (800adf8 <UART_SetConfig+0x388>)
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d103      	bne.n	800aaf6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aaee:	f7fd fd65 	bl	80085bc <HAL_RCC_GetPCLK2Freq>
 800aaf2:	6778      	str	r0, [r7, #116]	; 0x74
 800aaf4:	e002      	b.n	800aafc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aaf6:	f7fd fd4d 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800aafa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aafc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aafe:	69db      	ldr	r3, [r3, #28]
 800ab00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab04:	f040 80b6 	bne.w	800ac74 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab0a:	461c      	mov	r4, r3
 800ab0c:	f04f 0500 	mov.w	r5, #0
 800ab10:	4622      	mov	r2, r4
 800ab12:	462b      	mov	r3, r5
 800ab14:	1891      	adds	r1, r2, r2
 800ab16:	6439      	str	r1, [r7, #64]	; 0x40
 800ab18:	415b      	adcs	r3, r3
 800ab1a:	647b      	str	r3, [r7, #68]	; 0x44
 800ab1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab20:	1912      	adds	r2, r2, r4
 800ab22:	eb45 0303 	adc.w	r3, r5, r3
 800ab26:	f04f 0000 	mov.w	r0, #0
 800ab2a:	f04f 0100 	mov.w	r1, #0
 800ab2e:	00d9      	lsls	r1, r3, #3
 800ab30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab34:	00d0      	lsls	r0, r2, #3
 800ab36:	4602      	mov	r2, r0
 800ab38:	460b      	mov	r3, r1
 800ab3a:	1911      	adds	r1, r2, r4
 800ab3c:	6639      	str	r1, [r7, #96]	; 0x60
 800ab3e:	416b      	adcs	r3, r5
 800ab40:	667b      	str	r3, [r7, #100]	; 0x64
 800ab42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	461a      	mov	r2, r3
 800ab48:	f04f 0300 	mov.w	r3, #0
 800ab4c:	1891      	adds	r1, r2, r2
 800ab4e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ab50:	415b      	adcs	r3, r3
 800ab52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ab58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ab5c:	f7f6 f8a4 	bl	8000ca8 <__aeabi_uldivmod>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	4ba5      	ldr	r3, [pc, #660]	; (800adfc <UART_SetConfig+0x38c>)
 800ab66:	fba3 2302 	umull	r2, r3, r3, r2
 800ab6a:	095b      	lsrs	r3, r3, #5
 800ab6c:	011e      	lsls	r6, r3, #4
 800ab6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab70:	461c      	mov	r4, r3
 800ab72:	f04f 0500 	mov.w	r5, #0
 800ab76:	4622      	mov	r2, r4
 800ab78:	462b      	mov	r3, r5
 800ab7a:	1891      	adds	r1, r2, r2
 800ab7c:	6339      	str	r1, [r7, #48]	; 0x30
 800ab7e:	415b      	adcs	r3, r3
 800ab80:	637b      	str	r3, [r7, #52]	; 0x34
 800ab82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ab86:	1912      	adds	r2, r2, r4
 800ab88:	eb45 0303 	adc.w	r3, r5, r3
 800ab8c:	f04f 0000 	mov.w	r0, #0
 800ab90:	f04f 0100 	mov.w	r1, #0
 800ab94:	00d9      	lsls	r1, r3, #3
 800ab96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab9a:	00d0      	lsls	r0, r2, #3
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	1911      	adds	r1, r2, r4
 800aba2:	65b9      	str	r1, [r7, #88]	; 0x58
 800aba4:	416b      	adcs	r3, r5
 800aba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	461a      	mov	r2, r3
 800abae:	f04f 0300 	mov.w	r3, #0
 800abb2:	1891      	adds	r1, r2, r2
 800abb4:	62b9      	str	r1, [r7, #40]	; 0x28
 800abb6:	415b      	adcs	r3, r3
 800abb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800abbe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800abc2:	f7f6 f871 	bl	8000ca8 <__aeabi_uldivmod>
 800abc6:	4602      	mov	r2, r0
 800abc8:	460b      	mov	r3, r1
 800abca:	4b8c      	ldr	r3, [pc, #560]	; (800adfc <UART_SetConfig+0x38c>)
 800abcc:	fba3 1302 	umull	r1, r3, r3, r2
 800abd0:	095b      	lsrs	r3, r3, #5
 800abd2:	2164      	movs	r1, #100	; 0x64
 800abd4:	fb01 f303 	mul.w	r3, r1, r3
 800abd8:	1ad3      	subs	r3, r2, r3
 800abda:	00db      	lsls	r3, r3, #3
 800abdc:	3332      	adds	r3, #50	; 0x32
 800abde:	4a87      	ldr	r2, [pc, #540]	; (800adfc <UART_SetConfig+0x38c>)
 800abe0:	fba2 2303 	umull	r2, r3, r2, r3
 800abe4:	095b      	lsrs	r3, r3, #5
 800abe6:	005b      	lsls	r3, r3, #1
 800abe8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800abec:	441e      	add	r6, r3
 800abee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abf0:	4618      	mov	r0, r3
 800abf2:	f04f 0100 	mov.w	r1, #0
 800abf6:	4602      	mov	r2, r0
 800abf8:	460b      	mov	r3, r1
 800abfa:	1894      	adds	r4, r2, r2
 800abfc:	623c      	str	r4, [r7, #32]
 800abfe:	415b      	adcs	r3, r3
 800ac00:	627b      	str	r3, [r7, #36]	; 0x24
 800ac02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ac06:	1812      	adds	r2, r2, r0
 800ac08:	eb41 0303 	adc.w	r3, r1, r3
 800ac0c:	f04f 0400 	mov.w	r4, #0
 800ac10:	f04f 0500 	mov.w	r5, #0
 800ac14:	00dd      	lsls	r5, r3, #3
 800ac16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ac1a:	00d4      	lsls	r4, r2, #3
 800ac1c:	4622      	mov	r2, r4
 800ac1e:	462b      	mov	r3, r5
 800ac20:	1814      	adds	r4, r2, r0
 800ac22:	653c      	str	r4, [r7, #80]	; 0x50
 800ac24:	414b      	adcs	r3, r1
 800ac26:	657b      	str	r3, [r7, #84]	; 0x54
 800ac28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	f04f 0300 	mov.w	r3, #0
 800ac32:	1891      	adds	r1, r2, r2
 800ac34:	61b9      	str	r1, [r7, #24]
 800ac36:	415b      	adcs	r3, r3
 800ac38:	61fb      	str	r3, [r7, #28]
 800ac3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ac42:	f7f6 f831 	bl	8000ca8 <__aeabi_uldivmod>
 800ac46:	4602      	mov	r2, r0
 800ac48:	460b      	mov	r3, r1
 800ac4a:	4b6c      	ldr	r3, [pc, #432]	; (800adfc <UART_SetConfig+0x38c>)
 800ac4c:	fba3 1302 	umull	r1, r3, r3, r2
 800ac50:	095b      	lsrs	r3, r3, #5
 800ac52:	2164      	movs	r1, #100	; 0x64
 800ac54:	fb01 f303 	mul.w	r3, r1, r3
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	00db      	lsls	r3, r3, #3
 800ac5c:	3332      	adds	r3, #50	; 0x32
 800ac5e:	4a67      	ldr	r2, [pc, #412]	; (800adfc <UART_SetConfig+0x38c>)
 800ac60:	fba2 2303 	umull	r2, r3, r2, r3
 800ac64:	095b      	lsrs	r3, r3, #5
 800ac66:	f003 0207 	and.w	r2, r3, #7
 800ac6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4432      	add	r2, r6
 800ac70:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ac72:	e0b9      	b.n	800ade8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac76:	461c      	mov	r4, r3
 800ac78:	f04f 0500 	mov.w	r5, #0
 800ac7c:	4622      	mov	r2, r4
 800ac7e:	462b      	mov	r3, r5
 800ac80:	1891      	adds	r1, r2, r2
 800ac82:	6139      	str	r1, [r7, #16]
 800ac84:	415b      	adcs	r3, r3
 800ac86:	617b      	str	r3, [r7, #20]
 800ac88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ac8c:	1912      	adds	r2, r2, r4
 800ac8e:	eb45 0303 	adc.w	r3, r5, r3
 800ac92:	f04f 0000 	mov.w	r0, #0
 800ac96:	f04f 0100 	mov.w	r1, #0
 800ac9a:	00d9      	lsls	r1, r3, #3
 800ac9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aca0:	00d0      	lsls	r0, r2, #3
 800aca2:	4602      	mov	r2, r0
 800aca4:	460b      	mov	r3, r1
 800aca6:	eb12 0804 	adds.w	r8, r2, r4
 800acaa:	eb43 0905 	adc.w	r9, r3, r5
 800acae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f04f 0100 	mov.w	r1, #0
 800acb8:	f04f 0200 	mov.w	r2, #0
 800acbc:	f04f 0300 	mov.w	r3, #0
 800acc0:	008b      	lsls	r3, r1, #2
 800acc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800acc6:	0082      	lsls	r2, r0, #2
 800acc8:	4640      	mov	r0, r8
 800acca:	4649      	mov	r1, r9
 800accc:	f7f5 ffec 	bl	8000ca8 <__aeabi_uldivmod>
 800acd0:	4602      	mov	r2, r0
 800acd2:	460b      	mov	r3, r1
 800acd4:	4b49      	ldr	r3, [pc, #292]	; (800adfc <UART_SetConfig+0x38c>)
 800acd6:	fba3 2302 	umull	r2, r3, r3, r2
 800acda:	095b      	lsrs	r3, r3, #5
 800acdc:	011e      	lsls	r6, r3, #4
 800acde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ace0:	4618      	mov	r0, r3
 800ace2:	f04f 0100 	mov.w	r1, #0
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	1894      	adds	r4, r2, r2
 800acec:	60bc      	str	r4, [r7, #8]
 800acee:	415b      	adcs	r3, r3
 800acf0:	60fb      	str	r3, [r7, #12]
 800acf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800acf6:	1812      	adds	r2, r2, r0
 800acf8:	eb41 0303 	adc.w	r3, r1, r3
 800acfc:	f04f 0400 	mov.w	r4, #0
 800ad00:	f04f 0500 	mov.w	r5, #0
 800ad04:	00dd      	lsls	r5, r3, #3
 800ad06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ad0a:	00d4      	lsls	r4, r2, #3
 800ad0c:	4622      	mov	r2, r4
 800ad0e:	462b      	mov	r3, r5
 800ad10:	1814      	adds	r4, r2, r0
 800ad12:	64bc      	str	r4, [r7, #72]	; 0x48
 800ad14:	414b      	adcs	r3, r1
 800ad16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f04f 0100 	mov.w	r1, #0
 800ad22:	f04f 0200 	mov.w	r2, #0
 800ad26:	f04f 0300 	mov.w	r3, #0
 800ad2a:	008b      	lsls	r3, r1, #2
 800ad2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ad30:	0082      	lsls	r2, r0, #2
 800ad32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ad36:	f7f5 ffb7 	bl	8000ca8 <__aeabi_uldivmod>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	4b2f      	ldr	r3, [pc, #188]	; (800adfc <UART_SetConfig+0x38c>)
 800ad40:	fba3 1302 	umull	r1, r3, r3, r2
 800ad44:	095b      	lsrs	r3, r3, #5
 800ad46:	2164      	movs	r1, #100	; 0x64
 800ad48:	fb01 f303 	mul.w	r3, r1, r3
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	011b      	lsls	r3, r3, #4
 800ad50:	3332      	adds	r3, #50	; 0x32
 800ad52:	4a2a      	ldr	r2, [pc, #168]	; (800adfc <UART_SetConfig+0x38c>)
 800ad54:	fba2 2303 	umull	r2, r3, r2, r3
 800ad58:	095b      	lsrs	r3, r3, #5
 800ad5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad5e:	441e      	add	r6, r3
 800ad60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad62:	4618      	mov	r0, r3
 800ad64:	f04f 0100 	mov.w	r1, #0
 800ad68:	4602      	mov	r2, r0
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	1894      	adds	r4, r2, r2
 800ad6e:	603c      	str	r4, [r7, #0]
 800ad70:	415b      	adcs	r3, r3
 800ad72:	607b      	str	r3, [r7, #4]
 800ad74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad78:	1812      	adds	r2, r2, r0
 800ad7a:	eb41 0303 	adc.w	r3, r1, r3
 800ad7e:	f04f 0400 	mov.w	r4, #0
 800ad82:	f04f 0500 	mov.w	r5, #0
 800ad86:	00dd      	lsls	r5, r3, #3
 800ad88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ad8c:	00d4      	lsls	r4, r2, #3
 800ad8e:	4622      	mov	r2, r4
 800ad90:	462b      	mov	r3, r5
 800ad92:	eb12 0a00 	adds.w	sl, r2, r0
 800ad96:	eb43 0b01 	adc.w	fp, r3, r1
 800ad9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f04f 0100 	mov.w	r1, #0
 800ada4:	f04f 0200 	mov.w	r2, #0
 800ada8:	f04f 0300 	mov.w	r3, #0
 800adac:	008b      	lsls	r3, r1, #2
 800adae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800adb2:	0082      	lsls	r2, r0, #2
 800adb4:	4650      	mov	r0, sl
 800adb6:	4659      	mov	r1, fp
 800adb8:	f7f5 ff76 	bl	8000ca8 <__aeabi_uldivmod>
 800adbc:	4602      	mov	r2, r0
 800adbe:	460b      	mov	r3, r1
 800adc0:	4b0e      	ldr	r3, [pc, #56]	; (800adfc <UART_SetConfig+0x38c>)
 800adc2:	fba3 1302 	umull	r1, r3, r3, r2
 800adc6:	095b      	lsrs	r3, r3, #5
 800adc8:	2164      	movs	r1, #100	; 0x64
 800adca:	fb01 f303 	mul.w	r3, r1, r3
 800adce:	1ad3      	subs	r3, r2, r3
 800add0:	011b      	lsls	r3, r3, #4
 800add2:	3332      	adds	r3, #50	; 0x32
 800add4:	4a09      	ldr	r2, [pc, #36]	; (800adfc <UART_SetConfig+0x38c>)
 800add6:	fba2 2303 	umull	r2, r3, r2, r3
 800adda:	095b      	lsrs	r3, r3, #5
 800addc:	f003 020f 	and.w	r2, r3, #15
 800ade0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4432      	add	r2, r6
 800ade6:	609a      	str	r2, [r3, #8]
}
 800ade8:	bf00      	nop
 800adea:	377c      	adds	r7, #124	; 0x7c
 800adec:	46bd      	mov	sp, r7
 800adee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf2:	bf00      	nop
 800adf4:	40011000 	.word	0x40011000
 800adf8:	40011400 	.word	0x40011400
 800adfc:	51eb851f 	.word	0x51eb851f

0800ae00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae00:	b084      	sub	sp, #16
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b084      	sub	sp, #16
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	f107 001c 	add.w	r0, r7, #28
 800ae0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d122      	bne.n	800ae5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ae2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ae40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d105      	bne.n	800ae52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f001 fb1c 	bl	800c490 <USB_CoreReset>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	73fb      	strb	r3, [r7, #15]
 800ae5c:	e01a      	b.n	800ae94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f001 fb10 	bl	800c490 <USB_CoreReset>
 800ae70:	4603      	mov	r3, r0
 800ae72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ae74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d106      	bne.n	800ae88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	639a      	str	r2, [r3, #56]	; 0x38
 800ae86:	e005      	b.n	800ae94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ae94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d10b      	bne.n	800aeb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f043 0206 	orr.w	r2, r3, #6
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	f043 0220 	orr.w	r2, r3, #32
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aebe:	b004      	add	sp, #16
 800aec0:	4770      	bx	lr
	...

0800aec4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b087      	sub	sp, #28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	4613      	mov	r3, r2
 800aed0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800aed2:	79fb      	ldrb	r3, [r7, #7]
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	d165      	bne.n	800afa4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	4a41      	ldr	r2, [pc, #260]	; (800afe0 <USB_SetTurnaroundTime+0x11c>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d906      	bls.n	800aeee <USB_SetTurnaroundTime+0x2a>
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	4a40      	ldr	r2, [pc, #256]	; (800afe4 <USB_SetTurnaroundTime+0x120>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d202      	bcs.n	800aeee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800aee8:	230f      	movs	r3, #15
 800aeea:	617b      	str	r3, [r7, #20]
 800aeec:	e062      	b.n	800afb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	4a3c      	ldr	r2, [pc, #240]	; (800afe4 <USB_SetTurnaroundTime+0x120>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d306      	bcc.n	800af04 <USB_SetTurnaroundTime+0x40>
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	4a3b      	ldr	r2, [pc, #236]	; (800afe8 <USB_SetTurnaroundTime+0x124>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d202      	bcs.n	800af04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800aefe:	230e      	movs	r3, #14
 800af00:	617b      	str	r3, [r7, #20]
 800af02:	e057      	b.n	800afb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	4a38      	ldr	r2, [pc, #224]	; (800afe8 <USB_SetTurnaroundTime+0x124>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d306      	bcc.n	800af1a <USB_SetTurnaroundTime+0x56>
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	4a37      	ldr	r2, [pc, #220]	; (800afec <USB_SetTurnaroundTime+0x128>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d202      	bcs.n	800af1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800af14:	230d      	movs	r3, #13
 800af16:	617b      	str	r3, [r7, #20]
 800af18:	e04c      	b.n	800afb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	4a33      	ldr	r2, [pc, #204]	; (800afec <USB_SetTurnaroundTime+0x128>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d306      	bcc.n	800af30 <USB_SetTurnaroundTime+0x6c>
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	4a32      	ldr	r2, [pc, #200]	; (800aff0 <USB_SetTurnaroundTime+0x12c>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d802      	bhi.n	800af30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800af2a:	230c      	movs	r3, #12
 800af2c:	617b      	str	r3, [r7, #20]
 800af2e:	e041      	b.n	800afb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	4a2f      	ldr	r2, [pc, #188]	; (800aff0 <USB_SetTurnaroundTime+0x12c>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d906      	bls.n	800af46 <USB_SetTurnaroundTime+0x82>
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	4a2e      	ldr	r2, [pc, #184]	; (800aff4 <USB_SetTurnaroundTime+0x130>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d802      	bhi.n	800af46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800af40:	230b      	movs	r3, #11
 800af42:	617b      	str	r3, [r7, #20]
 800af44:	e036      	b.n	800afb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	4a2a      	ldr	r2, [pc, #168]	; (800aff4 <USB_SetTurnaroundTime+0x130>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d906      	bls.n	800af5c <USB_SetTurnaroundTime+0x98>
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	4a29      	ldr	r2, [pc, #164]	; (800aff8 <USB_SetTurnaroundTime+0x134>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d802      	bhi.n	800af5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800af56:	230a      	movs	r3, #10
 800af58:	617b      	str	r3, [r7, #20]
 800af5a:	e02b      	b.n	800afb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	4a26      	ldr	r2, [pc, #152]	; (800aff8 <USB_SetTurnaroundTime+0x134>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d906      	bls.n	800af72 <USB_SetTurnaroundTime+0xae>
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	4a25      	ldr	r2, [pc, #148]	; (800affc <USB_SetTurnaroundTime+0x138>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d202      	bcs.n	800af72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800af6c:	2309      	movs	r3, #9
 800af6e:	617b      	str	r3, [r7, #20]
 800af70:	e020      	b.n	800afb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	4a21      	ldr	r2, [pc, #132]	; (800affc <USB_SetTurnaroundTime+0x138>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d306      	bcc.n	800af88 <USB_SetTurnaroundTime+0xc4>
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	4a20      	ldr	r2, [pc, #128]	; (800b000 <USB_SetTurnaroundTime+0x13c>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d802      	bhi.n	800af88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800af82:	2308      	movs	r3, #8
 800af84:	617b      	str	r3, [r7, #20]
 800af86:	e015      	b.n	800afb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	4a1d      	ldr	r2, [pc, #116]	; (800b000 <USB_SetTurnaroundTime+0x13c>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d906      	bls.n	800af9e <USB_SetTurnaroundTime+0xda>
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	4a1c      	ldr	r2, [pc, #112]	; (800b004 <USB_SetTurnaroundTime+0x140>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d202      	bcs.n	800af9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800af98:	2307      	movs	r3, #7
 800af9a:	617b      	str	r3, [r7, #20]
 800af9c:	e00a      	b.n	800afb4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800af9e:	2306      	movs	r3, #6
 800afa0:	617b      	str	r3, [r7, #20]
 800afa2:	e007      	b.n	800afb4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800afa4:	79fb      	ldrb	r3, [r7, #7]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d102      	bne.n	800afb0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800afaa:	2309      	movs	r3, #9
 800afac:	617b      	str	r3, [r7, #20]
 800afae:	e001      	b.n	800afb4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800afb0:	2309      	movs	r3, #9
 800afb2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	68da      	ldr	r2, [r3, #12]
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	029b      	lsls	r3, r3, #10
 800afc8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800afcc:	431a      	orrs	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	371c      	adds	r7, #28
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	00d8acbf 	.word	0x00d8acbf
 800afe4:	00e4e1c0 	.word	0x00e4e1c0
 800afe8:	00f42400 	.word	0x00f42400
 800afec:	01067380 	.word	0x01067380
 800aff0:	011a499f 	.word	0x011a499f
 800aff4:	01312cff 	.word	0x01312cff
 800aff8:	014ca43f 	.word	0x014ca43f
 800affc:	016e3600 	.word	0x016e3600
 800b000:	01a6ab1f 	.word	0x01a6ab1f
 800b004:	01e84800 	.word	0x01e84800

0800b008 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	f043 0201 	orr.w	r2, r3, #1
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	370c      	adds	r7, #12
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr

0800b02a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b02a:	b480      	push	{r7}
 800b02c:	b083      	sub	sp, #12
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	f023 0201 	bic.w	r2, r3, #1
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	460b      	mov	r3, r1
 800b056:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b058:	2300      	movs	r3, #0
 800b05a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b068:	78fb      	ldrb	r3, [r7, #3]
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d115      	bne.n	800b09a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b07a:	2001      	movs	r0, #1
 800b07c:	f7f9 fd82 	bl	8004b84 <HAL_Delay>
      ms++;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	3301      	adds	r3, #1
 800b084:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f001 f972 	bl	800c370 <USB_GetMode>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d01e      	beq.n	800b0d0 <USB_SetCurrentMode+0x84>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2b31      	cmp	r3, #49	; 0x31
 800b096:	d9f0      	bls.n	800b07a <USB_SetCurrentMode+0x2e>
 800b098:	e01a      	b.n	800b0d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b09a:	78fb      	ldrb	r3, [r7, #3]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d115      	bne.n	800b0cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b0ac:	2001      	movs	r0, #1
 800b0ae:	f7f9 fd69 	bl	8004b84 <HAL_Delay>
      ms++;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f001 f959 	bl	800c370 <USB_GetMode>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d005      	beq.n	800b0d0 <USB_SetCurrentMode+0x84>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2b31      	cmp	r3, #49	; 0x31
 800b0c8:	d9f0      	bls.n	800b0ac <USB_SetCurrentMode+0x60>
 800b0ca:	e001      	b.n	800b0d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e005      	b.n	800b0dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2b32      	cmp	r3, #50	; 0x32
 800b0d4:	d101      	bne.n	800b0da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e000      	b.n	800b0dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b0e4:	b084      	sub	sp, #16
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b086      	sub	sp, #24
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b0f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b0fe:	2300      	movs	r3, #0
 800b100:	613b      	str	r3, [r7, #16]
 800b102:	e009      	b.n	800b118 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	3340      	adds	r3, #64	; 0x40
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	4413      	add	r3, r2
 800b10e:	2200      	movs	r2, #0
 800b110:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	3301      	adds	r3, #1
 800b116:	613b      	str	r3, [r7, #16]
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	2b0e      	cmp	r3, #14
 800b11c:	d9f2      	bls.n	800b104 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b11e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b120:	2b00      	cmp	r3, #0
 800b122:	d11c      	bne.n	800b15e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b132:	f043 0302 	orr.w	r3, r3, #2
 800b136:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b148:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b154:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	639a      	str	r2, [r3, #56]	; 0x38
 800b15c:	e00b      	b.n	800b176 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b162:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b17c:	461a      	mov	r2, r3
 800b17e:	2300      	movs	r3, #0
 800b180:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b188:	4619      	mov	r1, r3
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b190:	461a      	mov	r2, r3
 800b192:	680b      	ldr	r3, [r1, #0]
 800b194:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d10c      	bne.n	800b1b6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d104      	bne.n	800b1ac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 f945 	bl	800b434 <USB_SetDevSpeed>
 800b1aa:	e008      	b.n	800b1be <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b1ac:	2101      	movs	r1, #1
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f940 	bl	800b434 <USB_SetDevSpeed>
 800b1b4:	e003      	b.n	800b1be <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b1b6:	2103      	movs	r1, #3
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 f93b 	bl	800b434 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b1be:	2110      	movs	r1, #16
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f8f3 	bl	800b3ac <USB_FlushTxFifo>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f90f 	bl	800b3f4 <USB_FlushRxFifo>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d001      	beq.n	800b1e0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1fe:	461a      	mov	r2, r3
 800b200:	2300      	movs	r3, #0
 800b202:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b204:	2300      	movs	r3, #0
 800b206:	613b      	str	r3, [r7, #16]
 800b208:	e043      	b.n	800b292 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	015a      	lsls	r2, r3, #5
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	4413      	add	r3, r2
 800b212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b21c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b220:	d118      	bne.n	800b254 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10a      	bne.n	800b23e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	015a      	lsls	r2, r3, #5
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	4413      	add	r3, r2
 800b230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b234:	461a      	mov	r2, r3
 800b236:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b23a:	6013      	str	r3, [r2, #0]
 800b23c:	e013      	b.n	800b266 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	015a      	lsls	r2, r3, #5
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	4413      	add	r3, r2
 800b246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b24a:	461a      	mov	r2, r3
 800b24c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	e008      	b.n	800b266 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	015a      	lsls	r2, r3, #5
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	4413      	add	r3, r2
 800b25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b260:	461a      	mov	r2, r3
 800b262:	2300      	movs	r3, #0
 800b264:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	015a      	lsls	r2, r3, #5
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	4413      	add	r3, r2
 800b26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b272:	461a      	mov	r2, r3
 800b274:	2300      	movs	r3, #0
 800b276:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b284:	461a      	mov	r2, r3
 800b286:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b28a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	3301      	adds	r3, #1
 800b290:	613b      	str	r3, [r7, #16]
 800b292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b294:	693a      	ldr	r2, [r7, #16]
 800b296:	429a      	cmp	r2, r3
 800b298:	d3b7      	bcc.n	800b20a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b29a:	2300      	movs	r3, #0
 800b29c:	613b      	str	r3, [r7, #16]
 800b29e:	e043      	b.n	800b328 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	015a      	lsls	r2, r3, #5
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2b6:	d118      	bne.n	800b2ea <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d10a      	bne.n	800b2d4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	015a      	lsls	r2, r3, #5
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b2d0:	6013      	str	r3, [r2, #0]
 800b2d2:	e013      	b.n	800b2fc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	015a      	lsls	r2, r3, #5
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	4413      	add	r3, r2
 800b2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b2e6:	6013      	str	r3, [r2, #0]
 800b2e8:	e008      	b.n	800b2fc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	015a      	lsls	r2, r3, #5
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	015a      	lsls	r2, r3, #5
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4413      	add	r3, r2
 800b304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b308:	461a      	mov	r2, r3
 800b30a:	2300      	movs	r3, #0
 800b30c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	015a      	lsls	r2, r3, #5
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	4413      	add	r3, r2
 800b316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b31a:	461a      	mov	r2, r3
 800b31c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b320:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	3301      	adds	r3, #1
 800b326:	613b      	str	r3, [r7, #16]
 800b328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32a:	693a      	ldr	r2, [r7, #16]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d3b7      	bcc.n	800b2a0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b33e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b342:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b350:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b354:	2b00      	cmp	r3, #0
 800b356:	d105      	bne.n	800b364 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	699b      	ldr	r3, [r3, #24]
 800b35c:	f043 0210 	orr.w	r2, r3, #16
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	699a      	ldr	r2, [r3, #24]
 800b368:	4b0f      	ldr	r3, [pc, #60]	; (800b3a8 <USB_DevInit+0x2c4>)
 800b36a:	4313      	orrs	r3, r2
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b372:	2b00      	cmp	r3, #0
 800b374:	d005      	beq.n	800b382 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	f043 0208 	orr.w	r2, r3, #8
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b384:	2b01      	cmp	r3, #1
 800b386:	d107      	bne.n	800b398 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b390:	f043 0304 	orr.w	r3, r3, #4
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b398:	7dfb      	ldrb	r3, [r7, #23]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3a4:	b004      	add	sp, #16
 800b3a6:	4770      	bx	lr
 800b3a8:	803c3800 	.word	0x803c3800

0800b3ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	019b      	lsls	r3, r3, #6
 800b3be:	f043 0220 	orr.w	r2, r3, #32
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	60fb      	str	r3, [r7, #12]
 800b3cc:	4a08      	ldr	r2, [pc, #32]	; (800b3f0 <USB_FlushTxFifo+0x44>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d901      	bls.n	800b3d6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800b3d2:	2303      	movs	r3, #3
 800b3d4:	e006      	b.n	800b3e4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	f003 0320 	and.w	r3, r3, #32
 800b3de:	2b20      	cmp	r3, #32
 800b3e0:	d0f1      	beq.n	800b3c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3714      	adds	r7, #20
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr
 800b3f0:	00030d40 	.word	0x00030d40

0800b3f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2210      	movs	r2, #16
 800b404:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3301      	adds	r3, #1
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	4a08      	ldr	r2, [pc, #32]	; (800b430 <USB_FlushRxFifo+0x3c>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d901      	bls.n	800b416 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800b412:	2303      	movs	r3, #3
 800b414:	e006      	b.n	800b424 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	691b      	ldr	r3, [r3, #16]
 800b41a:	f003 0310 	and.w	r3, r3, #16
 800b41e:	2b10      	cmp	r3, #16
 800b420:	d0f1      	beq.n	800b406 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b422:	2300      	movs	r3, #0
}
 800b424:	4618      	mov	r0, r3
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr
 800b430:	00030d40 	.word	0x00030d40

0800b434 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	460b      	mov	r3, r1
 800b43e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	78fb      	ldrb	r3, [r7, #3]
 800b44e:	68f9      	ldr	r1, [r7, #12]
 800b450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b454:	4313      	orrs	r3, r2
 800b456:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b466:	b480      	push	{r7}
 800b468:	b087      	sub	sp, #28
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	f003 0306 	and.w	r3, r3, #6
 800b47e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d102      	bne.n	800b48c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b486:	2300      	movs	r3, #0
 800b488:	75fb      	strb	r3, [r7, #23]
 800b48a:	e00a      	b.n	800b4a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2b02      	cmp	r3, #2
 800b490:	d002      	beq.n	800b498 <USB_GetDevSpeed+0x32>
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2b06      	cmp	r3, #6
 800b496:	d102      	bne.n	800b49e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b498:	2302      	movs	r3, #2
 800b49a:	75fb      	strb	r3, [r7, #23]
 800b49c:	e001      	b.n	800b4a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b49e:	230f      	movs	r3, #15
 800b4a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	371c      	adds	r7, #28
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	785b      	ldrb	r3, [r3, #1]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d13a      	bne.n	800b542 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4d2:	69da      	ldr	r2, [r3, #28]
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	f003 030f 	and.w	r3, r3, #15
 800b4dc:	2101      	movs	r1, #1
 800b4de:	fa01 f303 	lsl.w	r3, r1, r3
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	68f9      	ldr	r1, [r7, #12]
 800b4e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	015a      	lsls	r2, r3, #5
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b500:	2b00      	cmp	r3, #0
 800b502:	d155      	bne.n	800b5b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	015a      	lsls	r2, r3, #5
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	4413      	add	r3, r2
 800b50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	78db      	ldrb	r3, [r3, #3]
 800b51e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b520:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	059b      	lsls	r3, r3, #22
 800b526:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b528:	4313      	orrs	r3, r2
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	0151      	lsls	r1, r2, #5
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	440a      	add	r2, r1
 800b532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b53a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	e036      	b.n	800b5b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b548:	69da      	ldr	r2, [r3, #28]
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	f003 030f 	and.w	r3, r3, #15
 800b552:	2101      	movs	r1, #1
 800b554:	fa01 f303 	lsl.w	r3, r1, r3
 800b558:	041b      	lsls	r3, r3, #16
 800b55a:	68f9      	ldr	r1, [r7, #12]
 800b55c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b560:	4313      	orrs	r3, r2
 800b562:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	015a      	lsls	r2, r3, #5
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	4413      	add	r3, r2
 800b56c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b576:	2b00      	cmp	r3, #0
 800b578:	d11a      	bne.n	800b5b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	015a      	lsls	r2, r3, #5
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	4413      	add	r3, r2
 800b582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	78db      	ldrb	r3, [r3, #3]
 800b594:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b596:	430b      	orrs	r3, r1
 800b598:	4313      	orrs	r3, r2
 800b59a:	68ba      	ldr	r2, [r7, #8]
 800b59c:	0151      	lsls	r1, r2, #5
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	440a      	add	r2, r1
 800b5a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
	...

0800b5c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	785b      	ldrb	r3, [r3, #1]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d161      	bne.n	800b6a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	015a      	lsls	r2, r3, #5
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5f2:	d11f      	bne.n	800b634 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	015a      	lsls	r2, r3, #5
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	0151      	lsls	r1, r2, #5
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	440a      	add	r2, r1
 800b60a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b60e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b612:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	015a      	lsls	r2, r3, #5
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	4413      	add	r3, r2
 800b61c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	0151      	lsls	r1, r2, #5
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	440a      	add	r2, r1
 800b62a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b62e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b632:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b63a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	f003 030f 	and.w	r3, r3, #15
 800b644:	2101      	movs	r1, #1
 800b646:	fa01 f303 	lsl.w	r3, r1, r3
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	43db      	mvns	r3, r3
 800b64e:	68f9      	ldr	r1, [r7, #12]
 800b650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b654:	4013      	ands	r3, r2
 800b656:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b65e:	69da      	ldr	r2, [r3, #28]
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	f003 030f 	and.w	r3, r3, #15
 800b668:	2101      	movs	r1, #1
 800b66a:	fa01 f303 	lsl.w	r3, r1, r3
 800b66e:	b29b      	uxth	r3, r3
 800b670:	43db      	mvns	r3, r3
 800b672:	68f9      	ldr	r1, [r7, #12]
 800b674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b678:	4013      	ands	r3, r2
 800b67a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	015a      	lsls	r2, r3, #5
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	4413      	add	r3, r2
 800b684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	0159      	lsls	r1, r3, #5
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	440b      	add	r3, r1
 800b692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b696:	4619      	mov	r1, r3
 800b698:	4b35      	ldr	r3, [pc, #212]	; (800b770 <USB_DeactivateEndpoint+0x1b0>)
 800b69a:	4013      	ands	r3, r2
 800b69c:	600b      	str	r3, [r1, #0]
 800b69e:	e060      	b.n	800b762 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	015a      	lsls	r2, r3, #5
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6b6:	d11f      	bne.n	800b6f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	015a      	lsls	r2, r3, #5
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	4413      	add	r3, r2
 800b6c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68ba      	ldr	r2, [r7, #8]
 800b6c8:	0151      	lsls	r1, r2, #5
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	440a      	add	r2, r1
 800b6ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b6d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	015a      	lsls	r2, r3, #5
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	4413      	add	r3, r2
 800b6e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	0151      	lsls	r1, r2, #5
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	440a      	add	r2, r1
 800b6ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b6f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	f003 030f 	and.w	r3, r3, #15
 800b708:	2101      	movs	r1, #1
 800b70a:	fa01 f303 	lsl.w	r3, r1, r3
 800b70e:	041b      	lsls	r3, r3, #16
 800b710:	43db      	mvns	r3, r3
 800b712:	68f9      	ldr	r1, [r7, #12]
 800b714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b718:	4013      	ands	r3, r2
 800b71a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b722:	69da      	ldr	r2, [r3, #28]
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	f003 030f 	and.w	r3, r3, #15
 800b72c:	2101      	movs	r1, #1
 800b72e:	fa01 f303 	lsl.w	r3, r1, r3
 800b732:	041b      	lsls	r3, r3, #16
 800b734:	43db      	mvns	r3, r3
 800b736:	68f9      	ldr	r1, [r7, #12]
 800b738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b73c:	4013      	ands	r3, r2
 800b73e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	015a      	lsls	r2, r3, #5
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	4413      	add	r3, r2
 800b748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	0159      	lsls	r1, r3, #5
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	440b      	add	r3, r1
 800b756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b75a:	4619      	mov	r1, r3
 800b75c:	4b05      	ldr	r3, [pc, #20]	; (800b774 <USB_DeactivateEndpoint+0x1b4>)
 800b75e:	4013      	ands	r3, r2
 800b760:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3714      	adds	r7, #20
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr
 800b770:	ec337800 	.word	0xec337800
 800b774:	eff37800 	.word	0xeff37800

0800b778 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b08a      	sub	sp, #40	; 0x28
 800b77c:	af02      	add	r7, sp, #8
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	4613      	mov	r3, r2
 800b784:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	785b      	ldrb	r3, [r3, #1]
 800b794:	2b01      	cmp	r3, #1
 800b796:	f040 815c 	bne.w	800ba52 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	695b      	ldr	r3, [r3, #20]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d132      	bne.n	800b808 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	015a      	lsls	r2, r3, #5
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	69ba      	ldr	r2, [r7, #24]
 800b7b2:	0151      	lsls	r1, r2, #5
 800b7b4:	69fa      	ldr	r2, [r7, #28]
 800b7b6:	440a      	add	r2, r1
 800b7b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b7c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b7c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	015a      	lsls	r2, r3, #5
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7d2:	691b      	ldr	r3, [r3, #16]
 800b7d4:	69ba      	ldr	r2, [r7, #24]
 800b7d6:	0151      	lsls	r1, r2, #5
 800b7d8:	69fa      	ldr	r2, [r7, #28]
 800b7da:	440a      	add	r2, r1
 800b7dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	015a      	lsls	r2, r3, #5
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	69ba      	ldr	r2, [r7, #24]
 800b7f6:	0151      	lsls	r1, r2, #5
 800b7f8:	69fa      	ldr	r2, [r7, #28]
 800b7fa:	440a      	add	r2, r1
 800b7fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b800:	0cdb      	lsrs	r3, r3, #19
 800b802:	04db      	lsls	r3, r3, #19
 800b804:	6113      	str	r3, [r2, #16]
 800b806:	e074      	b.n	800b8f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	015a      	lsls	r2, r3, #5
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	4413      	add	r3, r2
 800b810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	69ba      	ldr	r2, [r7, #24]
 800b818:	0151      	lsls	r1, r2, #5
 800b81a:	69fa      	ldr	r2, [r7, #28]
 800b81c:	440a      	add	r2, r1
 800b81e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b822:	0cdb      	lsrs	r3, r3, #19
 800b824:	04db      	lsls	r3, r3, #19
 800b826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	015a      	lsls	r2, r3, #5
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	4413      	add	r3, r2
 800b830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b834:	691b      	ldr	r3, [r3, #16]
 800b836:	69ba      	ldr	r2, [r7, #24]
 800b838:	0151      	lsls	r1, r2, #5
 800b83a:	69fa      	ldr	r2, [r7, #28]
 800b83c:	440a      	add	r2, r1
 800b83e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b842:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b846:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b84a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	015a      	lsls	r2, r3, #5
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	4413      	add	r3, r2
 800b854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b858:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	6959      	ldr	r1, [r3, #20]
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	440b      	add	r3, r1
 800b864:	1e59      	subs	r1, r3, #1
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b86e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b870:	4b9d      	ldr	r3, [pc, #628]	; (800bae8 <USB_EPStartXfer+0x370>)
 800b872:	400b      	ands	r3, r1
 800b874:	69b9      	ldr	r1, [r7, #24]
 800b876:	0148      	lsls	r0, r1, #5
 800b878:	69f9      	ldr	r1, [r7, #28]
 800b87a:	4401      	add	r1, r0
 800b87c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b880:	4313      	orrs	r3, r2
 800b882:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	015a      	lsls	r2, r3, #5
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	4413      	add	r3, r2
 800b88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b890:	691a      	ldr	r2, [r3, #16]
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	695b      	ldr	r3, [r3, #20]
 800b896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b89a:	69b9      	ldr	r1, [r7, #24]
 800b89c:	0148      	lsls	r0, r1, #5
 800b89e:	69f9      	ldr	r1, [r7, #28]
 800b8a0:	4401      	add	r1, r0
 800b8a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	78db      	ldrb	r3, [r3, #3]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d11f      	bne.n	800b8f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	015a      	lsls	r2, r3, #5
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	69ba      	ldr	r2, [r7, #24]
 800b8c2:	0151      	lsls	r1, r2, #5
 800b8c4:	69fa      	ldr	r2, [r7, #28]
 800b8c6:	440a      	add	r2, r1
 800b8c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b8d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	015a      	lsls	r2, r3, #5
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	4413      	add	r3, r2
 800b8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8de:	691b      	ldr	r3, [r3, #16]
 800b8e0:	69ba      	ldr	r2, [r7, #24]
 800b8e2:	0151      	lsls	r1, r2, #5
 800b8e4:	69fa      	ldr	r2, [r7, #28]
 800b8e6:	440a      	add	r2, r1
 800b8e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b8f2:	79fb      	ldrb	r3, [r7, #7]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d14b      	bne.n	800b990 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	691b      	ldr	r3, [r3, #16]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d009      	beq.n	800b914 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	015a      	lsls	r2, r3, #5
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	4413      	add	r3, r2
 800b908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b90c:	461a      	mov	r2, r3
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	78db      	ldrb	r3, [r3, #3]
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d128      	bne.n	800b96e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d110      	bne.n	800b94e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	015a      	lsls	r2, r3, #5
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	4413      	add	r3, r2
 800b934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	69ba      	ldr	r2, [r7, #24]
 800b93c:	0151      	lsls	r1, r2, #5
 800b93e:	69fa      	ldr	r2, [r7, #28]
 800b940:	440a      	add	r2, r1
 800b942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b946:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b94a:	6013      	str	r3, [r2, #0]
 800b94c:	e00f      	b.n	800b96e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	015a      	lsls	r2, r3, #5
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	4413      	add	r3, r2
 800b956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	69ba      	ldr	r2, [r7, #24]
 800b95e:	0151      	lsls	r1, r2, #5
 800b960:	69fa      	ldr	r2, [r7, #28]
 800b962:	440a      	add	r2, r1
 800b964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b96c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	015a      	lsls	r2, r3, #5
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	4413      	add	r3, r2
 800b976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	69ba      	ldr	r2, [r7, #24]
 800b97e:	0151      	lsls	r1, r2, #5
 800b980:	69fa      	ldr	r2, [r7, #28]
 800b982:	440a      	add	r2, r1
 800b984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b988:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b98c:	6013      	str	r3, [r2, #0]
 800b98e:	e12f      	b.n	800bbf0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	015a      	lsls	r2, r3, #5
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	4413      	add	r3, r2
 800b998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	69ba      	ldr	r2, [r7, #24]
 800b9a0:	0151      	lsls	r1, r2, #5
 800b9a2:	69fa      	ldr	r2, [r7, #28]
 800b9a4:	440a      	add	r2, r1
 800b9a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b9ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	78db      	ldrb	r3, [r3, #3]
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d015      	beq.n	800b9e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	695b      	ldr	r3, [r3, #20]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f000 8117 	beq.w	800bbf0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b9c2:	69fb      	ldr	r3, [r7, #28]
 800b9c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	f003 030f 	and.w	r3, r3, #15
 800b9d2:	2101      	movs	r1, #1
 800b9d4:	fa01 f303 	lsl.w	r3, r1, r3
 800b9d8:	69f9      	ldr	r1, [r7, #28]
 800b9da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	634b      	str	r3, [r1, #52]	; 0x34
 800b9e2:	e105      	b.n	800bbf0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d110      	bne.n	800ba16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	015a      	lsls	r2, r3, #5
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	69ba      	ldr	r2, [r7, #24]
 800ba04:	0151      	lsls	r1, r2, #5
 800ba06:	69fa      	ldr	r2, [r7, #28]
 800ba08:	440a      	add	r2, r1
 800ba0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba12:	6013      	str	r3, [r2, #0]
 800ba14:	e00f      	b.n	800ba36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	015a      	lsls	r2, r3, #5
 800ba1a:	69fb      	ldr	r3, [r7, #28]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	69ba      	ldr	r2, [r7, #24]
 800ba26:	0151      	lsls	r1, r2, #5
 800ba28:	69fa      	ldr	r2, [r7, #28]
 800ba2a:	440a      	add	r2, r1
 800ba2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	68d9      	ldr	r1, [r3, #12]
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	781a      	ldrb	r2, [r3, #0]
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	695b      	ldr	r3, [r3, #20]
 800ba42:	b298      	uxth	r0, r3
 800ba44:	79fb      	ldrb	r3, [r7, #7]
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	4603      	mov	r3, r0
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	f000 fa2b 	bl	800bea6 <USB_WritePacket>
 800ba50:	e0ce      	b.n	800bbf0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	015a      	lsls	r2, r3, #5
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	4413      	add	r3, r2
 800ba5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba5e:	691b      	ldr	r3, [r3, #16]
 800ba60:	69ba      	ldr	r2, [r7, #24]
 800ba62:	0151      	lsls	r1, r2, #5
 800ba64:	69fa      	ldr	r2, [r7, #28]
 800ba66:	440a      	add	r2, r1
 800ba68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba6c:	0cdb      	lsrs	r3, r3, #19
 800ba6e:	04db      	lsls	r3, r3, #19
 800ba70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	015a      	lsls	r2, r3, #5
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	4413      	add	r3, r2
 800ba7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	69ba      	ldr	r2, [r7, #24]
 800ba82:	0151      	lsls	r1, r2, #5
 800ba84:	69fa      	ldr	r2, [r7, #28]
 800ba86:	440a      	add	r2, r1
 800ba88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d126      	bne.n	800baec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	015a      	lsls	r2, r3, #5
 800baa2:	69fb      	ldr	r3, [r7, #28]
 800baa4:	4413      	add	r3, r2
 800baa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baaa:	691a      	ldr	r2, [r3, #16]
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bab4:	69b9      	ldr	r1, [r7, #24]
 800bab6:	0148      	lsls	r0, r1, #5
 800bab8:	69f9      	ldr	r1, [r7, #28]
 800baba:	4401      	add	r1, r0
 800babc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bac0:	4313      	orrs	r3, r2
 800bac2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	015a      	lsls	r2, r3, #5
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	4413      	add	r3, r2
 800bacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	69ba      	ldr	r2, [r7, #24]
 800bad4:	0151      	lsls	r1, r2, #5
 800bad6:	69fa      	ldr	r2, [r7, #28]
 800bad8:	440a      	add	r2, r1
 800bada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bade:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bae2:	6113      	str	r3, [r2, #16]
 800bae4:	e036      	b.n	800bb54 <USB_EPStartXfer+0x3dc>
 800bae6:	bf00      	nop
 800bae8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	695a      	ldr	r2, [r3, #20]
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	4413      	add	r3, r2
 800baf6:	1e5a      	subs	r2, r3, #1
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb00:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	015a      	lsls	r2, r3, #5
 800bb06:	69fb      	ldr	r3, [r7, #28]
 800bb08:	4413      	add	r3, r2
 800bb0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb0e:	691a      	ldr	r2, [r3, #16]
 800bb10:	8afb      	ldrh	r3, [r7, #22]
 800bb12:	04d9      	lsls	r1, r3, #19
 800bb14:	4b39      	ldr	r3, [pc, #228]	; (800bbfc <USB_EPStartXfer+0x484>)
 800bb16:	400b      	ands	r3, r1
 800bb18:	69b9      	ldr	r1, [r7, #24]
 800bb1a:	0148      	lsls	r0, r1, #5
 800bb1c:	69f9      	ldr	r1, [r7, #28]
 800bb1e:	4401      	add	r1, r0
 800bb20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bb24:	4313      	orrs	r3, r2
 800bb26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	015a      	lsls	r2, r3, #5
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	4413      	add	r3, r2
 800bb30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb34:	691a      	ldr	r2, [r3, #16]
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	8af9      	ldrh	r1, [r7, #22]
 800bb3c:	fb01 f303 	mul.w	r3, r1, r3
 800bb40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb44:	69b9      	ldr	r1, [r7, #24]
 800bb46:	0148      	lsls	r0, r1, #5
 800bb48:	69f9      	ldr	r1, [r7, #28]
 800bb4a:	4401      	add	r1, r0
 800bb4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bb50:	4313      	orrs	r3, r2
 800bb52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bb54:	79fb      	ldrb	r3, [r7, #7]
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d10d      	bne.n	800bb76 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d009      	beq.n	800bb76 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	68d9      	ldr	r1, [r3, #12]
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	015a      	lsls	r2, r3, #5
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb72:	460a      	mov	r2, r1
 800bb74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	78db      	ldrb	r3, [r3, #3]
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d128      	bne.n	800bbd0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d110      	bne.n	800bbb0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	015a      	lsls	r2, r3, #5
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	4413      	add	r3, r2
 800bb96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	69ba      	ldr	r2, [r7, #24]
 800bb9e:	0151      	lsls	r1, r2, #5
 800bba0:	69fa      	ldr	r2, [r7, #28]
 800bba2:	440a      	add	r2, r1
 800bba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bba8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bbac:	6013      	str	r3, [r2, #0]
 800bbae:	e00f      	b.n	800bbd0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	015a      	lsls	r2, r3, #5
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	69ba      	ldr	r2, [r7, #24]
 800bbc0:	0151      	lsls	r1, r2, #5
 800bbc2:	69fa      	ldr	r2, [r7, #28]
 800bbc4:	440a      	add	r2, r1
 800bbc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	015a      	lsls	r2, r3, #5
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	69ba      	ldr	r2, [r7, #24]
 800bbe0:	0151      	lsls	r1, r2, #5
 800bbe2:	69fa      	ldr	r2, [r7, #28]
 800bbe4:	440a      	add	r2, r1
 800bbe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bbee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3720      	adds	r7, #32
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	1ff80000 	.word	0x1ff80000

0800bc00 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b087      	sub	sp, #28
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	785b      	ldrb	r3, [r3, #1]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	f040 80cd 	bne.w	800bdbc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	695b      	ldr	r3, [r3, #20]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d132      	bne.n	800bc90 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	015a      	lsls	r2, r3, #5
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	4413      	add	r3, r2
 800bc32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	693a      	ldr	r2, [r7, #16]
 800bc3a:	0151      	lsls	r1, r2, #5
 800bc3c:	697a      	ldr	r2, [r7, #20]
 800bc3e:	440a      	add	r2, r1
 800bc40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bc48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bc4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	015a      	lsls	r2, r3, #5
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	4413      	add	r3, r2
 800bc56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	0151      	lsls	r1, r2, #5
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	440a      	add	r2, r1
 800bc64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	015a      	lsls	r2, r3, #5
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	4413      	add	r3, r2
 800bc76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc7a:	691b      	ldr	r3, [r3, #16]
 800bc7c:	693a      	ldr	r2, [r7, #16]
 800bc7e:	0151      	lsls	r1, r2, #5
 800bc80:	697a      	ldr	r2, [r7, #20]
 800bc82:	440a      	add	r2, r1
 800bc84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc88:	0cdb      	lsrs	r3, r3, #19
 800bc8a:	04db      	lsls	r3, r3, #19
 800bc8c:	6113      	str	r3, [r2, #16]
 800bc8e:	e04e      	b.n	800bd2e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	015a      	lsls	r2, r3, #5
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	4413      	add	r3, r2
 800bc98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	693a      	ldr	r2, [r7, #16]
 800bca0:	0151      	lsls	r1, r2, #5
 800bca2:	697a      	ldr	r2, [r7, #20]
 800bca4:	440a      	add	r2, r1
 800bca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcaa:	0cdb      	lsrs	r3, r3, #19
 800bcac:	04db      	lsls	r3, r3, #19
 800bcae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	015a      	lsls	r2, r3, #5
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	693a      	ldr	r2, [r7, #16]
 800bcc0:	0151      	lsls	r1, r2, #5
 800bcc2:	697a      	ldr	r2, [r7, #20]
 800bcc4:	440a      	add	r2, r1
 800bcc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bcce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bcd2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	695a      	ldr	r2, [r3, #20]
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d903      	bls.n	800bce8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	689a      	ldr	r2, [r3, #8]
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	015a      	lsls	r2, r3, #5
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	4413      	add	r3, r2
 800bcf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	693a      	ldr	r2, [r7, #16]
 800bcf8:	0151      	lsls	r1, r2, #5
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	440a      	add	r2, r1
 800bcfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	015a      	lsls	r2, r3, #5
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	4413      	add	r3, r2
 800bd10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd14:	691a      	ldr	r2, [r3, #16]
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	695b      	ldr	r3, [r3, #20]
 800bd1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd1e:	6939      	ldr	r1, [r7, #16]
 800bd20:	0148      	lsls	r0, r1, #5
 800bd22:	6979      	ldr	r1, [r7, #20]
 800bd24:	4401      	add	r1, r0
 800bd26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bd2e:	79fb      	ldrb	r3, [r7, #7]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d11e      	bne.n	800bd72 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	691b      	ldr	r3, [r3, #16]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d009      	beq.n	800bd50 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	015a      	lsls	r2, r3, #5
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd48:	461a      	mov	r2, r3
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	691b      	ldr	r3, [r3, #16]
 800bd4e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	015a      	lsls	r2, r3, #5
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	4413      	add	r3, r2
 800bd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	0151      	lsls	r1, r2, #5
 800bd62:	697a      	ldr	r2, [r7, #20]
 800bd64:	440a      	add	r2, r1
 800bd66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd6e:	6013      	str	r3, [r2, #0]
 800bd70:	e092      	b.n	800be98 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	015a      	lsls	r2, r3, #5
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	4413      	add	r3, r2
 800bd7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	693a      	ldr	r2, [r7, #16]
 800bd82:	0151      	lsls	r1, r2, #5
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	440a      	add	r2, r1
 800bd88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd90:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d07e      	beq.n	800be98 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bda0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	f003 030f 	and.w	r3, r3, #15
 800bdaa:	2101      	movs	r1, #1
 800bdac:	fa01 f303 	lsl.w	r3, r1, r3
 800bdb0:	6979      	ldr	r1, [r7, #20]
 800bdb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	634b      	str	r3, [r1, #52]	; 0x34
 800bdba:	e06d      	b.n	800be98 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	015a      	lsls	r2, r3, #5
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	0151      	lsls	r1, r2, #5
 800bdce:	697a      	ldr	r2, [r7, #20]
 800bdd0:	440a      	add	r2, r1
 800bdd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdd6:	0cdb      	lsrs	r3, r3, #19
 800bdd8:	04db      	lsls	r3, r3, #19
 800bdda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	015a      	lsls	r2, r3, #5
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	4413      	add	r3, r2
 800bde4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	693a      	ldr	r2, [r7, #16]
 800bdec:	0151      	lsls	r1, r2, #5
 800bdee:	697a      	ldr	r2, [r7, #20]
 800bdf0:	440a      	add	r2, r1
 800bdf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdf6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bdfa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bdfe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	695b      	ldr	r3, [r3, #20]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d003      	beq.n	800be10 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	689a      	ldr	r2, [r3, #8]
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	015a      	lsls	r2, r3, #5
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	4413      	add	r3, r2
 800be18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	693a      	ldr	r2, [r7, #16]
 800be20:	0151      	lsls	r1, r2, #5
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	440a      	add	r2, r1
 800be26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	015a      	lsls	r2, r3, #5
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	4413      	add	r3, r2
 800be38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be3c:	691a      	ldr	r2, [r3, #16]
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be46:	6939      	ldr	r1, [r7, #16]
 800be48:	0148      	lsls	r0, r1, #5
 800be4a:	6979      	ldr	r1, [r7, #20]
 800be4c:	4401      	add	r1, r0
 800be4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800be52:	4313      	orrs	r3, r2
 800be54:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800be56:	79fb      	ldrb	r3, [r7, #7]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d10d      	bne.n	800be78 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d009      	beq.n	800be78 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	68d9      	ldr	r1, [r3, #12]
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	015a      	lsls	r2, r3, #5
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	4413      	add	r3, r2
 800be70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be74:	460a      	mov	r2, r1
 800be76:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	015a      	lsls	r2, r3, #5
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	4413      	add	r3, r2
 800be80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	0151      	lsls	r1, r2, #5
 800be8a:	697a      	ldr	r2, [r7, #20]
 800be8c:	440a      	add	r2, r1
 800be8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	371c      	adds	r7, #28
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bea6:	b480      	push	{r7}
 800bea8:	b089      	sub	sp, #36	; 0x24
 800beaa:	af00      	add	r7, sp, #0
 800beac:	60f8      	str	r0, [r7, #12]
 800beae:	60b9      	str	r1, [r7, #8]
 800beb0:	4611      	mov	r1, r2
 800beb2:	461a      	mov	r2, r3
 800beb4:	460b      	mov	r3, r1
 800beb6:	71fb      	strb	r3, [r7, #7]
 800beb8:	4613      	mov	r3, r2
 800beba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bec4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d123      	bne.n	800bf14 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800becc:	88bb      	ldrh	r3, [r7, #4]
 800bece:	3303      	adds	r3, #3
 800bed0:	089b      	lsrs	r3, r3, #2
 800bed2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bed4:	2300      	movs	r3, #0
 800bed6:	61bb      	str	r3, [r7, #24]
 800bed8:	e018      	b.n	800bf0c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800beda:	79fb      	ldrb	r3, [r7, #7]
 800bedc:	031a      	lsls	r2, r3, #12
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	4413      	add	r3, r2
 800bee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bee6:	461a      	mov	r2, r3
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	6013      	str	r3, [r2, #0]
      pSrc++;
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	3301      	adds	r3, #1
 800bef2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	3301      	adds	r3, #1
 800bef8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	3301      	adds	r3, #1
 800befe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	3301      	adds	r3, #1
 800bf04:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	61bb      	str	r3, [r7, #24]
 800bf0c:	69ba      	ldr	r2, [r7, #24]
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d3e2      	bcc.n	800beda <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3724      	adds	r7, #36	; 0x24
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr

0800bf22 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bf22:	b480      	push	{r7}
 800bf24:	b08b      	sub	sp, #44	; 0x2c
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	60f8      	str	r0, [r7, #12]
 800bf2a:	60b9      	str	r1, [r7, #8]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bf38:	88fb      	ldrh	r3, [r7, #6]
 800bf3a:	089b      	lsrs	r3, r3, #2
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bf40:	88fb      	ldrh	r3, [r7, #6]
 800bf42:	f003 0303 	and.w	r3, r3, #3
 800bf46:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bf48:	2300      	movs	r3, #0
 800bf4a:	623b      	str	r3, [r7, #32]
 800bf4c:	e014      	b.n	800bf78 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf58:	601a      	str	r2, [r3, #0]
    pDest++;
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	3301      	adds	r3, #1
 800bf64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf68:	3301      	adds	r3, #1
 800bf6a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6e:	3301      	adds	r3, #1
 800bf70:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bf72:	6a3b      	ldr	r3, [r7, #32]
 800bf74:	3301      	adds	r3, #1
 800bf76:	623b      	str	r3, [r7, #32]
 800bf78:	6a3a      	ldr	r2, [r7, #32]
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d3e6      	bcc.n	800bf4e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bf80:	8bfb      	ldrh	r3, [r7, #30]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d01e      	beq.n	800bfc4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bf86:	2300      	movs	r3, #0
 800bf88:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf90:	461a      	mov	r2, r3
 800bf92:	f107 0310 	add.w	r3, r7, #16
 800bf96:	6812      	ldr	r2, [r2, #0]
 800bf98:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bf9a:	693a      	ldr	r2, [r7, #16]
 800bf9c:	6a3b      	ldr	r3, [r7, #32]
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	00db      	lsls	r3, r3, #3
 800bfa2:	fa22 f303 	lsr.w	r3, r2, r3
 800bfa6:	b2da      	uxtb	r2, r3
 800bfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfaa:	701a      	strb	r2, [r3, #0]
      i++;
 800bfac:	6a3b      	ldr	r3, [r7, #32]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	623b      	str	r3, [r7, #32]
      pDest++;
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bfb8:	8bfb      	ldrh	r3, [r7, #30]
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bfbe:	8bfb      	ldrh	r3, [r7, #30]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d1ea      	bne.n	800bf9a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	372c      	adds	r7, #44	; 0x2c
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bfd2:	b480      	push	{r7}
 800bfd4:	b085      	sub	sp, #20
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	785b      	ldrb	r3, [r3, #1]
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d12c      	bne.n	800c048 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	015a      	lsls	r2, r3, #5
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	4413      	add	r3, r2
 800bff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	db12      	blt.n	800c026 <USB_EPSetStall+0x54>
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d00f      	beq.n	800c026 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	015a      	lsls	r2, r3, #5
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	4413      	add	r3, r2
 800c00e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	68ba      	ldr	r2, [r7, #8]
 800c016:	0151      	lsls	r1, r2, #5
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	440a      	add	r2, r1
 800c01c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c020:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c024:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	015a      	lsls	r2, r3, #5
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	4413      	add	r3, r2
 800c02e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	0151      	lsls	r1, r2, #5
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	440a      	add	r2, r1
 800c03c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c044:	6013      	str	r3, [r2, #0]
 800c046:	e02b      	b.n	800c0a0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	015a      	lsls	r2, r3, #5
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	4413      	add	r3, r2
 800c050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	db12      	blt.n	800c080 <USB_EPSetStall+0xae>
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00f      	beq.n	800c080 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	015a      	lsls	r2, r3, #5
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	4413      	add	r3, r2
 800c068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	68ba      	ldr	r2, [r7, #8]
 800c070:	0151      	lsls	r1, r2, #5
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	440a      	add	r2, r1
 800c076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c07a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c07e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	015a      	lsls	r2, r3, #5
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	4413      	add	r3, r2
 800c088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	0151      	lsls	r1, r2, #5
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	440a      	add	r2, r1
 800c096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c09a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c09e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c0a0:	2300      	movs	r3, #0
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b085      	sub	sp, #20
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	785b      	ldrb	r3, [r3, #1]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d128      	bne.n	800c11c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	015a      	lsls	r2, r3, #5
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	68ba      	ldr	r2, [r7, #8]
 800c0da:	0151      	lsls	r1, r2, #5
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	440a      	add	r2, r1
 800c0e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c0e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	78db      	ldrb	r3, [r3, #3]
 800c0ee:	2b03      	cmp	r3, #3
 800c0f0:	d003      	beq.n	800c0fa <USB_EPClearStall+0x4c>
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	78db      	ldrb	r3, [r3, #3]
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	d138      	bne.n	800c16c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	015a      	lsls	r2, r3, #5
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	4413      	add	r3, r2
 800c102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68ba      	ldr	r2, [r7, #8]
 800c10a:	0151      	lsls	r1, r2, #5
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	440a      	add	r2, r1
 800c110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c118:	6013      	str	r3, [r2, #0]
 800c11a:	e027      	b.n	800c16c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	015a      	lsls	r2, r3, #5
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	4413      	add	r3, r2
 800c124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68ba      	ldr	r2, [r7, #8]
 800c12c:	0151      	lsls	r1, r2, #5
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	440a      	add	r2, r1
 800c132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c136:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c13a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	78db      	ldrb	r3, [r3, #3]
 800c140:	2b03      	cmp	r3, #3
 800c142:	d003      	beq.n	800c14c <USB_EPClearStall+0x9e>
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	78db      	ldrb	r3, [r3, #3]
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d10f      	bne.n	800c16c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	015a      	lsls	r2, r3, #5
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	4413      	add	r3, r2
 800c154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	68ba      	ldr	r2, [r7, #8]
 800c15c:	0151      	lsls	r1, r2, #5
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	440a      	add	r2, r1
 800c162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c16a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3714      	adds	r7, #20
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr

0800c17a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c17a:	b480      	push	{r7}
 800c17c:	b085      	sub	sp, #20
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
 800c182:	460b      	mov	r3, r1
 800c184:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c198:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c19c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	78fb      	ldrb	r3, [r7, #3]
 800c1a8:	011b      	lsls	r3, r3, #4
 800c1aa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c1ae:	68f9      	ldr	r1, [r7, #12]
 800c1b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3714      	adds	r7, #20
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr

0800c1c6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	b085      	sub	sp, #20
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1e0:	f023 0303 	bic.w	r3, r3, #3
 800c1e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1f4:	f023 0302 	bic.w	r3, r3, #2
 800c1f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3714      	adds	r7, #20
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c222:	f023 0303 	bic.w	r3, r3, #3
 800c226:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c236:	f043 0302 	orr.w	r3, r3, #2
 800c23a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3714      	adds	r7, #20
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr

0800c24a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c24a:	b480      	push	{r7}
 800c24c:	b085      	sub	sp, #20
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	695b      	ldr	r3, [r3, #20]
 800c256:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	699b      	ldr	r3, [r3, #24]
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	4013      	ands	r3, r2
 800c260:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c262:	68fb      	ldr	r3, [r7, #12]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3714      	adds	r7, #20
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c282:	699b      	ldr	r3, [r3, #24]
 800c284:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c28c:	69db      	ldr	r3, [r3, #28]
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	4013      	ands	r3, r2
 800c292:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	0c1b      	lsrs	r3, r3, #16
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3714      	adds	r7, #20
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2b6:	699b      	ldr	r3, [r3, #24]
 800c2b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2c0:	69db      	ldr	r3, [r3, #28]
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	b29b      	uxth	r3, r3
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3714      	adds	r7, #20
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c2e8:	78fb      	ldrb	r3, [r7, #3]
 800c2ea:	015a      	lsls	r2, r3, #5
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2fe:	695b      	ldr	r3, [r3, #20]
 800c300:	68ba      	ldr	r2, [r7, #8]
 800c302:	4013      	ands	r3, r2
 800c304:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c306:	68bb      	ldr	r3, [r7, #8]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3714      	adds	r7, #20
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c314:	b480      	push	{r7}
 800c316:	b087      	sub	sp, #28
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	460b      	mov	r3, r1
 800c31e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c32a:	691b      	ldr	r3, [r3, #16]
 800c32c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c336:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c338:	78fb      	ldrb	r3, [r7, #3]
 800c33a:	f003 030f 	and.w	r3, r3, #15
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	fa22 f303 	lsr.w	r3, r2, r3
 800c344:	01db      	lsls	r3, r3, #7
 800c346:	b2db      	uxtb	r3, r3
 800c348:	693a      	ldr	r2, [r7, #16]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c34e:	78fb      	ldrb	r3, [r7, #3]
 800c350:	015a      	lsls	r2, r3, #5
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	4413      	add	r3, r2
 800c356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	693a      	ldr	r2, [r7, #16]
 800c35e:	4013      	ands	r3, r2
 800c360:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c362:	68bb      	ldr	r3, [r7, #8]
}
 800c364:	4618      	mov	r0, r3
 800c366:	371c      	adds	r7, #28
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	695b      	ldr	r3, [r3, #20]
 800c37c:	f003 0301 	and.w	r3, r3, #1
}
 800c380:	4618      	mov	r0, r3
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b085      	sub	sp, #20
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c3aa:	f023 0307 	bic.w	r3, r3, #7
 800c3ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c3c4:	2300      	movs	r3, #0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3714      	adds	r7, #20
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr
	...

0800c3d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b087      	sub	sp, #28
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	460b      	mov	r3, r1
 800c3de:	607a      	str	r2, [r7, #4]
 800c3e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	333c      	adds	r3, #60	; 0x3c
 800c3ea:	3304      	adds	r3, #4
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	4a26      	ldr	r2, [pc, #152]	; (800c48c <USB_EP0_OutStart+0xb8>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d90a      	bls.n	800c40e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c408:	d101      	bne.n	800c40e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c40a:	2300      	movs	r3, #0
 800c40c:	e037      	b.n	800c47e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c414:	461a      	mov	r2, r3
 800c416:	2300      	movs	r3, #0
 800c418:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c420:	691b      	ldr	r3, [r3, #16]
 800c422:	697a      	ldr	r2, [r7, #20]
 800c424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c428:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c42c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	697a      	ldr	r2, [r7, #20]
 800c438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c43c:	f043 0318 	orr.w	r3, r3, #24
 800c440:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	697a      	ldr	r2, [r7, #20]
 800c44c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c450:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c454:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c456:	7afb      	ldrb	r3, [r7, #11]
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d10f      	bne.n	800c47c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c462:	461a      	mov	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	697a      	ldr	r2, [r7, #20]
 800c472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c476:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c47a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	371c      	adds	r7, #28
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	4f54300a 	.word	0x4f54300a

0800c490 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c498:	2300      	movs	r3, #0
 800c49a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	60fb      	str	r3, [r7, #12]
 800c4a2:	4a13      	ldr	r2, [pc, #76]	; (800c4f0 <USB_CoreReset+0x60>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d901      	bls.n	800c4ac <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800c4a8:	2303      	movs	r3, #3
 800c4aa:	e01a      	b.n	800c4e2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	daf3      	bge.n	800c49c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	691b      	ldr	r3, [r3, #16]
 800c4bc:	f043 0201 	orr.w	r2, r3, #1
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	60fb      	str	r3, [r7, #12]
 800c4ca:	4a09      	ldr	r2, [pc, #36]	; (800c4f0 <USB_CoreReset+0x60>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d901      	bls.n	800c4d4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800c4d0:	2303      	movs	r3, #3
 800c4d2:	e006      	b.n	800c4e2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	691b      	ldr	r3, [r3, #16]
 800c4d8:	f003 0301 	and.w	r3, r3, #1
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d0f1      	beq.n	800c4c4 <USB_CoreReset+0x34>

  return HAL_OK;
 800c4e0:	2300      	movs	r3, #0
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3714      	adds	r7, #20
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop
 800c4f0:	00030d40 	.word	0x00030d40

0800c4f4 <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	603b      	str	r3, [r7, #0]
 800c500:	4613      	mov	r3, r2
 800c502:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 800c504:	bf00      	nop
 800c506:	4b18      	ldr	r3, [pc, #96]	; (800c568 <sx126x_hal_write+0x74>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a18      	ldr	r2, [pc, #96]	; (800c56c <sx126x_hal_write+0x78>)
 800c50c:	8812      	ldrh	r2, [r2, #0]
 800c50e:	4611      	mov	r1, r2
 800c510:	4618      	mov	r0, r3
 800c512:	f7f9 f88d 	bl	8005630 <HAL_GPIO_ReadPin>
 800c516:	4603      	mov	r3, r0
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d0f4      	beq.n	800c506 <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800c51c:	4b14      	ldr	r3, [pc, #80]	; (800c570 <sx126x_hal_write+0x7c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a14      	ldr	r2, [pc, #80]	; (800c574 <sx126x_hal_write+0x80>)
 800c522:	8811      	ldrh	r1, [r2, #0]
 800c524:	2200      	movs	r2, #0
 800c526:	4618      	mov	r0, r3
 800c528:	f7f9 f89a 	bl	8005660 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 800c52c:	88fa      	ldrh	r2, [r7, #6]
 800c52e:	2364      	movs	r3, #100	; 0x64
 800c530:	68b9      	ldr	r1, [r7, #8]
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f7fc ff17 	bl	8009366 <HAL_SPI_Transmit>
 800c538:	4603      	mov	r3, r0
 800c53a:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 800c53c:	8c3a      	ldrh	r2, [r7, #32]
 800c53e:	2364      	movs	r3, #100	; 0x64
 800c540:	6839      	ldr	r1, [r7, #0]
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f7fc ff0f 	bl	8009366 <HAL_SPI_Transmit>
 800c548:	4603      	mov	r3, r0
 800c54a:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800c54c:	4b08      	ldr	r3, [pc, #32]	; (800c570 <sx126x_hal_write+0x7c>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a08      	ldr	r2, [pc, #32]	; (800c574 <sx126x_hal_write+0x80>)
 800c552:	8811      	ldrh	r1, [r2, #0]
 800c554:	2201      	movs	r2, #1
 800c556:	4618      	mov	r0, r3
 800c558:	f7f9 f882 	bl	8005660 <HAL_GPIO_WritePin>
    return status;
 800c55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3718      	adds	r7, #24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	2000061c 	.word	0x2000061c
 800c56c:	20000618 	.word	0x20000618
 800c570:	2000060c 	.word	0x2000060c
 800c574:	2000060a 	.word	0x2000060a

0800c578 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 800c578:	b580      	push	{r7, lr}
 800c57a:	b088      	sub	sp, #32
 800c57c:	af02      	add	r7, sp, #8
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	603b      	str	r3, [r7, #0]
 800c584:	4613      	mov	r3, r2
 800c586:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 800c588:	bf00      	nop
 800c58a:	4b1e      	ldr	r3, [pc, #120]	; (800c604 <sx126x_hal_read+0x8c>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4a1e      	ldr	r2, [pc, #120]	; (800c608 <sx126x_hal_read+0x90>)
 800c590:	8812      	ldrh	r2, [r2, #0]
 800c592:	4611      	mov	r1, r2
 800c594:	4618      	mov	r0, r3
 800c596:	f7f9 f84b 	bl	8005630 <HAL_GPIO_ReadPin>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d0f4      	beq.n	800c58a <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800c5a0:	4b1a      	ldr	r3, [pc, #104]	; (800c60c <sx126x_hal_read+0x94>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a1a      	ldr	r2, [pc, #104]	; (800c610 <sx126x_hal_read+0x98>)
 800c5a6:	8811      	ldrh	r1, [r2, #0]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7f9 f858 	bl	8005660 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 800c5b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	2364      	movs	r3, #100	; 0x64
 800c5b8:	68b9      	ldr	r1, [r7, #8]
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f7fc fed3 	bl	8009366 <HAL_SPI_Transmit>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 800c5c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	18d1      	adds	r1, r2, r3
 800c5cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	88fa      	ldrh	r2, [r7, #6]
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	2264      	movs	r2, #100	; 0x64
 800c5da:	9200      	str	r2, [sp, #0]
 800c5dc:	683a      	ldr	r2, [r7, #0]
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f7fc fffd 	bl	80095de <HAL_SPI_TransmitReceive>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800c5e8:	4b08      	ldr	r3, [pc, #32]	; (800c60c <sx126x_hal_read+0x94>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a08      	ldr	r2, [pc, #32]	; (800c610 <sx126x_hal_read+0x98>)
 800c5ee:	8811      	ldrh	r1, [r2, #0]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7f9 f834 	bl	8005660 <HAL_GPIO_WritePin>
    return status;
 800c5f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3718      	adds	r7, #24
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	2000061c 	.word	0x2000061c
 800c608:	20000618 	.word	0x20000618
 800c60c:	2000060c 	.word	0x2000060c
 800c610:	2000060a 	.word	0x2000060a

0800c614 <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	460b      	mov	r3, r1
 800c61e:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 800c620:	4a05      	ldr	r2, [pc, #20]	; (800c638 <set_NSS_pin+0x24>)
 800c622:	887b      	ldrh	r3, [r7, #2]
 800c624:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 800c626:	4a05      	ldr	r2, [pc, #20]	; (800c63c <set_NSS_pin+0x28>)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6013      	str	r3, [r2, #0]
}
 800c62c:	bf00      	nop
 800c62e:	370c      	adds	r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr
 800c638:	2000060a 	.word	0x2000060a
 800c63c:	2000060c 	.word	0x2000060c

0800c640 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	460b      	mov	r3, r1
 800c64a:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 800c64c:	4a05      	ldr	r2, [pc, #20]	; (800c664 <set_BUSY_pin+0x24>)
 800c64e:	887b      	ldrh	r3, [r7, #2]
 800c650:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 800c652:	4a05      	ldr	r2, [pc, #20]	; (800c668 <set_BUSY_pin+0x28>)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6013      	str	r3, [r2, #0]
}
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr
 800c664:	20000618 	.word	0x20000618
 800c668:	2000061c 	.word	0x2000061c

0800c66c <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	460b      	mov	r3, r1
 800c676:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 800c678:	4a05      	ldr	r2, [pc, #20]	; (800c690 <set_NRESET_pin+0x24>)
 800c67a:	887b      	ldrh	r3, [r7, #2]
 800c67c:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 800c67e:	4a05      	ldr	r2, [pc, #20]	; (800c694 <set_NRESET_pin+0x28>)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6013      	str	r3, [r2, #0]
}
 800c684:	bf00      	nop
 800c686:	370c      	adds	r7, #12
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr
 800c690:	20000610 	.word	0x20000610
 800c694:	20000614 	.word	0x20000614

0800c698 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 800c6a4:	4a05      	ldr	r2, [pc, #20]	; (800c6bc <set_DIO1_pin+0x24>)
 800c6a6:	887b      	ldrh	r3, [r7, #2]
 800c6a8:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 800c6aa:	4a05      	ldr	r2, [pc, #20]	; (800c6c0 <set_DIO1_pin+0x28>)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6013      	str	r3, [r2, #0]
}
 800c6b0:	bf00      	nop
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr
 800c6bc:	20000620 	.word	0x20000620
 800c6c0:	20000624 	.word	0x20000624

0800c6c4 <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 800c6c4:	b084      	sub	sp, #16
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	f107 0c08 	add.w	ip, r7, #8
 800c6ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 800c6d2:	4b07      	ldr	r3, [pc, #28]	; (800c6f0 <set_hspi+0x2c>)
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f107 0308 	add.w	r3, r7, #8
 800c6da:	2258      	movs	r2, #88	; 0x58
 800c6dc:	4619      	mov	r1, r3
 800c6de:	f006 f837 	bl	8012750 <memcpy>
}
 800c6e2:	bf00      	nop
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c6ea:	b004      	add	sp, #16
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	20000628 	.word	0x20000628

0800c6f4 <Tx_setup>:

void Tx_setup(){
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b086      	sub	sp, #24
 800c6f8:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 800c6fa:	4b66      	ldr	r3, [pc, #408]	; (800c894 <Tx_setup+0x1a0>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a66      	ldr	r2, [pc, #408]	; (800c898 <Tx_setup+0x1a4>)
 800c700:	8811      	ldrh	r1, [r2, #0]
 800c702:	2201      	movs	r2, #1
 800c704:	4618      	mov	r0, r3
 800c706:	f7f8 ffab 	bl	8005660 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800c70a:	4b64      	ldr	r3, [pc, #400]	; (800c89c <Tx_setup+0x1a8>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a64      	ldr	r2, [pc, #400]	; (800c8a0 <Tx_setup+0x1ac>)
 800c710:	8811      	ldrh	r1, [r2, #0]
 800c712:	2200      	movs	r2, #0
 800c714:	4618      	mov	r0, r3
 800c716:	f7f8 ffa3 	bl	8005660 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800c71a:	2032      	movs	r0, #50	; 0x32
 800c71c:	f7f8 fa32 	bl	8004b84 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 800c720:	4b5e      	ldr	r3, [pc, #376]	; (800c89c <Tx_setup+0x1a8>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a5e      	ldr	r2, [pc, #376]	; (800c8a0 <Tx_setup+0x1ac>)
 800c726:	8811      	ldrh	r1, [r2, #0]
 800c728:	2201      	movs	r2, #1
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7f8 ff98 	bl	8005660 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 800c730:	2100      	movs	r1, #0
 800c732:	485c      	ldr	r0, [pc, #368]	; (800c8a4 <Tx_setup+0x1b0>)
 800c734:	f000 f8f2 	bl	800c91c <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 800c738:	4b5b      	ldr	r3, [pc, #364]	; (800c8a8 <Tx_setup+0x1b4>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4619      	mov	r1, r3
 800c73e:	4859      	ldr	r0, [pc, #356]	; (800c8a4 <Tx_setup+0x1b0>)
 800c740:	f000 fa76 	bl	800cc30 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 800c744:	4b59      	ldr	r3, [pc, #356]	; (800c8ac <Tx_setup+0x1b8>)
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	4619      	mov	r1, r3
 800c74a:	4856      	ldr	r0, [pc, #344]	; (800c8a4 <Tx_setup+0x1b0>)
 800c74c:	f000 faaa 	bl	800cca4 <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 800c750:	4b57      	ldr	r3, [pc, #348]	; (800c8b0 <Tx_setup+0x1bc>)
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	4619      	mov	r1, r3
 800c756:	4853      	ldr	r0, [pc, #332]	; (800c8a4 <Tx_setup+0x1b0>)
 800c758:	f000 f977 	bl	800ca4a <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 800c75c:	2101      	movs	r1, #1
 800c75e:	4851      	ldr	r0, [pc, #324]	; (800c8a4 <Tx_setup+0x1b0>)
 800c760:	f000 fa24 	bl	800cbac <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 800c764:	4b53      	ldr	r3, [pc, #332]	; (800c8b4 <Tx_setup+0x1c0>)
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	2264      	movs	r2, #100	; 0x64
 800c76a:	4619      	mov	r1, r3
 800c76c:	484d      	ldr	r0, [pc, #308]	; (800c8a4 <Tx_setup+0x1b0>)
 800c76e:	f000 fa37 	bl	800cbe0 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 800c772:	4b51      	ldr	r3, [pc, #324]	; (800c8b8 <Tx_setup+0x1c4>)
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	4619      	mov	r1, r3
 800c778:	484a      	ldr	r0, [pc, #296]	; (800c8a4 <Tx_setup+0x1b0>)
 800c77a:	f000 f903 	bl	800c984 <sx126x_cal>
    HAL_Delay(50);
 800c77e:	2032      	movs	r0, #50	; 0x32
 800c780:	f7f8 fa00 	bl	8004b84 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 800c784:	4b4d      	ldr	r3, [pc, #308]	; (800c8bc <Tx_setup+0x1c8>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	4619      	mov	r1, r3
 800c78a:	4846      	ldr	r0, [pc, #280]	; (800c8a4 <Tx_setup+0x1b0>)
 800c78c:	f000 f8e0 	bl	800c950 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 800c790:	4b4b      	ldr	r3, [pc, #300]	; (800c8c0 <Tx_setup+0x1cc>)
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	4a4b      	ldr	r2, [pc, #300]	; (800c8c4 <Tx_setup+0x1d0>)
 800c796:	7812      	ldrb	r2, [r2, #0]
 800c798:	4619      	mov	r1, r3
 800c79a:	4842      	ldr	r0, [pc, #264]	; (800c8a4 <Tx_setup+0x1b0>)
 800c79c:	f000 f90c 	bl	800c9b8 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 800c7a0:	2004      	movs	r0, #4
 800c7a2:	f005 ffc5 	bl	8012730 <malloc>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 800c7aa:	4b47      	ldr	r3, [pc, #284]	; (800c8c8 <Tx_setup+0x1d4>)
 800c7ac:	781a      	ldrb	r2, [r3, #0]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 800c7b2:	4b46      	ldr	r3, [pc, #280]	; (800c8cc <Tx_setup+0x1d8>)
 800c7b4:	781a      	ldrb	r2, [r3, #0]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 800c7ba:	4b45      	ldr	r3, [pc, #276]	; (800c8d0 <Tx_setup+0x1dc>)
 800c7bc:	781a      	ldrb	r2, [r3, #0]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 800c7c2:	4b44      	ldr	r3, [pc, #272]	; (800c8d4 <Tx_setup+0x1e0>)
 800c7c4:	781a      	ldrb	r2, [r3, #0]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 800c7ca:	68f9      	ldr	r1, [r7, #12]
 800c7cc:	4835      	ldr	r0, [pc, #212]	; (800c8a4 <Tx_setup+0x1b0>)
 800c7ce:	f000 f917 	bl	800ca00 <sx126x_set_pa_cfg>
    free(params);
 800c7d2:	68f8      	ldr	r0, [r7, #12]
 800c7d4:	f005 ffb4 	bl	8012740 <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 800c7d8:	4b3f      	ldr	r3, [pc, #252]	; (800c8d8 <Tx_setup+0x1e4>)
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	b25b      	sxtb	r3, r3
 800c7de:	4a3f      	ldr	r2, [pc, #252]	; (800c8dc <Tx_setup+0x1e8>)
 800c7e0:	7812      	ldrb	r2, [r2, #0]
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	482f      	ldr	r0, [pc, #188]	; (800c8a4 <Tx_setup+0x1b0>)
 800c7e6:	f000 fa77 	bl	800ccd8 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 800c7ea:	4b3d      	ldr	r3, [pc, #244]	; (800c8e0 <Tx_setup+0x1ec>)
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	4a3d      	ldr	r2, [pc, #244]	; (800c8e4 <Tx_setup+0x1f0>)
 800c7f0:	7812      	ldrb	r2, [r2, #0]
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	482b      	ldr	r0, [pc, #172]	; (800c8a4 <Tx_setup+0x1b0>)
 800c7f6:	f000 fb2d 	bl	800ce54 <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 800c7fa:	2004      	movs	r0, #4
 800c7fc:	f005 ff98 	bl	8012730 <malloc>
 800c800:	4603      	mov	r3, r0
 800c802:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 800c804:	4b38      	ldr	r3, [pc, #224]	; (800c8e8 <Tx_setup+0x1f4>)
 800c806:	781a      	ldrb	r2, [r3, #0]
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 800c80c:	4b37      	ldr	r3, [pc, #220]	; (800c8ec <Tx_setup+0x1f8>)
 800c80e:	781a      	ldrb	r2, [r3, #0]
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 800c814:	4b36      	ldr	r3, [pc, #216]	; (800c8f0 <Tx_setup+0x1fc>)
 800c816:	781a      	ldrb	r2, [r3, #0]
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 800c81c:	4b35      	ldr	r3, [pc, #212]	; (800c8f4 <Tx_setup+0x200>)
 800c81e:	781a      	ldrb	r2, [r3, #0]
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 800c824:	68b9      	ldr	r1, [r7, #8]
 800c826:	481f      	ldr	r0, [pc, #124]	; (800c8a4 <Tx_setup+0x1b0>)
 800c828:	f000 fa7a 	bl	800cd20 <sx126x_set_lora_mod_params>
    free(mod_params);
 800c82c:	68b8      	ldr	r0, [r7, #8]
 800c82e:	f005 ff87 	bl	8012740 <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 800c832:	2006      	movs	r0, #6
 800c834:	f005 ff7c 	bl	8012730 <malloc>
 800c838:	4603      	mov	r3, r0
 800c83a:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 800c83c:	4b2e      	ldr	r3, [pc, #184]	; (800c8f8 <Tx_setup+0x204>)
 800c83e:	881a      	ldrh	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 800c844:	4b2d      	ldr	r3, [pc, #180]	; (800c8fc <Tx_setup+0x208>)
 800c846:	781a      	ldrb	r2, [r3, #0]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 800c84c:	4b2c      	ldr	r3, [pc, #176]	; (800c900 <Tx_setup+0x20c>)
 800c84e:	781a      	ldrb	r2, [r3, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 800c854:	4b2b      	ldr	r3, [pc, #172]	; (800c904 <Tx_setup+0x210>)
 800c856:	781a      	ldrb	r2, [r3, #0]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 800c85c:	4b2a      	ldr	r3, [pc, #168]	; (800c908 <Tx_setup+0x214>)
 800c85e:	781a      	ldrb	r2, [r3, #0]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 800c864:	6879      	ldr	r1, [r7, #4]
 800c866:	480f      	ldr	r0, [pc, #60]	; (800c8a4 <Tx_setup+0x1b0>)
 800c868:	f000 fa86 	bl	800cd78 <sx126x_set_lora_pkt_params>
    free(lora_params);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f005 ff67 	bl	8012740 <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 800c872:	4b26      	ldr	r3, [pc, #152]	; (800c90c <Tx_setup+0x218>)
 800c874:	8819      	ldrh	r1, [r3, #0]
 800c876:	4b26      	ldr	r3, [pc, #152]	; (800c910 <Tx_setup+0x21c>)
 800c878:	881a      	ldrh	r2, [r3, #0]
 800c87a:	4b26      	ldr	r3, [pc, #152]	; (800c914 <Tx_setup+0x220>)
 800c87c:	8818      	ldrh	r0, [r3, #0]
 800c87e:	4b26      	ldr	r3, [pc, #152]	; (800c918 <Tx_setup+0x224>)
 800c880:	881b      	ldrh	r3, [r3, #0]
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	4603      	mov	r3, r0
 800c886:	4807      	ldr	r0, [pc, #28]	; (800c8a4 <Tx_setup+0x1b0>)
 800c888:	f000 f94c 	bl	800cb24 <sx126x_set_dio_irq_params>

}
 800c88c:	bf00      	nop
 800c88e:	3710      	adds	r7, #16
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	20000614 	.word	0x20000614
 800c898:	20000610 	.word	0x20000610
 800c89c:	2000060c 	.word	0x2000060c
 800c8a0:	2000060a 	.word	0x2000060a
 800c8a4:	20000628 	.word	0x20000628
 800c8a8:	2000000c 	.word	0x2000000c
 800c8ac:	20000010 	.word	0x20000010
 800c8b0:	20000011 	.word	0x20000011
 800c8b4:	20000012 	.word	0x20000012
 800c8b8:	20000014 	.word	0x20000014
 800c8bc:	20000013 	.word	0x20000013
 800c8c0:	20000015 	.word	0x20000015
 800c8c4:	20000016 	.word	0x20000016
 800c8c8:	20000017 	.word	0x20000017
 800c8cc:	20000018 	.word	0x20000018
 800c8d0:	20000680 	.word	0x20000680
 800c8d4:	20000019 	.word	0x20000019
 800c8d8:	2000001a 	.word	0x2000001a
 800c8dc:	2000001b 	.word	0x2000001b
 800c8e0:	20000681 	.word	0x20000681
 800c8e4:	20000682 	.word	0x20000682
 800c8e8:	2000001c 	.word	0x2000001c
 800c8ec:	2000001d 	.word	0x2000001d
 800c8f0:	2000001e 	.word	0x2000001e
 800c8f4:	20000683 	.word	0x20000683
 800c8f8:	20000020 	.word	0x20000020
 800c8fc:	20000684 	.word	0x20000684
 800c900:	20000022 	.word	0x20000022
 800c904:	20000023 	.word	0x20000023
 800c908:	20000685 	.word	0x20000685
 800c90c:	20000024 	.word	0x20000024
 800c910:	20000026 	.word	0x20000026
 800c914:	20000686 	.word	0x20000686
 800c918:	20000688 	.word	0x20000688

0800c91c <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b086      	sub	sp, #24
 800c920:	af02      	add	r7, sp, #8
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	460b      	mov	r3, r1
 800c926:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 800c928:	2300      	movs	r3, #0
 800c92a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 800c92c:	2380      	movs	r3, #128	; 0x80
 800c92e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 800c930:	78fb      	ldrb	r3, [r7, #3]
 800c932:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800c934:	f107 010c 	add.w	r1, r7, #12
 800c938:	2300      	movs	r3, #0
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	2300      	movs	r3, #0
 800c93e:	2202      	movs	r2, #2
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f7ff fdd7 	bl	800c4f4 <sx126x_hal_write>
 800c946:	4603      	mov	r3, r0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b086      	sub	sp, #24
 800c954:	af02      	add	r7, sp, #8
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	460b      	mov	r3, r1
 800c95a:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 800c95c:	2300      	movs	r3, #0
 800c95e:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 800c960:	2396      	movs	r3, #150	; 0x96
 800c962:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 800c964:	78fb      	ldrb	r3, [r7, #3]
 800c966:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800c968:	f107 010c 	add.w	r1, r7, #12
 800c96c:	2300      	movs	r3, #0
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	2300      	movs	r3, #0
 800c972:	2202      	movs	r2, #2
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7ff fdbd 	bl	800c4f4 <sx126x_hal_write>
 800c97a:	4603      	mov	r3, r0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b086      	sub	sp, #24
 800c988:	af02      	add	r7, sp, #8
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	460b      	mov	r3, r1
 800c98e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 800c990:	2300      	movs	r3, #0
 800c992:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 800c994:	2389      	movs	r3, #137	; 0x89
 800c996:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 800c998:	78fb      	ldrb	r3, [r7, #3]
 800c99a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800c99c:	f107 010c 	add.w	r1, r7, #12
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	2202      	movs	r2, #2
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7ff fda3 	bl	800c4f4 <sx126x_hal_write>
 800c9ae:	4603      	mov	r3, r0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af02      	add	r7, sp, #8
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	70fb      	strb	r3, [r7, #3]
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 800c9c8:	4b0c      	ldr	r3, [pc, #48]	; (800c9fc <sx126x_cal_img_hex+0x44>)
 800c9ca:	881b      	ldrh	r3, [r3, #0]
 800c9cc:	81bb      	strh	r3, [r7, #12]
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 800c9d2:	2398      	movs	r3, #152	; 0x98
 800c9d4:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 800c9d6:	78fb      	ldrb	r3, [r7, #3]
 800c9d8:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 800c9da:	78bb      	ldrb	r3, [r7, #2]
 800c9dc:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 800c9de:	f107 010c 	add.w	r1, r7, #12
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	9300      	str	r3, [sp, #0]
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	2203      	movs	r2, #3
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f7ff fd82 	bl	800c4f4 <sx126x_hal_write>
 800c9f0:	4603      	mov	r3, r0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	08017ae8 	.word	0x08017ae8

0800ca00 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b086      	sub	sp, #24
 800ca04:	af02      	add	r7, sp, #8
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	60bb      	str	r3, [r7, #8]
 800ca0e:	2300      	movs	r3, #0
 800ca10:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 800ca12:	2395      	movs	r3, #149	; 0x95
 800ca14:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	785b      	ldrb	r3, [r3, #1]
 800ca20:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	789b      	ldrb	r3, [r3, #2]
 800ca26:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	78db      	ldrb	r3, [r3, #3]
 800ca2c:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800ca2e:	f107 0108 	add.w	r1, r7, #8
 800ca32:	2300      	movs	r3, #0
 800ca34:	9300      	str	r3, [sp, #0]
 800ca36:	2300      	movs	r3, #0
 800ca38:	2205      	movs	r2, #5
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7ff fd5a 	bl	800c4f4 <sx126x_hal_write>
 800ca40:	4603      	mov	r3, r0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b086      	sub	sp, #24
 800ca4e:	af02      	add	r7, sp, #8
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	460b      	mov	r3, r1
 800ca54:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 800ca56:	2300      	movs	r3, #0
 800ca58:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 800ca5a:	2393      	movs	r3, #147	; 0x93
 800ca5c:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 800ca5e:	78fb      	ldrb	r3, [r7, #3]
 800ca60:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 800ca62:	f107 010c 	add.w	r1, r7, #12
 800ca66:	2300      	movs	r3, #0
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	2202      	movs	r2, #2
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7ff fd40 	bl	800c4f4 <sx126x_hal_write>
 800ca74:	4603      	mov	r3, r0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
	...

0800ca80 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b088      	sub	sp, #32
 800ca84:	af02      	add	r7, sp, #8
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	607a      	str	r2, [r7, #4]
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	817b      	strh	r3, [r7, #10]
 800ca90:	4613      	mov	r3, r2
 800ca92:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 800ca94:	4b0e      	ldr	r3, [pc, #56]	; (800cad0 <sx126x_write_register+0x50>)
 800ca96:	881b      	ldrh	r3, [r3, #0]
 800ca98:	82bb      	strh	r3, [r7, #20]
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 800ca9e:	230d      	movs	r3, #13
 800caa0:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 800caa2:	897b      	ldrh	r3, [r7, #10]
 800caa4:	0a1b      	lsrs	r3, r3, #8
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 800caac:	897b      	ldrh	r3, [r7, #10]
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800cab2:	7a7b      	ldrb	r3, [r7, #9]
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	f107 0114 	add.w	r1, r7, #20
 800caba:	9300      	str	r3, [sp, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2203      	movs	r2, #3
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	f7ff fd17 	bl	800c4f4 <sx126x_hal_write>
 800cac6:	4603      	mov	r3, r0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3718      	adds	r7, #24
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	08017ae8 	.word	0x08017ae8

0800cad4 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b088      	sub	sp, #32
 800cad8:	af02      	add	r7, sp, #8
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	607a      	str	r2, [r7, #4]
 800cade:	461a      	mov	r2, r3
 800cae0:	460b      	mov	r3, r1
 800cae2:	817b      	strh	r3, [r7, #10]
 800cae4:	4613      	mov	r3, r2
 800cae6:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 800cae8:	2300      	movs	r3, #0
 800caea:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 800caec:	2303      	movs	r3, #3
 800caee:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 800caf0:	231d      	movs	r3, #29
 800caf2:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 800caf4:	897b      	ldrh	r3, [r7, #10]
 800caf6:	0a1b      	lsrs	r3, r3, #8
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 800cafe:	897b      	ldrh	r3, [r7, #10]
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800cb04:	f107 0110 	add.w	r1, r7, #16
 800cb08:	7a7b      	ldrb	r3, [r7, #9]
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2204      	movs	r2, #4
 800cb10:	68f8      	ldr	r0, [r7, #12]
 800cb12:	f7ff fd31 	bl	800c578 <sx126x_hal_read>
 800cb16:	4603      	mov	r3, r0
 800cb18:	75fb      	strb	r3, [r7, #23]

    return status;
 800cb1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3718      	adds	r7, #24
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b08a      	sub	sp, #40	; 0x28
 800cb28:	af02      	add	r7, sp, #8
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	4608      	mov	r0, r1
 800cb2e:	4611      	mov	r1, r2
 800cb30:	461a      	mov	r2, r3
 800cb32:	4603      	mov	r3, r0
 800cb34:	817b      	strh	r3, [r7, #10]
 800cb36:	460b      	mov	r3, r1
 800cb38:	813b      	strh	r3, [r7, #8]
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 800cb3e:	2300      	movs	r3, #0
 800cb40:	617b      	str	r3, [r7, #20]
 800cb42:	f107 0318 	add.w	r3, r7, #24
 800cb46:	2200      	movs	r2, #0
 800cb48:	601a      	str	r2, [r3, #0]
 800cb4a:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 800cb4c:	2308      	movs	r3, #8
 800cb4e:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800cb50:	897b      	ldrh	r3, [r7, #10]
 800cb52:	0a1b      	lsrs	r3, r3, #8
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800cb5a:	897b      	ldrh	r3, [r7, #10]
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 800cb60:	893b      	ldrh	r3, [r7, #8]
 800cb62:	0a1b      	lsrs	r3, r3, #8
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 800cb6a:	893b      	ldrh	r3, [r7, #8]
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 800cb70:	88fb      	ldrh	r3, [r7, #6]
 800cb72:	0a1b      	lsrs	r3, r3, #8
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 800cb7a:	88fb      	ldrh	r3, [r7, #6]
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 800cb80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cb82:	0a1b      	lsrs	r3, r3, #8
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 800cb8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800cb90:	f107 0114 	add.w	r1, r7, #20
 800cb94:	2300      	movs	r3, #0
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	2300      	movs	r3, #0
 800cb9a:	2209      	movs	r2, #9
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f7ff fca9 	bl	800c4f4 <sx126x_hal_write>
 800cba2:	4603      	mov	r3, r0
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3720      	adds	r7, #32
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b086      	sub	sp, #24
 800cbb0:	af02      	add	r7, sp, #8
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 800cbb8:	2300      	movs	r3, #0
 800cbba:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 800cbbc:	239d      	movs	r3, #157	; 0x9d
 800cbbe:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 800cbc0:	78fb      	ldrb	r3, [r7, #3]
 800cbc2:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 800cbc4:	f107 010c 	add.w	r1, r7, #12
 800cbc8:	2300      	movs	r3, #0
 800cbca:	9300      	str	r3, [sp, #0]
 800cbcc:	2300      	movs	r3, #0
 800cbce:	2202      	movs	r2, #2
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7ff fc8f 	bl	800c4f4 <sx126x_hal_write>
 800cbd6:	4603      	mov	r3, r0
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3710      	adds	r7, #16
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b088      	sub	sp, #32
 800cbe4:	af02      	add	r7, sp, #8
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	460b      	mov	r3, r1
 800cbea:	607a      	str	r2, [r7, #4]
 800cbec:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 800cbee:	2300      	movs	r3, #0
 800cbf0:	613b      	str	r3, [r7, #16]
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 800cbf6:	2397      	movs	r3, #151	; 0x97
 800cbf8:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 800cbfa:	7afb      	ldrb	r3, [r7, #11]
 800cbfc:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	0c1b      	lsrs	r3, r3, #16
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	0a1b      	lsrs	r3, r3, #8
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800cc14:	f107 0110 	add.w	r1, r7, #16
 800cc18:	2300      	movs	r3, #0
 800cc1a:	9300      	str	r3, [sp, #0]
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	2205      	movs	r2, #5
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f7ff fc67 	bl	800c4f4 <sx126x_hal_write>
 800cc26:	4603      	mov	r3, r0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3718      	adds	r7, #24
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800cc3a:	6838      	ldr	r0, [r7, #0]
 800cc3c:	f000 f92e 	bl	800ce9c <sx126x_convert_freq_in_hz_to_pll_step>
 800cc40:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800cc42:	68f9      	ldr	r1, [r7, #12]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 f805 	bl	800cc54 <sx126x_set_rf_freq_in_pll_steps>
 800cc4a:	4603      	mov	r3, r0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3710      	adds	r7, #16
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af02      	add	r7, sp, #8
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 800cc5e:	2300      	movs	r3, #0
 800cc60:	60bb      	str	r3, [r7, #8]
 800cc62:	2300      	movs	r3, #0
 800cc64:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 800cc66:	2386      	movs	r3, #134	; 0x86
 800cc68:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	0e1b      	lsrs	r3, r3, #24
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	0c1b      	lsrs	r3, r3, #16
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	0a1b      	lsrs	r3, r3, #8
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800cc88:	f107 0108 	add.w	r1, r7, #8
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	2300      	movs	r3, #0
 800cc92:	2205      	movs	r2, #5
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7ff fc2d 	bl	800c4f4 <sx126x_hal_write>
 800cc9a:	4603      	mov	r3, r0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b086      	sub	sp, #24
 800cca8:	af02      	add	r7, sp, #8
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	460b      	mov	r3, r1
 800ccae:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 800ccb4:	238a      	movs	r3, #138	; 0x8a
 800ccb6:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 800ccb8:	78fb      	ldrb	r3, [r7, #3]
 800ccba:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800ccbc:	f107 010c 	add.w	r1, r7, #12
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	9300      	str	r3, [sp, #0]
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	2202      	movs	r2, #2
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f7ff fc13 	bl	800c4f4 <sx126x_hal_write>
 800ccce:	4603      	mov	r3, r0
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af02      	add	r7, sp, #8
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	460b      	mov	r3, r1
 800cce2:	70fb      	strb	r3, [r7, #3]
 800cce4:	4613      	mov	r3, r2
 800cce6:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 800cce8:	4b0c      	ldr	r3, [pc, #48]	; (800cd1c <sx126x_set_tx_params+0x44>)
 800ccea:	881b      	ldrh	r3, [r3, #0]
 800ccec:	81bb      	strh	r3, [r7, #12]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 800ccf2:	238e      	movs	r3, #142	; 0x8e
 800ccf4:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 800ccf6:	78fb      	ldrb	r3, [r7, #3]
 800ccf8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 800ccfa:	78bb      	ldrb	r3, [r7, #2]
 800ccfc:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800ccfe:	f107 010c 	add.w	r1, r7, #12
 800cd02:	2300      	movs	r3, #0
 800cd04:	9300      	str	r3, [sp, #0]
 800cd06:	2300      	movs	r3, #0
 800cd08:	2203      	movs	r2, #3
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7ff fbf2 	bl	800c4f4 <sx126x_hal_write>
 800cd10:	4603      	mov	r3, r0
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	08017ae8 	.word	0x08017ae8

0800cd20 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b086      	sub	sp, #24
 800cd24:	af02      	add	r7, sp, #8
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800cd2a:	2303      	movs	r3, #3
 800cd2c:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 800cd2e:	2300      	movs	r3, #0
 800cd30:	60bb      	str	r3, [r7, #8]
 800cd32:	2300      	movs	r3, #0
 800cd34:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 800cd36:	238b      	movs	r3, #139	; 0x8b
 800cd38:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	785b      	ldrb	r3, [r3, #1]
 800cd44:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	789b      	ldrb	r3, [r3, #2]
 800cd4a:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	78db      	ldrb	r3, [r3, #3]
 800cd50:	f003 0301 	and.w	r3, r3, #1
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800cd58:	f107 0108 	add.w	r1, r7, #8
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	2300      	movs	r3, #0
 800cd62:	2205      	movs	r2, #5
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7ff fbc5 	bl	800c4f4 <sx126x_hal_write>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3710      	adds	r7, #16
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b088      	sub	sp, #32
 800cd7c:	af02      	add	r7, sp, #8
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800cd82:	2303      	movs	r3, #3
 800cd84:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 800cd86:	2300      	movs	r3, #0
 800cd88:	613b      	str	r3, [r7, #16]
 800cd8a:	f107 0314 	add.w	r3, r7, #20
 800cd8e:	2100      	movs	r1, #0
 800cd90:	460a      	mov	r2, r1
 800cd92:	801a      	strh	r2, [r3, #0]
 800cd94:	460a      	mov	r2, r1
 800cd96:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 800cd98:	238c      	movs	r3, #140	; 0x8c
 800cd9a:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	881b      	ldrh	r3, [r3, #0]
 800cda0:	0a1b      	lsrs	r3, r3, #8
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	881b      	ldrh	r3, [r3, #0]
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	789b      	ldrb	r3, [r3, #2]
 800cdb4:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	78db      	ldrb	r3, [r3, #3]
 800cdba:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	791b      	ldrb	r3, [r3, #4]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d001      	beq.n	800cdc8 <sx126x_set_lora_pkt_params+0x50>
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	e000      	b.n	800cdca <sx126x_set_lora_pkt_params+0x52>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	795b      	ldrb	r3, [r3, #5]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d001      	beq.n	800cdd8 <sx126x_set_lora_pkt_params+0x60>
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	e000      	b.n	800cdda <sx126x_set_lora_pkt_params+0x62>
 800cdd8:	2300      	movs	r3, #0
 800cdda:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800cddc:	f107 0110 	add.w	r1, r7, #16
 800cde0:	2300      	movs	r3, #0
 800cde2:	9300      	str	r3, [sp, #0]
 800cde4:	2300      	movs	r3, #0
 800cde6:	2207      	movs	r2, #7
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f7ff fb83 	bl	800c4f4 <sx126x_hal_write>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800cdf2:	7dfb      	ldrb	r3, [r7, #23]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d127      	bne.n	800ce48 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800cdfc:	f107 020f 	add.w	r2, r7, #15
 800ce00:	2301      	movs	r3, #1
 800ce02:	f240 7136 	movw	r1, #1846	; 0x736
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f7ff fe64 	bl	800cad4 <sx126x_read_register>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800ce10:	7dfb      	ldrb	r3, [r7, #23]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d118      	bne.n	800ce48 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	795b      	ldrb	r3, [r3, #5]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d005      	beq.n	800ce2a <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800ce1e:	7bfb      	ldrb	r3, [r7, #15]
 800ce20:	f023 0304 	bic.w	r3, r3, #4
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	73fb      	strb	r3, [r7, #15]
 800ce28:	e004      	b.n	800ce34 <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800ce2a:	7bfb      	ldrb	r3, [r7, #15]
 800ce2c:	f043 0304 	orr.w	r3, r3, #4
 800ce30:	b2db      	uxtb	r3, r3
 800ce32:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800ce34:	f107 020f 	add.w	r2, r7, #15
 800ce38:	2301      	movs	r3, #1
 800ce3a:	f240 7136 	movw	r1, #1846	; 0x736
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7ff fe1e 	bl	800ca80 <sx126x_write_register>
 800ce44:	4603      	mov	r3, r0
 800ce46:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800ce48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3718      	adds	r7, #24
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
	...

0800ce54 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af02      	add	r7, sp, #8
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	70fb      	strb	r3, [r7, #3]
 800ce60:	4613      	mov	r3, r2
 800ce62:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 800ce64:	4b0c      	ldr	r3, [pc, #48]	; (800ce98 <sx126x_set_buffer_base_address+0x44>)
 800ce66:	881b      	ldrh	r3, [r3, #0]
 800ce68:	81bb      	strh	r3, [r7, #12]
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 800ce6e:	238f      	movs	r3, #143	; 0x8f
 800ce70:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 800ce72:	78fb      	ldrb	r3, [r7, #3]
 800ce74:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 800ce76:	78bb      	ldrb	r3, [r7, #2]
 800ce78:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800ce7a:	f107 010c 	add.w	r1, r7, #12
 800ce7e:	2300      	movs	r3, #0
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	2300      	movs	r3, #0
 800ce84:	2203      	movs	r2, #3
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f7ff fb34 	bl	800c4f4 <sx126x_hal_write>
 800ce8c:	4603      	mov	r3, r0
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	08017ae8 	.word	0x08017ae8

0800ce9c <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b085      	sub	sp, #20
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	4a0f      	ldr	r2, [pc, #60]	; (800cee4 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800cea8:	fba2 2303 	umull	r2, r3, r2, r3
 800ceac:	0b1b      	lsrs	r3, r3, #12
 800ceae:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f643 5209 	movw	r2, #15625	; 0x3d09
 800ceb6:	fb02 f303 	mul.w	r3, r2, r3
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	1ad3      	subs	r3, r2, r3
 800cebe:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	039b      	lsls	r3, r3, #14
 800cec8:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800cecc:	3304      	adds	r3, #4
 800cece:	4905      	ldr	r1, [pc, #20]	; (800cee4 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800ced0:	fba1 1303 	umull	r1, r3, r1, r3
 800ced4:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800ced6:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3714      	adds	r7, #20
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr
 800cee4:	431bde83 	.word	0x431bde83

0800cee8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	460b      	mov	r3, r1
 800cef2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cef4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cef8:	f005 fa96 	bl	8012428 <USBD_static_malloc>
 800cefc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d105      	bne.n	800cf10 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2200      	movs	r2, #0
 800cf08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cf0c:	2302      	movs	r3, #2
 800cf0e:	e066      	b.n	800cfde <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	7c1b      	ldrb	r3, [r3, #16]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d119      	bne.n	800cf54 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cf20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf24:	2202      	movs	r2, #2
 800cf26:	2181      	movs	r1, #129	; 0x81
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f005 f95a 	bl	80121e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2201      	movs	r2, #1
 800cf32:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cf34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf38:	2202      	movs	r2, #2
 800cf3a:	2101      	movs	r1, #1
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f005 f950 	bl	80121e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2201      	movs	r2, #1
 800cf46:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2210      	movs	r2, #16
 800cf4e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cf52:	e016      	b.n	800cf82 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cf54:	2340      	movs	r3, #64	; 0x40
 800cf56:	2202      	movs	r2, #2
 800cf58:	2181      	movs	r1, #129	; 0x81
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f005 f941 	bl	80121e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2201      	movs	r2, #1
 800cf64:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cf66:	2340      	movs	r3, #64	; 0x40
 800cf68:	2202      	movs	r2, #2
 800cf6a:	2101      	movs	r1, #1
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f005 f938 	bl	80121e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2201      	movs	r2, #1
 800cf76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2210      	movs	r2, #16
 800cf7e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cf82:	2308      	movs	r3, #8
 800cf84:	2203      	movs	r2, #3
 800cf86:	2182      	movs	r1, #130	; 0x82
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f005 f92a 	bl	80121e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2201      	movs	r2, #1
 800cf92:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	7c1b      	ldrb	r3, [r3, #16]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d109      	bne.n	800cfcc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cfbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfc2:	2101      	movs	r1, #1
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f005 f9fb 	bl	80123c0 <USBD_LL_PrepareReceive>
 800cfca:	e007      	b.n	800cfdc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cfd2:	2340      	movs	r3, #64	; 0x40
 800cfd4:	2101      	movs	r1, #1
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f005 f9f2 	bl	80123c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b082      	sub	sp, #8
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
 800cfee:	460b      	mov	r3, r1
 800cff0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cff2:	2181      	movs	r1, #129	; 0x81
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f005 f91a 	bl	801222e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d000:	2101      	movs	r1, #1
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f005 f913 	bl	801222e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d010:	2182      	movs	r1, #130	; 0x82
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f005 f90b 	bl	801222e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00e      	beq.n	800d050 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d042:	4618      	mov	r0, r3
 800d044:	f005 f9fe 	bl	8012444 <USBD_static_free>
    pdev->pClassData = NULL;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	3708      	adds	r7, #8
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
	...

0800d05c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b086      	sub	sp, #24
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d06c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d06e:	2300      	movs	r3, #0
 800d070:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d072:	2300      	movs	r3, #0
 800d074:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d076:	2300      	movs	r3, #0
 800d078:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d101      	bne.n	800d084 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d080:	2303      	movs	r3, #3
 800d082:	e0af      	b.n	800d1e4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d03f      	beq.n	800d110 <USBD_CDC_Setup+0xb4>
 800d090:	2b20      	cmp	r3, #32
 800d092:	f040 809f 	bne.w	800d1d4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	88db      	ldrh	r3, [r3, #6]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d02e      	beq.n	800d0fc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	b25b      	sxtb	r3, r3
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	da16      	bge.n	800d0d6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	683a      	ldr	r2, [r7, #0]
 800d0b2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d0b4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d0b6:	683a      	ldr	r2, [r7, #0]
 800d0b8:	88d2      	ldrh	r2, [r2, #6]
 800d0ba:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	88db      	ldrh	r3, [r3, #6]
 800d0c0:	2b07      	cmp	r3, #7
 800d0c2:	bf28      	it	cs
 800d0c4:	2307      	movcs	r3, #7
 800d0c6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	89fa      	ldrh	r2, [r7, #14]
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f001 fae9 	bl	800e6a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d0d4:	e085      	b.n	800d1e2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	785a      	ldrb	r2, [r3, #1]
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	88db      	ldrh	r3, [r3, #6]
 800d0e4:	b2da      	uxtb	r2, r3
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d0ec:	6939      	ldr	r1, [r7, #16]
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	88db      	ldrh	r3, [r3, #6]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f001 fb02 	bl	800e6fe <USBD_CtlPrepareRx>
      break;
 800d0fa:	e072      	b.n	800d1e2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	683a      	ldr	r2, [r7, #0]
 800d106:	7850      	ldrb	r0, [r2, #1]
 800d108:	2200      	movs	r2, #0
 800d10a:	6839      	ldr	r1, [r7, #0]
 800d10c:	4798      	blx	r3
      break;
 800d10e:	e068      	b.n	800d1e2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	785b      	ldrb	r3, [r3, #1]
 800d114:	2b0b      	cmp	r3, #11
 800d116:	d852      	bhi.n	800d1be <USBD_CDC_Setup+0x162>
 800d118:	a201      	add	r2, pc, #4	; (adr r2, 800d120 <USBD_CDC_Setup+0xc4>)
 800d11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d11e:	bf00      	nop
 800d120:	0800d151 	.word	0x0800d151
 800d124:	0800d1cd 	.word	0x0800d1cd
 800d128:	0800d1bf 	.word	0x0800d1bf
 800d12c:	0800d1bf 	.word	0x0800d1bf
 800d130:	0800d1bf 	.word	0x0800d1bf
 800d134:	0800d1bf 	.word	0x0800d1bf
 800d138:	0800d1bf 	.word	0x0800d1bf
 800d13c:	0800d1bf 	.word	0x0800d1bf
 800d140:	0800d1bf 	.word	0x0800d1bf
 800d144:	0800d1bf 	.word	0x0800d1bf
 800d148:	0800d17b 	.word	0x0800d17b
 800d14c:	0800d1a5 	.word	0x0800d1a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d156:	b2db      	uxtb	r3, r3
 800d158:	2b03      	cmp	r3, #3
 800d15a:	d107      	bne.n	800d16c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d15c:	f107 030a 	add.w	r3, r7, #10
 800d160:	2202      	movs	r2, #2
 800d162:	4619      	mov	r1, r3
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f001 fa9e 	bl	800e6a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d16a:	e032      	b.n	800d1d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d16c:	6839      	ldr	r1, [r7, #0]
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f001 fa28 	bl	800e5c4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d174:	2303      	movs	r3, #3
 800d176:	75fb      	strb	r3, [r7, #23]
          break;
 800d178:	e02b      	b.n	800d1d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d180:	b2db      	uxtb	r3, r3
 800d182:	2b03      	cmp	r3, #3
 800d184:	d107      	bne.n	800d196 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d186:	f107 030d 	add.w	r3, r7, #13
 800d18a:	2201      	movs	r2, #1
 800d18c:	4619      	mov	r1, r3
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f001 fa89 	bl	800e6a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d194:	e01d      	b.n	800d1d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d196:	6839      	ldr	r1, [r7, #0]
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f001 fa13 	bl	800e5c4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	75fb      	strb	r3, [r7, #23]
          break;
 800d1a2:	e016      	b.n	800d1d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	2b03      	cmp	r3, #3
 800d1ae:	d00f      	beq.n	800d1d0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f001 fa06 	bl	800e5c4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d1b8:	2303      	movs	r3, #3
 800d1ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d1bc:	e008      	b.n	800d1d0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d1be:	6839      	ldr	r1, [r7, #0]
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f001 f9ff 	bl	800e5c4 <USBD_CtlError>
          ret = USBD_FAIL;
 800d1c6:	2303      	movs	r3, #3
 800d1c8:	75fb      	strb	r3, [r7, #23]
          break;
 800d1ca:	e002      	b.n	800d1d2 <USBD_CDC_Setup+0x176>
          break;
 800d1cc:	bf00      	nop
 800d1ce:	e008      	b.n	800d1e2 <USBD_CDC_Setup+0x186>
          break;
 800d1d0:	bf00      	nop
      }
      break;
 800d1d2:	e006      	b.n	800d1e2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d1d4:	6839      	ldr	r1, [r7, #0]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f001 f9f4 	bl	800e5c4 <USBD_CtlError>
      ret = USBD_FAIL;
 800d1dc:	2303      	movs	r3, #3
 800d1de:	75fb      	strb	r3, [r7, #23]
      break;
 800d1e0:	bf00      	nop
  }

  return (uint8_t)ret;
 800d1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3718      	adds	r7, #24
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d1fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d206:	2b00      	cmp	r3, #0
 800d208:	d101      	bne.n	800d20e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d20a:	2303      	movs	r3, #3
 800d20c:	e04f      	b.n	800d2ae <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d214:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d216:	78fa      	ldrb	r2, [r7, #3]
 800d218:	6879      	ldr	r1, [r7, #4]
 800d21a:	4613      	mov	r3, r2
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	4413      	add	r3, r2
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	440b      	add	r3, r1
 800d224:	3318      	adds	r3, #24
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d029      	beq.n	800d280 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d22c:	78fa      	ldrb	r2, [r7, #3]
 800d22e:	6879      	ldr	r1, [r7, #4]
 800d230:	4613      	mov	r3, r2
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	4413      	add	r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	440b      	add	r3, r1
 800d23a:	3318      	adds	r3, #24
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	78f9      	ldrb	r1, [r7, #3]
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	460b      	mov	r3, r1
 800d244:	00db      	lsls	r3, r3, #3
 800d246:	1a5b      	subs	r3, r3, r1
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4403      	add	r3, r0
 800d24c:	3344      	adds	r3, #68	; 0x44
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	fbb2 f1f3 	udiv	r1, r2, r3
 800d254:	fb03 f301 	mul.w	r3, r3, r1
 800d258:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d110      	bne.n	800d280 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d25e:	78fa      	ldrb	r2, [r7, #3]
 800d260:	6879      	ldr	r1, [r7, #4]
 800d262:	4613      	mov	r3, r2
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	4413      	add	r3, r2
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	440b      	add	r3, r1
 800d26c:	3318      	adds	r3, #24
 800d26e:	2200      	movs	r2, #0
 800d270:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d272:	78f9      	ldrb	r1, [r7, #3]
 800d274:	2300      	movs	r3, #0
 800d276:	2200      	movs	r2, #0
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f005 f880 	bl	801237e <USBD_LL_Transmit>
 800d27e:	e015      	b.n	800d2ac <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	2200      	movs	r2, #0
 800d284:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d28e:	691b      	ldr	r3, [r3, #16]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00b      	beq.n	800d2ac <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d29a:	691b      	ldr	r3, [r3, #16]
 800d29c:	68ba      	ldr	r2, [r7, #8]
 800d29e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d2a8:	78fa      	ldrb	r2, [r7, #3]
 800d2aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b084      	sub	sp, #16
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
 800d2be:	460b      	mov	r3, r1
 800d2c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d101      	bne.n	800d2d8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d2d4:	2303      	movs	r3, #3
 800d2d6:	e015      	b.n	800d304 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d2d8:	78fb      	ldrb	r3, [r7, #3]
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f005 f890 	bl	8012402 <USBD_LL_GetRxDataSize>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	68fa      	ldr	r2, [r7, #12]
 800d2f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d2fe:	4611      	mov	r1, r2
 800d300:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3710      	adds	r7, #16
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d31a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d101      	bne.n	800d326 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d322:	2303      	movs	r3, #3
 800d324:	e01b      	b.n	800d35e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d015      	beq.n	800d35c <USBD_CDC_EP0_RxReady+0x50>
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d336:	2bff      	cmp	r3, #255	; 0xff
 800d338:	d010      	beq.n	800d35c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d348:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d350:	b292      	uxth	r2, r2
 800d352:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	22ff      	movs	r2, #255	; 0xff
 800d358:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3710      	adds	r7, #16
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
	...

0800d368 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2243      	movs	r2, #67	; 0x43
 800d374:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d376:	4b03      	ldr	r3, [pc, #12]	; (800d384 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d378:	4618      	mov	r0, r3
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr
 800d384:	200000b0 	.word	0x200000b0

0800d388 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d388:	b480      	push	{r7}
 800d38a:	b083      	sub	sp, #12
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2243      	movs	r2, #67	; 0x43
 800d394:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d396:	4b03      	ldr	r3, [pc, #12]	; (800d3a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d398:	4618      	mov	r0, r3
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr
 800d3a4:	2000006c 	.word	0x2000006c

0800d3a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2243      	movs	r2, #67	; 0x43
 800d3b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d3b6:	4b03      	ldr	r3, [pc, #12]	; (800d3c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr
 800d3c4:	200000f4 	.word	0x200000f4

0800d3c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	220a      	movs	r2, #10
 800d3d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d3d6:	4b03      	ldr	r3, [pc, #12]	; (800d3e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	370c      	adds	r7, #12
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr
 800d3e4:	20000028 	.word	0x20000028

0800d3e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d101      	bne.n	800d3fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d3f8:	2303      	movs	r3, #3
 800d3fa:	e004      	b.n	800d406 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	683a      	ldr	r2, [r7, #0]
 800d400:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	370c      	adds	r7, #12
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr

0800d412 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d412:	b480      	push	{r7}
 800d414:	b087      	sub	sp, #28
 800d416:	af00      	add	r7, sp, #0
 800d418:	60f8      	str	r0, [r7, #12]
 800d41a:	60b9      	str	r1, [r7, #8]
 800d41c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d424:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d101      	bne.n	800d430 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d42c:	2303      	movs	r3, #3
 800d42e:	e008      	b.n	800d442 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	68ba      	ldr	r2, [r7, #8]
 800d434:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	371c      	adds	r7, #28
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr

0800d44e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d44e:	b480      	push	{r7}
 800d450:	b085      	sub	sp, #20
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
 800d456:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d45e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d101      	bne.n	800d46a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d466:	2303      	movs	r3, #3
 800d468:	e004      	b.n	800d474 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	683a      	ldr	r2, [r7, #0]
 800d46e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d472:	2300      	movs	r3, #0
}
 800d474:	4618      	mov	r0, r3
 800d476:	3714      	adds	r7, #20
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d48e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d49a:	2303      	movs	r3, #3
 800d49c:	e016      	b.n	800d4cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	7c1b      	ldrb	r3, [r3, #16]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d109      	bne.n	800d4ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d4ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4b0:	2101      	movs	r1, #1
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f004 ff84 	bl	80123c0 <USBD_LL_PrepareReceive>
 800d4b8:	e007      	b.n	800d4ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d4c0:	2340      	movs	r3, #64	; 0x40
 800d4c2:	2101      	movs	r1, #1
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f004 ff7b 	bl	80123c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d4ca:	2300      	movs	r3, #0
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3710      	adds	r7, #16
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b086      	sub	sp, #24
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d101      	bne.n	800d4ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d4e8:	2303      	movs	r3, #3
 800d4ea:	e01f      	b.n	800d52c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2200      	movs	r2, #0
 800d500:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d003      	beq.n	800d512 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	68ba      	ldr	r2, [r7, #8]
 800d50e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2201      	movs	r2, #1
 800d516:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	79fa      	ldrb	r2, [r7, #7]
 800d51e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	f004 fdf7 	bl	8012114 <USBD_LL_Init>
 800d526:	4603      	mov	r3, r0
 800d528:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d52a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3718      	adds	r7, #24
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d53e:	2300      	movs	r3, #0
 800d540:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d101      	bne.n	800d54c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d548:	2303      	movs	r3, #3
 800d54a:	e016      	b.n	800d57a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	683a      	ldr	r2, [r7, #0]
 800d550:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d00b      	beq.n	800d578 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d568:	f107 020e 	add.w	r2, r7, #14
 800d56c:	4610      	mov	r0, r2
 800d56e:	4798      	blx	r3
 800d570:	4602      	mov	r2, r0
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3710      	adds	r7, #16
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b082      	sub	sp, #8
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f004 fe0e 	bl	80121ac <USBD_LL_Start>
 800d590:	4603      	mov	r3, r0
}
 800d592:	4618      	mov	r0, r3
 800d594:	3708      	adds	r7, #8
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d59a:	b480      	push	{r7}
 800d59c:	b083      	sub	sp, #12
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d5a2:	2300      	movs	r3, #0
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d5bc:	2303      	movs	r3, #3
 800d5be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d009      	beq.n	800d5de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	78fa      	ldrb	r2, [r7, #3]
 800d5d4:	4611      	mov	r1, r2
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	4798      	blx	r3
 800d5da:	4603      	mov	r3, r0
 800d5dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3710      	adds	r7, #16
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d007      	beq.n	800d60e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	78fa      	ldrb	r2, [r7, #3]
 800d608:	4611      	mov	r1, r2
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	4798      	blx	r3
  }

  return USBD_OK;
 800d60e:	2300      	movs	r3, #0
}
 800d610:	4618      	mov	r0, r3
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d628:	6839      	ldr	r1, [r7, #0]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f000 ff90 	bl	800e550 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2201      	movs	r2, #1
 800d634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d63e:	461a      	mov	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d64c:	f003 031f 	and.w	r3, r3, #31
 800d650:	2b02      	cmp	r3, #2
 800d652:	d01a      	beq.n	800d68a <USBD_LL_SetupStage+0x72>
 800d654:	2b02      	cmp	r3, #2
 800d656:	d822      	bhi.n	800d69e <USBD_LL_SetupStage+0x86>
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d002      	beq.n	800d662 <USBD_LL_SetupStage+0x4a>
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d00a      	beq.n	800d676 <USBD_LL_SetupStage+0x5e>
 800d660:	e01d      	b.n	800d69e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d668:	4619      	mov	r1, r3
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 fa62 	bl	800db34 <USBD_StdDevReq>
 800d670:	4603      	mov	r3, r0
 800d672:	73fb      	strb	r3, [r7, #15]
      break;
 800d674:	e020      	b.n	800d6b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d67c:	4619      	mov	r1, r3
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 fac6 	bl	800dc10 <USBD_StdItfReq>
 800d684:	4603      	mov	r3, r0
 800d686:	73fb      	strb	r3, [r7, #15]
      break;
 800d688:	e016      	b.n	800d6b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d690:	4619      	mov	r1, r3
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 fb05 	bl	800dca2 <USBD_StdEPReq>
 800d698:	4603      	mov	r3, r0
 800d69a:	73fb      	strb	r3, [r7, #15]
      break;
 800d69c:	e00c      	b.n	800d6b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d6a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f004 fddd 	bl	801226c <USBD_LL_StallEP>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	73fb      	strb	r3, [r7, #15]
      break;
 800d6b6:	bf00      	nop
  }

  return ret;
 800d6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3710      	adds	r7, #16
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}

0800d6c2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d6c2:	b580      	push	{r7, lr}
 800d6c4:	b086      	sub	sp, #24
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	60f8      	str	r0, [r7, #12]
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	607a      	str	r2, [r7, #4]
 800d6ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d6d0:	7afb      	ldrb	r3, [r7, #11]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d138      	bne.n	800d748 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d6dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d6e4:	2b03      	cmp	r3, #3
 800d6e6:	d14a      	bne.n	800d77e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	689a      	ldr	r2, [r3, #8]
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d913      	bls.n	800d71c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	689a      	ldr	r2, [r3, #8]
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	1ad2      	subs	r2, r2, r3
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	68da      	ldr	r2, [r3, #12]
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	689b      	ldr	r3, [r3, #8]
 800d70a:	4293      	cmp	r3, r2
 800d70c:	bf28      	it	cs
 800d70e:	4613      	movcs	r3, r2
 800d710:	461a      	mov	r2, r3
 800d712:	6879      	ldr	r1, [r7, #4]
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	f001 f80f 	bl	800e738 <USBD_CtlContinueRx>
 800d71a:	e030      	b.n	800d77e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d722:	b2db      	uxtb	r3, r3
 800d724:	2b03      	cmp	r3, #3
 800d726:	d10b      	bne.n	800d740 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d72e:	691b      	ldr	r3, [r3, #16]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d005      	beq.n	800d740 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	f001 f80a 	bl	800e75a <USBD_CtlSendStatus>
 800d746:	e01a      	b.n	800d77e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	2b03      	cmp	r3, #3
 800d752:	d114      	bne.n	800d77e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d75a:	699b      	ldr	r3, [r3, #24]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00e      	beq.n	800d77e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d766:	699b      	ldr	r3, [r3, #24]
 800d768:	7afa      	ldrb	r2, [r7, #11]
 800d76a:	4611      	mov	r1, r2
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	4798      	blx	r3
 800d770:	4603      	mov	r3, r0
 800d772:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d774:	7dfb      	ldrb	r3, [r7, #23]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d001      	beq.n	800d77e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d77a:	7dfb      	ldrb	r3, [r7, #23]
 800d77c:	e000      	b.n	800d780 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3718      	adds	r7, #24
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b086      	sub	sp, #24
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	460b      	mov	r3, r1
 800d792:	607a      	str	r2, [r7, #4]
 800d794:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d796:	7afb      	ldrb	r3, [r7, #11]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d16b      	bne.n	800d874 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	3314      	adds	r3, #20
 800d7a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d7a8:	2b02      	cmp	r3, #2
 800d7aa:	d156      	bne.n	800d85a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	689a      	ldr	r2, [r3, #8]
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	68db      	ldr	r3, [r3, #12]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d914      	bls.n	800d7e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	689a      	ldr	r2, [r3, #8]
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	1ad2      	subs	r2, r2, r3
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	6879      	ldr	r1, [r7, #4]
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f000 ff84 	bl	800e6dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	2100      	movs	r1, #0
 800d7da:	68f8      	ldr	r0, [r7, #12]
 800d7dc:	f004 fdf0 	bl	80123c0 <USBD_LL_PrepareReceive>
 800d7e0:	e03b      	b.n	800d85a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	68da      	ldr	r2, [r3, #12]
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d11c      	bne.n	800d828 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	685a      	ldr	r2, [r3, #4]
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d316      	bcc.n	800d828 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	685a      	ldr	r2, [r3, #4]
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d804:	429a      	cmp	r2, r3
 800d806:	d20f      	bcs.n	800d828 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d808:	2200      	movs	r2, #0
 800d80a:	2100      	movs	r1, #0
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	f000 ff65 	bl	800e6dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2200      	movs	r2, #0
 800d816:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d81a:	2300      	movs	r3, #0
 800d81c:	2200      	movs	r2, #0
 800d81e:	2100      	movs	r1, #0
 800d820:	68f8      	ldr	r0, [r7, #12]
 800d822:	f004 fdcd 	bl	80123c0 <USBD_LL_PrepareReceive>
 800d826:	e018      	b.n	800d85a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	2b03      	cmp	r3, #3
 800d832:	d10b      	bne.n	800d84c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d005      	beq.n	800d84c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d84c:	2180      	movs	r1, #128	; 0x80
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f004 fd0c 	bl	801226c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d854:	68f8      	ldr	r0, [r7, #12]
 800d856:	f000 ff93 	bl	800e780 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d860:	2b01      	cmp	r3, #1
 800d862:	d122      	bne.n	800d8aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d864:	68f8      	ldr	r0, [r7, #12]
 800d866:	f7ff fe98 	bl	800d59a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2200      	movs	r2, #0
 800d86e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d872:	e01a      	b.n	800d8aa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	2b03      	cmp	r3, #3
 800d87e:	d114      	bne.n	800d8aa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d886:	695b      	ldr	r3, [r3, #20]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00e      	beq.n	800d8aa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d892:	695b      	ldr	r3, [r3, #20]
 800d894:	7afa      	ldrb	r2, [r7, #11]
 800d896:	4611      	mov	r1, r2
 800d898:	68f8      	ldr	r0, [r7, #12]
 800d89a:	4798      	blx	r3
 800d89c:	4603      	mov	r3, r0
 800d89e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d8a0:	7dfb      	ldrb	r3, [r7, #23]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d001      	beq.n	800d8aa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d8a6:	7dfb      	ldrb	r3, [r7, #23]
 800d8a8:	e000      	b.n	800d8ac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d8aa:	2300      	movs	r3, #0
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3718      	adds	r7, #24
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d101      	bne.n	800d8e8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d8e4:	2303      	movs	r3, #3
 800d8e6:	e02f      	b.n	800d948 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00f      	beq.n	800d912 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d009      	beq.n	800d912 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	687a      	ldr	r2, [r7, #4]
 800d908:	6852      	ldr	r2, [r2, #4]
 800d90a:	b2d2      	uxtb	r2, r2
 800d90c:	4611      	mov	r1, r2
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d912:	2340      	movs	r3, #64	; 0x40
 800d914:	2200      	movs	r2, #0
 800d916:	2100      	movs	r1, #0
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f004 fc62 	bl	80121e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2201      	movs	r2, #1
 800d922:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2240      	movs	r2, #64	; 0x40
 800d92a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d92e:	2340      	movs	r3, #64	; 0x40
 800d930:	2200      	movs	r2, #0
 800d932:	2180      	movs	r1, #128	; 0x80
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f004 fc54 	bl	80121e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2201      	movs	r2, #1
 800d93e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2240      	movs	r2, #64	; 0x40
 800d944:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d946:	2300      	movs	r3, #0
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	460b      	mov	r3, r1
 800d95a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	78fa      	ldrb	r2, [r7, #3]
 800d960:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	370c      	adds	r7, #12
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr

0800d970 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2204      	movs	r2, #4
 800d98a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	370c      	adds	r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b083      	sub	sp, #12
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	2b04      	cmp	r3, #4
 800d9ae:	d106      	bne.n	800d9be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d9b6:	b2da      	uxtb	r2, r3
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d9be:	2300      	movs	r3, #0
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	370c      	adds	r7, #12
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr

0800d9cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d101      	bne.n	800d9e2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d9de:	2303      	movs	r3, #3
 800d9e0:	e012      	b.n	800da08 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	2b03      	cmp	r3, #3
 800d9ec:	d10b      	bne.n	800da06 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9f4:	69db      	ldr	r3, [r3, #28]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d005      	beq.n	800da06 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da00:	69db      	ldr	r3, [r3, #28]
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da06:	2300      	movs	r3, #0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3708      	adds	r7, #8
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	460b      	mov	r3, r1
 800da1a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da22:	2b00      	cmp	r3, #0
 800da24:	d101      	bne.n	800da2a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800da26:	2303      	movs	r3, #3
 800da28:	e014      	b.n	800da54 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da30:	b2db      	uxtb	r3, r3
 800da32:	2b03      	cmp	r3, #3
 800da34:	d10d      	bne.n	800da52 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da3c:	6a1b      	ldr	r3, [r3, #32]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d007      	beq.n	800da52 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da48:	6a1b      	ldr	r3, [r3, #32]
 800da4a:	78fa      	ldrb	r2, [r7, #3]
 800da4c:	4611      	mov	r1, r2
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da52:	2300      	movs	r3, #0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	460b      	mov	r3, r1
 800da66:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d101      	bne.n	800da76 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800da72:	2303      	movs	r3, #3
 800da74:	e014      	b.n	800daa0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	2b03      	cmp	r3, #3
 800da80:	d10d      	bne.n	800da9e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d007      	beq.n	800da9e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da96:	78fa      	ldrb	r2, [r7, #3]
 800da98:	4611      	mov	r1, r2
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dab0:	2300      	movs	r3, #0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	370c      	adds	r7, #12
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr

0800dabe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b082      	sub	sp, #8
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2201      	movs	r2, #1
 800daca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d009      	beq.n	800daec <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	6852      	ldr	r2, [r2, #4]
 800dae4:	b2d2      	uxtb	r2, r2
 800dae6:	4611      	mov	r1, r2
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	4798      	blx	r3
  }

  return USBD_OK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3708      	adds	r7, #8
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800daf6:	b480      	push	{r7}
 800daf8:	b087      	sub	sp, #28
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	3301      	adds	r3, #1
 800db0c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800db14:	8a3b      	ldrh	r3, [r7, #16]
 800db16:	021b      	lsls	r3, r3, #8
 800db18:	b21a      	sxth	r2, r3
 800db1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800db1e:	4313      	orrs	r3, r2
 800db20:	b21b      	sxth	r3, r3
 800db22:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800db24:	89fb      	ldrh	r3, [r7, #14]
}
 800db26:	4618      	mov	r0, r3
 800db28:	371c      	adds	r7, #28
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
	...

0800db34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db3e:	2300      	movs	r3, #0
 800db40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db4a:	2b40      	cmp	r3, #64	; 0x40
 800db4c:	d005      	beq.n	800db5a <USBD_StdDevReq+0x26>
 800db4e:	2b40      	cmp	r3, #64	; 0x40
 800db50:	d853      	bhi.n	800dbfa <USBD_StdDevReq+0xc6>
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00b      	beq.n	800db6e <USBD_StdDevReq+0x3a>
 800db56:	2b20      	cmp	r3, #32
 800db58:	d14f      	bne.n	800dbfa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	6839      	ldr	r1, [r7, #0]
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	4798      	blx	r3
 800db68:	4603      	mov	r3, r0
 800db6a:	73fb      	strb	r3, [r7, #15]
      break;
 800db6c:	e04a      	b.n	800dc04 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	785b      	ldrb	r3, [r3, #1]
 800db72:	2b09      	cmp	r3, #9
 800db74:	d83b      	bhi.n	800dbee <USBD_StdDevReq+0xba>
 800db76:	a201      	add	r2, pc, #4	; (adr r2, 800db7c <USBD_StdDevReq+0x48>)
 800db78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db7c:	0800dbd1 	.word	0x0800dbd1
 800db80:	0800dbe5 	.word	0x0800dbe5
 800db84:	0800dbef 	.word	0x0800dbef
 800db88:	0800dbdb 	.word	0x0800dbdb
 800db8c:	0800dbef 	.word	0x0800dbef
 800db90:	0800dbaf 	.word	0x0800dbaf
 800db94:	0800dba5 	.word	0x0800dba5
 800db98:	0800dbef 	.word	0x0800dbef
 800db9c:	0800dbc7 	.word	0x0800dbc7
 800dba0:	0800dbb9 	.word	0x0800dbb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dba4:	6839      	ldr	r1, [r7, #0]
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 f9de 	bl	800df68 <USBD_GetDescriptor>
          break;
 800dbac:	e024      	b.n	800dbf8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dbae:	6839      	ldr	r1, [r7, #0]
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f000 fb43 	bl	800e23c <USBD_SetAddress>
          break;
 800dbb6:	e01f      	b.n	800dbf8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dbb8:	6839      	ldr	r1, [r7, #0]
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 fb82 	bl	800e2c4 <USBD_SetConfig>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	73fb      	strb	r3, [r7, #15]
          break;
 800dbc4:	e018      	b.n	800dbf8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dbc6:	6839      	ldr	r1, [r7, #0]
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 fc21 	bl	800e410 <USBD_GetConfig>
          break;
 800dbce:	e013      	b.n	800dbf8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dbd0:	6839      	ldr	r1, [r7, #0]
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f000 fc52 	bl	800e47c <USBD_GetStatus>
          break;
 800dbd8:	e00e      	b.n	800dbf8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dbda:	6839      	ldr	r1, [r7, #0]
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 fc81 	bl	800e4e4 <USBD_SetFeature>
          break;
 800dbe2:	e009      	b.n	800dbf8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dbe4:	6839      	ldr	r1, [r7, #0]
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 fc90 	bl	800e50c <USBD_ClrFeature>
          break;
 800dbec:	e004      	b.n	800dbf8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800dbee:	6839      	ldr	r1, [r7, #0]
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 fce7 	bl	800e5c4 <USBD_CtlError>
          break;
 800dbf6:	bf00      	nop
      }
      break;
 800dbf8:	e004      	b.n	800dc04 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dbfa:	6839      	ldr	r1, [r7, #0]
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f000 fce1 	bl	800e5c4 <USBD_CtlError>
      break;
 800dc02:	bf00      	nop
  }

  return ret;
 800dc04:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3710      	adds	r7, #16
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop

0800dc10 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc26:	2b40      	cmp	r3, #64	; 0x40
 800dc28:	d005      	beq.n	800dc36 <USBD_StdItfReq+0x26>
 800dc2a:	2b40      	cmp	r3, #64	; 0x40
 800dc2c:	d82f      	bhi.n	800dc8e <USBD_StdItfReq+0x7e>
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d001      	beq.n	800dc36 <USBD_StdItfReq+0x26>
 800dc32:	2b20      	cmp	r3, #32
 800dc34:	d12b      	bne.n	800dc8e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	2b02      	cmp	r3, #2
 800dc42:	d81d      	bhi.n	800dc80 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	889b      	ldrh	r3, [r3, #4]
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d813      	bhi.n	800dc76 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	6839      	ldr	r1, [r7, #0]
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	4798      	blx	r3
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	88db      	ldrh	r3, [r3, #6]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d110      	bne.n	800dc8a <USBD_StdItfReq+0x7a>
 800dc68:	7bfb      	ldrb	r3, [r7, #15]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d10d      	bne.n	800dc8a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 fd73 	bl	800e75a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dc74:	e009      	b.n	800dc8a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800dc76:	6839      	ldr	r1, [r7, #0]
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 fca3 	bl	800e5c4 <USBD_CtlError>
          break;
 800dc7e:	e004      	b.n	800dc8a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800dc80:	6839      	ldr	r1, [r7, #0]
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 fc9e 	bl	800e5c4 <USBD_CtlError>
          break;
 800dc88:	e000      	b.n	800dc8c <USBD_StdItfReq+0x7c>
          break;
 800dc8a:	bf00      	nop
      }
      break;
 800dc8c:	e004      	b.n	800dc98 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800dc8e:	6839      	ldr	r1, [r7, #0]
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f000 fc97 	bl	800e5c4 <USBD_CtlError>
      break;
 800dc96:	bf00      	nop
  }

  return ret;
 800dc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3710      	adds	r7, #16
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}

0800dca2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dca2:	b580      	push	{r7, lr}
 800dca4:	b084      	sub	sp, #16
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	6078      	str	r0, [r7, #4]
 800dcaa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dcac:	2300      	movs	r3, #0
 800dcae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	889b      	ldrh	r3, [r3, #4]
 800dcb4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dcbe:	2b40      	cmp	r3, #64	; 0x40
 800dcc0:	d007      	beq.n	800dcd2 <USBD_StdEPReq+0x30>
 800dcc2:	2b40      	cmp	r3, #64	; 0x40
 800dcc4:	f200 8145 	bhi.w	800df52 <USBD_StdEPReq+0x2b0>
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d00c      	beq.n	800dce6 <USBD_StdEPReq+0x44>
 800dccc:	2b20      	cmp	r3, #32
 800dcce:	f040 8140 	bne.w	800df52 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	6839      	ldr	r1, [r7, #0]
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	4798      	blx	r3
 800dce0:	4603      	mov	r3, r0
 800dce2:	73fb      	strb	r3, [r7, #15]
      break;
 800dce4:	e13a      	b.n	800df5c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	785b      	ldrb	r3, [r3, #1]
 800dcea:	2b03      	cmp	r3, #3
 800dcec:	d007      	beq.n	800dcfe <USBD_StdEPReq+0x5c>
 800dcee:	2b03      	cmp	r3, #3
 800dcf0:	f300 8129 	bgt.w	800df46 <USBD_StdEPReq+0x2a4>
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d07f      	beq.n	800ddf8 <USBD_StdEPReq+0x156>
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d03c      	beq.n	800dd76 <USBD_StdEPReq+0xd4>
 800dcfc:	e123      	b.n	800df46 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	2b02      	cmp	r3, #2
 800dd08:	d002      	beq.n	800dd10 <USBD_StdEPReq+0x6e>
 800dd0a:	2b03      	cmp	r3, #3
 800dd0c:	d016      	beq.n	800dd3c <USBD_StdEPReq+0x9a>
 800dd0e:	e02c      	b.n	800dd6a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd10:	7bbb      	ldrb	r3, [r7, #14]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d00d      	beq.n	800dd32 <USBD_StdEPReq+0x90>
 800dd16:	7bbb      	ldrb	r3, [r7, #14]
 800dd18:	2b80      	cmp	r3, #128	; 0x80
 800dd1a:	d00a      	beq.n	800dd32 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd1c:	7bbb      	ldrb	r3, [r7, #14]
 800dd1e:	4619      	mov	r1, r3
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f004 faa3 	bl	801226c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd26:	2180      	movs	r1, #128	; 0x80
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f004 fa9f 	bl	801226c <USBD_LL_StallEP>
 800dd2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dd30:	e020      	b.n	800dd74 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800dd32:	6839      	ldr	r1, [r7, #0]
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 fc45 	bl	800e5c4 <USBD_CtlError>
              break;
 800dd3a:	e01b      	b.n	800dd74 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	885b      	ldrh	r3, [r3, #2]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d10e      	bne.n	800dd62 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dd44:	7bbb      	ldrb	r3, [r7, #14]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00b      	beq.n	800dd62 <USBD_StdEPReq+0xc0>
 800dd4a:	7bbb      	ldrb	r3, [r7, #14]
 800dd4c:	2b80      	cmp	r3, #128	; 0x80
 800dd4e:	d008      	beq.n	800dd62 <USBD_StdEPReq+0xc0>
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	88db      	ldrh	r3, [r3, #6]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d104      	bne.n	800dd62 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd58:	7bbb      	ldrb	r3, [r7, #14]
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f004 fa85 	bl	801226c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 fcf9 	bl	800e75a <USBD_CtlSendStatus>

              break;
 800dd68:	e004      	b.n	800dd74 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800dd6a:	6839      	ldr	r1, [r7, #0]
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 fc29 	bl	800e5c4 <USBD_CtlError>
              break;
 800dd72:	bf00      	nop
          }
          break;
 800dd74:	e0ec      	b.n	800df50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	2b02      	cmp	r3, #2
 800dd80:	d002      	beq.n	800dd88 <USBD_StdEPReq+0xe6>
 800dd82:	2b03      	cmp	r3, #3
 800dd84:	d016      	beq.n	800ddb4 <USBD_StdEPReq+0x112>
 800dd86:	e030      	b.n	800ddea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd88:	7bbb      	ldrb	r3, [r7, #14]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d00d      	beq.n	800ddaa <USBD_StdEPReq+0x108>
 800dd8e:	7bbb      	ldrb	r3, [r7, #14]
 800dd90:	2b80      	cmp	r3, #128	; 0x80
 800dd92:	d00a      	beq.n	800ddaa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd94:	7bbb      	ldrb	r3, [r7, #14]
 800dd96:	4619      	mov	r1, r3
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f004 fa67 	bl	801226c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd9e:	2180      	movs	r1, #128	; 0x80
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f004 fa63 	bl	801226c <USBD_LL_StallEP>
 800dda6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dda8:	e025      	b.n	800ddf6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ddaa:	6839      	ldr	r1, [r7, #0]
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 fc09 	bl	800e5c4 <USBD_CtlError>
              break;
 800ddb2:	e020      	b.n	800ddf6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	885b      	ldrh	r3, [r3, #2]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d11b      	bne.n	800ddf4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ddbc:	7bbb      	ldrb	r3, [r7, #14]
 800ddbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d004      	beq.n	800ddd0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ddc6:	7bbb      	ldrb	r3, [r7, #14]
 800ddc8:	4619      	mov	r1, r3
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f004 fa6d 	bl	80122aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f000 fcc2 	bl	800e75a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dddc:	689b      	ldr	r3, [r3, #8]
 800ddde:	6839      	ldr	r1, [r7, #0]
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	4798      	blx	r3
 800dde4:	4603      	mov	r3, r0
 800dde6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800dde8:	e004      	b.n	800ddf4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ddea:	6839      	ldr	r1, [r7, #0]
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 fbe9 	bl	800e5c4 <USBD_CtlError>
              break;
 800ddf2:	e000      	b.n	800ddf6 <USBD_StdEPReq+0x154>
              break;
 800ddf4:	bf00      	nop
          }
          break;
 800ddf6:	e0ab      	b.n	800df50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	2b02      	cmp	r3, #2
 800de02:	d002      	beq.n	800de0a <USBD_StdEPReq+0x168>
 800de04:	2b03      	cmp	r3, #3
 800de06:	d032      	beq.n	800de6e <USBD_StdEPReq+0x1cc>
 800de08:	e097      	b.n	800df3a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de0a:	7bbb      	ldrb	r3, [r7, #14]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d007      	beq.n	800de20 <USBD_StdEPReq+0x17e>
 800de10:	7bbb      	ldrb	r3, [r7, #14]
 800de12:	2b80      	cmp	r3, #128	; 0x80
 800de14:	d004      	beq.n	800de20 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800de16:	6839      	ldr	r1, [r7, #0]
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f000 fbd3 	bl	800e5c4 <USBD_CtlError>
                break;
 800de1e:	e091      	b.n	800df44 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de24:	2b00      	cmp	r3, #0
 800de26:	da0b      	bge.n	800de40 <USBD_StdEPReq+0x19e>
 800de28:	7bbb      	ldrb	r3, [r7, #14]
 800de2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de2e:	4613      	mov	r3, r2
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	4413      	add	r3, r2
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	3310      	adds	r3, #16
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	4413      	add	r3, r2
 800de3c:	3304      	adds	r3, #4
 800de3e:	e00b      	b.n	800de58 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800de40:	7bbb      	ldrb	r3, [r7, #14]
 800de42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de46:	4613      	mov	r3, r2
 800de48:	009b      	lsls	r3, r3, #2
 800de4a:	4413      	add	r3, r2
 800de4c:	009b      	lsls	r3, r3, #2
 800de4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	4413      	add	r3, r2
 800de56:	3304      	adds	r3, #4
 800de58:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	2200      	movs	r2, #0
 800de5e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	2202      	movs	r2, #2
 800de64:	4619      	mov	r1, r3
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fc1d 	bl	800e6a6 <USBD_CtlSendData>
              break;
 800de6c:	e06a      	b.n	800df44 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800de6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de72:	2b00      	cmp	r3, #0
 800de74:	da11      	bge.n	800de9a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800de76:	7bbb      	ldrb	r3, [r7, #14]
 800de78:	f003 020f 	and.w	r2, r3, #15
 800de7c:	6879      	ldr	r1, [r7, #4]
 800de7e:	4613      	mov	r3, r2
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	4413      	add	r3, r2
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	440b      	add	r3, r1
 800de88:	3324      	adds	r3, #36	; 0x24
 800de8a:	881b      	ldrh	r3, [r3, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d117      	bne.n	800dec0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800de90:	6839      	ldr	r1, [r7, #0]
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 fb96 	bl	800e5c4 <USBD_CtlError>
                  break;
 800de98:	e054      	b.n	800df44 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800de9a:	7bbb      	ldrb	r3, [r7, #14]
 800de9c:	f003 020f 	and.w	r2, r3, #15
 800dea0:	6879      	ldr	r1, [r7, #4]
 800dea2:	4613      	mov	r3, r2
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	4413      	add	r3, r2
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	440b      	add	r3, r1
 800deac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800deb0:	881b      	ldrh	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d104      	bne.n	800dec0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800deb6:	6839      	ldr	r1, [r7, #0]
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 fb83 	bl	800e5c4 <USBD_CtlError>
                  break;
 800debe:	e041      	b.n	800df44 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dec0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	da0b      	bge.n	800dee0 <USBD_StdEPReq+0x23e>
 800dec8:	7bbb      	ldrb	r3, [r7, #14]
 800deca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dece:	4613      	mov	r3, r2
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	4413      	add	r3, r2
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	3310      	adds	r3, #16
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	4413      	add	r3, r2
 800dedc:	3304      	adds	r3, #4
 800dede:	e00b      	b.n	800def8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dee0:	7bbb      	ldrb	r3, [r7, #14]
 800dee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dee6:	4613      	mov	r3, r2
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	4413      	add	r3, r2
 800deec:	009b      	lsls	r3, r3, #2
 800deee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	4413      	add	r3, r2
 800def6:	3304      	adds	r3, #4
 800def8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800defa:	7bbb      	ldrb	r3, [r7, #14]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d002      	beq.n	800df06 <USBD_StdEPReq+0x264>
 800df00:	7bbb      	ldrb	r3, [r7, #14]
 800df02:	2b80      	cmp	r3, #128	; 0x80
 800df04:	d103      	bne.n	800df0e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	2200      	movs	r2, #0
 800df0a:	601a      	str	r2, [r3, #0]
 800df0c:	e00e      	b.n	800df2c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800df0e:	7bbb      	ldrb	r3, [r7, #14]
 800df10:	4619      	mov	r1, r3
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f004 f9e8 	bl	80122e8 <USBD_LL_IsStallEP>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d003      	beq.n	800df26 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	2201      	movs	r2, #1
 800df22:	601a      	str	r2, [r3, #0]
 800df24:	e002      	b.n	800df2c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	2200      	movs	r2, #0
 800df2a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	2202      	movs	r2, #2
 800df30:	4619      	mov	r1, r3
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 fbb7 	bl	800e6a6 <USBD_CtlSendData>
              break;
 800df38:	e004      	b.n	800df44 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800df3a:	6839      	ldr	r1, [r7, #0]
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f000 fb41 	bl	800e5c4 <USBD_CtlError>
              break;
 800df42:	bf00      	nop
          }
          break;
 800df44:	e004      	b.n	800df50 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800df46:	6839      	ldr	r1, [r7, #0]
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 fb3b 	bl	800e5c4 <USBD_CtlError>
          break;
 800df4e:	bf00      	nop
      }
      break;
 800df50:	e004      	b.n	800df5c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800df52:	6839      	ldr	r1, [r7, #0]
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 fb35 	bl	800e5c4 <USBD_CtlError>
      break;
 800df5a:	bf00      	nop
  }

  return ret;
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
	...

0800df68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800df72:	2300      	movs	r3, #0
 800df74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800df76:	2300      	movs	r3, #0
 800df78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800df7a:	2300      	movs	r3, #0
 800df7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	885b      	ldrh	r3, [r3, #2]
 800df82:	0a1b      	lsrs	r3, r3, #8
 800df84:	b29b      	uxth	r3, r3
 800df86:	3b01      	subs	r3, #1
 800df88:	2b06      	cmp	r3, #6
 800df8a:	f200 8128 	bhi.w	800e1de <USBD_GetDescriptor+0x276>
 800df8e:	a201      	add	r2, pc, #4	; (adr r2, 800df94 <USBD_GetDescriptor+0x2c>)
 800df90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df94:	0800dfb1 	.word	0x0800dfb1
 800df98:	0800dfc9 	.word	0x0800dfc9
 800df9c:	0800e009 	.word	0x0800e009
 800dfa0:	0800e1df 	.word	0x0800e1df
 800dfa4:	0800e1df 	.word	0x0800e1df
 800dfa8:	0800e17f 	.word	0x0800e17f
 800dfac:	0800e1ab 	.word	0x0800e1ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	7c12      	ldrb	r2, [r2, #16]
 800dfbc:	f107 0108 	add.w	r1, r7, #8
 800dfc0:	4610      	mov	r0, r2
 800dfc2:	4798      	blx	r3
 800dfc4:	60f8      	str	r0, [r7, #12]
      break;
 800dfc6:	e112      	b.n	800e1ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	7c1b      	ldrb	r3, [r3, #16]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d10d      	bne.n	800dfec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfd8:	f107 0208 	add.w	r2, r7, #8
 800dfdc:	4610      	mov	r0, r2
 800dfde:	4798      	blx	r3
 800dfe0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	2202      	movs	r2, #2
 800dfe8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dfea:	e100      	b.n	800e1ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff4:	f107 0208 	add.w	r2, r7, #8
 800dff8:	4610      	mov	r0, r2
 800dffa:	4798      	blx	r3
 800dffc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	3301      	adds	r3, #1
 800e002:	2202      	movs	r2, #2
 800e004:	701a      	strb	r2, [r3, #0]
      break;
 800e006:	e0f2      	b.n	800e1ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	885b      	ldrh	r3, [r3, #2]
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	2b05      	cmp	r3, #5
 800e010:	f200 80ac 	bhi.w	800e16c <USBD_GetDescriptor+0x204>
 800e014:	a201      	add	r2, pc, #4	; (adr r2, 800e01c <USBD_GetDescriptor+0xb4>)
 800e016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e01a:	bf00      	nop
 800e01c:	0800e035 	.word	0x0800e035
 800e020:	0800e069 	.word	0x0800e069
 800e024:	0800e09d 	.word	0x0800e09d
 800e028:	0800e0d1 	.word	0x0800e0d1
 800e02c:	0800e105 	.word	0x0800e105
 800e030:	0800e139 	.word	0x0800e139
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00b      	beq.n	800e058 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	7c12      	ldrb	r2, [r2, #16]
 800e04c:	f107 0108 	add.w	r1, r7, #8
 800e050:	4610      	mov	r0, r2
 800e052:	4798      	blx	r3
 800e054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e056:	e091      	b.n	800e17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e058:	6839      	ldr	r1, [r7, #0]
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 fab2 	bl	800e5c4 <USBD_CtlError>
            err++;
 800e060:	7afb      	ldrb	r3, [r7, #11]
 800e062:	3301      	adds	r3, #1
 800e064:	72fb      	strb	r3, [r7, #11]
          break;
 800e066:	e089      	b.n	800e17c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e06e:	689b      	ldr	r3, [r3, #8]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d00b      	beq.n	800e08c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e07a:	689b      	ldr	r3, [r3, #8]
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	7c12      	ldrb	r2, [r2, #16]
 800e080:	f107 0108 	add.w	r1, r7, #8
 800e084:	4610      	mov	r0, r2
 800e086:	4798      	blx	r3
 800e088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e08a:	e077      	b.n	800e17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e08c:	6839      	ldr	r1, [r7, #0]
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 fa98 	bl	800e5c4 <USBD_CtlError>
            err++;
 800e094:	7afb      	ldrb	r3, [r7, #11]
 800e096:	3301      	adds	r3, #1
 800e098:	72fb      	strb	r3, [r7, #11]
          break;
 800e09a:	e06f      	b.n	800e17c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d00b      	beq.n	800e0c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	7c12      	ldrb	r2, [r2, #16]
 800e0b4:	f107 0108 	add.w	r1, r7, #8
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	4798      	blx	r3
 800e0bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0be:	e05d      	b.n	800e17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e0c0:	6839      	ldr	r1, [r7, #0]
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 fa7e 	bl	800e5c4 <USBD_CtlError>
            err++;
 800e0c8:	7afb      	ldrb	r3, [r7, #11]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	72fb      	strb	r3, [r7, #11]
          break;
 800e0ce:	e055      	b.n	800e17c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0d6:	691b      	ldr	r3, [r3, #16]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00b      	beq.n	800e0f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0e2:	691b      	ldr	r3, [r3, #16]
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	7c12      	ldrb	r2, [r2, #16]
 800e0e8:	f107 0108 	add.w	r1, r7, #8
 800e0ec:	4610      	mov	r0, r2
 800e0ee:	4798      	blx	r3
 800e0f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0f2:	e043      	b.n	800e17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e0f4:	6839      	ldr	r1, [r7, #0]
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 fa64 	bl	800e5c4 <USBD_CtlError>
            err++;
 800e0fc:	7afb      	ldrb	r3, [r7, #11]
 800e0fe:	3301      	adds	r3, #1
 800e100:	72fb      	strb	r3, [r7, #11]
          break;
 800e102:	e03b      	b.n	800e17c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e10a:	695b      	ldr	r3, [r3, #20]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00b      	beq.n	800e128 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e116:	695b      	ldr	r3, [r3, #20]
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	7c12      	ldrb	r2, [r2, #16]
 800e11c:	f107 0108 	add.w	r1, r7, #8
 800e120:	4610      	mov	r0, r2
 800e122:	4798      	blx	r3
 800e124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e126:	e029      	b.n	800e17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e128:	6839      	ldr	r1, [r7, #0]
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 fa4a 	bl	800e5c4 <USBD_CtlError>
            err++;
 800e130:	7afb      	ldrb	r3, [r7, #11]
 800e132:	3301      	adds	r3, #1
 800e134:	72fb      	strb	r3, [r7, #11]
          break;
 800e136:	e021      	b.n	800e17c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e13e:	699b      	ldr	r3, [r3, #24]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d00b      	beq.n	800e15c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e14a:	699b      	ldr	r3, [r3, #24]
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	7c12      	ldrb	r2, [r2, #16]
 800e150:	f107 0108 	add.w	r1, r7, #8
 800e154:	4610      	mov	r0, r2
 800e156:	4798      	blx	r3
 800e158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e15a:	e00f      	b.n	800e17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e15c:	6839      	ldr	r1, [r7, #0]
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 fa30 	bl	800e5c4 <USBD_CtlError>
            err++;
 800e164:	7afb      	ldrb	r3, [r7, #11]
 800e166:	3301      	adds	r3, #1
 800e168:	72fb      	strb	r3, [r7, #11]
          break;
 800e16a:	e007      	b.n	800e17c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e16c:	6839      	ldr	r1, [r7, #0]
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f000 fa28 	bl	800e5c4 <USBD_CtlError>
          err++;
 800e174:	7afb      	ldrb	r3, [r7, #11]
 800e176:	3301      	adds	r3, #1
 800e178:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e17a:	bf00      	nop
      }
      break;
 800e17c:	e037      	b.n	800e1ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	7c1b      	ldrb	r3, [r3, #16]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d109      	bne.n	800e19a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e18e:	f107 0208 	add.w	r2, r7, #8
 800e192:	4610      	mov	r0, r2
 800e194:	4798      	blx	r3
 800e196:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e198:	e029      	b.n	800e1ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e19a:	6839      	ldr	r1, [r7, #0]
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 fa11 	bl	800e5c4 <USBD_CtlError>
        err++;
 800e1a2:	7afb      	ldrb	r3, [r7, #11]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	72fb      	strb	r3, [r7, #11]
      break;
 800e1a8:	e021      	b.n	800e1ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	7c1b      	ldrb	r3, [r3, #16]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d10d      	bne.n	800e1ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ba:	f107 0208 	add.w	r2, r7, #8
 800e1be:	4610      	mov	r0, r2
 800e1c0:	4798      	blx	r3
 800e1c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	2207      	movs	r2, #7
 800e1ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1cc:	e00f      	b.n	800e1ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e1ce:	6839      	ldr	r1, [r7, #0]
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f000 f9f7 	bl	800e5c4 <USBD_CtlError>
        err++;
 800e1d6:	7afb      	ldrb	r3, [r7, #11]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	72fb      	strb	r3, [r7, #11]
      break;
 800e1dc:	e007      	b.n	800e1ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e1de:	6839      	ldr	r1, [r7, #0]
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f000 f9ef 	bl	800e5c4 <USBD_CtlError>
      err++;
 800e1e6:	7afb      	ldrb	r3, [r7, #11]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	72fb      	strb	r3, [r7, #11]
      break;
 800e1ec:	bf00      	nop
  }

  if (err != 0U)
 800e1ee:	7afb      	ldrb	r3, [r7, #11]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d11e      	bne.n	800e232 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	88db      	ldrh	r3, [r3, #6]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d016      	beq.n	800e22a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e1fc:	893b      	ldrh	r3, [r7, #8]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d00e      	beq.n	800e220 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	88da      	ldrh	r2, [r3, #6]
 800e206:	893b      	ldrh	r3, [r7, #8]
 800e208:	4293      	cmp	r3, r2
 800e20a:	bf28      	it	cs
 800e20c:	4613      	movcs	r3, r2
 800e20e:	b29b      	uxth	r3, r3
 800e210:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e212:	893b      	ldrh	r3, [r7, #8]
 800e214:	461a      	mov	r2, r3
 800e216:	68f9      	ldr	r1, [r7, #12]
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f000 fa44 	bl	800e6a6 <USBD_CtlSendData>
 800e21e:	e009      	b.n	800e234 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e220:	6839      	ldr	r1, [r7, #0]
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 f9ce 	bl	800e5c4 <USBD_CtlError>
 800e228:	e004      	b.n	800e234 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 fa95 	bl	800e75a <USBD_CtlSendStatus>
 800e230:	e000      	b.n	800e234 <USBD_GetDescriptor+0x2cc>
    return;
 800e232:	bf00      	nop
  }
}
 800e234:	3710      	adds	r7, #16
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop

0800e23c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	889b      	ldrh	r3, [r3, #4]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d131      	bne.n	800e2b2 <USBD_SetAddress+0x76>
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	88db      	ldrh	r3, [r3, #6]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d12d      	bne.n	800e2b2 <USBD_SetAddress+0x76>
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	885b      	ldrh	r3, [r3, #2]
 800e25a:	2b7f      	cmp	r3, #127	; 0x7f
 800e25c:	d829      	bhi.n	800e2b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	885b      	ldrh	r3, [r3, #2]
 800e262:	b2db      	uxtb	r3, r3
 800e264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e268:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e270:	b2db      	uxtb	r3, r3
 800e272:	2b03      	cmp	r3, #3
 800e274:	d104      	bne.n	800e280 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e276:	6839      	ldr	r1, [r7, #0]
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f000 f9a3 	bl	800e5c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e27e:	e01d      	b.n	800e2bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	7bfa      	ldrb	r2, [r7, #15]
 800e284:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e288:	7bfb      	ldrb	r3, [r7, #15]
 800e28a:	4619      	mov	r1, r3
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f004 f857 	bl	8012340 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f000 fa61 	bl	800e75a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e298:	7bfb      	ldrb	r3, [r7, #15]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d004      	beq.n	800e2a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2202      	movs	r2, #2
 800e2a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2a6:	e009      	b.n	800e2bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2b0:	e004      	b.n	800e2bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e2b2:	6839      	ldr	r1, [r7, #0]
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f000 f985 	bl	800e5c4 <USBD_CtlError>
  }
}
 800e2ba:	bf00      	nop
 800e2bc:	bf00      	nop
 800e2be:	3710      	adds	r7, #16
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	885b      	ldrh	r3, [r3, #2]
 800e2d6:	b2da      	uxtb	r2, r3
 800e2d8:	4b4c      	ldr	r3, [pc, #304]	; (800e40c <USBD_SetConfig+0x148>)
 800e2da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e2dc:	4b4b      	ldr	r3, [pc, #300]	; (800e40c <USBD_SetConfig+0x148>)
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d905      	bls.n	800e2f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e2e4:	6839      	ldr	r1, [r7, #0]
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 f96c 	bl	800e5c4 <USBD_CtlError>
    return USBD_FAIL;
 800e2ec:	2303      	movs	r3, #3
 800e2ee:	e088      	b.n	800e402 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	2b02      	cmp	r3, #2
 800e2fa:	d002      	beq.n	800e302 <USBD_SetConfig+0x3e>
 800e2fc:	2b03      	cmp	r3, #3
 800e2fe:	d025      	beq.n	800e34c <USBD_SetConfig+0x88>
 800e300:	e071      	b.n	800e3e6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e302:	4b42      	ldr	r3, [pc, #264]	; (800e40c <USBD_SetConfig+0x148>)
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d01c      	beq.n	800e344 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e30a:	4b40      	ldr	r3, [pc, #256]	; (800e40c <USBD_SetConfig+0x148>)
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	461a      	mov	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e314:	4b3d      	ldr	r3, [pc, #244]	; (800e40c <USBD_SetConfig+0x148>)
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	4619      	mov	r1, r3
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7ff f948 	bl	800d5b0 <USBD_SetClassConfig>
 800e320:	4603      	mov	r3, r0
 800e322:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e324:	7bfb      	ldrb	r3, [r7, #15]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d004      	beq.n	800e334 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e32a:	6839      	ldr	r1, [r7, #0]
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 f949 	bl	800e5c4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e332:	e065      	b.n	800e400 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 fa10 	bl	800e75a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2203      	movs	r2, #3
 800e33e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e342:	e05d      	b.n	800e400 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 fa08 	bl	800e75a <USBD_CtlSendStatus>
      break;
 800e34a:	e059      	b.n	800e400 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e34c:	4b2f      	ldr	r3, [pc, #188]	; (800e40c <USBD_SetConfig+0x148>)
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d112      	bne.n	800e37a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2202      	movs	r2, #2
 800e358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e35c:	4b2b      	ldr	r3, [pc, #172]	; (800e40c <USBD_SetConfig+0x148>)
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	461a      	mov	r2, r3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e366:	4b29      	ldr	r3, [pc, #164]	; (800e40c <USBD_SetConfig+0x148>)
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	4619      	mov	r1, r3
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f7ff f93b 	bl	800d5e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 f9f1 	bl	800e75a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e378:	e042      	b.n	800e400 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e37a:	4b24      	ldr	r3, [pc, #144]	; (800e40c <USBD_SetConfig+0x148>)
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	461a      	mov	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	429a      	cmp	r2, r3
 800e386:	d02a      	beq.n	800e3de <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	4619      	mov	r1, r3
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f7ff f929 	bl	800d5e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e396:	4b1d      	ldr	r3, [pc, #116]	; (800e40c <USBD_SetConfig+0x148>)
 800e398:	781b      	ldrb	r3, [r3, #0]
 800e39a:	461a      	mov	r2, r3
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e3a0:	4b1a      	ldr	r3, [pc, #104]	; (800e40c <USBD_SetConfig+0x148>)
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f7ff f902 	bl	800d5b0 <USBD_SetClassConfig>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e3b0:	7bfb      	ldrb	r3, [r7, #15]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00f      	beq.n	800e3d6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e3b6:	6839      	ldr	r1, [r7, #0]
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 f903 	bl	800e5c4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f7ff f90e 	bl	800d5e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2202      	movs	r2, #2
 800e3d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e3d4:	e014      	b.n	800e400 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 f9bf 	bl	800e75a <USBD_CtlSendStatus>
      break;
 800e3dc:	e010      	b.n	800e400 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f000 f9bb 	bl	800e75a <USBD_CtlSendStatus>
      break;
 800e3e4:	e00c      	b.n	800e400 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e3e6:	6839      	ldr	r1, [r7, #0]
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f000 f8eb 	bl	800e5c4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e3ee:	4b07      	ldr	r3, [pc, #28]	; (800e40c <USBD_SetConfig+0x148>)
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f7ff f8f7 	bl	800d5e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e3fa:	2303      	movs	r3, #3
 800e3fc:	73fb      	strb	r3, [r7, #15]
      break;
 800e3fe:	bf00      	nop
  }

  return ret;
 800e400:	7bfb      	ldrb	r3, [r7, #15]
}
 800e402:	4618      	mov	r0, r3
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	2000068a 	.word	0x2000068a

0800e410 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	88db      	ldrh	r3, [r3, #6]
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d004      	beq.n	800e42c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e422:	6839      	ldr	r1, [r7, #0]
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f000 f8cd 	bl	800e5c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e42a:	e023      	b.n	800e474 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e432:	b2db      	uxtb	r3, r3
 800e434:	2b02      	cmp	r3, #2
 800e436:	dc02      	bgt.n	800e43e <USBD_GetConfig+0x2e>
 800e438:	2b00      	cmp	r3, #0
 800e43a:	dc03      	bgt.n	800e444 <USBD_GetConfig+0x34>
 800e43c:	e015      	b.n	800e46a <USBD_GetConfig+0x5a>
 800e43e:	2b03      	cmp	r3, #3
 800e440:	d00b      	beq.n	800e45a <USBD_GetConfig+0x4a>
 800e442:	e012      	b.n	800e46a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2200      	movs	r2, #0
 800e448:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	3308      	adds	r3, #8
 800e44e:	2201      	movs	r2, #1
 800e450:	4619      	mov	r1, r3
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 f927 	bl	800e6a6 <USBD_CtlSendData>
        break;
 800e458:	e00c      	b.n	800e474 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	3304      	adds	r3, #4
 800e45e:	2201      	movs	r2, #1
 800e460:	4619      	mov	r1, r3
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 f91f 	bl	800e6a6 <USBD_CtlSendData>
        break;
 800e468:	e004      	b.n	800e474 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e46a:	6839      	ldr	r1, [r7, #0]
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f000 f8a9 	bl	800e5c4 <USBD_CtlError>
        break;
 800e472:	bf00      	nop
}
 800e474:	bf00      	nop
 800e476:	3708      	adds	r7, #8
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	3b01      	subs	r3, #1
 800e490:	2b02      	cmp	r3, #2
 800e492:	d81e      	bhi.n	800e4d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	88db      	ldrh	r3, [r3, #6]
 800e498:	2b02      	cmp	r3, #2
 800e49a:	d004      	beq.n	800e4a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e49c:	6839      	ldr	r1, [r7, #0]
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f000 f890 	bl	800e5c4 <USBD_CtlError>
        break;
 800e4a4:	e01a      	b.n	800e4dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d005      	beq.n	800e4c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	f043 0202 	orr.w	r2, r3, #2
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	330c      	adds	r3, #12
 800e4c6:	2202      	movs	r2, #2
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f000 f8eb 	bl	800e6a6 <USBD_CtlSendData>
      break;
 800e4d0:	e004      	b.n	800e4dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e4d2:	6839      	ldr	r1, [r7, #0]
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 f875 	bl	800e5c4 <USBD_CtlError>
      break;
 800e4da:	bf00      	nop
  }
}
 800e4dc:	bf00      	nop
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	885b      	ldrh	r3, [r3, #2]
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d106      	bne.n	800e504 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f000 f92b 	bl	800e75a <USBD_CtlSendStatus>
  }
}
 800e504:	bf00      	nop
 800e506:	3708      	adds	r7, #8
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	3b01      	subs	r3, #1
 800e520:	2b02      	cmp	r3, #2
 800e522:	d80b      	bhi.n	800e53c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	885b      	ldrh	r3, [r3, #2]
 800e528:	2b01      	cmp	r3, #1
 800e52a:	d10c      	bne.n	800e546 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2200      	movs	r2, #0
 800e530:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f000 f910 	bl	800e75a <USBD_CtlSendStatus>
      }
      break;
 800e53a:	e004      	b.n	800e546 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e53c:	6839      	ldr	r1, [r7, #0]
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f000 f840 	bl	800e5c4 <USBD_CtlError>
      break;
 800e544:	e000      	b.n	800e548 <USBD_ClrFeature+0x3c>
      break;
 800e546:	bf00      	nop
  }
}
 800e548:	bf00      	nop
 800e54a:	3708      	adds	r7, #8
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	781a      	ldrb	r2, [r3, #0]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	3301      	adds	r3, #1
 800e56a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	781a      	ldrb	r2, [r3, #0]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	3301      	adds	r3, #1
 800e578:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e57a:	68f8      	ldr	r0, [r7, #12]
 800e57c:	f7ff fabb 	bl	800daf6 <SWAPBYTE>
 800e580:	4603      	mov	r3, r0
 800e582:	461a      	mov	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	3301      	adds	r3, #1
 800e58c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	3301      	adds	r3, #1
 800e592:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e594:	68f8      	ldr	r0, [r7, #12]
 800e596:	f7ff faae 	bl	800daf6 <SWAPBYTE>
 800e59a:	4603      	mov	r3, r0
 800e59c:	461a      	mov	r2, r3
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f7ff faa1 	bl	800daf6 <SWAPBYTE>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	80da      	strh	r2, [r3, #6]
}
 800e5bc:	bf00      	nop
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5ce:	2180      	movs	r1, #128	; 0x80
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f003 fe4b 	bl	801226c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f003 fe47 	bl	801226c <USBD_LL_StallEP>
}
 800e5de:	bf00      	nop
 800e5e0:	3708      	adds	r7, #8
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}

0800e5e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e5e6:	b580      	push	{r7, lr}
 800e5e8:	b086      	sub	sp, #24
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	60f8      	str	r0, [r7, #12]
 800e5ee:	60b9      	str	r1, [r7, #8]
 800e5f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d036      	beq.n	800e66a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e600:	6938      	ldr	r0, [r7, #16]
 800e602:	f000 f836 	bl	800e672 <USBD_GetLen>
 800e606:	4603      	mov	r3, r0
 800e608:	3301      	adds	r3, #1
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	005b      	lsls	r3, r3, #1
 800e60e:	b29a      	uxth	r2, r3
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e614:	7dfb      	ldrb	r3, [r7, #23]
 800e616:	68ba      	ldr	r2, [r7, #8]
 800e618:	4413      	add	r3, r2
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	7812      	ldrb	r2, [r2, #0]
 800e61e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e620:	7dfb      	ldrb	r3, [r7, #23]
 800e622:	3301      	adds	r3, #1
 800e624:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e626:	7dfb      	ldrb	r3, [r7, #23]
 800e628:	68ba      	ldr	r2, [r7, #8]
 800e62a:	4413      	add	r3, r2
 800e62c:	2203      	movs	r2, #3
 800e62e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e630:	7dfb      	ldrb	r3, [r7, #23]
 800e632:	3301      	adds	r3, #1
 800e634:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e636:	e013      	b.n	800e660 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e638:	7dfb      	ldrb	r3, [r7, #23]
 800e63a:	68ba      	ldr	r2, [r7, #8]
 800e63c:	4413      	add	r3, r2
 800e63e:	693a      	ldr	r2, [r7, #16]
 800e640:	7812      	ldrb	r2, [r2, #0]
 800e642:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	3301      	adds	r3, #1
 800e648:	613b      	str	r3, [r7, #16]
    idx++;
 800e64a:	7dfb      	ldrb	r3, [r7, #23]
 800e64c:	3301      	adds	r3, #1
 800e64e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e650:	7dfb      	ldrb	r3, [r7, #23]
 800e652:	68ba      	ldr	r2, [r7, #8]
 800e654:	4413      	add	r3, r2
 800e656:	2200      	movs	r2, #0
 800e658:	701a      	strb	r2, [r3, #0]
    idx++;
 800e65a:	7dfb      	ldrb	r3, [r7, #23]
 800e65c:	3301      	adds	r3, #1
 800e65e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d1e7      	bne.n	800e638 <USBD_GetString+0x52>
 800e668:	e000      	b.n	800e66c <USBD_GetString+0x86>
    return;
 800e66a:	bf00      	nop
  }
}
 800e66c:	3718      	adds	r7, #24
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}

0800e672 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e672:	b480      	push	{r7}
 800e674:	b085      	sub	sp, #20
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e67a:	2300      	movs	r3, #0
 800e67c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e682:	e005      	b.n	800e690 <USBD_GetLen+0x1e>
  {
    len++;
 800e684:	7bfb      	ldrb	r3, [r7, #15]
 800e686:	3301      	adds	r3, #1
 800e688:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	3301      	adds	r3, #1
 800e68e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d1f5      	bne.n	800e684 <USBD_GetLen+0x12>
  }

  return len;
 800e698:	7bfb      	ldrb	r3, [r7, #15]
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3714      	adds	r7, #20
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr

0800e6a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e6a6:	b580      	push	{r7, lr}
 800e6a8:	b084      	sub	sp, #16
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	60f8      	str	r0, [r7, #12]
 800e6ae:	60b9      	str	r1, [r7, #8]
 800e6b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2202      	movs	r2, #2
 800e6b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	68ba      	ldr	r2, [r7, #8]
 800e6ca:	2100      	movs	r1, #0
 800e6cc:	68f8      	ldr	r0, [r7, #12]
 800e6ce:	f003 fe56 	bl	801237e <USBD_LL_Transmit>

  return USBD_OK;
 800e6d2:	2300      	movs	r3, #0
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	68ba      	ldr	r2, [r7, #8]
 800e6ec:	2100      	movs	r1, #0
 800e6ee:	68f8      	ldr	r0, [r7, #12]
 800e6f0:	f003 fe45 	bl	801237e <USBD_LL_Transmit>

  return USBD_OK;
 800e6f4:	2300      	movs	r3, #0
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3710      	adds	r7, #16
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e6fe:	b580      	push	{r7, lr}
 800e700:	b084      	sub	sp, #16
 800e702:	af00      	add	r7, sp, #0
 800e704:	60f8      	str	r0, [r7, #12]
 800e706:	60b9      	str	r1, [r7, #8]
 800e708:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2203      	movs	r2, #3
 800e70e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	68ba      	ldr	r2, [r7, #8]
 800e726:	2100      	movs	r1, #0
 800e728:	68f8      	ldr	r0, [r7, #12]
 800e72a:	f003 fe49 	bl	80123c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e72e:	2300      	movs	r3, #0
}
 800e730:	4618      	mov	r0, r3
 800e732:	3710      	adds	r7, #16
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}

0800e738 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b084      	sub	sp, #16
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	60f8      	str	r0, [r7, #12]
 800e740:	60b9      	str	r1, [r7, #8]
 800e742:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	68ba      	ldr	r2, [r7, #8]
 800e748:	2100      	movs	r1, #0
 800e74a:	68f8      	ldr	r0, [r7, #12]
 800e74c:	f003 fe38 	bl	80123c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e750:	2300      	movs	r3, #0
}
 800e752:	4618      	mov	r0, r3
 800e754:	3710      	adds	r7, #16
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b082      	sub	sp, #8
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2204      	movs	r2, #4
 800e766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e76a:	2300      	movs	r3, #0
 800e76c:	2200      	movs	r2, #0
 800e76e:	2100      	movs	r1, #0
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f003 fe04 	bl	801237e <USBD_LL_Transmit>

  return USBD_OK;
 800e776:	2300      	movs	r3, #0
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3708      	adds	r7, #8
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2205      	movs	r2, #5
 800e78c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e790:	2300      	movs	r3, #0
 800e792:	2200      	movs	r2, #0
 800e794:	2100      	movs	r1, #0
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f003 fe12 	bl	80123c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e79c:	2300      	movs	r3, #0
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3708      	adds	r7, #8
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
	...

0800e7a8 <__NVIC_SetPriority>:
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	6039      	str	r1, [r7, #0]
 800e7b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e7b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	db0a      	blt.n	800e7d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	b2da      	uxtb	r2, r3
 800e7c0:	490c      	ldr	r1, [pc, #48]	; (800e7f4 <__NVIC_SetPriority+0x4c>)
 800e7c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7c6:	0112      	lsls	r2, r2, #4
 800e7c8:	b2d2      	uxtb	r2, r2
 800e7ca:	440b      	add	r3, r1
 800e7cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e7d0:	e00a      	b.n	800e7e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	b2da      	uxtb	r2, r3
 800e7d6:	4908      	ldr	r1, [pc, #32]	; (800e7f8 <__NVIC_SetPriority+0x50>)
 800e7d8:	79fb      	ldrb	r3, [r7, #7]
 800e7da:	f003 030f 	and.w	r3, r3, #15
 800e7de:	3b04      	subs	r3, #4
 800e7e0:	0112      	lsls	r2, r2, #4
 800e7e2:	b2d2      	uxtb	r2, r2
 800e7e4:	440b      	add	r3, r1
 800e7e6:	761a      	strb	r2, [r3, #24]
}
 800e7e8:	bf00      	nop
 800e7ea:	370c      	adds	r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr
 800e7f4:	e000e100 	.word	0xe000e100
 800e7f8:	e000ed00 	.word	0xe000ed00

0800e7fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e800:	4b05      	ldr	r3, [pc, #20]	; (800e818 <SysTick_Handler+0x1c>)
 800e802:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e804:	f001 ffea 	bl	80107dc <xTaskGetSchedulerState>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b01      	cmp	r3, #1
 800e80c:	d001      	beq.n	800e812 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e80e:	f002 fed3 	bl	80115b8 <xPortSysTickHandler>
  }
}
 800e812:	bf00      	nop
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	e000e010 	.word	0xe000e010

0800e81c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e81c:	b580      	push	{r7, lr}
 800e81e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e820:	2100      	movs	r1, #0
 800e822:	f06f 0004 	mvn.w	r0, #4
 800e826:	f7ff ffbf 	bl	800e7a8 <__NVIC_SetPriority>
#endif
}
 800e82a:	bf00      	nop
 800e82c:	bd80      	pop	{r7, pc}
	...

0800e830 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e830:	b480      	push	{r7}
 800e832:	b083      	sub	sp, #12
 800e834:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e836:	f3ef 8305 	mrs	r3, IPSR
 800e83a:	603b      	str	r3, [r7, #0]
  return(result);
 800e83c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d003      	beq.n	800e84a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e842:	f06f 0305 	mvn.w	r3, #5
 800e846:	607b      	str	r3, [r7, #4]
 800e848:	e00c      	b.n	800e864 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e84a:	4b0a      	ldr	r3, [pc, #40]	; (800e874 <osKernelInitialize+0x44>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d105      	bne.n	800e85e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e852:	4b08      	ldr	r3, [pc, #32]	; (800e874 <osKernelInitialize+0x44>)
 800e854:	2201      	movs	r2, #1
 800e856:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e858:	2300      	movs	r3, #0
 800e85a:	607b      	str	r3, [r7, #4]
 800e85c:	e002      	b.n	800e864 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e85e:	f04f 33ff 	mov.w	r3, #4294967295
 800e862:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e864:	687b      	ldr	r3, [r7, #4]
}
 800e866:	4618      	mov	r0, r3
 800e868:	370c      	adds	r7, #12
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr
 800e872:	bf00      	nop
 800e874:	2000068c 	.word	0x2000068c

0800e878 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e87e:	f3ef 8305 	mrs	r3, IPSR
 800e882:	603b      	str	r3, [r7, #0]
  return(result);
 800e884:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e886:	2b00      	cmp	r3, #0
 800e888:	d003      	beq.n	800e892 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e88a:	f06f 0305 	mvn.w	r3, #5
 800e88e:	607b      	str	r3, [r7, #4]
 800e890:	e010      	b.n	800e8b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e892:	4b0b      	ldr	r3, [pc, #44]	; (800e8c0 <osKernelStart+0x48>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2b01      	cmp	r3, #1
 800e898:	d109      	bne.n	800e8ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e89a:	f7ff ffbf 	bl	800e81c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e89e:	4b08      	ldr	r3, [pc, #32]	; (800e8c0 <osKernelStart+0x48>)
 800e8a0:	2202      	movs	r2, #2
 800e8a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e8a4:	f001 fb2e 	bl	800ff04 <vTaskStartScheduler>
      stat = osOK;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	607b      	str	r3, [r7, #4]
 800e8ac:	e002      	b.n	800e8b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e8b4:	687b      	ldr	r3, [r7, #4]
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3708      	adds	r7, #8
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	2000068c 	.word	0x2000068c

0800e8c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b08e      	sub	sp, #56	; 0x38
 800e8c8:	af04      	add	r7, sp, #16
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8d4:	f3ef 8305 	mrs	r3, IPSR
 800e8d8:	617b      	str	r3, [r7, #20]
  return(result);
 800e8da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d17e      	bne.n	800e9de <osThreadNew+0x11a>
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d07b      	beq.n	800e9de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e8e6:	2380      	movs	r3, #128	; 0x80
 800e8e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e8ea:	2318      	movs	r3, #24
 800e8ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e8f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d045      	beq.n	800e98a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d002      	beq.n	800e90c <osThreadNew+0x48>
        name = attr->name;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	699b      	ldr	r3, [r3, #24]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d002      	beq.n	800e91a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	699b      	ldr	r3, [r3, #24]
 800e918:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d008      	beq.n	800e932 <osThreadNew+0x6e>
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	2b38      	cmp	r3, #56	; 0x38
 800e924:	d805      	bhi.n	800e932 <osThreadNew+0x6e>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	f003 0301 	and.w	r3, r3, #1
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d001      	beq.n	800e936 <osThreadNew+0x72>
        return (NULL);
 800e932:	2300      	movs	r3, #0
 800e934:	e054      	b.n	800e9e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	695b      	ldr	r3, [r3, #20]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d003      	beq.n	800e946 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	695b      	ldr	r3, [r3, #20]
 800e942:	089b      	lsrs	r3, r3, #2
 800e944:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	689b      	ldr	r3, [r3, #8]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d00e      	beq.n	800e96c <osThreadNew+0xa8>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	2bbb      	cmp	r3, #187	; 0xbb
 800e954:	d90a      	bls.n	800e96c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d006      	beq.n	800e96c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	695b      	ldr	r3, [r3, #20]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d002      	beq.n	800e96c <osThreadNew+0xa8>
        mem = 1;
 800e966:	2301      	movs	r3, #1
 800e968:	61bb      	str	r3, [r7, #24]
 800e96a:	e010      	b.n	800e98e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	689b      	ldr	r3, [r3, #8]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d10c      	bne.n	800e98e <osThreadNew+0xca>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	68db      	ldr	r3, [r3, #12]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d108      	bne.n	800e98e <osThreadNew+0xca>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	691b      	ldr	r3, [r3, #16]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d104      	bne.n	800e98e <osThreadNew+0xca>
          mem = 0;
 800e984:	2300      	movs	r3, #0
 800e986:	61bb      	str	r3, [r7, #24]
 800e988:	e001      	b.n	800e98e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e98a:	2300      	movs	r3, #0
 800e98c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	2b01      	cmp	r3, #1
 800e992:	d110      	bne.n	800e9b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e99c:	9202      	str	r2, [sp, #8]
 800e99e:	9301      	str	r3, [sp, #4]
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	9300      	str	r3, [sp, #0]
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	6a3a      	ldr	r2, [r7, #32]
 800e9a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9aa:	68f8      	ldr	r0, [r7, #12]
 800e9ac:	f001 f84c 	bl	800fa48 <xTaskCreateStatic>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	613b      	str	r3, [r7, #16]
 800e9b4:	e013      	b.n	800e9de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e9b6:	69bb      	ldr	r3, [r7, #24]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d110      	bne.n	800e9de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e9bc:	6a3b      	ldr	r3, [r7, #32]
 800e9be:	b29a      	uxth	r2, r3
 800e9c0:	f107 0310 	add.w	r3, r7, #16
 800e9c4:	9301      	str	r3, [sp, #4]
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	9300      	str	r3, [sp, #0]
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9ce:	68f8      	ldr	r0, [r7, #12]
 800e9d0:	f001 f897 	bl	800fb02 <xTaskCreate>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	d001      	beq.n	800e9de <osThreadNew+0x11a>
            hTask = NULL;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e9de:	693b      	ldr	r3, [r7, #16]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3728      	adds	r7, #40	; 0x28
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800e9ee:	f001 fee5 	bl	80107bc <xTaskGetCurrentTaskHandle>
 800e9f2:	6078      	str	r0, [r7, #4]

  return (id);
 800e9f4:	687b      	ldr	r3, [r7, #4]
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3708      	adds	r7, #8
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}

0800e9fe <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800e9fe:	b580      	push	{r7, lr}
 800ea00:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800ea02:	2000      	movs	r0, #0
 800ea04:	f001 f9d8 	bl	800fdb8 <vTaskDelete>
#endif
  for (;;);
 800ea08:	e7fe      	b.n	800ea08 <osThreadExit+0xa>

0800ea0a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b084      	sub	sp, #16
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea12:	f3ef 8305 	mrs	r3, IPSR
 800ea16:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d003      	beq.n	800ea26 <osDelay+0x1c>
    stat = osErrorISR;
 800ea1e:	f06f 0305 	mvn.w	r3, #5
 800ea22:	60fb      	str	r3, [r7, #12]
 800ea24:	e007      	b.n	800ea36 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ea26:	2300      	movs	r3, #0
 800ea28:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d002      	beq.n	800ea36 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f001 fa33 	bl	800fe9c <vTaskDelay>
    }
  }

  return (stat);
 800ea36:	68fb      	ldr	r3, [r7, #12]
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3710      	adds	r7, #16
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b088      	sub	sp, #32
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea4c:	f3ef 8305 	mrs	r3, IPSR
 800ea50:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea52:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d174      	bne.n	800eb42 <osMutexNew+0x102>
    if (attr != NULL) {
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d003      	beq.n	800ea66 <osMutexNew+0x26>
      type = attr->attr_bits;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	61bb      	str	r3, [r7, #24]
 800ea64:	e001      	b.n	800ea6a <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ea66:	2300      	movs	r3, #0
 800ea68:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ea6a:	69bb      	ldr	r3, [r7, #24]
 800ea6c:	f003 0301 	and.w	r3, r3, #1
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d002      	beq.n	800ea7a <osMutexNew+0x3a>
      rmtx = 1U;
 800ea74:	2301      	movs	r3, #1
 800ea76:	617b      	str	r3, [r7, #20]
 800ea78:	e001      	b.n	800ea7e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	f003 0308 	and.w	r3, r3, #8
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d15c      	bne.n	800eb42 <osMutexNew+0x102>
      mem = -1;
 800ea88:	f04f 33ff 	mov.w	r3, #4294967295
 800ea8c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d015      	beq.n	800eac0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	689b      	ldr	r3, [r3, #8]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d006      	beq.n	800eaaa <osMutexNew+0x6a>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	2b4f      	cmp	r3, #79	; 0x4f
 800eaa2:	d902      	bls.n	800eaaa <osMutexNew+0x6a>
          mem = 1;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	613b      	str	r3, [r7, #16]
 800eaa8:	e00c      	b.n	800eac4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	689b      	ldr	r3, [r3, #8]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d108      	bne.n	800eac4 <osMutexNew+0x84>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	68db      	ldr	r3, [r3, #12]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d104      	bne.n	800eac4 <osMutexNew+0x84>
            mem = 0;
 800eaba:	2300      	movs	r3, #0
 800eabc:	613b      	str	r3, [r7, #16]
 800eabe:	e001      	b.n	800eac4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800eac0:	2300      	movs	r3, #0
 800eac2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d112      	bne.n	800eaf0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d007      	beq.n	800eae0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	689b      	ldr	r3, [r3, #8]
 800ead4:	4619      	mov	r1, r3
 800ead6:	2004      	movs	r0, #4
 800ead8:	f000 fa8f 	bl	800effa <xQueueCreateMutexStatic>
 800eadc:	61f8      	str	r0, [r7, #28]
 800eade:	e016      	b.n	800eb0e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	689b      	ldr	r3, [r3, #8]
 800eae4:	4619      	mov	r1, r3
 800eae6:	2001      	movs	r0, #1
 800eae8:	f000 fa87 	bl	800effa <xQueueCreateMutexStatic>
 800eaec:	61f8      	str	r0, [r7, #28]
 800eaee:	e00e      	b.n	800eb0e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d10b      	bne.n	800eb0e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d004      	beq.n	800eb06 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800eafc:	2004      	movs	r0, #4
 800eafe:	f000 fa64 	bl	800efca <xQueueCreateMutex>
 800eb02:	61f8      	str	r0, [r7, #28]
 800eb04:	e003      	b.n	800eb0e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800eb06:	2001      	movs	r0, #1
 800eb08:	f000 fa5f 	bl	800efca <xQueueCreateMutex>
 800eb0c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d00c      	beq.n	800eb2e <osMutexNew+0xee>
        if (attr != NULL) {
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d003      	beq.n	800eb22 <osMutexNew+0xe2>
          name = attr->name;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	60fb      	str	r3, [r7, #12]
 800eb20:	e001      	b.n	800eb26 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800eb22:	2300      	movs	r3, #0
 800eb24:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800eb26:	68f9      	ldr	r1, [r7, #12]
 800eb28:	69f8      	ldr	r0, [r7, #28]
 800eb2a:	f000 ff2f 	bl	800f98c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d006      	beq.n	800eb42 <osMutexNew+0x102>
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d003      	beq.n	800eb42 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800eb3a:	69fb      	ldr	r3, [r7, #28]
 800eb3c:	f043 0301 	orr.w	r3, r3, #1
 800eb40:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800eb42:	69fb      	ldr	r3, [r7, #28]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3720      	adds	r7, #32
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800eb4c:	b480      	push	{r7}
 800eb4e:	b085      	sub	sp, #20
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	60f8      	str	r0, [r7, #12]
 800eb54:	60b9      	str	r1, [r7, #8]
 800eb56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	4a07      	ldr	r2, [pc, #28]	; (800eb78 <vApplicationGetIdleTaskMemory+0x2c>)
 800eb5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	4a06      	ldr	r2, [pc, #24]	; (800eb7c <vApplicationGetIdleTaskMemory+0x30>)
 800eb62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2280      	movs	r2, #128	; 0x80
 800eb68:	601a      	str	r2, [r3, #0]
}
 800eb6a:	bf00      	nop
 800eb6c:	3714      	adds	r7, #20
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	20000690 	.word	0x20000690
 800eb7c:	2000074c 	.word	0x2000074c

0800eb80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800eb80:	b480      	push	{r7}
 800eb82:	b085      	sub	sp, #20
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	60f8      	str	r0, [r7, #12]
 800eb88:	60b9      	str	r1, [r7, #8]
 800eb8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	4a07      	ldr	r2, [pc, #28]	; (800ebac <vApplicationGetTimerTaskMemory+0x2c>)
 800eb90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	4a06      	ldr	r2, [pc, #24]	; (800ebb0 <vApplicationGetTimerTaskMemory+0x30>)
 800eb96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb9e:	601a      	str	r2, [r3, #0]
}
 800eba0:	bf00      	nop
 800eba2:	3714      	adds	r7, #20
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr
 800ebac:	2000094c 	.word	0x2000094c
 800ebb0:	20000a08 	.word	0x20000a08

0800ebb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f103 0208 	add.w	r2, r3, #8
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f04f 32ff 	mov.w	r2, #4294967295
 800ebcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f103 0208 	add.w	r2, r3, #8
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f103 0208 	add.w	r2, r3, #8
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ebe8:	bf00      	nop
 800ebea:	370c      	adds	r7, #12
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr

0800ebf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ec02:	bf00      	nop
 800ec04:	370c      	adds	r7, #12
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr

0800ec0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec0e:	b480      	push	{r7}
 800ec10:	b085      	sub	sp, #20
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	6078      	str	r0, [r7, #4]
 800ec16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	68fa      	ldr	r2, [r7, #12]
 800ec22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	689a      	ldr	r2, [r3, #8]
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	689b      	ldr	r3, [r3, #8]
 800ec30:	683a      	ldr	r2, [r7, #0]
 800ec32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	683a      	ldr	r2, [r7, #0]
 800ec38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	1c5a      	adds	r2, r3, #1
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	601a      	str	r2, [r3, #0]
}
 800ec4a:	bf00      	nop
 800ec4c:	3714      	adds	r7, #20
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr

0800ec56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec56:	b480      	push	{r7}
 800ec58:	b085      	sub	sp, #20
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
 800ec5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec6c:	d103      	bne.n	800ec76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	691b      	ldr	r3, [r3, #16]
 800ec72:	60fb      	str	r3, [r7, #12]
 800ec74:	e00c      	b.n	800ec90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	3308      	adds	r3, #8
 800ec7a:	60fb      	str	r3, [r7, #12]
 800ec7c:	e002      	b.n	800ec84 <vListInsert+0x2e>
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	60fb      	str	r3, [r7, #12]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	68ba      	ldr	r2, [r7, #8]
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d2f6      	bcs.n	800ec7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	685a      	ldr	r2, [r3, #4]
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	683a      	ldr	r2, [r7, #0]
 800ec9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	68fa      	ldr	r2, [r7, #12]
 800eca4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	683a      	ldr	r2, [r7, #0]
 800ecaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	1c5a      	adds	r2, r3, #1
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	601a      	str	r2, [r3, #0]
}
 800ecbc:	bf00      	nop
 800ecbe:	3714      	adds	r7, #20
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	691b      	ldr	r3, [r3, #16]
 800ecd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	6892      	ldr	r2, [r2, #8]
 800ecde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	689b      	ldr	r3, [r3, #8]
 800ece4:	687a      	ldr	r2, [r7, #4]
 800ece6:	6852      	ldr	r2, [r2, #4]
 800ece8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d103      	bne.n	800ecfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	689a      	ldr	r2, [r3, #8]
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	1e5a      	subs	r2, r3, #1
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3714      	adds	r7, #20
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr

0800ed1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d10a      	bne.n	800ed46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ed30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed34:	f383 8811 	msr	BASEPRI, r3
 800ed38:	f3bf 8f6f 	isb	sy
 800ed3c:	f3bf 8f4f 	dsb	sy
 800ed40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ed42:	bf00      	nop
 800ed44:	e7fe      	b.n	800ed44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ed46:	f002 fba5 	bl	8011494 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed52:	68f9      	ldr	r1, [r7, #12]
 800ed54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed56:	fb01 f303 	mul.w	r3, r1, r3
 800ed5a:	441a      	add	r2, r3
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2200      	movs	r2, #0
 800ed64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed76:	3b01      	subs	r3, #1
 800ed78:	68f9      	ldr	r1, [r7, #12]
 800ed7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed7c:	fb01 f303 	mul.w	r3, r1, r3
 800ed80:	441a      	add	r2, r3
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	22ff      	movs	r2, #255	; 0xff
 800ed8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	22ff      	movs	r2, #255	; 0xff
 800ed92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d114      	bne.n	800edc6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	691b      	ldr	r3, [r3, #16]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d01a      	beq.n	800edda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	3310      	adds	r3, #16
 800eda8:	4618      	mov	r0, r3
 800edaa:	f001 fb45 	bl	8010438 <xTaskRemoveFromEventList>
 800edae:	4603      	mov	r3, r0
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d012      	beq.n	800edda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800edb4:	4b0c      	ldr	r3, [pc, #48]	; (800ede8 <xQueueGenericReset+0xcc>)
 800edb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edba:	601a      	str	r2, [r3, #0]
 800edbc:	f3bf 8f4f 	dsb	sy
 800edc0:	f3bf 8f6f 	isb	sy
 800edc4:	e009      	b.n	800edda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	3310      	adds	r3, #16
 800edca:	4618      	mov	r0, r3
 800edcc:	f7ff fef2 	bl	800ebb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	3324      	adds	r3, #36	; 0x24
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7ff feed 	bl	800ebb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800edda:	f002 fb8b 	bl	80114f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800edde:	2301      	movs	r3, #1
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3710      	adds	r7, #16
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	e000ed04 	.word	0xe000ed04

0800edec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800edec:	b580      	push	{r7, lr}
 800edee:	b08e      	sub	sp, #56	; 0x38
 800edf0:	af02      	add	r7, sp, #8
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	607a      	str	r2, [r7, #4]
 800edf8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d10a      	bne.n	800ee16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ee00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee04:	f383 8811 	msr	BASEPRI, r3
 800ee08:	f3bf 8f6f 	isb	sy
 800ee0c:	f3bf 8f4f 	dsb	sy
 800ee10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ee12:	bf00      	nop
 800ee14:	e7fe      	b.n	800ee14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d10a      	bne.n	800ee32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ee1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee20:	f383 8811 	msr	BASEPRI, r3
 800ee24:	f3bf 8f6f 	isb	sy
 800ee28:	f3bf 8f4f 	dsb	sy
 800ee2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ee2e:	bf00      	nop
 800ee30:	e7fe      	b.n	800ee30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d002      	beq.n	800ee3e <xQueueGenericCreateStatic+0x52>
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d001      	beq.n	800ee42 <xQueueGenericCreateStatic+0x56>
 800ee3e:	2301      	movs	r3, #1
 800ee40:	e000      	b.n	800ee44 <xQueueGenericCreateStatic+0x58>
 800ee42:	2300      	movs	r3, #0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d10a      	bne.n	800ee5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ee48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4c:	f383 8811 	msr	BASEPRI, r3
 800ee50:	f3bf 8f6f 	isb	sy
 800ee54:	f3bf 8f4f 	dsb	sy
 800ee58:	623b      	str	r3, [r7, #32]
}
 800ee5a:	bf00      	nop
 800ee5c:	e7fe      	b.n	800ee5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d102      	bne.n	800ee6a <xQueueGenericCreateStatic+0x7e>
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d101      	bne.n	800ee6e <xQueueGenericCreateStatic+0x82>
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	e000      	b.n	800ee70 <xQueueGenericCreateStatic+0x84>
 800ee6e:	2300      	movs	r3, #0
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d10a      	bne.n	800ee8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ee74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee78:	f383 8811 	msr	BASEPRI, r3
 800ee7c:	f3bf 8f6f 	isb	sy
 800ee80:	f3bf 8f4f 	dsb	sy
 800ee84:	61fb      	str	r3, [r7, #28]
}
 800ee86:	bf00      	nop
 800ee88:	e7fe      	b.n	800ee88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ee8a:	2350      	movs	r3, #80	; 0x50
 800ee8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	2b50      	cmp	r3, #80	; 0x50
 800ee92:	d00a      	beq.n	800eeaa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ee94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee98:	f383 8811 	msr	BASEPRI, r3
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	61bb      	str	r3, [r7, #24]
}
 800eea6:	bf00      	nop
 800eea8:	e7fe      	b.n	800eea8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800eeaa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800eeb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00d      	beq.n	800eed2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800eeb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb8:	2201      	movs	r2, #1
 800eeba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eebe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800eec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	4613      	mov	r3, r2
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	68b9      	ldr	r1, [r7, #8]
 800eecc:	68f8      	ldr	r0, [r7, #12]
 800eece:	f000 f83f 	bl	800ef50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800eed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3730      	adds	r7, #48	; 0x30
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b08a      	sub	sp, #40	; 0x28
 800eee0:	af02      	add	r7, sp, #8
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	4613      	mov	r3, r2
 800eee8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d10a      	bne.n	800ef06 <xQueueGenericCreate+0x2a>
	__asm volatile
 800eef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef4:	f383 8811 	msr	BASEPRI, r3
 800eef8:	f3bf 8f6f 	isb	sy
 800eefc:	f3bf 8f4f 	dsb	sy
 800ef00:	613b      	str	r3, [r7, #16]
}
 800ef02:	bf00      	nop
 800ef04:	e7fe      	b.n	800ef04 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	68ba      	ldr	r2, [r7, #8]
 800ef0a:	fb02 f303 	mul.w	r3, r2, r3
 800ef0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ef10:	69fb      	ldr	r3, [r7, #28]
 800ef12:	3350      	adds	r3, #80	; 0x50
 800ef14:	4618      	mov	r0, r3
 800ef16:	f002 fbdf 	bl	80116d8 <pvPortMalloc>
 800ef1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d011      	beq.n	800ef46 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ef22:	69bb      	ldr	r3, [r7, #24]
 800ef24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	3350      	adds	r3, #80	; 0x50
 800ef2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ef34:	79fa      	ldrb	r2, [r7, #7]
 800ef36:	69bb      	ldr	r3, [r7, #24]
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	4613      	mov	r3, r2
 800ef3c:	697a      	ldr	r2, [r7, #20]
 800ef3e:	68b9      	ldr	r1, [r7, #8]
 800ef40:	68f8      	ldr	r0, [r7, #12]
 800ef42:	f000 f805 	bl	800ef50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ef46:	69bb      	ldr	r3, [r7, #24]
	}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3720      	adds	r7, #32
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	607a      	str	r2, [r7, #4]
 800ef5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d103      	bne.n	800ef6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ef64:	69bb      	ldr	r3, [r7, #24]
 800ef66:	69ba      	ldr	r2, [r7, #24]
 800ef68:	601a      	str	r2, [r3, #0]
 800ef6a:	e002      	b.n	800ef72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ef6c:	69bb      	ldr	r3, [r7, #24]
 800ef6e:	687a      	ldr	r2, [r7, #4]
 800ef70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ef72:	69bb      	ldr	r3, [r7, #24]
 800ef74:	68fa      	ldr	r2, [r7, #12]
 800ef76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	68ba      	ldr	r2, [r7, #8]
 800ef7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ef7e:	2101      	movs	r1, #1
 800ef80:	69b8      	ldr	r0, [r7, #24]
 800ef82:	f7ff fecb 	bl	800ed1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ef86:	69bb      	ldr	r3, [r7, #24]
 800ef88:	78fa      	ldrb	r2, [r7, #3]
 800ef8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ef8e:	bf00      	nop
 800ef90:	3710      	adds	r7, #16
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}

0800ef96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ef96:	b580      	push	{r7, lr}
 800ef98:	b082      	sub	sp, #8
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d00e      	beq.n	800efc2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2200      	movs	r2, #0
 800efa8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2200      	movs	r2, #0
 800efb4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800efb6:	2300      	movs	r3, #0
 800efb8:	2200      	movs	r2, #0
 800efba:	2100      	movs	r1, #0
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 f837 	bl	800f030 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800efc2:	bf00      	nop
 800efc4:	3708      	adds	r7, #8
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}

0800efca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800efca:	b580      	push	{r7, lr}
 800efcc:	b086      	sub	sp, #24
 800efce:	af00      	add	r7, sp, #0
 800efd0:	4603      	mov	r3, r0
 800efd2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800efd4:	2301      	movs	r3, #1
 800efd6:	617b      	str	r3, [r7, #20]
 800efd8:	2300      	movs	r3, #0
 800efda:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800efdc:	79fb      	ldrb	r3, [r7, #7]
 800efde:	461a      	mov	r2, r3
 800efe0:	6939      	ldr	r1, [r7, #16]
 800efe2:	6978      	ldr	r0, [r7, #20]
 800efe4:	f7ff ff7a 	bl	800eedc <xQueueGenericCreate>
 800efe8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800efea:	68f8      	ldr	r0, [r7, #12]
 800efec:	f7ff ffd3 	bl	800ef96 <prvInitialiseMutex>

		return xNewQueue;
 800eff0:	68fb      	ldr	r3, [r7, #12]
	}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3718      	adds	r7, #24
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}

0800effa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800effa:	b580      	push	{r7, lr}
 800effc:	b088      	sub	sp, #32
 800effe:	af02      	add	r7, sp, #8
 800f000:	4603      	mov	r3, r0
 800f002:	6039      	str	r1, [r7, #0]
 800f004:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f006:	2301      	movs	r3, #1
 800f008:	617b      	str	r3, [r7, #20]
 800f00a:	2300      	movs	r3, #0
 800f00c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f00e:	79fb      	ldrb	r3, [r7, #7]
 800f010:	9300      	str	r3, [sp, #0]
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	2200      	movs	r2, #0
 800f016:	6939      	ldr	r1, [r7, #16]
 800f018:	6978      	ldr	r0, [r7, #20]
 800f01a:	f7ff fee7 	bl	800edec <xQueueGenericCreateStatic>
 800f01e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f020:	68f8      	ldr	r0, [r7, #12]
 800f022:	f7ff ffb8 	bl	800ef96 <prvInitialiseMutex>

		return xNewQueue;
 800f026:	68fb      	ldr	r3, [r7, #12]
	}
 800f028:	4618      	mov	r0, r3
 800f02a:	3718      	adds	r7, #24
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b08e      	sub	sp, #56	; 0x38
 800f034:	af00      	add	r7, sp, #0
 800f036:	60f8      	str	r0, [r7, #12]
 800f038:	60b9      	str	r1, [r7, #8]
 800f03a:	607a      	str	r2, [r7, #4]
 800f03c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f03e:	2300      	movs	r3, #0
 800f040:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d10a      	bne.n	800f062 <xQueueGenericSend+0x32>
	__asm volatile
 800f04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f050:	f383 8811 	msr	BASEPRI, r3
 800f054:	f3bf 8f6f 	isb	sy
 800f058:	f3bf 8f4f 	dsb	sy
 800f05c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f05e:	bf00      	nop
 800f060:	e7fe      	b.n	800f060 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d103      	bne.n	800f070 <xQueueGenericSend+0x40>
 800f068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d101      	bne.n	800f074 <xQueueGenericSend+0x44>
 800f070:	2301      	movs	r3, #1
 800f072:	e000      	b.n	800f076 <xQueueGenericSend+0x46>
 800f074:	2300      	movs	r3, #0
 800f076:	2b00      	cmp	r3, #0
 800f078:	d10a      	bne.n	800f090 <xQueueGenericSend+0x60>
	__asm volatile
 800f07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f07e:	f383 8811 	msr	BASEPRI, r3
 800f082:	f3bf 8f6f 	isb	sy
 800f086:	f3bf 8f4f 	dsb	sy
 800f08a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f08c:	bf00      	nop
 800f08e:	e7fe      	b.n	800f08e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	2b02      	cmp	r3, #2
 800f094:	d103      	bne.n	800f09e <xQueueGenericSend+0x6e>
 800f096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d101      	bne.n	800f0a2 <xQueueGenericSend+0x72>
 800f09e:	2301      	movs	r3, #1
 800f0a0:	e000      	b.n	800f0a4 <xQueueGenericSend+0x74>
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d10a      	bne.n	800f0be <xQueueGenericSend+0x8e>
	__asm volatile
 800f0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ac:	f383 8811 	msr	BASEPRI, r3
 800f0b0:	f3bf 8f6f 	isb	sy
 800f0b4:	f3bf 8f4f 	dsb	sy
 800f0b8:	623b      	str	r3, [r7, #32]
}
 800f0ba:	bf00      	nop
 800f0bc:	e7fe      	b.n	800f0bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0be:	f001 fb8d 	bl	80107dc <xTaskGetSchedulerState>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d102      	bne.n	800f0ce <xQueueGenericSend+0x9e>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d101      	bne.n	800f0d2 <xQueueGenericSend+0xa2>
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e000      	b.n	800f0d4 <xQueueGenericSend+0xa4>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d10a      	bne.n	800f0ee <xQueueGenericSend+0xbe>
	__asm volatile
 800f0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0dc:	f383 8811 	msr	BASEPRI, r3
 800f0e0:	f3bf 8f6f 	isb	sy
 800f0e4:	f3bf 8f4f 	dsb	sy
 800f0e8:	61fb      	str	r3, [r7, #28]
}
 800f0ea:	bf00      	nop
 800f0ec:	e7fe      	b.n	800f0ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f0ee:	f002 f9d1 	bl	8011494 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d302      	bcc.n	800f104 <xQueueGenericSend+0xd4>
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	2b02      	cmp	r3, #2
 800f102:	d129      	bne.n	800f158 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f104:	683a      	ldr	r2, [r7, #0]
 800f106:	68b9      	ldr	r1, [r7, #8]
 800f108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f10a:	f000 fb2f 	bl	800f76c <prvCopyDataToQueue>
 800f10e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f114:	2b00      	cmp	r3, #0
 800f116:	d010      	beq.n	800f13a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f11a:	3324      	adds	r3, #36	; 0x24
 800f11c:	4618      	mov	r0, r3
 800f11e:	f001 f98b 	bl	8010438 <xTaskRemoveFromEventList>
 800f122:	4603      	mov	r3, r0
 800f124:	2b00      	cmp	r3, #0
 800f126:	d013      	beq.n	800f150 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f128:	4b3f      	ldr	r3, [pc, #252]	; (800f228 <xQueueGenericSend+0x1f8>)
 800f12a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f12e:	601a      	str	r2, [r3, #0]
 800f130:	f3bf 8f4f 	dsb	sy
 800f134:	f3bf 8f6f 	isb	sy
 800f138:	e00a      	b.n	800f150 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d007      	beq.n	800f150 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f140:	4b39      	ldr	r3, [pc, #228]	; (800f228 <xQueueGenericSend+0x1f8>)
 800f142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f146:	601a      	str	r2, [r3, #0]
 800f148:	f3bf 8f4f 	dsb	sy
 800f14c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f150:	f002 f9d0 	bl	80114f4 <vPortExitCritical>
				return pdPASS;
 800f154:	2301      	movs	r3, #1
 800f156:	e063      	b.n	800f220 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d103      	bne.n	800f166 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f15e:	f002 f9c9 	bl	80114f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f162:	2300      	movs	r3, #0
 800f164:	e05c      	b.n	800f220 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d106      	bne.n	800f17a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f16c:	f107 0314 	add.w	r3, r7, #20
 800f170:	4618      	mov	r0, r3
 800f172:	f001 f9c5 	bl	8010500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f176:	2301      	movs	r3, #1
 800f178:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f17a:	f002 f9bb 	bl	80114f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f17e:	f000 ff31 	bl	800ffe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f182:	f002 f987 	bl	8011494 <vPortEnterCritical>
 800f186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f18c:	b25b      	sxtb	r3, r3
 800f18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f192:	d103      	bne.n	800f19c <xQueueGenericSend+0x16c>
 800f194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f196:	2200      	movs	r2, #0
 800f198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1a2:	b25b      	sxtb	r3, r3
 800f1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1a8:	d103      	bne.n	800f1b2 <xQueueGenericSend+0x182>
 800f1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1b2:	f002 f99f 	bl	80114f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1b6:	1d3a      	adds	r2, r7, #4
 800f1b8:	f107 0314 	add.w	r3, r7, #20
 800f1bc:	4611      	mov	r1, r2
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f001 f9b4 	bl	801052c <xTaskCheckForTimeOut>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d124      	bne.n	800f214 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f1ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1cc:	f000 fbc6 	bl	800f95c <prvIsQueueFull>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d018      	beq.n	800f208 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d8:	3310      	adds	r3, #16
 800f1da:	687a      	ldr	r2, [r7, #4]
 800f1dc:	4611      	mov	r1, r2
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f001 f8da 	bl	8010398 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f1e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1e6:	f000 fb51 	bl	800f88c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f1ea:	f000 ff09 	bl	8010000 <xTaskResumeAll>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	f47f af7c 	bne.w	800f0ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f1f6:	4b0c      	ldr	r3, [pc, #48]	; (800f228 <xQueueGenericSend+0x1f8>)
 800f1f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1fc:	601a      	str	r2, [r3, #0]
 800f1fe:	f3bf 8f4f 	dsb	sy
 800f202:	f3bf 8f6f 	isb	sy
 800f206:	e772      	b.n	800f0ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f20a:	f000 fb3f 	bl	800f88c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f20e:	f000 fef7 	bl	8010000 <xTaskResumeAll>
 800f212:	e76c      	b.n	800f0ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f216:	f000 fb39 	bl	800f88c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f21a:	f000 fef1 	bl	8010000 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f21e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f220:	4618      	mov	r0, r3
 800f222:	3738      	adds	r7, #56	; 0x38
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	e000ed04 	.word	0xe000ed04

0800f22c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b090      	sub	sp, #64	; 0x40
 800f230:	af00      	add	r7, sp, #0
 800f232:	60f8      	str	r0, [r7, #12]
 800f234:	60b9      	str	r1, [r7, #8]
 800f236:	607a      	str	r2, [r7, #4]
 800f238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f240:	2b00      	cmp	r3, #0
 800f242:	d10a      	bne.n	800f25a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f248:	f383 8811 	msr	BASEPRI, r3
 800f24c:	f3bf 8f6f 	isb	sy
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f256:	bf00      	nop
 800f258:	e7fe      	b.n	800f258 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d103      	bne.n	800f268 <xQueueGenericSendFromISR+0x3c>
 800f260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f264:	2b00      	cmp	r3, #0
 800f266:	d101      	bne.n	800f26c <xQueueGenericSendFromISR+0x40>
 800f268:	2301      	movs	r3, #1
 800f26a:	e000      	b.n	800f26e <xQueueGenericSendFromISR+0x42>
 800f26c:	2300      	movs	r3, #0
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d10a      	bne.n	800f288 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f276:	f383 8811 	msr	BASEPRI, r3
 800f27a:	f3bf 8f6f 	isb	sy
 800f27e:	f3bf 8f4f 	dsb	sy
 800f282:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f284:	bf00      	nop
 800f286:	e7fe      	b.n	800f286 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	2b02      	cmp	r3, #2
 800f28c:	d103      	bne.n	800f296 <xQueueGenericSendFromISR+0x6a>
 800f28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f292:	2b01      	cmp	r3, #1
 800f294:	d101      	bne.n	800f29a <xQueueGenericSendFromISR+0x6e>
 800f296:	2301      	movs	r3, #1
 800f298:	e000      	b.n	800f29c <xQueueGenericSendFromISR+0x70>
 800f29a:	2300      	movs	r3, #0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d10a      	bne.n	800f2b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a4:	f383 8811 	msr	BASEPRI, r3
 800f2a8:	f3bf 8f6f 	isb	sy
 800f2ac:	f3bf 8f4f 	dsb	sy
 800f2b0:	623b      	str	r3, [r7, #32]
}
 800f2b2:	bf00      	nop
 800f2b4:	e7fe      	b.n	800f2b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f2b6:	f002 f9cf 	bl	8011658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f2ba:	f3ef 8211 	mrs	r2, BASEPRI
 800f2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c2:	f383 8811 	msr	BASEPRI, r3
 800f2c6:	f3bf 8f6f 	isb	sy
 800f2ca:	f3bf 8f4f 	dsb	sy
 800f2ce:	61fa      	str	r2, [r7, #28]
 800f2d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f2d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d302      	bcc.n	800f2e8 <xQueueGenericSendFromISR+0xbc>
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	2b02      	cmp	r3, #2
 800f2e6:	d12f      	bne.n	800f348 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f2f8:	683a      	ldr	r2, [r7, #0]
 800f2fa:	68b9      	ldr	r1, [r7, #8]
 800f2fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f2fe:	f000 fa35 	bl	800f76c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f302:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f30a:	d112      	bne.n	800f332 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f310:	2b00      	cmp	r3, #0
 800f312:	d016      	beq.n	800f342 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f316:	3324      	adds	r3, #36	; 0x24
 800f318:	4618      	mov	r0, r3
 800f31a:	f001 f88d 	bl	8010438 <xTaskRemoveFromEventList>
 800f31e:	4603      	mov	r3, r0
 800f320:	2b00      	cmp	r3, #0
 800f322:	d00e      	beq.n	800f342 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d00b      	beq.n	800f342 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2201      	movs	r2, #1
 800f32e:	601a      	str	r2, [r3, #0]
 800f330:	e007      	b.n	800f342 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f332:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f336:	3301      	adds	r3, #1
 800f338:	b2db      	uxtb	r3, r3
 800f33a:	b25a      	sxtb	r2, r3
 800f33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f33e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f342:	2301      	movs	r3, #1
 800f344:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f346:	e001      	b.n	800f34c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f348:	2300      	movs	r3, #0
 800f34a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f34e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f356:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3740      	adds	r7, #64	; 0x40
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
	...

0800f364 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b08c      	sub	sp, #48	; 0x30
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f370:	2300      	movs	r3, #0
 800f372:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d10a      	bne.n	800f394 <xQueueReceive+0x30>
	__asm volatile
 800f37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f382:	f383 8811 	msr	BASEPRI, r3
 800f386:	f3bf 8f6f 	isb	sy
 800f38a:	f3bf 8f4f 	dsb	sy
 800f38e:	623b      	str	r3, [r7, #32]
}
 800f390:	bf00      	nop
 800f392:	e7fe      	b.n	800f392 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d103      	bne.n	800f3a2 <xQueueReceive+0x3e>
 800f39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d101      	bne.n	800f3a6 <xQueueReceive+0x42>
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	e000      	b.n	800f3a8 <xQueueReceive+0x44>
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d10a      	bne.n	800f3c2 <xQueueReceive+0x5e>
	__asm volatile
 800f3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b0:	f383 8811 	msr	BASEPRI, r3
 800f3b4:	f3bf 8f6f 	isb	sy
 800f3b8:	f3bf 8f4f 	dsb	sy
 800f3bc:	61fb      	str	r3, [r7, #28]
}
 800f3be:	bf00      	nop
 800f3c0:	e7fe      	b.n	800f3c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f3c2:	f001 fa0b 	bl	80107dc <xTaskGetSchedulerState>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d102      	bne.n	800f3d2 <xQueueReceive+0x6e>
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d101      	bne.n	800f3d6 <xQueueReceive+0x72>
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	e000      	b.n	800f3d8 <xQueueReceive+0x74>
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d10a      	bne.n	800f3f2 <xQueueReceive+0x8e>
	__asm volatile
 800f3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e0:	f383 8811 	msr	BASEPRI, r3
 800f3e4:	f3bf 8f6f 	isb	sy
 800f3e8:	f3bf 8f4f 	dsb	sy
 800f3ec:	61bb      	str	r3, [r7, #24]
}
 800f3ee:	bf00      	nop
 800f3f0:	e7fe      	b.n	800f3f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f3f2:	f002 f84f 	bl	8011494 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d01f      	beq.n	800f442 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f402:	68b9      	ldr	r1, [r7, #8]
 800f404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f406:	f000 fa1b 	bl	800f840 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40c:	1e5a      	subs	r2, r3, #1
 800f40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f410:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f414:	691b      	ldr	r3, [r3, #16]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d00f      	beq.n	800f43a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41c:	3310      	adds	r3, #16
 800f41e:	4618      	mov	r0, r3
 800f420:	f001 f80a 	bl	8010438 <xTaskRemoveFromEventList>
 800f424:	4603      	mov	r3, r0
 800f426:	2b00      	cmp	r3, #0
 800f428:	d007      	beq.n	800f43a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f42a:	4b3d      	ldr	r3, [pc, #244]	; (800f520 <xQueueReceive+0x1bc>)
 800f42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f430:	601a      	str	r2, [r3, #0]
 800f432:	f3bf 8f4f 	dsb	sy
 800f436:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f43a:	f002 f85b 	bl	80114f4 <vPortExitCritical>
				return pdPASS;
 800f43e:	2301      	movs	r3, #1
 800f440:	e069      	b.n	800f516 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d103      	bne.n	800f450 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f448:	f002 f854 	bl	80114f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f44c:	2300      	movs	r3, #0
 800f44e:	e062      	b.n	800f516 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f452:	2b00      	cmp	r3, #0
 800f454:	d106      	bne.n	800f464 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f456:	f107 0310 	add.w	r3, r7, #16
 800f45a:	4618      	mov	r0, r3
 800f45c:	f001 f850 	bl	8010500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f460:	2301      	movs	r3, #1
 800f462:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f464:	f002 f846 	bl	80114f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f468:	f000 fdbc 	bl	800ffe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f46c:	f002 f812 	bl	8011494 <vPortEnterCritical>
 800f470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f476:	b25b      	sxtb	r3, r3
 800f478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f47c:	d103      	bne.n	800f486 <xQueueReceive+0x122>
 800f47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f480:	2200      	movs	r2, #0
 800f482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f48c:	b25b      	sxtb	r3, r3
 800f48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f492:	d103      	bne.n	800f49c <xQueueReceive+0x138>
 800f494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f496:	2200      	movs	r2, #0
 800f498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f49c:	f002 f82a 	bl	80114f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4a0:	1d3a      	adds	r2, r7, #4
 800f4a2:	f107 0310 	add.w	r3, r7, #16
 800f4a6:	4611      	mov	r1, r2
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f001 f83f 	bl	801052c <xTaskCheckForTimeOut>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d123      	bne.n	800f4fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4b6:	f000 fa3b 	bl	800f930 <prvIsQueueEmpty>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d017      	beq.n	800f4f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	3324      	adds	r3, #36	; 0x24
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	4611      	mov	r1, r2
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f000 ff65 	bl	8010398 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f4ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4d0:	f000 f9dc 	bl	800f88c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f4d4:	f000 fd94 	bl	8010000 <xTaskResumeAll>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d189      	bne.n	800f3f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f4de:	4b10      	ldr	r3, [pc, #64]	; (800f520 <xQueueReceive+0x1bc>)
 800f4e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4e4:	601a      	str	r2, [r3, #0]
 800f4e6:	f3bf 8f4f 	dsb	sy
 800f4ea:	f3bf 8f6f 	isb	sy
 800f4ee:	e780      	b.n	800f3f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f4f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4f2:	f000 f9cb 	bl	800f88c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f4f6:	f000 fd83 	bl	8010000 <xTaskResumeAll>
 800f4fa:	e77a      	b.n	800f3f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f4fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4fe:	f000 f9c5 	bl	800f88c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f502:	f000 fd7d 	bl	8010000 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f508:	f000 fa12 	bl	800f930 <prvIsQueueEmpty>
 800f50c:	4603      	mov	r3, r0
 800f50e:	2b00      	cmp	r3, #0
 800f510:	f43f af6f 	beq.w	800f3f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f514:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f516:	4618      	mov	r0, r3
 800f518:	3730      	adds	r7, #48	; 0x30
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	e000ed04 	.word	0xe000ed04

0800f524 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b08e      	sub	sp, #56	; 0x38
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f52e:	2300      	movs	r3, #0
 800f530:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f536:	2300      	movs	r3, #0
 800f538:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d10a      	bne.n	800f556 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f544:	f383 8811 	msr	BASEPRI, r3
 800f548:	f3bf 8f6f 	isb	sy
 800f54c:	f3bf 8f4f 	dsb	sy
 800f550:	623b      	str	r3, [r7, #32]
}
 800f552:	bf00      	nop
 800f554:	e7fe      	b.n	800f554 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d00a      	beq.n	800f574 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f562:	f383 8811 	msr	BASEPRI, r3
 800f566:	f3bf 8f6f 	isb	sy
 800f56a:	f3bf 8f4f 	dsb	sy
 800f56e:	61fb      	str	r3, [r7, #28]
}
 800f570:	bf00      	nop
 800f572:	e7fe      	b.n	800f572 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f574:	f001 f932 	bl	80107dc <xTaskGetSchedulerState>
 800f578:	4603      	mov	r3, r0
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d102      	bne.n	800f584 <xQueueSemaphoreTake+0x60>
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d101      	bne.n	800f588 <xQueueSemaphoreTake+0x64>
 800f584:	2301      	movs	r3, #1
 800f586:	e000      	b.n	800f58a <xQueueSemaphoreTake+0x66>
 800f588:	2300      	movs	r3, #0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d10a      	bne.n	800f5a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f592:	f383 8811 	msr	BASEPRI, r3
 800f596:	f3bf 8f6f 	isb	sy
 800f59a:	f3bf 8f4f 	dsb	sy
 800f59e:	61bb      	str	r3, [r7, #24]
}
 800f5a0:	bf00      	nop
 800f5a2:	e7fe      	b.n	800f5a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f5a4:	f001 ff76 	bl	8011494 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d024      	beq.n	800f5fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b6:	1e5a      	subs	r2, r3, #1
 800f5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d104      	bne.n	800f5ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f5c4:	f001 fa80 	bl	8010ac8 <pvTaskIncrementMutexHeldCount>
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d0:	691b      	ldr	r3, [r3, #16]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00f      	beq.n	800f5f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d8:	3310      	adds	r3, #16
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f000 ff2c 	bl	8010438 <xTaskRemoveFromEventList>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d007      	beq.n	800f5f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f5e6:	4b54      	ldr	r3, [pc, #336]	; (800f738 <xQueueSemaphoreTake+0x214>)
 800f5e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ec:	601a      	str	r2, [r3, #0]
 800f5ee:	f3bf 8f4f 	dsb	sy
 800f5f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f5f6:	f001 ff7d 	bl	80114f4 <vPortExitCritical>
				return pdPASS;
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	e097      	b.n	800f72e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d111      	bne.n	800f628 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f606:	2b00      	cmp	r3, #0
 800f608:	d00a      	beq.n	800f620 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f60e:	f383 8811 	msr	BASEPRI, r3
 800f612:	f3bf 8f6f 	isb	sy
 800f616:	f3bf 8f4f 	dsb	sy
 800f61a:	617b      	str	r3, [r7, #20]
}
 800f61c:	bf00      	nop
 800f61e:	e7fe      	b.n	800f61e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f620:	f001 ff68 	bl	80114f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f624:	2300      	movs	r3, #0
 800f626:	e082      	b.n	800f72e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d106      	bne.n	800f63c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f62e:	f107 030c 	add.w	r3, r7, #12
 800f632:	4618      	mov	r0, r3
 800f634:	f000 ff64 	bl	8010500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f638:	2301      	movs	r3, #1
 800f63a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f63c:	f001 ff5a 	bl	80114f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f640:	f000 fcd0 	bl	800ffe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f644:	f001 ff26 	bl	8011494 <vPortEnterCritical>
 800f648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f64a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f64e:	b25b      	sxtb	r3, r3
 800f650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f654:	d103      	bne.n	800f65e <xQueueSemaphoreTake+0x13a>
 800f656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f658:	2200      	movs	r2, #0
 800f65a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f664:	b25b      	sxtb	r3, r3
 800f666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f66a:	d103      	bne.n	800f674 <xQueueSemaphoreTake+0x150>
 800f66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f674:	f001 ff3e 	bl	80114f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f678:	463a      	mov	r2, r7
 800f67a:	f107 030c 	add.w	r3, r7, #12
 800f67e:	4611      	mov	r1, r2
 800f680:	4618      	mov	r0, r3
 800f682:	f000 ff53 	bl	801052c <xTaskCheckForTimeOut>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d132      	bne.n	800f6f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f68c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f68e:	f000 f94f 	bl	800f930 <prvIsQueueEmpty>
 800f692:	4603      	mov	r3, r0
 800f694:	2b00      	cmp	r3, #0
 800f696:	d026      	beq.n	800f6e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d109      	bne.n	800f6b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f6a0:	f001 fef8 	bl	8011494 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a6:	689b      	ldr	r3, [r3, #8]
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f001 f8b5 	bl	8010818 <xTaskPriorityInherit>
 800f6ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f6b0:	f001 ff20 	bl	80114f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b6:	3324      	adds	r3, #36	; 0x24
 800f6b8:	683a      	ldr	r2, [r7, #0]
 800f6ba:	4611      	mov	r1, r2
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f000 fe6b 	bl	8010398 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f6c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6c4:	f000 f8e2 	bl	800f88c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f6c8:	f000 fc9a 	bl	8010000 <xTaskResumeAll>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	f47f af68 	bne.w	800f5a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f6d4:	4b18      	ldr	r3, [pc, #96]	; (800f738 <xQueueSemaphoreTake+0x214>)
 800f6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6da:	601a      	str	r2, [r3, #0]
 800f6dc:	f3bf 8f4f 	dsb	sy
 800f6e0:	f3bf 8f6f 	isb	sy
 800f6e4:	e75e      	b.n	800f5a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f6e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6e8:	f000 f8d0 	bl	800f88c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f6ec:	f000 fc88 	bl	8010000 <xTaskResumeAll>
 800f6f0:	e758      	b.n	800f5a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f6f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6f4:	f000 f8ca 	bl	800f88c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f6f8:	f000 fc82 	bl	8010000 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f6fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6fe:	f000 f917 	bl	800f930 <prvIsQueueEmpty>
 800f702:	4603      	mov	r3, r0
 800f704:	2b00      	cmp	r3, #0
 800f706:	f43f af4d 	beq.w	800f5a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d00d      	beq.n	800f72c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f710:	f001 fec0 	bl	8011494 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f714:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f716:	f000 f811 	bl	800f73c <prvGetDisinheritPriorityAfterTimeout>
 800f71a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f71e:	689b      	ldr	r3, [r3, #8]
 800f720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f722:	4618      	mov	r0, r3
 800f724:	f001 f94e 	bl	80109c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f728:	f001 fee4 	bl	80114f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f72c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3738      	adds	r7, #56	; 0x38
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	e000ed04 	.word	0xe000ed04

0800f73c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f73c:	b480      	push	{r7}
 800f73e:	b085      	sub	sp, #20
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d006      	beq.n	800f75a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f756:	60fb      	str	r3, [r7, #12]
 800f758:	e001      	b.n	800f75e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f75a:	2300      	movs	r3, #0
 800f75c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f75e:	68fb      	ldr	r3, [r7, #12]
	}
 800f760:	4618      	mov	r0, r3
 800f762:	3714      	adds	r7, #20
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b086      	sub	sp, #24
 800f770:	af00      	add	r7, sp, #0
 800f772:	60f8      	str	r0, [r7, #12]
 800f774:	60b9      	str	r1, [r7, #8]
 800f776:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f778:	2300      	movs	r3, #0
 800f77a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f780:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f786:	2b00      	cmp	r3, #0
 800f788:	d10d      	bne.n	800f7a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d14d      	bne.n	800f82e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	689b      	ldr	r3, [r3, #8]
 800f796:	4618      	mov	r0, r3
 800f798:	f001 f8a6 	bl	80108e8 <xTaskPriorityDisinherit>
 800f79c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	609a      	str	r2, [r3, #8]
 800f7a4:	e043      	b.n	800f82e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d119      	bne.n	800f7e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	6858      	ldr	r0, [r3, #4]
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	68b9      	ldr	r1, [r7, #8]
 800f7b8:	f002 ffca 	bl	8012750 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	685a      	ldr	r2, [r3, #4]
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7c4:	441a      	add	r2, r3
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	685a      	ldr	r2, [r3, #4]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d32b      	bcc.n	800f82e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	605a      	str	r2, [r3, #4]
 800f7de:	e026      	b.n	800f82e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	68d8      	ldr	r0, [r3, #12]
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	68b9      	ldr	r1, [r7, #8]
 800f7ec:	f002 ffb0 	bl	8012750 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	68da      	ldr	r2, [r3, #12]
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7f8:	425b      	negs	r3, r3
 800f7fa:	441a      	add	r2, r3
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	68da      	ldr	r2, [r3, #12]
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	429a      	cmp	r2, r3
 800f80a:	d207      	bcs.n	800f81c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	689a      	ldr	r2, [r3, #8]
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f814:	425b      	negs	r3, r3
 800f816:	441a      	add	r2, r3
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2b02      	cmp	r3, #2
 800f820:	d105      	bne.n	800f82e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d002      	beq.n	800f82e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	3b01      	subs	r3, #1
 800f82c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	1c5a      	adds	r2, r3, #1
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f836:	697b      	ldr	r3, [r7, #20]
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3718      	adds	r7, #24
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d018      	beq.n	800f884 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	68da      	ldr	r2, [r3, #12]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f85a:	441a      	add	r2, r3
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	68da      	ldr	r2, [r3, #12]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d303      	bcc.n	800f874 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	68d9      	ldr	r1, [r3, #12]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f87c:	461a      	mov	r2, r3
 800f87e:	6838      	ldr	r0, [r7, #0]
 800f880:	f002 ff66 	bl	8012750 <memcpy>
	}
}
 800f884:	bf00      	nop
 800f886:	3708      	adds	r7, #8
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b084      	sub	sp, #16
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f894:	f001 fdfe 	bl	8011494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f89e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f8a0:	e011      	b.n	800f8c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d012      	beq.n	800f8d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	3324      	adds	r3, #36	; 0x24
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f000 fdc2 	bl	8010438 <xTaskRemoveFromEventList>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d001      	beq.n	800f8be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f8ba:	f000 fe99 	bl	80105f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f8be:	7bfb      	ldrb	r3, [r7, #15]
 800f8c0:	3b01      	subs	r3, #1
 800f8c2:	b2db      	uxtb	r3, r3
 800f8c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f8c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	dce9      	bgt.n	800f8a2 <prvUnlockQueue+0x16>
 800f8ce:	e000      	b.n	800f8d2 <prvUnlockQueue+0x46>
					break;
 800f8d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	22ff      	movs	r2, #255	; 0xff
 800f8d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f8da:	f001 fe0b 	bl	80114f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f8de:	f001 fdd9 	bl	8011494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f8e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f8ea:	e011      	b.n	800f910 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	691b      	ldr	r3, [r3, #16]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d012      	beq.n	800f91a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	3310      	adds	r3, #16
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f000 fd9d 	bl	8010438 <xTaskRemoveFromEventList>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2b00      	cmp	r3, #0
 800f902:	d001      	beq.n	800f908 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f904:	f000 fe74 	bl	80105f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f908:	7bbb      	ldrb	r3, [r7, #14]
 800f90a:	3b01      	subs	r3, #1
 800f90c:	b2db      	uxtb	r3, r3
 800f90e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f914:	2b00      	cmp	r3, #0
 800f916:	dce9      	bgt.n	800f8ec <prvUnlockQueue+0x60>
 800f918:	e000      	b.n	800f91c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f91a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	22ff      	movs	r2, #255	; 0xff
 800f920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f924:	f001 fde6 	bl	80114f4 <vPortExitCritical>
}
 800f928:	bf00      	nop
 800f92a:	3710      	adds	r7, #16
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b084      	sub	sp, #16
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f938:	f001 fdac 	bl	8011494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f940:	2b00      	cmp	r3, #0
 800f942:	d102      	bne.n	800f94a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f944:	2301      	movs	r3, #1
 800f946:	60fb      	str	r3, [r7, #12]
 800f948:	e001      	b.n	800f94e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f94a:	2300      	movs	r3, #0
 800f94c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f94e:	f001 fdd1 	bl	80114f4 <vPortExitCritical>

	return xReturn;
 800f952:	68fb      	ldr	r3, [r7, #12]
}
 800f954:	4618      	mov	r0, r3
 800f956:	3710      	adds	r7, #16
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f964:	f001 fd96 	bl	8011494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f970:	429a      	cmp	r2, r3
 800f972:	d102      	bne.n	800f97a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f974:	2301      	movs	r3, #1
 800f976:	60fb      	str	r3, [r7, #12]
 800f978:	e001      	b.n	800f97e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f97a:	2300      	movs	r3, #0
 800f97c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f97e:	f001 fdb9 	bl	80114f4 <vPortExitCritical>

	return xReturn;
 800f982:	68fb      	ldr	r3, [r7, #12]
}
 800f984:	4618      	mov	r0, r3
 800f986:	3710      	adds	r7, #16
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f98c:	b480      	push	{r7}
 800f98e:	b085      	sub	sp, #20
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f996:	2300      	movs	r3, #0
 800f998:	60fb      	str	r3, [r7, #12]
 800f99a:	e014      	b.n	800f9c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f99c:	4a0f      	ldr	r2, [pc, #60]	; (800f9dc <vQueueAddToRegistry+0x50>)
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d10b      	bne.n	800f9c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f9a8:	490c      	ldr	r1, [pc, #48]	; (800f9dc <vQueueAddToRegistry+0x50>)
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	683a      	ldr	r2, [r7, #0]
 800f9ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f9b2:	4a0a      	ldr	r2, [pc, #40]	; (800f9dc <vQueueAddToRegistry+0x50>)
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	00db      	lsls	r3, r3, #3
 800f9b8:	4413      	add	r3, r2
 800f9ba:	687a      	ldr	r2, [r7, #4]
 800f9bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f9be:	e006      	b.n	800f9ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	60fb      	str	r3, [r7, #12]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2b07      	cmp	r3, #7
 800f9ca:	d9e7      	bls.n	800f99c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f9cc:	bf00      	nop
 800f9ce:	bf00      	nop
 800f9d0:	3714      	adds	r7, #20
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d8:	4770      	bx	lr
 800f9da:	bf00      	nop
 800f9dc:	20005a88 	.word	0x20005a88

0800f9e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b086      	sub	sp, #24
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	60f8      	str	r0, [r7, #12]
 800f9e8:	60b9      	str	r1, [r7, #8]
 800f9ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f9f0:	f001 fd50 	bl	8011494 <vPortEnterCritical>
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9fa:	b25b      	sxtb	r3, r3
 800f9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa00:	d103      	bne.n	800fa0a <vQueueWaitForMessageRestricted+0x2a>
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	2200      	movs	r2, #0
 800fa06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa10:	b25b      	sxtb	r3, r3
 800fa12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa16:	d103      	bne.n	800fa20 <vQueueWaitForMessageRestricted+0x40>
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa20:	f001 fd68 	bl	80114f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d106      	bne.n	800fa3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	3324      	adds	r3, #36	; 0x24
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	68b9      	ldr	r1, [r7, #8]
 800fa34:	4618      	mov	r0, r3
 800fa36:	f000 fcd3 	bl	80103e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fa3a:	6978      	ldr	r0, [r7, #20]
 800fa3c:	f7ff ff26 	bl	800f88c <prvUnlockQueue>
	}
 800fa40:	bf00      	nop
 800fa42:	3718      	adds	r7, #24
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b08e      	sub	sp, #56	; 0x38
 800fa4c:	af04      	add	r7, sp, #16
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	60b9      	str	r1, [r7, #8]
 800fa52:	607a      	str	r2, [r7, #4]
 800fa54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fa56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d10a      	bne.n	800fa72 <xTaskCreateStatic+0x2a>
	__asm volatile
 800fa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa60:	f383 8811 	msr	BASEPRI, r3
 800fa64:	f3bf 8f6f 	isb	sy
 800fa68:	f3bf 8f4f 	dsb	sy
 800fa6c:	623b      	str	r3, [r7, #32]
}
 800fa6e:	bf00      	nop
 800fa70:	e7fe      	b.n	800fa70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fa72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d10a      	bne.n	800fa8e <xTaskCreateStatic+0x46>
	__asm volatile
 800fa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa7c:	f383 8811 	msr	BASEPRI, r3
 800fa80:	f3bf 8f6f 	isb	sy
 800fa84:	f3bf 8f4f 	dsb	sy
 800fa88:	61fb      	str	r3, [r7, #28]
}
 800fa8a:	bf00      	nop
 800fa8c:	e7fe      	b.n	800fa8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fa8e:	23bc      	movs	r3, #188	; 0xbc
 800fa90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	2bbc      	cmp	r3, #188	; 0xbc
 800fa96:	d00a      	beq.n	800faae <xTaskCreateStatic+0x66>
	__asm volatile
 800fa98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa9c:	f383 8811 	msr	BASEPRI, r3
 800faa0:	f3bf 8f6f 	isb	sy
 800faa4:	f3bf 8f4f 	dsb	sy
 800faa8:	61bb      	str	r3, [r7, #24]
}
 800faaa:	bf00      	nop
 800faac:	e7fe      	b.n	800faac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800faae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d01e      	beq.n	800faf4 <xTaskCreateStatic+0xac>
 800fab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d01b      	beq.n	800faf4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fabe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fac4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac8:	2202      	movs	r2, #2
 800faca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800face:	2300      	movs	r3, #0
 800fad0:	9303      	str	r3, [sp, #12]
 800fad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad4:	9302      	str	r3, [sp, #8]
 800fad6:	f107 0314 	add.w	r3, r7, #20
 800fada:	9301      	str	r3, [sp, #4]
 800fadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fade:	9300      	str	r3, [sp, #0]
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	687a      	ldr	r2, [r7, #4]
 800fae4:	68b9      	ldr	r1, [r7, #8]
 800fae6:	68f8      	ldr	r0, [r7, #12]
 800fae8:	f000 f850 	bl	800fb8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800faec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800faee:	f000 f8f3 	bl	800fcd8 <prvAddNewTaskToReadyList>
 800faf2:	e001      	b.n	800faf8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800faf4:	2300      	movs	r3, #0
 800faf6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800faf8:	697b      	ldr	r3, [r7, #20]
	}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3728      	adds	r7, #40	; 0x28
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}

0800fb02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fb02:	b580      	push	{r7, lr}
 800fb04:	b08c      	sub	sp, #48	; 0x30
 800fb06:	af04      	add	r7, sp, #16
 800fb08:	60f8      	str	r0, [r7, #12]
 800fb0a:	60b9      	str	r1, [r7, #8]
 800fb0c:	603b      	str	r3, [r7, #0]
 800fb0e:	4613      	mov	r3, r2
 800fb10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fb12:	88fb      	ldrh	r3, [r7, #6]
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	4618      	mov	r0, r3
 800fb18:	f001 fdde 	bl	80116d8 <pvPortMalloc>
 800fb1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d00e      	beq.n	800fb42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fb24:	20bc      	movs	r0, #188	; 0xbc
 800fb26:	f001 fdd7 	bl	80116d8 <pvPortMalloc>
 800fb2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fb2c:	69fb      	ldr	r3, [r7, #28]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d003      	beq.n	800fb3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fb32:	69fb      	ldr	r3, [r7, #28]
 800fb34:	697a      	ldr	r2, [r7, #20]
 800fb36:	631a      	str	r2, [r3, #48]	; 0x30
 800fb38:	e005      	b.n	800fb46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fb3a:	6978      	ldr	r0, [r7, #20]
 800fb3c:	f001 fe98 	bl	8011870 <vPortFree>
 800fb40:	e001      	b.n	800fb46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fb42:	2300      	movs	r3, #0
 800fb44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fb46:	69fb      	ldr	r3, [r7, #28]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d017      	beq.n	800fb7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fb54:	88fa      	ldrh	r2, [r7, #6]
 800fb56:	2300      	movs	r3, #0
 800fb58:	9303      	str	r3, [sp, #12]
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	9302      	str	r3, [sp, #8]
 800fb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb60:	9301      	str	r3, [sp, #4]
 800fb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb64:	9300      	str	r3, [sp, #0]
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	68b9      	ldr	r1, [r7, #8]
 800fb6a:	68f8      	ldr	r0, [r7, #12]
 800fb6c:	f000 f80e 	bl	800fb8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb70:	69f8      	ldr	r0, [r7, #28]
 800fb72:	f000 f8b1 	bl	800fcd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fb76:	2301      	movs	r3, #1
 800fb78:	61bb      	str	r3, [r7, #24]
 800fb7a:	e002      	b.n	800fb82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fb7c:	f04f 33ff 	mov.w	r3, #4294967295
 800fb80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fb82:	69bb      	ldr	r3, [r7, #24]
	}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3720      	adds	r7, #32
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b088      	sub	sp, #32
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	607a      	str	r2, [r7, #4]
 800fb98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	461a      	mov	r2, r3
 800fba4:	21a5      	movs	r1, #165	; 0xa5
 800fba6:	f002 fdfb 	bl	80127a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fbb4:	3b01      	subs	r3, #1
 800fbb6:	009b      	lsls	r3, r3, #2
 800fbb8:	4413      	add	r3, r2
 800fbba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fbbc:	69bb      	ldr	r3, [r7, #24]
 800fbbe:	f023 0307 	bic.w	r3, r3, #7
 800fbc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fbc4:	69bb      	ldr	r3, [r7, #24]
 800fbc6:	f003 0307 	and.w	r3, r3, #7
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d00a      	beq.n	800fbe4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800fbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd2:	f383 8811 	msr	BASEPRI, r3
 800fbd6:	f3bf 8f6f 	isb	sy
 800fbda:	f3bf 8f4f 	dsb	sy
 800fbde:	617b      	str	r3, [r7, #20]
}
 800fbe0:	bf00      	nop
 800fbe2:	e7fe      	b.n	800fbe2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d01f      	beq.n	800fc2a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fbea:	2300      	movs	r3, #0
 800fbec:	61fb      	str	r3, [r7, #28]
 800fbee:	e012      	b.n	800fc16 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fbf0:	68ba      	ldr	r2, [r7, #8]
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	4413      	add	r3, r2
 800fbf6:	7819      	ldrb	r1, [r3, #0]
 800fbf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbfa:	69fb      	ldr	r3, [r7, #28]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	3334      	adds	r3, #52	; 0x34
 800fc00:	460a      	mov	r2, r1
 800fc02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fc04:	68ba      	ldr	r2, [r7, #8]
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	4413      	add	r3, r2
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d006      	beq.n	800fc1e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc10:	69fb      	ldr	r3, [r7, #28]
 800fc12:	3301      	adds	r3, #1
 800fc14:	61fb      	str	r3, [r7, #28]
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	2b0f      	cmp	r3, #15
 800fc1a:	d9e9      	bls.n	800fbf0 <prvInitialiseNewTask+0x64>
 800fc1c:	e000      	b.n	800fc20 <prvInitialiseNewTask+0x94>
			{
				break;
 800fc1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc22:	2200      	movs	r2, #0
 800fc24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fc28:	e003      	b.n	800fc32 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc34:	2b37      	cmp	r3, #55	; 0x37
 800fc36:	d901      	bls.n	800fc3c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fc38:	2337      	movs	r3, #55	; 0x37
 800fc3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc50:	3304      	adds	r3, #4
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fe ffce 	bl	800ebf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc5a:	3318      	adds	r3, #24
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7fe ffc9 	bl	800ebf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc82:	2200      	movs	r2, #0
 800fc84:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc8a:	3354      	adds	r3, #84	; 0x54
 800fc8c:	2260      	movs	r2, #96	; 0x60
 800fc8e:	2100      	movs	r1, #0
 800fc90:	4618      	mov	r0, r3
 800fc92:	f002 fd85 	bl	80127a0 <memset>
 800fc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc98:	4a0c      	ldr	r2, [pc, #48]	; (800fccc <prvInitialiseNewTask+0x140>)
 800fc9a:	659a      	str	r2, [r3, #88]	; 0x58
 800fc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9e:	4a0c      	ldr	r2, [pc, #48]	; (800fcd0 <prvInitialiseNewTask+0x144>)
 800fca0:	65da      	str	r2, [r3, #92]	; 0x5c
 800fca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca4:	4a0b      	ldr	r2, [pc, #44]	; (800fcd4 <prvInitialiseNewTask+0x148>)
 800fca6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fca8:	683a      	ldr	r2, [r7, #0]
 800fcaa:	68f9      	ldr	r1, [r7, #12]
 800fcac:	69b8      	ldr	r0, [r7, #24]
 800fcae:	f001 fac1 	bl	8011234 <pxPortInitialiseStack>
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d002      	beq.n	800fcc4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fcc4:	bf00      	nop
 800fcc6:	3720      	adds	r7, #32
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}
 800fccc:	08017ce8 	.word	0x08017ce8
 800fcd0:	08017d08 	.word	0x08017d08
 800fcd4:	08017cc8 	.word	0x08017cc8

0800fcd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fce0:	f001 fbd8 	bl	8011494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fce4:	4b2d      	ldr	r3, [pc, #180]	; (800fd9c <prvAddNewTaskToReadyList+0xc4>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	3301      	adds	r3, #1
 800fcea:	4a2c      	ldr	r2, [pc, #176]	; (800fd9c <prvAddNewTaskToReadyList+0xc4>)
 800fcec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fcee:	4b2c      	ldr	r3, [pc, #176]	; (800fda0 <prvAddNewTaskToReadyList+0xc8>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d109      	bne.n	800fd0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fcf6:	4a2a      	ldr	r2, [pc, #168]	; (800fda0 <prvAddNewTaskToReadyList+0xc8>)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fcfc:	4b27      	ldr	r3, [pc, #156]	; (800fd9c <prvAddNewTaskToReadyList+0xc4>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d110      	bne.n	800fd26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fd04:	f000 fc98 	bl	8010638 <prvInitialiseTaskLists>
 800fd08:	e00d      	b.n	800fd26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fd0a:	4b26      	ldr	r3, [pc, #152]	; (800fda4 <prvAddNewTaskToReadyList+0xcc>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d109      	bne.n	800fd26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fd12:	4b23      	ldr	r3, [pc, #140]	; (800fda0 <prvAddNewTaskToReadyList+0xc8>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d802      	bhi.n	800fd26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fd20:	4a1f      	ldr	r2, [pc, #124]	; (800fda0 <prvAddNewTaskToReadyList+0xc8>)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fd26:	4b20      	ldr	r3, [pc, #128]	; (800fda8 <prvAddNewTaskToReadyList+0xd0>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	4a1e      	ldr	r2, [pc, #120]	; (800fda8 <prvAddNewTaskToReadyList+0xd0>)
 800fd2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fd30:	4b1d      	ldr	r3, [pc, #116]	; (800fda8 <prvAddNewTaskToReadyList+0xd0>)
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd3c:	4b1b      	ldr	r3, [pc, #108]	; (800fdac <prvAddNewTaskToReadyList+0xd4>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d903      	bls.n	800fd4c <prvAddNewTaskToReadyList+0x74>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd48:	4a18      	ldr	r2, [pc, #96]	; (800fdac <prvAddNewTaskToReadyList+0xd4>)
 800fd4a:	6013      	str	r3, [r2, #0]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd50:	4613      	mov	r3, r2
 800fd52:	009b      	lsls	r3, r3, #2
 800fd54:	4413      	add	r3, r2
 800fd56:	009b      	lsls	r3, r3, #2
 800fd58:	4a15      	ldr	r2, [pc, #84]	; (800fdb0 <prvAddNewTaskToReadyList+0xd8>)
 800fd5a:	441a      	add	r2, r3
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	3304      	adds	r3, #4
 800fd60:	4619      	mov	r1, r3
 800fd62:	4610      	mov	r0, r2
 800fd64:	f7fe ff53 	bl	800ec0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fd68:	f001 fbc4 	bl	80114f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fd6c:	4b0d      	ldr	r3, [pc, #52]	; (800fda4 <prvAddNewTaskToReadyList+0xcc>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d00e      	beq.n	800fd92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fd74:	4b0a      	ldr	r3, [pc, #40]	; (800fda0 <prvAddNewTaskToReadyList+0xc8>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d207      	bcs.n	800fd92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fd82:	4b0c      	ldr	r3, [pc, #48]	; (800fdb4 <prvAddNewTaskToReadyList+0xdc>)
 800fd84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd88:	601a      	str	r2, [r3, #0]
 800fd8a:	f3bf 8f4f 	dsb	sy
 800fd8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd92:	bf00      	nop
 800fd94:	3708      	adds	r7, #8
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	200012dc 	.word	0x200012dc
 800fda0:	20000e08 	.word	0x20000e08
 800fda4:	200012e8 	.word	0x200012e8
 800fda8:	200012f8 	.word	0x200012f8
 800fdac:	200012e4 	.word	0x200012e4
 800fdb0:	20000e0c 	.word	0x20000e0c
 800fdb4:	e000ed04 	.word	0xe000ed04

0800fdb8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b084      	sub	sp, #16
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800fdc0:	f001 fb68 	bl	8011494 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d102      	bne.n	800fdd0 <vTaskDelete+0x18>
 800fdca:	4b2c      	ldr	r3, [pc, #176]	; (800fe7c <vTaskDelete+0xc4>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	e000      	b.n	800fdd2 <vTaskDelete+0x1a>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	3304      	adds	r3, #4
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f7fe ff75 	bl	800ecc8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d004      	beq.n	800fdf0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	3318      	adds	r3, #24
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fe ff6c 	bl	800ecc8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800fdf0:	4b23      	ldr	r3, [pc, #140]	; (800fe80 <vTaskDelete+0xc8>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	4a22      	ldr	r2, [pc, #136]	; (800fe80 <vTaskDelete+0xc8>)
 800fdf8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800fdfa:	4b20      	ldr	r3, [pc, #128]	; (800fe7c <vTaskDelete+0xc4>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	68fa      	ldr	r2, [r7, #12]
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d10b      	bne.n	800fe1c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	3304      	adds	r3, #4
 800fe08:	4619      	mov	r1, r3
 800fe0a:	481e      	ldr	r0, [pc, #120]	; (800fe84 <vTaskDelete+0xcc>)
 800fe0c:	f7fe feff 	bl	800ec0e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800fe10:	4b1d      	ldr	r3, [pc, #116]	; (800fe88 <vTaskDelete+0xd0>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	3301      	adds	r3, #1
 800fe16:	4a1c      	ldr	r2, [pc, #112]	; (800fe88 <vTaskDelete+0xd0>)
 800fe18:	6013      	str	r3, [r2, #0]
 800fe1a:	e009      	b.n	800fe30 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800fe1c:	4b1b      	ldr	r3, [pc, #108]	; (800fe8c <vTaskDelete+0xd4>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	3b01      	subs	r3, #1
 800fe22:	4a1a      	ldr	r2, [pc, #104]	; (800fe8c <vTaskDelete+0xd4>)
 800fe24:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f000 fc74 	bl	8010714 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800fe2c:	f000 fca6 	bl	801077c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800fe30:	f001 fb60 	bl	80114f4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800fe34:	4b16      	ldr	r3, [pc, #88]	; (800fe90 <vTaskDelete+0xd8>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d01b      	beq.n	800fe74 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800fe3c:	4b0f      	ldr	r3, [pc, #60]	; (800fe7c <vTaskDelete+0xc4>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	68fa      	ldr	r2, [r7, #12]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d116      	bne.n	800fe74 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800fe46:	4b13      	ldr	r3, [pc, #76]	; (800fe94 <vTaskDelete+0xdc>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00a      	beq.n	800fe64 <vTaskDelete+0xac>
	__asm volatile
 800fe4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe52:	f383 8811 	msr	BASEPRI, r3
 800fe56:	f3bf 8f6f 	isb	sy
 800fe5a:	f3bf 8f4f 	dsb	sy
 800fe5e:	60bb      	str	r3, [r7, #8]
}
 800fe60:	bf00      	nop
 800fe62:	e7fe      	b.n	800fe62 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800fe64:	4b0c      	ldr	r3, [pc, #48]	; (800fe98 <vTaskDelete+0xe0>)
 800fe66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe6a:	601a      	str	r2, [r3, #0]
 800fe6c:	f3bf 8f4f 	dsb	sy
 800fe70:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fe74:	bf00      	nop
 800fe76:	3710      	adds	r7, #16
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	20000e08 	.word	0x20000e08
 800fe80:	200012f8 	.word	0x200012f8
 800fe84:	200012b0 	.word	0x200012b0
 800fe88:	200012c4 	.word	0x200012c4
 800fe8c:	200012dc 	.word	0x200012dc
 800fe90:	200012e8 	.word	0x200012e8
 800fe94:	20001304 	.word	0x20001304
 800fe98:	e000ed04 	.word	0xe000ed04

0800fe9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b084      	sub	sp, #16
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fea4:	2300      	movs	r3, #0
 800fea6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d017      	beq.n	800fede <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800feae:	4b13      	ldr	r3, [pc, #76]	; (800fefc <vTaskDelay+0x60>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d00a      	beq.n	800fecc <vTaskDelay+0x30>
	__asm volatile
 800feb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feba:	f383 8811 	msr	BASEPRI, r3
 800febe:	f3bf 8f6f 	isb	sy
 800fec2:	f3bf 8f4f 	dsb	sy
 800fec6:	60bb      	str	r3, [r7, #8]
}
 800fec8:	bf00      	nop
 800feca:	e7fe      	b.n	800feca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fecc:	f000 f88a 	bl	800ffe4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fed0:	2100      	movs	r1, #0
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f000 fe0c 	bl	8010af0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fed8:	f000 f892 	bl	8010000 <xTaskResumeAll>
 800fedc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d107      	bne.n	800fef4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fee4:	4b06      	ldr	r3, [pc, #24]	; (800ff00 <vTaskDelay+0x64>)
 800fee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800feea:	601a      	str	r2, [r3, #0]
 800feec:	f3bf 8f4f 	dsb	sy
 800fef0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fef4:	bf00      	nop
 800fef6:	3710      	adds	r7, #16
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	20001304 	.word	0x20001304
 800ff00:	e000ed04 	.word	0xe000ed04

0800ff04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b08a      	sub	sp, #40	; 0x28
 800ff08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ff12:	463a      	mov	r2, r7
 800ff14:	1d39      	adds	r1, r7, #4
 800ff16:	f107 0308 	add.w	r3, r7, #8
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fe fe16 	bl	800eb4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ff20:	6839      	ldr	r1, [r7, #0]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	68ba      	ldr	r2, [r7, #8]
 800ff26:	9202      	str	r2, [sp, #8]
 800ff28:	9301      	str	r3, [sp, #4]
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	9300      	str	r3, [sp, #0]
 800ff2e:	2300      	movs	r3, #0
 800ff30:	460a      	mov	r2, r1
 800ff32:	4924      	ldr	r1, [pc, #144]	; (800ffc4 <vTaskStartScheduler+0xc0>)
 800ff34:	4824      	ldr	r0, [pc, #144]	; (800ffc8 <vTaskStartScheduler+0xc4>)
 800ff36:	f7ff fd87 	bl	800fa48 <xTaskCreateStatic>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	4a23      	ldr	r2, [pc, #140]	; (800ffcc <vTaskStartScheduler+0xc8>)
 800ff3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ff40:	4b22      	ldr	r3, [pc, #136]	; (800ffcc <vTaskStartScheduler+0xc8>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d002      	beq.n	800ff4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ff48:	2301      	movs	r3, #1
 800ff4a:	617b      	str	r3, [r7, #20]
 800ff4c:	e001      	b.n	800ff52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	2b01      	cmp	r3, #1
 800ff56:	d102      	bne.n	800ff5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ff58:	f000 fe1e 	bl	8010b98 <xTimerCreateTimerTask>
 800ff5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d11b      	bne.n	800ff9c <vTaskStartScheduler+0x98>
	__asm volatile
 800ff64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff68:	f383 8811 	msr	BASEPRI, r3
 800ff6c:	f3bf 8f6f 	isb	sy
 800ff70:	f3bf 8f4f 	dsb	sy
 800ff74:	613b      	str	r3, [r7, #16]
}
 800ff76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ff78:	4b15      	ldr	r3, [pc, #84]	; (800ffd0 <vTaskStartScheduler+0xcc>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	3354      	adds	r3, #84	; 0x54
 800ff7e:	4a15      	ldr	r2, [pc, #84]	; (800ffd4 <vTaskStartScheduler+0xd0>)
 800ff80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ff82:	4b15      	ldr	r3, [pc, #84]	; (800ffd8 <vTaskStartScheduler+0xd4>)
 800ff84:	f04f 32ff 	mov.w	r2, #4294967295
 800ff88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ff8a:	4b14      	ldr	r3, [pc, #80]	; (800ffdc <vTaskStartScheduler+0xd8>)
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ff90:	4b13      	ldr	r3, [pc, #76]	; (800ffe0 <vTaskStartScheduler+0xdc>)
 800ff92:	2200      	movs	r2, #0
 800ff94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ff96:	f001 f9db 	bl	8011350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ff9a:	e00e      	b.n	800ffba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffa2:	d10a      	bne.n	800ffba <vTaskStartScheduler+0xb6>
	__asm volatile
 800ffa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa8:	f383 8811 	msr	BASEPRI, r3
 800ffac:	f3bf 8f6f 	isb	sy
 800ffb0:	f3bf 8f4f 	dsb	sy
 800ffb4:	60fb      	str	r3, [r7, #12]
}
 800ffb6:	bf00      	nop
 800ffb8:	e7fe      	b.n	800ffb8 <vTaskStartScheduler+0xb4>
}
 800ffba:	bf00      	nop
 800ffbc:	3718      	adds	r7, #24
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}
 800ffc2:	bf00      	nop
 800ffc4:	08017aec 	.word	0x08017aec
 800ffc8:	08010609 	.word	0x08010609
 800ffcc:	20001300 	.word	0x20001300
 800ffd0:	20000e08 	.word	0x20000e08
 800ffd4:	200001a4 	.word	0x200001a4
 800ffd8:	200012fc 	.word	0x200012fc
 800ffdc:	200012e8 	.word	0x200012e8
 800ffe0:	200012e0 	.word	0x200012e0

0800ffe4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ffe8:	4b04      	ldr	r3, [pc, #16]	; (800fffc <vTaskSuspendAll+0x18>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	3301      	adds	r3, #1
 800ffee:	4a03      	ldr	r2, [pc, #12]	; (800fffc <vTaskSuspendAll+0x18>)
 800fff0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fff2:	bf00      	nop
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr
 800fffc:	20001304 	.word	0x20001304

08010000 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010006:	2300      	movs	r3, #0
 8010008:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801000a:	2300      	movs	r3, #0
 801000c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801000e:	4b42      	ldr	r3, [pc, #264]	; (8010118 <xTaskResumeAll+0x118>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d10a      	bne.n	801002c <xTaskResumeAll+0x2c>
	__asm volatile
 8010016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801001a:	f383 8811 	msr	BASEPRI, r3
 801001e:	f3bf 8f6f 	isb	sy
 8010022:	f3bf 8f4f 	dsb	sy
 8010026:	603b      	str	r3, [r7, #0]
}
 8010028:	bf00      	nop
 801002a:	e7fe      	b.n	801002a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801002c:	f001 fa32 	bl	8011494 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010030:	4b39      	ldr	r3, [pc, #228]	; (8010118 <xTaskResumeAll+0x118>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	3b01      	subs	r3, #1
 8010036:	4a38      	ldr	r2, [pc, #224]	; (8010118 <xTaskResumeAll+0x118>)
 8010038:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801003a:	4b37      	ldr	r3, [pc, #220]	; (8010118 <xTaskResumeAll+0x118>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d162      	bne.n	8010108 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010042:	4b36      	ldr	r3, [pc, #216]	; (801011c <xTaskResumeAll+0x11c>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d05e      	beq.n	8010108 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801004a:	e02f      	b.n	80100ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801004c:	4b34      	ldr	r3, [pc, #208]	; (8010120 <xTaskResumeAll+0x120>)
 801004e:	68db      	ldr	r3, [r3, #12]
 8010050:	68db      	ldr	r3, [r3, #12]
 8010052:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	3318      	adds	r3, #24
 8010058:	4618      	mov	r0, r3
 801005a:	f7fe fe35 	bl	800ecc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	3304      	adds	r3, #4
 8010062:	4618      	mov	r0, r3
 8010064:	f7fe fe30 	bl	800ecc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801006c:	4b2d      	ldr	r3, [pc, #180]	; (8010124 <xTaskResumeAll+0x124>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	429a      	cmp	r2, r3
 8010072:	d903      	bls.n	801007c <xTaskResumeAll+0x7c>
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010078:	4a2a      	ldr	r2, [pc, #168]	; (8010124 <xTaskResumeAll+0x124>)
 801007a:	6013      	str	r3, [r2, #0]
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010080:	4613      	mov	r3, r2
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	4413      	add	r3, r2
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	4a27      	ldr	r2, [pc, #156]	; (8010128 <xTaskResumeAll+0x128>)
 801008a:	441a      	add	r2, r3
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	3304      	adds	r3, #4
 8010090:	4619      	mov	r1, r3
 8010092:	4610      	mov	r0, r2
 8010094:	f7fe fdbb 	bl	800ec0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801009c:	4b23      	ldr	r3, [pc, #140]	; (801012c <xTaskResumeAll+0x12c>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d302      	bcc.n	80100ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80100a6:	4b22      	ldr	r3, [pc, #136]	; (8010130 <xTaskResumeAll+0x130>)
 80100a8:	2201      	movs	r2, #1
 80100aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80100ac:	4b1c      	ldr	r3, [pc, #112]	; (8010120 <xTaskResumeAll+0x120>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d1cb      	bne.n	801004c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d001      	beq.n	80100be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80100ba:	f000 fb5f 	bl	801077c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80100be:	4b1d      	ldr	r3, [pc, #116]	; (8010134 <xTaskResumeAll+0x134>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d010      	beq.n	80100ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80100ca:	f000 f847 	bl	801015c <xTaskIncrementTick>
 80100ce:	4603      	mov	r3, r0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d002      	beq.n	80100da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80100d4:	4b16      	ldr	r3, [pc, #88]	; (8010130 <xTaskResumeAll+0x130>)
 80100d6:	2201      	movs	r2, #1
 80100d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	3b01      	subs	r3, #1
 80100de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d1f1      	bne.n	80100ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80100e6:	4b13      	ldr	r3, [pc, #76]	; (8010134 <xTaskResumeAll+0x134>)
 80100e8:	2200      	movs	r2, #0
 80100ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80100ec:	4b10      	ldr	r3, [pc, #64]	; (8010130 <xTaskResumeAll+0x130>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d009      	beq.n	8010108 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80100f4:	2301      	movs	r3, #1
 80100f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80100f8:	4b0f      	ldr	r3, [pc, #60]	; (8010138 <xTaskResumeAll+0x138>)
 80100fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100fe:	601a      	str	r2, [r3, #0]
 8010100:	f3bf 8f4f 	dsb	sy
 8010104:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010108:	f001 f9f4 	bl	80114f4 <vPortExitCritical>

	return xAlreadyYielded;
 801010c:	68bb      	ldr	r3, [r7, #8]
}
 801010e:	4618      	mov	r0, r3
 8010110:	3710      	adds	r7, #16
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	20001304 	.word	0x20001304
 801011c:	200012dc 	.word	0x200012dc
 8010120:	2000129c 	.word	0x2000129c
 8010124:	200012e4 	.word	0x200012e4
 8010128:	20000e0c 	.word	0x20000e0c
 801012c:	20000e08 	.word	0x20000e08
 8010130:	200012f0 	.word	0x200012f0
 8010134:	200012ec 	.word	0x200012ec
 8010138:	e000ed04 	.word	0xe000ed04

0801013c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801013c:	b480      	push	{r7}
 801013e:	b083      	sub	sp, #12
 8010140:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010142:	4b05      	ldr	r3, [pc, #20]	; (8010158 <xTaskGetTickCount+0x1c>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010148:	687b      	ldr	r3, [r7, #4]
}
 801014a:	4618      	mov	r0, r3
 801014c:	370c      	adds	r7, #12
 801014e:	46bd      	mov	sp, r7
 8010150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010154:	4770      	bx	lr
 8010156:	bf00      	nop
 8010158:	200012e0 	.word	0x200012e0

0801015c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b086      	sub	sp, #24
 8010160:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010162:	2300      	movs	r3, #0
 8010164:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010166:	4b4f      	ldr	r3, [pc, #316]	; (80102a4 <xTaskIncrementTick+0x148>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	f040 808f 	bne.w	801028e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010170:	4b4d      	ldr	r3, [pc, #308]	; (80102a8 <xTaskIncrementTick+0x14c>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	3301      	adds	r3, #1
 8010176:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010178:	4a4b      	ldr	r2, [pc, #300]	; (80102a8 <xTaskIncrementTick+0x14c>)
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d120      	bne.n	80101c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010184:	4b49      	ldr	r3, [pc, #292]	; (80102ac <xTaskIncrementTick+0x150>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d00a      	beq.n	80101a4 <xTaskIncrementTick+0x48>
	__asm volatile
 801018e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010192:	f383 8811 	msr	BASEPRI, r3
 8010196:	f3bf 8f6f 	isb	sy
 801019a:	f3bf 8f4f 	dsb	sy
 801019e:	603b      	str	r3, [r7, #0]
}
 80101a0:	bf00      	nop
 80101a2:	e7fe      	b.n	80101a2 <xTaskIncrementTick+0x46>
 80101a4:	4b41      	ldr	r3, [pc, #260]	; (80102ac <xTaskIncrementTick+0x150>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	60fb      	str	r3, [r7, #12]
 80101aa:	4b41      	ldr	r3, [pc, #260]	; (80102b0 <xTaskIncrementTick+0x154>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	4a3f      	ldr	r2, [pc, #252]	; (80102ac <xTaskIncrementTick+0x150>)
 80101b0:	6013      	str	r3, [r2, #0]
 80101b2:	4a3f      	ldr	r2, [pc, #252]	; (80102b0 <xTaskIncrementTick+0x154>)
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	6013      	str	r3, [r2, #0]
 80101b8:	4b3e      	ldr	r3, [pc, #248]	; (80102b4 <xTaskIncrementTick+0x158>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	3301      	adds	r3, #1
 80101be:	4a3d      	ldr	r2, [pc, #244]	; (80102b4 <xTaskIncrementTick+0x158>)
 80101c0:	6013      	str	r3, [r2, #0]
 80101c2:	f000 fadb 	bl	801077c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80101c6:	4b3c      	ldr	r3, [pc, #240]	; (80102b8 <xTaskIncrementTick+0x15c>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	693a      	ldr	r2, [r7, #16]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d349      	bcc.n	8010264 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101d0:	4b36      	ldr	r3, [pc, #216]	; (80102ac <xTaskIncrementTick+0x150>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d104      	bne.n	80101e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101da:	4b37      	ldr	r3, [pc, #220]	; (80102b8 <xTaskIncrementTick+0x15c>)
 80101dc:	f04f 32ff 	mov.w	r2, #4294967295
 80101e0:	601a      	str	r2, [r3, #0]
					break;
 80101e2:	e03f      	b.n	8010264 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101e4:	4b31      	ldr	r3, [pc, #196]	; (80102ac <xTaskIncrementTick+0x150>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	68db      	ldr	r3, [r3, #12]
 80101ea:	68db      	ldr	r3, [r3, #12]
 80101ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80101f4:	693a      	ldr	r2, [r7, #16]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d203      	bcs.n	8010204 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80101fc:	4a2e      	ldr	r2, [pc, #184]	; (80102b8 <xTaskIncrementTick+0x15c>)
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010202:	e02f      	b.n	8010264 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	3304      	adds	r3, #4
 8010208:	4618      	mov	r0, r3
 801020a:	f7fe fd5d 	bl	800ecc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010212:	2b00      	cmp	r3, #0
 8010214:	d004      	beq.n	8010220 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	3318      	adds	r3, #24
 801021a:	4618      	mov	r0, r3
 801021c:	f7fe fd54 	bl	800ecc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010224:	4b25      	ldr	r3, [pc, #148]	; (80102bc <xTaskIncrementTick+0x160>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	429a      	cmp	r2, r3
 801022a:	d903      	bls.n	8010234 <xTaskIncrementTick+0xd8>
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010230:	4a22      	ldr	r2, [pc, #136]	; (80102bc <xTaskIncrementTick+0x160>)
 8010232:	6013      	str	r3, [r2, #0]
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010238:	4613      	mov	r3, r2
 801023a:	009b      	lsls	r3, r3, #2
 801023c:	4413      	add	r3, r2
 801023e:	009b      	lsls	r3, r3, #2
 8010240:	4a1f      	ldr	r2, [pc, #124]	; (80102c0 <xTaskIncrementTick+0x164>)
 8010242:	441a      	add	r2, r3
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	3304      	adds	r3, #4
 8010248:	4619      	mov	r1, r3
 801024a:	4610      	mov	r0, r2
 801024c:	f7fe fcdf 	bl	800ec0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010254:	4b1b      	ldr	r3, [pc, #108]	; (80102c4 <xTaskIncrementTick+0x168>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801025a:	429a      	cmp	r2, r3
 801025c:	d3b8      	bcc.n	80101d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801025e:	2301      	movs	r3, #1
 8010260:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010262:	e7b5      	b.n	80101d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010264:	4b17      	ldr	r3, [pc, #92]	; (80102c4 <xTaskIncrementTick+0x168>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801026a:	4915      	ldr	r1, [pc, #84]	; (80102c0 <xTaskIncrementTick+0x164>)
 801026c:	4613      	mov	r3, r2
 801026e:	009b      	lsls	r3, r3, #2
 8010270:	4413      	add	r3, r2
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	440b      	add	r3, r1
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2b01      	cmp	r3, #1
 801027a:	d901      	bls.n	8010280 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801027c:	2301      	movs	r3, #1
 801027e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010280:	4b11      	ldr	r3, [pc, #68]	; (80102c8 <xTaskIncrementTick+0x16c>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d007      	beq.n	8010298 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010288:	2301      	movs	r3, #1
 801028a:	617b      	str	r3, [r7, #20]
 801028c:	e004      	b.n	8010298 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801028e:	4b0f      	ldr	r3, [pc, #60]	; (80102cc <xTaskIncrementTick+0x170>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	3301      	adds	r3, #1
 8010294:	4a0d      	ldr	r2, [pc, #52]	; (80102cc <xTaskIncrementTick+0x170>)
 8010296:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010298:	697b      	ldr	r3, [r7, #20]
}
 801029a:	4618      	mov	r0, r3
 801029c:	3718      	adds	r7, #24
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	20001304 	.word	0x20001304
 80102a8:	200012e0 	.word	0x200012e0
 80102ac:	20001294 	.word	0x20001294
 80102b0:	20001298 	.word	0x20001298
 80102b4:	200012f4 	.word	0x200012f4
 80102b8:	200012fc 	.word	0x200012fc
 80102bc:	200012e4 	.word	0x200012e4
 80102c0:	20000e0c 	.word	0x20000e0c
 80102c4:	20000e08 	.word	0x20000e08
 80102c8:	200012f0 	.word	0x200012f0
 80102cc:	200012ec 	.word	0x200012ec

080102d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80102d0:	b480      	push	{r7}
 80102d2:	b085      	sub	sp, #20
 80102d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80102d6:	4b2a      	ldr	r3, [pc, #168]	; (8010380 <vTaskSwitchContext+0xb0>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d003      	beq.n	80102e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80102de:	4b29      	ldr	r3, [pc, #164]	; (8010384 <vTaskSwitchContext+0xb4>)
 80102e0:	2201      	movs	r2, #1
 80102e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80102e4:	e046      	b.n	8010374 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80102e6:	4b27      	ldr	r3, [pc, #156]	; (8010384 <vTaskSwitchContext+0xb4>)
 80102e8:	2200      	movs	r2, #0
 80102ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102ec:	4b26      	ldr	r3, [pc, #152]	; (8010388 <vTaskSwitchContext+0xb8>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	60fb      	str	r3, [r7, #12]
 80102f2:	e010      	b.n	8010316 <vTaskSwitchContext+0x46>
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d10a      	bne.n	8010310 <vTaskSwitchContext+0x40>
	__asm volatile
 80102fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102fe:	f383 8811 	msr	BASEPRI, r3
 8010302:	f3bf 8f6f 	isb	sy
 8010306:	f3bf 8f4f 	dsb	sy
 801030a:	607b      	str	r3, [r7, #4]
}
 801030c:	bf00      	nop
 801030e:	e7fe      	b.n	801030e <vTaskSwitchContext+0x3e>
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	3b01      	subs	r3, #1
 8010314:	60fb      	str	r3, [r7, #12]
 8010316:	491d      	ldr	r1, [pc, #116]	; (801038c <vTaskSwitchContext+0xbc>)
 8010318:	68fa      	ldr	r2, [r7, #12]
 801031a:	4613      	mov	r3, r2
 801031c:	009b      	lsls	r3, r3, #2
 801031e:	4413      	add	r3, r2
 8010320:	009b      	lsls	r3, r3, #2
 8010322:	440b      	add	r3, r1
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d0e4      	beq.n	80102f4 <vTaskSwitchContext+0x24>
 801032a:	68fa      	ldr	r2, [r7, #12]
 801032c:	4613      	mov	r3, r2
 801032e:	009b      	lsls	r3, r3, #2
 8010330:	4413      	add	r3, r2
 8010332:	009b      	lsls	r3, r3, #2
 8010334:	4a15      	ldr	r2, [pc, #84]	; (801038c <vTaskSwitchContext+0xbc>)
 8010336:	4413      	add	r3, r2
 8010338:	60bb      	str	r3, [r7, #8]
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	685a      	ldr	r2, [r3, #4]
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	605a      	str	r2, [r3, #4]
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	685a      	ldr	r2, [r3, #4]
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	3308      	adds	r3, #8
 801034c:	429a      	cmp	r2, r3
 801034e:	d104      	bne.n	801035a <vTaskSwitchContext+0x8a>
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	685a      	ldr	r2, [r3, #4]
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	605a      	str	r2, [r3, #4]
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	68db      	ldr	r3, [r3, #12]
 8010360:	4a0b      	ldr	r2, [pc, #44]	; (8010390 <vTaskSwitchContext+0xc0>)
 8010362:	6013      	str	r3, [r2, #0]
 8010364:	4a08      	ldr	r2, [pc, #32]	; (8010388 <vTaskSwitchContext+0xb8>)
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801036a:	4b09      	ldr	r3, [pc, #36]	; (8010390 <vTaskSwitchContext+0xc0>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	3354      	adds	r3, #84	; 0x54
 8010370:	4a08      	ldr	r2, [pc, #32]	; (8010394 <vTaskSwitchContext+0xc4>)
 8010372:	6013      	str	r3, [r2, #0]
}
 8010374:	bf00      	nop
 8010376:	3714      	adds	r7, #20
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr
 8010380:	20001304 	.word	0x20001304
 8010384:	200012f0 	.word	0x200012f0
 8010388:	200012e4 	.word	0x200012e4
 801038c:	20000e0c 	.word	0x20000e0c
 8010390:	20000e08 	.word	0x20000e08
 8010394:	200001a4 	.word	0x200001a4

08010398 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d10a      	bne.n	80103be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80103a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ac:	f383 8811 	msr	BASEPRI, r3
 80103b0:	f3bf 8f6f 	isb	sy
 80103b4:	f3bf 8f4f 	dsb	sy
 80103b8:	60fb      	str	r3, [r7, #12]
}
 80103ba:	bf00      	nop
 80103bc:	e7fe      	b.n	80103bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80103be:	4b07      	ldr	r3, [pc, #28]	; (80103dc <vTaskPlaceOnEventList+0x44>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	3318      	adds	r3, #24
 80103c4:	4619      	mov	r1, r3
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f7fe fc45 	bl	800ec56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80103cc:	2101      	movs	r1, #1
 80103ce:	6838      	ldr	r0, [r7, #0]
 80103d0:	f000 fb8e 	bl	8010af0 <prvAddCurrentTaskToDelayedList>
}
 80103d4:	bf00      	nop
 80103d6:	3710      	adds	r7, #16
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	20000e08 	.word	0x20000e08

080103e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b086      	sub	sp, #24
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	60f8      	str	r0, [r7, #12]
 80103e8:	60b9      	str	r1, [r7, #8]
 80103ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d10a      	bne.n	8010408 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80103f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f6:	f383 8811 	msr	BASEPRI, r3
 80103fa:	f3bf 8f6f 	isb	sy
 80103fe:	f3bf 8f4f 	dsb	sy
 8010402:	617b      	str	r3, [r7, #20]
}
 8010404:	bf00      	nop
 8010406:	e7fe      	b.n	8010406 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010408:	4b0a      	ldr	r3, [pc, #40]	; (8010434 <vTaskPlaceOnEventListRestricted+0x54>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	3318      	adds	r3, #24
 801040e:	4619      	mov	r1, r3
 8010410:	68f8      	ldr	r0, [r7, #12]
 8010412:	f7fe fbfc 	bl	800ec0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d002      	beq.n	8010422 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801041c:	f04f 33ff 	mov.w	r3, #4294967295
 8010420:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010422:	6879      	ldr	r1, [r7, #4]
 8010424:	68b8      	ldr	r0, [r7, #8]
 8010426:	f000 fb63 	bl	8010af0 <prvAddCurrentTaskToDelayedList>
	}
 801042a:	bf00      	nop
 801042c:	3718      	adds	r7, #24
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	20000e08 	.word	0x20000e08

08010438 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b086      	sub	sp, #24
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	68db      	ldr	r3, [r3, #12]
 8010444:	68db      	ldr	r3, [r3, #12]
 8010446:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d10a      	bne.n	8010464 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801044e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010452:	f383 8811 	msr	BASEPRI, r3
 8010456:	f3bf 8f6f 	isb	sy
 801045a:	f3bf 8f4f 	dsb	sy
 801045e:	60fb      	str	r3, [r7, #12]
}
 8010460:	bf00      	nop
 8010462:	e7fe      	b.n	8010462 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	3318      	adds	r3, #24
 8010468:	4618      	mov	r0, r3
 801046a:	f7fe fc2d 	bl	800ecc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801046e:	4b1e      	ldr	r3, [pc, #120]	; (80104e8 <xTaskRemoveFromEventList+0xb0>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d11d      	bne.n	80104b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	3304      	adds	r3, #4
 801047a:	4618      	mov	r0, r3
 801047c:	f7fe fc24 	bl	800ecc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010480:	693b      	ldr	r3, [r7, #16]
 8010482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010484:	4b19      	ldr	r3, [pc, #100]	; (80104ec <xTaskRemoveFromEventList+0xb4>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	429a      	cmp	r2, r3
 801048a:	d903      	bls.n	8010494 <xTaskRemoveFromEventList+0x5c>
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010490:	4a16      	ldr	r2, [pc, #88]	; (80104ec <xTaskRemoveFromEventList+0xb4>)
 8010492:	6013      	str	r3, [r2, #0]
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010498:	4613      	mov	r3, r2
 801049a:	009b      	lsls	r3, r3, #2
 801049c:	4413      	add	r3, r2
 801049e:	009b      	lsls	r3, r3, #2
 80104a0:	4a13      	ldr	r2, [pc, #76]	; (80104f0 <xTaskRemoveFromEventList+0xb8>)
 80104a2:	441a      	add	r2, r3
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	3304      	adds	r3, #4
 80104a8:	4619      	mov	r1, r3
 80104aa:	4610      	mov	r0, r2
 80104ac:	f7fe fbaf 	bl	800ec0e <vListInsertEnd>
 80104b0:	e005      	b.n	80104be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	3318      	adds	r3, #24
 80104b6:	4619      	mov	r1, r3
 80104b8:	480e      	ldr	r0, [pc, #56]	; (80104f4 <xTaskRemoveFromEventList+0xbc>)
 80104ba:	f7fe fba8 	bl	800ec0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104c2:	4b0d      	ldr	r3, [pc, #52]	; (80104f8 <xTaskRemoveFromEventList+0xc0>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d905      	bls.n	80104d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80104cc:	2301      	movs	r3, #1
 80104ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80104d0:	4b0a      	ldr	r3, [pc, #40]	; (80104fc <xTaskRemoveFromEventList+0xc4>)
 80104d2:	2201      	movs	r2, #1
 80104d4:	601a      	str	r2, [r3, #0]
 80104d6:	e001      	b.n	80104dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80104d8:	2300      	movs	r3, #0
 80104da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80104dc:	697b      	ldr	r3, [r7, #20]
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3718      	adds	r7, #24
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	20001304 	.word	0x20001304
 80104ec:	200012e4 	.word	0x200012e4
 80104f0:	20000e0c 	.word	0x20000e0c
 80104f4:	2000129c 	.word	0x2000129c
 80104f8:	20000e08 	.word	0x20000e08
 80104fc:	200012f0 	.word	0x200012f0

08010500 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010508:	4b06      	ldr	r3, [pc, #24]	; (8010524 <vTaskInternalSetTimeOutState+0x24>)
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010510:	4b05      	ldr	r3, [pc, #20]	; (8010528 <vTaskInternalSetTimeOutState+0x28>)
 8010512:	681a      	ldr	r2, [r3, #0]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	605a      	str	r2, [r3, #4]
}
 8010518:	bf00      	nop
 801051a:	370c      	adds	r7, #12
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr
 8010524:	200012f4 	.word	0x200012f4
 8010528:	200012e0 	.word	0x200012e0

0801052c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b088      	sub	sp, #32
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d10a      	bne.n	8010552 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801053c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010540:	f383 8811 	msr	BASEPRI, r3
 8010544:	f3bf 8f6f 	isb	sy
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	613b      	str	r3, [r7, #16]
}
 801054e:	bf00      	nop
 8010550:	e7fe      	b.n	8010550 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d10a      	bne.n	801056e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010558:	f04f 0350 	mov.w	r3, #80	; 0x50
 801055c:	f383 8811 	msr	BASEPRI, r3
 8010560:	f3bf 8f6f 	isb	sy
 8010564:	f3bf 8f4f 	dsb	sy
 8010568:	60fb      	str	r3, [r7, #12]
}
 801056a:	bf00      	nop
 801056c:	e7fe      	b.n	801056c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801056e:	f000 ff91 	bl	8011494 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010572:	4b1d      	ldr	r3, [pc, #116]	; (80105e8 <xTaskCheckForTimeOut+0xbc>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	69ba      	ldr	r2, [r7, #24]
 801057e:	1ad3      	subs	r3, r2, r3
 8010580:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801058a:	d102      	bne.n	8010592 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801058c:	2300      	movs	r3, #0
 801058e:	61fb      	str	r3, [r7, #28]
 8010590:	e023      	b.n	80105da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681a      	ldr	r2, [r3, #0]
 8010596:	4b15      	ldr	r3, [pc, #84]	; (80105ec <xTaskCheckForTimeOut+0xc0>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	429a      	cmp	r2, r3
 801059c:	d007      	beq.n	80105ae <xTaskCheckForTimeOut+0x82>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	685b      	ldr	r3, [r3, #4]
 80105a2:	69ba      	ldr	r2, [r7, #24]
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d302      	bcc.n	80105ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80105a8:	2301      	movs	r3, #1
 80105aa:	61fb      	str	r3, [r7, #28]
 80105ac:	e015      	b.n	80105da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	697a      	ldr	r2, [r7, #20]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d20b      	bcs.n	80105d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	1ad2      	subs	r2, r2, r3
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f7ff ff9b 	bl	8010500 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80105ca:	2300      	movs	r3, #0
 80105cc:	61fb      	str	r3, [r7, #28]
 80105ce:	e004      	b.n	80105da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	2200      	movs	r2, #0
 80105d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80105d6:	2301      	movs	r3, #1
 80105d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80105da:	f000 ff8b 	bl	80114f4 <vPortExitCritical>

	return xReturn;
 80105de:	69fb      	ldr	r3, [r7, #28]
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3720      	adds	r7, #32
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}
 80105e8:	200012e0 	.word	0x200012e0
 80105ec:	200012f4 	.word	0x200012f4

080105f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80105f0:	b480      	push	{r7}
 80105f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80105f4:	4b03      	ldr	r3, [pc, #12]	; (8010604 <vTaskMissedYield+0x14>)
 80105f6:	2201      	movs	r2, #1
 80105f8:	601a      	str	r2, [r3, #0]
}
 80105fa:	bf00      	nop
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	4770      	bx	lr
 8010604:	200012f0 	.word	0x200012f0

08010608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010610:	f000 f852 	bl	80106b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010614:	4b06      	ldr	r3, [pc, #24]	; (8010630 <prvIdleTask+0x28>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	2b01      	cmp	r3, #1
 801061a:	d9f9      	bls.n	8010610 <prvIdleTask+0x8>
			{
				taskYIELD();
 801061c:	4b05      	ldr	r3, [pc, #20]	; (8010634 <prvIdleTask+0x2c>)
 801061e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010622:	601a      	str	r2, [r3, #0]
 8010624:	f3bf 8f4f 	dsb	sy
 8010628:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801062c:	e7f0      	b.n	8010610 <prvIdleTask+0x8>
 801062e:	bf00      	nop
 8010630:	20000e0c 	.word	0x20000e0c
 8010634:	e000ed04 	.word	0xe000ed04

08010638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801063e:	2300      	movs	r3, #0
 8010640:	607b      	str	r3, [r7, #4]
 8010642:	e00c      	b.n	801065e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010644:	687a      	ldr	r2, [r7, #4]
 8010646:	4613      	mov	r3, r2
 8010648:	009b      	lsls	r3, r3, #2
 801064a:	4413      	add	r3, r2
 801064c:	009b      	lsls	r3, r3, #2
 801064e:	4a12      	ldr	r2, [pc, #72]	; (8010698 <prvInitialiseTaskLists+0x60>)
 8010650:	4413      	add	r3, r2
 8010652:	4618      	mov	r0, r3
 8010654:	f7fe faae 	bl	800ebb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	3301      	adds	r3, #1
 801065c:	607b      	str	r3, [r7, #4]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2b37      	cmp	r3, #55	; 0x37
 8010662:	d9ef      	bls.n	8010644 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010664:	480d      	ldr	r0, [pc, #52]	; (801069c <prvInitialiseTaskLists+0x64>)
 8010666:	f7fe faa5 	bl	800ebb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801066a:	480d      	ldr	r0, [pc, #52]	; (80106a0 <prvInitialiseTaskLists+0x68>)
 801066c:	f7fe faa2 	bl	800ebb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010670:	480c      	ldr	r0, [pc, #48]	; (80106a4 <prvInitialiseTaskLists+0x6c>)
 8010672:	f7fe fa9f 	bl	800ebb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010676:	480c      	ldr	r0, [pc, #48]	; (80106a8 <prvInitialiseTaskLists+0x70>)
 8010678:	f7fe fa9c 	bl	800ebb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801067c:	480b      	ldr	r0, [pc, #44]	; (80106ac <prvInitialiseTaskLists+0x74>)
 801067e:	f7fe fa99 	bl	800ebb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010682:	4b0b      	ldr	r3, [pc, #44]	; (80106b0 <prvInitialiseTaskLists+0x78>)
 8010684:	4a05      	ldr	r2, [pc, #20]	; (801069c <prvInitialiseTaskLists+0x64>)
 8010686:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010688:	4b0a      	ldr	r3, [pc, #40]	; (80106b4 <prvInitialiseTaskLists+0x7c>)
 801068a:	4a05      	ldr	r2, [pc, #20]	; (80106a0 <prvInitialiseTaskLists+0x68>)
 801068c:	601a      	str	r2, [r3, #0]
}
 801068e:	bf00      	nop
 8010690:	3708      	adds	r7, #8
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	20000e0c 	.word	0x20000e0c
 801069c:	2000126c 	.word	0x2000126c
 80106a0:	20001280 	.word	0x20001280
 80106a4:	2000129c 	.word	0x2000129c
 80106a8:	200012b0 	.word	0x200012b0
 80106ac:	200012c8 	.word	0x200012c8
 80106b0:	20001294 	.word	0x20001294
 80106b4:	20001298 	.word	0x20001298

080106b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80106be:	e019      	b.n	80106f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80106c0:	f000 fee8 	bl	8011494 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106c4:	4b10      	ldr	r3, [pc, #64]	; (8010708 <prvCheckTasksWaitingTermination+0x50>)
 80106c6:	68db      	ldr	r3, [r3, #12]
 80106c8:	68db      	ldr	r3, [r3, #12]
 80106ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	3304      	adds	r3, #4
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7fe faf9 	bl	800ecc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80106d6:	4b0d      	ldr	r3, [pc, #52]	; (801070c <prvCheckTasksWaitingTermination+0x54>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	3b01      	subs	r3, #1
 80106dc:	4a0b      	ldr	r2, [pc, #44]	; (801070c <prvCheckTasksWaitingTermination+0x54>)
 80106de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80106e0:	4b0b      	ldr	r3, [pc, #44]	; (8010710 <prvCheckTasksWaitingTermination+0x58>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	3b01      	subs	r3, #1
 80106e6:	4a0a      	ldr	r2, [pc, #40]	; (8010710 <prvCheckTasksWaitingTermination+0x58>)
 80106e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80106ea:	f000 ff03 	bl	80114f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f000 f810 	bl	8010714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80106f4:	4b06      	ldr	r3, [pc, #24]	; (8010710 <prvCheckTasksWaitingTermination+0x58>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d1e1      	bne.n	80106c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80106fc:	bf00      	nop
 80106fe:	bf00      	nop
 8010700:	3708      	adds	r7, #8
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	200012b0 	.word	0x200012b0
 801070c:	200012dc 	.word	0x200012dc
 8010710:	200012c4 	.word	0x200012c4

08010714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	3354      	adds	r3, #84	; 0x54
 8010720:	4618      	mov	r0, r3
 8010722:	f002 ff77 	bl	8013614 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801072c:	2b00      	cmp	r3, #0
 801072e:	d108      	bne.n	8010742 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010734:	4618      	mov	r0, r3
 8010736:	f001 f89b 	bl	8011870 <vPortFree>
				vPortFree( pxTCB );
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f001 f898 	bl	8011870 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010740:	e018      	b.n	8010774 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010748:	2b01      	cmp	r3, #1
 801074a:	d103      	bne.n	8010754 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f001 f88f 	bl	8011870 <vPortFree>
	}
 8010752:	e00f      	b.n	8010774 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801075a:	2b02      	cmp	r3, #2
 801075c:	d00a      	beq.n	8010774 <prvDeleteTCB+0x60>
	__asm volatile
 801075e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010762:	f383 8811 	msr	BASEPRI, r3
 8010766:	f3bf 8f6f 	isb	sy
 801076a:	f3bf 8f4f 	dsb	sy
 801076e:	60fb      	str	r3, [r7, #12]
}
 8010770:	bf00      	nop
 8010772:	e7fe      	b.n	8010772 <prvDeleteTCB+0x5e>
	}
 8010774:	bf00      	nop
 8010776:	3710      	adds	r7, #16
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801077c:	b480      	push	{r7}
 801077e:	b083      	sub	sp, #12
 8010780:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010782:	4b0c      	ldr	r3, [pc, #48]	; (80107b4 <prvResetNextTaskUnblockTime+0x38>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d104      	bne.n	8010796 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801078c:	4b0a      	ldr	r3, [pc, #40]	; (80107b8 <prvResetNextTaskUnblockTime+0x3c>)
 801078e:	f04f 32ff 	mov.w	r2, #4294967295
 8010792:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010794:	e008      	b.n	80107a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010796:	4b07      	ldr	r3, [pc, #28]	; (80107b4 <prvResetNextTaskUnblockTime+0x38>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	68db      	ldr	r3, [r3, #12]
 801079c:	68db      	ldr	r3, [r3, #12]
 801079e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	685b      	ldr	r3, [r3, #4]
 80107a4:	4a04      	ldr	r2, [pc, #16]	; (80107b8 <prvResetNextTaskUnblockTime+0x3c>)
 80107a6:	6013      	str	r3, [r2, #0]
}
 80107a8:	bf00      	nop
 80107aa:	370c      	adds	r7, #12
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr
 80107b4:	20001294 	.word	0x20001294
 80107b8:	200012fc 	.word	0x200012fc

080107bc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80107bc:	b480      	push	{r7}
 80107be:	b083      	sub	sp, #12
 80107c0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80107c2:	4b05      	ldr	r3, [pc, #20]	; (80107d8 <xTaskGetCurrentTaskHandle+0x1c>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80107c8:	687b      	ldr	r3, [r7, #4]
	}
 80107ca:	4618      	mov	r0, r3
 80107cc:	370c      	adds	r7, #12
 80107ce:	46bd      	mov	sp, r7
 80107d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d4:	4770      	bx	lr
 80107d6:	bf00      	nop
 80107d8:	20000e08 	.word	0x20000e08

080107dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80107dc:	b480      	push	{r7}
 80107de:	b083      	sub	sp, #12
 80107e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80107e2:	4b0b      	ldr	r3, [pc, #44]	; (8010810 <xTaskGetSchedulerState+0x34>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d102      	bne.n	80107f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80107ea:	2301      	movs	r3, #1
 80107ec:	607b      	str	r3, [r7, #4]
 80107ee:	e008      	b.n	8010802 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80107f0:	4b08      	ldr	r3, [pc, #32]	; (8010814 <xTaskGetSchedulerState+0x38>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d102      	bne.n	80107fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80107f8:	2302      	movs	r3, #2
 80107fa:	607b      	str	r3, [r7, #4]
 80107fc:	e001      	b.n	8010802 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80107fe:	2300      	movs	r3, #0
 8010800:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010802:	687b      	ldr	r3, [r7, #4]
	}
 8010804:	4618      	mov	r0, r3
 8010806:	370c      	adds	r7, #12
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr
 8010810:	200012e8 	.word	0x200012e8
 8010814:	20001304 	.word	0x20001304

08010818 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010824:	2300      	movs	r3, #0
 8010826:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d051      	beq.n	80108d2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010832:	4b2a      	ldr	r3, [pc, #168]	; (80108dc <xTaskPriorityInherit+0xc4>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010838:	429a      	cmp	r2, r3
 801083a:	d241      	bcs.n	80108c0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	699b      	ldr	r3, [r3, #24]
 8010840:	2b00      	cmp	r3, #0
 8010842:	db06      	blt.n	8010852 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010844:	4b25      	ldr	r3, [pc, #148]	; (80108dc <xTaskPriorityInherit+0xc4>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801084a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	6959      	ldr	r1, [r3, #20]
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801085a:	4613      	mov	r3, r2
 801085c:	009b      	lsls	r3, r3, #2
 801085e:	4413      	add	r3, r2
 8010860:	009b      	lsls	r3, r3, #2
 8010862:	4a1f      	ldr	r2, [pc, #124]	; (80108e0 <xTaskPriorityInherit+0xc8>)
 8010864:	4413      	add	r3, r2
 8010866:	4299      	cmp	r1, r3
 8010868:	d122      	bne.n	80108b0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	3304      	adds	r3, #4
 801086e:	4618      	mov	r0, r3
 8010870:	f7fe fa2a 	bl	800ecc8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010874:	4b19      	ldr	r3, [pc, #100]	; (80108dc <xTaskPriorityInherit+0xc4>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010882:	4b18      	ldr	r3, [pc, #96]	; (80108e4 <xTaskPriorityInherit+0xcc>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	429a      	cmp	r2, r3
 8010888:	d903      	bls.n	8010892 <xTaskPriorityInherit+0x7a>
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801088e:	4a15      	ldr	r2, [pc, #84]	; (80108e4 <xTaskPriorityInherit+0xcc>)
 8010890:	6013      	str	r3, [r2, #0]
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010896:	4613      	mov	r3, r2
 8010898:	009b      	lsls	r3, r3, #2
 801089a:	4413      	add	r3, r2
 801089c:	009b      	lsls	r3, r3, #2
 801089e:	4a10      	ldr	r2, [pc, #64]	; (80108e0 <xTaskPriorityInherit+0xc8>)
 80108a0:	441a      	add	r2, r3
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	3304      	adds	r3, #4
 80108a6:	4619      	mov	r1, r3
 80108a8:	4610      	mov	r0, r2
 80108aa:	f7fe f9b0 	bl	800ec0e <vListInsertEnd>
 80108ae:	e004      	b.n	80108ba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80108b0:	4b0a      	ldr	r3, [pc, #40]	; (80108dc <xTaskPriorityInherit+0xc4>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80108ba:	2301      	movs	r3, #1
 80108bc:	60fb      	str	r3, [r7, #12]
 80108be:	e008      	b.n	80108d2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80108c4:	4b05      	ldr	r3, [pc, #20]	; (80108dc <xTaskPriorityInherit+0xc4>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d201      	bcs.n	80108d2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80108ce:	2301      	movs	r3, #1
 80108d0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80108d2:	68fb      	ldr	r3, [r7, #12]
	}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3710      	adds	r7, #16
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}
 80108dc:	20000e08 	.word	0x20000e08
 80108e0:	20000e0c 	.word	0x20000e0c
 80108e4:	200012e4 	.word	0x200012e4

080108e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b086      	sub	sp, #24
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80108f4:	2300      	movs	r3, #0
 80108f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d056      	beq.n	80109ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80108fe:	4b2e      	ldr	r3, [pc, #184]	; (80109b8 <xTaskPriorityDisinherit+0xd0>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	693a      	ldr	r2, [r7, #16]
 8010904:	429a      	cmp	r2, r3
 8010906:	d00a      	beq.n	801091e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801090c:	f383 8811 	msr	BASEPRI, r3
 8010910:	f3bf 8f6f 	isb	sy
 8010914:	f3bf 8f4f 	dsb	sy
 8010918:	60fb      	str	r3, [r7, #12]
}
 801091a:	bf00      	nop
 801091c:	e7fe      	b.n	801091c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010922:	2b00      	cmp	r3, #0
 8010924:	d10a      	bne.n	801093c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801092a:	f383 8811 	msr	BASEPRI, r3
 801092e:	f3bf 8f6f 	isb	sy
 8010932:	f3bf 8f4f 	dsb	sy
 8010936:	60bb      	str	r3, [r7, #8]
}
 8010938:	bf00      	nop
 801093a:	e7fe      	b.n	801093a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010940:	1e5a      	subs	r2, r3, #1
 8010942:	693b      	ldr	r3, [r7, #16]
 8010944:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801094e:	429a      	cmp	r2, r3
 8010950:	d02c      	beq.n	80109ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010956:	2b00      	cmp	r3, #0
 8010958:	d128      	bne.n	80109ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	3304      	adds	r3, #4
 801095e:	4618      	mov	r0, r3
 8010960:	f7fe f9b2 	bl	800ecc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010964:	693b      	ldr	r3, [r7, #16]
 8010966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010968:	693b      	ldr	r3, [r7, #16]
 801096a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010970:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010974:	693b      	ldr	r3, [r7, #16]
 8010976:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801097c:	4b0f      	ldr	r3, [pc, #60]	; (80109bc <xTaskPriorityDisinherit+0xd4>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	429a      	cmp	r2, r3
 8010982:	d903      	bls.n	801098c <xTaskPriorityDisinherit+0xa4>
 8010984:	693b      	ldr	r3, [r7, #16]
 8010986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010988:	4a0c      	ldr	r2, [pc, #48]	; (80109bc <xTaskPriorityDisinherit+0xd4>)
 801098a:	6013      	str	r3, [r2, #0]
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010990:	4613      	mov	r3, r2
 8010992:	009b      	lsls	r3, r3, #2
 8010994:	4413      	add	r3, r2
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	4a09      	ldr	r2, [pc, #36]	; (80109c0 <xTaskPriorityDisinherit+0xd8>)
 801099a:	441a      	add	r2, r3
 801099c:	693b      	ldr	r3, [r7, #16]
 801099e:	3304      	adds	r3, #4
 80109a0:	4619      	mov	r1, r3
 80109a2:	4610      	mov	r0, r2
 80109a4:	f7fe f933 	bl	800ec0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80109a8:	2301      	movs	r3, #1
 80109aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80109ac:	697b      	ldr	r3, [r7, #20]
	}
 80109ae:	4618      	mov	r0, r3
 80109b0:	3718      	adds	r7, #24
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}
 80109b6:	bf00      	nop
 80109b8:	20000e08 	.word	0x20000e08
 80109bc:	200012e4 	.word	0x200012e4
 80109c0:	20000e0c 	.word	0x20000e0c

080109c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b088      	sub	sp, #32
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80109d2:	2301      	movs	r3, #1
 80109d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d06a      	beq.n	8010ab2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80109dc:	69bb      	ldr	r3, [r7, #24]
 80109de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d10a      	bne.n	80109fa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80109e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e8:	f383 8811 	msr	BASEPRI, r3
 80109ec:	f3bf 8f6f 	isb	sy
 80109f0:	f3bf 8f4f 	dsb	sy
 80109f4:	60fb      	str	r3, [r7, #12]
}
 80109f6:	bf00      	nop
 80109f8:	e7fe      	b.n	80109f8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80109fa:	69bb      	ldr	r3, [r7, #24]
 80109fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109fe:	683a      	ldr	r2, [r7, #0]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d902      	bls.n	8010a0a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	61fb      	str	r3, [r7, #28]
 8010a08:	e002      	b.n	8010a10 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010a0a:	69bb      	ldr	r3, [r7, #24]
 8010a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a0e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010a10:	69bb      	ldr	r3, [r7, #24]
 8010a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a14:	69fa      	ldr	r2, [r7, #28]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d04b      	beq.n	8010ab2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010a1a:	69bb      	ldr	r3, [r7, #24]
 8010a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a1e:	697a      	ldr	r2, [r7, #20]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d146      	bne.n	8010ab2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010a24:	4b25      	ldr	r3, [pc, #148]	; (8010abc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	69ba      	ldr	r2, [r7, #24]
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d10a      	bne.n	8010a44 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a32:	f383 8811 	msr	BASEPRI, r3
 8010a36:	f3bf 8f6f 	isb	sy
 8010a3a:	f3bf 8f4f 	dsb	sy
 8010a3e:	60bb      	str	r3, [r7, #8]
}
 8010a40:	bf00      	nop
 8010a42:	e7fe      	b.n	8010a42 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010a44:	69bb      	ldr	r3, [r7, #24]
 8010a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a48:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010a4a:	69bb      	ldr	r3, [r7, #24]
 8010a4c:	69fa      	ldr	r2, [r7, #28]
 8010a4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010a50:	69bb      	ldr	r3, [r7, #24]
 8010a52:	699b      	ldr	r3, [r3, #24]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	db04      	blt.n	8010a62 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a58:	69fb      	ldr	r3, [r7, #28]
 8010a5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010a5e:	69bb      	ldr	r3, [r7, #24]
 8010a60:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010a62:	69bb      	ldr	r3, [r7, #24]
 8010a64:	6959      	ldr	r1, [r3, #20]
 8010a66:	693a      	ldr	r2, [r7, #16]
 8010a68:	4613      	mov	r3, r2
 8010a6a:	009b      	lsls	r3, r3, #2
 8010a6c:	4413      	add	r3, r2
 8010a6e:	009b      	lsls	r3, r3, #2
 8010a70:	4a13      	ldr	r2, [pc, #76]	; (8010ac0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010a72:	4413      	add	r3, r2
 8010a74:	4299      	cmp	r1, r3
 8010a76:	d11c      	bne.n	8010ab2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a78:	69bb      	ldr	r3, [r7, #24]
 8010a7a:	3304      	adds	r3, #4
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7fe f923 	bl	800ecc8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010a82:	69bb      	ldr	r3, [r7, #24]
 8010a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a86:	4b0f      	ldr	r3, [pc, #60]	; (8010ac4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d903      	bls.n	8010a96 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8010a8e:	69bb      	ldr	r3, [r7, #24]
 8010a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a92:	4a0c      	ldr	r2, [pc, #48]	; (8010ac4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010a94:	6013      	str	r3, [r2, #0]
 8010a96:	69bb      	ldr	r3, [r7, #24]
 8010a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a9a:	4613      	mov	r3, r2
 8010a9c:	009b      	lsls	r3, r3, #2
 8010a9e:	4413      	add	r3, r2
 8010aa0:	009b      	lsls	r3, r3, #2
 8010aa2:	4a07      	ldr	r2, [pc, #28]	; (8010ac0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010aa4:	441a      	add	r2, r3
 8010aa6:	69bb      	ldr	r3, [r7, #24]
 8010aa8:	3304      	adds	r3, #4
 8010aaa:	4619      	mov	r1, r3
 8010aac:	4610      	mov	r0, r2
 8010aae:	f7fe f8ae 	bl	800ec0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010ab2:	bf00      	nop
 8010ab4:	3720      	adds	r7, #32
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}
 8010aba:	bf00      	nop
 8010abc:	20000e08 	.word	0x20000e08
 8010ac0:	20000e0c 	.word	0x20000e0c
 8010ac4:	200012e4 	.word	0x200012e4

08010ac8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010ac8:	b480      	push	{r7}
 8010aca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010acc:	4b07      	ldr	r3, [pc, #28]	; (8010aec <pvTaskIncrementMutexHeldCount+0x24>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d004      	beq.n	8010ade <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010ad4:	4b05      	ldr	r3, [pc, #20]	; (8010aec <pvTaskIncrementMutexHeldCount+0x24>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ada:	3201      	adds	r2, #1
 8010adc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010ade:	4b03      	ldr	r3, [pc, #12]	; (8010aec <pvTaskIncrementMutexHeldCount+0x24>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
	}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aea:	4770      	bx	lr
 8010aec:	20000e08 	.word	0x20000e08

08010af0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b084      	sub	sp, #16
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010afa:	4b21      	ldr	r3, [pc, #132]	; (8010b80 <prvAddCurrentTaskToDelayedList+0x90>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b00:	4b20      	ldr	r3, [pc, #128]	; (8010b84 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	3304      	adds	r3, #4
 8010b06:	4618      	mov	r0, r3
 8010b08:	f7fe f8de 	bl	800ecc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b12:	d10a      	bne.n	8010b2a <prvAddCurrentTaskToDelayedList+0x3a>
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d007      	beq.n	8010b2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b1a:	4b1a      	ldr	r3, [pc, #104]	; (8010b84 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	3304      	adds	r3, #4
 8010b20:	4619      	mov	r1, r3
 8010b22:	4819      	ldr	r0, [pc, #100]	; (8010b88 <prvAddCurrentTaskToDelayedList+0x98>)
 8010b24:	f7fe f873 	bl	800ec0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010b28:	e026      	b.n	8010b78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010b2a:	68fa      	ldr	r2, [r7, #12]
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	4413      	add	r3, r2
 8010b30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010b32:	4b14      	ldr	r3, [pc, #80]	; (8010b84 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	68ba      	ldr	r2, [r7, #8]
 8010b38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010b3a:	68ba      	ldr	r2, [r7, #8]
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d209      	bcs.n	8010b56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b42:	4b12      	ldr	r3, [pc, #72]	; (8010b8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	4b0f      	ldr	r3, [pc, #60]	; (8010b84 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	3304      	adds	r3, #4
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	4610      	mov	r0, r2
 8010b50:	f7fe f881 	bl	800ec56 <vListInsert>
}
 8010b54:	e010      	b.n	8010b78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b56:	4b0e      	ldr	r3, [pc, #56]	; (8010b90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010b58:	681a      	ldr	r2, [r3, #0]
 8010b5a:	4b0a      	ldr	r3, [pc, #40]	; (8010b84 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	3304      	adds	r3, #4
 8010b60:	4619      	mov	r1, r3
 8010b62:	4610      	mov	r0, r2
 8010b64:	f7fe f877 	bl	800ec56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010b68:	4b0a      	ldr	r3, [pc, #40]	; (8010b94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	68ba      	ldr	r2, [r7, #8]
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d202      	bcs.n	8010b78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010b72:	4a08      	ldr	r2, [pc, #32]	; (8010b94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	6013      	str	r3, [r2, #0]
}
 8010b78:	bf00      	nop
 8010b7a:	3710      	adds	r7, #16
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	200012e0 	.word	0x200012e0
 8010b84:	20000e08 	.word	0x20000e08
 8010b88:	200012c8 	.word	0x200012c8
 8010b8c:	20001298 	.word	0x20001298
 8010b90:	20001294 	.word	0x20001294
 8010b94:	200012fc 	.word	0x200012fc

08010b98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b08a      	sub	sp, #40	; 0x28
 8010b9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010ba2:	f000 fb07 	bl	80111b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010ba6:	4b1c      	ldr	r3, [pc, #112]	; (8010c18 <xTimerCreateTimerTask+0x80>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d021      	beq.n	8010bf2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010bb6:	1d3a      	adds	r2, r7, #4
 8010bb8:	f107 0108 	add.w	r1, r7, #8
 8010bbc:	f107 030c 	add.w	r3, r7, #12
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7fd ffdd 	bl	800eb80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010bc6:	6879      	ldr	r1, [r7, #4]
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	68fa      	ldr	r2, [r7, #12]
 8010bcc:	9202      	str	r2, [sp, #8]
 8010bce:	9301      	str	r3, [sp, #4]
 8010bd0:	2302      	movs	r3, #2
 8010bd2:	9300      	str	r3, [sp, #0]
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	460a      	mov	r2, r1
 8010bd8:	4910      	ldr	r1, [pc, #64]	; (8010c1c <xTimerCreateTimerTask+0x84>)
 8010bda:	4811      	ldr	r0, [pc, #68]	; (8010c20 <xTimerCreateTimerTask+0x88>)
 8010bdc:	f7fe ff34 	bl	800fa48 <xTaskCreateStatic>
 8010be0:	4603      	mov	r3, r0
 8010be2:	4a10      	ldr	r2, [pc, #64]	; (8010c24 <xTimerCreateTimerTask+0x8c>)
 8010be4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010be6:	4b0f      	ldr	r3, [pc, #60]	; (8010c24 <xTimerCreateTimerTask+0x8c>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d001      	beq.n	8010bf2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010bee:	2301      	movs	r3, #1
 8010bf0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d10a      	bne.n	8010c0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfc:	f383 8811 	msr	BASEPRI, r3
 8010c00:	f3bf 8f6f 	isb	sy
 8010c04:	f3bf 8f4f 	dsb	sy
 8010c08:	613b      	str	r3, [r7, #16]
}
 8010c0a:	bf00      	nop
 8010c0c:	e7fe      	b.n	8010c0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010c0e:	697b      	ldr	r3, [r7, #20]
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3718      	adds	r7, #24
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	20001338 	.word	0x20001338
 8010c1c:	08017af4 	.word	0x08017af4
 8010c20:	08010d5d 	.word	0x08010d5d
 8010c24:	2000133c 	.word	0x2000133c

08010c28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b08a      	sub	sp, #40	; 0x28
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	60b9      	str	r1, [r7, #8]
 8010c32:	607a      	str	r2, [r7, #4]
 8010c34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010c36:	2300      	movs	r3, #0
 8010c38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d10a      	bne.n	8010c56 <xTimerGenericCommand+0x2e>
	__asm volatile
 8010c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c44:	f383 8811 	msr	BASEPRI, r3
 8010c48:	f3bf 8f6f 	isb	sy
 8010c4c:	f3bf 8f4f 	dsb	sy
 8010c50:	623b      	str	r3, [r7, #32]
}
 8010c52:	bf00      	nop
 8010c54:	e7fe      	b.n	8010c54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010c56:	4b1a      	ldr	r3, [pc, #104]	; (8010cc0 <xTimerGenericCommand+0x98>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d02a      	beq.n	8010cb4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	2b05      	cmp	r3, #5
 8010c6e:	dc18      	bgt.n	8010ca2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010c70:	f7ff fdb4 	bl	80107dc <xTaskGetSchedulerState>
 8010c74:	4603      	mov	r3, r0
 8010c76:	2b02      	cmp	r3, #2
 8010c78:	d109      	bne.n	8010c8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010c7a:	4b11      	ldr	r3, [pc, #68]	; (8010cc0 <xTimerGenericCommand+0x98>)
 8010c7c:	6818      	ldr	r0, [r3, #0]
 8010c7e:	f107 0110 	add.w	r1, r7, #16
 8010c82:	2300      	movs	r3, #0
 8010c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c86:	f7fe f9d3 	bl	800f030 <xQueueGenericSend>
 8010c8a:	6278      	str	r0, [r7, #36]	; 0x24
 8010c8c:	e012      	b.n	8010cb4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010c8e:	4b0c      	ldr	r3, [pc, #48]	; (8010cc0 <xTimerGenericCommand+0x98>)
 8010c90:	6818      	ldr	r0, [r3, #0]
 8010c92:	f107 0110 	add.w	r1, r7, #16
 8010c96:	2300      	movs	r3, #0
 8010c98:	2200      	movs	r2, #0
 8010c9a:	f7fe f9c9 	bl	800f030 <xQueueGenericSend>
 8010c9e:	6278      	str	r0, [r7, #36]	; 0x24
 8010ca0:	e008      	b.n	8010cb4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010ca2:	4b07      	ldr	r3, [pc, #28]	; (8010cc0 <xTimerGenericCommand+0x98>)
 8010ca4:	6818      	ldr	r0, [r3, #0]
 8010ca6:	f107 0110 	add.w	r1, r7, #16
 8010caa:	2300      	movs	r3, #0
 8010cac:	683a      	ldr	r2, [r7, #0]
 8010cae:	f7fe fabd 	bl	800f22c <xQueueGenericSendFromISR>
 8010cb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3728      	adds	r7, #40	; 0x28
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}
 8010cbe:	bf00      	nop
 8010cc0:	20001338 	.word	0x20001338

08010cc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b088      	sub	sp, #32
 8010cc8:	af02      	add	r7, sp, #8
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cce:	4b22      	ldr	r3, [pc, #136]	; (8010d58 <prvProcessExpiredTimer+0x94>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	68db      	ldr	r3, [r3, #12]
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	3304      	adds	r3, #4
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7fd fff3 	bl	800ecc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ce8:	f003 0304 	and.w	r3, r3, #4
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d022      	beq.n	8010d36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	699a      	ldr	r2, [r3, #24]
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	18d1      	adds	r1, r2, r3
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	683a      	ldr	r2, [r7, #0]
 8010cfc:	6978      	ldr	r0, [r7, #20]
 8010cfe:	f000 f8d1 	bl	8010ea4 <prvInsertTimerInActiveList>
 8010d02:	4603      	mov	r3, r0
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d01f      	beq.n	8010d48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010d08:	2300      	movs	r3, #0
 8010d0a:	9300      	str	r3, [sp, #0]
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	687a      	ldr	r2, [r7, #4]
 8010d10:	2100      	movs	r1, #0
 8010d12:	6978      	ldr	r0, [r7, #20]
 8010d14:	f7ff ff88 	bl	8010c28 <xTimerGenericCommand>
 8010d18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d113      	bne.n	8010d48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d24:	f383 8811 	msr	BASEPRI, r3
 8010d28:	f3bf 8f6f 	isb	sy
 8010d2c:	f3bf 8f4f 	dsb	sy
 8010d30:	60fb      	str	r3, [r7, #12]
}
 8010d32:	bf00      	nop
 8010d34:	e7fe      	b.n	8010d34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d3c:	f023 0301 	bic.w	r3, r3, #1
 8010d40:	b2da      	uxtb	r2, r3
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	6a1b      	ldr	r3, [r3, #32]
 8010d4c:	6978      	ldr	r0, [r7, #20]
 8010d4e:	4798      	blx	r3
}
 8010d50:	bf00      	nop
 8010d52:	3718      	adds	r7, #24
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}
 8010d58:	20001330 	.word	0x20001330

08010d5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b084      	sub	sp, #16
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010d64:	f107 0308 	add.w	r3, r7, #8
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f000 f857 	bl	8010e1c <prvGetNextExpireTime>
 8010d6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	4619      	mov	r1, r3
 8010d74:	68f8      	ldr	r0, [r7, #12]
 8010d76:	f000 f803 	bl	8010d80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010d7a:	f000 f8d5 	bl	8010f28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010d7e:	e7f1      	b.n	8010d64 <prvTimerTask+0x8>

08010d80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b084      	sub	sp, #16
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010d8a:	f7ff f92b 	bl	800ffe4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d8e:	f107 0308 	add.w	r3, r7, #8
 8010d92:	4618      	mov	r0, r3
 8010d94:	f000 f866 	bl	8010e64 <prvSampleTimeNow>
 8010d98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d130      	bne.n	8010e02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d10a      	bne.n	8010dbc <prvProcessTimerOrBlockTask+0x3c>
 8010da6:	687a      	ldr	r2, [r7, #4]
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d806      	bhi.n	8010dbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010dae:	f7ff f927 	bl	8010000 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010db2:	68f9      	ldr	r1, [r7, #12]
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f7ff ff85 	bl	8010cc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010dba:	e024      	b.n	8010e06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d008      	beq.n	8010dd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010dc2:	4b13      	ldr	r3, [pc, #76]	; (8010e10 <prvProcessTimerOrBlockTask+0x90>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d101      	bne.n	8010dd0 <prvProcessTimerOrBlockTask+0x50>
 8010dcc:	2301      	movs	r3, #1
 8010dce:	e000      	b.n	8010dd2 <prvProcessTimerOrBlockTask+0x52>
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010dd4:	4b0f      	ldr	r3, [pc, #60]	; (8010e14 <prvProcessTimerOrBlockTask+0x94>)
 8010dd6:	6818      	ldr	r0, [r3, #0]
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	1ad3      	subs	r3, r2, r3
 8010dde:	683a      	ldr	r2, [r7, #0]
 8010de0:	4619      	mov	r1, r3
 8010de2:	f7fe fdfd 	bl	800f9e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010de6:	f7ff f90b 	bl	8010000 <xTaskResumeAll>
 8010dea:	4603      	mov	r3, r0
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d10a      	bne.n	8010e06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010df0:	4b09      	ldr	r3, [pc, #36]	; (8010e18 <prvProcessTimerOrBlockTask+0x98>)
 8010df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010df6:	601a      	str	r2, [r3, #0]
 8010df8:	f3bf 8f4f 	dsb	sy
 8010dfc:	f3bf 8f6f 	isb	sy
}
 8010e00:	e001      	b.n	8010e06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010e02:	f7ff f8fd 	bl	8010000 <xTaskResumeAll>
}
 8010e06:	bf00      	nop
 8010e08:	3710      	adds	r7, #16
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}
 8010e0e:	bf00      	nop
 8010e10:	20001334 	.word	0x20001334
 8010e14:	20001338 	.word	0x20001338
 8010e18:	e000ed04 	.word	0xe000ed04

08010e1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b085      	sub	sp, #20
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010e24:	4b0e      	ldr	r3, [pc, #56]	; (8010e60 <prvGetNextExpireTime+0x44>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d101      	bne.n	8010e32 <prvGetNextExpireTime+0x16>
 8010e2e:	2201      	movs	r2, #1
 8010e30:	e000      	b.n	8010e34 <prvGetNextExpireTime+0x18>
 8010e32:	2200      	movs	r2, #0
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d105      	bne.n	8010e4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010e40:	4b07      	ldr	r3, [pc, #28]	; (8010e60 <prvGetNextExpireTime+0x44>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	68db      	ldr	r3, [r3, #12]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	60fb      	str	r3, [r7, #12]
 8010e4a:	e001      	b.n	8010e50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010e50:	68fb      	ldr	r3, [r7, #12]
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3714      	adds	r7, #20
 8010e56:	46bd      	mov	sp, r7
 8010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5c:	4770      	bx	lr
 8010e5e:	bf00      	nop
 8010e60:	20001330 	.word	0x20001330

08010e64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b084      	sub	sp, #16
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010e6c:	f7ff f966 	bl	801013c <xTaskGetTickCount>
 8010e70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010e72:	4b0b      	ldr	r3, [pc, #44]	; (8010ea0 <prvSampleTimeNow+0x3c>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	68fa      	ldr	r2, [r7, #12]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d205      	bcs.n	8010e88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010e7c:	f000 f936 	bl	80110ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2201      	movs	r2, #1
 8010e84:	601a      	str	r2, [r3, #0]
 8010e86:	e002      	b.n	8010e8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010e8e:	4a04      	ldr	r2, [pc, #16]	; (8010ea0 <prvSampleTimeNow+0x3c>)
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010e94:	68fb      	ldr	r3, [r7, #12]
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	3710      	adds	r7, #16
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
 8010e9e:	bf00      	nop
 8010ea0:	20001340 	.word	0x20001340

08010ea4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b086      	sub	sp, #24
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	60f8      	str	r0, [r7, #12]
 8010eac:	60b9      	str	r1, [r7, #8]
 8010eae:	607a      	str	r2, [r7, #4]
 8010eb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	68ba      	ldr	r2, [r7, #8]
 8010eba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	68fa      	ldr	r2, [r7, #12]
 8010ec0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010ec2:	68ba      	ldr	r2, [r7, #8]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d812      	bhi.n	8010ef0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010eca:	687a      	ldr	r2, [r7, #4]
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	1ad2      	subs	r2, r2, r3
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	699b      	ldr	r3, [r3, #24]
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	d302      	bcc.n	8010ede <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010ed8:	2301      	movs	r3, #1
 8010eda:	617b      	str	r3, [r7, #20]
 8010edc:	e01b      	b.n	8010f16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010ede:	4b10      	ldr	r3, [pc, #64]	; (8010f20 <prvInsertTimerInActiveList+0x7c>)
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	3304      	adds	r3, #4
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	4610      	mov	r0, r2
 8010eea:	f7fd feb4 	bl	800ec56 <vListInsert>
 8010eee:	e012      	b.n	8010f16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010ef0:	687a      	ldr	r2, [r7, #4]
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d206      	bcs.n	8010f06 <prvInsertTimerInActiveList+0x62>
 8010ef8:	68ba      	ldr	r2, [r7, #8]
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d302      	bcc.n	8010f06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010f00:	2301      	movs	r3, #1
 8010f02:	617b      	str	r3, [r7, #20]
 8010f04:	e007      	b.n	8010f16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010f06:	4b07      	ldr	r3, [pc, #28]	; (8010f24 <prvInsertTimerInActiveList+0x80>)
 8010f08:	681a      	ldr	r2, [r3, #0]
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	3304      	adds	r3, #4
 8010f0e:	4619      	mov	r1, r3
 8010f10:	4610      	mov	r0, r2
 8010f12:	f7fd fea0 	bl	800ec56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010f16:	697b      	ldr	r3, [r7, #20]
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3718      	adds	r7, #24
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}
 8010f20:	20001334 	.word	0x20001334
 8010f24:	20001330 	.word	0x20001330

08010f28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b08e      	sub	sp, #56	; 0x38
 8010f2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010f2e:	e0ca      	b.n	80110c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	da18      	bge.n	8010f68 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010f36:	1d3b      	adds	r3, r7, #4
 8010f38:	3304      	adds	r3, #4
 8010f3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d10a      	bne.n	8010f58 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f46:	f383 8811 	msr	BASEPRI, r3
 8010f4a:	f3bf 8f6f 	isb	sy
 8010f4e:	f3bf 8f4f 	dsb	sy
 8010f52:	61fb      	str	r3, [r7, #28]
}
 8010f54:	bf00      	nop
 8010f56:	e7fe      	b.n	8010f56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f5e:	6850      	ldr	r0, [r2, #4]
 8010f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f62:	6892      	ldr	r2, [r2, #8]
 8010f64:	4611      	mov	r1, r2
 8010f66:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	f2c0 80aa 	blt.w	80110c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f76:	695b      	ldr	r3, [r3, #20]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d004      	beq.n	8010f86 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f7e:	3304      	adds	r3, #4
 8010f80:	4618      	mov	r0, r3
 8010f82:	f7fd fea1 	bl	800ecc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010f86:	463b      	mov	r3, r7
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7ff ff6b 	bl	8010e64 <prvSampleTimeNow>
 8010f8e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2b09      	cmp	r3, #9
 8010f94:	f200 8097 	bhi.w	80110c6 <prvProcessReceivedCommands+0x19e>
 8010f98:	a201      	add	r2, pc, #4	; (adr r2, 8010fa0 <prvProcessReceivedCommands+0x78>)
 8010f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f9e:	bf00      	nop
 8010fa0:	08010fc9 	.word	0x08010fc9
 8010fa4:	08010fc9 	.word	0x08010fc9
 8010fa8:	08010fc9 	.word	0x08010fc9
 8010fac:	0801103d 	.word	0x0801103d
 8010fb0:	08011051 	.word	0x08011051
 8010fb4:	0801109b 	.word	0x0801109b
 8010fb8:	08010fc9 	.word	0x08010fc9
 8010fbc:	08010fc9 	.word	0x08010fc9
 8010fc0:	0801103d 	.word	0x0801103d
 8010fc4:	08011051 	.word	0x08011051
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fce:	f043 0301 	orr.w	r3, r3, #1
 8010fd2:	b2da      	uxtb	r2, r3
 8010fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010fda:	68ba      	ldr	r2, [r7, #8]
 8010fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fde:	699b      	ldr	r3, [r3, #24]
 8010fe0:	18d1      	adds	r1, r2, r3
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fe8:	f7ff ff5c 	bl	8010ea4 <prvInsertTimerInActiveList>
 8010fec:	4603      	mov	r3, r0
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d069      	beq.n	80110c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff4:	6a1b      	ldr	r3, [r3, #32]
 8010ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ff8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011000:	f003 0304 	and.w	r3, r3, #4
 8011004:	2b00      	cmp	r3, #0
 8011006:	d05e      	beq.n	80110c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011008:	68ba      	ldr	r2, [r7, #8]
 801100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801100c:	699b      	ldr	r3, [r3, #24]
 801100e:	441a      	add	r2, r3
 8011010:	2300      	movs	r3, #0
 8011012:	9300      	str	r3, [sp, #0]
 8011014:	2300      	movs	r3, #0
 8011016:	2100      	movs	r1, #0
 8011018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801101a:	f7ff fe05 	bl	8010c28 <xTimerGenericCommand>
 801101e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011020:	6a3b      	ldr	r3, [r7, #32]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d14f      	bne.n	80110c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801102a:	f383 8811 	msr	BASEPRI, r3
 801102e:	f3bf 8f6f 	isb	sy
 8011032:	f3bf 8f4f 	dsb	sy
 8011036:	61bb      	str	r3, [r7, #24]
}
 8011038:	bf00      	nop
 801103a:	e7fe      	b.n	801103a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801103c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801103e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011042:	f023 0301 	bic.w	r3, r3, #1
 8011046:	b2da      	uxtb	r2, r3
 8011048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801104a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801104e:	e03a      	b.n	80110c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011056:	f043 0301 	orr.w	r3, r3, #1
 801105a:	b2da      	uxtb	r2, r3
 801105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801105e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011062:	68ba      	ldr	r2, [r7, #8]
 8011064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011066:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801106a:	699b      	ldr	r3, [r3, #24]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d10a      	bne.n	8011086 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011074:	f383 8811 	msr	BASEPRI, r3
 8011078:	f3bf 8f6f 	isb	sy
 801107c:	f3bf 8f4f 	dsb	sy
 8011080:	617b      	str	r3, [r7, #20]
}
 8011082:	bf00      	nop
 8011084:	e7fe      	b.n	8011084 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011088:	699a      	ldr	r2, [r3, #24]
 801108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108c:	18d1      	adds	r1, r2, r3
 801108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011094:	f7ff ff06 	bl	8010ea4 <prvInsertTimerInActiveList>
					break;
 8011098:	e015      	b.n	80110c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801109a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801109c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110a0:	f003 0302 	and.w	r3, r3, #2
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d103      	bne.n	80110b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80110a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110aa:	f000 fbe1 	bl	8011870 <vPortFree>
 80110ae:	e00a      	b.n	80110c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80110b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110b6:	f023 0301 	bic.w	r3, r3, #1
 80110ba:	b2da      	uxtb	r2, r3
 80110bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80110c2:	e000      	b.n	80110c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80110c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80110c6:	4b08      	ldr	r3, [pc, #32]	; (80110e8 <prvProcessReceivedCommands+0x1c0>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	1d39      	adds	r1, r7, #4
 80110cc:	2200      	movs	r2, #0
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7fe f948 	bl	800f364 <xQueueReceive>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	f47f af2a 	bne.w	8010f30 <prvProcessReceivedCommands+0x8>
	}
}
 80110dc:	bf00      	nop
 80110de:	bf00      	nop
 80110e0:	3730      	adds	r7, #48	; 0x30
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	20001338 	.word	0x20001338

080110ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b088      	sub	sp, #32
 80110f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80110f2:	e048      	b.n	8011186 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80110f4:	4b2d      	ldr	r3, [pc, #180]	; (80111ac <prvSwitchTimerLists+0xc0>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	68db      	ldr	r3, [r3, #12]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110fe:	4b2b      	ldr	r3, [pc, #172]	; (80111ac <prvSwitchTimerLists+0xc0>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	68db      	ldr	r3, [r3, #12]
 8011106:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	3304      	adds	r3, #4
 801110c:	4618      	mov	r0, r3
 801110e:	f7fd fddb 	bl	800ecc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	6a1b      	ldr	r3, [r3, #32]
 8011116:	68f8      	ldr	r0, [r7, #12]
 8011118:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011120:	f003 0304 	and.w	r3, r3, #4
 8011124:	2b00      	cmp	r3, #0
 8011126:	d02e      	beq.n	8011186 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	699b      	ldr	r3, [r3, #24]
 801112c:	693a      	ldr	r2, [r7, #16]
 801112e:	4413      	add	r3, r2
 8011130:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011132:	68ba      	ldr	r2, [r7, #8]
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	429a      	cmp	r2, r3
 8011138:	d90e      	bls.n	8011158 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	68ba      	ldr	r2, [r7, #8]
 801113e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	68fa      	ldr	r2, [r7, #12]
 8011144:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011146:	4b19      	ldr	r3, [pc, #100]	; (80111ac <prvSwitchTimerLists+0xc0>)
 8011148:	681a      	ldr	r2, [r3, #0]
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	3304      	adds	r3, #4
 801114e:	4619      	mov	r1, r3
 8011150:	4610      	mov	r0, r2
 8011152:	f7fd fd80 	bl	800ec56 <vListInsert>
 8011156:	e016      	b.n	8011186 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011158:	2300      	movs	r3, #0
 801115a:	9300      	str	r3, [sp, #0]
 801115c:	2300      	movs	r3, #0
 801115e:	693a      	ldr	r2, [r7, #16]
 8011160:	2100      	movs	r1, #0
 8011162:	68f8      	ldr	r0, [r7, #12]
 8011164:	f7ff fd60 	bl	8010c28 <xTimerGenericCommand>
 8011168:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d10a      	bne.n	8011186 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011174:	f383 8811 	msr	BASEPRI, r3
 8011178:	f3bf 8f6f 	isb	sy
 801117c:	f3bf 8f4f 	dsb	sy
 8011180:	603b      	str	r3, [r7, #0]
}
 8011182:	bf00      	nop
 8011184:	e7fe      	b.n	8011184 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011186:	4b09      	ldr	r3, [pc, #36]	; (80111ac <prvSwitchTimerLists+0xc0>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d1b1      	bne.n	80110f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011190:	4b06      	ldr	r3, [pc, #24]	; (80111ac <prvSwitchTimerLists+0xc0>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011196:	4b06      	ldr	r3, [pc, #24]	; (80111b0 <prvSwitchTimerLists+0xc4>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4a04      	ldr	r2, [pc, #16]	; (80111ac <prvSwitchTimerLists+0xc0>)
 801119c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801119e:	4a04      	ldr	r2, [pc, #16]	; (80111b0 <prvSwitchTimerLists+0xc4>)
 80111a0:	697b      	ldr	r3, [r7, #20]
 80111a2:	6013      	str	r3, [r2, #0]
}
 80111a4:	bf00      	nop
 80111a6:	3718      	adds	r7, #24
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	20001330 	.word	0x20001330
 80111b0:	20001334 	.word	0x20001334

080111b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80111ba:	f000 f96b 	bl	8011494 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80111be:	4b15      	ldr	r3, [pc, #84]	; (8011214 <prvCheckForValidListAndQueue+0x60>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d120      	bne.n	8011208 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80111c6:	4814      	ldr	r0, [pc, #80]	; (8011218 <prvCheckForValidListAndQueue+0x64>)
 80111c8:	f7fd fcf4 	bl	800ebb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80111cc:	4813      	ldr	r0, [pc, #76]	; (801121c <prvCheckForValidListAndQueue+0x68>)
 80111ce:	f7fd fcf1 	bl	800ebb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80111d2:	4b13      	ldr	r3, [pc, #76]	; (8011220 <prvCheckForValidListAndQueue+0x6c>)
 80111d4:	4a10      	ldr	r2, [pc, #64]	; (8011218 <prvCheckForValidListAndQueue+0x64>)
 80111d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80111d8:	4b12      	ldr	r3, [pc, #72]	; (8011224 <prvCheckForValidListAndQueue+0x70>)
 80111da:	4a10      	ldr	r2, [pc, #64]	; (801121c <prvCheckForValidListAndQueue+0x68>)
 80111dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80111de:	2300      	movs	r3, #0
 80111e0:	9300      	str	r3, [sp, #0]
 80111e2:	4b11      	ldr	r3, [pc, #68]	; (8011228 <prvCheckForValidListAndQueue+0x74>)
 80111e4:	4a11      	ldr	r2, [pc, #68]	; (801122c <prvCheckForValidListAndQueue+0x78>)
 80111e6:	2110      	movs	r1, #16
 80111e8:	200a      	movs	r0, #10
 80111ea:	f7fd fdff 	bl	800edec <xQueueGenericCreateStatic>
 80111ee:	4603      	mov	r3, r0
 80111f0:	4a08      	ldr	r2, [pc, #32]	; (8011214 <prvCheckForValidListAndQueue+0x60>)
 80111f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80111f4:	4b07      	ldr	r3, [pc, #28]	; (8011214 <prvCheckForValidListAndQueue+0x60>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d005      	beq.n	8011208 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80111fc:	4b05      	ldr	r3, [pc, #20]	; (8011214 <prvCheckForValidListAndQueue+0x60>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	490b      	ldr	r1, [pc, #44]	; (8011230 <prvCheckForValidListAndQueue+0x7c>)
 8011202:	4618      	mov	r0, r3
 8011204:	f7fe fbc2 	bl	800f98c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011208:	f000 f974 	bl	80114f4 <vPortExitCritical>
}
 801120c:	bf00      	nop
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	20001338 	.word	0x20001338
 8011218:	20001308 	.word	0x20001308
 801121c:	2000131c 	.word	0x2000131c
 8011220:	20001330 	.word	0x20001330
 8011224:	20001334 	.word	0x20001334
 8011228:	200013e4 	.word	0x200013e4
 801122c:	20001344 	.word	0x20001344
 8011230:	08017afc 	.word	0x08017afc

08011234 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011234:	b480      	push	{r7}
 8011236:	b085      	sub	sp, #20
 8011238:	af00      	add	r7, sp, #0
 801123a:	60f8      	str	r0, [r7, #12]
 801123c:	60b9      	str	r1, [r7, #8]
 801123e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	3b04      	subs	r3, #4
 8011244:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801124c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	3b04      	subs	r3, #4
 8011252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	f023 0201 	bic.w	r2, r3, #1
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	3b04      	subs	r3, #4
 8011262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011264:	4a0c      	ldr	r2, [pc, #48]	; (8011298 <pxPortInitialiseStack+0x64>)
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	3b14      	subs	r3, #20
 801126e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011270:	687a      	ldr	r2, [r7, #4]
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	3b04      	subs	r3, #4
 801127a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f06f 0202 	mvn.w	r2, #2
 8011282:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	3b20      	subs	r3, #32
 8011288:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801128a:	68fb      	ldr	r3, [r7, #12]
}
 801128c:	4618      	mov	r0, r3
 801128e:	3714      	adds	r7, #20
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr
 8011298:	0801129d 	.word	0x0801129d

0801129c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801129c:	b480      	push	{r7}
 801129e:	b085      	sub	sp, #20
 80112a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80112a2:	2300      	movs	r3, #0
 80112a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80112a6:	4b12      	ldr	r3, [pc, #72]	; (80112f0 <prvTaskExitError+0x54>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ae:	d00a      	beq.n	80112c6 <prvTaskExitError+0x2a>
	__asm volatile
 80112b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112b4:	f383 8811 	msr	BASEPRI, r3
 80112b8:	f3bf 8f6f 	isb	sy
 80112bc:	f3bf 8f4f 	dsb	sy
 80112c0:	60fb      	str	r3, [r7, #12]
}
 80112c2:	bf00      	nop
 80112c4:	e7fe      	b.n	80112c4 <prvTaskExitError+0x28>
	__asm volatile
 80112c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ca:	f383 8811 	msr	BASEPRI, r3
 80112ce:	f3bf 8f6f 	isb	sy
 80112d2:	f3bf 8f4f 	dsb	sy
 80112d6:	60bb      	str	r3, [r7, #8]
}
 80112d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80112da:	bf00      	nop
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d0fc      	beq.n	80112dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80112e2:	bf00      	nop
 80112e4:	bf00      	nop
 80112e6:	3714      	adds	r7, #20
 80112e8:	46bd      	mov	sp, r7
 80112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ee:	4770      	bx	lr
 80112f0:	20000138 	.word	0x20000138
	...

08011300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011300:	4b07      	ldr	r3, [pc, #28]	; (8011320 <pxCurrentTCBConst2>)
 8011302:	6819      	ldr	r1, [r3, #0]
 8011304:	6808      	ldr	r0, [r1, #0]
 8011306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801130a:	f380 8809 	msr	PSP, r0
 801130e:	f3bf 8f6f 	isb	sy
 8011312:	f04f 0000 	mov.w	r0, #0
 8011316:	f380 8811 	msr	BASEPRI, r0
 801131a:	4770      	bx	lr
 801131c:	f3af 8000 	nop.w

08011320 <pxCurrentTCBConst2>:
 8011320:	20000e08 	.word	0x20000e08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011324:	bf00      	nop
 8011326:	bf00      	nop

08011328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011328:	4808      	ldr	r0, [pc, #32]	; (801134c <prvPortStartFirstTask+0x24>)
 801132a:	6800      	ldr	r0, [r0, #0]
 801132c:	6800      	ldr	r0, [r0, #0]
 801132e:	f380 8808 	msr	MSP, r0
 8011332:	f04f 0000 	mov.w	r0, #0
 8011336:	f380 8814 	msr	CONTROL, r0
 801133a:	b662      	cpsie	i
 801133c:	b661      	cpsie	f
 801133e:	f3bf 8f4f 	dsb	sy
 8011342:	f3bf 8f6f 	isb	sy
 8011346:	df00      	svc	0
 8011348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801134a:	bf00      	nop
 801134c:	e000ed08 	.word	0xe000ed08

08011350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b086      	sub	sp, #24
 8011354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011356:	4b46      	ldr	r3, [pc, #280]	; (8011470 <xPortStartScheduler+0x120>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	4a46      	ldr	r2, [pc, #280]	; (8011474 <xPortStartScheduler+0x124>)
 801135c:	4293      	cmp	r3, r2
 801135e:	d10a      	bne.n	8011376 <xPortStartScheduler+0x26>
	__asm volatile
 8011360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011364:	f383 8811 	msr	BASEPRI, r3
 8011368:	f3bf 8f6f 	isb	sy
 801136c:	f3bf 8f4f 	dsb	sy
 8011370:	613b      	str	r3, [r7, #16]
}
 8011372:	bf00      	nop
 8011374:	e7fe      	b.n	8011374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011376:	4b3e      	ldr	r3, [pc, #248]	; (8011470 <xPortStartScheduler+0x120>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	4a3f      	ldr	r2, [pc, #252]	; (8011478 <xPortStartScheduler+0x128>)
 801137c:	4293      	cmp	r3, r2
 801137e:	d10a      	bne.n	8011396 <xPortStartScheduler+0x46>
	__asm volatile
 8011380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011384:	f383 8811 	msr	BASEPRI, r3
 8011388:	f3bf 8f6f 	isb	sy
 801138c:	f3bf 8f4f 	dsb	sy
 8011390:	60fb      	str	r3, [r7, #12]
}
 8011392:	bf00      	nop
 8011394:	e7fe      	b.n	8011394 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011396:	4b39      	ldr	r3, [pc, #228]	; (801147c <xPortStartScheduler+0x12c>)
 8011398:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	b2db      	uxtb	r3, r3
 80113a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	22ff      	movs	r2, #255	; 0xff
 80113a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	b2db      	uxtb	r3, r3
 80113ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80113b0:	78fb      	ldrb	r3, [r7, #3]
 80113b2:	b2db      	uxtb	r3, r3
 80113b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80113b8:	b2da      	uxtb	r2, r3
 80113ba:	4b31      	ldr	r3, [pc, #196]	; (8011480 <xPortStartScheduler+0x130>)
 80113bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80113be:	4b31      	ldr	r3, [pc, #196]	; (8011484 <xPortStartScheduler+0x134>)
 80113c0:	2207      	movs	r2, #7
 80113c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80113c4:	e009      	b.n	80113da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80113c6:	4b2f      	ldr	r3, [pc, #188]	; (8011484 <xPortStartScheduler+0x134>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	3b01      	subs	r3, #1
 80113cc:	4a2d      	ldr	r2, [pc, #180]	; (8011484 <xPortStartScheduler+0x134>)
 80113ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80113d0:	78fb      	ldrb	r3, [r7, #3]
 80113d2:	b2db      	uxtb	r3, r3
 80113d4:	005b      	lsls	r3, r3, #1
 80113d6:	b2db      	uxtb	r3, r3
 80113d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80113da:	78fb      	ldrb	r3, [r7, #3]
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113e2:	2b80      	cmp	r3, #128	; 0x80
 80113e4:	d0ef      	beq.n	80113c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80113e6:	4b27      	ldr	r3, [pc, #156]	; (8011484 <xPortStartScheduler+0x134>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	f1c3 0307 	rsb	r3, r3, #7
 80113ee:	2b04      	cmp	r3, #4
 80113f0:	d00a      	beq.n	8011408 <xPortStartScheduler+0xb8>
	__asm volatile
 80113f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f6:	f383 8811 	msr	BASEPRI, r3
 80113fa:	f3bf 8f6f 	isb	sy
 80113fe:	f3bf 8f4f 	dsb	sy
 8011402:	60bb      	str	r3, [r7, #8]
}
 8011404:	bf00      	nop
 8011406:	e7fe      	b.n	8011406 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011408:	4b1e      	ldr	r3, [pc, #120]	; (8011484 <xPortStartScheduler+0x134>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	021b      	lsls	r3, r3, #8
 801140e:	4a1d      	ldr	r2, [pc, #116]	; (8011484 <xPortStartScheduler+0x134>)
 8011410:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011412:	4b1c      	ldr	r3, [pc, #112]	; (8011484 <xPortStartScheduler+0x134>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801141a:	4a1a      	ldr	r2, [pc, #104]	; (8011484 <xPortStartScheduler+0x134>)
 801141c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	b2da      	uxtb	r2, r3
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011426:	4b18      	ldr	r3, [pc, #96]	; (8011488 <xPortStartScheduler+0x138>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	4a17      	ldr	r2, [pc, #92]	; (8011488 <xPortStartScheduler+0x138>)
 801142c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011432:	4b15      	ldr	r3, [pc, #84]	; (8011488 <xPortStartScheduler+0x138>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	4a14      	ldr	r2, [pc, #80]	; (8011488 <xPortStartScheduler+0x138>)
 8011438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801143c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801143e:	f000 f8dd 	bl	80115fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011442:	4b12      	ldr	r3, [pc, #72]	; (801148c <xPortStartScheduler+0x13c>)
 8011444:	2200      	movs	r2, #0
 8011446:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011448:	f000 f8fc 	bl	8011644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801144c:	4b10      	ldr	r3, [pc, #64]	; (8011490 <xPortStartScheduler+0x140>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	4a0f      	ldr	r2, [pc, #60]	; (8011490 <xPortStartScheduler+0x140>)
 8011452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011456:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011458:	f7ff ff66 	bl	8011328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801145c:	f7fe ff38 	bl	80102d0 <vTaskSwitchContext>
	prvTaskExitError();
 8011460:	f7ff ff1c 	bl	801129c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011464:	2300      	movs	r3, #0
}
 8011466:	4618      	mov	r0, r3
 8011468:	3718      	adds	r7, #24
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
 801146e:	bf00      	nop
 8011470:	e000ed00 	.word	0xe000ed00
 8011474:	410fc271 	.word	0x410fc271
 8011478:	410fc270 	.word	0x410fc270
 801147c:	e000e400 	.word	0xe000e400
 8011480:	20001434 	.word	0x20001434
 8011484:	20001438 	.word	0x20001438
 8011488:	e000ed20 	.word	0xe000ed20
 801148c:	20000138 	.word	0x20000138
 8011490:	e000ef34 	.word	0xe000ef34

08011494 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011494:	b480      	push	{r7}
 8011496:	b083      	sub	sp, #12
 8011498:	af00      	add	r7, sp, #0
	__asm volatile
 801149a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801149e:	f383 8811 	msr	BASEPRI, r3
 80114a2:	f3bf 8f6f 	isb	sy
 80114a6:	f3bf 8f4f 	dsb	sy
 80114aa:	607b      	str	r3, [r7, #4]
}
 80114ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80114ae:	4b0f      	ldr	r3, [pc, #60]	; (80114ec <vPortEnterCritical+0x58>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	3301      	adds	r3, #1
 80114b4:	4a0d      	ldr	r2, [pc, #52]	; (80114ec <vPortEnterCritical+0x58>)
 80114b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80114b8:	4b0c      	ldr	r3, [pc, #48]	; (80114ec <vPortEnterCritical+0x58>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	2b01      	cmp	r3, #1
 80114be:	d10f      	bne.n	80114e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80114c0:	4b0b      	ldr	r3, [pc, #44]	; (80114f0 <vPortEnterCritical+0x5c>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	b2db      	uxtb	r3, r3
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d00a      	beq.n	80114e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80114ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ce:	f383 8811 	msr	BASEPRI, r3
 80114d2:	f3bf 8f6f 	isb	sy
 80114d6:	f3bf 8f4f 	dsb	sy
 80114da:	603b      	str	r3, [r7, #0]
}
 80114dc:	bf00      	nop
 80114de:	e7fe      	b.n	80114de <vPortEnterCritical+0x4a>
	}
}
 80114e0:	bf00      	nop
 80114e2:	370c      	adds	r7, #12
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr
 80114ec:	20000138 	.word	0x20000138
 80114f0:	e000ed04 	.word	0xe000ed04

080114f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80114f4:	b480      	push	{r7}
 80114f6:	b083      	sub	sp, #12
 80114f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80114fa:	4b12      	ldr	r3, [pc, #72]	; (8011544 <vPortExitCritical+0x50>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d10a      	bne.n	8011518 <vPortExitCritical+0x24>
	__asm volatile
 8011502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011506:	f383 8811 	msr	BASEPRI, r3
 801150a:	f3bf 8f6f 	isb	sy
 801150e:	f3bf 8f4f 	dsb	sy
 8011512:	607b      	str	r3, [r7, #4]
}
 8011514:	bf00      	nop
 8011516:	e7fe      	b.n	8011516 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011518:	4b0a      	ldr	r3, [pc, #40]	; (8011544 <vPortExitCritical+0x50>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	3b01      	subs	r3, #1
 801151e:	4a09      	ldr	r2, [pc, #36]	; (8011544 <vPortExitCritical+0x50>)
 8011520:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011522:	4b08      	ldr	r3, [pc, #32]	; (8011544 <vPortExitCritical+0x50>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d105      	bne.n	8011536 <vPortExitCritical+0x42>
 801152a:	2300      	movs	r3, #0
 801152c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	f383 8811 	msr	BASEPRI, r3
}
 8011534:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011536:	bf00      	nop
 8011538:	370c      	adds	r7, #12
 801153a:	46bd      	mov	sp, r7
 801153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011540:	4770      	bx	lr
 8011542:	bf00      	nop
 8011544:	20000138 	.word	0x20000138
	...

08011550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011550:	f3ef 8009 	mrs	r0, PSP
 8011554:	f3bf 8f6f 	isb	sy
 8011558:	4b15      	ldr	r3, [pc, #84]	; (80115b0 <pxCurrentTCBConst>)
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	f01e 0f10 	tst.w	lr, #16
 8011560:	bf08      	it	eq
 8011562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801156a:	6010      	str	r0, [r2, #0]
 801156c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011574:	f380 8811 	msr	BASEPRI, r0
 8011578:	f3bf 8f4f 	dsb	sy
 801157c:	f3bf 8f6f 	isb	sy
 8011580:	f7fe fea6 	bl	80102d0 <vTaskSwitchContext>
 8011584:	f04f 0000 	mov.w	r0, #0
 8011588:	f380 8811 	msr	BASEPRI, r0
 801158c:	bc09      	pop	{r0, r3}
 801158e:	6819      	ldr	r1, [r3, #0]
 8011590:	6808      	ldr	r0, [r1, #0]
 8011592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011596:	f01e 0f10 	tst.w	lr, #16
 801159a:	bf08      	it	eq
 801159c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80115a0:	f380 8809 	msr	PSP, r0
 80115a4:	f3bf 8f6f 	isb	sy
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop
 80115ac:	f3af 8000 	nop.w

080115b0 <pxCurrentTCBConst>:
 80115b0:	20000e08 	.word	0x20000e08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80115b4:	bf00      	nop
 80115b6:	bf00      	nop

080115b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
	__asm volatile
 80115be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c2:	f383 8811 	msr	BASEPRI, r3
 80115c6:	f3bf 8f6f 	isb	sy
 80115ca:	f3bf 8f4f 	dsb	sy
 80115ce:	607b      	str	r3, [r7, #4]
}
 80115d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80115d2:	f7fe fdc3 	bl	801015c <xTaskIncrementTick>
 80115d6:	4603      	mov	r3, r0
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d003      	beq.n	80115e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80115dc:	4b06      	ldr	r3, [pc, #24]	; (80115f8 <xPortSysTickHandler+0x40>)
 80115de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115e2:	601a      	str	r2, [r3, #0]
 80115e4:	2300      	movs	r3, #0
 80115e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	f383 8811 	msr	BASEPRI, r3
}
 80115ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80115f0:	bf00      	nop
 80115f2:	3708      	adds	r7, #8
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}
 80115f8:	e000ed04 	.word	0xe000ed04

080115fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80115fc:	b480      	push	{r7}
 80115fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011600:	4b0b      	ldr	r3, [pc, #44]	; (8011630 <vPortSetupTimerInterrupt+0x34>)
 8011602:	2200      	movs	r2, #0
 8011604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011606:	4b0b      	ldr	r3, [pc, #44]	; (8011634 <vPortSetupTimerInterrupt+0x38>)
 8011608:	2200      	movs	r2, #0
 801160a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801160c:	4b0a      	ldr	r3, [pc, #40]	; (8011638 <vPortSetupTimerInterrupt+0x3c>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	4a0a      	ldr	r2, [pc, #40]	; (801163c <vPortSetupTimerInterrupt+0x40>)
 8011612:	fba2 2303 	umull	r2, r3, r2, r3
 8011616:	099b      	lsrs	r3, r3, #6
 8011618:	4a09      	ldr	r2, [pc, #36]	; (8011640 <vPortSetupTimerInterrupt+0x44>)
 801161a:	3b01      	subs	r3, #1
 801161c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801161e:	4b04      	ldr	r3, [pc, #16]	; (8011630 <vPortSetupTimerInterrupt+0x34>)
 8011620:	2207      	movs	r2, #7
 8011622:	601a      	str	r2, [r3, #0]
}
 8011624:	bf00      	nop
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr
 801162e:	bf00      	nop
 8011630:	e000e010 	.word	0xe000e010
 8011634:	e000e018 	.word	0xe000e018
 8011638:	20000000 	.word	0x20000000
 801163c:	10624dd3 	.word	0x10624dd3
 8011640:	e000e014 	.word	0xe000e014

08011644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011654 <vPortEnableVFP+0x10>
 8011648:	6801      	ldr	r1, [r0, #0]
 801164a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801164e:	6001      	str	r1, [r0, #0]
 8011650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011652:	bf00      	nop
 8011654:	e000ed88 	.word	0xe000ed88

08011658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011658:	b480      	push	{r7}
 801165a:	b085      	sub	sp, #20
 801165c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801165e:	f3ef 8305 	mrs	r3, IPSR
 8011662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	2b0f      	cmp	r3, #15
 8011668:	d914      	bls.n	8011694 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801166a:	4a17      	ldr	r2, [pc, #92]	; (80116c8 <vPortValidateInterruptPriority+0x70>)
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	4413      	add	r3, r2
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011674:	4b15      	ldr	r3, [pc, #84]	; (80116cc <vPortValidateInterruptPriority+0x74>)
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	7afa      	ldrb	r2, [r7, #11]
 801167a:	429a      	cmp	r2, r3
 801167c:	d20a      	bcs.n	8011694 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801167e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011682:	f383 8811 	msr	BASEPRI, r3
 8011686:	f3bf 8f6f 	isb	sy
 801168a:	f3bf 8f4f 	dsb	sy
 801168e:	607b      	str	r3, [r7, #4]
}
 8011690:	bf00      	nop
 8011692:	e7fe      	b.n	8011692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011694:	4b0e      	ldr	r3, [pc, #56]	; (80116d0 <vPortValidateInterruptPriority+0x78>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801169c:	4b0d      	ldr	r3, [pc, #52]	; (80116d4 <vPortValidateInterruptPriority+0x7c>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d90a      	bls.n	80116ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80116a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a8:	f383 8811 	msr	BASEPRI, r3
 80116ac:	f3bf 8f6f 	isb	sy
 80116b0:	f3bf 8f4f 	dsb	sy
 80116b4:	603b      	str	r3, [r7, #0]
}
 80116b6:	bf00      	nop
 80116b8:	e7fe      	b.n	80116b8 <vPortValidateInterruptPriority+0x60>
	}
 80116ba:	bf00      	nop
 80116bc:	3714      	adds	r7, #20
 80116be:	46bd      	mov	sp, r7
 80116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop
 80116c8:	e000e3f0 	.word	0xe000e3f0
 80116cc:	20001434 	.word	0x20001434
 80116d0:	e000ed0c 	.word	0xe000ed0c
 80116d4:	20001438 	.word	0x20001438

080116d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b08a      	sub	sp, #40	; 0x28
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80116e0:	2300      	movs	r3, #0
 80116e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80116e4:	f7fe fc7e 	bl	800ffe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80116e8:	4b5b      	ldr	r3, [pc, #364]	; (8011858 <pvPortMalloc+0x180>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d101      	bne.n	80116f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80116f0:	f000 f920 	bl	8011934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80116f4:	4b59      	ldr	r3, [pc, #356]	; (801185c <pvPortMalloc+0x184>)
 80116f6:	681a      	ldr	r2, [r3, #0]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	4013      	ands	r3, r2
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	f040 8093 	bne.w	8011828 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d01d      	beq.n	8011744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011708:	2208      	movs	r2, #8
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	4413      	add	r3, r2
 801170e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f003 0307 	and.w	r3, r3, #7
 8011716:	2b00      	cmp	r3, #0
 8011718:	d014      	beq.n	8011744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f023 0307 	bic.w	r3, r3, #7
 8011720:	3308      	adds	r3, #8
 8011722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f003 0307 	and.w	r3, r3, #7
 801172a:	2b00      	cmp	r3, #0
 801172c:	d00a      	beq.n	8011744 <pvPortMalloc+0x6c>
	__asm volatile
 801172e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011732:	f383 8811 	msr	BASEPRI, r3
 8011736:	f3bf 8f6f 	isb	sy
 801173a:	f3bf 8f4f 	dsb	sy
 801173e:	617b      	str	r3, [r7, #20]
}
 8011740:	bf00      	nop
 8011742:	e7fe      	b.n	8011742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d06e      	beq.n	8011828 <pvPortMalloc+0x150>
 801174a:	4b45      	ldr	r3, [pc, #276]	; (8011860 <pvPortMalloc+0x188>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	429a      	cmp	r2, r3
 8011752:	d869      	bhi.n	8011828 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011754:	4b43      	ldr	r3, [pc, #268]	; (8011864 <pvPortMalloc+0x18c>)
 8011756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011758:	4b42      	ldr	r3, [pc, #264]	; (8011864 <pvPortMalloc+0x18c>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801175e:	e004      	b.n	801176a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176c:	685b      	ldr	r3, [r3, #4]
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	429a      	cmp	r2, r3
 8011772:	d903      	bls.n	801177c <pvPortMalloc+0xa4>
 8011774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d1f1      	bne.n	8011760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801177c:	4b36      	ldr	r3, [pc, #216]	; (8011858 <pvPortMalloc+0x180>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011782:	429a      	cmp	r2, r3
 8011784:	d050      	beq.n	8011828 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011786:	6a3b      	ldr	r3, [r7, #32]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	2208      	movs	r2, #8
 801178c:	4413      	add	r3, r2
 801178e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	6a3b      	ldr	r3, [r7, #32]
 8011796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801179a:	685a      	ldr	r2, [r3, #4]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	1ad2      	subs	r2, r2, r3
 80117a0:	2308      	movs	r3, #8
 80117a2:	005b      	lsls	r3, r3, #1
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d91f      	bls.n	80117e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80117a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4413      	add	r3, r2
 80117ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80117b0:	69bb      	ldr	r3, [r7, #24]
 80117b2:	f003 0307 	and.w	r3, r3, #7
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d00a      	beq.n	80117d0 <pvPortMalloc+0xf8>
	__asm volatile
 80117ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117be:	f383 8811 	msr	BASEPRI, r3
 80117c2:	f3bf 8f6f 	isb	sy
 80117c6:	f3bf 8f4f 	dsb	sy
 80117ca:	613b      	str	r3, [r7, #16]
}
 80117cc:	bf00      	nop
 80117ce:	e7fe      	b.n	80117ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80117d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d2:	685a      	ldr	r2, [r3, #4]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	1ad2      	subs	r2, r2, r3
 80117d8:	69bb      	ldr	r3, [r7, #24]
 80117da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80117dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117de:	687a      	ldr	r2, [r7, #4]
 80117e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80117e2:	69b8      	ldr	r0, [r7, #24]
 80117e4:	f000 f908 	bl	80119f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80117e8:	4b1d      	ldr	r3, [pc, #116]	; (8011860 <pvPortMalloc+0x188>)
 80117ea:	681a      	ldr	r2, [r3, #0]
 80117ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	1ad3      	subs	r3, r2, r3
 80117f2:	4a1b      	ldr	r2, [pc, #108]	; (8011860 <pvPortMalloc+0x188>)
 80117f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80117f6:	4b1a      	ldr	r3, [pc, #104]	; (8011860 <pvPortMalloc+0x188>)
 80117f8:	681a      	ldr	r2, [r3, #0]
 80117fa:	4b1b      	ldr	r3, [pc, #108]	; (8011868 <pvPortMalloc+0x190>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	429a      	cmp	r2, r3
 8011800:	d203      	bcs.n	801180a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011802:	4b17      	ldr	r3, [pc, #92]	; (8011860 <pvPortMalloc+0x188>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	4a18      	ldr	r2, [pc, #96]	; (8011868 <pvPortMalloc+0x190>)
 8011808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180c:	685a      	ldr	r2, [r3, #4]
 801180e:	4b13      	ldr	r3, [pc, #76]	; (801185c <pvPortMalloc+0x184>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	431a      	orrs	r2, r3
 8011814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801181a:	2200      	movs	r2, #0
 801181c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801181e:	4b13      	ldr	r3, [pc, #76]	; (801186c <pvPortMalloc+0x194>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	3301      	adds	r3, #1
 8011824:	4a11      	ldr	r2, [pc, #68]	; (801186c <pvPortMalloc+0x194>)
 8011826:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011828:	f7fe fbea 	bl	8010000 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	f003 0307 	and.w	r3, r3, #7
 8011832:	2b00      	cmp	r3, #0
 8011834:	d00a      	beq.n	801184c <pvPortMalloc+0x174>
	__asm volatile
 8011836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183a:	f383 8811 	msr	BASEPRI, r3
 801183e:	f3bf 8f6f 	isb	sy
 8011842:	f3bf 8f4f 	dsb	sy
 8011846:	60fb      	str	r3, [r7, #12]
}
 8011848:	bf00      	nop
 801184a:	e7fe      	b.n	801184a <pvPortMalloc+0x172>
	return pvReturn;
 801184c:	69fb      	ldr	r3, [r7, #28]
}
 801184e:	4618      	mov	r0, r3
 8011850:	3728      	adds	r7, #40	; 0x28
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
 8011856:	bf00      	nop
 8011858:	20005044 	.word	0x20005044
 801185c:	20005058 	.word	0x20005058
 8011860:	20005048 	.word	0x20005048
 8011864:	2000503c 	.word	0x2000503c
 8011868:	2000504c 	.word	0x2000504c
 801186c:	20005050 	.word	0x20005050

08011870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b086      	sub	sp, #24
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d04d      	beq.n	801191e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011882:	2308      	movs	r3, #8
 8011884:	425b      	negs	r3, r3
 8011886:	697a      	ldr	r2, [r7, #20]
 8011888:	4413      	add	r3, r2
 801188a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	685a      	ldr	r2, [r3, #4]
 8011894:	4b24      	ldr	r3, [pc, #144]	; (8011928 <vPortFree+0xb8>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4013      	ands	r3, r2
 801189a:	2b00      	cmp	r3, #0
 801189c:	d10a      	bne.n	80118b4 <vPortFree+0x44>
	__asm volatile
 801189e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a2:	f383 8811 	msr	BASEPRI, r3
 80118a6:	f3bf 8f6f 	isb	sy
 80118aa:	f3bf 8f4f 	dsb	sy
 80118ae:	60fb      	str	r3, [r7, #12]
}
 80118b0:	bf00      	nop
 80118b2:	e7fe      	b.n	80118b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d00a      	beq.n	80118d2 <vPortFree+0x62>
	__asm volatile
 80118bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118c0:	f383 8811 	msr	BASEPRI, r3
 80118c4:	f3bf 8f6f 	isb	sy
 80118c8:	f3bf 8f4f 	dsb	sy
 80118cc:	60bb      	str	r3, [r7, #8]
}
 80118ce:	bf00      	nop
 80118d0:	e7fe      	b.n	80118d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	685a      	ldr	r2, [r3, #4]
 80118d6:	4b14      	ldr	r3, [pc, #80]	; (8011928 <vPortFree+0xb8>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	4013      	ands	r3, r2
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d01e      	beq.n	801191e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d11a      	bne.n	801191e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	685a      	ldr	r2, [r3, #4]
 80118ec:	4b0e      	ldr	r3, [pc, #56]	; (8011928 <vPortFree+0xb8>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	43db      	mvns	r3, r3
 80118f2:	401a      	ands	r2, r3
 80118f4:	693b      	ldr	r3, [r7, #16]
 80118f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80118f8:	f7fe fb74 	bl	800ffe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80118fc:	693b      	ldr	r3, [r7, #16]
 80118fe:	685a      	ldr	r2, [r3, #4]
 8011900:	4b0a      	ldr	r3, [pc, #40]	; (801192c <vPortFree+0xbc>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	4413      	add	r3, r2
 8011906:	4a09      	ldr	r2, [pc, #36]	; (801192c <vPortFree+0xbc>)
 8011908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801190a:	6938      	ldr	r0, [r7, #16]
 801190c:	f000 f874 	bl	80119f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011910:	4b07      	ldr	r3, [pc, #28]	; (8011930 <vPortFree+0xc0>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	3301      	adds	r3, #1
 8011916:	4a06      	ldr	r2, [pc, #24]	; (8011930 <vPortFree+0xc0>)
 8011918:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801191a:	f7fe fb71 	bl	8010000 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801191e:	bf00      	nop
 8011920:	3718      	adds	r7, #24
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	20005058 	.word	0x20005058
 801192c:	20005048 	.word	0x20005048
 8011930:	20005054 	.word	0x20005054

08011934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011934:	b480      	push	{r7}
 8011936:	b085      	sub	sp, #20
 8011938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801193a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801193e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011940:	4b27      	ldr	r3, [pc, #156]	; (80119e0 <prvHeapInit+0xac>)
 8011942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	f003 0307 	and.w	r3, r3, #7
 801194a:	2b00      	cmp	r3, #0
 801194c:	d00c      	beq.n	8011968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	3307      	adds	r3, #7
 8011952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f023 0307 	bic.w	r3, r3, #7
 801195a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801195c:	68ba      	ldr	r2, [r7, #8]
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	1ad3      	subs	r3, r2, r3
 8011962:	4a1f      	ldr	r2, [pc, #124]	; (80119e0 <prvHeapInit+0xac>)
 8011964:	4413      	add	r3, r2
 8011966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801196c:	4a1d      	ldr	r2, [pc, #116]	; (80119e4 <prvHeapInit+0xb0>)
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011972:	4b1c      	ldr	r3, [pc, #112]	; (80119e4 <prvHeapInit+0xb0>)
 8011974:	2200      	movs	r2, #0
 8011976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	68ba      	ldr	r2, [r7, #8]
 801197c:	4413      	add	r3, r2
 801197e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011980:	2208      	movs	r2, #8
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	1a9b      	subs	r3, r3, r2
 8011986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	f023 0307 	bic.w	r3, r3, #7
 801198e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	4a15      	ldr	r2, [pc, #84]	; (80119e8 <prvHeapInit+0xb4>)
 8011994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011996:	4b14      	ldr	r3, [pc, #80]	; (80119e8 <prvHeapInit+0xb4>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	2200      	movs	r2, #0
 801199c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801199e:	4b12      	ldr	r3, [pc, #72]	; (80119e8 <prvHeapInit+0xb4>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	2200      	movs	r2, #0
 80119a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	68fa      	ldr	r2, [r7, #12]
 80119ae:	1ad2      	subs	r2, r2, r3
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80119b4:	4b0c      	ldr	r3, [pc, #48]	; (80119e8 <prvHeapInit+0xb4>)
 80119b6:	681a      	ldr	r2, [r3, #0]
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	4a0a      	ldr	r2, [pc, #40]	; (80119ec <prvHeapInit+0xb8>)
 80119c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	685b      	ldr	r3, [r3, #4]
 80119c8:	4a09      	ldr	r2, [pc, #36]	; (80119f0 <prvHeapInit+0xbc>)
 80119ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80119cc:	4b09      	ldr	r3, [pc, #36]	; (80119f4 <prvHeapInit+0xc0>)
 80119ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80119d2:	601a      	str	r2, [r3, #0]
}
 80119d4:	bf00      	nop
 80119d6:	3714      	adds	r7, #20
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr
 80119e0:	2000143c 	.word	0x2000143c
 80119e4:	2000503c 	.word	0x2000503c
 80119e8:	20005044 	.word	0x20005044
 80119ec:	2000504c 	.word	0x2000504c
 80119f0:	20005048 	.word	0x20005048
 80119f4:	20005058 	.word	0x20005058

080119f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80119f8:	b480      	push	{r7}
 80119fa:	b085      	sub	sp, #20
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011a00:	4b28      	ldr	r3, [pc, #160]	; (8011aa4 <prvInsertBlockIntoFreeList+0xac>)
 8011a02:	60fb      	str	r3, [r7, #12]
 8011a04:	e002      	b.n	8011a0c <prvInsertBlockIntoFreeList+0x14>
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	60fb      	str	r3, [r7, #12]
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	687a      	ldr	r2, [r7, #4]
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d8f7      	bhi.n	8011a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	685b      	ldr	r3, [r3, #4]
 8011a1e:	68ba      	ldr	r2, [r7, #8]
 8011a20:	4413      	add	r3, r2
 8011a22:	687a      	ldr	r2, [r7, #4]
 8011a24:	429a      	cmp	r2, r3
 8011a26:	d108      	bne.n	8011a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	685a      	ldr	r2, [r3, #4]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	441a      	add	r2, r3
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	68ba      	ldr	r2, [r7, #8]
 8011a44:	441a      	add	r2, r3
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d118      	bne.n	8011a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	681a      	ldr	r2, [r3, #0]
 8011a52:	4b15      	ldr	r3, [pc, #84]	; (8011aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d00d      	beq.n	8011a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	685a      	ldr	r2, [r3, #4]
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	441a      	add	r2, r3
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	681a      	ldr	r2, [r3, #0]
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	601a      	str	r2, [r3, #0]
 8011a74:	e008      	b.n	8011a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011a76:	4b0c      	ldr	r3, [pc, #48]	; (8011aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8011a78:	681a      	ldr	r2, [r3, #0]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	601a      	str	r2, [r3, #0]
 8011a7e:	e003      	b.n	8011a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	681a      	ldr	r2, [r3, #0]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011a88:	68fa      	ldr	r2, [r7, #12]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d002      	beq.n	8011a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	687a      	ldr	r2, [r7, #4]
 8011a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a96:	bf00      	nop
 8011a98:	3714      	adds	r7, #20
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa0:	4770      	bx	lr
 8011aa2:	bf00      	nop
 8011aa4:	2000503c 	.word	0x2000503c
 8011aa8:	20005044 	.word	0x20005044

08011aac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	4912      	ldr	r1, [pc, #72]	; (8011afc <MX_USB_DEVICE_Init+0x50>)
 8011ab4:	4812      	ldr	r0, [pc, #72]	; (8011b00 <MX_USB_DEVICE_Init+0x54>)
 8011ab6:	f7fb fd0d 	bl	800d4d4 <USBD_Init>
 8011aba:	4603      	mov	r3, r0
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d001      	beq.n	8011ac4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011ac0:	f7f0 fe4a 	bl	8002758 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011ac4:	490f      	ldr	r1, [pc, #60]	; (8011b04 <MX_USB_DEVICE_Init+0x58>)
 8011ac6:	480e      	ldr	r0, [pc, #56]	; (8011b00 <MX_USB_DEVICE_Init+0x54>)
 8011ac8:	f7fb fd34 	bl	800d534 <USBD_RegisterClass>
 8011acc:	4603      	mov	r3, r0
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d001      	beq.n	8011ad6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011ad2:	f7f0 fe41 	bl	8002758 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011ad6:	490c      	ldr	r1, [pc, #48]	; (8011b08 <MX_USB_DEVICE_Init+0x5c>)
 8011ad8:	4809      	ldr	r0, [pc, #36]	; (8011b00 <MX_USB_DEVICE_Init+0x54>)
 8011ada:	f7fb fc85 	bl	800d3e8 <USBD_CDC_RegisterInterface>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d001      	beq.n	8011ae8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011ae4:	f7f0 fe38 	bl	8002758 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011ae8:	4805      	ldr	r0, [pc, #20]	; (8011b00 <MX_USB_DEVICE_Init+0x54>)
 8011aea:	f7fb fd4a 	bl	800d582 <USBD_Start>
 8011aee:	4603      	mov	r3, r0
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d001      	beq.n	8011af8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011af4:	f7f0 fe30 	bl	8002758 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011af8:	bf00      	nop
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	20000150 	.word	0x20000150
 8011b00:	20005ac8 	.word	0x20005ac8
 8011b04:	20000034 	.word	0x20000034
 8011b08:	2000013c 	.word	0x2000013c

08011b0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011b10:	2200      	movs	r2, #0
 8011b12:	4905      	ldr	r1, [pc, #20]	; (8011b28 <CDC_Init_FS+0x1c>)
 8011b14:	4805      	ldr	r0, [pc, #20]	; (8011b2c <CDC_Init_FS+0x20>)
 8011b16:	f7fb fc7c 	bl	800d412 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011b1a:	4905      	ldr	r1, [pc, #20]	; (8011b30 <CDC_Init_FS+0x24>)
 8011b1c:	4803      	ldr	r0, [pc, #12]	; (8011b2c <CDC_Init_FS+0x20>)
 8011b1e:	f7fb fc96 	bl	800d44e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011b22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	20006598 	.word	0x20006598
 8011b2c:	20005ac8 	.word	0x20005ac8
 8011b30:	20005d98 	.word	0x20005d98

08011b34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011b34:	b480      	push	{r7}
 8011b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011b38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b42:	4770      	bx	lr

08011b44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011b44:	b480      	push	{r7}
 8011b46:	b083      	sub	sp, #12
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	6039      	str	r1, [r7, #0]
 8011b4e:	71fb      	strb	r3, [r7, #7]
 8011b50:	4613      	mov	r3, r2
 8011b52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011b54:	79fb      	ldrb	r3, [r7, #7]
 8011b56:	2b23      	cmp	r3, #35	; 0x23
 8011b58:	d84a      	bhi.n	8011bf0 <CDC_Control_FS+0xac>
 8011b5a:	a201      	add	r2, pc, #4	; (adr r2, 8011b60 <CDC_Control_FS+0x1c>)
 8011b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b60:	08011bf1 	.word	0x08011bf1
 8011b64:	08011bf1 	.word	0x08011bf1
 8011b68:	08011bf1 	.word	0x08011bf1
 8011b6c:	08011bf1 	.word	0x08011bf1
 8011b70:	08011bf1 	.word	0x08011bf1
 8011b74:	08011bf1 	.word	0x08011bf1
 8011b78:	08011bf1 	.word	0x08011bf1
 8011b7c:	08011bf1 	.word	0x08011bf1
 8011b80:	08011bf1 	.word	0x08011bf1
 8011b84:	08011bf1 	.word	0x08011bf1
 8011b88:	08011bf1 	.word	0x08011bf1
 8011b8c:	08011bf1 	.word	0x08011bf1
 8011b90:	08011bf1 	.word	0x08011bf1
 8011b94:	08011bf1 	.word	0x08011bf1
 8011b98:	08011bf1 	.word	0x08011bf1
 8011b9c:	08011bf1 	.word	0x08011bf1
 8011ba0:	08011bf1 	.word	0x08011bf1
 8011ba4:	08011bf1 	.word	0x08011bf1
 8011ba8:	08011bf1 	.word	0x08011bf1
 8011bac:	08011bf1 	.word	0x08011bf1
 8011bb0:	08011bf1 	.word	0x08011bf1
 8011bb4:	08011bf1 	.word	0x08011bf1
 8011bb8:	08011bf1 	.word	0x08011bf1
 8011bbc:	08011bf1 	.word	0x08011bf1
 8011bc0:	08011bf1 	.word	0x08011bf1
 8011bc4:	08011bf1 	.word	0x08011bf1
 8011bc8:	08011bf1 	.word	0x08011bf1
 8011bcc:	08011bf1 	.word	0x08011bf1
 8011bd0:	08011bf1 	.word	0x08011bf1
 8011bd4:	08011bf1 	.word	0x08011bf1
 8011bd8:	08011bf1 	.word	0x08011bf1
 8011bdc:	08011bf1 	.word	0x08011bf1
 8011be0:	08011bf1 	.word	0x08011bf1
 8011be4:	08011bf1 	.word	0x08011bf1
 8011be8:	08011bf1 	.word	0x08011bf1
 8011bec:	08011bf1 	.word	0x08011bf1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011bf0:	bf00      	nop
  }

  return (USBD_OK);
 8011bf2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	370c      	adds	r7, #12
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr

08011c00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011c0a:	6879      	ldr	r1, [r7, #4]
 8011c0c:	4805      	ldr	r0, [pc, #20]	; (8011c24 <CDC_Receive_FS+0x24>)
 8011c0e:	f7fb fc1e 	bl	800d44e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011c12:	4804      	ldr	r0, [pc, #16]	; (8011c24 <CDC_Receive_FS+0x24>)
 8011c14:	f7fb fc34 	bl	800d480 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011c18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3708      	adds	r7, #8
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}
 8011c22:	bf00      	nop
 8011c24:	20005ac8 	.word	0x20005ac8

08011c28 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011c28:	b480      	push	{r7}
 8011c2a:	b087      	sub	sp, #28
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	60f8      	str	r0, [r7, #12]
 8011c30:	60b9      	str	r1, [r7, #8]
 8011c32:	4613      	mov	r3, r2
 8011c34:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011c36:	2300      	movs	r3, #0
 8011c38:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011c3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	371c      	adds	r7, #28
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr
	...

08011c4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c4c:	b480      	push	{r7}
 8011c4e:	b083      	sub	sp, #12
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	4603      	mov	r3, r0
 8011c54:	6039      	str	r1, [r7, #0]
 8011c56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	2212      	movs	r2, #18
 8011c5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011c5e:	4b03      	ldr	r3, [pc, #12]	; (8011c6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	370c      	adds	r7, #12
 8011c64:	46bd      	mov	sp, r7
 8011c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6a:	4770      	bx	lr
 8011c6c:	2000016c 	.word	0x2000016c

08011c70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c70:	b480      	push	{r7}
 8011c72:	b083      	sub	sp, #12
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	4603      	mov	r3, r0
 8011c78:	6039      	str	r1, [r7, #0]
 8011c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	2204      	movs	r2, #4
 8011c80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011c82:	4b03      	ldr	r3, [pc, #12]	; (8011c90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	370c      	adds	r7, #12
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8e:	4770      	bx	lr
 8011c90:	20000180 	.word	0x20000180

08011c94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b082      	sub	sp, #8
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	6039      	str	r1, [r7, #0]
 8011c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011ca0:	79fb      	ldrb	r3, [r7, #7]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d105      	bne.n	8011cb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011ca6:	683a      	ldr	r2, [r7, #0]
 8011ca8:	4907      	ldr	r1, [pc, #28]	; (8011cc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8011caa:	4808      	ldr	r0, [pc, #32]	; (8011ccc <USBD_FS_ProductStrDescriptor+0x38>)
 8011cac:	f7fc fc9b 	bl	800e5e6 <USBD_GetString>
 8011cb0:	e004      	b.n	8011cbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011cb2:	683a      	ldr	r2, [r7, #0]
 8011cb4:	4904      	ldr	r1, [pc, #16]	; (8011cc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8011cb6:	4805      	ldr	r0, [pc, #20]	; (8011ccc <USBD_FS_ProductStrDescriptor+0x38>)
 8011cb8:	f7fc fc95 	bl	800e5e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011cbc:	4b02      	ldr	r3, [pc, #8]	; (8011cc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	3708      	adds	r7, #8
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	20006d98 	.word	0x20006d98
 8011ccc:	08017b04 	.word	0x08017b04

08011cd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b082      	sub	sp, #8
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	6039      	str	r1, [r7, #0]
 8011cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011cdc:	683a      	ldr	r2, [r7, #0]
 8011cde:	4904      	ldr	r1, [pc, #16]	; (8011cf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011ce0:	4804      	ldr	r0, [pc, #16]	; (8011cf4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011ce2:	f7fc fc80 	bl	800e5e6 <USBD_GetString>
  return USBD_StrDesc;
 8011ce6:	4b02      	ldr	r3, [pc, #8]	; (8011cf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3708      	adds	r7, #8
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	20006d98 	.word	0x20006d98
 8011cf4:	08017b1c 	.word	0x08017b1c

08011cf8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b082      	sub	sp, #8
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	4603      	mov	r3, r0
 8011d00:	6039      	str	r1, [r7, #0]
 8011d02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	221a      	movs	r2, #26
 8011d08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011d0a:	f000 f843 	bl	8011d94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011d0e:	4b02      	ldr	r3, [pc, #8]	; (8011d18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3708      	adds	r7, #8
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	20000184 	.word	0x20000184

08011d1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	4603      	mov	r3, r0
 8011d24:	6039      	str	r1, [r7, #0]
 8011d26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011d28:	79fb      	ldrb	r3, [r7, #7]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d105      	bne.n	8011d3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011d2e:	683a      	ldr	r2, [r7, #0]
 8011d30:	4907      	ldr	r1, [pc, #28]	; (8011d50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011d32:	4808      	ldr	r0, [pc, #32]	; (8011d54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011d34:	f7fc fc57 	bl	800e5e6 <USBD_GetString>
 8011d38:	e004      	b.n	8011d44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011d3a:	683a      	ldr	r2, [r7, #0]
 8011d3c:	4904      	ldr	r1, [pc, #16]	; (8011d50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011d3e:	4805      	ldr	r0, [pc, #20]	; (8011d54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011d40:	f7fc fc51 	bl	800e5e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011d44:	4b02      	ldr	r3, [pc, #8]	; (8011d50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3708      	adds	r7, #8
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
 8011d4e:	bf00      	nop
 8011d50:	20006d98 	.word	0x20006d98
 8011d54:	08017b30 	.word	0x08017b30

08011d58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	4603      	mov	r3, r0
 8011d60:	6039      	str	r1, [r7, #0]
 8011d62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011d64:	79fb      	ldrb	r3, [r7, #7]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d105      	bne.n	8011d76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011d6a:	683a      	ldr	r2, [r7, #0]
 8011d6c:	4907      	ldr	r1, [pc, #28]	; (8011d8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011d6e:	4808      	ldr	r0, [pc, #32]	; (8011d90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011d70:	f7fc fc39 	bl	800e5e6 <USBD_GetString>
 8011d74:	e004      	b.n	8011d80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011d76:	683a      	ldr	r2, [r7, #0]
 8011d78:	4904      	ldr	r1, [pc, #16]	; (8011d8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011d7a:	4805      	ldr	r0, [pc, #20]	; (8011d90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011d7c:	f7fc fc33 	bl	800e5e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011d80:	4b02      	ldr	r3, [pc, #8]	; (8011d8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011d82:	4618      	mov	r0, r3
 8011d84:	3708      	adds	r7, #8
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd80      	pop	{r7, pc}
 8011d8a:	bf00      	nop
 8011d8c:	20006d98 	.word	0x20006d98
 8011d90:	08017b3c 	.word	0x08017b3c

08011d94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b084      	sub	sp, #16
 8011d98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011d9a:	4b0f      	ldr	r3, [pc, #60]	; (8011dd8 <Get_SerialNum+0x44>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011da0:	4b0e      	ldr	r3, [pc, #56]	; (8011ddc <Get_SerialNum+0x48>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011da6:	4b0e      	ldr	r3, [pc, #56]	; (8011de0 <Get_SerialNum+0x4c>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011dac:	68fa      	ldr	r2, [r7, #12]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	4413      	add	r3, r2
 8011db2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d009      	beq.n	8011dce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011dba:	2208      	movs	r2, #8
 8011dbc:	4909      	ldr	r1, [pc, #36]	; (8011de4 <Get_SerialNum+0x50>)
 8011dbe:	68f8      	ldr	r0, [r7, #12]
 8011dc0:	f000 f814 	bl	8011dec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011dc4:	2204      	movs	r2, #4
 8011dc6:	4908      	ldr	r1, [pc, #32]	; (8011de8 <Get_SerialNum+0x54>)
 8011dc8:	68b8      	ldr	r0, [r7, #8]
 8011dca:	f000 f80f 	bl	8011dec <IntToUnicode>
  }
}
 8011dce:	bf00      	nop
 8011dd0:	3710      	adds	r7, #16
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}
 8011dd6:	bf00      	nop
 8011dd8:	1fff7a10 	.word	0x1fff7a10
 8011ddc:	1fff7a14 	.word	0x1fff7a14
 8011de0:	1fff7a18 	.word	0x1fff7a18
 8011de4:	20000186 	.word	0x20000186
 8011de8:	20000196 	.word	0x20000196

08011dec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011dec:	b480      	push	{r7}
 8011dee:	b087      	sub	sp, #28
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	4613      	mov	r3, r2
 8011df8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011dfe:	2300      	movs	r3, #0
 8011e00:	75fb      	strb	r3, [r7, #23]
 8011e02:	e027      	b.n	8011e54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	0f1b      	lsrs	r3, r3, #28
 8011e08:	2b09      	cmp	r3, #9
 8011e0a:	d80b      	bhi.n	8011e24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	0f1b      	lsrs	r3, r3, #28
 8011e10:	b2da      	uxtb	r2, r3
 8011e12:	7dfb      	ldrb	r3, [r7, #23]
 8011e14:	005b      	lsls	r3, r3, #1
 8011e16:	4619      	mov	r1, r3
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	440b      	add	r3, r1
 8011e1c:	3230      	adds	r2, #48	; 0x30
 8011e1e:	b2d2      	uxtb	r2, r2
 8011e20:	701a      	strb	r2, [r3, #0]
 8011e22:	e00a      	b.n	8011e3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	0f1b      	lsrs	r3, r3, #28
 8011e28:	b2da      	uxtb	r2, r3
 8011e2a:	7dfb      	ldrb	r3, [r7, #23]
 8011e2c:	005b      	lsls	r3, r3, #1
 8011e2e:	4619      	mov	r1, r3
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	440b      	add	r3, r1
 8011e34:	3237      	adds	r2, #55	; 0x37
 8011e36:	b2d2      	uxtb	r2, r2
 8011e38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	011b      	lsls	r3, r3, #4
 8011e3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011e40:	7dfb      	ldrb	r3, [r7, #23]
 8011e42:	005b      	lsls	r3, r3, #1
 8011e44:	3301      	adds	r3, #1
 8011e46:	68ba      	ldr	r2, [r7, #8]
 8011e48:	4413      	add	r3, r2
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011e4e:	7dfb      	ldrb	r3, [r7, #23]
 8011e50:	3301      	adds	r3, #1
 8011e52:	75fb      	strb	r3, [r7, #23]
 8011e54:	7dfa      	ldrb	r2, [r7, #23]
 8011e56:	79fb      	ldrb	r3, [r7, #7]
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d3d3      	bcc.n	8011e04 <IntToUnicode+0x18>
  }
}
 8011e5c:	bf00      	nop
 8011e5e:	bf00      	nop
 8011e60:	371c      	adds	r7, #28
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr
	...

08011e6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b08a      	sub	sp, #40	; 0x28
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e74:	f107 0314 	add.w	r3, r7, #20
 8011e78:	2200      	movs	r2, #0
 8011e7a:	601a      	str	r2, [r3, #0]
 8011e7c:	605a      	str	r2, [r3, #4]
 8011e7e:	609a      	str	r2, [r3, #8]
 8011e80:	60da      	str	r2, [r3, #12]
 8011e82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011e8c:	d147      	bne.n	8011f1e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011e8e:	2300      	movs	r3, #0
 8011e90:	613b      	str	r3, [r7, #16]
 8011e92:	4b25      	ldr	r3, [pc, #148]	; (8011f28 <HAL_PCD_MspInit+0xbc>)
 8011e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e96:	4a24      	ldr	r2, [pc, #144]	; (8011f28 <HAL_PCD_MspInit+0xbc>)
 8011e98:	f043 0301 	orr.w	r3, r3, #1
 8011e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8011e9e:	4b22      	ldr	r3, [pc, #136]	; (8011f28 <HAL_PCD_MspInit+0xbc>)
 8011ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ea2:	f003 0301 	and.w	r3, r3, #1
 8011ea6:	613b      	str	r3, [r7, #16]
 8011ea8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8011eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011eb8:	f107 0314 	add.w	r3, r7, #20
 8011ebc:	4619      	mov	r1, r3
 8011ebe:	481b      	ldr	r0, [pc, #108]	; (8011f2c <HAL_PCD_MspInit+0xc0>)
 8011ec0:	f7f3 fa0a 	bl	80052d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011ec4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011eca:	2302      	movs	r3, #2
 8011ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ed2:	2303      	movs	r3, #3
 8011ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011ed6:	230a      	movs	r3, #10
 8011ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011eda:	f107 0314 	add.w	r3, r7, #20
 8011ede:	4619      	mov	r1, r3
 8011ee0:	4812      	ldr	r0, [pc, #72]	; (8011f2c <HAL_PCD_MspInit+0xc0>)
 8011ee2:	f7f3 f9f9 	bl	80052d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011ee6:	4b10      	ldr	r3, [pc, #64]	; (8011f28 <HAL_PCD_MspInit+0xbc>)
 8011ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011eea:	4a0f      	ldr	r2, [pc, #60]	; (8011f28 <HAL_PCD_MspInit+0xbc>)
 8011eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ef0:	6353      	str	r3, [r2, #52]	; 0x34
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	60fb      	str	r3, [r7, #12]
 8011ef6:	4b0c      	ldr	r3, [pc, #48]	; (8011f28 <HAL_PCD_MspInit+0xbc>)
 8011ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011efa:	4a0b      	ldr	r2, [pc, #44]	; (8011f28 <HAL_PCD_MspInit+0xbc>)
 8011efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011f00:	6453      	str	r3, [r2, #68]	; 0x44
 8011f02:	4b09      	ldr	r3, [pc, #36]	; (8011f28 <HAL_PCD_MspInit+0xbc>)
 8011f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011f0a:	60fb      	str	r3, [r7, #12]
 8011f0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011f0e:	2200      	movs	r2, #0
 8011f10:	2105      	movs	r1, #5
 8011f12:	2043      	movs	r0, #67	; 0x43
 8011f14:	f7f3 f9a8 	bl	8005268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011f18:	2043      	movs	r0, #67	; 0x43
 8011f1a:	f7f3 f9c1 	bl	80052a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011f1e:	bf00      	nop
 8011f20:	3728      	adds	r7, #40	; 0x28
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	40023800 	.word	0x40023800
 8011f2c:	40020000 	.word	0x40020000

08011f30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011f44:	4619      	mov	r1, r3
 8011f46:	4610      	mov	r0, r2
 8011f48:	f7fb fb66 	bl	800d618 <USBD_LL_SetupStage>
}
 8011f4c:	bf00      	nop
 8011f4e:	3708      	adds	r7, #8
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}

08011f54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b082      	sub	sp, #8
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	460b      	mov	r3, r1
 8011f5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011f66:	78fa      	ldrb	r2, [r7, #3]
 8011f68:	6879      	ldr	r1, [r7, #4]
 8011f6a:	4613      	mov	r3, r2
 8011f6c:	00db      	lsls	r3, r3, #3
 8011f6e:	1a9b      	subs	r3, r3, r2
 8011f70:	009b      	lsls	r3, r3, #2
 8011f72:	440b      	add	r3, r1
 8011f74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011f78:	681a      	ldr	r2, [r3, #0]
 8011f7a:	78fb      	ldrb	r3, [r7, #3]
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	f7fb fba0 	bl	800d6c2 <USBD_LL_DataOutStage>
}
 8011f82:	bf00      	nop
 8011f84:	3708      	adds	r7, #8
 8011f86:	46bd      	mov	sp, r7
 8011f88:	bd80      	pop	{r7, pc}

08011f8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b082      	sub	sp, #8
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
 8011f92:	460b      	mov	r3, r1
 8011f94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011f9c:	78fa      	ldrb	r2, [r7, #3]
 8011f9e:	6879      	ldr	r1, [r7, #4]
 8011fa0:	4613      	mov	r3, r2
 8011fa2:	00db      	lsls	r3, r3, #3
 8011fa4:	1a9b      	subs	r3, r3, r2
 8011fa6:	009b      	lsls	r3, r3, #2
 8011fa8:	440b      	add	r3, r1
 8011faa:	3348      	adds	r3, #72	; 0x48
 8011fac:	681a      	ldr	r2, [r3, #0]
 8011fae:	78fb      	ldrb	r3, [r7, #3]
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	f7fb fbe9 	bl	800d788 <USBD_LL_DataInStage>
}
 8011fb6:	bf00      	nop
 8011fb8:	3708      	adds	r7, #8
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}

08011fbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fbe:	b580      	push	{r7, lr}
 8011fc0:	b082      	sub	sp, #8
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7fb fcfd 	bl	800d9cc <USBD_LL_SOF>
}
 8011fd2:	bf00      	nop
 8011fd4:	3708      	adds	r7, #8
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}

08011fda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fda:	b580      	push	{r7, lr}
 8011fdc:	b084      	sub	sp, #16
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	68db      	ldr	r3, [r3, #12]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d102      	bne.n	8011ff4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	73fb      	strb	r3, [r7, #15]
 8011ff2:	e008      	b.n	8012006 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	68db      	ldr	r3, [r3, #12]
 8011ff8:	2b02      	cmp	r3, #2
 8011ffa:	d102      	bne.n	8012002 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	73fb      	strb	r3, [r7, #15]
 8012000:	e001      	b.n	8012006 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012002:	f7f0 fba9 	bl	8002758 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801200c:	7bfa      	ldrb	r2, [r7, #15]
 801200e:	4611      	mov	r1, r2
 8012010:	4618      	mov	r0, r3
 8012012:	f7fb fc9d 	bl	800d950 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801201c:	4618      	mov	r0, r3
 801201e:	f7fb fc49 	bl	800d8b4 <USBD_LL_Reset>
}
 8012022:	bf00      	nop
 8012024:	3710      	adds	r7, #16
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
	...

0801202c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b082      	sub	sp, #8
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801203a:	4618      	mov	r0, r3
 801203c:	f7fb fc98 	bl	800d970 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	687a      	ldr	r2, [r7, #4]
 801204c:	6812      	ldr	r2, [r2, #0]
 801204e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012052:	f043 0301 	orr.w	r3, r3, #1
 8012056:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	6a1b      	ldr	r3, [r3, #32]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d005      	beq.n	801206c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012060:	4b04      	ldr	r3, [pc, #16]	; (8012074 <HAL_PCD_SuspendCallback+0x48>)
 8012062:	691b      	ldr	r3, [r3, #16]
 8012064:	4a03      	ldr	r2, [pc, #12]	; (8012074 <HAL_PCD_SuspendCallback+0x48>)
 8012066:	f043 0306 	orr.w	r3, r3, #6
 801206a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801206c:	bf00      	nop
 801206e:	3708      	adds	r7, #8
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}
 8012074:	e000ed00 	.word	0xe000ed00

08012078 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012086:	4618      	mov	r0, r3
 8012088:	f7fb fc88 	bl	800d99c <USBD_LL_Resume>
}
 801208c:	bf00      	nop
 801208e:	3708      	adds	r7, #8
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}

08012094 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b082      	sub	sp, #8
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	460b      	mov	r3, r1
 801209e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80120a6:	78fa      	ldrb	r2, [r7, #3]
 80120a8:	4611      	mov	r1, r2
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7fb fcd6 	bl	800da5c <USBD_LL_IsoOUTIncomplete>
}
 80120b0:	bf00      	nop
 80120b2:	3708      	adds	r7, #8
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}

080120b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
 80120c0:	460b      	mov	r3, r1
 80120c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80120ca:	78fa      	ldrb	r2, [r7, #3]
 80120cc:	4611      	mov	r1, r2
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7fb fc9e 	bl	800da10 <USBD_LL_IsoINIncomplete>
}
 80120d4:	bf00      	nop
 80120d6:	3708      	adds	r7, #8
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}

080120dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b082      	sub	sp, #8
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7fb fcdc 	bl	800daa8 <USBD_LL_DevConnected>
}
 80120f0:	bf00      	nop
 80120f2:	3708      	adds	r7, #8
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012106:	4618      	mov	r0, r3
 8012108:	f7fb fcd9 	bl	800dabe <USBD_LL_DevDisconnected>
}
 801210c:	bf00      	nop
 801210e:	3708      	adds	r7, #8
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}

08012114 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b082      	sub	sp, #8
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d13c      	bne.n	801219e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012124:	4a20      	ldr	r2, [pc, #128]	; (80121a8 <USBD_LL_Init+0x94>)
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	4a1e      	ldr	r2, [pc, #120]	; (80121a8 <USBD_LL_Init+0x94>)
 8012130:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012134:	4b1c      	ldr	r3, [pc, #112]	; (80121a8 <USBD_LL_Init+0x94>)
 8012136:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801213a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801213c:	4b1a      	ldr	r3, [pc, #104]	; (80121a8 <USBD_LL_Init+0x94>)
 801213e:	2204      	movs	r2, #4
 8012140:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012142:	4b19      	ldr	r3, [pc, #100]	; (80121a8 <USBD_LL_Init+0x94>)
 8012144:	2202      	movs	r2, #2
 8012146:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012148:	4b17      	ldr	r3, [pc, #92]	; (80121a8 <USBD_LL_Init+0x94>)
 801214a:	2200      	movs	r2, #0
 801214c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801214e:	4b16      	ldr	r3, [pc, #88]	; (80121a8 <USBD_LL_Init+0x94>)
 8012150:	2202      	movs	r2, #2
 8012152:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012154:	4b14      	ldr	r3, [pc, #80]	; (80121a8 <USBD_LL_Init+0x94>)
 8012156:	2200      	movs	r2, #0
 8012158:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801215a:	4b13      	ldr	r3, [pc, #76]	; (80121a8 <USBD_LL_Init+0x94>)
 801215c:	2200      	movs	r2, #0
 801215e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012160:	4b11      	ldr	r3, [pc, #68]	; (80121a8 <USBD_LL_Init+0x94>)
 8012162:	2200      	movs	r2, #0
 8012164:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8012166:	4b10      	ldr	r3, [pc, #64]	; (80121a8 <USBD_LL_Init+0x94>)
 8012168:	2201      	movs	r2, #1
 801216a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801216c:	4b0e      	ldr	r3, [pc, #56]	; (80121a8 <USBD_LL_Init+0x94>)
 801216e:	2200      	movs	r2, #0
 8012170:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012172:	480d      	ldr	r0, [pc, #52]	; (80121a8 <USBD_LL_Init+0x94>)
 8012174:	f7f4 fc2c 	bl	80069d0 <HAL_PCD_Init>
 8012178:	4603      	mov	r3, r0
 801217a:	2b00      	cmp	r3, #0
 801217c:	d001      	beq.n	8012182 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801217e:	f7f0 faeb 	bl	8002758 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012182:	2180      	movs	r1, #128	; 0x80
 8012184:	4808      	ldr	r0, [pc, #32]	; (80121a8 <USBD_LL_Init+0x94>)
 8012186:	f7f5 fd8a 	bl	8007c9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801218a:	2240      	movs	r2, #64	; 0x40
 801218c:	2100      	movs	r1, #0
 801218e:	4806      	ldr	r0, [pc, #24]	; (80121a8 <USBD_LL_Init+0x94>)
 8012190:	f7f5 fd3e 	bl	8007c10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012194:	2280      	movs	r2, #128	; 0x80
 8012196:	2101      	movs	r1, #1
 8012198:	4803      	ldr	r0, [pc, #12]	; (80121a8 <USBD_LL_Init+0x94>)
 801219a:	f7f5 fd39 	bl	8007c10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801219e:	2300      	movs	r3, #0
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	3708      	adds	r7, #8
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}
 80121a8:	20006f98 	.word	0x20006f98

080121ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b084      	sub	sp, #16
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121b4:	2300      	movs	r3, #0
 80121b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121b8:	2300      	movs	r3, #0
 80121ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80121c2:	4618      	mov	r0, r3
 80121c4:	f7f4 fd21 	bl	8006c0a <HAL_PCD_Start>
 80121c8:	4603      	mov	r3, r0
 80121ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80121cc:	7bfb      	ldrb	r3, [r7, #15]
 80121ce:	4618      	mov	r0, r3
 80121d0:	f000 f942 	bl	8012458 <USBD_Get_USB_Status>
 80121d4:	4603      	mov	r3, r0
 80121d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80121d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80121da:	4618      	mov	r0, r3
 80121dc:	3710      	adds	r7, #16
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}

080121e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80121e2:	b580      	push	{r7, lr}
 80121e4:	b084      	sub	sp, #16
 80121e6:	af00      	add	r7, sp, #0
 80121e8:	6078      	str	r0, [r7, #4]
 80121ea:	4608      	mov	r0, r1
 80121ec:	4611      	mov	r1, r2
 80121ee:	461a      	mov	r2, r3
 80121f0:	4603      	mov	r3, r0
 80121f2:	70fb      	strb	r3, [r7, #3]
 80121f4:	460b      	mov	r3, r1
 80121f6:	70bb      	strb	r3, [r7, #2]
 80121f8:	4613      	mov	r3, r2
 80121fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121fc:	2300      	movs	r3, #0
 80121fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012200:	2300      	movs	r3, #0
 8012202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801220a:	78bb      	ldrb	r3, [r7, #2]
 801220c:	883a      	ldrh	r2, [r7, #0]
 801220e:	78f9      	ldrb	r1, [r7, #3]
 8012210:	f7f5 f905 	bl	800741e <HAL_PCD_EP_Open>
 8012214:	4603      	mov	r3, r0
 8012216:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012218:	7bfb      	ldrb	r3, [r7, #15]
 801221a:	4618      	mov	r0, r3
 801221c:	f000 f91c 	bl	8012458 <USBD_Get_USB_Status>
 8012220:	4603      	mov	r3, r0
 8012222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012224:	7bbb      	ldrb	r3, [r7, #14]
}
 8012226:	4618      	mov	r0, r3
 8012228:	3710      	adds	r7, #16
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}

0801222e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801222e:	b580      	push	{r7, lr}
 8012230:	b084      	sub	sp, #16
 8012232:	af00      	add	r7, sp, #0
 8012234:	6078      	str	r0, [r7, #4]
 8012236:	460b      	mov	r3, r1
 8012238:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801223a:	2300      	movs	r3, #0
 801223c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801223e:	2300      	movs	r3, #0
 8012240:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012248:	78fa      	ldrb	r2, [r7, #3]
 801224a:	4611      	mov	r1, r2
 801224c:	4618      	mov	r0, r3
 801224e:	f7f5 f94e 	bl	80074ee <HAL_PCD_EP_Close>
 8012252:	4603      	mov	r3, r0
 8012254:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012256:	7bfb      	ldrb	r3, [r7, #15]
 8012258:	4618      	mov	r0, r3
 801225a:	f000 f8fd 	bl	8012458 <USBD_Get_USB_Status>
 801225e:	4603      	mov	r3, r0
 8012260:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012262:	7bbb      	ldrb	r3, [r7, #14]
}
 8012264:	4618      	mov	r0, r3
 8012266:	3710      	adds	r7, #16
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}

0801226c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b084      	sub	sp, #16
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	460b      	mov	r3, r1
 8012276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012278:	2300      	movs	r3, #0
 801227a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801227c:	2300      	movs	r3, #0
 801227e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012286:	78fa      	ldrb	r2, [r7, #3]
 8012288:	4611      	mov	r1, r2
 801228a:	4618      	mov	r0, r3
 801228c:	f7f5 fa26 	bl	80076dc <HAL_PCD_EP_SetStall>
 8012290:	4603      	mov	r3, r0
 8012292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012294:	7bfb      	ldrb	r3, [r7, #15]
 8012296:	4618      	mov	r0, r3
 8012298:	f000 f8de 	bl	8012458 <USBD_Get_USB_Status>
 801229c:	4603      	mov	r3, r0
 801229e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3710      	adds	r7, #16
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}

080122aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122aa:	b580      	push	{r7, lr}
 80122ac:	b084      	sub	sp, #16
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	6078      	str	r0, [r7, #4]
 80122b2:	460b      	mov	r3, r1
 80122b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122b6:	2300      	movs	r3, #0
 80122b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122ba:	2300      	movs	r3, #0
 80122bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80122c4:	78fa      	ldrb	r2, [r7, #3]
 80122c6:	4611      	mov	r1, r2
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7f5 fa6b 	bl	80077a4 <HAL_PCD_EP_ClrStall>
 80122ce:	4603      	mov	r3, r0
 80122d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122d2:	7bfb      	ldrb	r3, [r7, #15]
 80122d4:	4618      	mov	r0, r3
 80122d6:	f000 f8bf 	bl	8012458 <USBD_Get_USB_Status>
 80122da:	4603      	mov	r3, r0
 80122dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122de:	7bbb      	ldrb	r3, [r7, #14]
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3710      	adds	r7, #16
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122e8:	b480      	push	{r7}
 80122ea:	b085      	sub	sp, #20
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
 80122f0:	460b      	mov	r3, r1
 80122f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80122fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80122fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012300:	2b00      	cmp	r3, #0
 8012302:	da0b      	bge.n	801231c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012304:	78fb      	ldrb	r3, [r7, #3]
 8012306:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801230a:	68f9      	ldr	r1, [r7, #12]
 801230c:	4613      	mov	r3, r2
 801230e:	00db      	lsls	r3, r3, #3
 8012310:	1a9b      	subs	r3, r3, r2
 8012312:	009b      	lsls	r3, r3, #2
 8012314:	440b      	add	r3, r1
 8012316:	333e      	adds	r3, #62	; 0x3e
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	e00b      	b.n	8012334 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801231c:	78fb      	ldrb	r3, [r7, #3]
 801231e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012322:	68f9      	ldr	r1, [r7, #12]
 8012324:	4613      	mov	r3, r2
 8012326:	00db      	lsls	r3, r3, #3
 8012328:	1a9b      	subs	r3, r3, r2
 801232a:	009b      	lsls	r3, r3, #2
 801232c:	440b      	add	r3, r1
 801232e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012332:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012334:	4618      	mov	r0, r3
 8012336:	3714      	adds	r7, #20
 8012338:	46bd      	mov	sp, r7
 801233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233e:	4770      	bx	lr

08012340 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b084      	sub	sp, #16
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	460b      	mov	r3, r1
 801234a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801234c:	2300      	movs	r3, #0
 801234e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012350:	2300      	movs	r3, #0
 8012352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801235a:	78fa      	ldrb	r2, [r7, #3]
 801235c:	4611      	mov	r1, r2
 801235e:	4618      	mov	r0, r3
 8012360:	f7f5 f838 	bl	80073d4 <HAL_PCD_SetAddress>
 8012364:	4603      	mov	r3, r0
 8012366:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012368:	7bfb      	ldrb	r3, [r7, #15]
 801236a:	4618      	mov	r0, r3
 801236c:	f000 f874 	bl	8012458 <USBD_Get_USB_Status>
 8012370:	4603      	mov	r3, r0
 8012372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012374:	7bbb      	ldrb	r3, [r7, #14]
}
 8012376:	4618      	mov	r0, r3
 8012378:	3710      	adds	r7, #16
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}

0801237e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801237e:	b580      	push	{r7, lr}
 8012380:	b086      	sub	sp, #24
 8012382:	af00      	add	r7, sp, #0
 8012384:	60f8      	str	r0, [r7, #12]
 8012386:	607a      	str	r2, [r7, #4]
 8012388:	603b      	str	r3, [r7, #0]
 801238a:	460b      	mov	r3, r1
 801238c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801238e:	2300      	movs	r3, #0
 8012390:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012392:	2300      	movs	r3, #0
 8012394:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801239c:	7af9      	ldrb	r1, [r7, #11]
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	687a      	ldr	r2, [r7, #4]
 80123a2:	f7f5 f951 	bl	8007648 <HAL_PCD_EP_Transmit>
 80123a6:	4603      	mov	r3, r0
 80123a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123aa:	7dfb      	ldrb	r3, [r7, #23]
 80123ac:	4618      	mov	r0, r3
 80123ae:	f000 f853 	bl	8012458 <USBD_Get_USB_Status>
 80123b2:	4603      	mov	r3, r0
 80123b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80123b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	3718      	adds	r7, #24
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}

080123c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b086      	sub	sp, #24
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	60f8      	str	r0, [r7, #12]
 80123c8:	607a      	str	r2, [r7, #4]
 80123ca:	603b      	str	r3, [r7, #0]
 80123cc:	460b      	mov	r3, r1
 80123ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123d0:	2300      	movs	r3, #0
 80123d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123d4:	2300      	movs	r3, #0
 80123d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80123de:	7af9      	ldrb	r1, [r7, #11]
 80123e0:	683b      	ldr	r3, [r7, #0]
 80123e2:	687a      	ldr	r2, [r7, #4]
 80123e4:	f7f5 f8cd 	bl	8007582 <HAL_PCD_EP_Receive>
 80123e8:	4603      	mov	r3, r0
 80123ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123ec:	7dfb      	ldrb	r3, [r7, #23]
 80123ee:	4618      	mov	r0, r3
 80123f0:	f000 f832 	bl	8012458 <USBD_Get_USB_Status>
 80123f4:	4603      	mov	r3, r0
 80123f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80123f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3718      	adds	r7, #24
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}

08012402 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012402:	b580      	push	{r7, lr}
 8012404:	b082      	sub	sp, #8
 8012406:	af00      	add	r7, sp, #0
 8012408:	6078      	str	r0, [r7, #4]
 801240a:	460b      	mov	r3, r1
 801240c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012414:	78fa      	ldrb	r2, [r7, #3]
 8012416:	4611      	mov	r1, r2
 8012418:	4618      	mov	r0, r3
 801241a:	f7f5 f8fd 	bl	8007618 <HAL_PCD_EP_GetRxCount>
 801241e:	4603      	mov	r3, r0
}
 8012420:	4618      	mov	r0, r3
 8012422:	3708      	adds	r7, #8
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012428:	b480      	push	{r7}
 801242a:	b083      	sub	sp, #12
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012430:	4b03      	ldr	r3, [pc, #12]	; (8012440 <USBD_static_malloc+0x18>)
}
 8012432:	4618      	mov	r0, r3
 8012434:	370c      	adds	r7, #12
 8012436:	46bd      	mov	sp, r7
 8012438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243c:	4770      	bx	lr
 801243e:	bf00      	nop
 8012440:	2000505c 	.word	0x2000505c

08012444 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012444:	b480      	push	{r7}
 8012446:	b083      	sub	sp, #12
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]

}
 801244c:	bf00      	nop
 801244e:	370c      	adds	r7, #12
 8012450:	46bd      	mov	sp, r7
 8012452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012456:	4770      	bx	lr

08012458 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012458:	b480      	push	{r7}
 801245a:	b085      	sub	sp, #20
 801245c:	af00      	add	r7, sp, #0
 801245e:	4603      	mov	r3, r0
 8012460:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012462:	2300      	movs	r3, #0
 8012464:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012466:	79fb      	ldrb	r3, [r7, #7]
 8012468:	2b03      	cmp	r3, #3
 801246a:	d817      	bhi.n	801249c <USBD_Get_USB_Status+0x44>
 801246c:	a201      	add	r2, pc, #4	; (adr r2, 8012474 <USBD_Get_USB_Status+0x1c>)
 801246e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012472:	bf00      	nop
 8012474:	08012485 	.word	0x08012485
 8012478:	0801248b 	.word	0x0801248b
 801247c:	08012491 	.word	0x08012491
 8012480:	08012497 	.word	0x08012497
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012484:	2300      	movs	r3, #0
 8012486:	73fb      	strb	r3, [r7, #15]
    break;
 8012488:	e00b      	b.n	80124a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801248a:	2303      	movs	r3, #3
 801248c:	73fb      	strb	r3, [r7, #15]
    break;
 801248e:	e008      	b.n	80124a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012490:	2301      	movs	r3, #1
 8012492:	73fb      	strb	r3, [r7, #15]
    break;
 8012494:	e005      	b.n	80124a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012496:	2303      	movs	r3, #3
 8012498:	73fb      	strb	r3, [r7, #15]
    break;
 801249a:	e002      	b.n	80124a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801249c:	2303      	movs	r3, #3
 801249e:	73fb      	strb	r3, [r7, #15]
    break;
 80124a0:	bf00      	nop
  }
  return usb_status;
 80124a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80124a4:	4618      	mov	r0, r3
 80124a6:	3714      	adds	r7, #20
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr

080124b0 <__cxa_pure_virtual>:
 80124b0:	b508      	push	{r3, lr}
 80124b2:	f000 f80d 	bl	80124d0 <_ZSt9terminatev>

080124b6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80124b6:	b508      	push	{r3, lr}
 80124b8:	4780      	blx	r0
 80124ba:	f000 f80e 	bl	80124da <abort>
	...

080124c0 <_ZSt13get_terminatev>:
 80124c0:	4b02      	ldr	r3, [pc, #8]	; (80124cc <_ZSt13get_terminatev+0xc>)
 80124c2:	6818      	ldr	r0, [r3, #0]
 80124c4:	f3bf 8f5b 	dmb	ish
 80124c8:	4770      	bx	lr
 80124ca:	bf00      	nop
 80124cc:	200001a0 	.word	0x200001a0

080124d0 <_ZSt9terminatev>:
 80124d0:	b508      	push	{r3, lr}
 80124d2:	f7ff fff5 	bl	80124c0 <_ZSt13get_terminatev>
 80124d6:	f7ff ffee 	bl	80124b6 <_ZN10__cxxabiv111__terminateEPFvvE>

080124da <abort>:
 80124da:	b508      	push	{r3, lr}
 80124dc:	2006      	movs	r0, #6
 80124de:	f001 f933 	bl	8013748 <raise>
 80124e2:	2001      	movs	r0, #1
 80124e4:	f7f0 fd24 	bl	8002f30 <_exit>

080124e8 <__errno>:
 80124e8:	4b01      	ldr	r3, [pc, #4]	; (80124f0 <__errno+0x8>)
 80124ea:	6818      	ldr	r0, [r3, #0]
 80124ec:	4770      	bx	lr
 80124ee:	bf00      	nop
 80124f0:	200001a4 	.word	0x200001a4

080124f4 <std>:
 80124f4:	2300      	movs	r3, #0
 80124f6:	b510      	push	{r4, lr}
 80124f8:	4604      	mov	r4, r0
 80124fa:	e9c0 3300 	strd	r3, r3, [r0]
 80124fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012502:	6083      	str	r3, [r0, #8]
 8012504:	8181      	strh	r1, [r0, #12]
 8012506:	6643      	str	r3, [r0, #100]	; 0x64
 8012508:	81c2      	strh	r2, [r0, #14]
 801250a:	6183      	str	r3, [r0, #24]
 801250c:	4619      	mov	r1, r3
 801250e:	2208      	movs	r2, #8
 8012510:	305c      	adds	r0, #92	; 0x5c
 8012512:	f000 f945 	bl	80127a0 <memset>
 8012516:	4b05      	ldr	r3, [pc, #20]	; (801252c <std+0x38>)
 8012518:	6263      	str	r3, [r4, #36]	; 0x24
 801251a:	4b05      	ldr	r3, [pc, #20]	; (8012530 <std+0x3c>)
 801251c:	62a3      	str	r3, [r4, #40]	; 0x28
 801251e:	4b05      	ldr	r3, [pc, #20]	; (8012534 <std+0x40>)
 8012520:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012522:	4b05      	ldr	r3, [pc, #20]	; (8012538 <std+0x44>)
 8012524:	6224      	str	r4, [r4, #32]
 8012526:	6323      	str	r3, [r4, #48]	; 0x30
 8012528:	bd10      	pop	{r4, pc}
 801252a:	bf00      	nop
 801252c:	08013819 	.word	0x08013819
 8012530:	0801383f 	.word	0x0801383f
 8012534:	08013877 	.word	0x08013877
 8012538:	0801389b 	.word	0x0801389b

0801253c <_cleanup_r>:
 801253c:	4901      	ldr	r1, [pc, #4]	; (8012544 <_cleanup_r+0x8>)
 801253e:	f000 b8af 	b.w	80126a0 <_fwalk_reent>
 8012542:	bf00      	nop
 8012544:	080155a5 	.word	0x080155a5

08012548 <__sfmoreglue>:
 8012548:	b570      	push	{r4, r5, r6, lr}
 801254a:	1e4a      	subs	r2, r1, #1
 801254c:	2568      	movs	r5, #104	; 0x68
 801254e:	4355      	muls	r5, r2
 8012550:	460e      	mov	r6, r1
 8012552:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012556:	f000 f97b 	bl	8012850 <_malloc_r>
 801255a:	4604      	mov	r4, r0
 801255c:	b140      	cbz	r0, 8012570 <__sfmoreglue+0x28>
 801255e:	2100      	movs	r1, #0
 8012560:	e9c0 1600 	strd	r1, r6, [r0]
 8012564:	300c      	adds	r0, #12
 8012566:	60a0      	str	r0, [r4, #8]
 8012568:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801256c:	f000 f918 	bl	80127a0 <memset>
 8012570:	4620      	mov	r0, r4
 8012572:	bd70      	pop	{r4, r5, r6, pc}

08012574 <__sfp_lock_acquire>:
 8012574:	4801      	ldr	r0, [pc, #4]	; (801257c <__sfp_lock_acquire+0x8>)
 8012576:	f000 b8d8 	b.w	801272a <__retarget_lock_acquire_recursive>
 801257a:	bf00      	nop
 801257c:	200073a8 	.word	0x200073a8

08012580 <__sfp_lock_release>:
 8012580:	4801      	ldr	r0, [pc, #4]	; (8012588 <__sfp_lock_release+0x8>)
 8012582:	f000 b8d3 	b.w	801272c <__retarget_lock_release_recursive>
 8012586:	bf00      	nop
 8012588:	200073a8 	.word	0x200073a8

0801258c <__sinit_lock_acquire>:
 801258c:	4801      	ldr	r0, [pc, #4]	; (8012594 <__sinit_lock_acquire+0x8>)
 801258e:	f000 b8cc 	b.w	801272a <__retarget_lock_acquire_recursive>
 8012592:	bf00      	nop
 8012594:	200073a3 	.word	0x200073a3

08012598 <__sinit_lock_release>:
 8012598:	4801      	ldr	r0, [pc, #4]	; (80125a0 <__sinit_lock_release+0x8>)
 801259a:	f000 b8c7 	b.w	801272c <__retarget_lock_release_recursive>
 801259e:	bf00      	nop
 80125a0:	200073a3 	.word	0x200073a3

080125a4 <__sinit>:
 80125a4:	b510      	push	{r4, lr}
 80125a6:	4604      	mov	r4, r0
 80125a8:	f7ff fff0 	bl	801258c <__sinit_lock_acquire>
 80125ac:	69a3      	ldr	r3, [r4, #24]
 80125ae:	b11b      	cbz	r3, 80125b8 <__sinit+0x14>
 80125b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125b4:	f7ff bff0 	b.w	8012598 <__sinit_lock_release>
 80125b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80125bc:	6523      	str	r3, [r4, #80]	; 0x50
 80125be:	4b13      	ldr	r3, [pc, #76]	; (801260c <__sinit+0x68>)
 80125c0:	4a13      	ldr	r2, [pc, #76]	; (8012610 <__sinit+0x6c>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80125c6:	42a3      	cmp	r3, r4
 80125c8:	bf04      	itt	eq
 80125ca:	2301      	moveq	r3, #1
 80125cc:	61a3      	streq	r3, [r4, #24]
 80125ce:	4620      	mov	r0, r4
 80125d0:	f000 f820 	bl	8012614 <__sfp>
 80125d4:	6060      	str	r0, [r4, #4]
 80125d6:	4620      	mov	r0, r4
 80125d8:	f000 f81c 	bl	8012614 <__sfp>
 80125dc:	60a0      	str	r0, [r4, #8]
 80125de:	4620      	mov	r0, r4
 80125e0:	f000 f818 	bl	8012614 <__sfp>
 80125e4:	2200      	movs	r2, #0
 80125e6:	60e0      	str	r0, [r4, #12]
 80125e8:	2104      	movs	r1, #4
 80125ea:	6860      	ldr	r0, [r4, #4]
 80125ec:	f7ff ff82 	bl	80124f4 <std>
 80125f0:	68a0      	ldr	r0, [r4, #8]
 80125f2:	2201      	movs	r2, #1
 80125f4:	2109      	movs	r1, #9
 80125f6:	f7ff ff7d 	bl	80124f4 <std>
 80125fa:	68e0      	ldr	r0, [r4, #12]
 80125fc:	2202      	movs	r2, #2
 80125fe:	2112      	movs	r1, #18
 8012600:	f7ff ff78 	bl	80124f4 <std>
 8012604:	2301      	movs	r3, #1
 8012606:	61a3      	str	r3, [r4, #24]
 8012608:	e7d2      	b.n	80125b0 <__sinit+0xc>
 801260a:	bf00      	nop
 801260c:	08017d28 	.word	0x08017d28
 8012610:	0801253d 	.word	0x0801253d

08012614 <__sfp>:
 8012614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012616:	4607      	mov	r7, r0
 8012618:	f7ff ffac 	bl	8012574 <__sfp_lock_acquire>
 801261c:	4b1e      	ldr	r3, [pc, #120]	; (8012698 <__sfp+0x84>)
 801261e:	681e      	ldr	r6, [r3, #0]
 8012620:	69b3      	ldr	r3, [r6, #24]
 8012622:	b913      	cbnz	r3, 801262a <__sfp+0x16>
 8012624:	4630      	mov	r0, r6
 8012626:	f7ff ffbd 	bl	80125a4 <__sinit>
 801262a:	3648      	adds	r6, #72	; 0x48
 801262c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012630:	3b01      	subs	r3, #1
 8012632:	d503      	bpl.n	801263c <__sfp+0x28>
 8012634:	6833      	ldr	r3, [r6, #0]
 8012636:	b30b      	cbz	r3, 801267c <__sfp+0x68>
 8012638:	6836      	ldr	r6, [r6, #0]
 801263a:	e7f7      	b.n	801262c <__sfp+0x18>
 801263c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012640:	b9d5      	cbnz	r5, 8012678 <__sfp+0x64>
 8012642:	4b16      	ldr	r3, [pc, #88]	; (801269c <__sfp+0x88>)
 8012644:	60e3      	str	r3, [r4, #12]
 8012646:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801264a:	6665      	str	r5, [r4, #100]	; 0x64
 801264c:	f000 f86c 	bl	8012728 <__retarget_lock_init_recursive>
 8012650:	f7ff ff96 	bl	8012580 <__sfp_lock_release>
 8012654:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012658:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801265c:	6025      	str	r5, [r4, #0]
 801265e:	61a5      	str	r5, [r4, #24]
 8012660:	2208      	movs	r2, #8
 8012662:	4629      	mov	r1, r5
 8012664:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012668:	f000 f89a 	bl	80127a0 <memset>
 801266c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012670:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012674:	4620      	mov	r0, r4
 8012676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012678:	3468      	adds	r4, #104	; 0x68
 801267a:	e7d9      	b.n	8012630 <__sfp+0x1c>
 801267c:	2104      	movs	r1, #4
 801267e:	4638      	mov	r0, r7
 8012680:	f7ff ff62 	bl	8012548 <__sfmoreglue>
 8012684:	4604      	mov	r4, r0
 8012686:	6030      	str	r0, [r6, #0]
 8012688:	2800      	cmp	r0, #0
 801268a:	d1d5      	bne.n	8012638 <__sfp+0x24>
 801268c:	f7ff ff78 	bl	8012580 <__sfp_lock_release>
 8012690:	230c      	movs	r3, #12
 8012692:	603b      	str	r3, [r7, #0]
 8012694:	e7ee      	b.n	8012674 <__sfp+0x60>
 8012696:	bf00      	nop
 8012698:	08017d28 	.word	0x08017d28
 801269c:	ffff0001 	.word	0xffff0001

080126a0 <_fwalk_reent>:
 80126a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126a4:	4606      	mov	r6, r0
 80126a6:	4688      	mov	r8, r1
 80126a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80126ac:	2700      	movs	r7, #0
 80126ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80126b2:	f1b9 0901 	subs.w	r9, r9, #1
 80126b6:	d505      	bpl.n	80126c4 <_fwalk_reent+0x24>
 80126b8:	6824      	ldr	r4, [r4, #0]
 80126ba:	2c00      	cmp	r4, #0
 80126bc:	d1f7      	bne.n	80126ae <_fwalk_reent+0xe>
 80126be:	4638      	mov	r0, r7
 80126c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126c4:	89ab      	ldrh	r3, [r5, #12]
 80126c6:	2b01      	cmp	r3, #1
 80126c8:	d907      	bls.n	80126da <_fwalk_reent+0x3a>
 80126ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80126ce:	3301      	adds	r3, #1
 80126d0:	d003      	beq.n	80126da <_fwalk_reent+0x3a>
 80126d2:	4629      	mov	r1, r5
 80126d4:	4630      	mov	r0, r6
 80126d6:	47c0      	blx	r8
 80126d8:	4307      	orrs	r7, r0
 80126da:	3568      	adds	r5, #104	; 0x68
 80126dc:	e7e9      	b.n	80126b2 <_fwalk_reent+0x12>
	...

080126e0 <__libc_init_array>:
 80126e0:	b570      	push	{r4, r5, r6, lr}
 80126e2:	4d0d      	ldr	r5, [pc, #52]	; (8012718 <__libc_init_array+0x38>)
 80126e4:	4c0d      	ldr	r4, [pc, #52]	; (801271c <__libc_init_array+0x3c>)
 80126e6:	1b64      	subs	r4, r4, r5
 80126e8:	10a4      	asrs	r4, r4, #2
 80126ea:	2600      	movs	r6, #0
 80126ec:	42a6      	cmp	r6, r4
 80126ee:	d109      	bne.n	8012704 <__libc_init_array+0x24>
 80126f0:	4d0b      	ldr	r5, [pc, #44]	; (8012720 <__libc_init_array+0x40>)
 80126f2:	4c0c      	ldr	r4, [pc, #48]	; (8012724 <__libc_init_array+0x44>)
 80126f4:	f004 fff8 	bl	80176e8 <_init>
 80126f8:	1b64      	subs	r4, r4, r5
 80126fa:	10a4      	asrs	r4, r4, #2
 80126fc:	2600      	movs	r6, #0
 80126fe:	42a6      	cmp	r6, r4
 8012700:	d105      	bne.n	801270e <__libc_init_array+0x2e>
 8012702:	bd70      	pop	{r4, r5, r6, pc}
 8012704:	f855 3b04 	ldr.w	r3, [r5], #4
 8012708:	4798      	blx	r3
 801270a:	3601      	adds	r6, #1
 801270c:	e7ee      	b.n	80126ec <__libc_init_array+0xc>
 801270e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012712:	4798      	blx	r3
 8012714:	3601      	adds	r6, #1
 8012716:	e7f2      	b.n	80126fe <__libc_init_array+0x1e>
 8012718:	08018198 	.word	0x08018198
 801271c:	08018198 	.word	0x08018198
 8012720:	08018198 	.word	0x08018198
 8012724:	080181a0 	.word	0x080181a0

08012728 <__retarget_lock_init_recursive>:
 8012728:	4770      	bx	lr

0801272a <__retarget_lock_acquire_recursive>:
 801272a:	4770      	bx	lr

0801272c <__retarget_lock_release_recursive>:
 801272c:	4770      	bx	lr
	...

08012730 <malloc>:
 8012730:	4b02      	ldr	r3, [pc, #8]	; (801273c <malloc+0xc>)
 8012732:	4601      	mov	r1, r0
 8012734:	6818      	ldr	r0, [r3, #0]
 8012736:	f000 b88b 	b.w	8012850 <_malloc_r>
 801273a:	bf00      	nop
 801273c:	200001a4 	.word	0x200001a4

08012740 <free>:
 8012740:	4b02      	ldr	r3, [pc, #8]	; (801274c <free+0xc>)
 8012742:	4601      	mov	r1, r0
 8012744:	6818      	ldr	r0, [r3, #0]
 8012746:	f000 b833 	b.w	80127b0 <_free_r>
 801274a:	bf00      	nop
 801274c:	200001a4 	.word	0x200001a4

08012750 <memcpy>:
 8012750:	440a      	add	r2, r1
 8012752:	4291      	cmp	r1, r2
 8012754:	f100 33ff 	add.w	r3, r0, #4294967295
 8012758:	d100      	bne.n	801275c <memcpy+0xc>
 801275a:	4770      	bx	lr
 801275c:	b510      	push	{r4, lr}
 801275e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012766:	4291      	cmp	r1, r2
 8012768:	d1f9      	bne.n	801275e <memcpy+0xe>
 801276a:	bd10      	pop	{r4, pc}

0801276c <memmove>:
 801276c:	4288      	cmp	r0, r1
 801276e:	b510      	push	{r4, lr}
 8012770:	eb01 0402 	add.w	r4, r1, r2
 8012774:	d902      	bls.n	801277c <memmove+0x10>
 8012776:	4284      	cmp	r4, r0
 8012778:	4623      	mov	r3, r4
 801277a:	d807      	bhi.n	801278c <memmove+0x20>
 801277c:	1e43      	subs	r3, r0, #1
 801277e:	42a1      	cmp	r1, r4
 8012780:	d008      	beq.n	8012794 <memmove+0x28>
 8012782:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012786:	f803 2f01 	strb.w	r2, [r3, #1]!
 801278a:	e7f8      	b.n	801277e <memmove+0x12>
 801278c:	4402      	add	r2, r0
 801278e:	4601      	mov	r1, r0
 8012790:	428a      	cmp	r2, r1
 8012792:	d100      	bne.n	8012796 <memmove+0x2a>
 8012794:	bd10      	pop	{r4, pc}
 8012796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801279a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801279e:	e7f7      	b.n	8012790 <memmove+0x24>

080127a0 <memset>:
 80127a0:	4402      	add	r2, r0
 80127a2:	4603      	mov	r3, r0
 80127a4:	4293      	cmp	r3, r2
 80127a6:	d100      	bne.n	80127aa <memset+0xa>
 80127a8:	4770      	bx	lr
 80127aa:	f803 1b01 	strb.w	r1, [r3], #1
 80127ae:	e7f9      	b.n	80127a4 <memset+0x4>

080127b0 <_free_r>:
 80127b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80127b2:	2900      	cmp	r1, #0
 80127b4:	d048      	beq.n	8012848 <_free_r+0x98>
 80127b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127ba:	9001      	str	r0, [sp, #4]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	f1a1 0404 	sub.w	r4, r1, #4
 80127c2:	bfb8      	it	lt
 80127c4:	18e4      	addlt	r4, r4, r3
 80127c6:	f003 fad3 	bl	8015d70 <__malloc_lock>
 80127ca:	4a20      	ldr	r2, [pc, #128]	; (801284c <_free_r+0x9c>)
 80127cc:	9801      	ldr	r0, [sp, #4]
 80127ce:	6813      	ldr	r3, [r2, #0]
 80127d0:	4615      	mov	r5, r2
 80127d2:	b933      	cbnz	r3, 80127e2 <_free_r+0x32>
 80127d4:	6063      	str	r3, [r4, #4]
 80127d6:	6014      	str	r4, [r2, #0]
 80127d8:	b003      	add	sp, #12
 80127da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80127de:	f003 bacd 	b.w	8015d7c <__malloc_unlock>
 80127e2:	42a3      	cmp	r3, r4
 80127e4:	d90b      	bls.n	80127fe <_free_r+0x4e>
 80127e6:	6821      	ldr	r1, [r4, #0]
 80127e8:	1862      	adds	r2, r4, r1
 80127ea:	4293      	cmp	r3, r2
 80127ec:	bf04      	itt	eq
 80127ee:	681a      	ldreq	r2, [r3, #0]
 80127f0:	685b      	ldreq	r3, [r3, #4]
 80127f2:	6063      	str	r3, [r4, #4]
 80127f4:	bf04      	itt	eq
 80127f6:	1852      	addeq	r2, r2, r1
 80127f8:	6022      	streq	r2, [r4, #0]
 80127fa:	602c      	str	r4, [r5, #0]
 80127fc:	e7ec      	b.n	80127d8 <_free_r+0x28>
 80127fe:	461a      	mov	r2, r3
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	b10b      	cbz	r3, 8012808 <_free_r+0x58>
 8012804:	42a3      	cmp	r3, r4
 8012806:	d9fa      	bls.n	80127fe <_free_r+0x4e>
 8012808:	6811      	ldr	r1, [r2, #0]
 801280a:	1855      	adds	r5, r2, r1
 801280c:	42a5      	cmp	r5, r4
 801280e:	d10b      	bne.n	8012828 <_free_r+0x78>
 8012810:	6824      	ldr	r4, [r4, #0]
 8012812:	4421      	add	r1, r4
 8012814:	1854      	adds	r4, r2, r1
 8012816:	42a3      	cmp	r3, r4
 8012818:	6011      	str	r1, [r2, #0]
 801281a:	d1dd      	bne.n	80127d8 <_free_r+0x28>
 801281c:	681c      	ldr	r4, [r3, #0]
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	6053      	str	r3, [r2, #4]
 8012822:	4421      	add	r1, r4
 8012824:	6011      	str	r1, [r2, #0]
 8012826:	e7d7      	b.n	80127d8 <_free_r+0x28>
 8012828:	d902      	bls.n	8012830 <_free_r+0x80>
 801282a:	230c      	movs	r3, #12
 801282c:	6003      	str	r3, [r0, #0]
 801282e:	e7d3      	b.n	80127d8 <_free_r+0x28>
 8012830:	6825      	ldr	r5, [r4, #0]
 8012832:	1961      	adds	r1, r4, r5
 8012834:	428b      	cmp	r3, r1
 8012836:	bf04      	itt	eq
 8012838:	6819      	ldreq	r1, [r3, #0]
 801283a:	685b      	ldreq	r3, [r3, #4]
 801283c:	6063      	str	r3, [r4, #4]
 801283e:	bf04      	itt	eq
 8012840:	1949      	addeq	r1, r1, r5
 8012842:	6021      	streq	r1, [r4, #0]
 8012844:	6054      	str	r4, [r2, #4]
 8012846:	e7c7      	b.n	80127d8 <_free_r+0x28>
 8012848:	b003      	add	sp, #12
 801284a:	bd30      	pop	{r4, r5, pc}
 801284c:	2000527c 	.word	0x2000527c

08012850 <_malloc_r>:
 8012850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012852:	1ccd      	adds	r5, r1, #3
 8012854:	f025 0503 	bic.w	r5, r5, #3
 8012858:	3508      	adds	r5, #8
 801285a:	2d0c      	cmp	r5, #12
 801285c:	bf38      	it	cc
 801285e:	250c      	movcc	r5, #12
 8012860:	2d00      	cmp	r5, #0
 8012862:	4606      	mov	r6, r0
 8012864:	db01      	blt.n	801286a <_malloc_r+0x1a>
 8012866:	42a9      	cmp	r1, r5
 8012868:	d903      	bls.n	8012872 <_malloc_r+0x22>
 801286a:	230c      	movs	r3, #12
 801286c:	6033      	str	r3, [r6, #0]
 801286e:	2000      	movs	r0, #0
 8012870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012872:	f003 fa7d 	bl	8015d70 <__malloc_lock>
 8012876:	4921      	ldr	r1, [pc, #132]	; (80128fc <_malloc_r+0xac>)
 8012878:	680a      	ldr	r2, [r1, #0]
 801287a:	4614      	mov	r4, r2
 801287c:	b99c      	cbnz	r4, 80128a6 <_malloc_r+0x56>
 801287e:	4f20      	ldr	r7, [pc, #128]	; (8012900 <_malloc_r+0xb0>)
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	b923      	cbnz	r3, 801288e <_malloc_r+0x3e>
 8012884:	4621      	mov	r1, r4
 8012886:	4630      	mov	r0, r6
 8012888:	f000 ff20 	bl	80136cc <_sbrk_r>
 801288c:	6038      	str	r0, [r7, #0]
 801288e:	4629      	mov	r1, r5
 8012890:	4630      	mov	r0, r6
 8012892:	f000 ff1b 	bl	80136cc <_sbrk_r>
 8012896:	1c43      	adds	r3, r0, #1
 8012898:	d123      	bne.n	80128e2 <_malloc_r+0x92>
 801289a:	230c      	movs	r3, #12
 801289c:	6033      	str	r3, [r6, #0]
 801289e:	4630      	mov	r0, r6
 80128a0:	f003 fa6c 	bl	8015d7c <__malloc_unlock>
 80128a4:	e7e3      	b.n	801286e <_malloc_r+0x1e>
 80128a6:	6823      	ldr	r3, [r4, #0]
 80128a8:	1b5b      	subs	r3, r3, r5
 80128aa:	d417      	bmi.n	80128dc <_malloc_r+0x8c>
 80128ac:	2b0b      	cmp	r3, #11
 80128ae:	d903      	bls.n	80128b8 <_malloc_r+0x68>
 80128b0:	6023      	str	r3, [r4, #0]
 80128b2:	441c      	add	r4, r3
 80128b4:	6025      	str	r5, [r4, #0]
 80128b6:	e004      	b.n	80128c2 <_malloc_r+0x72>
 80128b8:	6863      	ldr	r3, [r4, #4]
 80128ba:	42a2      	cmp	r2, r4
 80128bc:	bf0c      	ite	eq
 80128be:	600b      	streq	r3, [r1, #0]
 80128c0:	6053      	strne	r3, [r2, #4]
 80128c2:	4630      	mov	r0, r6
 80128c4:	f003 fa5a 	bl	8015d7c <__malloc_unlock>
 80128c8:	f104 000b 	add.w	r0, r4, #11
 80128cc:	1d23      	adds	r3, r4, #4
 80128ce:	f020 0007 	bic.w	r0, r0, #7
 80128d2:	1ac2      	subs	r2, r0, r3
 80128d4:	d0cc      	beq.n	8012870 <_malloc_r+0x20>
 80128d6:	1a1b      	subs	r3, r3, r0
 80128d8:	50a3      	str	r3, [r4, r2]
 80128da:	e7c9      	b.n	8012870 <_malloc_r+0x20>
 80128dc:	4622      	mov	r2, r4
 80128de:	6864      	ldr	r4, [r4, #4]
 80128e0:	e7cc      	b.n	801287c <_malloc_r+0x2c>
 80128e2:	1cc4      	adds	r4, r0, #3
 80128e4:	f024 0403 	bic.w	r4, r4, #3
 80128e8:	42a0      	cmp	r0, r4
 80128ea:	d0e3      	beq.n	80128b4 <_malloc_r+0x64>
 80128ec:	1a21      	subs	r1, r4, r0
 80128ee:	4630      	mov	r0, r6
 80128f0:	f000 feec 	bl	80136cc <_sbrk_r>
 80128f4:	3001      	adds	r0, #1
 80128f6:	d1dd      	bne.n	80128b4 <_malloc_r+0x64>
 80128f8:	e7cf      	b.n	801289a <_malloc_r+0x4a>
 80128fa:	bf00      	nop
 80128fc:	2000527c 	.word	0x2000527c
 8012900:	20005280 	.word	0x20005280

08012904 <__cvt>:
 8012904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012908:	ec55 4b10 	vmov	r4, r5, d0
 801290c:	2d00      	cmp	r5, #0
 801290e:	460e      	mov	r6, r1
 8012910:	4619      	mov	r1, r3
 8012912:	462b      	mov	r3, r5
 8012914:	bfbb      	ittet	lt
 8012916:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801291a:	461d      	movlt	r5, r3
 801291c:	2300      	movge	r3, #0
 801291e:	232d      	movlt	r3, #45	; 0x2d
 8012920:	700b      	strb	r3, [r1, #0]
 8012922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012924:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012928:	4691      	mov	r9, r2
 801292a:	f023 0820 	bic.w	r8, r3, #32
 801292e:	bfbc      	itt	lt
 8012930:	4622      	movlt	r2, r4
 8012932:	4614      	movlt	r4, r2
 8012934:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012938:	d005      	beq.n	8012946 <__cvt+0x42>
 801293a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801293e:	d100      	bne.n	8012942 <__cvt+0x3e>
 8012940:	3601      	adds	r6, #1
 8012942:	2102      	movs	r1, #2
 8012944:	e000      	b.n	8012948 <__cvt+0x44>
 8012946:	2103      	movs	r1, #3
 8012948:	ab03      	add	r3, sp, #12
 801294a:	9301      	str	r3, [sp, #4]
 801294c:	ab02      	add	r3, sp, #8
 801294e:	9300      	str	r3, [sp, #0]
 8012950:	ec45 4b10 	vmov	d0, r4, r5
 8012954:	4653      	mov	r3, sl
 8012956:	4632      	mov	r2, r6
 8012958:	f001 ffb2 	bl	80148c0 <_dtoa_r>
 801295c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012960:	4607      	mov	r7, r0
 8012962:	d102      	bne.n	801296a <__cvt+0x66>
 8012964:	f019 0f01 	tst.w	r9, #1
 8012968:	d022      	beq.n	80129b0 <__cvt+0xac>
 801296a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801296e:	eb07 0906 	add.w	r9, r7, r6
 8012972:	d110      	bne.n	8012996 <__cvt+0x92>
 8012974:	783b      	ldrb	r3, [r7, #0]
 8012976:	2b30      	cmp	r3, #48	; 0x30
 8012978:	d10a      	bne.n	8012990 <__cvt+0x8c>
 801297a:	2200      	movs	r2, #0
 801297c:	2300      	movs	r3, #0
 801297e:	4620      	mov	r0, r4
 8012980:	4629      	mov	r1, r5
 8012982:	f7ee f8b1 	bl	8000ae8 <__aeabi_dcmpeq>
 8012986:	b918      	cbnz	r0, 8012990 <__cvt+0x8c>
 8012988:	f1c6 0601 	rsb	r6, r6, #1
 801298c:	f8ca 6000 	str.w	r6, [sl]
 8012990:	f8da 3000 	ldr.w	r3, [sl]
 8012994:	4499      	add	r9, r3
 8012996:	2200      	movs	r2, #0
 8012998:	2300      	movs	r3, #0
 801299a:	4620      	mov	r0, r4
 801299c:	4629      	mov	r1, r5
 801299e:	f7ee f8a3 	bl	8000ae8 <__aeabi_dcmpeq>
 80129a2:	b108      	cbz	r0, 80129a8 <__cvt+0xa4>
 80129a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80129a8:	2230      	movs	r2, #48	; 0x30
 80129aa:	9b03      	ldr	r3, [sp, #12]
 80129ac:	454b      	cmp	r3, r9
 80129ae:	d307      	bcc.n	80129c0 <__cvt+0xbc>
 80129b0:	9b03      	ldr	r3, [sp, #12]
 80129b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80129b4:	1bdb      	subs	r3, r3, r7
 80129b6:	4638      	mov	r0, r7
 80129b8:	6013      	str	r3, [r2, #0]
 80129ba:	b004      	add	sp, #16
 80129bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129c0:	1c59      	adds	r1, r3, #1
 80129c2:	9103      	str	r1, [sp, #12]
 80129c4:	701a      	strb	r2, [r3, #0]
 80129c6:	e7f0      	b.n	80129aa <__cvt+0xa6>

080129c8 <__exponent>:
 80129c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80129ca:	4603      	mov	r3, r0
 80129cc:	2900      	cmp	r1, #0
 80129ce:	bfb8      	it	lt
 80129d0:	4249      	neglt	r1, r1
 80129d2:	f803 2b02 	strb.w	r2, [r3], #2
 80129d6:	bfb4      	ite	lt
 80129d8:	222d      	movlt	r2, #45	; 0x2d
 80129da:	222b      	movge	r2, #43	; 0x2b
 80129dc:	2909      	cmp	r1, #9
 80129de:	7042      	strb	r2, [r0, #1]
 80129e0:	dd2a      	ble.n	8012a38 <__exponent+0x70>
 80129e2:	f10d 0407 	add.w	r4, sp, #7
 80129e6:	46a4      	mov	ip, r4
 80129e8:	270a      	movs	r7, #10
 80129ea:	46a6      	mov	lr, r4
 80129ec:	460a      	mov	r2, r1
 80129ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80129f2:	fb07 1516 	mls	r5, r7, r6, r1
 80129f6:	3530      	adds	r5, #48	; 0x30
 80129f8:	2a63      	cmp	r2, #99	; 0x63
 80129fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80129fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012a02:	4631      	mov	r1, r6
 8012a04:	dcf1      	bgt.n	80129ea <__exponent+0x22>
 8012a06:	3130      	adds	r1, #48	; 0x30
 8012a08:	f1ae 0502 	sub.w	r5, lr, #2
 8012a0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012a10:	1c44      	adds	r4, r0, #1
 8012a12:	4629      	mov	r1, r5
 8012a14:	4561      	cmp	r1, ip
 8012a16:	d30a      	bcc.n	8012a2e <__exponent+0x66>
 8012a18:	f10d 0209 	add.w	r2, sp, #9
 8012a1c:	eba2 020e 	sub.w	r2, r2, lr
 8012a20:	4565      	cmp	r5, ip
 8012a22:	bf88      	it	hi
 8012a24:	2200      	movhi	r2, #0
 8012a26:	4413      	add	r3, r2
 8012a28:	1a18      	subs	r0, r3, r0
 8012a2a:	b003      	add	sp, #12
 8012a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012a36:	e7ed      	b.n	8012a14 <__exponent+0x4c>
 8012a38:	2330      	movs	r3, #48	; 0x30
 8012a3a:	3130      	adds	r1, #48	; 0x30
 8012a3c:	7083      	strb	r3, [r0, #2]
 8012a3e:	70c1      	strb	r1, [r0, #3]
 8012a40:	1d03      	adds	r3, r0, #4
 8012a42:	e7f1      	b.n	8012a28 <__exponent+0x60>

08012a44 <_printf_float>:
 8012a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a48:	ed2d 8b02 	vpush	{d8}
 8012a4c:	b08d      	sub	sp, #52	; 0x34
 8012a4e:	460c      	mov	r4, r1
 8012a50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012a54:	4616      	mov	r6, r2
 8012a56:	461f      	mov	r7, r3
 8012a58:	4605      	mov	r5, r0
 8012a5a:	f003 f961 	bl	8015d20 <_localeconv_r>
 8012a5e:	f8d0 a000 	ldr.w	sl, [r0]
 8012a62:	4650      	mov	r0, sl
 8012a64:	f7ed fbc4 	bl	80001f0 <strlen>
 8012a68:	2300      	movs	r3, #0
 8012a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8012a6c:	6823      	ldr	r3, [r4, #0]
 8012a6e:	9305      	str	r3, [sp, #20]
 8012a70:	f8d8 3000 	ldr.w	r3, [r8]
 8012a74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012a78:	3307      	adds	r3, #7
 8012a7a:	f023 0307 	bic.w	r3, r3, #7
 8012a7e:	f103 0208 	add.w	r2, r3, #8
 8012a82:	f8c8 2000 	str.w	r2, [r8]
 8012a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012a8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012a92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012a96:	9307      	str	r3, [sp, #28]
 8012a98:	f8cd 8018 	str.w	r8, [sp, #24]
 8012a9c:	ee08 0a10 	vmov	s16, r0
 8012aa0:	4b9f      	ldr	r3, [pc, #636]	; (8012d20 <_printf_float+0x2dc>)
 8012aa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8012aaa:	f7ee f84f 	bl	8000b4c <__aeabi_dcmpun>
 8012aae:	bb88      	cbnz	r0, 8012b14 <_printf_float+0xd0>
 8012ab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012ab4:	4b9a      	ldr	r3, [pc, #616]	; (8012d20 <_printf_float+0x2dc>)
 8012ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8012aba:	f7ee f829 	bl	8000b10 <__aeabi_dcmple>
 8012abe:	bb48      	cbnz	r0, 8012b14 <_printf_float+0xd0>
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	4640      	mov	r0, r8
 8012ac6:	4649      	mov	r1, r9
 8012ac8:	f7ee f818 	bl	8000afc <__aeabi_dcmplt>
 8012acc:	b110      	cbz	r0, 8012ad4 <_printf_float+0x90>
 8012ace:	232d      	movs	r3, #45	; 0x2d
 8012ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ad4:	4b93      	ldr	r3, [pc, #588]	; (8012d24 <_printf_float+0x2e0>)
 8012ad6:	4894      	ldr	r0, [pc, #592]	; (8012d28 <_printf_float+0x2e4>)
 8012ad8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012adc:	bf94      	ite	ls
 8012ade:	4698      	movls	r8, r3
 8012ae0:	4680      	movhi	r8, r0
 8012ae2:	2303      	movs	r3, #3
 8012ae4:	6123      	str	r3, [r4, #16]
 8012ae6:	9b05      	ldr	r3, [sp, #20]
 8012ae8:	f023 0204 	bic.w	r2, r3, #4
 8012aec:	6022      	str	r2, [r4, #0]
 8012aee:	f04f 0900 	mov.w	r9, #0
 8012af2:	9700      	str	r7, [sp, #0]
 8012af4:	4633      	mov	r3, r6
 8012af6:	aa0b      	add	r2, sp, #44	; 0x2c
 8012af8:	4621      	mov	r1, r4
 8012afa:	4628      	mov	r0, r5
 8012afc:	f000 f9d8 	bl	8012eb0 <_printf_common>
 8012b00:	3001      	adds	r0, #1
 8012b02:	f040 8090 	bne.w	8012c26 <_printf_float+0x1e2>
 8012b06:	f04f 30ff 	mov.w	r0, #4294967295
 8012b0a:	b00d      	add	sp, #52	; 0x34
 8012b0c:	ecbd 8b02 	vpop	{d8}
 8012b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b14:	4642      	mov	r2, r8
 8012b16:	464b      	mov	r3, r9
 8012b18:	4640      	mov	r0, r8
 8012b1a:	4649      	mov	r1, r9
 8012b1c:	f7ee f816 	bl	8000b4c <__aeabi_dcmpun>
 8012b20:	b140      	cbz	r0, 8012b34 <_printf_float+0xf0>
 8012b22:	464b      	mov	r3, r9
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	bfbc      	itt	lt
 8012b28:	232d      	movlt	r3, #45	; 0x2d
 8012b2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012b2e:	487f      	ldr	r0, [pc, #508]	; (8012d2c <_printf_float+0x2e8>)
 8012b30:	4b7f      	ldr	r3, [pc, #508]	; (8012d30 <_printf_float+0x2ec>)
 8012b32:	e7d1      	b.n	8012ad8 <_printf_float+0x94>
 8012b34:	6863      	ldr	r3, [r4, #4]
 8012b36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012b3a:	9206      	str	r2, [sp, #24]
 8012b3c:	1c5a      	adds	r2, r3, #1
 8012b3e:	d13f      	bne.n	8012bc0 <_printf_float+0x17c>
 8012b40:	2306      	movs	r3, #6
 8012b42:	6063      	str	r3, [r4, #4]
 8012b44:	9b05      	ldr	r3, [sp, #20]
 8012b46:	6861      	ldr	r1, [r4, #4]
 8012b48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	9303      	str	r3, [sp, #12]
 8012b50:	ab0a      	add	r3, sp, #40	; 0x28
 8012b52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012b56:	ab09      	add	r3, sp, #36	; 0x24
 8012b58:	ec49 8b10 	vmov	d0, r8, r9
 8012b5c:	9300      	str	r3, [sp, #0]
 8012b5e:	6022      	str	r2, [r4, #0]
 8012b60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012b64:	4628      	mov	r0, r5
 8012b66:	f7ff fecd 	bl	8012904 <__cvt>
 8012b6a:	9b06      	ldr	r3, [sp, #24]
 8012b6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b6e:	2b47      	cmp	r3, #71	; 0x47
 8012b70:	4680      	mov	r8, r0
 8012b72:	d108      	bne.n	8012b86 <_printf_float+0x142>
 8012b74:	1cc8      	adds	r0, r1, #3
 8012b76:	db02      	blt.n	8012b7e <_printf_float+0x13a>
 8012b78:	6863      	ldr	r3, [r4, #4]
 8012b7a:	4299      	cmp	r1, r3
 8012b7c:	dd41      	ble.n	8012c02 <_printf_float+0x1be>
 8012b7e:	f1ab 0b02 	sub.w	fp, fp, #2
 8012b82:	fa5f fb8b 	uxtb.w	fp, fp
 8012b86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012b8a:	d820      	bhi.n	8012bce <_printf_float+0x18a>
 8012b8c:	3901      	subs	r1, #1
 8012b8e:	465a      	mov	r2, fp
 8012b90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012b94:	9109      	str	r1, [sp, #36]	; 0x24
 8012b96:	f7ff ff17 	bl	80129c8 <__exponent>
 8012b9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b9c:	1813      	adds	r3, r2, r0
 8012b9e:	2a01      	cmp	r2, #1
 8012ba0:	4681      	mov	r9, r0
 8012ba2:	6123      	str	r3, [r4, #16]
 8012ba4:	dc02      	bgt.n	8012bac <_printf_float+0x168>
 8012ba6:	6822      	ldr	r2, [r4, #0]
 8012ba8:	07d2      	lsls	r2, r2, #31
 8012baa:	d501      	bpl.n	8012bb0 <_printf_float+0x16c>
 8012bac:	3301      	adds	r3, #1
 8012bae:	6123      	str	r3, [r4, #16]
 8012bb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d09c      	beq.n	8012af2 <_printf_float+0xae>
 8012bb8:	232d      	movs	r3, #45	; 0x2d
 8012bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bbe:	e798      	b.n	8012af2 <_printf_float+0xae>
 8012bc0:	9a06      	ldr	r2, [sp, #24]
 8012bc2:	2a47      	cmp	r2, #71	; 0x47
 8012bc4:	d1be      	bne.n	8012b44 <_printf_float+0x100>
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d1bc      	bne.n	8012b44 <_printf_float+0x100>
 8012bca:	2301      	movs	r3, #1
 8012bcc:	e7b9      	b.n	8012b42 <_printf_float+0xfe>
 8012bce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012bd2:	d118      	bne.n	8012c06 <_printf_float+0x1c2>
 8012bd4:	2900      	cmp	r1, #0
 8012bd6:	6863      	ldr	r3, [r4, #4]
 8012bd8:	dd0b      	ble.n	8012bf2 <_printf_float+0x1ae>
 8012bda:	6121      	str	r1, [r4, #16]
 8012bdc:	b913      	cbnz	r3, 8012be4 <_printf_float+0x1a0>
 8012bde:	6822      	ldr	r2, [r4, #0]
 8012be0:	07d0      	lsls	r0, r2, #31
 8012be2:	d502      	bpl.n	8012bea <_printf_float+0x1a6>
 8012be4:	3301      	adds	r3, #1
 8012be6:	440b      	add	r3, r1
 8012be8:	6123      	str	r3, [r4, #16]
 8012bea:	65a1      	str	r1, [r4, #88]	; 0x58
 8012bec:	f04f 0900 	mov.w	r9, #0
 8012bf0:	e7de      	b.n	8012bb0 <_printf_float+0x16c>
 8012bf2:	b913      	cbnz	r3, 8012bfa <_printf_float+0x1b6>
 8012bf4:	6822      	ldr	r2, [r4, #0]
 8012bf6:	07d2      	lsls	r2, r2, #31
 8012bf8:	d501      	bpl.n	8012bfe <_printf_float+0x1ba>
 8012bfa:	3302      	adds	r3, #2
 8012bfc:	e7f4      	b.n	8012be8 <_printf_float+0x1a4>
 8012bfe:	2301      	movs	r3, #1
 8012c00:	e7f2      	b.n	8012be8 <_printf_float+0x1a4>
 8012c02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c08:	4299      	cmp	r1, r3
 8012c0a:	db05      	blt.n	8012c18 <_printf_float+0x1d4>
 8012c0c:	6823      	ldr	r3, [r4, #0]
 8012c0e:	6121      	str	r1, [r4, #16]
 8012c10:	07d8      	lsls	r0, r3, #31
 8012c12:	d5ea      	bpl.n	8012bea <_printf_float+0x1a6>
 8012c14:	1c4b      	adds	r3, r1, #1
 8012c16:	e7e7      	b.n	8012be8 <_printf_float+0x1a4>
 8012c18:	2900      	cmp	r1, #0
 8012c1a:	bfd4      	ite	le
 8012c1c:	f1c1 0202 	rsble	r2, r1, #2
 8012c20:	2201      	movgt	r2, #1
 8012c22:	4413      	add	r3, r2
 8012c24:	e7e0      	b.n	8012be8 <_printf_float+0x1a4>
 8012c26:	6823      	ldr	r3, [r4, #0]
 8012c28:	055a      	lsls	r2, r3, #21
 8012c2a:	d407      	bmi.n	8012c3c <_printf_float+0x1f8>
 8012c2c:	6923      	ldr	r3, [r4, #16]
 8012c2e:	4642      	mov	r2, r8
 8012c30:	4631      	mov	r1, r6
 8012c32:	4628      	mov	r0, r5
 8012c34:	47b8      	blx	r7
 8012c36:	3001      	adds	r0, #1
 8012c38:	d12c      	bne.n	8012c94 <_printf_float+0x250>
 8012c3a:	e764      	b.n	8012b06 <_printf_float+0xc2>
 8012c3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012c40:	f240 80e0 	bls.w	8012e04 <_printf_float+0x3c0>
 8012c44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012c48:	2200      	movs	r2, #0
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	f7ed ff4c 	bl	8000ae8 <__aeabi_dcmpeq>
 8012c50:	2800      	cmp	r0, #0
 8012c52:	d034      	beq.n	8012cbe <_printf_float+0x27a>
 8012c54:	4a37      	ldr	r2, [pc, #220]	; (8012d34 <_printf_float+0x2f0>)
 8012c56:	2301      	movs	r3, #1
 8012c58:	4631      	mov	r1, r6
 8012c5a:	4628      	mov	r0, r5
 8012c5c:	47b8      	blx	r7
 8012c5e:	3001      	adds	r0, #1
 8012c60:	f43f af51 	beq.w	8012b06 <_printf_float+0xc2>
 8012c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	db02      	blt.n	8012c72 <_printf_float+0x22e>
 8012c6c:	6823      	ldr	r3, [r4, #0]
 8012c6e:	07d8      	lsls	r0, r3, #31
 8012c70:	d510      	bpl.n	8012c94 <_printf_float+0x250>
 8012c72:	ee18 3a10 	vmov	r3, s16
 8012c76:	4652      	mov	r2, sl
 8012c78:	4631      	mov	r1, r6
 8012c7a:	4628      	mov	r0, r5
 8012c7c:	47b8      	blx	r7
 8012c7e:	3001      	adds	r0, #1
 8012c80:	f43f af41 	beq.w	8012b06 <_printf_float+0xc2>
 8012c84:	f04f 0800 	mov.w	r8, #0
 8012c88:	f104 091a 	add.w	r9, r4, #26
 8012c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c8e:	3b01      	subs	r3, #1
 8012c90:	4543      	cmp	r3, r8
 8012c92:	dc09      	bgt.n	8012ca8 <_printf_float+0x264>
 8012c94:	6823      	ldr	r3, [r4, #0]
 8012c96:	079b      	lsls	r3, r3, #30
 8012c98:	f100 8105 	bmi.w	8012ea6 <_printf_float+0x462>
 8012c9c:	68e0      	ldr	r0, [r4, #12]
 8012c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ca0:	4298      	cmp	r0, r3
 8012ca2:	bfb8      	it	lt
 8012ca4:	4618      	movlt	r0, r3
 8012ca6:	e730      	b.n	8012b0a <_printf_float+0xc6>
 8012ca8:	2301      	movs	r3, #1
 8012caa:	464a      	mov	r2, r9
 8012cac:	4631      	mov	r1, r6
 8012cae:	4628      	mov	r0, r5
 8012cb0:	47b8      	blx	r7
 8012cb2:	3001      	adds	r0, #1
 8012cb4:	f43f af27 	beq.w	8012b06 <_printf_float+0xc2>
 8012cb8:	f108 0801 	add.w	r8, r8, #1
 8012cbc:	e7e6      	b.n	8012c8c <_printf_float+0x248>
 8012cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	dc39      	bgt.n	8012d38 <_printf_float+0x2f4>
 8012cc4:	4a1b      	ldr	r2, [pc, #108]	; (8012d34 <_printf_float+0x2f0>)
 8012cc6:	2301      	movs	r3, #1
 8012cc8:	4631      	mov	r1, r6
 8012cca:	4628      	mov	r0, r5
 8012ccc:	47b8      	blx	r7
 8012cce:	3001      	adds	r0, #1
 8012cd0:	f43f af19 	beq.w	8012b06 <_printf_float+0xc2>
 8012cd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012cd8:	4313      	orrs	r3, r2
 8012cda:	d102      	bne.n	8012ce2 <_printf_float+0x29e>
 8012cdc:	6823      	ldr	r3, [r4, #0]
 8012cde:	07d9      	lsls	r1, r3, #31
 8012ce0:	d5d8      	bpl.n	8012c94 <_printf_float+0x250>
 8012ce2:	ee18 3a10 	vmov	r3, s16
 8012ce6:	4652      	mov	r2, sl
 8012ce8:	4631      	mov	r1, r6
 8012cea:	4628      	mov	r0, r5
 8012cec:	47b8      	blx	r7
 8012cee:	3001      	adds	r0, #1
 8012cf0:	f43f af09 	beq.w	8012b06 <_printf_float+0xc2>
 8012cf4:	f04f 0900 	mov.w	r9, #0
 8012cf8:	f104 0a1a 	add.w	sl, r4, #26
 8012cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cfe:	425b      	negs	r3, r3
 8012d00:	454b      	cmp	r3, r9
 8012d02:	dc01      	bgt.n	8012d08 <_printf_float+0x2c4>
 8012d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d06:	e792      	b.n	8012c2e <_printf_float+0x1ea>
 8012d08:	2301      	movs	r3, #1
 8012d0a:	4652      	mov	r2, sl
 8012d0c:	4631      	mov	r1, r6
 8012d0e:	4628      	mov	r0, r5
 8012d10:	47b8      	blx	r7
 8012d12:	3001      	adds	r0, #1
 8012d14:	f43f aef7 	beq.w	8012b06 <_printf_float+0xc2>
 8012d18:	f109 0901 	add.w	r9, r9, #1
 8012d1c:	e7ee      	b.n	8012cfc <_printf_float+0x2b8>
 8012d1e:	bf00      	nop
 8012d20:	7fefffff 	.word	0x7fefffff
 8012d24:	08017d2c 	.word	0x08017d2c
 8012d28:	08017d30 	.word	0x08017d30
 8012d2c:	08017d38 	.word	0x08017d38
 8012d30:	08017d34 	.word	0x08017d34
 8012d34:	08018179 	.word	0x08018179
 8012d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	bfa8      	it	ge
 8012d40:	461a      	movge	r2, r3
 8012d42:	2a00      	cmp	r2, #0
 8012d44:	4691      	mov	r9, r2
 8012d46:	dc37      	bgt.n	8012db8 <_printf_float+0x374>
 8012d48:	f04f 0b00 	mov.w	fp, #0
 8012d4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012d50:	f104 021a 	add.w	r2, r4, #26
 8012d54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012d56:	9305      	str	r3, [sp, #20]
 8012d58:	eba3 0309 	sub.w	r3, r3, r9
 8012d5c:	455b      	cmp	r3, fp
 8012d5e:	dc33      	bgt.n	8012dc8 <_printf_float+0x384>
 8012d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012d64:	429a      	cmp	r2, r3
 8012d66:	db3b      	blt.n	8012de0 <_printf_float+0x39c>
 8012d68:	6823      	ldr	r3, [r4, #0]
 8012d6a:	07da      	lsls	r2, r3, #31
 8012d6c:	d438      	bmi.n	8012de0 <_printf_float+0x39c>
 8012d6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d70:	9b05      	ldr	r3, [sp, #20]
 8012d72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d74:	1ad3      	subs	r3, r2, r3
 8012d76:	eba2 0901 	sub.w	r9, r2, r1
 8012d7a:	4599      	cmp	r9, r3
 8012d7c:	bfa8      	it	ge
 8012d7e:	4699      	movge	r9, r3
 8012d80:	f1b9 0f00 	cmp.w	r9, #0
 8012d84:	dc35      	bgt.n	8012df2 <_printf_float+0x3ae>
 8012d86:	f04f 0800 	mov.w	r8, #0
 8012d8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012d8e:	f104 0a1a 	add.w	sl, r4, #26
 8012d92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012d96:	1a9b      	subs	r3, r3, r2
 8012d98:	eba3 0309 	sub.w	r3, r3, r9
 8012d9c:	4543      	cmp	r3, r8
 8012d9e:	f77f af79 	ble.w	8012c94 <_printf_float+0x250>
 8012da2:	2301      	movs	r3, #1
 8012da4:	4652      	mov	r2, sl
 8012da6:	4631      	mov	r1, r6
 8012da8:	4628      	mov	r0, r5
 8012daa:	47b8      	blx	r7
 8012dac:	3001      	adds	r0, #1
 8012dae:	f43f aeaa 	beq.w	8012b06 <_printf_float+0xc2>
 8012db2:	f108 0801 	add.w	r8, r8, #1
 8012db6:	e7ec      	b.n	8012d92 <_printf_float+0x34e>
 8012db8:	4613      	mov	r3, r2
 8012dba:	4631      	mov	r1, r6
 8012dbc:	4642      	mov	r2, r8
 8012dbe:	4628      	mov	r0, r5
 8012dc0:	47b8      	blx	r7
 8012dc2:	3001      	adds	r0, #1
 8012dc4:	d1c0      	bne.n	8012d48 <_printf_float+0x304>
 8012dc6:	e69e      	b.n	8012b06 <_printf_float+0xc2>
 8012dc8:	2301      	movs	r3, #1
 8012dca:	4631      	mov	r1, r6
 8012dcc:	4628      	mov	r0, r5
 8012dce:	9205      	str	r2, [sp, #20]
 8012dd0:	47b8      	blx	r7
 8012dd2:	3001      	adds	r0, #1
 8012dd4:	f43f ae97 	beq.w	8012b06 <_printf_float+0xc2>
 8012dd8:	9a05      	ldr	r2, [sp, #20]
 8012dda:	f10b 0b01 	add.w	fp, fp, #1
 8012dde:	e7b9      	b.n	8012d54 <_printf_float+0x310>
 8012de0:	ee18 3a10 	vmov	r3, s16
 8012de4:	4652      	mov	r2, sl
 8012de6:	4631      	mov	r1, r6
 8012de8:	4628      	mov	r0, r5
 8012dea:	47b8      	blx	r7
 8012dec:	3001      	adds	r0, #1
 8012dee:	d1be      	bne.n	8012d6e <_printf_float+0x32a>
 8012df0:	e689      	b.n	8012b06 <_printf_float+0xc2>
 8012df2:	9a05      	ldr	r2, [sp, #20]
 8012df4:	464b      	mov	r3, r9
 8012df6:	4442      	add	r2, r8
 8012df8:	4631      	mov	r1, r6
 8012dfa:	4628      	mov	r0, r5
 8012dfc:	47b8      	blx	r7
 8012dfe:	3001      	adds	r0, #1
 8012e00:	d1c1      	bne.n	8012d86 <_printf_float+0x342>
 8012e02:	e680      	b.n	8012b06 <_printf_float+0xc2>
 8012e04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e06:	2a01      	cmp	r2, #1
 8012e08:	dc01      	bgt.n	8012e0e <_printf_float+0x3ca>
 8012e0a:	07db      	lsls	r3, r3, #31
 8012e0c:	d538      	bpl.n	8012e80 <_printf_float+0x43c>
 8012e0e:	2301      	movs	r3, #1
 8012e10:	4642      	mov	r2, r8
 8012e12:	4631      	mov	r1, r6
 8012e14:	4628      	mov	r0, r5
 8012e16:	47b8      	blx	r7
 8012e18:	3001      	adds	r0, #1
 8012e1a:	f43f ae74 	beq.w	8012b06 <_printf_float+0xc2>
 8012e1e:	ee18 3a10 	vmov	r3, s16
 8012e22:	4652      	mov	r2, sl
 8012e24:	4631      	mov	r1, r6
 8012e26:	4628      	mov	r0, r5
 8012e28:	47b8      	blx	r7
 8012e2a:	3001      	adds	r0, #1
 8012e2c:	f43f ae6b 	beq.w	8012b06 <_printf_float+0xc2>
 8012e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012e34:	2200      	movs	r2, #0
 8012e36:	2300      	movs	r3, #0
 8012e38:	f7ed fe56 	bl	8000ae8 <__aeabi_dcmpeq>
 8012e3c:	b9d8      	cbnz	r0, 8012e76 <_printf_float+0x432>
 8012e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e40:	f108 0201 	add.w	r2, r8, #1
 8012e44:	3b01      	subs	r3, #1
 8012e46:	4631      	mov	r1, r6
 8012e48:	4628      	mov	r0, r5
 8012e4a:	47b8      	blx	r7
 8012e4c:	3001      	adds	r0, #1
 8012e4e:	d10e      	bne.n	8012e6e <_printf_float+0x42a>
 8012e50:	e659      	b.n	8012b06 <_printf_float+0xc2>
 8012e52:	2301      	movs	r3, #1
 8012e54:	4652      	mov	r2, sl
 8012e56:	4631      	mov	r1, r6
 8012e58:	4628      	mov	r0, r5
 8012e5a:	47b8      	blx	r7
 8012e5c:	3001      	adds	r0, #1
 8012e5e:	f43f ae52 	beq.w	8012b06 <_printf_float+0xc2>
 8012e62:	f108 0801 	add.w	r8, r8, #1
 8012e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e68:	3b01      	subs	r3, #1
 8012e6a:	4543      	cmp	r3, r8
 8012e6c:	dcf1      	bgt.n	8012e52 <_printf_float+0x40e>
 8012e6e:	464b      	mov	r3, r9
 8012e70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012e74:	e6dc      	b.n	8012c30 <_printf_float+0x1ec>
 8012e76:	f04f 0800 	mov.w	r8, #0
 8012e7a:	f104 0a1a 	add.w	sl, r4, #26
 8012e7e:	e7f2      	b.n	8012e66 <_printf_float+0x422>
 8012e80:	2301      	movs	r3, #1
 8012e82:	4642      	mov	r2, r8
 8012e84:	e7df      	b.n	8012e46 <_printf_float+0x402>
 8012e86:	2301      	movs	r3, #1
 8012e88:	464a      	mov	r2, r9
 8012e8a:	4631      	mov	r1, r6
 8012e8c:	4628      	mov	r0, r5
 8012e8e:	47b8      	blx	r7
 8012e90:	3001      	adds	r0, #1
 8012e92:	f43f ae38 	beq.w	8012b06 <_printf_float+0xc2>
 8012e96:	f108 0801 	add.w	r8, r8, #1
 8012e9a:	68e3      	ldr	r3, [r4, #12]
 8012e9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012e9e:	1a5b      	subs	r3, r3, r1
 8012ea0:	4543      	cmp	r3, r8
 8012ea2:	dcf0      	bgt.n	8012e86 <_printf_float+0x442>
 8012ea4:	e6fa      	b.n	8012c9c <_printf_float+0x258>
 8012ea6:	f04f 0800 	mov.w	r8, #0
 8012eaa:	f104 0919 	add.w	r9, r4, #25
 8012eae:	e7f4      	b.n	8012e9a <_printf_float+0x456>

08012eb0 <_printf_common>:
 8012eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012eb4:	4616      	mov	r6, r2
 8012eb6:	4699      	mov	r9, r3
 8012eb8:	688a      	ldr	r2, [r1, #8]
 8012eba:	690b      	ldr	r3, [r1, #16]
 8012ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ec0:	4293      	cmp	r3, r2
 8012ec2:	bfb8      	it	lt
 8012ec4:	4613      	movlt	r3, r2
 8012ec6:	6033      	str	r3, [r6, #0]
 8012ec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012ecc:	4607      	mov	r7, r0
 8012ece:	460c      	mov	r4, r1
 8012ed0:	b10a      	cbz	r2, 8012ed6 <_printf_common+0x26>
 8012ed2:	3301      	adds	r3, #1
 8012ed4:	6033      	str	r3, [r6, #0]
 8012ed6:	6823      	ldr	r3, [r4, #0]
 8012ed8:	0699      	lsls	r1, r3, #26
 8012eda:	bf42      	ittt	mi
 8012edc:	6833      	ldrmi	r3, [r6, #0]
 8012ede:	3302      	addmi	r3, #2
 8012ee0:	6033      	strmi	r3, [r6, #0]
 8012ee2:	6825      	ldr	r5, [r4, #0]
 8012ee4:	f015 0506 	ands.w	r5, r5, #6
 8012ee8:	d106      	bne.n	8012ef8 <_printf_common+0x48>
 8012eea:	f104 0a19 	add.w	sl, r4, #25
 8012eee:	68e3      	ldr	r3, [r4, #12]
 8012ef0:	6832      	ldr	r2, [r6, #0]
 8012ef2:	1a9b      	subs	r3, r3, r2
 8012ef4:	42ab      	cmp	r3, r5
 8012ef6:	dc26      	bgt.n	8012f46 <_printf_common+0x96>
 8012ef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012efc:	1e13      	subs	r3, r2, #0
 8012efe:	6822      	ldr	r2, [r4, #0]
 8012f00:	bf18      	it	ne
 8012f02:	2301      	movne	r3, #1
 8012f04:	0692      	lsls	r2, r2, #26
 8012f06:	d42b      	bmi.n	8012f60 <_printf_common+0xb0>
 8012f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012f0c:	4649      	mov	r1, r9
 8012f0e:	4638      	mov	r0, r7
 8012f10:	47c0      	blx	r8
 8012f12:	3001      	adds	r0, #1
 8012f14:	d01e      	beq.n	8012f54 <_printf_common+0xa4>
 8012f16:	6823      	ldr	r3, [r4, #0]
 8012f18:	68e5      	ldr	r5, [r4, #12]
 8012f1a:	6832      	ldr	r2, [r6, #0]
 8012f1c:	f003 0306 	and.w	r3, r3, #6
 8012f20:	2b04      	cmp	r3, #4
 8012f22:	bf08      	it	eq
 8012f24:	1aad      	subeq	r5, r5, r2
 8012f26:	68a3      	ldr	r3, [r4, #8]
 8012f28:	6922      	ldr	r2, [r4, #16]
 8012f2a:	bf0c      	ite	eq
 8012f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012f30:	2500      	movne	r5, #0
 8012f32:	4293      	cmp	r3, r2
 8012f34:	bfc4      	itt	gt
 8012f36:	1a9b      	subgt	r3, r3, r2
 8012f38:	18ed      	addgt	r5, r5, r3
 8012f3a:	2600      	movs	r6, #0
 8012f3c:	341a      	adds	r4, #26
 8012f3e:	42b5      	cmp	r5, r6
 8012f40:	d11a      	bne.n	8012f78 <_printf_common+0xc8>
 8012f42:	2000      	movs	r0, #0
 8012f44:	e008      	b.n	8012f58 <_printf_common+0xa8>
 8012f46:	2301      	movs	r3, #1
 8012f48:	4652      	mov	r2, sl
 8012f4a:	4649      	mov	r1, r9
 8012f4c:	4638      	mov	r0, r7
 8012f4e:	47c0      	blx	r8
 8012f50:	3001      	adds	r0, #1
 8012f52:	d103      	bne.n	8012f5c <_printf_common+0xac>
 8012f54:	f04f 30ff 	mov.w	r0, #4294967295
 8012f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f5c:	3501      	adds	r5, #1
 8012f5e:	e7c6      	b.n	8012eee <_printf_common+0x3e>
 8012f60:	18e1      	adds	r1, r4, r3
 8012f62:	1c5a      	adds	r2, r3, #1
 8012f64:	2030      	movs	r0, #48	; 0x30
 8012f66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012f6a:	4422      	add	r2, r4
 8012f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012f70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012f74:	3302      	adds	r3, #2
 8012f76:	e7c7      	b.n	8012f08 <_printf_common+0x58>
 8012f78:	2301      	movs	r3, #1
 8012f7a:	4622      	mov	r2, r4
 8012f7c:	4649      	mov	r1, r9
 8012f7e:	4638      	mov	r0, r7
 8012f80:	47c0      	blx	r8
 8012f82:	3001      	adds	r0, #1
 8012f84:	d0e6      	beq.n	8012f54 <_printf_common+0xa4>
 8012f86:	3601      	adds	r6, #1
 8012f88:	e7d9      	b.n	8012f3e <_printf_common+0x8e>
	...

08012f8c <_printf_i>:
 8012f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f90:	460c      	mov	r4, r1
 8012f92:	4691      	mov	r9, r2
 8012f94:	7e27      	ldrb	r7, [r4, #24]
 8012f96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012f98:	2f78      	cmp	r7, #120	; 0x78
 8012f9a:	4680      	mov	r8, r0
 8012f9c:	469a      	mov	sl, r3
 8012f9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012fa2:	d807      	bhi.n	8012fb4 <_printf_i+0x28>
 8012fa4:	2f62      	cmp	r7, #98	; 0x62
 8012fa6:	d80a      	bhi.n	8012fbe <_printf_i+0x32>
 8012fa8:	2f00      	cmp	r7, #0
 8012faa:	f000 80d8 	beq.w	801315e <_printf_i+0x1d2>
 8012fae:	2f58      	cmp	r7, #88	; 0x58
 8012fb0:	f000 80a3 	beq.w	80130fa <_printf_i+0x16e>
 8012fb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012fbc:	e03a      	b.n	8013034 <_printf_i+0xa8>
 8012fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012fc2:	2b15      	cmp	r3, #21
 8012fc4:	d8f6      	bhi.n	8012fb4 <_printf_i+0x28>
 8012fc6:	a001      	add	r0, pc, #4	; (adr r0, 8012fcc <_printf_i+0x40>)
 8012fc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012fcc:	08013025 	.word	0x08013025
 8012fd0:	08013039 	.word	0x08013039
 8012fd4:	08012fb5 	.word	0x08012fb5
 8012fd8:	08012fb5 	.word	0x08012fb5
 8012fdc:	08012fb5 	.word	0x08012fb5
 8012fe0:	08012fb5 	.word	0x08012fb5
 8012fe4:	08013039 	.word	0x08013039
 8012fe8:	08012fb5 	.word	0x08012fb5
 8012fec:	08012fb5 	.word	0x08012fb5
 8012ff0:	08012fb5 	.word	0x08012fb5
 8012ff4:	08012fb5 	.word	0x08012fb5
 8012ff8:	08013145 	.word	0x08013145
 8012ffc:	08013069 	.word	0x08013069
 8013000:	08013127 	.word	0x08013127
 8013004:	08012fb5 	.word	0x08012fb5
 8013008:	08012fb5 	.word	0x08012fb5
 801300c:	08013167 	.word	0x08013167
 8013010:	08012fb5 	.word	0x08012fb5
 8013014:	08013069 	.word	0x08013069
 8013018:	08012fb5 	.word	0x08012fb5
 801301c:	08012fb5 	.word	0x08012fb5
 8013020:	0801312f 	.word	0x0801312f
 8013024:	680b      	ldr	r3, [r1, #0]
 8013026:	1d1a      	adds	r2, r3, #4
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	600a      	str	r2, [r1, #0]
 801302c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013034:	2301      	movs	r3, #1
 8013036:	e0a3      	b.n	8013180 <_printf_i+0x1f4>
 8013038:	6825      	ldr	r5, [r4, #0]
 801303a:	6808      	ldr	r0, [r1, #0]
 801303c:	062e      	lsls	r6, r5, #24
 801303e:	f100 0304 	add.w	r3, r0, #4
 8013042:	d50a      	bpl.n	801305a <_printf_i+0xce>
 8013044:	6805      	ldr	r5, [r0, #0]
 8013046:	600b      	str	r3, [r1, #0]
 8013048:	2d00      	cmp	r5, #0
 801304a:	da03      	bge.n	8013054 <_printf_i+0xc8>
 801304c:	232d      	movs	r3, #45	; 0x2d
 801304e:	426d      	negs	r5, r5
 8013050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013054:	485e      	ldr	r0, [pc, #376]	; (80131d0 <_printf_i+0x244>)
 8013056:	230a      	movs	r3, #10
 8013058:	e019      	b.n	801308e <_printf_i+0x102>
 801305a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801305e:	6805      	ldr	r5, [r0, #0]
 8013060:	600b      	str	r3, [r1, #0]
 8013062:	bf18      	it	ne
 8013064:	b22d      	sxthne	r5, r5
 8013066:	e7ef      	b.n	8013048 <_printf_i+0xbc>
 8013068:	680b      	ldr	r3, [r1, #0]
 801306a:	6825      	ldr	r5, [r4, #0]
 801306c:	1d18      	adds	r0, r3, #4
 801306e:	6008      	str	r0, [r1, #0]
 8013070:	0628      	lsls	r0, r5, #24
 8013072:	d501      	bpl.n	8013078 <_printf_i+0xec>
 8013074:	681d      	ldr	r5, [r3, #0]
 8013076:	e002      	b.n	801307e <_printf_i+0xf2>
 8013078:	0669      	lsls	r1, r5, #25
 801307a:	d5fb      	bpl.n	8013074 <_printf_i+0xe8>
 801307c:	881d      	ldrh	r5, [r3, #0]
 801307e:	4854      	ldr	r0, [pc, #336]	; (80131d0 <_printf_i+0x244>)
 8013080:	2f6f      	cmp	r7, #111	; 0x6f
 8013082:	bf0c      	ite	eq
 8013084:	2308      	moveq	r3, #8
 8013086:	230a      	movne	r3, #10
 8013088:	2100      	movs	r1, #0
 801308a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801308e:	6866      	ldr	r6, [r4, #4]
 8013090:	60a6      	str	r6, [r4, #8]
 8013092:	2e00      	cmp	r6, #0
 8013094:	bfa2      	ittt	ge
 8013096:	6821      	ldrge	r1, [r4, #0]
 8013098:	f021 0104 	bicge.w	r1, r1, #4
 801309c:	6021      	strge	r1, [r4, #0]
 801309e:	b90d      	cbnz	r5, 80130a4 <_printf_i+0x118>
 80130a0:	2e00      	cmp	r6, #0
 80130a2:	d04d      	beq.n	8013140 <_printf_i+0x1b4>
 80130a4:	4616      	mov	r6, r2
 80130a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80130aa:	fb03 5711 	mls	r7, r3, r1, r5
 80130ae:	5dc7      	ldrb	r7, [r0, r7]
 80130b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80130b4:	462f      	mov	r7, r5
 80130b6:	42bb      	cmp	r3, r7
 80130b8:	460d      	mov	r5, r1
 80130ba:	d9f4      	bls.n	80130a6 <_printf_i+0x11a>
 80130bc:	2b08      	cmp	r3, #8
 80130be:	d10b      	bne.n	80130d8 <_printf_i+0x14c>
 80130c0:	6823      	ldr	r3, [r4, #0]
 80130c2:	07df      	lsls	r7, r3, #31
 80130c4:	d508      	bpl.n	80130d8 <_printf_i+0x14c>
 80130c6:	6923      	ldr	r3, [r4, #16]
 80130c8:	6861      	ldr	r1, [r4, #4]
 80130ca:	4299      	cmp	r1, r3
 80130cc:	bfde      	ittt	le
 80130ce:	2330      	movle	r3, #48	; 0x30
 80130d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80130d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80130d8:	1b92      	subs	r2, r2, r6
 80130da:	6122      	str	r2, [r4, #16]
 80130dc:	f8cd a000 	str.w	sl, [sp]
 80130e0:	464b      	mov	r3, r9
 80130e2:	aa03      	add	r2, sp, #12
 80130e4:	4621      	mov	r1, r4
 80130e6:	4640      	mov	r0, r8
 80130e8:	f7ff fee2 	bl	8012eb0 <_printf_common>
 80130ec:	3001      	adds	r0, #1
 80130ee:	d14c      	bne.n	801318a <_printf_i+0x1fe>
 80130f0:	f04f 30ff 	mov.w	r0, #4294967295
 80130f4:	b004      	add	sp, #16
 80130f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130fa:	4835      	ldr	r0, [pc, #212]	; (80131d0 <_printf_i+0x244>)
 80130fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013100:	6823      	ldr	r3, [r4, #0]
 8013102:	680e      	ldr	r6, [r1, #0]
 8013104:	061f      	lsls	r7, r3, #24
 8013106:	f856 5b04 	ldr.w	r5, [r6], #4
 801310a:	600e      	str	r6, [r1, #0]
 801310c:	d514      	bpl.n	8013138 <_printf_i+0x1ac>
 801310e:	07d9      	lsls	r1, r3, #31
 8013110:	bf44      	itt	mi
 8013112:	f043 0320 	orrmi.w	r3, r3, #32
 8013116:	6023      	strmi	r3, [r4, #0]
 8013118:	b91d      	cbnz	r5, 8013122 <_printf_i+0x196>
 801311a:	6823      	ldr	r3, [r4, #0]
 801311c:	f023 0320 	bic.w	r3, r3, #32
 8013120:	6023      	str	r3, [r4, #0]
 8013122:	2310      	movs	r3, #16
 8013124:	e7b0      	b.n	8013088 <_printf_i+0xfc>
 8013126:	6823      	ldr	r3, [r4, #0]
 8013128:	f043 0320 	orr.w	r3, r3, #32
 801312c:	6023      	str	r3, [r4, #0]
 801312e:	2378      	movs	r3, #120	; 0x78
 8013130:	4828      	ldr	r0, [pc, #160]	; (80131d4 <_printf_i+0x248>)
 8013132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013136:	e7e3      	b.n	8013100 <_printf_i+0x174>
 8013138:	065e      	lsls	r6, r3, #25
 801313a:	bf48      	it	mi
 801313c:	b2ad      	uxthmi	r5, r5
 801313e:	e7e6      	b.n	801310e <_printf_i+0x182>
 8013140:	4616      	mov	r6, r2
 8013142:	e7bb      	b.n	80130bc <_printf_i+0x130>
 8013144:	680b      	ldr	r3, [r1, #0]
 8013146:	6826      	ldr	r6, [r4, #0]
 8013148:	6960      	ldr	r0, [r4, #20]
 801314a:	1d1d      	adds	r5, r3, #4
 801314c:	600d      	str	r5, [r1, #0]
 801314e:	0635      	lsls	r5, r6, #24
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	d501      	bpl.n	8013158 <_printf_i+0x1cc>
 8013154:	6018      	str	r0, [r3, #0]
 8013156:	e002      	b.n	801315e <_printf_i+0x1d2>
 8013158:	0671      	lsls	r1, r6, #25
 801315a:	d5fb      	bpl.n	8013154 <_printf_i+0x1c8>
 801315c:	8018      	strh	r0, [r3, #0]
 801315e:	2300      	movs	r3, #0
 8013160:	6123      	str	r3, [r4, #16]
 8013162:	4616      	mov	r6, r2
 8013164:	e7ba      	b.n	80130dc <_printf_i+0x150>
 8013166:	680b      	ldr	r3, [r1, #0]
 8013168:	1d1a      	adds	r2, r3, #4
 801316a:	600a      	str	r2, [r1, #0]
 801316c:	681e      	ldr	r6, [r3, #0]
 801316e:	6862      	ldr	r2, [r4, #4]
 8013170:	2100      	movs	r1, #0
 8013172:	4630      	mov	r0, r6
 8013174:	f7ed f844 	bl	8000200 <memchr>
 8013178:	b108      	cbz	r0, 801317e <_printf_i+0x1f2>
 801317a:	1b80      	subs	r0, r0, r6
 801317c:	6060      	str	r0, [r4, #4]
 801317e:	6863      	ldr	r3, [r4, #4]
 8013180:	6123      	str	r3, [r4, #16]
 8013182:	2300      	movs	r3, #0
 8013184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013188:	e7a8      	b.n	80130dc <_printf_i+0x150>
 801318a:	6923      	ldr	r3, [r4, #16]
 801318c:	4632      	mov	r2, r6
 801318e:	4649      	mov	r1, r9
 8013190:	4640      	mov	r0, r8
 8013192:	47d0      	blx	sl
 8013194:	3001      	adds	r0, #1
 8013196:	d0ab      	beq.n	80130f0 <_printf_i+0x164>
 8013198:	6823      	ldr	r3, [r4, #0]
 801319a:	079b      	lsls	r3, r3, #30
 801319c:	d413      	bmi.n	80131c6 <_printf_i+0x23a>
 801319e:	68e0      	ldr	r0, [r4, #12]
 80131a0:	9b03      	ldr	r3, [sp, #12]
 80131a2:	4298      	cmp	r0, r3
 80131a4:	bfb8      	it	lt
 80131a6:	4618      	movlt	r0, r3
 80131a8:	e7a4      	b.n	80130f4 <_printf_i+0x168>
 80131aa:	2301      	movs	r3, #1
 80131ac:	4632      	mov	r2, r6
 80131ae:	4649      	mov	r1, r9
 80131b0:	4640      	mov	r0, r8
 80131b2:	47d0      	blx	sl
 80131b4:	3001      	adds	r0, #1
 80131b6:	d09b      	beq.n	80130f0 <_printf_i+0x164>
 80131b8:	3501      	adds	r5, #1
 80131ba:	68e3      	ldr	r3, [r4, #12]
 80131bc:	9903      	ldr	r1, [sp, #12]
 80131be:	1a5b      	subs	r3, r3, r1
 80131c0:	42ab      	cmp	r3, r5
 80131c2:	dcf2      	bgt.n	80131aa <_printf_i+0x21e>
 80131c4:	e7eb      	b.n	801319e <_printf_i+0x212>
 80131c6:	2500      	movs	r5, #0
 80131c8:	f104 0619 	add.w	r6, r4, #25
 80131cc:	e7f5      	b.n	80131ba <_printf_i+0x22e>
 80131ce:	bf00      	nop
 80131d0:	08017d3c 	.word	0x08017d3c
 80131d4:	08017d4d 	.word	0x08017d4d

080131d8 <_scanf_float>:
 80131d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131dc:	b087      	sub	sp, #28
 80131de:	4617      	mov	r7, r2
 80131e0:	9303      	str	r3, [sp, #12]
 80131e2:	688b      	ldr	r3, [r1, #8]
 80131e4:	1e5a      	subs	r2, r3, #1
 80131e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80131ea:	bf83      	ittte	hi
 80131ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80131f0:	195b      	addhi	r3, r3, r5
 80131f2:	9302      	strhi	r3, [sp, #8]
 80131f4:	2300      	movls	r3, #0
 80131f6:	bf86      	itte	hi
 80131f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80131fc:	608b      	strhi	r3, [r1, #8]
 80131fe:	9302      	strls	r3, [sp, #8]
 8013200:	680b      	ldr	r3, [r1, #0]
 8013202:	468b      	mov	fp, r1
 8013204:	2500      	movs	r5, #0
 8013206:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801320a:	f84b 3b1c 	str.w	r3, [fp], #28
 801320e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013212:	4680      	mov	r8, r0
 8013214:	460c      	mov	r4, r1
 8013216:	465e      	mov	r6, fp
 8013218:	46aa      	mov	sl, r5
 801321a:	46a9      	mov	r9, r5
 801321c:	9501      	str	r5, [sp, #4]
 801321e:	68a2      	ldr	r2, [r4, #8]
 8013220:	b152      	cbz	r2, 8013238 <_scanf_float+0x60>
 8013222:	683b      	ldr	r3, [r7, #0]
 8013224:	781b      	ldrb	r3, [r3, #0]
 8013226:	2b4e      	cmp	r3, #78	; 0x4e
 8013228:	d864      	bhi.n	80132f4 <_scanf_float+0x11c>
 801322a:	2b40      	cmp	r3, #64	; 0x40
 801322c:	d83c      	bhi.n	80132a8 <_scanf_float+0xd0>
 801322e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013232:	b2c8      	uxtb	r0, r1
 8013234:	280e      	cmp	r0, #14
 8013236:	d93a      	bls.n	80132ae <_scanf_float+0xd6>
 8013238:	f1b9 0f00 	cmp.w	r9, #0
 801323c:	d003      	beq.n	8013246 <_scanf_float+0x6e>
 801323e:	6823      	ldr	r3, [r4, #0]
 8013240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013244:	6023      	str	r3, [r4, #0]
 8013246:	f10a 3aff 	add.w	sl, sl, #4294967295
 801324a:	f1ba 0f01 	cmp.w	sl, #1
 801324e:	f200 8113 	bhi.w	8013478 <_scanf_float+0x2a0>
 8013252:	455e      	cmp	r6, fp
 8013254:	f200 8105 	bhi.w	8013462 <_scanf_float+0x28a>
 8013258:	2501      	movs	r5, #1
 801325a:	4628      	mov	r0, r5
 801325c:	b007      	add	sp, #28
 801325e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013262:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013266:	2a0d      	cmp	r2, #13
 8013268:	d8e6      	bhi.n	8013238 <_scanf_float+0x60>
 801326a:	a101      	add	r1, pc, #4	; (adr r1, 8013270 <_scanf_float+0x98>)
 801326c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013270:	080133af 	.word	0x080133af
 8013274:	08013239 	.word	0x08013239
 8013278:	08013239 	.word	0x08013239
 801327c:	08013239 	.word	0x08013239
 8013280:	0801340f 	.word	0x0801340f
 8013284:	080133e7 	.word	0x080133e7
 8013288:	08013239 	.word	0x08013239
 801328c:	08013239 	.word	0x08013239
 8013290:	080133bd 	.word	0x080133bd
 8013294:	08013239 	.word	0x08013239
 8013298:	08013239 	.word	0x08013239
 801329c:	08013239 	.word	0x08013239
 80132a0:	08013239 	.word	0x08013239
 80132a4:	08013375 	.word	0x08013375
 80132a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80132ac:	e7db      	b.n	8013266 <_scanf_float+0x8e>
 80132ae:	290e      	cmp	r1, #14
 80132b0:	d8c2      	bhi.n	8013238 <_scanf_float+0x60>
 80132b2:	a001      	add	r0, pc, #4	; (adr r0, 80132b8 <_scanf_float+0xe0>)
 80132b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80132b8:	08013367 	.word	0x08013367
 80132bc:	08013239 	.word	0x08013239
 80132c0:	08013367 	.word	0x08013367
 80132c4:	080133fb 	.word	0x080133fb
 80132c8:	08013239 	.word	0x08013239
 80132cc:	08013315 	.word	0x08013315
 80132d0:	08013351 	.word	0x08013351
 80132d4:	08013351 	.word	0x08013351
 80132d8:	08013351 	.word	0x08013351
 80132dc:	08013351 	.word	0x08013351
 80132e0:	08013351 	.word	0x08013351
 80132e4:	08013351 	.word	0x08013351
 80132e8:	08013351 	.word	0x08013351
 80132ec:	08013351 	.word	0x08013351
 80132f0:	08013351 	.word	0x08013351
 80132f4:	2b6e      	cmp	r3, #110	; 0x6e
 80132f6:	d809      	bhi.n	801330c <_scanf_float+0x134>
 80132f8:	2b60      	cmp	r3, #96	; 0x60
 80132fa:	d8b2      	bhi.n	8013262 <_scanf_float+0x8a>
 80132fc:	2b54      	cmp	r3, #84	; 0x54
 80132fe:	d077      	beq.n	80133f0 <_scanf_float+0x218>
 8013300:	2b59      	cmp	r3, #89	; 0x59
 8013302:	d199      	bne.n	8013238 <_scanf_float+0x60>
 8013304:	2d07      	cmp	r5, #7
 8013306:	d197      	bne.n	8013238 <_scanf_float+0x60>
 8013308:	2508      	movs	r5, #8
 801330a:	e029      	b.n	8013360 <_scanf_float+0x188>
 801330c:	2b74      	cmp	r3, #116	; 0x74
 801330e:	d06f      	beq.n	80133f0 <_scanf_float+0x218>
 8013310:	2b79      	cmp	r3, #121	; 0x79
 8013312:	e7f6      	b.n	8013302 <_scanf_float+0x12a>
 8013314:	6821      	ldr	r1, [r4, #0]
 8013316:	05c8      	lsls	r0, r1, #23
 8013318:	d51a      	bpl.n	8013350 <_scanf_float+0x178>
 801331a:	9b02      	ldr	r3, [sp, #8]
 801331c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013320:	6021      	str	r1, [r4, #0]
 8013322:	f109 0901 	add.w	r9, r9, #1
 8013326:	b11b      	cbz	r3, 8013330 <_scanf_float+0x158>
 8013328:	3b01      	subs	r3, #1
 801332a:	3201      	adds	r2, #1
 801332c:	9302      	str	r3, [sp, #8]
 801332e:	60a2      	str	r2, [r4, #8]
 8013330:	68a3      	ldr	r3, [r4, #8]
 8013332:	3b01      	subs	r3, #1
 8013334:	60a3      	str	r3, [r4, #8]
 8013336:	6923      	ldr	r3, [r4, #16]
 8013338:	3301      	adds	r3, #1
 801333a:	6123      	str	r3, [r4, #16]
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	3b01      	subs	r3, #1
 8013340:	2b00      	cmp	r3, #0
 8013342:	607b      	str	r3, [r7, #4]
 8013344:	f340 8084 	ble.w	8013450 <_scanf_float+0x278>
 8013348:	683b      	ldr	r3, [r7, #0]
 801334a:	3301      	adds	r3, #1
 801334c:	603b      	str	r3, [r7, #0]
 801334e:	e766      	b.n	801321e <_scanf_float+0x46>
 8013350:	eb1a 0f05 	cmn.w	sl, r5
 8013354:	f47f af70 	bne.w	8013238 <_scanf_float+0x60>
 8013358:	6822      	ldr	r2, [r4, #0]
 801335a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801335e:	6022      	str	r2, [r4, #0]
 8013360:	f806 3b01 	strb.w	r3, [r6], #1
 8013364:	e7e4      	b.n	8013330 <_scanf_float+0x158>
 8013366:	6822      	ldr	r2, [r4, #0]
 8013368:	0610      	lsls	r0, r2, #24
 801336a:	f57f af65 	bpl.w	8013238 <_scanf_float+0x60>
 801336e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013372:	e7f4      	b.n	801335e <_scanf_float+0x186>
 8013374:	f1ba 0f00 	cmp.w	sl, #0
 8013378:	d10e      	bne.n	8013398 <_scanf_float+0x1c0>
 801337a:	f1b9 0f00 	cmp.w	r9, #0
 801337e:	d10e      	bne.n	801339e <_scanf_float+0x1c6>
 8013380:	6822      	ldr	r2, [r4, #0]
 8013382:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013386:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801338a:	d108      	bne.n	801339e <_scanf_float+0x1c6>
 801338c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013390:	6022      	str	r2, [r4, #0]
 8013392:	f04f 0a01 	mov.w	sl, #1
 8013396:	e7e3      	b.n	8013360 <_scanf_float+0x188>
 8013398:	f1ba 0f02 	cmp.w	sl, #2
 801339c:	d055      	beq.n	801344a <_scanf_float+0x272>
 801339e:	2d01      	cmp	r5, #1
 80133a0:	d002      	beq.n	80133a8 <_scanf_float+0x1d0>
 80133a2:	2d04      	cmp	r5, #4
 80133a4:	f47f af48 	bne.w	8013238 <_scanf_float+0x60>
 80133a8:	3501      	adds	r5, #1
 80133aa:	b2ed      	uxtb	r5, r5
 80133ac:	e7d8      	b.n	8013360 <_scanf_float+0x188>
 80133ae:	f1ba 0f01 	cmp.w	sl, #1
 80133b2:	f47f af41 	bne.w	8013238 <_scanf_float+0x60>
 80133b6:	f04f 0a02 	mov.w	sl, #2
 80133ba:	e7d1      	b.n	8013360 <_scanf_float+0x188>
 80133bc:	b97d      	cbnz	r5, 80133de <_scanf_float+0x206>
 80133be:	f1b9 0f00 	cmp.w	r9, #0
 80133c2:	f47f af3c 	bne.w	801323e <_scanf_float+0x66>
 80133c6:	6822      	ldr	r2, [r4, #0]
 80133c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80133cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80133d0:	f47f af39 	bne.w	8013246 <_scanf_float+0x6e>
 80133d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80133d8:	6022      	str	r2, [r4, #0]
 80133da:	2501      	movs	r5, #1
 80133dc:	e7c0      	b.n	8013360 <_scanf_float+0x188>
 80133de:	2d03      	cmp	r5, #3
 80133e0:	d0e2      	beq.n	80133a8 <_scanf_float+0x1d0>
 80133e2:	2d05      	cmp	r5, #5
 80133e4:	e7de      	b.n	80133a4 <_scanf_float+0x1cc>
 80133e6:	2d02      	cmp	r5, #2
 80133e8:	f47f af26 	bne.w	8013238 <_scanf_float+0x60>
 80133ec:	2503      	movs	r5, #3
 80133ee:	e7b7      	b.n	8013360 <_scanf_float+0x188>
 80133f0:	2d06      	cmp	r5, #6
 80133f2:	f47f af21 	bne.w	8013238 <_scanf_float+0x60>
 80133f6:	2507      	movs	r5, #7
 80133f8:	e7b2      	b.n	8013360 <_scanf_float+0x188>
 80133fa:	6822      	ldr	r2, [r4, #0]
 80133fc:	0591      	lsls	r1, r2, #22
 80133fe:	f57f af1b 	bpl.w	8013238 <_scanf_float+0x60>
 8013402:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013406:	6022      	str	r2, [r4, #0]
 8013408:	f8cd 9004 	str.w	r9, [sp, #4]
 801340c:	e7a8      	b.n	8013360 <_scanf_float+0x188>
 801340e:	6822      	ldr	r2, [r4, #0]
 8013410:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013414:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013418:	d006      	beq.n	8013428 <_scanf_float+0x250>
 801341a:	0550      	lsls	r0, r2, #21
 801341c:	f57f af0c 	bpl.w	8013238 <_scanf_float+0x60>
 8013420:	f1b9 0f00 	cmp.w	r9, #0
 8013424:	f43f af0f 	beq.w	8013246 <_scanf_float+0x6e>
 8013428:	0591      	lsls	r1, r2, #22
 801342a:	bf58      	it	pl
 801342c:	9901      	ldrpl	r1, [sp, #4]
 801342e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013432:	bf58      	it	pl
 8013434:	eba9 0101 	subpl.w	r1, r9, r1
 8013438:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801343c:	bf58      	it	pl
 801343e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013442:	6022      	str	r2, [r4, #0]
 8013444:	f04f 0900 	mov.w	r9, #0
 8013448:	e78a      	b.n	8013360 <_scanf_float+0x188>
 801344a:	f04f 0a03 	mov.w	sl, #3
 801344e:	e787      	b.n	8013360 <_scanf_float+0x188>
 8013450:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013454:	4639      	mov	r1, r7
 8013456:	4640      	mov	r0, r8
 8013458:	4798      	blx	r3
 801345a:	2800      	cmp	r0, #0
 801345c:	f43f aedf 	beq.w	801321e <_scanf_float+0x46>
 8013460:	e6ea      	b.n	8013238 <_scanf_float+0x60>
 8013462:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013466:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801346a:	463a      	mov	r2, r7
 801346c:	4640      	mov	r0, r8
 801346e:	4798      	blx	r3
 8013470:	6923      	ldr	r3, [r4, #16]
 8013472:	3b01      	subs	r3, #1
 8013474:	6123      	str	r3, [r4, #16]
 8013476:	e6ec      	b.n	8013252 <_scanf_float+0x7a>
 8013478:	1e6b      	subs	r3, r5, #1
 801347a:	2b06      	cmp	r3, #6
 801347c:	d825      	bhi.n	80134ca <_scanf_float+0x2f2>
 801347e:	2d02      	cmp	r5, #2
 8013480:	d836      	bhi.n	80134f0 <_scanf_float+0x318>
 8013482:	455e      	cmp	r6, fp
 8013484:	f67f aee8 	bls.w	8013258 <_scanf_float+0x80>
 8013488:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801348c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013490:	463a      	mov	r2, r7
 8013492:	4640      	mov	r0, r8
 8013494:	4798      	blx	r3
 8013496:	6923      	ldr	r3, [r4, #16]
 8013498:	3b01      	subs	r3, #1
 801349a:	6123      	str	r3, [r4, #16]
 801349c:	e7f1      	b.n	8013482 <_scanf_float+0x2aa>
 801349e:	9802      	ldr	r0, [sp, #8]
 80134a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80134a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80134a8:	9002      	str	r0, [sp, #8]
 80134aa:	463a      	mov	r2, r7
 80134ac:	4640      	mov	r0, r8
 80134ae:	4798      	blx	r3
 80134b0:	6923      	ldr	r3, [r4, #16]
 80134b2:	3b01      	subs	r3, #1
 80134b4:	6123      	str	r3, [r4, #16]
 80134b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80134ba:	fa5f fa8a 	uxtb.w	sl, sl
 80134be:	f1ba 0f02 	cmp.w	sl, #2
 80134c2:	d1ec      	bne.n	801349e <_scanf_float+0x2c6>
 80134c4:	3d03      	subs	r5, #3
 80134c6:	b2ed      	uxtb	r5, r5
 80134c8:	1b76      	subs	r6, r6, r5
 80134ca:	6823      	ldr	r3, [r4, #0]
 80134cc:	05da      	lsls	r2, r3, #23
 80134ce:	d52f      	bpl.n	8013530 <_scanf_float+0x358>
 80134d0:	055b      	lsls	r3, r3, #21
 80134d2:	d510      	bpl.n	80134f6 <_scanf_float+0x31e>
 80134d4:	455e      	cmp	r6, fp
 80134d6:	f67f aebf 	bls.w	8013258 <_scanf_float+0x80>
 80134da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80134de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80134e2:	463a      	mov	r2, r7
 80134e4:	4640      	mov	r0, r8
 80134e6:	4798      	blx	r3
 80134e8:	6923      	ldr	r3, [r4, #16]
 80134ea:	3b01      	subs	r3, #1
 80134ec:	6123      	str	r3, [r4, #16]
 80134ee:	e7f1      	b.n	80134d4 <_scanf_float+0x2fc>
 80134f0:	46aa      	mov	sl, r5
 80134f2:	9602      	str	r6, [sp, #8]
 80134f4:	e7df      	b.n	80134b6 <_scanf_float+0x2de>
 80134f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80134fa:	6923      	ldr	r3, [r4, #16]
 80134fc:	2965      	cmp	r1, #101	; 0x65
 80134fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8013502:	f106 35ff 	add.w	r5, r6, #4294967295
 8013506:	6123      	str	r3, [r4, #16]
 8013508:	d00c      	beq.n	8013524 <_scanf_float+0x34c>
 801350a:	2945      	cmp	r1, #69	; 0x45
 801350c:	d00a      	beq.n	8013524 <_scanf_float+0x34c>
 801350e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013512:	463a      	mov	r2, r7
 8013514:	4640      	mov	r0, r8
 8013516:	4798      	blx	r3
 8013518:	6923      	ldr	r3, [r4, #16]
 801351a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801351e:	3b01      	subs	r3, #1
 8013520:	1eb5      	subs	r5, r6, #2
 8013522:	6123      	str	r3, [r4, #16]
 8013524:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013528:	463a      	mov	r2, r7
 801352a:	4640      	mov	r0, r8
 801352c:	4798      	blx	r3
 801352e:	462e      	mov	r6, r5
 8013530:	6825      	ldr	r5, [r4, #0]
 8013532:	f015 0510 	ands.w	r5, r5, #16
 8013536:	d158      	bne.n	80135ea <_scanf_float+0x412>
 8013538:	7035      	strb	r5, [r6, #0]
 801353a:	6823      	ldr	r3, [r4, #0]
 801353c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013544:	d11c      	bne.n	8013580 <_scanf_float+0x3a8>
 8013546:	9b01      	ldr	r3, [sp, #4]
 8013548:	454b      	cmp	r3, r9
 801354a:	eba3 0209 	sub.w	r2, r3, r9
 801354e:	d124      	bne.n	801359a <_scanf_float+0x3c2>
 8013550:	2200      	movs	r2, #0
 8013552:	4659      	mov	r1, fp
 8013554:	4640      	mov	r0, r8
 8013556:	f000 ffdd 	bl	8014514 <_strtod_r>
 801355a:	9b03      	ldr	r3, [sp, #12]
 801355c:	6821      	ldr	r1, [r4, #0]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	f011 0f02 	tst.w	r1, #2
 8013564:	ec57 6b10 	vmov	r6, r7, d0
 8013568:	f103 0204 	add.w	r2, r3, #4
 801356c:	d020      	beq.n	80135b0 <_scanf_float+0x3d8>
 801356e:	9903      	ldr	r1, [sp, #12]
 8013570:	600a      	str	r2, [r1, #0]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	e9c3 6700 	strd	r6, r7, [r3]
 8013578:	68e3      	ldr	r3, [r4, #12]
 801357a:	3301      	adds	r3, #1
 801357c:	60e3      	str	r3, [r4, #12]
 801357e:	e66c      	b.n	801325a <_scanf_float+0x82>
 8013580:	9b04      	ldr	r3, [sp, #16]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d0e4      	beq.n	8013550 <_scanf_float+0x378>
 8013586:	9905      	ldr	r1, [sp, #20]
 8013588:	230a      	movs	r3, #10
 801358a:	462a      	mov	r2, r5
 801358c:	3101      	adds	r1, #1
 801358e:	4640      	mov	r0, r8
 8013590:	f001 f84a 	bl	8014628 <_strtol_r>
 8013594:	9b04      	ldr	r3, [sp, #16]
 8013596:	9e05      	ldr	r6, [sp, #20]
 8013598:	1ac2      	subs	r2, r0, r3
 801359a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801359e:	429e      	cmp	r6, r3
 80135a0:	bf28      	it	cs
 80135a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80135a6:	4912      	ldr	r1, [pc, #72]	; (80135f0 <_scanf_float+0x418>)
 80135a8:	4630      	mov	r0, r6
 80135aa:	f000 f8e9 	bl	8013780 <siprintf>
 80135ae:	e7cf      	b.n	8013550 <_scanf_float+0x378>
 80135b0:	f011 0f04 	tst.w	r1, #4
 80135b4:	9903      	ldr	r1, [sp, #12]
 80135b6:	600a      	str	r2, [r1, #0]
 80135b8:	d1db      	bne.n	8013572 <_scanf_float+0x39a>
 80135ba:	f8d3 8000 	ldr.w	r8, [r3]
 80135be:	ee10 2a10 	vmov	r2, s0
 80135c2:	ee10 0a10 	vmov	r0, s0
 80135c6:	463b      	mov	r3, r7
 80135c8:	4639      	mov	r1, r7
 80135ca:	f7ed fabf 	bl	8000b4c <__aeabi_dcmpun>
 80135ce:	b128      	cbz	r0, 80135dc <_scanf_float+0x404>
 80135d0:	4808      	ldr	r0, [pc, #32]	; (80135f4 <_scanf_float+0x41c>)
 80135d2:	f000 f88b 	bl	80136ec <nanf>
 80135d6:	ed88 0a00 	vstr	s0, [r8]
 80135da:	e7cd      	b.n	8013578 <_scanf_float+0x3a0>
 80135dc:	4630      	mov	r0, r6
 80135de:	4639      	mov	r1, r7
 80135e0:	f7ed fb12 	bl	8000c08 <__aeabi_d2f>
 80135e4:	f8c8 0000 	str.w	r0, [r8]
 80135e8:	e7c6      	b.n	8013578 <_scanf_float+0x3a0>
 80135ea:	2500      	movs	r5, #0
 80135ec:	e635      	b.n	801325a <_scanf_float+0x82>
 80135ee:	bf00      	nop
 80135f0:	08017d5e 	.word	0x08017d5e
 80135f4:	08017df3 	.word	0x08017df3

080135f8 <cleanup_glue>:
 80135f8:	b538      	push	{r3, r4, r5, lr}
 80135fa:	460c      	mov	r4, r1
 80135fc:	6809      	ldr	r1, [r1, #0]
 80135fe:	4605      	mov	r5, r0
 8013600:	b109      	cbz	r1, 8013606 <cleanup_glue+0xe>
 8013602:	f7ff fff9 	bl	80135f8 <cleanup_glue>
 8013606:	4621      	mov	r1, r4
 8013608:	4628      	mov	r0, r5
 801360a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801360e:	f7ff b8cf 	b.w	80127b0 <_free_r>
	...

08013614 <_reclaim_reent>:
 8013614:	4b2c      	ldr	r3, [pc, #176]	; (80136c8 <_reclaim_reent+0xb4>)
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	4283      	cmp	r3, r0
 801361a:	b570      	push	{r4, r5, r6, lr}
 801361c:	4604      	mov	r4, r0
 801361e:	d051      	beq.n	80136c4 <_reclaim_reent+0xb0>
 8013620:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013622:	b143      	cbz	r3, 8013636 <_reclaim_reent+0x22>
 8013624:	68db      	ldr	r3, [r3, #12]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d14a      	bne.n	80136c0 <_reclaim_reent+0xac>
 801362a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801362c:	6819      	ldr	r1, [r3, #0]
 801362e:	b111      	cbz	r1, 8013636 <_reclaim_reent+0x22>
 8013630:	4620      	mov	r0, r4
 8013632:	f7ff f8bd 	bl	80127b0 <_free_r>
 8013636:	6961      	ldr	r1, [r4, #20]
 8013638:	b111      	cbz	r1, 8013640 <_reclaim_reent+0x2c>
 801363a:	4620      	mov	r0, r4
 801363c:	f7ff f8b8 	bl	80127b0 <_free_r>
 8013640:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013642:	b111      	cbz	r1, 801364a <_reclaim_reent+0x36>
 8013644:	4620      	mov	r0, r4
 8013646:	f7ff f8b3 	bl	80127b0 <_free_r>
 801364a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801364c:	b111      	cbz	r1, 8013654 <_reclaim_reent+0x40>
 801364e:	4620      	mov	r0, r4
 8013650:	f7ff f8ae 	bl	80127b0 <_free_r>
 8013654:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013656:	b111      	cbz	r1, 801365e <_reclaim_reent+0x4a>
 8013658:	4620      	mov	r0, r4
 801365a:	f7ff f8a9 	bl	80127b0 <_free_r>
 801365e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013660:	b111      	cbz	r1, 8013668 <_reclaim_reent+0x54>
 8013662:	4620      	mov	r0, r4
 8013664:	f7ff f8a4 	bl	80127b0 <_free_r>
 8013668:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801366a:	b111      	cbz	r1, 8013672 <_reclaim_reent+0x5e>
 801366c:	4620      	mov	r0, r4
 801366e:	f7ff f89f 	bl	80127b0 <_free_r>
 8013672:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013674:	b111      	cbz	r1, 801367c <_reclaim_reent+0x68>
 8013676:	4620      	mov	r0, r4
 8013678:	f7ff f89a 	bl	80127b0 <_free_r>
 801367c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801367e:	b111      	cbz	r1, 8013686 <_reclaim_reent+0x72>
 8013680:	4620      	mov	r0, r4
 8013682:	f7ff f895 	bl	80127b0 <_free_r>
 8013686:	69a3      	ldr	r3, [r4, #24]
 8013688:	b1e3      	cbz	r3, 80136c4 <_reclaim_reent+0xb0>
 801368a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801368c:	4620      	mov	r0, r4
 801368e:	4798      	blx	r3
 8013690:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013692:	b1b9      	cbz	r1, 80136c4 <_reclaim_reent+0xb0>
 8013694:	4620      	mov	r0, r4
 8013696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801369a:	f7ff bfad 	b.w	80135f8 <cleanup_glue>
 801369e:	5949      	ldr	r1, [r1, r5]
 80136a0:	b941      	cbnz	r1, 80136b4 <_reclaim_reent+0xa0>
 80136a2:	3504      	adds	r5, #4
 80136a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80136a6:	2d80      	cmp	r5, #128	; 0x80
 80136a8:	68d9      	ldr	r1, [r3, #12]
 80136aa:	d1f8      	bne.n	801369e <_reclaim_reent+0x8a>
 80136ac:	4620      	mov	r0, r4
 80136ae:	f7ff f87f 	bl	80127b0 <_free_r>
 80136b2:	e7ba      	b.n	801362a <_reclaim_reent+0x16>
 80136b4:	680e      	ldr	r6, [r1, #0]
 80136b6:	4620      	mov	r0, r4
 80136b8:	f7ff f87a 	bl	80127b0 <_free_r>
 80136bc:	4631      	mov	r1, r6
 80136be:	e7ef      	b.n	80136a0 <_reclaim_reent+0x8c>
 80136c0:	2500      	movs	r5, #0
 80136c2:	e7ef      	b.n	80136a4 <_reclaim_reent+0x90>
 80136c4:	bd70      	pop	{r4, r5, r6, pc}
 80136c6:	bf00      	nop
 80136c8:	200001a4 	.word	0x200001a4

080136cc <_sbrk_r>:
 80136cc:	b538      	push	{r3, r4, r5, lr}
 80136ce:	4d06      	ldr	r5, [pc, #24]	; (80136e8 <_sbrk_r+0x1c>)
 80136d0:	2300      	movs	r3, #0
 80136d2:	4604      	mov	r4, r0
 80136d4:	4608      	mov	r0, r1
 80136d6:	602b      	str	r3, [r5, #0]
 80136d8:	f7ef fca2 	bl	8003020 <_sbrk>
 80136dc:	1c43      	adds	r3, r0, #1
 80136de:	d102      	bne.n	80136e6 <_sbrk_r+0x1a>
 80136e0:	682b      	ldr	r3, [r5, #0]
 80136e2:	b103      	cbz	r3, 80136e6 <_sbrk_r+0x1a>
 80136e4:	6023      	str	r3, [r4, #0]
 80136e6:	bd38      	pop	{r3, r4, r5, pc}
 80136e8:	200073ac 	.word	0x200073ac

080136ec <nanf>:
 80136ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80136f4 <nanf+0x8>
 80136f0:	4770      	bx	lr
 80136f2:	bf00      	nop
 80136f4:	7fc00000 	.word	0x7fc00000

080136f8 <_raise_r>:
 80136f8:	291f      	cmp	r1, #31
 80136fa:	b538      	push	{r3, r4, r5, lr}
 80136fc:	4604      	mov	r4, r0
 80136fe:	460d      	mov	r5, r1
 8013700:	d904      	bls.n	801370c <_raise_r+0x14>
 8013702:	2316      	movs	r3, #22
 8013704:	6003      	str	r3, [r0, #0]
 8013706:	f04f 30ff 	mov.w	r0, #4294967295
 801370a:	bd38      	pop	{r3, r4, r5, pc}
 801370c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801370e:	b112      	cbz	r2, 8013716 <_raise_r+0x1e>
 8013710:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013714:	b94b      	cbnz	r3, 801372a <_raise_r+0x32>
 8013716:	4620      	mov	r0, r4
 8013718:	f000 f830 	bl	801377c <_getpid_r>
 801371c:	462a      	mov	r2, r5
 801371e:	4601      	mov	r1, r0
 8013720:	4620      	mov	r0, r4
 8013722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013726:	f000 b817 	b.w	8013758 <_kill_r>
 801372a:	2b01      	cmp	r3, #1
 801372c:	d00a      	beq.n	8013744 <_raise_r+0x4c>
 801372e:	1c59      	adds	r1, r3, #1
 8013730:	d103      	bne.n	801373a <_raise_r+0x42>
 8013732:	2316      	movs	r3, #22
 8013734:	6003      	str	r3, [r0, #0]
 8013736:	2001      	movs	r0, #1
 8013738:	e7e7      	b.n	801370a <_raise_r+0x12>
 801373a:	2400      	movs	r4, #0
 801373c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013740:	4628      	mov	r0, r5
 8013742:	4798      	blx	r3
 8013744:	2000      	movs	r0, #0
 8013746:	e7e0      	b.n	801370a <_raise_r+0x12>

08013748 <raise>:
 8013748:	4b02      	ldr	r3, [pc, #8]	; (8013754 <raise+0xc>)
 801374a:	4601      	mov	r1, r0
 801374c:	6818      	ldr	r0, [r3, #0]
 801374e:	f7ff bfd3 	b.w	80136f8 <_raise_r>
 8013752:	bf00      	nop
 8013754:	200001a4 	.word	0x200001a4

08013758 <_kill_r>:
 8013758:	b538      	push	{r3, r4, r5, lr}
 801375a:	4d07      	ldr	r5, [pc, #28]	; (8013778 <_kill_r+0x20>)
 801375c:	2300      	movs	r3, #0
 801375e:	4604      	mov	r4, r0
 8013760:	4608      	mov	r0, r1
 8013762:	4611      	mov	r1, r2
 8013764:	602b      	str	r3, [r5, #0]
 8013766:	f7ef fbd3 	bl	8002f10 <_kill>
 801376a:	1c43      	adds	r3, r0, #1
 801376c:	d102      	bne.n	8013774 <_kill_r+0x1c>
 801376e:	682b      	ldr	r3, [r5, #0]
 8013770:	b103      	cbz	r3, 8013774 <_kill_r+0x1c>
 8013772:	6023      	str	r3, [r4, #0]
 8013774:	bd38      	pop	{r3, r4, r5, pc}
 8013776:	bf00      	nop
 8013778:	200073ac 	.word	0x200073ac

0801377c <_getpid_r>:
 801377c:	f7ef bbc0 	b.w	8002f00 <_getpid>

08013780 <siprintf>:
 8013780:	b40e      	push	{r1, r2, r3}
 8013782:	b500      	push	{lr}
 8013784:	b09c      	sub	sp, #112	; 0x70
 8013786:	ab1d      	add	r3, sp, #116	; 0x74
 8013788:	9002      	str	r0, [sp, #8]
 801378a:	9006      	str	r0, [sp, #24]
 801378c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013790:	4809      	ldr	r0, [pc, #36]	; (80137b8 <siprintf+0x38>)
 8013792:	9107      	str	r1, [sp, #28]
 8013794:	9104      	str	r1, [sp, #16]
 8013796:	4909      	ldr	r1, [pc, #36]	; (80137bc <siprintf+0x3c>)
 8013798:	f853 2b04 	ldr.w	r2, [r3], #4
 801379c:	9105      	str	r1, [sp, #20]
 801379e:	6800      	ldr	r0, [r0, #0]
 80137a0:	9301      	str	r3, [sp, #4]
 80137a2:	a902      	add	r1, sp, #8
 80137a4:	f003 f83c 	bl	8016820 <_svfiprintf_r>
 80137a8:	9b02      	ldr	r3, [sp, #8]
 80137aa:	2200      	movs	r2, #0
 80137ac:	701a      	strb	r2, [r3, #0]
 80137ae:	b01c      	add	sp, #112	; 0x70
 80137b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80137b4:	b003      	add	sp, #12
 80137b6:	4770      	bx	lr
 80137b8:	200001a4 	.word	0x200001a4
 80137bc:	ffff0208 	.word	0xffff0208

080137c0 <siscanf>:
 80137c0:	b40e      	push	{r1, r2, r3}
 80137c2:	b510      	push	{r4, lr}
 80137c4:	b09f      	sub	sp, #124	; 0x7c
 80137c6:	ac21      	add	r4, sp, #132	; 0x84
 80137c8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80137cc:	f854 2b04 	ldr.w	r2, [r4], #4
 80137d0:	9201      	str	r2, [sp, #4]
 80137d2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80137d6:	9004      	str	r0, [sp, #16]
 80137d8:	9008      	str	r0, [sp, #32]
 80137da:	f7ec fd09 	bl	80001f0 <strlen>
 80137de:	4b0c      	ldr	r3, [pc, #48]	; (8013810 <siscanf+0x50>)
 80137e0:	9005      	str	r0, [sp, #20]
 80137e2:	9009      	str	r0, [sp, #36]	; 0x24
 80137e4:	930d      	str	r3, [sp, #52]	; 0x34
 80137e6:	480b      	ldr	r0, [pc, #44]	; (8013814 <siscanf+0x54>)
 80137e8:	9a01      	ldr	r2, [sp, #4]
 80137ea:	6800      	ldr	r0, [r0, #0]
 80137ec:	9403      	str	r4, [sp, #12]
 80137ee:	2300      	movs	r3, #0
 80137f0:	9311      	str	r3, [sp, #68]	; 0x44
 80137f2:	9316      	str	r3, [sp, #88]	; 0x58
 80137f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80137f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80137fc:	a904      	add	r1, sp, #16
 80137fe:	4623      	mov	r3, r4
 8013800:	f003 f968 	bl	8016ad4 <__ssvfiscanf_r>
 8013804:	b01f      	add	sp, #124	; 0x7c
 8013806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801380a:	b003      	add	sp, #12
 801380c:	4770      	bx	lr
 801380e:	bf00      	nop
 8013810:	0801383b 	.word	0x0801383b
 8013814:	200001a4 	.word	0x200001a4

08013818 <__sread>:
 8013818:	b510      	push	{r4, lr}
 801381a:	460c      	mov	r4, r1
 801381c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013820:	f003 fd76 	bl	8017310 <_read_r>
 8013824:	2800      	cmp	r0, #0
 8013826:	bfab      	itete	ge
 8013828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801382a:	89a3      	ldrhlt	r3, [r4, #12]
 801382c:	181b      	addge	r3, r3, r0
 801382e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013832:	bfac      	ite	ge
 8013834:	6563      	strge	r3, [r4, #84]	; 0x54
 8013836:	81a3      	strhlt	r3, [r4, #12]
 8013838:	bd10      	pop	{r4, pc}

0801383a <__seofread>:
 801383a:	2000      	movs	r0, #0
 801383c:	4770      	bx	lr

0801383e <__swrite>:
 801383e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013842:	461f      	mov	r7, r3
 8013844:	898b      	ldrh	r3, [r1, #12]
 8013846:	05db      	lsls	r3, r3, #23
 8013848:	4605      	mov	r5, r0
 801384a:	460c      	mov	r4, r1
 801384c:	4616      	mov	r6, r2
 801384e:	d505      	bpl.n	801385c <__swrite+0x1e>
 8013850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013854:	2302      	movs	r3, #2
 8013856:	2200      	movs	r2, #0
 8013858:	f002 fa66 	bl	8015d28 <_lseek_r>
 801385c:	89a3      	ldrh	r3, [r4, #12]
 801385e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013866:	81a3      	strh	r3, [r4, #12]
 8013868:	4632      	mov	r2, r6
 801386a:	463b      	mov	r3, r7
 801386c:	4628      	mov	r0, r5
 801386e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013872:	f000 bf59 	b.w	8014728 <_write_r>

08013876 <__sseek>:
 8013876:	b510      	push	{r4, lr}
 8013878:	460c      	mov	r4, r1
 801387a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801387e:	f002 fa53 	bl	8015d28 <_lseek_r>
 8013882:	1c43      	adds	r3, r0, #1
 8013884:	89a3      	ldrh	r3, [r4, #12]
 8013886:	bf15      	itete	ne
 8013888:	6560      	strne	r0, [r4, #84]	; 0x54
 801388a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801388e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013892:	81a3      	strheq	r3, [r4, #12]
 8013894:	bf18      	it	ne
 8013896:	81a3      	strhne	r3, [r4, #12]
 8013898:	bd10      	pop	{r4, pc}

0801389a <__sclose>:
 801389a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801389e:	f000 bf73 	b.w	8014788 <_close_r>

080138a2 <strncmp>:
 80138a2:	b510      	push	{r4, lr}
 80138a4:	b16a      	cbz	r2, 80138c2 <strncmp+0x20>
 80138a6:	3901      	subs	r1, #1
 80138a8:	1884      	adds	r4, r0, r2
 80138aa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80138ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80138b2:	4293      	cmp	r3, r2
 80138b4:	d103      	bne.n	80138be <strncmp+0x1c>
 80138b6:	42a0      	cmp	r0, r4
 80138b8:	d001      	beq.n	80138be <strncmp+0x1c>
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d1f5      	bne.n	80138aa <strncmp+0x8>
 80138be:	1a98      	subs	r0, r3, r2
 80138c0:	bd10      	pop	{r4, pc}
 80138c2:	4610      	mov	r0, r2
 80138c4:	e7fc      	b.n	80138c0 <strncmp+0x1e>

080138c6 <sulp>:
 80138c6:	b570      	push	{r4, r5, r6, lr}
 80138c8:	4604      	mov	r4, r0
 80138ca:	460d      	mov	r5, r1
 80138cc:	ec45 4b10 	vmov	d0, r4, r5
 80138d0:	4616      	mov	r6, r2
 80138d2:	f002 fdc5 	bl	8016460 <__ulp>
 80138d6:	ec51 0b10 	vmov	r0, r1, d0
 80138da:	b17e      	cbz	r6, 80138fc <sulp+0x36>
 80138dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80138e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	dd09      	ble.n	80138fc <sulp+0x36>
 80138e8:	051b      	lsls	r3, r3, #20
 80138ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80138ee:	2400      	movs	r4, #0
 80138f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80138f4:	4622      	mov	r2, r4
 80138f6:	462b      	mov	r3, r5
 80138f8:	f7ec fe8e 	bl	8000618 <__aeabi_dmul>
 80138fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08013900 <_strtod_l>:
 8013900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013904:	b0a3      	sub	sp, #140	; 0x8c
 8013906:	461f      	mov	r7, r3
 8013908:	2300      	movs	r3, #0
 801390a:	931e      	str	r3, [sp, #120]	; 0x78
 801390c:	4ba4      	ldr	r3, [pc, #656]	; (8013ba0 <_strtod_l+0x2a0>)
 801390e:	9219      	str	r2, [sp, #100]	; 0x64
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	9307      	str	r3, [sp, #28]
 8013914:	4604      	mov	r4, r0
 8013916:	4618      	mov	r0, r3
 8013918:	4688      	mov	r8, r1
 801391a:	f7ec fc69 	bl	80001f0 <strlen>
 801391e:	f04f 0a00 	mov.w	sl, #0
 8013922:	4605      	mov	r5, r0
 8013924:	f04f 0b00 	mov.w	fp, #0
 8013928:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801392c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801392e:	781a      	ldrb	r2, [r3, #0]
 8013930:	2a2b      	cmp	r2, #43	; 0x2b
 8013932:	d04c      	beq.n	80139ce <_strtod_l+0xce>
 8013934:	d839      	bhi.n	80139aa <_strtod_l+0xaa>
 8013936:	2a0d      	cmp	r2, #13
 8013938:	d832      	bhi.n	80139a0 <_strtod_l+0xa0>
 801393a:	2a08      	cmp	r2, #8
 801393c:	d832      	bhi.n	80139a4 <_strtod_l+0xa4>
 801393e:	2a00      	cmp	r2, #0
 8013940:	d03c      	beq.n	80139bc <_strtod_l+0xbc>
 8013942:	2300      	movs	r3, #0
 8013944:	930e      	str	r3, [sp, #56]	; 0x38
 8013946:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013948:	7833      	ldrb	r3, [r6, #0]
 801394a:	2b30      	cmp	r3, #48	; 0x30
 801394c:	f040 80b4 	bne.w	8013ab8 <_strtod_l+0x1b8>
 8013950:	7873      	ldrb	r3, [r6, #1]
 8013952:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013956:	2b58      	cmp	r3, #88	; 0x58
 8013958:	d16c      	bne.n	8013a34 <_strtod_l+0x134>
 801395a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801395c:	9301      	str	r3, [sp, #4]
 801395e:	ab1e      	add	r3, sp, #120	; 0x78
 8013960:	9702      	str	r7, [sp, #8]
 8013962:	9300      	str	r3, [sp, #0]
 8013964:	4a8f      	ldr	r2, [pc, #572]	; (8013ba4 <_strtod_l+0x2a4>)
 8013966:	ab1f      	add	r3, sp, #124	; 0x7c
 8013968:	a91d      	add	r1, sp, #116	; 0x74
 801396a:	4620      	mov	r0, r4
 801396c:	f001 fed0 	bl	8015710 <__gethex>
 8013970:	f010 0707 	ands.w	r7, r0, #7
 8013974:	4605      	mov	r5, r0
 8013976:	d005      	beq.n	8013984 <_strtod_l+0x84>
 8013978:	2f06      	cmp	r7, #6
 801397a:	d12a      	bne.n	80139d2 <_strtod_l+0xd2>
 801397c:	3601      	adds	r6, #1
 801397e:	2300      	movs	r3, #0
 8013980:	961d      	str	r6, [sp, #116]	; 0x74
 8013982:	930e      	str	r3, [sp, #56]	; 0x38
 8013984:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013986:	2b00      	cmp	r3, #0
 8013988:	f040 8596 	bne.w	80144b8 <_strtod_l+0xbb8>
 801398c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801398e:	b1db      	cbz	r3, 80139c8 <_strtod_l+0xc8>
 8013990:	4652      	mov	r2, sl
 8013992:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013996:	ec43 2b10 	vmov	d0, r2, r3
 801399a:	b023      	add	sp, #140	; 0x8c
 801399c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139a0:	2a20      	cmp	r2, #32
 80139a2:	d1ce      	bne.n	8013942 <_strtod_l+0x42>
 80139a4:	3301      	adds	r3, #1
 80139a6:	931d      	str	r3, [sp, #116]	; 0x74
 80139a8:	e7c0      	b.n	801392c <_strtod_l+0x2c>
 80139aa:	2a2d      	cmp	r2, #45	; 0x2d
 80139ac:	d1c9      	bne.n	8013942 <_strtod_l+0x42>
 80139ae:	2201      	movs	r2, #1
 80139b0:	920e      	str	r2, [sp, #56]	; 0x38
 80139b2:	1c5a      	adds	r2, r3, #1
 80139b4:	921d      	str	r2, [sp, #116]	; 0x74
 80139b6:	785b      	ldrb	r3, [r3, #1]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d1c4      	bne.n	8013946 <_strtod_l+0x46>
 80139bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80139be:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	f040 8576 	bne.w	80144b4 <_strtod_l+0xbb4>
 80139c8:	4652      	mov	r2, sl
 80139ca:	465b      	mov	r3, fp
 80139cc:	e7e3      	b.n	8013996 <_strtod_l+0x96>
 80139ce:	2200      	movs	r2, #0
 80139d0:	e7ee      	b.n	80139b0 <_strtod_l+0xb0>
 80139d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80139d4:	b13a      	cbz	r2, 80139e6 <_strtod_l+0xe6>
 80139d6:	2135      	movs	r1, #53	; 0x35
 80139d8:	a820      	add	r0, sp, #128	; 0x80
 80139da:	f002 fe4c 	bl	8016676 <__copybits>
 80139de:	991e      	ldr	r1, [sp, #120]	; 0x78
 80139e0:	4620      	mov	r0, r4
 80139e2:	f002 fa11 	bl	8015e08 <_Bfree>
 80139e6:	3f01      	subs	r7, #1
 80139e8:	2f05      	cmp	r7, #5
 80139ea:	d807      	bhi.n	80139fc <_strtod_l+0xfc>
 80139ec:	e8df f007 	tbb	[pc, r7]
 80139f0:	1d180b0e 	.word	0x1d180b0e
 80139f4:	030e      	.short	0x030e
 80139f6:	f04f 0b00 	mov.w	fp, #0
 80139fa:	46da      	mov	sl, fp
 80139fc:	0728      	lsls	r0, r5, #28
 80139fe:	d5c1      	bpl.n	8013984 <_strtod_l+0x84>
 8013a00:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013a04:	e7be      	b.n	8013984 <_strtod_l+0x84>
 8013a06:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8013a0a:	e7f7      	b.n	80139fc <_strtod_l+0xfc>
 8013a0c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8013a10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013a12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013a16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013a1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013a1e:	e7ed      	b.n	80139fc <_strtod_l+0xfc>
 8013a20:	f8df b184 	ldr.w	fp, [pc, #388]	; 8013ba8 <_strtod_l+0x2a8>
 8013a24:	f04f 0a00 	mov.w	sl, #0
 8013a28:	e7e8      	b.n	80139fc <_strtod_l+0xfc>
 8013a2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013a2e:	f04f 3aff 	mov.w	sl, #4294967295
 8013a32:	e7e3      	b.n	80139fc <_strtod_l+0xfc>
 8013a34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a36:	1c5a      	adds	r2, r3, #1
 8013a38:	921d      	str	r2, [sp, #116]	; 0x74
 8013a3a:	785b      	ldrb	r3, [r3, #1]
 8013a3c:	2b30      	cmp	r3, #48	; 0x30
 8013a3e:	d0f9      	beq.n	8013a34 <_strtod_l+0x134>
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d09f      	beq.n	8013984 <_strtod_l+0x84>
 8013a44:	2301      	movs	r3, #1
 8013a46:	f04f 0900 	mov.w	r9, #0
 8013a4a:	9304      	str	r3, [sp, #16]
 8013a4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8013a50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013a54:	464f      	mov	r7, r9
 8013a56:	220a      	movs	r2, #10
 8013a58:	981d      	ldr	r0, [sp, #116]	; 0x74
 8013a5a:	7806      	ldrb	r6, [r0, #0]
 8013a5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013a60:	b2d9      	uxtb	r1, r3
 8013a62:	2909      	cmp	r1, #9
 8013a64:	d92a      	bls.n	8013abc <_strtod_l+0x1bc>
 8013a66:	9907      	ldr	r1, [sp, #28]
 8013a68:	462a      	mov	r2, r5
 8013a6a:	f7ff ff1a 	bl	80138a2 <strncmp>
 8013a6e:	b398      	cbz	r0, 8013ad8 <_strtod_l+0x1d8>
 8013a70:	2000      	movs	r0, #0
 8013a72:	4633      	mov	r3, r6
 8013a74:	463d      	mov	r5, r7
 8013a76:	9007      	str	r0, [sp, #28]
 8013a78:	4602      	mov	r2, r0
 8013a7a:	2b65      	cmp	r3, #101	; 0x65
 8013a7c:	d001      	beq.n	8013a82 <_strtod_l+0x182>
 8013a7e:	2b45      	cmp	r3, #69	; 0x45
 8013a80:	d118      	bne.n	8013ab4 <_strtod_l+0x1b4>
 8013a82:	b91d      	cbnz	r5, 8013a8c <_strtod_l+0x18c>
 8013a84:	9b04      	ldr	r3, [sp, #16]
 8013a86:	4303      	orrs	r3, r0
 8013a88:	d098      	beq.n	80139bc <_strtod_l+0xbc>
 8013a8a:	2500      	movs	r5, #0
 8013a8c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8013a90:	f108 0301 	add.w	r3, r8, #1
 8013a94:	931d      	str	r3, [sp, #116]	; 0x74
 8013a96:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013a9a:	2b2b      	cmp	r3, #43	; 0x2b
 8013a9c:	d075      	beq.n	8013b8a <_strtod_l+0x28a>
 8013a9e:	2b2d      	cmp	r3, #45	; 0x2d
 8013aa0:	d07b      	beq.n	8013b9a <_strtod_l+0x29a>
 8013aa2:	f04f 0c00 	mov.w	ip, #0
 8013aa6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013aaa:	2909      	cmp	r1, #9
 8013aac:	f240 8082 	bls.w	8013bb4 <_strtod_l+0x2b4>
 8013ab0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013ab4:	2600      	movs	r6, #0
 8013ab6:	e09d      	b.n	8013bf4 <_strtod_l+0x2f4>
 8013ab8:	2300      	movs	r3, #0
 8013aba:	e7c4      	b.n	8013a46 <_strtod_l+0x146>
 8013abc:	2f08      	cmp	r7, #8
 8013abe:	bfd8      	it	le
 8013ac0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8013ac2:	f100 0001 	add.w	r0, r0, #1
 8013ac6:	bfda      	itte	le
 8013ac8:	fb02 3301 	mlale	r3, r2, r1, r3
 8013acc:	9309      	strle	r3, [sp, #36]	; 0x24
 8013ace:	fb02 3909 	mlagt	r9, r2, r9, r3
 8013ad2:	3701      	adds	r7, #1
 8013ad4:	901d      	str	r0, [sp, #116]	; 0x74
 8013ad6:	e7bf      	b.n	8013a58 <_strtod_l+0x158>
 8013ad8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013ada:	195a      	adds	r2, r3, r5
 8013adc:	921d      	str	r2, [sp, #116]	; 0x74
 8013ade:	5d5b      	ldrb	r3, [r3, r5]
 8013ae0:	2f00      	cmp	r7, #0
 8013ae2:	d037      	beq.n	8013b54 <_strtod_l+0x254>
 8013ae4:	9007      	str	r0, [sp, #28]
 8013ae6:	463d      	mov	r5, r7
 8013ae8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013aec:	2a09      	cmp	r2, #9
 8013aee:	d912      	bls.n	8013b16 <_strtod_l+0x216>
 8013af0:	2201      	movs	r2, #1
 8013af2:	e7c2      	b.n	8013a7a <_strtod_l+0x17a>
 8013af4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013af6:	1c5a      	adds	r2, r3, #1
 8013af8:	921d      	str	r2, [sp, #116]	; 0x74
 8013afa:	785b      	ldrb	r3, [r3, #1]
 8013afc:	3001      	adds	r0, #1
 8013afe:	2b30      	cmp	r3, #48	; 0x30
 8013b00:	d0f8      	beq.n	8013af4 <_strtod_l+0x1f4>
 8013b02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013b06:	2a08      	cmp	r2, #8
 8013b08:	f200 84db 	bhi.w	80144c2 <_strtod_l+0xbc2>
 8013b0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013b0e:	9007      	str	r0, [sp, #28]
 8013b10:	2000      	movs	r0, #0
 8013b12:	920a      	str	r2, [sp, #40]	; 0x28
 8013b14:	4605      	mov	r5, r0
 8013b16:	3b30      	subs	r3, #48	; 0x30
 8013b18:	f100 0201 	add.w	r2, r0, #1
 8013b1c:	d014      	beq.n	8013b48 <_strtod_l+0x248>
 8013b1e:	9907      	ldr	r1, [sp, #28]
 8013b20:	4411      	add	r1, r2
 8013b22:	9107      	str	r1, [sp, #28]
 8013b24:	462a      	mov	r2, r5
 8013b26:	eb00 0e05 	add.w	lr, r0, r5
 8013b2a:	210a      	movs	r1, #10
 8013b2c:	4572      	cmp	r2, lr
 8013b2e:	d113      	bne.n	8013b58 <_strtod_l+0x258>
 8013b30:	182a      	adds	r2, r5, r0
 8013b32:	2a08      	cmp	r2, #8
 8013b34:	f105 0501 	add.w	r5, r5, #1
 8013b38:	4405      	add	r5, r0
 8013b3a:	dc1c      	bgt.n	8013b76 <_strtod_l+0x276>
 8013b3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013b3e:	220a      	movs	r2, #10
 8013b40:	fb02 3301 	mla	r3, r2, r1, r3
 8013b44:	9309      	str	r3, [sp, #36]	; 0x24
 8013b46:	2200      	movs	r2, #0
 8013b48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013b4a:	1c59      	adds	r1, r3, #1
 8013b4c:	911d      	str	r1, [sp, #116]	; 0x74
 8013b4e:	785b      	ldrb	r3, [r3, #1]
 8013b50:	4610      	mov	r0, r2
 8013b52:	e7c9      	b.n	8013ae8 <_strtod_l+0x1e8>
 8013b54:	4638      	mov	r0, r7
 8013b56:	e7d2      	b.n	8013afe <_strtod_l+0x1fe>
 8013b58:	2a08      	cmp	r2, #8
 8013b5a:	dc04      	bgt.n	8013b66 <_strtod_l+0x266>
 8013b5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013b5e:	434e      	muls	r6, r1
 8013b60:	9609      	str	r6, [sp, #36]	; 0x24
 8013b62:	3201      	adds	r2, #1
 8013b64:	e7e2      	b.n	8013b2c <_strtod_l+0x22c>
 8013b66:	f102 0c01 	add.w	ip, r2, #1
 8013b6a:	f1bc 0f10 	cmp.w	ip, #16
 8013b6e:	bfd8      	it	le
 8013b70:	fb01 f909 	mulle.w	r9, r1, r9
 8013b74:	e7f5      	b.n	8013b62 <_strtod_l+0x262>
 8013b76:	2d10      	cmp	r5, #16
 8013b78:	bfdc      	itt	le
 8013b7a:	220a      	movle	r2, #10
 8013b7c:	fb02 3909 	mlale	r9, r2, r9, r3
 8013b80:	e7e1      	b.n	8013b46 <_strtod_l+0x246>
 8013b82:	2300      	movs	r3, #0
 8013b84:	9307      	str	r3, [sp, #28]
 8013b86:	2201      	movs	r2, #1
 8013b88:	e77c      	b.n	8013a84 <_strtod_l+0x184>
 8013b8a:	f04f 0c00 	mov.w	ip, #0
 8013b8e:	f108 0302 	add.w	r3, r8, #2
 8013b92:	931d      	str	r3, [sp, #116]	; 0x74
 8013b94:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013b98:	e785      	b.n	8013aa6 <_strtod_l+0x1a6>
 8013b9a:	f04f 0c01 	mov.w	ip, #1
 8013b9e:	e7f6      	b.n	8013b8e <_strtod_l+0x28e>
 8013ba0:	08017ff4 	.word	0x08017ff4
 8013ba4:	08017d64 	.word	0x08017d64
 8013ba8:	7ff00000 	.word	0x7ff00000
 8013bac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013bae:	1c59      	adds	r1, r3, #1
 8013bb0:	911d      	str	r1, [sp, #116]	; 0x74
 8013bb2:	785b      	ldrb	r3, [r3, #1]
 8013bb4:	2b30      	cmp	r3, #48	; 0x30
 8013bb6:	d0f9      	beq.n	8013bac <_strtod_l+0x2ac>
 8013bb8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8013bbc:	2908      	cmp	r1, #8
 8013bbe:	f63f af79 	bhi.w	8013ab4 <_strtod_l+0x1b4>
 8013bc2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013bc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013bc8:	9308      	str	r3, [sp, #32]
 8013bca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013bcc:	1c59      	adds	r1, r3, #1
 8013bce:	911d      	str	r1, [sp, #116]	; 0x74
 8013bd0:	785b      	ldrb	r3, [r3, #1]
 8013bd2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8013bd6:	2e09      	cmp	r6, #9
 8013bd8:	d937      	bls.n	8013c4a <_strtod_l+0x34a>
 8013bda:	9e08      	ldr	r6, [sp, #32]
 8013bdc:	1b89      	subs	r1, r1, r6
 8013bde:	2908      	cmp	r1, #8
 8013be0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013be4:	dc02      	bgt.n	8013bec <_strtod_l+0x2ec>
 8013be6:	4576      	cmp	r6, lr
 8013be8:	bfa8      	it	ge
 8013bea:	4676      	movge	r6, lr
 8013bec:	f1bc 0f00 	cmp.w	ip, #0
 8013bf0:	d000      	beq.n	8013bf4 <_strtod_l+0x2f4>
 8013bf2:	4276      	negs	r6, r6
 8013bf4:	2d00      	cmp	r5, #0
 8013bf6:	d14f      	bne.n	8013c98 <_strtod_l+0x398>
 8013bf8:	9904      	ldr	r1, [sp, #16]
 8013bfa:	4301      	orrs	r1, r0
 8013bfc:	f47f aec2 	bne.w	8013984 <_strtod_l+0x84>
 8013c00:	2a00      	cmp	r2, #0
 8013c02:	f47f aedb 	bne.w	80139bc <_strtod_l+0xbc>
 8013c06:	2b69      	cmp	r3, #105	; 0x69
 8013c08:	d027      	beq.n	8013c5a <_strtod_l+0x35a>
 8013c0a:	dc24      	bgt.n	8013c56 <_strtod_l+0x356>
 8013c0c:	2b49      	cmp	r3, #73	; 0x49
 8013c0e:	d024      	beq.n	8013c5a <_strtod_l+0x35a>
 8013c10:	2b4e      	cmp	r3, #78	; 0x4e
 8013c12:	f47f aed3 	bne.w	80139bc <_strtod_l+0xbc>
 8013c16:	499e      	ldr	r1, [pc, #632]	; (8013e90 <_strtod_l+0x590>)
 8013c18:	a81d      	add	r0, sp, #116	; 0x74
 8013c1a:	f001 ffd1 	bl	8015bc0 <__match>
 8013c1e:	2800      	cmp	r0, #0
 8013c20:	f43f aecc 	beq.w	80139bc <_strtod_l+0xbc>
 8013c24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013c26:	781b      	ldrb	r3, [r3, #0]
 8013c28:	2b28      	cmp	r3, #40	; 0x28
 8013c2a:	d12d      	bne.n	8013c88 <_strtod_l+0x388>
 8013c2c:	4999      	ldr	r1, [pc, #612]	; (8013e94 <_strtod_l+0x594>)
 8013c2e:	aa20      	add	r2, sp, #128	; 0x80
 8013c30:	a81d      	add	r0, sp, #116	; 0x74
 8013c32:	f001 ffd9 	bl	8015be8 <__hexnan>
 8013c36:	2805      	cmp	r0, #5
 8013c38:	d126      	bne.n	8013c88 <_strtod_l+0x388>
 8013c3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c3c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8013c40:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013c44:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013c48:	e69c      	b.n	8013984 <_strtod_l+0x84>
 8013c4a:	210a      	movs	r1, #10
 8013c4c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013c50:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013c54:	e7b9      	b.n	8013bca <_strtod_l+0x2ca>
 8013c56:	2b6e      	cmp	r3, #110	; 0x6e
 8013c58:	e7db      	b.n	8013c12 <_strtod_l+0x312>
 8013c5a:	498f      	ldr	r1, [pc, #572]	; (8013e98 <_strtod_l+0x598>)
 8013c5c:	a81d      	add	r0, sp, #116	; 0x74
 8013c5e:	f001 ffaf 	bl	8015bc0 <__match>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	f43f aeaa 	beq.w	80139bc <_strtod_l+0xbc>
 8013c68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013c6a:	498c      	ldr	r1, [pc, #560]	; (8013e9c <_strtod_l+0x59c>)
 8013c6c:	3b01      	subs	r3, #1
 8013c6e:	a81d      	add	r0, sp, #116	; 0x74
 8013c70:	931d      	str	r3, [sp, #116]	; 0x74
 8013c72:	f001 ffa5 	bl	8015bc0 <__match>
 8013c76:	b910      	cbnz	r0, 8013c7e <_strtod_l+0x37e>
 8013c78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013c7a:	3301      	adds	r3, #1
 8013c7c:	931d      	str	r3, [sp, #116]	; 0x74
 8013c7e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8013eac <_strtod_l+0x5ac>
 8013c82:	f04f 0a00 	mov.w	sl, #0
 8013c86:	e67d      	b.n	8013984 <_strtod_l+0x84>
 8013c88:	4885      	ldr	r0, [pc, #532]	; (8013ea0 <_strtod_l+0x5a0>)
 8013c8a:	f003 fb55 	bl	8017338 <nan>
 8013c8e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013c92:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013c96:	e675      	b.n	8013984 <_strtod_l+0x84>
 8013c98:	9b07      	ldr	r3, [sp, #28]
 8013c9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c9c:	1af3      	subs	r3, r6, r3
 8013c9e:	2f00      	cmp	r7, #0
 8013ca0:	bf08      	it	eq
 8013ca2:	462f      	moveq	r7, r5
 8013ca4:	2d10      	cmp	r5, #16
 8013ca6:	9308      	str	r3, [sp, #32]
 8013ca8:	46a8      	mov	r8, r5
 8013caa:	bfa8      	it	ge
 8013cac:	f04f 0810 	movge.w	r8, #16
 8013cb0:	f7ec fc38 	bl	8000524 <__aeabi_ui2d>
 8013cb4:	2d09      	cmp	r5, #9
 8013cb6:	4682      	mov	sl, r0
 8013cb8:	468b      	mov	fp, r1
 8013cba:	dd13      	ble.n	8013ce4 <_strtod_l+0x3e4>
 8013cbc:	4b79      	ldr	r3, [pc, #484]	; (8013ea4 <_strtod_l+0x5a4>)
 8013cbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013cc2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013cc6:	f7ec fca7 	bl	8000618 <__aeabi_dmul>
 8013cca:	4682      	mov	sl, r0
 8013ccc:	4648      	mov	r0, r9
 8013cce:	468b      	mov	fp, r1
 8013cd0:	f7ec fc28 	bl	8000524 <__aeabi_ui2d>
 8013cd4:	4602      	mov	r2, r0
 8013cd6:	460b      	mov	r3, r1
 8013cd8:	4650      	mov	r0, sl
 8013cda:	4659      	mov	r1, fp
 8013cdc:	f7ec fae6 	bl	80002ac <__adddf3>
 8013ce0:	4682      	mov	sl, r0
 8013ce2:	468b      	mov	fp, r1
 8013ce4:	2d0f      	cmp	r5, #15
 8013ce6:	dc38      	bgt.n	8013d5a <_strtod_l+0x45a>
 8013ce8:	9b08      	ldr	r3, [sp, #32]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	f43f ae4a 	beq.w	8013984 <_strtod_l+0x84>
 8013cf0:	dd24      	ble.n	8013d3c <_strtod_l+0x43c>
 8013cf2:	2b16      	cmp	r3, #22
 8013cf4:	dc0b      	bgt.n	8013d0e <_strtod_l+0x40e>
 8013cf6:	4d6b      	ldr	r5, [pc, #428]	; (8013ea4 <_strtod_l+0x5a4>)
 8013cf8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8013cfc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013d00:	4652      	mov	r2, sl
 8013d02:	465b      	mov	r3, fp
 8013d04:	f7ec fc88 	bl	8000618 <__aeabi_dmul>
 8013d08:	4682      	mov	sl, r0
 8013d0a:	468b      	mov	fp, r1
 8013d0c:	e63a      	b.n	8013984 <_strtod_l+0x84>
 8013d0e:	9a08      	ldr	r2, [sp, #32]
 8013d10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8013d14:	4293      	cmp	r3, r2
 8013d16:	db20      	blt.n	8013d5a <_strtod_l+0x45a>
 8013d18:	4c62      	ldr	r4, [pc, #392]	; (8013ea4 <_strtod_l+0x5a4>)
 8013d1a:	f1c5 050f 	rsb	r5, r5, #15
 8013d1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013d22:	4652      	mov	r2, sl
 8013d24:	465b      	mov	r3, fp
 8013d26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d2a:	f7ec fc75 	bl	8000618 <__aeabi_dmul>
 8013d2e:	9b08      	ldr	r3, [sp, #32]
 8013d30:	1b5d      	subs	r5, r3, r5
 8013d32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013d36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013d3a:	e7e3      	b.n	8013d04 <_strtod_l+0x404>
 8013d3c:	9b08      	ldr	r3, [sp, #32]
 8013d3e:	3316      	adds	r3, #22
 8013d40:	db0b      	blt.n	8013d5a <_strtod_l+0x45a>
 8013d42:	9b07      	ldr	r3, [sp, #28]
 8013d44:	4a57      	ldr	r2, [pc, #348]	; (8013ea4 <_strtod_l+0x5a4>)
 8013d46:	1b9e      	subs	r6, r3, r6
 8013d48:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8013d4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013d50:	4650      	mov	r0, sl
 8013d52:	4659      	mov	r1, fp
 8013d54:	f7ec fd8a 	bl	800086c <__aeabi_ddiv>
 8013d58:	e7d6      	b.n	8013d08 <_strtod_l+0x408>
 8013d5a:	9b08      	ldr	r3, [sp, #32]
 8013d5c:	eba5 0808 	sub.w	r8, r5, r8
 8013d60:	4498      	add	r8, r3
 8013d62:	f1b8 0f00 	cmp.w	r8, #0
 8013d66:	dd71      	ble.n	8013e4c <_strtod_l+0x54c>
 8013d68:	f018 030f 	ands.w	r3, r8, #15
 8013d6c:	d00a      	beq.n	8013d84 <_strtod_l+0x484>
 8013d6e:	494d      	ldr	r1, [pc, #308]	; (8013ea4 <_strtod_l+0x5a4>)
 8013d70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013d74:	4652      	mov	r2, sl
 8013d76:	465b      	mov	r3, fp
 8013d78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d7c:	f7ec fc4c 	bl	8000618 <__aeabi_dmul>
 8013d80:	4682      	mov	sl, r0
 8013d82:	468b      	mov	fp, r1
 8013d84:	f038 080f 	bics.w	r8, r8, #15
 8013d88:	d04d      	beq.n	8013e26 <_strtod_l+0x526>
 8013d8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013d8e:	dd22      	ble.n	8013dd6 <_strtod_l+0x4d6>
 8013d90:	2500      	movs	r5, #0
 8013d92:	462e      	mov	r6, r5
 8013d94:	9509      	str	r5, [sp, #36]	; 0x24
 8013d96:	9507      	str	r5, [sp, #28]
 8013d98:	2322      	movs	r3, #34	; 0x22
 8013d9a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8013eac <_strtod_l+0x5ac>
 8013d9e:	6023      	str	r3, [r4, #0]
 8013da0:	f04f 0a00 	mov.w	sl, #0
 8013da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	f43f adec 	beq.w	8013984 <_strtod_l+0x84>
 8013dac:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013dae:	4620      	mov	r0, r4
 8013db0:	f002 f82a 	bl	8015e08 <_Bfree>
 8013db4:	9907      	ldr	r1, [sp, #28]
 8013db6:	4620      	mov	r0, r4
 8013db8:	f002 f826 	bl	8015e08 <_Bfree>
 8013dbc:	4631      	mov	r1, r6
 8013dbe:	4620      	mov	r0, r4
 8013dc0:	f002 f822 	bl	8015e08 <_Bfree>
 8013dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013dc6:	4620      	mov	r0, r4
 8013dc8:	f002 f81e 	bl	8015e08 <_Bfree>
 8013dcc:	4629      	mov	r1, r5
 8013dce:	4620      	mov	r0, r4
 8013dd0:	f002 f81a 	bl	8015e08 <_Bfree>
 8013dd4:	e5d6      	b.n	8013984 <_strtod_l+0x84>
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013ddc:	4650      	mov	r0, sl
 8013dde:	4659      	mov	r1, fp
 8013de0:	4699      	mov	r9, r3
 8013de2:	f1b8 0f01 	cmp.w	r8, #1
 8013de6:	dc21      	bgt.n	8013e2c <_strtod_l+0x52c>
 8013de8:	b10b      	cbz	r3, 8013dee <_strtod_l+0x4ee>
 8013dea:	4682      	mov	sl, r0
 8013dec:	468b      	mov	fp, r1
 8013dee:	4b2e      	ldr	r3, [pc, #184]	; (8013ea8 <_strtod_l+0x5a8>)
 8013df0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013df4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013df8:	4652      	mov	r2, sl
 8013dfa:	465b      	mov	r3, fp
 8013dfc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013e00:	f7ec fc0a 	bl	8000618 <__aeabi_dmul>
 8013e04:	4b29      	ldr	r3, [pc, #164]	; (8013eac <_strtod_l+0x5ac>)
 8013e06:	460a      	mov	r2, r1
 8013e08:	400b      	ands	r3, r1
 8013e0a:	4929      	ldr	r1, [pc, #164]	; (8013eb0 <_strtod_l+0x5b0>)
 8013e0c:	428b      	cmp	r3, r1
 8013e0e:	4682      	mov	sl, r0
 8013e10:	d8be      	bhi.n	8013d90 <_strtod_l+0x490>
 8013e12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013e16:	428b      	cmp	r3, r1
 8013e18:	bf86      	itte	hi
 8013e1a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013eb4 <_strtod_l+0x5b4>
 8013e1e:	f04f 3aff 	movhi.w	sl, #4294967295
 8013e22:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013e26:	2300      	movs	r3, #0
 8013e28:	9304      	str	r3, [sp, #16]
 8013e2a:	e081      	b.n	8013f30 <_strtod_l+0x630>
 8013e2c:	f018 0f01 	tst.w	r8, #1
 8013e30:	d007      	beq.n	8013e42 <_strtod_l+0x542>
 8013e32:	4b1d      	ldr	r3, [pc, #116]	; (8013ea8 <_strtod_l+0x5a8>)
 8013e34:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e3c:	f7ec fbec 	bl	8000618 <__aeabi_dmul>
 8013e40:	2301      	movs	r3, #1
 8013e42:	f109 0901 	add.w	r9, r9, #1
 8013e46:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013e4a:	e7ca      	b.n	8013de2 <_strtod_l+0x4e2>
 8013e4c:	d0eb      	beq.n	8013e26 <_strtod_l+0x526>
 8013e4e:	f1c8 0800 	rsb	r8, r8, #0
 8013e52:	f018 020f 	ands.w	r2, r8, #15
 8013e56:	d00a      	beq.n	8013e6e <_strtod_l+0x56e>
 8013e58:	4b12      	ldr	r3, [pc, #72]	; (8013ea4 <_strtod_l+0x5a4>)
 8013e5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013e5e:	4650      	mov	r0, sl
 8013e60:	4659      	mov	r1, fp
 8013e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e66:	f7ec fd01 	bl	800086c <__aeabi_ddiv>
 8013e6a:	4682      	mov	sl, r0
 8013e6c:	468b      	mov	fp, r1
 8013e6e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013e72:	d0d8      	beq.n	8013e26 <_strtod_l+0x526>
 8013e74:	f1b8 0f1f 	cmp.w	r8, #31
 8013e78:	dd1e      	ble.n	8013eb8 <_strtod_l+0x5b8>
 8013e7a:	2500      	movs	r5, #0
 8013e7c:	462e      	mov	r6, r5
 8013e7e:	9509      	str	r5, [sp, #36]	; 0x24
 8013e80:	9507      	str	r5, [sp, #28]
 8013e82:	2322      	movs	r3, #34	; 0x22
 8013e84:	f04f 0a00 	mov.w	sl, #0
 8013e88:	f04f 0b00 	mov.w	fp, #0
 8013e8c:	6023      	str	r3, [r4, #0]
 8013e8e:	e789      	b.n	8013da4 <_strtod_l+0x4a4>
 8013e90:	08017d39 	.word	0x08017d39
 8013e94:	08017d78 	.word	0x08017d78
 8013e98:	08017d31 	.word	0x08017d31
 8013e9c:	08017ef8 	.word	0x08017ef8
 8013ea0:	08017df3 	.word	0x08017df3
 8013ea4:	08018090 	.word	0x08018090
 8013ea8:	08018068 	.word	0x08018068
 8013eac:	7ff00000 	.word	0x7ff00000
 8013eb0:	7ca00000 	.word	0x7ca00000
 8013eb4:	7fefffff 	.word	0x7fefffff
 8013eb8:	f018 0310 	ands.w	r3, r8, #16
 8013ebc:	bf18      	it	ne
 8013ebe:	236a      	movne	r3, #106	; 0x6a
 8013ec0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8014278 <_strtod_l+0x978>
 8013ec4:	9304      	str	r3, [sp, #16]
 8013ec6:	4650      	mov	r0, sl
 8013ec8:	4659      	mov	r1, fp
 8013eca:	2300      	movs	r3, #0
 8013ecc:	f018 0f01 	tst.w	r8, #1
 8013ed0:	d004      	beq.n	8013edc <_strtod_l+0x5dc>
 8013ed2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013ed6:	f7ec fb9f 	bl	8000618 <__aeabi_dmul>
 8013eda:	2301      	movs	r3, #1
 8013edc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013ee0:	f109 0908 	add.w	r9, r9, #8
 8013ee4:	d1f2      	bne.n	8013ecc <_strtod_l+0x5cc>
 8013ee6:	b10b      	cbz	r3, 8013eec <_strtod_l+0x5ec>
 8013ee8:	4682      	mov	sl, r0
 8013eea:	468b      	mov	fp, r1
 8013eec:	9b04      	ldr	r3, [sp, #16]
 8013eee:	b1bb      	cbz	r3, 8013f20 <_strtod_l+0x620>
 8013ef0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013ef4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	4659      	mov	r1, fp
 8013efc:	dd10      	ble.n	8013f20 <_strtod_l+0x620>
 8013efe:	2b1f      	cmp	r3, #31
 8013f00:	f340 8128 	ble.w	8014154 <_strtod_l+0x854>
 8013f04:	2b34      	cmp	r3, #52	; 0x34
 8013f06:	bfde      	ittt	le
 8013f08:	3b20      	suble	r3, #32
 8013f0a:	f04f 32ff 	movle.w	r2, #4294967295
 8013f0e:	fa02 f303 	lslle.w	r3, r2, r3
 8013f12:	f04f 0a00 	mov.w	sl, #0
 8013f16:	bfcc      	ite	gt
 8013f18:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013f1c:	ea03 0b01 	andle.w	fp, r3, r1
 8013f20:	2200      	movs	r2, #0
 8013f22:	2300      	movs	r3, #0
 8013f24:	4650      	mov	r0, sl
 8013f26:	4659      	mov	r1, fp
 8013f28:	f7ec fdde 	bl	8000ae8 <__aeabi_dcmpeq>
 8013f2c:	2800      	cmp	r0, #0
 8013f2e:	d1a4      	bne.n	8013e7a <_strtod_l+0x57a>
 8013f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f32:	9300      	str	r3, [sp, #0]
 8013f34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f36:	462b      	mov	r3, r5
 8013f38:	463a      	mov	r2, r7
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	f001 ffd0 	bl	8015ee0 <__s2b>
 8013f40:	9009      	str	r0, [sp, #36]	; 0x24
 8013f42:	2800      	cmp	r0, #0
 8013f44:	f43f af24 	beq.w	8013d90 <_strtod_l+0x490>
 8013f48:	9b07      	ldr	r3, [sp, #28]
 8013f4a:	1b9e      	subs	r6, r3, r6
 8013f4c:	9b08      	ldr	r3, [sp, #32]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	bfb4      	ite	lt
 8013f52:	4633      	movlt	r3, r6
 8013f54:	2300      	movge	r3, #0
 8013f56:	9310      	str	r3, [sp, #64]	; 0x40
 8013f58:	9b08      	ldr	r3, [sp, #32]
 8013f5a:	2500      	movs	r5, #0
 8013f5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013f60:	9318      	str	r3, [sp, #96]	; 0x60
 8013f62:	462e      	mov	r6, r5
 8013f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f66:	4620      	mov	r0, r4
 8013f68:	6859      	ldr	r1, [r3, #4]
 8013f6a:	f001 ff0d 	bl	8015d88 <_Balloc>
 8013f6e:	9007      	str	r0, [sp, #28]
 8013f70:	2800      	cmp	r0, #0
 8013f72:	f43f af11 	beq.w	8013d98 <_strtod_l+0x498>
 8013f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f78:	691a      	ldr	r2, [r3, #16]
 8013f7a:	3202      	adds	r2, #2
 8013f7c:	f103 010c 	add.w	r1, r3, #12
 8013f80:	0092      	lsls	r2, r2, #2
 8013f82:	300c      	adds	r0, #12
 8013f84:	f7fe fbe4 	bl	8012750 <memcpy>
 8013f88:	ec4b ab10 	vmov	d0, sl, fp
 8013f8c:	aa20      	add	r2, sp, #128	; 0x80
 8013f8e:	a91f      	add	r1, sp, #124	; 0x7c
 8013f90:	4620      	mov	r0, r4
 8013f92:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8013f96:	f002 fadf 	bl	8016558 <__d2b>
 8013f9a:	901e      	str	r0, [sp, #120]	; 0x78
 8013f9c:	2800      	cmp	r0, #0
 8013f9e:	f43f aefb 	beq.w	8013d98 <_strtod_l+0x498>
 8013fa2:	2101      	movs	r1, #1
 8013fa4:	4620      	mov	r0, r4
 8013fa6:	f002 f835 	bl	8016014 <__i2b>
 8013faa:	4606      	mov	r6, r0
 8013fac:	2800      	cmp	r0, #0
 8013fae:	f43f aef3 	beq.w	8013d98 <_strtod_l+0x498>
 8013fb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013fb4:	9904      	ldr	r1, [sp, #16]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	bfab      	itete	ge
 8013fba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8013fbc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8013fbe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8013fc0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8013fc4:	bfac      	ite	ge
 8013fc6:	eb03 0902 	addge.w	r9, r3, r2
 8013fca:	1ad7      	sublt	r7, r2, r3
 8013fcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013fce:	eba3 0801 	sub.w	r8, r3, r1
 8013fd2:	4490      	add	r8, r2
 8013fd4:	4ba3      	ldr	r3, [pc, #652]	; (8014264 <_strtod_l+0x964>)
 8013fd6:	f108 38ff 	add.w	r8, r8, #4294967295
 8013fda:	4598      	cmp	r8, r3
 8013fdc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013fe0:	f280 80cc 	bge.w	801417c <_strtod_l+0x87c>
 8013fe4:	eba3 0308 	sub.w	r3, r3, r8
 8013fe8:	2b1f      	cmp	r3, #31
 8013fea:	eba2 0203 	sub.w	r2, r2, r3
 8013fee:	f04f 0101 	mov.w	r1, #1
 8013ff2:	f300 80b6 	bgt.w	8014162 <_strtod_l+0x862>
 8013ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8013ffa:	9311      	str	r3, [sp, #68]	; 0x44
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	930c      	str	r3, [sp, #48]	; 0x30
 8014000:	eb09 0802 	add.w	r8, r9, r2
 8014004:	9b04      	ldr	r3, [sp, #16]
 8014006:	45c1      	cmp	r9, r8
 8014008:	4417      	add	r7, r2
 801400a:	441f      	add	r7, r3
 801400c:	464b      	mov	r3, r9
 801400e:	bfa8      	it	ge
 8014010:	4643      	movge	r3, r8
 8014012:	42bb      	cmp	r3, r7
 8014014:	bfa8      	it	ge
 8014016:	463b      	movge	r3, r7
 8014018:	2b00      	cmp	r3, #0
 801401a:	bfc2      	ittt	gt
 801401c:	eba8 0803 	subgt.w	r8, r8, r3
 8014020:	1aff      	subgt	r7, r7, r3
 8014022:	eba9 0903 	subgt.w	r9, r9, r3
 8014026:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014028:	2b00      	cmp	r3, #0
 801402a:	dd17      	ble.n	801405c <_strtod_l+0x75c>
 801402c:	4631      	mov	r1, r6
 801402e:	461a      	mov	r2, r3
 8014030:	4620      	mov	r0, r4
 8014032:	f002 f8ab 	bl	801618c <__pow5mult>
 8014036:	4606      	mov	r6, r0
 8014038:	2800      	cmp	r0, #0
 801403a:	f43f aead 	beq.w	8013d98 <_strtod_l+0x498>
 801403e:	4601      	mov	r1, r0
 8014040:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014042:	4620      	mov	r0, r4
 8014044:	f001 fffc 	bl	8016040 <__multiply>
 8014048:	900f      	str	r0, [sp, #60]	; 0x3c
 801404a:	2800      	cmp	r0, #0
 801404c:	f43f aea4 	beq.w	8013d98 <_strtod_l+0x498>
 8014050:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014052:	4620      	mov	r0, r4
 8014054:	f001 fed8 	bl	8015e08 <_Bfree>
 8014058:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801405a:	931e      	str	r3, [sp, #120]	; 0x78
 801405c:	f1b8 0f00 	cmp.w	r8, #0
 8014060:	f300 8091 	bgt.w	8014186 <_strtod_l+0x886>
 8014064:	9b08      	ldr	r3, [sp, #32]
 8014066:	2b00      	cmp	r3, #0
 8014068:	dd08      	ble.n	801407c <_strtod_l+0x77c>
 801406a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801406c:	9907      	ldr	r1, [sp, #28]
 801406e:	4620      	mov	r0, r4
 8014070:	f002 f88c 	bl	801618c <__pow5mult>
 8014074:	9007      	str	r0, [sp, #28]
 8014076:	2800      	cmp	r0, #0
 8014078:	f43f ae8e 	beq.w	8013d98 <_strtod_l+0x498>
 801407c:	2f00      	cmp	r7, #0
 801407e:	dd08      	ble.n	8014092 <_strtod_l+0x792>
 8014080:	9907      	ldr	r1, [sp, #28]
 8014082:	463a      	mov	r2, r7
 8014084:	4620      	mov	r0, r4
 8014086:	f002 f8db 	bl	8016240 <__lshift>
 801408a:	9007      	str	r0, [sp, #28]
 801408c:	2800      	cmp	r0, #0
 801408e:	f43f ae83 	beq.w	8013d98 <_strtod_l+0x498>
 8014092:	f1b9 0f00 	cmp.w	r9, #0
 8014096:	dd08      	ble.n	80140aa <_strtod_l+0x7aa>
 8014098:	4631      	mov	r1, r6
 801409a:	464a      	mov	r2, r9
 801409c:	4620      	mov	r0, r4
 801409e:	f002 f8cf 	bl	8016240 <__lshift>
 80140a2:	4606      	mov	r6, r0
 80140a4:	2800      	cmp	r0, #0
 80140a6:	f43f ae77 	beq.w	8013d98 <_strtod_l+0x498>
 80140aa:	9a07      	ldr	r2, [sp, #28]
 80140ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80140ae:	4620      	mov	r0, r4
 80140b0:	f002 f94e 	bl	8016350 <__mdiff>
 80140b4:	4605      	mov	r5, r0
 80140b6:	2800      	cmp	r0, #0
 80140b8:	f43f ae6e 	beq.w	8013d98 <_strtod_l+0x498>
 80140bc:	68c3      	ldr	r3, [r0, #12]
 80140be:	930f      	str	r3, [sp, #60]	; 0x3c
 80140c0:	2300      	movs	r3, #0
 80140c2:	60c3      	str	r3, [r0, #12]
 80140c4:	4631      	mov	r1, r6
 80140c6:	f002 f927 	bl	8016318 <__mcmp>
 80140ca:	2800      	cmp	r0, #0
 80140cc:	da65      	bge.n	801419a <_strtod_l+0x89a>
 80140ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140d0:	ea53 030a 	orrs.w	r3, r3, sl
 80140d4:	f040 8087 	bne.w	80141e6 <_strtod_l+0x8e6>
 80140d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80140dc:	2b00      	cmp	r3, #0
 80140de:	f040 8082 	bne.w	80141e6 <_strtod_l+0x8e6>
 80140e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80140e6:	0d1b      	lsrs	r3, r3, #20
 80140e8:	051b      	lsls	r3, r3, #20
 80140ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80140ee:	d97a      	bls.n	80141e6 <_strtod_l+0x8e6>
 80140f0:	696b      	ldr	r3, [r5, #20]
 80140f2:	b913      	cbnz	r3, 80140fa <_strtod_l+0x7fa>
 80140f4:	692b      	ldr	r3, [r5, #16]
 80140f6:	2b01      	cmp	r3, #1
 80140f8:	dd75      	ble.n	80141e6 <_strtod_l+0x8e6>
 80140fa:	4629      	mov	r1, r5
 80140fc:	2201      	movs	r2, #1
 80140fe:	4620      	mov	r0, r4
 8014100:	f002 f89e 	bl	8016240 <__lshift>
 8014104:	4631      	mov	r1, r6
 8014106:	4605      	mov	r5, r0
 8014108:	f002 f906 	bl	8016318 <__mcmp>
 801410c:	2800      	cmp	r0, #0
 801410e:	dd6a      	ble.n	80141e6 <_strtod_l+0x8e6>
 8014110:	9904      	ldr	r1, [sp, #16]
 8014112:	4a55      	ldr	r2, [pc, #340]	; (8014268 <_strtod_l+0x968>)
 8014114:	465b      	mov	r3, fp
 8014116:	2900      	cmp	r1, #0
 8014118:	f000 8085 	beq.w	8014226 <_strtod_l+0x926>
 801411c:	ea02 010b 	and.w	r1, r2, fp
 8014120:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014124:	dc7f      	bgt.n	8014226 <_strtod_l+0x926>
 8014126:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801412a:	f77f aeaa 	ble.w	8013e82 <_strtod_l+0x582>
 801412e:	4a4f      	ldr	r2, [pc, #316]	; (801426c <_strtod_l+0x96c>)
 8014130:	2300      	movs	r3, #0
 8014132:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8014136:	4650      	mov	r0, sl
 8014138:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801413c:	4659      	mov	r1, fp
 801413e:	f7ec fa6b 	bl	8000618 <__aeabi_dmul>
 8014142:	460b      	mov	r3, r1
 8014144:	4303      	orrs	r3, r0
 8014146:	bf08      	it	eq
 8014148:	2322      	moveq	r3, #34	; 0x22
 801414a:	4682      	mov	sl, r0
 801414c:	468b      	mov	fp, r1
 801414e:	bf08      	it	eq
 8014150:	6023      	streq	r3, [r4, #0]
 8014152:	e62b      	b.n	8013dac <_strtod_l+0x4ac>
 8014154:	f04f 32ff 	mov.w	r2, #4294967295
 8014158:	fa02 f303 	lsl.w	r3, r2, r3
 801415c:	ea03 0a0a 	and.w	sl, r3, sl
 8014160:	e6de      	b.n	8013f20 <_strtod_l+0x620>
 8014162:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8014166:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801416a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801416e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8014172:	fa01 f308 	lsl.w	r3, r1, r8
 8014176:	930c      	str	r3, [sp, #48]	; 0x30
 8014178:	9111      	str	r1, [sp, #68]	; 0x44
 801417a:	e741      	b.n	8014000 <_strtod_l+0x700>
 801417c:	2300      	movs	r3, #0
 801417e:	930c      	str	r3, [sp, #48]	; 0x30
 8014180:	2301      	movs	r3, #1
 8014182:	9311      	str	r3, [sp, #68]	; 0x44
 8014184:	e73c      	b.n	8014000 <_strtod_l+0x700>
 8014186:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014188:	4642      	mov	r2, r8
 801418a:	4620      	mov	r0, r4
 801418c:	f002 f858 	bl	8016240 <__lshift>
 8014190:	901e      	str	r0, [sp, #120]	; 0x78
 8014192:	2800      	cmp	r0, #0
 8014194:	f47f af66 	bne.w	8014064 <_strtod_l+0x764>
 8014198:	e5fe      	b.n	8013d98 <_strtod_l+0x498>
 801419a:	465f      	mov	r7, fp
 801419c:	d16e      	bne.n	801427c <_strtod_l+0x97c>
 801419e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80141a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80141a4:	b342      	cbz	r2, 80141f8 <_strtod_l+0x8f8>
 80141a6:	4a32      	ldr	r2, [pc, #200]	; (8014270 <_strtod_l+0x970>)
 80141a8:	4293      	cmp	r3, r2
 80141aa:	d128      	bne.n	80141fe <_strtod_l+0x8fe>
 80141ac:	9b04      	ldr	r3, [sp, #16]
 80141ae:	4650      	mov	r0, sl
 80141b0:	b1eb      	cbz	r3, 80141ee <_strtod_l+0x8ee>
 80141b2:	4a2d      	ldr	r2, [pc, #180]	; (8014268 <_strtod_l+0x968>)
 80141b4:	403a      	ands	r2, r7
 80141b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80141ba:	f04f 31ff 	mov.w	r1, #4294967295
 80141be:	d819      	bhi.n	80141f4 <_strtod_l+0x8f4>
 80141c0:	0d12      	lsrs	r2, r2, #20
 80141c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80141c6:	fa01 f303 	lsl.w	r3, r1, r3
 80141ca:	4298      	cmp	r0, r3
 80141cc:	d117      	bne.n	80141fe <_strtod_l+0x8fe>
 80141ce:	4b29      	ldr	r3, [pc, #164]	; (8014274 <_strtod_l+0x974>)
 80141d0:	429f      	cmp	r7, r3
 80141d2:	d102      	bne.n	80141da <_strtod_l+0x8da>
 80141d4:	3001      	adds	r0, #1
 80141d6:	f43f addf 	beq.w	8013d98 <_strtod_l+0x498>
 80141da:	4b23      	ldr	r3, [pc, #140]	; (8014268 <_strtod_l+0x968>)
 80141dc:	403b      	ands	r3, r7
 80141de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80141e2:	f04f 0a00 	mov.w	sl, #0
 80141e6:	9b04      	ldr	r3, [sp, #16]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d1a0      	bne.n	801412e <_strtod_l+0x82e>
 80141ec:	e5de      	b.n	8013dac <_strtod_l+0x4ac>
 80141ee:	f04f 33ff 	mov.w	r3, #4294967295
 80141f2:	e7ea      	b.n	80141ca <_strtod_l+0x8ca>
 80141f4:	460b      	mov	r3, r1
 80141f6:	e7e8      	b.n	80141ca <_strtod_l+0x8ca>
 80141f8:	ea53 030a 	orrs.w	r3, r3, sl
 80141fc:	d088      	beq.n	8014110 <_strtod_l+0x810>
 80141fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014200:	b1db      	cbz	r3, 801423a <_strtod_l+0x93a>
 8014202:	423b      	tst	r3, r7
 8014204:	d0ef      	beq.n	80141e6 <_strtod_l+0x8e6>
 8014206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014208:	9a04      	ldr	r2, [sp, #16]
 801420a:	4650      	mov	r0, sl
 801420c:	4659      	mov	r1, fp
 801420e:	b1c3      	cbz	r3, 8014242 <_strtod_l+0x942>
 8014210:	f7ff fb59 	bl	80138c6 <sulp>
 8014214:	4602      	mov	r2, r0
 8014216:	460b      	mov	r3, r1
 8014218:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801421c:	f7ec f846 	bl	80002ac <__adddf3>
 8014220:	4682      	mov	sl, r0
 8014222:	468b      	mov	fp, r1
 8014224:	e7df      	b.n	80141e6 <_strtod_l+0x8e6>
 8014226:	4013      	ands	r3, r2
 8014228:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801422c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014230:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014234:	f04f 3aff 	mov.w	sl, #4294967295
 8014238:	e7d5      	b.n	80141e6 <_strtod_l+0x8e6>
 801423a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801423c:	ea13 0f0a 	tst.w	r3, sl
 8014240:	e7e0      	b.n	8014204 <_strtod_l+0x904>
 8014242:	f7ff fb40 	bl	80138c6 <sulp>
 8014246:	4602      	mov	r2, r0
 8014248:	460b      	mov	r3, r1
 801424a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801424e:	f7ec f82b 	bl	80002a8 <__aeabi_dsub>
 8014252:	2200      	movs	r2, #0
 8014254:	2300      	movs	r3, #0
 8014256:	4682      	mov	sl, r0
 8014258:	468b      	mov	fp, r1
 801425a:	f7ec fc45 	bl	8000ae8 <__aeabi_dcmpeq>
 801425e:	2800      	cmp	r0, #0
 8014260:	d0c1      	beq.n	80141e6 <_strtod_l+0x8e6>
 8014262:	e60e      	b.n	8013e82 <_strtod_l+0x582>
 8014264:	fffffc02 	.word	0xfffffc02
 8014268:	7ff00000 	.word	0x7ff00000
 801426c:	39500000 	.word	0x39500000
 8014270:	000fffff 	.word	0x000fffff
 8014274:	7fefffff 	.word	0x7fefffff
 8014278:	08017d90 	.word	0x08017d90
 801427c:	4631      	mov	r1, r6
 801427e:	4628      	mov	r0, r5
 8014280:	f002 f9c6 	bl	8016610 <__ratio>
 8014284:	ec59 8b10 	vmov	r8, r9, d0
 8014288:	ee10 0a10 	vmov	r0, s0
 801428c:	2200      	movs	r2, #0
 801428e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014292:	4649      	mov	r1, r9
 8014294:	f7ec fc3c 	bl	8000b10 <__aeabi_dcmple>
 8014298:	2800      	cmp	r0, #0
 801429a:	d07c      	beq.n	8014396 <_strtod_l+0xa96>
 801429c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d04c      	beq.n	801433c <_strtod_l+0xa3c>
 80142a2:	4b95      	ldr	r3, [pc, #596]	; (80144f8 <_strtod_l+0xbf8>)
 80142a4:	2200      	movs	r2, #0
 80142a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80142aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80144f8 <_strtod_l+0xbf8>
 80142ae:	f04f 0800 	mov.w	r8, #0
 80142b2:	4b92      	ldr	r3, [pc, #584]	; (80144fc <_strtod_l+0xbfc>)
 80142b4:	403b      	ands	r3, r7
 80142b6:	9311      	str	r3, [sp, #68]	; 0x44
 80142b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80142ba:	4b91      	ldr	r3, [pc, #580]	; (8014500 <_strtod_l+0xc00>)
 80142bc:	429a      	cmp	r2, r3
 80142be:	f040 80b2 	bne.w	8014426 <_strtod_l+0xb26>
 80142c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80142c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80142ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80142ce:	ec4b ab10 	vmov	d0, sl, fp
 80142d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80142d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80142da:	f002 f8c1 	bl	8016460 <__ulp>
 80142de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80142e2:	ec53 2b10 	vmov	r2, r3, d0
 80142e6:	f7ec f997 	bl	8000618 <__aeabi_dmul>
 80142ea:	4652      	mov	r2, sl
 80142ec:	465b      	mov	r3, fp
 80142ee:	f7eb ffdd 	bl	80002ac <__adddf3>
 80142f2:	460b      	mov	r3, r1
 80142f4:	4981      	ldr	r1, [pc, #516]	; (80144fc <_strtod_l+0xbfc>)
 80142f6:	4a83      	ldr	r2, [pc, #524]	; (8014504 <_strtod_l+0xc04>)
 80142f8:	4019      	ands	r1, r3
 80142fa:	4291      	cmp	r1, r2
 80142fc:	4682      	mov	sl, r0
 80142fe:	d95e      	bls.n	80143be <_strtod_l+0xabe>
 8014300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014302:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014306:	4293      	cmp	r3, r2
 8014308:	d103      	bne.n	8014312 <_strtod_l+0xa12>
 801430a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801430c:	3301      	adds	r3, #1
 801430e:	f43f ad43 	beq.w	8013d98 <_strtod_l+0x498>
 8014312:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8014510 <_strtod_l+0xc10>
 8014316:	f04f 3aff 	mov.w	sl, #4294967295
 801431a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801431c:	4620      	mov	r0, r4
 801431e:	f001 fd73 	bl	8015e08 <_Bfree>
 8014322:	9907      	ldr	r1, [sp, #28]
 8014324:	4620      	mov	r0, r4
 8014326:	f001 fd6f 	bl	8015e08 <_Bfree>
 801432a:	4631      	mov	r1, r6
 801432c:	4620      	mov	r0, r4
 801432e:	f001 fd6b 	bl	8015e08 <_Bfree>
 8014332:	4629      	mov	r1, r5
 8014334:	4620      	mov	r0, r4
 8014336:	f001 fd67 	bl	8015e08 <_Bfree>
 801433a:	e613      	b.n	8013f64 <_strtod_l+0x664>
 801433c:	f1ba 0f00 	cmp.w	sl, #0
 8014340:	d11b      	bne.n	801437a <_strtod_l+0xa7a>
 8014342:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014346:	b9f3      	cbnz	r3, 8014386 <_strtod_l+0xa86>
 8014348:	4b6b      	ldr	r3, [pc, #428]	; (80144f8 <_strtod_l+0xbf8>)
 801434a:	2200      	movs	r2, #0
 801434c:	4640      	mov	r0, r8
 801434e:	4649      	mov	r1, r9
 8014350:	f7ec fbd4 	bl	8000afc <__aeabi_dcmplt>
 8014354:	b9d0      	cbnz	r0, 801438c <_strtod_l+0xa8c>
 8014356:	4640      	mov	r0, r8
 8014358:	4649      	mov	r1, r9
 801435a:	4b6b      	ldr	r3, [pc, #428]	; (8014508 <_strtod_l+0xc08>)
 801435c:	2200      	movs	r2, #0
 801435e:	f7ec f95b 	bl	8000618 <__aeabi_dmul>
 8014362:	4680      	mov	r8, r0
 8014364:	4689      	mov	r9, r1
 8014366:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801436a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801436e:	931b      	str	r3, [sp, #108]	; 0x6c
 8014370:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8014374:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014378:	e79b      	b.n	80142b2 <_strtod_l+0x9b2>
 801437a:	f1ba 0f01 	cmp.w	sl, #1
 801437e:	d102      	bne.n	8014386 <_strtod_l+0xa86>
 8014380:	2f00      	cmp	r7, #0
 8014382:	f43f ad7e 	beq.w	8013e82 <_strtod_l+0x582>
 8014386:	4b61      	ldr	r3, [pc, #388]	; (801450c <_strtod_l+0xc0c>)
 8014388:	2200      	movs	r2, #0
 801438a:	e78c      	b.n	80142a6 <_strtod_l+0x9a6>
 801438c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014508 <_strtod_l+0xc08>
 8014390:	f04f 0800 	mov.w	r8, #0
 8014394:	e7e7      	b.n	8014366 <_strtod_l+0xa66>
 8014396:	4b5c      	ldr	r3, [pc, #368]	; (8014508 <_strtod_l+0xc08>)
 8014398:	4640      	mov	r0, r8
 801439a:	4649      	mov	r1, r9
 801439c:	2200      	movs	r2, #0
 801439e:	f7ec f93b 	bl	8000618 <__aeabi_dmul>
 80143a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143a4:	4680      	mov	r8, r0
 80143a6:	4689      	mov	r9, r1
 80143a8:	b933      	cbnz	r3, 80143b8 <_strtod_l+0xab8>
 80143aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80143ae:	9012      	str	r0, [sp, #72]	; 0x48
 80143b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80143b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80143b6:	e7dd      	b.n	8014374 <_strtod_l+0xa74>
 80143b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80143bc:	e7f9      	b.n	80143b2 <_strtod_l+0xab2>
 80143be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80143c2:	9b04      	ldr	r3, [sp, #16]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d1a8      	bne.n	801431a <_strtod_l+0xa1a>
 80143c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80143cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80143ce:	0d1b      	lsrs	r3, r3, #20
 80143d0:	051b      	lsls	r3, r3, #20
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d1a1      	bne.n	801431a <_strtod_l+0xa1a>
 80143d6:	4640      	mov	r0, r8
 80143d8:	4649      	mov	r1, r9
 80143da:	f7ec fc7d 	bl	8000cd8 <__aeabi_d2lz>
 80143de:	f7ec f8ed 	bl	80005bc <__aeabi_l2d>
 80143e2:	4602      	mov	r2, r0
 80143e4:	460b      	mov	r3, r1
 80143e6:	4640      	mov	r0, r8
 80143e8:	4649      	mov	r1, r9
 80143ea:	f7eb ff5d 	bl	80002a8 <__aeabi_dsub>
 80143ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80143f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80143f4:	ea43 030a 	orr.w	r3, r3, sl
 80143f8:	4313      	orrs	r3, r2
 80143fa:	4680      	mov	r8, r0
 80143fc:	4689      	mov	r9, r1
 80143fe:	d053      	beq.n	80144a8 <_strtod_l+0xba8>
 8014400:	a335      	add	r3, pc, #212	; (adr r3, 80144d8 <_strtod_l+0xbd8>)
 8014402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014406:	f7ec fb79 	bl	8000afc <__aeabi_dcmplt>
 801440a:	2800      	cmp	r0, #0
 801440c:	f47f acce 	bne.w	8013dac <_strtod_l+0x4ac>
 8014410:	a333      	add	r3, pc, #204	; (adr r3, 80144e0 <_strtod_l+0xbe0>)
 8014412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014416:	4640      	mov	r0, r8
 8014418:	4649      	mov	r1, r9
 801441a:	f7ec fb8d 	bl	8000b38 <__aeabi_dcmpgt>
 801441e:	2800      	cmp	r0, #0
 8014420:	f43f af7b 	beq.w	801431a <_strtod_l+0xa1a>
 8014424:	e4c2      	b.n	8013dac <_strtod_l+0x4ac>
 8014426:	9b04      	ldr	r3, [sp, #16]
 8014428:	b333      	cbz	r3, 8014478 <_strtod_l+0xb78>
 801442a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801442c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014430:	d822      	bhi.n	8014478 <_strtod_l+0xb78>
 8014432:	a32d      	add	r3, pc, #180	; (adr r3, 80144e8 <_strtod_l+0xbe8>)
 8014434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014438:	4640      	mov	r0, r8
 801443a:	4649      	mov	r1, r9
 801443c:	f7ec fb68 	bl	8000b10 <__aeabi_dcmple>
 8014440:	b1a0      	cbz	r0, 801446c <_strtod_l+0xb6c>
 8014442:	4649      	mov	r1, r9
 8014444:	4640      	mov	r0, r8
 8014446:	f7ec fbbf 	bl	8000bc8 <__aeabi_d2uiz>
 801444a:	2801      	cmp	r0, #1
 801444c:	bf38      	it	cc
 801444e:	2001      	movcc	r0, #1
 8014450:	f7ec f868 	bl	8000524 <__aeabi_ui2d>
 8014454:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014456:	4680      	mov	r8, r0
 8014458:	4689      	mov	r9, r1
 801445a:	bb13      	cbnz	r3, 80144a2 <_strtod_l+0xba2>
 801445c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014460:	9014      	str	r0, [sp, #80]	; 0x50
 8014462:	9315      	str	r3, [sp, #84]	; 0x54
 8014464:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014468:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801446c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801446e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014470:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014474:	1a9b      	subs	r3, r3, r2
 8014476:	930d      	str	r3, [sp, #52]	; 0x34
 8014478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801447c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014480:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014484:	f001 ffec 	bl	8016460 <__ulp>
 8014488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801448c:	ec53 2b10 	vmov	r2, r3, d0
 8014490:	f7ec f8c2 	bl	8000618 <__aeabi_dmul>
 8014494:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014498:	f7eb ff08 	bl	80002ac <__adddf3>
 801449c:	4682      	mov	sl, r0
 801449e:	468b      	mov	fp, r1
 80144a0:	e78f      	b.n	80143c2 <_strtod_l+0xac2>
 80144a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80144a6:	e7dd      	b.n	8014464 <_strtod_l+0xb64>
 80144a8:	a311      	add	r3, pc, #68	; (adr r3, 80144f0 <_strtod_l+0xbf0>)
 80144aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ae:	f7ec fb25 	bl	8000afc <__aeabi_dcmplt>
 80144b2:	e7b4      	b.n	801441e <_strtod_l+0xb1e>
 80144b4:	2300      	movs	r3, #0
 80144b6:	930e      	str	r3, [sp, #56]	; 0x38
 80144b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80144ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80144bc:	6013      	str	r3, [r2, #0]
 80144be:	f7ff ba65 	b.w	801398c <_strtod_l+0x8c>
 80144c2:	2b65      	cmp	r3, #101	; 0x65
 80144c4:	f43f ab5d 	beq.w	8013b82 <_strtod_l+0x282>
 80144c8:	2b45      	cmp	r3, #69	; 0x45
 80144ca:	f43f ab5a 	beq.w	8013b82 <_strtod_l+0x282>
 80144ce:	2201      	movs	r2, #1
 80144d0:	f7ff bb92 	b.w	8013bf8 <_strtod_l+0x2f8>
 80144d4:	f3af 8000 	nop.w
 80144d8:	94a03595 	.word	0x94a03595
 80144dc:	3fdfffff 	.word	0x3fdfffff
 80144e0:	35afe535 	.word	0x35afe535
 80144e4:	3fe00000 	.word	0x3fe00000
 80144e8:	ffc00000 	.word	0xffc00000
 80144ec:	41dfffff 	.word	0x41dfffff
 80144f0:	94a03595 	.word	0x94a03595
 80144f4:	3fcfffff 	.word	0x3fcfffff
 80144f8:	3ff00000 	.word	0x3ff00000
 80144fc:	7ff00000 	.word	0x7ff00000
 8014500:	7fe00000 	.word	0x7fe00000
 8014504:	7c9fffff 	.word	0x7c9fffff
 8014508:	3fe00000 	.word	0x3fe00000
 801450c:	bff00000 	.word	0xbff00000
 8014510:	7fefffff 	.word	0x7fefffff

08014514 <_strtod_r>:
 8014514:	4b01      	ldr	r3, [pc, #4]	; (801451c <_strtod_r+0x8>)
 8014516:	f7ff b9f3 	b.w	8013900 <_strtod_l>
 801451a:	bf00      	nop
 801451c:	2000020c 	.word	0x2000020c

08014520 <_strtol_l.isra.0>:
 8014520:	2b01      	cmp	r3, #1
 8014522:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014526:	d001      	beq.n	801452c <_strtol_l.isra.0+0xc>
 8014528:	2b24      	cmp	r3, #36	; 0x24
 801452a:	d906      	bls.n	801453a <_strtol_l.isra.0+0x1a>
 801452c:	f7fd ffdc 	bl	80124e8 <__errno>
 8014530:	2316      	movs	r3, #22
 8014532:	6003      	str	r3, [r0, #0]
 8014534:	2000      	movs	r0, #0
 8014536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801453a:	4f3a      	ldr	r7, [pc, #232]	; (8014624 <_strtol_l.isra.0+0x104>)
 801453c:	468e      	mov	lr, r1
 801453e:	4676      	mov	r6, lr
 8014540:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014544:	5de5      	ldrb	r5, [r4, r7]
 8014546:	f015 0508 	ands.w	r5, r5, #8
 801454a:	d1f8      	bne.n	801453e <_strtol_l.isra.0+0x1e>
 801454c:	2c2d      	cmp	r4, #45	; 0x2d
 801454e:	d134      	bne.n	80145ba <_strtol_l.isra.0+0x9a>
 8014550:	f89e 4000 	ldrb.w	r4, [lr]
 8014554:	f04f 0801 	mov.w	r8, #1
 8014558:	f106 0e02 	add.w	lr, r6, #2
 801455c:	2b00      	cmp	r3, #0
 801455e:	d05c      	beq.n	801461a <_strtol_l.isra.0+0xfa>
 8014560:	2b10      	cmp	r3, #16
 8014562:	d10c      	bne.n	801457e <_strtol_l.isra.0+0x5e>
 8014564:	2c30      	cmp	r4, #48	; 0x30
 8014566:	d10a      	bne.n	801457e <_strtol_l.isra.0+0x5e>
 8014568:	f89e 4000 	ldrb.w	r4, [lr]
 801456c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014570:	2c58      	cmp	r4, #88	; 0x58
 8014572:	d14d      	bne.n	8014610 <_strtol_l.isra.0+0xf0>
 8014574:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8014578:	2310      	movs	r3, #16
 801457a:	f10e 0e02 	add.w	lr, lr, #2
 801457e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8014582:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014586:	2600      	movs	r6, #0
 8014588:	fbbc f9f3 	udiv	r9, ip, r3
 801458c:	4635      	mov	r5, r6
 801458e:	fb03 ca19 	mls	sl, r3, r9, ip
 8014592:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8014596:	2f09      	cmp	r7, #9
 8014598:	d818      	bhi.n	80145cc <_strtol_l.isra.0+0xac>
 801459a:	463c      	mov	r4, r7
 801459c:	42a3      	cmp	r3, r4
 801459e:	dd24      	ble.n	80145ea <_strtol_l.isra.0+0xca>
 80145a0:	2e00      	cmp	r6, #0
 80145a2:	db1f      	blt.n	80145e4 <_strtol_l.isra.0+0xc4>
 80145a4:	45a9      	cmp	r9, r5
 80145a6:	d31d      	bcc.n	80145e4 <_strtol_l.isra.0+0xc4>
 80145a8:	d101      	bne.n	80145ae <_strtol_l.isra.0+0x8e>
 80145aa:	45a2      	cmp	sl, r4
 80145ac:	db1a      	blt.n	80145e4 <_strtol_l.isra.0+0xc4>
 80145ae:	fb05 4503 	mla	r5, r5, r3, r4
 80145b2:	2601      	movs	r6, #1
 80145b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80145b8:	e7eb      	b.n	8014592 <_strtol_l.isra.0+0x72>
 80145ba:	2c2b      	cmp	r4, #43	; 0x2b
 80145bc:	bf08      	it	eq
 80145be:	f89e 4000 	ldrbeq.w	r4, [lr]
 80145c2:	46a8      	mov	r8, r5
 80145c4:	bf08      	it	eq
 80145c6:	f106 0e02 	addeq.w	lr, r6, #2
 80145ca:	e7c7      	b.n	801455c <_strtol_l.isra.0+0x3c>
 80145cc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80145d0:	2f19      	cmp	r7, #25
 80145d2:	d801      	bhi.n	80145d8 <_strtol_l.isra.0+0xb8>
 80145d4:	3c37      	subs	r4, #55	; 0x37
 80145d6:	e7e1      	b.n	801459c <_strtol_l.isra.0+0x7c>
 80145d8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80145dc:	2f19      	cmp	r7, #25
 80145de:	d804      	bhi.n	80145ea <_strtol_l.isra.0+0xca>
 80145e0:	3c57      	subs	r4, #87	; 0x57
 80145e2:	e7db      	b.n	801459c <_strtol_l.isra.0+0x7c>
 80145e4:	f04f 36ff 	mov.w	r6, #4294967295
 80145e8:	e7e4      	b.n	80145b4 <_strtol_l.isra.0+0x94>
 80145ea:	2e00      	cmp	r6, #0
 80145ec:	da05      	bge.n	80145fa <_strtol_l.isra.0+0xda>
 80145ee:	2322      	movs	r3, #34	; 0x22
 80145f0:	6003      	str	r3, [r0, #0]
 80145f2:	4665      	mov	r5, ip
 80145f4:	b942      	cbnz	r2, 8014608 <_strtol_l.isra.0+0xe8>
 80145f6:	4628      	mov	r0, r5
 80145f8:	e79d      	b.n	8014536 <_strtol_l.isra.0+0x16>
 80145fa:	f1b8 0f00 	cmp.w	r8, #0
 80145fe:	d000      	beq.n	8014602 <_strtol_l.isra.0+0xe2>
 8014600:	426d      	negs	r5, r5
 8014602:	2a00      	cmp	r2, #0
 8014604:	d0f7      	beq.n	80145f6 <_strtol_l.isra.0+0xd6>
 8014606:	b10e      	cbz	r6, 801460c <_strtol_l.isra.0+0xec>
 8014608:	f10e 31ff 	add.w	r1, lr, #4294967295
 801460c:	6011      	str	r1, [r2, #0]
 801460e:	e7f2      	b.n	80145f6 <_strtol_l.isra.0+0xd6>
 8014610:	2430      	movs	r4, #48	; 0x30
 8014612:	2b00      	cmp	r3, #0
 8014614:	d1b3      	bne.n	801457e <_strtol_l.isra.0+0x5e>
 8014616:	2308      	movs	r3, #8
 8014618:	e7b1      	b.n	801457e <_strtol_l.isra.0+0x5e>
 801461a:	2c30      	cmp	r4, #48	; 0x30
 801461c:	d0a4      	beq.n	8014568 <_strtol_l.isra.0+0x48>
 801461e:	230a      	movs	r3, #10
 8014620:	e7ad      	b.n	801457e <_strtol_l.isra.0+0x5e>
 8014622:	bf00      	nop
 8014624:	08017df5 	.word	0x08017df5

08014628 <_strtol_r>:
 8014628:	f7ff bf7a 	b.w	8014520 <_strtol_l.isra.0>

0801462c <_strtoul_l.isra.0>:
 801462c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014630:	4e3b      	ldr	r6, [pc, #236]	; (8014720 <_strtoul_l.isra.0+0xf4>)
 8014632:	4686      	mov	lr, r0
 8014634:	468c      	mov	ip, r1
 8014636:	4660      	mov	r0, ip
 8014638:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801463c:	5da5      	ldrb	r5, [r4, r6]
 801463e:	f015 0508 	ands.w	r5, r5, #8
 8014642:	d1f8      	bne.n	8014636 <_strtoul_l.isra.0+0xa>
 8014644:	2c2d      	cmp	r4, #45	; 0x2d
 8014646:	d134      	bne.n	80146b2 <_strtoul_l.isra.0+0x86>
 8014648:	f89c 4000 	ldrb.w	r4, [ip]
 801464c:	f04f 0801 	mov.w	r8, #1
 8014650:	f100 0c02 	add.w	ip, r0, #2
 8014654:	2b00      	cmp	r3, #0
 8014656:	d05e      	beq.n	8014716 <_strtoul_l.isra.0+0xea>
 8014658:	2b10      	cmp	r3, #16
 801465a:	d10c      	bne.n	8014676 <_strtoul_l.isra.0+0x4a>
 801465c:	2c30      	cmp	r4, #48	; 0x30
 801465e:	d10a      	bne.n	8014676 <_strtoul_l.isra.0+0x4a>
 8014660:	f89c 0000 	ldrb.w	r0, [ip]
 8014664:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014668:	2858      	cmp	r0, #88	; 0x58
 801466a:	d14f      	bne.n	801470c <_strtoul_l.isra.0+0xe0>
 801466c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8014670:	2310      	movs	r3, #16
 8014672:	f10c 0c02 	add.w	ip, ip, #2
 8014676:	f04f 37ff 	mov.w	r7, #4294967295
 801467a:	2500      	movs	r5, #0
 801467c:	fbb7 f7f3 	udiv	r7, r7, r3
 8014680:	fb03 f907 	mul.w	r9, r3, r7
 8014684:	ea6f 0909 	mvn.w	r9, r9
 8014688:	4628      	mov	r0, r5
 801468a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801468e:	2e09      	cmp	r6, #9
 8014690:	d818      	bhi.n	80146c4 <_strtoul_l.isra.0+0x98>
 8014692:	4634      	mov	r4, r6
 8014694:	42a3      	cmp	r3, r4
 8014696:	dd24      	ble.n	80146e2 <_strtoul_l.isra.0+0xb6>
 8014698:	2d00      	cmp	r5, #0
 801469a:	db1f      	blt.n	80146dc <_strtoul_l.isra.0+0xb0>
 801469c:	4287      	cmp	r7, r0
 801469e:	d31d      	bcc.n	80146dc <_strtoul_l.isra.0+0xb0>
 80146a0:	d101      	bne.n	80146a6 <_strtoul_l.isra.0+0x7a>
 80146a2:	45a1      	cmp	r9, r4
 80146a4:	db1a      	blt.n	80146dc <_strtoul_l.isra.0+0xb0>
 80146a6:	fb00 4003 	mla	r0, r0, r3, r4
 80146aa:	2501      	movs	r5, #1
 80146ac:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80146b0:	e7eb      	b.n	801468a <_strtoul_l.isra.0+0x5e>
 80146b2:	2c2b      	cmp	r4, #43	; 0x2b
 80146b4:	bf08      	it	eq
 80146b6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80146ba:	46a8      	mov	r8, r5
 80146bc:	bf08      	it	eq
 80146be:	f100 0c02 	addeq.w	ip, r0, #2
 80146c2:	e7c7      	b.n	8014654 <_strtoul_l.isra.0+0x28>
 80146c4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80146c8:	2e19      	cmp	r6, #25
 80146ca:	d801      	bhi.n	80146d0 <_strtoul_l.isra.0+0xa4>
 80146cc:	3c37      	subs	r4, #55	; 0x37
 80146ce:	e7e1      	b.n	8014694 <_strtoul_l.isra.0+0x68>
 80146d0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80146d4:	2e19      	cmp	r6, #25
 80146d6:	d804      	bhi.n	80146e2 <_strtoul_l.isra.0+0xb6>
 80146d8:	3c57      	subs	r4, #87	; 0x57
 80146da:	e7db      	b.n	8014694 <_strtoul_l.isra.0+0x68>
 80146dc:	f04f 35ff 	mov.w	r5, #4294967295
 80146e0:	e7e4      	b.n	80146ac <_strtoul_l.isra.0+0x80>
 80146e2:	2d00      	cmp	r5, #0
 80146e4:	da07      	bge.n	80146f6 <_strtoul_l.isra.0+0xca>
 80146e6:	2322      	movs	r3, #34	; 0x22
 80146e8:	f8ce 3000 	str.w	r3, [lr]
 80146ec:	f04f 30ff 	mov.w	r0, #4294967295
 80146f0:	b942      	cbnz	r2, 8014704 <_strtoul_l.isra.0+0xd8>
 80146f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146f6:	f1b8 0f00 	cmp.w	r8, #0
 80146fa:	d000      	beq.n	80146fe <_strtoul_l.isra.0+0xd2>
 80146fc:	4240      	negs	r0, r0
 80146fe:	2a00      	cmp	r2, #0
 8014700:	d0f7      	beq.n	80146f2 <_strtoul_l.isra.0+0xc6>
 8014702:	b10d      	cbz	r5, 8014708 <_strtoul_l.isra.0+0xdc>
 8014704:	f10c 31ff 	add.w	r1, ip, #4294967295
 8014708:	6011      	str	r1, [r2, #0]
 801470a:	e7f2      	b.n	80146f2 <_strtoul_l.isra.0+0xc6>
 801470c:	2430      	movs	r4, #48	; 0x30
 801470e:	2b00      	cmp	r3, #0
 8014710:	d1b1      	bne.n	8014676 <_strtoul_l.isra.0+0x4a>
 8014712:	2308      	movs	r3, #8
 8014714:	e7af      	b.n	8014676 <_strtoul_l.isra.0+0x4a>
 8014716:	2c30      	cmp	r4, #48	; 0x30
 8014718:	d0a2      	beq.n	8014660 <_strtoul_l.isra.0+0x34>
 801471a:	230a      	movs	r3, #10
 801471c:	e7ab      	b.n	8014676 <_strtoul_l.isra.0+0x4a>
 801471e:	bf00      	nop
 8014720:	08017df5 	.word	0x08017df5

08014724 <_strtoul_r>:
 8014724:	f7ff bf82 	b.w	801462c <_strtoul_l.isra.0>

08014728 <_write_r>:
 8014728:	b538      	push	{r3, r4, r5, lr}
 801472a:	4d07      	ldr	r5, [pc, #28]	; (8014748 <_write_r+0x20>)
 801472c:	4604      	mov	r4, r0
 801472e:	4608      	mov	r0, r1
 8014730:	4611      	mov	r1, r2
 8014732:	2200      	movs	r2, #0
 8014734:	602a      	str	r2, [r5, #0]
 8014736:	461a      	mov	r2, r3
 8014738:	f7ee fc21 	bl	8002f7e <_write>
 801473c:	1c43      	adds	r3, r0, #1
 801473e:	d102      	bne.n	8014746 <_write_r+0x1e>
 8014740:	682b      	ldr	r3, [r5, #0]
 8014742:	b103      	cbz	r3, 8014746 <_write_r+0x1e>
 8014744:	6023      	str	r3, [r4, #0]
 8014746:	bd38      	pop	{r3, r4, r5, pc}
 8014748:	200073ac 	.word	0x200073ac

0801474c <__assert_func>:
 801474c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801474e:	4614      	mov	r4, r2
 8014750:	461a      	mov	r2, r3
 8014752:	4b09      	ldr	r3, [pc, #36]	; (8014778 <__assert_func+0x2c>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	4605      	mov	r5, r0
 8014758:	68d8      	ldr	r0, [r3, #12]
 801475a:	b14c      	cbz	r4, 8014770 <__assert_func+0x24>
 801475c:	4b07      	ldr	r3, [pc, #28]	; (801477c <__assert_func+0x30>)
 801475e:	9100      	str	r1, [sp, #0]
 8014760:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014764:	4906      	ldr	r1, [pc, #24]	; (8014780 <__assert_func+0x34>)
 8014766:	462b      	mov	r3, r5
 8014768:	f000 ff58 	bl	801561c <fiprintf>
 801476c:	f7fd feb5 	bl	80124da <abort>
 8014770:	4b04      	ldr	r3, [pc, #16]	; (8014784 <__assert_func+0x38>)
 8014772:	461c      	mov	r4, r3
 8014774:	e7f3      	b.n	801475e <__assert_func+0x12>
 8014776:	bf00      	nop
 8014778:	200001a4 	.word	0x200001a4
 801477c:	08017db8 	.word	0x08017db8
 8014780:	08017dc5 	.word	0x08017dc5
 8014784:	08017df3 	.word	0x08017df3

08014788 <_close_r>:
 8014788:	b538      	push	{r3, r4, r5, lr}
 801478a:	4d06      	ldr	r5, [pc, #24]	; (80147a4 <_close_r+0x1c>)
 801478c:	2300      	movs	r3, #0
 801478e:	4604      	mov	r4, r0
 8014790:	4608      	mov	r0, r1
 8014792:	602b      	str	r3, [r5, #0]
 8014794:	f7ee fc0f 	bl	8002fb6 <_close>
 8014798:	1c43      	adds	r3, r0, #1
 801479a:	d102      	bne.n	80147a2 <_close_r+0x1a>
 801479c:	682b      	ldr	r3, [r5, #0]
 801479e:	b103      	cbz	r3, 80147a2 <_close_r+0x1a>
 80147a0:	6023      	str	r3, [r4, #0]
 80147a2:	bd38      	pop	{r3, r4, r5, pc}
 80147a4:	200073ac 	.word	0x200073ac

080147a8 <quorem>:
 80147a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147ac:	6903      	ldr	r3, [r0, #16]
 80147ae:	690c      	ldr	r4, [r1, #16]
 80147b0:	42a3      	cmp	r3, r4
 80147b2:	4607      	mov	r7, r0
 80147b4:	f2c0 8081 	blt.w	80148ba <quorem+0x112>
 80147b8:	3c01      	subs	r4, #1
 80147ba:	f101 0814 	add.w	r8, r1, #20
 80147be:	f100 0514 	add.w	r5, r0, #20
 80147c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80147c6:	9301      	str	r3, [sp, #4]
 80147c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80147cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80147d0:	3301      	adds	r3, #1
 80147d2:	429a      	cmp	r2, r3
 80147d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80147d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80147dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80147e0:	d331      	bcc.n	8014846 <quorem+0x9e>
 80147e2:	f04f 0e00 	mov.w	lr, #0
 80147e6:	4640      	mov	r0, r8
 80147e8:	46ac      	mov	ip, r5
 80147ea:	46f2      	mov	sl, lr
 80147ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80147f0:	b293      	uxth	r3, r2
 80147f2:	fb06 e303 	mla	r3, r6, r3, lr
 80147f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80147fa:	b29b      	uxth	r3, r3
 80147fc:	ebaa 0303 	sub.w	r3, sl, r3
 8014800:	0c12      	lsrs	r2, r2, #16
 8014802:	f8dc a000 	ldr.w	sl, [ip]
 8014806:	fb06 e202 	mla	r2, r6, r2, lr
 801480a:	fa13 f38a 	uxtah	r3, r3, sl
 801480e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014812:	fa1f fa82 	uxth.w	sl, r2
 8014816:	f8dc 2000 	ldr.w	r2, [ip]
 801481a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801481e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014822:	b29b      	uxth	r3, r3
 8014824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014828:	4581      	cmp	r9, r0
 801482a:	f84c 3b04 	str.w	r3, [ip], #4
 801482e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014832:	d2db      	bcs.n	80147ec <quorem+0x44>
 8014834:	f855 300b 	ldr.w	r3, [r5, fp]
 8014838:	b92b      	cbnz	r3, 8014846 <quorem+0x9e>
 801483a:	9b01      	ldr	r3, [sp, #4]
 801483c:	3b04      	subs	r3, #4
 801483e:	429d      	cmp	r5, r3
 8014840:	461a      	mov	r2, r3
 8014842:	d32e      	bcc.n	80148a2 <quorem+0xfa>
 8014844:	613c      	str	r4, [r7, #16]
 8014846:	4638      	mov	r0, r7
 8014848:	f001 fd66 	bl	8016318 <__mcmp>
 801484c:	2800      	cmp	r0, #0
 801484e:	db24      	blt.n	801489a <quorem+0xf2>
 8014850:	3601      	adds	r6, #1
 8014852:	4628      	mov	r0, r5
 8014854:	f04f 0c00 	mov.w	ip, #0
 8014858:	f858 2b04 	ldr.w	r2, [r8], #4
 801485c:	f8d0 e000 	ldr.w	lr, [r0]
 8014860:	b293      	uxth	r3, r2
 8014862:	ebac 0303 	sub.w	r3, ip, r3
 8014866:	0c12      	lsrs	r2, r2, #16
 8014868:	fa13 f38e 	uxtah	r3, r3, lr
 801486c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014870:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014874:	b29b      	uxth	r3, r3
 8014876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801487a:	45c1      	cmp	r9, r8
 801487c:	f840 3b04 	str.w	r3, [r0], #4
 8014880:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014884:	d2e8      	bcs.n	8014858 <quorem+0xb0>
 8014886:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801488a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801488e:	b922      	cbnz	r2, 801489a <quorem+0xf2>
 8014890:	3b04      	subs	r3, #4
 8014892:	429d      	cmp	r5, r3
 8014894:	461a      	mov	r2, r3
 8014896:	d30a      	bcc.n	80148ae <quorem+0x106>
 8014898:	613c      	str	r4, [r7, #16]
 801489a:	4630      	mov	r0, r6
 801489c:	b003      	add	sp, #12
 801489e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148a2:	6812      	ldr	r2, [r2, #0]
 80148a4:	3b04      	subs	r3, #4
 80148a6:	2a00      	cmp	r2, #0
 80148a8:	d1cc      	bne.n	8014844 <quorem+0x9c>
 80148aa:	3c01      	subs	r4, #1
 80148ac:	e7c7      	b.n	801483e <quorem+0x96>
 80148ae:	6812      	ldr	r2, [r2, #0]
 80148b0:	3b04      	subs	r3, #4
 80148b2:	2a00      	cmp	r2, #0
 80148b4:	d1f0      	bne.n	8014898 <quorem+0xf0>
 80148b6:	3c01      	subs	r4, #1
 80148b8:	e7eb      	b.n	8014892 <quorem+0xea>
 80148ba:	2000      	movs	r0, #0
 80148bc:	e7ee      	b.n	801489c <quorem+0xf4>
	...

080148c0 <_dtoa_r>:
 80148c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c4:	ed2d 8b02 	vpush	{d8}
 80148c8:	ec57 6b10 	vmov	r6, r7, d0
 80148cc:	b095      	sub	sp, #84	; 0x54
 80148ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80148d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80148d4:	9105      	str	r1, [sp, #20]
 80148d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80148da:	4604      	mov	r4, r0
 80148dc:	9209      	str	r2, [sp, #36]	; 0x24
 80148de:	930f      	str	r3, [sp, #60]	; 0x3c
 80148e0:	b975      	cbnz	r5, 8014900 <_dtoa_r+0x40>
 80148e2:	2010      	movs	r0, #16
 80148e4:	f7fd ff24 	bl	8012730 <malloc>
 80148e8:	4602      	mov	r2, r0
 80148ea:	6260      	str	r0, [r4, #36]	; 0x24
 80148ec:	b920      	cbnz	r0, 80148f8 <_dtoa_r+0x38>
 80148ee:	4bb2      	ldr	r3, [pc, #712]	; (8014bb8 <_dtoa_r+0x2f8>)
 80148f0:	21ea      	movs	r1, #234	; 0xea
 80148f2:	48b2      	ldr	r0, [pc, #712]	; (8014bbc <_dtoa_r+0x2fc>)
 80148f4:	f7ff ff2a 	bl	801474c <__assert_func>
 80148f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80148fc:	6005      	str	r5, [r0, #0]
 80148fe:	60c5      	str	r5, [r0, #12]
 8014900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014902:	6819      	ldr	r1, [r3, #0]
 8014904:	b151      	cbz	r1, 801491c <_dtoa_r+0x5c>
 8014906:	685a      	ldr	r2, [r3, #4]
 8014908:	604a      	str	r2, [r1, #4]
 801490a:	2301      	movs	r3, #1
 801490c:	4093      	lsls	r3, r2
 801490e:	608b      	str	r3, [r1, #8]
 8014910:	4620      	mov	r0, r4
 8014912:	f001 fa79 	bl	8015e08 <_Bfree>
 8014916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014918:	2200      	movs	r2, #0
 801491a:	601a      	str	r2, [r3, #0]
 801491c:	1e3b      	subs	r3, r7, #0
 801491e:	bfb9      	ittee	lt
 8014920:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014924:	9303      	strlt	r3, [sp, #12]
 8014926:	2300      	movge	r3, #0
 8014928:	f8c8 3000 	strge.w	r3, [r8]
 801492c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8014930:	4ba3      	ldr	r3, [pc, #652]	; (8014bc0 <_dtoa_r+0x300>)
 8014932:	bfbc      	itt	lt
 8014934:	2201      	movlt	r2, #1
 8014936:	f8c8 2000 	strlt.w	r2, [r8]
 801493a:	ea33 0309 	bics.w	r3, r3, r9
 801493e:	d11b      	bne.n	8014978 <_dtoa_r+0xb8>
 8014940:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014942:	f242 730f 	movw	r3, #9999	; 0x270f
 8014946:	6013      	str	r3, [r2, #0]
 8014948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801494c:	4333      	orrs	r3, r6
 801494e:	f000 857a 	beq.w	8015446 <_dtoa_r+0xb86>
 8014952:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014954:	b963      	cbnz	r3, 8014970 <_dtoa_r+0xb0>
 8014956:	4b9b      	ldr	r3, [pc, #620]	; (8014bc4 <_dtoa_r+0x304>)
 8014958:	e024      	b.n	80149a4 <_dtoa_r+0xe4>
 801495a:	4b9b      	ldr	r3, [pc, #620]	; (8014bc8 <_dtoa_r+0x308>)
 801495c:	9300      	str	r3, [sp, #0]
 801495e:	3308      	adds	r3, #8
 8014960:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014962:	6013      	str	r3, [r2, #0]
 8014964:	9800      	ldr	r0, [sp, #0]
 8014966:	b015      	add	sp, #84	; 0x54
 8014968:	ecbd 8b02 	vpop	{d8}
 801496c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014970:	4b94      	ldr	r3, [pc, #592]	; (8014bc4 <_dtoa_r+0x304>)
 8014972:	9300      	str	r3, [sp, #0]
 8014974:	3303      	adds	r3, #3
 8014976:	e7f3      	b.n	8014960 <_dtoa_r+0xa0>
 8014978:	ed9d 7b02 	vldr	d7, [sp, #8]
 801497c:	2200      	movs	r2, #0
 801497e:	ec51 0b17 	vmov	r0, r1, d7
 8014982:	2300      	movs	r3, #0
 8014984:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014988:	f7ec f8ae 	bl	8000ae8 <__aeabi_dcmpeq>
 801498c:	4680      	mov	r8, r0
 801498e:	b158      	cbz	r0, 80149a8 <_dtoa_r+0xe8>
 8014990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014992:	2301      	movs	r3, #1
 8014994:	6013      	str	r3, [r2, #0]
 8014996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014998:	2b00      	cmp	r3, #0
 801499a:	f000 8551 	beq.w	8015440 <_dtoa_r+0xb80>
 801499e:	488b      	ldr	r0, [pc, #556]	; (8014bcc <_dtoa_r+0x30c>)
 80149a0:	6018      	str	r0, [r3, #0]
 80149a2:	1e43      	subs	r3, r0, #1
 80149a4:	9300      	str	r3, [sp, #0]
 80149a6:	e7dd      	b.n	8014964 <_dtoa_r+0xa4>
 80149a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80149ac:	aa12      	add	r2, sp, #72	; 0x48
 80149ae:	a913      	add	r1, sp, #76	; 0x4c
 80149b0:	4620      	mov	r0, r4
 80149b2:	f001 fdd1 	bl	8016558 <__d2b>
 80149b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80149ba:	4683      	mov	fp, r0
 80149bc:	2d00      	cmp	r5, #0
 80149be:	d07c      	beq.n	8014aba <_dtoa_r+0x1fa>
 80149c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80149c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80149ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80149ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80149d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80149d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80149da:	4b7d      	ldr	r3, [pc, #500]	; (8014bd0 <_dtoa_r+0x310>)
 80149dc:	2200      	movs	r2, #0
 80149de:	4630      	mov	r0, r6
 80149e0:	4639      	mov	r1, r7
 80149e2:	f7eb fc61 	bl	80002a8 <__aeabi_dsub>
 80149e6:	a36e      	add	r3, pc, #440	; (adr r3, 8014ba0 <_dtoa_r+0x2e0>)
 80149e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ec:	f7eb fe14 	bl	8000618 <__aeabi_dmul>
 80149f0:	a36d      	add	r3, pc, #436	; (adr r3, 8014ba8 <_dtoa_r+0x2e8>)
 80149f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f6:	f7eb fc59 	bl	80002ac <__adddf3>
 80149fa:	4606      	mov	r6, r0
 80149fc:	4628      	mov	r0, r5
 80149fe:	460f      	mov	r7, r1
 8014a00:	f7eb fda0 	bl	8000544 <__aeabi_i2d>
 8014a04:	a36a      	add	r3, pc, #424	; (adr r3, 8014bb0 <_dtoa_r+0x2f0>)
 8014a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a0a:	f7eb fe05 	bl	8000618 <__aeabi_dmul>
 8014a0e:	4602      	mov	r2, r0
 8014a10:	460b      	mov	r3, r1
 8014a12:	4630      	mov	r0, r6
 8014a14:	4639      	mov	r1, r7
 8014a16:	f7eb fc49 	bl	80002ac <__adddf3>
 8014a1a:	4606      	mov	r6, r0
 8014a1c:	460f      	mov	r7, r1
 8014a1e:	f7ec f8ab 	bl	8000b78 <__aeabi_d2iz>
 8014a22:	2200      	movs	r2, #0
 8014a24:	4682      	mov	sl, r0
 8014a26:	2300      	movs	r3, #0
 8014a28:	4630      	mov	r0, r6
 8014a2a:	4639      	mov	r1, r7
 8014a2c:	f7ec f866 	bl	8000afc <__aeabi_dcmplt>
 8014a30:	b148      	cbz	r0, 8014a46 <_dtoa_r+0x186>
 8014a32:	4650      	mov	r0, sl
 8014a34:	f7eb fd86 	bl	8000544 <__aeabi_i2d>
 8014a38:	4632      	mov	r2, r6
 8014a3a:	463b      	mov	r3, r7
 8014a3c:	f7ec f854 	bl	8000ae8 <__aeabi_dcmpeq>
 8014a40:	b908      	cbnz	r0, 8014a46 <_dtoa_r+0x186>
 8014a42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014a46:	f1ba 0f16 	cmp.w	sl, #22
 8014a4a:	d854      	bhi.n	8014af6 <_dtoa_r+0x236>
 8014a4c:	4b61      	ldr	r3, [pc, #388]	; (8014bd4 <_dtoa_r+0x314>)
 8014a4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014a5a:	f7ec f84f 	bl	8000afc <__aeabi_dcmplt>
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	d04b      	beq.n	8014afa <_dtoa_r+0x23a>
 8014a62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014a66:	2300      	movs	r3, #0
 8014a68:	930e      	str	r3, [sp, #56]	; 0x38
 8014a6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014a6c:	1b5d      	subs	r5, r3, r5
 8014a6e:	1e6b      	subs	r3, r5, #1
 8014a70:	9304      	str	r3, [sp, #16]
 8014a72:	bf43      	ittte	mi
 8014a74:	2300      	movmi	r3, #0
 8014a76:	f1c5 0801 	rsbmi	r8, r5, #1
 8014a7a:	9304      	strmi	r3, [sp, #16]
 8014a7c:	f04f 0800 	movpl.w	r8, #0
 8014a80:	f1ba 0f00 	cmp.w	sl, #0
 8014a84:	db3b      	blt.n	8014afe <_dtoa_r+0x23e>
 8014a86:	9b04      	ldr	r3, [sp, #16]
 8014a88:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8014a8c:	4453      	add	r3, sl
 8014a8e:	9304      	str	r3, [sp, #16]
 8014a90:	2300      	movs	r3, #0
 8014a92:	9306      	str	r3, [sp, #24]
 8014a94:	9b05      	ldr	r3, [sp, #20]
 8014a96:	2b09      	cmp	r3, #9
 8014a98:	d869      	bhi.n	8014b6e <_dtoa_r+0x2ae>
 8014a9a:	2b05      	cmp	r3, #5
 8014a9c:	bfc4      	itt	gt
 8014a9e:	3b04      	subgt	r3, #4
 8014aa0:	9305      	strgt	r3, [sp, #20]
 8014aa2:	9b05      	ldr	r3, [sp, #20]
 8014aa4:	f1a3 0302 	sub.w	r3, r3, #2
 8014aa8:	bfcc      	ite	gt
 8014aaa:	2500      	movgt	r5, #0
 8014aac:	2501      	movle	r5, #1
 8014aae:	2b03      	cmp	r3, #3
 8014ab0:	d869      	bhi.n	8014b86 <_dtoa_r+0x2c6>
 8014ab2:	e8df f003 	tbb	[pc, r3]
 8014ab6:	4e2c      	.short	0x4e2c
 8014ab8:	5a4c      	.short	0x5a4c
 8014aba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8014abe:	441d      	add	r5, r3
 8014ac0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014ac4:	2b20      	cmp	r3, #32
 8014ac6:	bfc1      	itttt	gt
 8014ac8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014acc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014ad0:	fa09 f303 	lslgt.w	r3, r9, r3
 8014ad4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014ad8:	bfda      	itte	le
 8014ada:	f1c3 0320 	rsble	r3, r3, #32
 8014ade:	fa06 f003 	lslle.w	r0, r6, r3
 8014ae2:	4318      	orrgt	r0, r3
 8014ae4:	f7eb fd1e 	bl	8000524 <__aeabi_ui2d>
 8014ae8:	2301      	movs	r3, #1
 8014aea:	4606      	mov	r6, r0
 8014aec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014af0:	3d01      	subs	r5, #1
 8014af2:	9310      	str	r3, [sp, #64]	; 0x40
 8014af4:	e771      	b.n	80149da <_dtoa_r+0x11a>
 8014af6:	2301      	movs	r3, #1
 8014af8:	e7b6      	b.n	8014a68 <_dtoa_r+0x1a8>
 8014afa:	900e      	str	r0, [sp, #56]	; 0x38
 8014afc:	e7b5      	b.n	8014a6a <_dtoa_r+0x1aa>
 8014afe:	f1ca 0300 	rsb	r3, sl, #0
 8014b02:	9306      	str	r3, [sp, #24]
 8014b04:	2300      	movs	r3, #0
 8014b06:	eba8 080a 	sub.w	r8, r8, sl
 8014b0a:	930d      	str	r3, [sp, #52]	; 0x34
 8014b0c:	e7c2      	b.n	8014a94 <_dtoa_r+0x1d4>
 8014b0e:	2300      	movs	r3, #0
 8014b10:	9308      	str	r3, [sp, #32]
 8014b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	dc39      	bgt.n	8014b8c <_dtoa_r+0x2cc>
 8014b18:	f04f 0901 	mov.w	r9, #1
 8014b1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8014b20:	464b      	mov	r3, r9
 8014b22:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014b26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014b28:	2200      	movs	r2, #0
 8014b2a:	6042      	str	r2, [r0, #4]
 8014b2c:	2204      	movs	r2, #4
 8014b2e:	f102 0614 	add.w	r6, r2, #20
 8014b32:	429e      	cmp	r6, r3
 8014b34:	6841      	ldr	r1, [r0, #4]
 8014b36:	d92f      	bls.n	8014b98 <_dtoa_r+0x2d8>
 8014b38:	4620      	mov	r0, r4
 8014b3a:	f001 f925 	bl	8015d88 <_Balloc>
 8014b3e:	9000      	str	r0, [sp, #0]
 8014b40:	2800      	cmp	r0, #0
 8014b42:	d14b      	bne.n	8014bdc <_dtoa_r+0x31c>
 8014b44:	4b24      	ldr	r3, [pc, #144]	; (8014bd8 <_dtoa_r+0x318>)
 8014b46:	4602      	mov	r2, r0
 8014b48:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014b4c:	e6d1      	b.n	80148f2 <_dtoa_r+0x32>
 8014b4e:	2301      	movs	r3, #1
 8014b50:	e7de      	b.n	8014b10 <_dtoa_r+0x250>
 8014b52:	2300      	movs	r3, #0
 8014b54:	9308      	str	r3, [sp, #32]
 8014b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b58:	eb0a 0903 	add.w	r9, sl, r3
 8014b5c:	f109 0301 	add.w	r3, r9, #1
 8014b60:	2b01      	cmp	r3, #1
 8014b62:	9301      	str	r3, [sp, #4]
 8014b64:	bfb8      	it	lt
 8014b66:	2301      	movlt	r3, #1
 8014b68:	e7dd      	b.n	8014b26 <_dtoa_r+0x266>
 8014b6a:	2301      	movs	r3, #1
 8014b6c:	e7f2      	b.n	8014b54 <_dtoa_r+0x294>
 8014b6e:	2501      	movs	r5, #1
 8014b70:	2300      	movs	r3, #0
 8014b72:	9305      	str	r3, [sp, #20]
 8014b74:	9508      	str	r5, [sp, #32]
 8014b76:	f04f 39ff 	mov.w	r9, #4294967295
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8014b80:	2312      	movs	r3, #18
 8014b82:	9209      	str	r2, [sp, #36]	; 0x24
 8014b84:	e7cf      	b.n	8014b26 <_dtoa_r+0x266>
 8014b86:	2301      	movs	r3, #1
 8014b88:	9308      	str	r3, [sp, #32]
 8014b8a:	e7f4      	b.n	8014b76 <_dtoa_r+0x2b6>
 8014b8c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014b90:	f8cd 9004 	str.w	r9, [sp, #4]
 8014b94:	464b      	mov	r3, r9
 8014b96:	e7c6      	b.n	8014b26 <_dtoa_r+0x266>
 8014b98:	3101      	adds	r1, #1
 8014b9a:	6041      	str	r1, [r0, #4]
 8014b9c:	0052      	lsls	r2, r2, #1
 8014b9e:	e7c6      	b.n	8014b2e <_dtoa_r+0x26e>
 8014ba0:	636f4361 	.word	0x636f4361
 8014ba4:	3fd287a7 	.word	0x3fd287a7
 8014ba8:	8b60c8b3 	.word	0x8b60c8b3
 8014bac:	3fc68a28 	.word	0x3fc68a28
 8014bb0:	509f79fb 	.word	0x509f79fb
 8014bb4:	3fd34413 	.word	0x3fd34413
 8014bb8:	08017f02 	.word	0x08017f02
 8014bbc:	08017f19 	.word	0x08017f19
 8014bc0:	7ff00000 	.word	0x7ff00000
 8014bc4:	08017efe 	.word	0x08017efe
 8014bc8:	08017ef5 	.word	0x08017ef5
 8014bcc:	0801817a 	.word	0x0801817a
 8014bd0:	3ff80000 	.word	0x3ff80000
 8014bd4:	08018090 	.word	0x08018090
 8014bd8:	08017f78 	.word	0x08017f78
 8014bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bde:	9a00      	ldr	r2, [sp, #0]
 8014be0:	601a      	str	r2, [r3, #0]
 8014be2:	9b01      	ldr	r3, [sp, #4]
 8014be4:	2b0e      	cmp	r3, #14
 8014be6:	f200 80ad 	bhi.w	8014d44 <_dtoa_r+0x484>
 8014bea:	2d00      	cmp	r5, #0
 8014bec:	f000 80aa 	beq.w	8014d44 <_dtoa_r+0x484>
 8014bf0:	f1ba 0f00 	cmp.w	sl, #0
 8014bf4:	dd36      	ble.n	8014c64 <_dtoa_r+0x3a4>
 8014bf6:	4ac3      	ldr	r2, [pc, #780]	; (8014f04 <_dtoa_r+0x644>)
 8014bf8:	f00a 030f 	and.w	r3, sl, #15
 8014bfc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014c00:	ed93 7b00 	vldr	d7, [r3]
 8014c04:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8014c08:	ea4f 172a 	mov.w	r7, sl, asr #4
 8014c0c:	eeb0 8a47 	vmov.f32	s16, s14
 8014c10:	eef0 8a67 	vmov.f32	s17, s15
 8014c14:	d016      	beq.n	8014c44 <_dtoa_r+0x384>
 8014c16:	4bbc      	ldr	r3, [pc, #752]	; (8014f08 <_dtoa_r+0x648>)
 8014c18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014c1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014c20:	f7eb fe24 	bl	800086c <__aeabi_ddiv>
 8014c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c28:	f007 070f 	and.w	r7, r7, #15
 8014c2c:	2503      	movs	r5, #3
 8014c2e:	4eb6      	ldr	r6, [pc, #728]	; (8014f08 <_dtoa_r+0x648>)
 8014c30:	b957      	cbnz	r7, 8014c48 <_dtoa_r+0x388>
 8014c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c36:	ec53 2b18 	vmov	r2, r3, d8
 8014c3a:	f7eb fe17 	bl	800086c <__aeabi_ddiv>
 8014c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c42:	e029      	b.n	8014c98 <_dtoa_r+0x3d8>
 8014c44:	2502      	movs	r5, #2
 8014c46:	e7f2      	b.n	8014c2e <_dtoa_r+0x36e>
 8014c48:	07f9      	lsls	r1, r7, #31
 8014c4a:	d508      	bpl.n	8014c5e <_dtoa_r+0x39e>
 8014c4c:	ec51 0b18 	vmov	r0, r1, d8
 8014c50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014c54:	f7eb fce0 	bl	8000618 <__aeabi_dmul>
 8014c58:	ec41 0b18 	vmov	d8, r0, r1
 8014c5c:	3501      	adds	r5, #1
 8014c5e:	107f      	asrs	r7, r7, #1
 8014c60:	3608      	adds	r6, #8
 8014c62:	e7e5      	b.n	8014c30 <_dtoa_r+0x370>
 8014c64:	f000 80a6 	beq.w	8014db4 <_dtoa_r+0x4f4>
 8014c68:	f1ca 0600 	rsb	r6, sl, #0
 8014c6c:	4ba5      	ldr	r3, [pc, #660]	; (8014f04 <_dtoa_r+0x644>)
 8014c6e:	4fa6      	ldr	r7, [pc, #664]	; (8014f08 <_dtoa_r+0x648>)
 8014c70:	f006 020f 	and.w	r2, r6, #15
 8014c74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014c80:	f7eb fcca 	bl	8000618 <__aeabi_dmul>
 8014c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c88:	1136      	asrs	r6, r6, #4
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	2502      	movs	r5, #2
 8014c8e:	2e00      	cmp	r6, #0
 8014c90:	f040 8085 	bne.w	8014d9e <_dtoa_r+0x4de>
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d1d2      	bne.n	8014c3e <_dtoa_r+0x37e>
 8014c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	f000 808c 	beq.w	8014db8 <_dtoa_r+0x4f8>
 8014ca0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014ca4:	4b99      	ldr	r3, [pc, #612]	; (8014f0c <_dtoa_r+0x64c>)
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	4630      	mov	r0, r6
 8014caa:	4639      	mov	r1, r7
 8014cac:	f7eb ff26 	bl	8000afc <__aeabi_dcmplt>
 8014cb0:	2800      	cmp	r0, #0
 8014cb2:	f000 8081 	beq.w	8014db8 <_dtoa_r+0x4f8>
 8014cb6:	9b01      	ldr	r3, [sp, #4]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d07d      	beq.n	8014db8 <_dtoa_r+0x4f8>
 8014cbc:	f1b9 0f00 	cmp.w	r9, #0
 8014cc0:	dd3c      	ble.n	8014d3c <_dtoa_r+0x47c>
 8014cc2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014cc6:	9307      	str	r3, [sp, #28]
 8014cc8:	2200      	movs	r2, #0
 8014cca:	4b91      	ldr	r3, [pc, #580]	; (8014f10 <_dtoa_r+0x650>)
 8014ccc:	4630      	mov	r0, r6
 8014cce:	4639      	mov	r1, r7
 8014cd0:	f7eb fca2 	bl	8000618 <__aeabi_dmul>
 8014cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014cd8:	3501      	adds	r5, #1
 8014cda:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8014cde:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014ce2:	4628      	mov	r0, r5
 8014ce4:	f7eb fc2e 	bl	8000544 <__aeabi_i2d>
 8014ce8:	4632      	mov	r2, r6
 8014cea:	463b      	mov	r3, r7
 8014cec:	f7eb fc94 	bl	8000618 <__aeabi_dmul>
 8014cf0:	4b88      	ldr	r3, [pc, #544]	; (8014f14 <_dtoa_r+0x654>)
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	f7eb fada 	bl	80002ac <__adddf3>
 8014cf8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014d00:	9303      	str	r3, [sp, #12]
 8014d02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d15c      	bne.n	8014dc2 <_dtoa_r+0x502>
 8014d08:	4b83      	ldr	r3, [pc, #524]	; (8014f18 <_dtoa_r+0x658>)
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	4630      	mov	r0, r6
 8014d0e:	4639      	mov	r1, r7
 8014d10:	f7eb faca 	bl	80002a8 <__aeabi_dsub>
 8014d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014d18:	4606      	mov	r6, r0
 8014d1a:	460f      	mov	r7, r1
 8014d1c:	f7eb ff0c 	bl	8000b38 <__aeabi_dcmpgt>
 8014d20:	2800      	cmp	r0, #0
 8014d22:	f040 8296 	bne.w	8015252 <_dtoa_r+0x992>
 8014d26:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014d2a:	4630      	mov	r0, r6
 8014d2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d30:	4639      	mov	r1, r7
 8014d32:	f7eb fee3 	bl	8000afc <__aeabi_dcmplt>
 8014d36:	2800      	cmp	r0, #0
 8014d38:	f040 8288 	bne.w	801524c <_dtoa_r+0x98c>
 8014d3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014d40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014d44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	f2c0 8158 	blt.w	8014ffc <_dtoa_r+0x73c>
 8014d4c:	f1ba 0f0e 	cmp.w	sl, #14
 8014d50:	f300 8154 	bgt.w	8014ffc <_dtoa_r+0x73c>
 8014d54:	4b6b      	ldr	r3, [pc, #428]	; (8014f04 <_dtoa_r+0x644>)
 8014d56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014d5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	f280 80e3 	bge.w	8014f2c <_dtoa_r+0x66c>
 8014d66:	9b01      	ldr	r3, [sp, #4]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	f300 80df 	bgt.w	8014f2c <_dtoa_r+0x66c>
 8014d6e:	f040 826d 	bne.w	801524c <_dtoa_r+0x98c>
 8014d72:	4b69      	ldr	r3, [pc, #420]	; (8014f18 <_dtoa_r+0x658>)
 8014d74:	2200      	movs	r2, #0
 8014d76:	4640      	mov	r0, r8
 8014d78:	4649      	mov	r1, r9
 8014d7a:	f7eb fc4d 	bl	8000618 <__aeabi_dmul>
 8014d7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014d82:	f7eb fecf 	bl	8000b24 <__aeabi_dcmpge>
 8014d86:	9e01      	ldr	r6, [sp, #4]
 8014d88:	4637      	mov	r7, r6
 8014d8a:	2800      	cmp	r0, #0
 8014d8c:	f040 8243 	bne.w	8015216 <_dtoa_r+0x956>
 8014d90:	9d00      	ldr	r5, [sp, #0]
 8014d92:	2331      	movs	r3, #49	; 0x31
 8014d94:	f805 3b01 	strb.w	r3, [r5], #1
 8014d98:	f10a 0a01 	add.w	sl, sl, #1
 8014d9c:	e23f      	b.n	801521e <_dtoa_r+0x95e>
 8014d9e:	07f2      	lsls	r2, r6, #31
 8014da0:	d505      	bpl.n	8014dae <_dtoa_r+0x4ee>
 8014da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014da6:	f7eb fc37 	bl	8000618 <__aeabi_dmul>
 8014daa:	3501      	adds	r5, #1
 8014dac:	2301      	movs	r3, #1
 8014dae:	1076      	asrs	r6, r6, #1
 8014db0:	3708      	adds	r7, #8
 8014db2:	e76c      	b.n	8014c8e <_dtoa_r+0x3ce>
 8014db4:	2502      	movs	r5, #2
 8014db6:	e76f      	b.n	8014c98 <_dtoa_r+0x3d8>
 8014db8:	9b01      	ldr	r3, [sp, #4]
 8014dba:	f8cd a01c 	str.w	sl, [sp, #28]
 8014dbe:	930c      	str	r3, [sp, #48]	; 0x30
 8014dc0:	e78d      	b.n	8014cde <_dtoa_r+0x41e>
 8014dc2:	9900      	ldr	r1, [sp, #0]
 8014dc4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014dc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014dc8:	4b4e      	ldr	r3, [pc, #312]	; (8014f04 <_dtoa_r+0x644>)
 8014dca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014dce:	4401      	add	r1, r0
 8014dd0:	9102      	str	r1, [sp, #8]
 8014dd2:	9908      	ldr	r1, [sp, #32]
 8014dd4:	eeb0 8a47 	vmov.f32	s16, s14
 8014dd8:	eef0 8a67 	vmov.f32	s17, s15
 8014ddc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014de0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014de4:	2900      	cmp	r1, #0
 8014de6:	d045      	beq.n	8014e74 <_dtoa_r+0x5b4>
 8014de8:	494c      	ldr	r1, [pc, #304]	; (8014f1c <_dtoa_r+0x65c>)
 8014dea:	2000      	movs	r0, #0
 8014dec:	f7eb fd3e 	bl	800086c <__aeabi_ddiv>
 8014df0:	ec53 2b18 	vmov	r2, r3, d8
 8014df4:	f7eb fa58 	bl	80002a8 <__aeabi_dsub>
 8014df8:	9d00      	ldr	r5, [sp, #0]
 8014dfa:	ec41 0b18 	vmov	d8, r0, r1
 8014dfe:	4639      	mov	r1, r7
 8014e00:	4630      	mov	r0, r6
 8014e02:	f7eb feb9 	bl	8000b78 <__aeabi_d2iz>
 8014e06:	900c      	str	r0, [sp, #48]	; 0x30
 8014e08:	f7eb fb9c 	bl	8000544 <__aeabi_i2d>
 8014e0c:	4602      	mov	r2, r0
 8014e0e:	460b      	mov	r3, r1
 8014e10:	4630      	mov	r0, r6
 8014e12:	4639      	mov	r1, r7
 8014e14:	f7eb fa48 	bl	80002a8 <__aeabi_dsub>
 8014e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e1a:	3330      	adds	r3, #48	; 0x30
 8014e1c:	f805 3b01 	strb.w	r3, [r5], #1
 8014e20:	ec53 2b18 	vmov	r2, r3, d8
 8014e24:	4606      	mov	r6, r0
 8014e26:	460f      	mov	r7, r1
 8014e28:	f7eb fe68 	bl	8000afc <__aeabi_dcmplt>
 8014e2c:	2800      	cmp	r0, #0
 8014e2e:	d165      	bne.n	8014efc <_dtoa_r+0x63c>
 8014e30:	4632      	mov	r2, r6
 8014e32:	463b      	mov	r3, r7
 8014e34:	4935      	ldr	r1, [pc, #212]	; (8014f0c <_dtoa_r+0x64c>)
 8014e36:	2000      	movs	r0, #0
 8014e38:	f7eb fa36 	bl	80002a8 <__aeabi_dsub>
 8014e3c:	ec53 2b18 	vmov	r2, r3, d8
 8014e40:	f7eb fe5c 	bl	8000afc <__aeabi_dcmplt>
 8014e44:	2800      	cmp	r0, #0
 8014e46:	f040 80b9 	bne.w	8014fbc <_dtoa_r+0x6fc>
 8014e4a:	9b02      	ldr	r3, [sp, #8]
 8014e4c:	429d      	cmp	r5, r3
 8014e4e:	f43f af75 	beq.w	8014d3c <_dtoa_r+0x47c>
 8014e52:	4b2f      	ldr	r3, [pc, #188]	; (8014f10 <_dtoa_r+0x650>)
 8014e54:	ec51 0b18 	vmov	r0, r1, d8
 8014e58:	2200      	movs	r2, #0
 8014e5a:	f7eb fbdd 	bl	8000618 <__aeabi_dmul>
 8014e5e:	4b2c      	ldr	r3, [pc, #176]	; (8014f10 <_dtoa_r+0x650>)
 8014e60:	ec41 0b18 	vmov	d8, r0, r1
 8014e64:	2200      	movs	r2, #0
 8014e66:	4630      	mov	r0, r6
 8014e68:	4639      	mov	r1, r7
 8014e6a:	f7eb fbd5 	bl	8000618 <__aeabi_dmul>
 8014e6e:	4606      	mov	r6, r0
 8014e70:	460f      	mov	r7, r1
 8014e72:	e7c4      	b.n	8014dfe <_dtoa_r+0x53e>
 8014e74:	ec51 0b17 	vmov	r0, r1, d7
 8014e78:	f7eb fbce 	bl	8000618 <__aeabi_dmul>
 8014e7c:	9b02      	ldr	r3, [sp, #8]
 8014e7e:	9d00      	ldr	r5, [sp, #0]
 8014e80:	930c      	str	r3, [sp, #48]	; 0x30
 8014e82:	ec41 0b18 	vmov	d8, r0, r1
 8014e86:	4639      	mov	r1, r7
 8014e88:	4630      	mov	r0, r6
 8014e8a:	f7eb fe75 	bl	8000b78 <__aeabi_d2iz>
 8014e8e:	9011      	str	r0, [sp, #68]	; 0x44
 8014e90:	f7eb fb58 	bl	8000544 <__aeabi_i2d>
 8014e94:	4602      	mov	r2, r0
 8014e96:	460b      	mov	r3, r1
 8014e98:	4630      	mov	r0, r6
 8014e9a:	4639      	mov	r1, r7
 8014e9c:	f7eb fa04 	bl	80002a8 <__aeabi_dsub>
 8014ea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014ea2:	3330      	adds	r3, #48	; 0x30
 8014ea4:	f805 3b01 	strb.w	r3, [r5], #1
 8014ea8:	9b02      	ldr	r3, [sp, #8]
 8014eaa:	429d      	cmp	r5, r3
 8014eac:	4606      	mov	r6, r0
 8014eae:	460f      	mov	r7, r1
 8014eb0:	f04f 0200 	mov.w	r2, #0
 8014eb4:	d134      	bne.n	8014f20 <_dtoa_r+0x660>
 8014eb6:	4b19      	ldr	r3, [pc, #100]	; (8014f1c <_dtoa_r+0x65c>)
 8014eb8:	ec51 0b18 	vmov	r0, r1, d8
 8014ebc:	f7eb f9f6 	bl	80002ac <__adddf3>
 8014ec0:	4602      	mov	r2, r0
 8014ec2:	460b      	mov	r3, r1
 8014ec4:	4630      	mov	r0, r6
 8014ec6:	4639      	mov	r1, r7
 8014ec8:	f7eb fe36 	bl	8000b38 <__aeabi_dcmpgt>
 8014ecc:	2800      	cmp	r0, #0
 8014ece:	d175      	bne.n	8014fbc <_dtoa_r+0x6fc>
 8014ed0:	ec53 2b18 	vmov	r2, r3, d8
 8014ed4:	4911      	ldr	r1, [pc, #68]	; (8014f1c <_dtoa_r+0x65c>)
 8014ed6:	2000      	movs	r0, #0
 8014ed8:	f7eb f9e6 	bl	80002a8 <__aeabi_dsub>
 8014edc:	4602      	mov	r2, r0
 8014ede:	460b      	mov	r3, r1
 8014ee0:	4630      	mov	r0, r6
 8014ee2:	4639      	mov	r1, r7
 8014ee4:	f7eb fe0a 	bl	8000afc <__aeabi_dcmplt>
 8014ee8:	2800      	cmp	r0, #0
 8014eea:	f43f af27 	beq.w	8014d3c <_dtoa_r+0x47c>
 8014eee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014ef0:	1e6b      	subs	r3, r5, #1
 8014ef2:	930c      	str	r3, [sp, #48]	; 0x30
 8014ef4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014ef8:	2b30      	cmp	r3, #48	; 0x30
 8014efa:	d0f8      	beq.n	8014eee <_dtoa_r+0x62e>
 8014efc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014f00:	e04a      	b.n	8014f98 <_dtoa_r+0x6d8>
 8014f02:	bf00      	nop
 8014f04:	08018090 	.word	0x08018090
 8014f08:	08018068 	.word	0x08018068
 8014f0c:	3ff00000 	.word	0x3ff00000
 8014f10:	40240000 	.word	0x40240000
 8014f14:	401c0000 	.word	0x401c0000
 8014f18:	40140000 	.word	0x40140000
 8014f1c:	3fe00000 	.word	0x3fe00000
 8014f20:	4baf      	ldr	r3, [pc, #700]	; (80151e0 <_dtoa_r+0x920>)
 8014f22:	f7eb fb79 	bl	8000618 <__aeabi_dmul>
 8014f26:	4606      	mov	r6, r0
 8014f28:	460f      	mov	r7, r1
 8014f2a:	e7ac      	b.n	8014e86 <_dtoa_r+0x5c6>
 8014f2c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014f30:	9d00      	ldr	r5, [sp, #0]
 8014f32:	4642      	mov	r2, r8
 8014f34:	464b      	mov	r3, r9
 8014f36:	4630      	mov	r0, r6
 8014f38:	4639      	mov	r1, r7
 8014f3a:	f7eb fc97 	bl	800086c <__aeabi_ddiv>
 8014f3e:	f7eb fe1b 	bl	8000b78 <__aeabi_d2iz>
 8014f42:	9002      	str	r0, [sp, #8]
 8014f44:	f7eb fafe 	bl	8000544 <__aeabi_i2d>
 8014f48:	4642      	mov	r2, r8
 8014f4a:	464b      	mov	r3, r9
 8014f4c:	f7eb fb64 	bl	8000618 <__aeabi_dmul>
 8014f50:	4602      	mov	r2, r0
 8014f52:	460b      	mov	r3, r1
 8014f54:	4630      	mov	r0, r6
 8014f56:	4639      	mov	r1, r7
 8014f58:	f7eb f9a6 	bl	80002a8 <__aeabi_dsub>
 8014f5c:	9e02      	ldr	r6, [sp, #8]
 8014f5e:	9f01      	ldr	r7, [sp, #4]
 8014f60:	3630      	adds	r6, #48	; 0x30
 8014f62:	f805 6b01 	strb.w	r6, [r5], #1
 8014f66:	9e00      	ldr	r6, [sp, #0]
 8014f68:	1bae      	subs	r6, r5, r6
 8014f6a:	42b7      	cmp	r7, r6
 8014f6c:	4602      	mov	r2, r0
 8014f6e:	460b      	mov	r3, r1
 8014f70:	d137      	bne.n	8014fe2 <_dtoa_r+0x722>
 8014f72:	f7eb f99b 	bl	80002ac <__adddf3>
 8014f76:	4642      	mov	r2, r8
 8014f78:	464b      	mov	r3, r9
 8014f7a:	4606      	mov	r6, r0
 8014f7c:	460f      	mov	r7, r1
 8014f7e:	f7eb fddb 	bl	8000b38 <__aeabi_dcmpgt>
 8014f82:	b9c8      	cbnz	r0, 8014fb8 <_dtoa_r+0x6f8>
 8014f84:	4642      	mov	r2, r8
 8014f86:	464b      	mov	r3, r9
 8014f88:	4630      	mov	r0, r6
 8014f8a:	4639      	mov	r1, r7
 8014f8c:	f7eb fdac 	bl	8000ae8 <__aeabi_dcmpeq>
 8014f90:	b110      	cbz	r0, 8014f98 <_dtoa_r+0x6d8>
 8014f92:	9b02      	ldr	r3, [sp, #8]
 8014f94:	07d9      	lsls	r1, r3, #31
 8014f96:	d40f      	bmi.n	8014fb8 <_dtoa_r+0x6f8>
 8014f98:	4620      	mov	r0, r4
 8014f9a:	4659      	mov	r1, fp
 8014f9c:	f000 ff34 	bl	8015e08 <_Bfree>
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	702b      	strb	r3, [r5, #0]
 8014fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014fa6:	f10a 0001 	add.w	r0, sl, #1
 8014faa:	6018      	str	r0, [r3, #0]
 8014fac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	f43f acd8 	beq.w	8014964 <_dtoa_r+0xa4>
 8014fb4:	601d      	str	r5, [r3, #0]
 8014fb6:	e4d5      	b.n	8014964 <_dtoa_r+0xa4>
 8014fb8:	f8cd a01c 	str.w	sl, [sp, #28]
 8014fbc:	462b      	mov	r3, r5
 8014fbe:	461d      	mov	r5, r3
 8014fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014fc4:	2a39      	cmp	r2, #57	; 0x39
 8014fc6:	d108      	bne.n	8014fda <_dtoa_r+0x71a>
 8014fc8:	9a00      	ldr	r2, [sp, #0]
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	d1f7      	bne.n	8014fbe <_dtoa_r+0x6fe>
 8014fce:	9a07      	ldr	r2, [sp, #28]
 8014fd0:	9900      	ldr	r1, [sp, #0]
 8014fd2:	3201      	adds	r2, #1
 8014fd4:	9207      	str	r2, [sp, #28]
 8014fd6:	2230      	movs	r2, #48	; 0x30
 8014fd8:	700a      	strb	r2, [r1, #0]
 8014fda:	781a      	ldrb	r2, [r3, #0]
 8014fdc:	3201      	adds	r2, #1
 8014fde:	701a      	strb	r2, [r3, #0]
 8014fe0:	e78c      	b.n	8014efc <_dtoa_r+0x63c>
 8014fe2:	4b7f      	ldr	r3, [pc, #508]	; (80151e0 <_dtoa_r+0x920>)
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	f7eb fb17 	bl	8000618 <__aeabi_dmul>
 8014fea:	2200      	movs	r2, #0
 8014fec:	2300      	movs	r3, #0
 8014fee:	4606      	mov	r6, r0
 8014ff0:	460f      	mov	r7, r1
 8014ff2:	f7eb fd79 	bl	8000ae8 <__aeabi_dcmpeq>
 8014ff6:	2800      	cmp	r0, #0
 8014ff8:	d09b      	beq.n	8014f32 <_dtoa_r+0x672>
 8014ffa:	e7cd      	b.n	8014f98 <_dtoa_r+0x6d8>
 8014ffc:	9a08      	ldr	r2, [sp, #32]
 8014ffe:	2a00      	cmp	r2, #0
 8015000:	f000 80c4 	beq.w	801518c <_dtoa_r+0x8cc>
 8015004:	9a05      	ldr	r2, [sp, #20]
 8015006:	2a01      	cmp	r2, #1
 8015008:	f300 80a8 	bgt.w	801515c <_dtoa_r+0x89c>
 801500c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801500e:	2a00      	cmp	r2, #0
 8015010:	f000 80a0 	beq.w	8015154 <_dtoa_r+0x894>
 8015014:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015018:	9e06      	ldr	r6, [sp, #24]
 801501a:	4645      	mov	r5, r8
 801501c:	9a04      	ldr	r2, [sp, #16]
 801501e:	2101      	movs	r1, #1
 8015020:	441a      	add	r2, r3
 8015022:	4620      	mov	r0, r4
 8015024:	4498      	add	r8, r3
 8015026:	9204      	str	r2, [sp, #16]
 8015028:	f000 fff4 	bl	8016014 <__i2b>
 801502c:	4607      	mov	r7, r0
 801502e:	2d00      	cmp	r5, #0
 8015030:	dd0b      	ble.n	801504a <_dtoa_r+0x78a>
 8015032:	9b04      	ldr	r3, [sp, #16]
 8015034:	2b00      	cmp	r3, #0
 8015036:	dd08      	ble.n	801504a <_dtoa_r+0x78a>
 8015038:	42ab      	cmp	r3, r5
 801503a:	9a04      	ldr	r2, [sp, #16]
 801503c:	bfa8      	it	ge
 801503e:	462b      	movge	r3, r5
 8015040:	eba8 0803 	sub.w	r8, r8, r3
 8015044:	1aed      	subs	r5, r5, r3
 8015046:	1ad3      	subs	r3, r2, r3
 8015048:	9304      	str	r3, [sp, #16]
 801504a:	9b06      	ldr	r3, [sp, #24]
 801504c:	b1fb      	cbz	r3, 801508e <_dtoa_r+0x7ce>
 801504e:	9b08      	ldr	r3, [sp, #32]
 8015050:	2b00      	cmp	r3, #0
 8015052:	f000 809f 	beq.w	8015194 <_dtoa_r+0x8d4>
 8015056:	2e00      	cmp	r6, #0
 8015058:	dd11      	ble.n	801507e <_dtoa_r+0x7be>
 801505a:	4639      	mov	r1, r7
 801505c:	4632      	mov	r2, r6
 801505e:	4620      	mov	r0, r4
 8015060:	f001 f894 	bl	801618c <__pow5mult>
 8015064:	465a      	mov	r2, fp
 8015066:	4601      	mov	r1, r0
 8015068:	4607      	mov	r7, r0
 801506a:	4620      	mov	r0, r4
 801506c:	f000 ffe8 	bl	8016040 <__multiply>
 8015070:	4659      	mov	r1, fp
 8015072:	9007      	str	r0, [sp, #28]
 8015074:	4620      	mov	r0, r4
 8015076:	f000 fec7 	bl	8015e08 <_Bfree>
 801507a:	9b07      	ldr	r3, [sp, #28]
 801507c:	469b      	mov	fp, r3
 801507e:	9b06      	ldr	r3, [sp, #24]
 8015080:	1b9a      	subs	r2, r3, r6
 8015082:	d004      	beq.n	801508e <_dtoa_r+0x7ce>
 8015084:	4659      	mov	r1, fp
 8015086:	4620      	mov	r0, r4
 8015088:	f001 f880 	bl	801618c <__pow5mult>
 801508c:	4683      	mov	fp, r0
 801508e:	2101      	movs	r1, #1
 8015090:	4620      	mov	r0, r4
 8015092:	f000 ffbf 	bl	8016014 <__i2b>
 8015096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015098:	2b00      	cmp	r3, #0
 801509a:	4606      	mov	r6, r0
 801509c:	dd7c      	ble.n	8015198 <_dtoa_r+0x8d8>
 801509e:	461a      	mov	r2, r3
 80150a0:	4601      	mov	r1, r0
 80150a2:	4620      	mov	r0, r4
 80150a4:	f001 f872 	bl	801618c <__pow5mult>
 80150a8:	9b05      	ldr	r3, [sp, #20]
 80150aa:	2b01      	cmp	r3, #1
 80150ac:	4606      	mov	r6, r0
 80150ae:	dd76      	ble.n	801519e <_dtoa_r+0x8de>
 80150b0:	2300      	movs	r3, #0
 80150b2:	9306      	str	r3, [sp, #24]
 80150b4:	6933      	ldr	r3, [r6, #16]
 80150b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80150ba:	6918      	ldr	r0, [r3, #16]
 80150bc:	f000 ff5a 	bl	8015f74 <__hi0bits>
 80150c0:	f1c0 0020 	rsb	r0, r0, #32
 80150c4:	9b04      	ldr	r3, [sp, #16]
 80150c6:	4418      	add	r0, r3
 80150c8:	f010 001f 	ands.w	r0, r0, #31
 80150cc:	f000 8086 	beq.w	80151dc <_dtoa_r+0x91c>
 80150d0:	f1c0 0320 	rsb	r3, r0, #32
 80150d4:	2b04      	cmp	r3, #4
 80150d6:	dd7f      	ble.n	80151d8 <_dtoa_r+0x918>
 80150d8:	f1c0 001c 	rsb	r0, r0, #28
 80150dc:	9b04      	ldr	r3, [sp, #16]
 80150de:	4403      	add	r3, r0
 80150e0:	4480      	add	r8, r0
 80150e2:	4405      	add	r5, r0
 80150e4:	9304      	str	r3, [sp, #16]
 80150e6:	f1b8 0f00 	cmp.w	r8, #0
 80150ea:	dd05      	ble.n	80150f8 <_dtoa_r+0x838>
 80150ec:	4659      	mov	r1, fp
 80150ee:	4642      	mov	r2, r8
 80150f0:	4620      	mov	r0, r4
 80150f2:	f001 f8a5 	bl	8016240 <__lshift>
 80150f6:	4683      	mov	fp, r0
 80150f8:	9b04      	ldr	r3, [sp, #16]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	dd05      	ble.n	801510a <_dtoa_r+0x84a>
 80150fe:	4631      	mov	r1, r6
 8015100:	461a      	mov	r2, r3
 8015102:	4620      	mov	r0, r4
 8015104:	f001 f89c 	bl	8016240 <__lshift>
 8015108:	4606      	mov	r6, r0
 801510a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801510c:	2b00      	cmp	r3, #0
 801510e:	d069      	beq.n	80151e4 <_dtoa_r+0x924>
 8015110:	4631      	mov	r1, r6
 8015112:	4658      	mov	r0, fp
 8015114:	f001 f900 	bl	8016318 <__mcmp>
 8015118:	2800      	cmp	r0, #0
 801511a:	da63      	bge.n	80151e4 <_dtoa_r+0x924>
 801511c:	2300      	movs	r3, #0
 801511e:	4659      	mov	r1, fp
 8015120:	220a      	movs	r2, #10
 8015122:	4620      	mov	r0, r4
 8015124:	f000 fe92 	bl	8015e4c <__multadd>
 8015128:	9b08      	ldr	r3, [sp, #32]
 801512a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801512e:	4683      	mov	fp, r0
 8015130:	2b00      	cmp	r3, #0
 8015132:	f000 818f 	beq.w	8015454 <_dtoa_r+0xb94>
 8015136:	4639      	mov	r1, r7
 8015138:	2300      	movs	r3, #0
 801513a:	220a      	movs	r2, #10
 801513c:	4620      	mov	r0, r4
 801513e:	f000 fe85 	bl	8015e4c <__multadd>
 8015142:	f1b9 0f00 	cmp.w	r9, #0
 8015146:	4607      	mov	r7, r0
 8015148:	f300 808e 	bgt.w	8015268 <_dtoa_r+0x9a8>
 801514c:	9b05      	ldr	r3, [sp, #20]
 801514e:	2b02      	cmp	r3, #2
 8015150:	dc50      	bgt.n	80151f4 <_dtoa_r+0x934>
 8015152:	e089      	b.n	8015268 <_dtoa_r+0x9a8>
 8015154:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015156:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801515a:	e75d      	b.n	8015018 <_dtoa_r+0x758>
 801515c:	9b01      	ldr	r3, [sp, #4]
 801515e:	1e5e      	subs	r6, r3, #1
 8015160:	9b06      	ldr	r3, [sp, #24]
 8015162:	42b3      	cmp	r3, r6
 8015164:	bfbf      	itttt	lt
 8015166:	9b06      	ldrlt	r3, [sp, #24]
 8015168:	9606      	strlt	r6, [sp, #24]
 801516a:	1af2      	sublt	r2, r6, r3
 801516c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801516e:	bfb6      	itet	lt
 8015170:	189b      	addlt	r3, r3, r2
 8015172:	1b9e      	subge	r6, r3, r6
 8015174:	930d      	strlt	r3, [sp, #52]	; 0x34
 8015176:	9b01      	ldr	r3, [sp, #4]
 8015178:	bfb8      	it	lt
 801517a:	2600      	movlt	r6, #0
 801517c:	2b00      	cmp	r3, #0
 801517e:	bfb5      	itete	lt
 8015180:	eba8 0503 	sublt.w	r5, r8, r3
 8015184:	9b01      	ldrge	r3, [sp, #4]
 8015186:	2300      	movlt	r3, #0
 8015188:	4645      	movge	r5, r8
 801518a:	e747      	b.n	801501c <_dtoa_r+0x75c>
 801518c:	9e06      	ldr	r6, [sp, #24]
 801518e:	9f08      	ldr	r7, [sp, #32]
 8015190:	4645      	mov	r5, r8
 8015192:	e74c      	b.n	801502e <_dtoa_r+0x76e>
 8015194:	9a06      	ldr	r2, [sp, #24]
 8015196:	e775      	b.n	8015084 <_dtoa_r+0x7c4>
 8015198:	9b05      	ldr	r3, [sp, #20]
 801519a:	2b01      	cmp	r3, #1
 801519c:	dc18      	bgt.n	80151d0 <_dtoa_r+0x910>
 801519e:	9b02      	ldr	r3, [sp, #8]
 80151a0:	b9b3      	cbnz	r3, 80151d0 <_dtoa_r+0x910>
 80151a2:	9b03      	ldr	r3, [sp, #12]
 80151a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80151a8:	b9a3      	cbnz	r3, 80151d4 <_dtoa_r+0x914>
 80151aa:	9b03      	ldr	r3, [sp, #12]
 80151ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80151b0:	0d1b      	lsrs	r3, r3, #20
 80151b2:	051b      	lsls	r3, r3, #20
 80151b4:	b12b      	cbz	r3, 80151c2 <_dtoa_r+0x902>
 80151b6:	9b04      	ldr	r3, [sp, #16]
 80151b8:	3301      	adds	r3, #1
 80151ba:	9304      	str	r3, [sp, #16]
 80151bc:	f108 0801 	add.w	r8, r8, #1
 80151c0:	2301      	movs	r3, #1
 80151c2:	9306      	str	r3, [sp, #24]
 80151c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	f47f af74 	bne.w	80150b4 <_dtoa_r+0x7f4>
 80151cc:	2001      	movs	r0, #1
 80151ce:	e779      	b.n	80150c4 <_dtoa_r+0x804>
 80151d0:	2300      	movs	r3, #0
 80151d2:	e7f6      	b.n	80151c2 <_dtoa_r+0x902>
 80151d4:	9b02      	ldr	r3, [sp, #8]
 80151d6:	e7f4      	b.n	80151c2 <_dtoa_r+0x902>
 80151d8:	d085      	beq.n	80150e6 <_dtoa_r+0x826>
 80151da:	4618      	mov	r0, r3
 80151dc:	301c      	adds	r0, #28
 80151de:	e77d      	b.n	80150dc <_dtoa_r+0x81c>
 80151e0:	40240000 	.word	0x40240000
 80151e4:	9b01      	ldr	r3, [sp, #4]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	dc38      	bgt.n	801525c <_dtoa_r+0x99c>
 80151ea:	9b05      	ldr	r3, [sp, #20]
 80151ec:	2b02      	cmp	r3, #2
 80151ee:	dd35      	ble.n	801525c <_dtoa_r+0x99c>
 80151f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80151f4:	f1b9 0f00 	cmp.w	r9, #0
 80151f8:	d10d      	bne.n	8015216 <_dtoa_r+0x956>
 80151fa:	4631      	mov	r1, r6
 80151fc:	464b      	mov	r3, r9
 80151fe:	2205      	movs	r2, #5
 8015200:	4620      	mov	r0, r4
 8015202:	f000 fe23 	bl	8015e4c <__multadd>
 8015206:	4601      	mov	r1, r0
 8015208:	4606      	mov	r6, r0
 801520a:	4658      	mov	r0, fp
 801520c:	f001 f884 	bl	8016318 <__mcmp>
 8015210:	2800      	cmp	r0, #0
 8015212:	f73f adbd 	bgt.w	8014d90 <_dtoa_r+0x4d0>
 8015216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015218:	9d00      	ldr	r5, [sp, #0]
 801521a:	ea6f 0a03 	mvn.w	sl, r3
 801521e:	f04f 0800 	mov.w	r8, #0
 8015222:	4631      	mov	r1, r6
 8015224:	4620      	mov	r0, r4
 8015226:	f000 fdef 	bl	8015e08 <_Bfree>
 801522a:	2f00      	cmp	r7, #0
 801522c:	f43f aeb4 	beq.w	8014f98 <_dtoa_r+0x6d8>
 8015230:	f1b8 0f00 	cmp.w	r8, #0
 8015234:	d005      	beq.n	8015242 <_dtoa_r+0x982>
 8015236:	45b8      	cmp	r8, r7
 8015238:	d003      	beq.n	8015242 <_dtoa_r+0x982>
 801523a:	4641      	mov	r1, r8
 801523c:	4620      	mov	r0, r4
 801523e:	f000 fde3 	bl	8015e08 <_Bfree>
 8015242:	4639      	mov	r1, r7
 8015244:	4620      	mov	r0, r4
 8015246:	f000 fddf 	bl	8015e08 <_Bfree>
 801524a:	e6a5      	b.n	8014f98 <_dtoa_r+0x6d8>
 801524c:	2600      	movs	r6, #0
 801524e:	4637      	mov	r7, r6
 8015250:	e7e1      	b.n	8015216 <_dtoa_r+0x956>
 8015252:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015254:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015258:	4637      	mov	r7, r6
 801525a:	e599      	b.n	8014d90 <_dtoa_r+0x4d0>
 801525c:	9b08      	ldr	r3, [sp, #32]
 801525e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015262:	2b00      	cmp	r3, #0
 8015264:	f000 80fd 	beq.w	8015462 <_dtoa_r+0xba2>
 8015268:	2d00      	cmp	r5, #0
 801526a:	dd05      	ble.n	8015278 <_dtoa_r+0x9b8>
 801526c:	4639      	mov	r1, r7
 801526e:	462a      	mov	r2, r5
 8015270:	4620      	mov	r0, r4
 8015272:	f000 ffe5 	bl	8016240 <__lshift>
 8015276:	4607      	mov	r7, r0
 8015278:	9b06      	ldr	r3, [sp, #24]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d05c      	beq.n	8015338 <_dtoa_r+0xa78>
 801527e:	6879      	ldr	r1, [r7, #4]
 8015280:	4620      	mov	r0, r4
 8015282:	f000 fd81 	bl	8015d88 <_Balloc>
 8015286:	4605      	mov	r5, r0
 8015288:	b928      	cbnz	r0, 8015296 <_dtoa_r+0x9d6>
 801528a:	4b80      	ldr	r3, [pc, #512]	; (801548c <_dtoa_r+0xbcc>)
 801528c:	4602      	mov	r2, r0
 801528e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015292:	f7ff bb2e 	b.w	80148f2 <_dtoa_r+0x32>
 8015296:	693a      	ldr	r2, [r7, #16]
 8015298:	3202      	adds	r2, #2
 801529a:	0092      	lsls	r2, r2, #2
 801529c:	f107 010c 	add.w	r1, r7, #12
 80152a0:	300c      	adds	r0, #12
 80152a2:	f7fd fa55 	bl	8012750 <memcpy>
 80152a6:	2201      	movs	r2, #1
 80152a8:	4629      	mov	r1, r5
 80152aa:	4620      	mov	r0, r4
 80152ac:	f000 ffc8 	bl	8016240 <__lshift>
 80152b0:	9b00      	ldr	r3, [sp, #0]
 80152b2:	3301      	adds	r3, #1
 80152b4:	9301      	str	r3, [sp, #4]
 80152b6:	9b00      	ldr	r3, [sp, #0]
 80152b8:	444b      	add	r3, r9
 80152ba:	9307      	str	r3, [sp, #28]
 80152bc:	9b02      	ldr	r3, [sp, #8]
 80152be:	f003 0301 	and.w	r3, r3, #1
 80152c2:	46b8      	mov	r8, r7
 80152c4:	9306      	str	r3, [sp, #24]
 80152c6:	4607      	mov	r7, r0
 80152c8:	9b01      	ldr	r3, [sp, #4]
 80152ca:	4631      	mov	r1, r6
 80152cc:	3b01      	subs	r3, #1
 80152ce:	4658      	mov	r0, fp
 80152d0:	9302      	str	r3, [sp, #8]
 80152d2:	f7ff fa69 	bl	80147a8 <quorem>
 80152d6:	4603      	mov	r3, r0
 80152d8:	3330      	adds	r3, #48	; 0x30
 80152da:	9004      	str	r0, [sp, #16]
 80152dc:	4641      	mov	r1, r8
 80152de:	4658      	mov	r0, fp
 80152e0:	9308      	str	r3, [sp, #32]
 80152e2:	f001 f819 	bl	8016318 <__mcmp>
 80152e6:	463a      	mov	r2, r7
 80152e8:	4681      	mov	r9, r0
 80152ea:	4631      	mov	r1, r6
 80152ec:	4620      	mov	r0, r4
 80152ee:	f001 f82f 	bl	8016350 <__mdiff>
 80152f2:	68c2      	ldr	r2, [r0, #12]
 80152f4:	9b08      	ldr	r3, [sp, #32]
 80152f6:	4605      	mov	r5, r0
 80152f8:	bb02      	cbnz	r2, 801533c <_dtoa_r+0xa7c>
 80152fa:	4601      	mov	r1, r0
 80152fc:	4658      	mov	r0, fp
 80152fe:	f001 f80b 	bl	8016318 <__mcmp>
 8015302:	9b08      	ldr	r3, [sp, #32]
 8015304:	4602      	mov	r2, r0
 8015306:	4629      	mov	r1, r5
 8015308:	4620      	mov	r0, r4
 801530a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801530e:	f000 fd7b 	bl	8015e08 <_Bfree>
 8015312:	9b05      	ldr	r3, [sp, #20]
 8015314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015316:	9d01      	ldr	r5, [sp, #4]
 8015318:	ea43 0102 	orr.w	r1, r3, r2
 801531c:	9b06      	ldr	r3, [sp, #24]
 801531e:	430b      	orrs	r3, r1
 8015320:	9b08      	ldr	r3, [sp, #32]
 8015322:	d10d      	bne.n	8015340 <_dtoa_r+0xa80>
 8015324:	2b39      	cmp	r3, #57	; 0x39
 8015326:	d029      	beq.n	801537c <_dtoa_r+0xabc>
 8015328:	f1b9 0f00 	cmp.w	r9, #0
 801532c:	dd01      	ble.n	8015332 <_dtoa_r+0xa72>
 801532e:	9b04      	ldr	r3, [sp, #16]
 8015330:	3331      	adds	r3, #49	; 0x31
 8015332:	9a02      	ldr	r2, [sp, #8]
 8015334:	7013      	strb	r3, [r2, #0]
 8015336:	e774      	b.n	8015222 <_dtoa_r+0x962>
 8015338:	4638      	mov	r0, r7
 801533a:	e7b9      	b.n	80152b0 <_dtoa_r+0x9f0>
 801533c:	2201      	movs	r2, #1
 801533e:	e7e2      	b.n	8015306 <_dtoa_r+0xa46>
 8015340:	f1b9 0f00 	cmp.w	r9, #0
 8015344:	db06      	blt.n	8015354 <_dtoa_r+0xa94>
 8015346:	9905      	ldr	r1, [sp, #20]
 8015348:	ea41 0909 	orr.w	r9, r1, r9
 801534c:	9906      	ldr	r1, [sp, #24]
 801534e:	ea59 0101 	orrs.w	r1, r9, r1
 8015352:	d120      	bne.n	8015396 <_dtoa_r+0xad6>
 8015354:	2a00      	cmp	r2, #0
 8015356:	ddec      	ble.n	8015332 <_dtoa_r+0xa72>
 8015358:	4659      	mov	r1, fp
 801535a:	2201      	movs	r2, #1
 801535c:	4620      	mov	r0, r4
 801535e:	9301      	str	r3, [sp, #4]
 8015360:	f000 ff6e 	bl	8016240 <__lshift>
 8015364:	4631      	mov	r1, r6
 8015366:	4683      	mov	fp, r0
 8015368:	f000 ffd6 	bl	8016318 <__mcmp>
 801536c:	2800      	cmp	r0, #0
 801536e:	9b01      	ldr	r3, [sp, #4]
 8015370:	dc02      	bgt.n	8015378 <_dtoa_r+0xab8>
 8015372:	d1de      	bne.n	8015332 <_dtoa_r+0xa72>
 8015374:	07da      	lsls	r2, r3, #31
 8015376:	d5dc      	bpl.n	8015332 <_dtoa_r+0xa72>
 8015378:	2b39      	cmp	r3, #57	; 0x39
 801537a:	d1d8      	bne.n	801532e <_dtoa_r+0xa6e>
 801537c:	9a02      	ldr	r2, [sp, #8]
 801537e:	2339      	movs	r3, #57	; 0x39
 8015380:	7013      	strb	r3, [r2, #0]
 8015382:	462b      	mov	r3, r5
 8015384:	461d      	mov	r5, r3
 8015386:	3b01      	subs	r3, #1
 8015388:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801538c:	2a39      	cmp	r2, #57	; 0x39
 801538e:	d050      	beq.n	8015432 <_dtoa_r+0xb72>
 8015390:	3201      	adds	r2, #1
 8015392:	701a      	strb	r2, [r3, #0]
 8015394:	e745      	b.n	8015222 <_dtoa_r+0x962>
 8015396:	2a00      	cmp	r2, #0
 8015398:	dd03      	ble.n	80153a2 <_dtoa_r+0xae2>
 801539a:	2b39      	cmp	r3, #57	; 0x39
 801539c:	d0ee      	beq.n	801537c <_dtoa_r+0xabc>
 801539e:	3301      	adds	r3, #1
 80153a0:	e7c7      	b.n	8015332 <_dtoa_r+0xa72>
 80153a2:	9a01      	ldr	r2, [sp, #4]
 80153a4:	9907      	ldr	r1, [sp, #28]
 80153a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80153aa:	428a      	cmp	r2, r1
 80153ac:	d02a      	beq.n	8015404 <_dtoa_r+0xb44>
 80153ae:	4659      	mov	r1, fp
 80153b0:	2300      	movs	r3, #0
 80153b2:	220a      	movs	r2, #10
 80153b4:	4620      	mov	r0, r4
 80153b6:	f000 fd49 	bl	8015e4c <__multadd>
 80153ba:	45b8      	cmp	r8, r7
 80153bc:	4683      	mov	fp, r0
 80153be:	f04f 0300 	mov.w	r3, #0
 80153c2:	f04f 020a 	mov.w	r2, #10
 80153c6:	4641      	mov	r1, r8
 80153c8:	4620      	mov	r0, r4
 80153ca:	d107      	bne.n	80153dc <_dtoa_r+0xb1c>
 80153cc:	f000 fd3e 	bl	8015e4c <__multadd>
 80153d0:	4680      	mov	r8, r0
 80153d2:	4607      	mov	r7, r0
 80153d4:	9b01      	ldr	r3, [sp, #4]
 80153d6:	3301      	adds	r3, #1
 80153d8:	9301      	str	r3, [sp, #4]
 80153da:	e775      	b.n	80152c8 <_dtoa_r+0xa08>
 80153dc:	f000 fd36 	bl	8015e4c <__multadd>
 80153e0:	4639      	mov	r1, r7
 80153e2:	4680      	mov	r8, r0
 80153e4:	2300      	movs	r3, #0
 80153e6:	220a      	movs	r2, #10
 80153e8:	4620      	mov	r0, r4
 80153ea:	f000 fd2f 	bl	8015e4c <__multadd>
 80153ee:	4607      	mov	r7, r0
 80153f0:	e7f0      	b.n	80153d4 <_dtoa_r+0xb14>
 80153f2:	f1b9 0f00 	cmp.w	r9, #0
 80153f6:	9a00      	ldr	r2, [sp, #0]
 80153f8:	bfcc      	ite	gt
 80153fa:	464d      	movgt	r5, r9
 80153fc:	2501      	movle	r5, #1
 80153fe:	4415      	add	r5, r2
 8015400:	f04f 0800 	mov.w	r8, #0
 8015404:	4659      	mov	r1, fp
 8015406:	2201      	movs	r2, #1
 8015408:	4620      	mov	r0, r4
 801540a:	9301      	str	r3, [sp, #4]
 801540c:	f000 ff18 	bl	8016240 <__lshift>
 8015410:	4631      	mov	r1, r6
 8015412:	4683      	mov	fp, r0
 8015414:	f000 ff80 	bl	8016318 <__mcmp>
 8015418:	2800      	cmp	r0, #0
 801541a:	dcb2      	bgt.n	8015382 <_dtoa_r+0xac2>
 801541c:	d102      	bne.n	8015424 <_dtoa_r+0xb64>
 801541e:	9b01      	ldr	r3, [sp, #4]
 8015420:	07db      	lsls	r3, r3, #31
 8015422:	d4ae      	bmi.n	8015382 <_dtoa_r+0xac2>
 8015424:	462b      	mov	r3, r5
 8015426:	461d      	mov	r5, r3
 8015428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801542c:	2a30      	cmp	r2, #48	; 0x30
 801542e:	d0fa      	beq.n	8015426 <_dtoa_r+0xb66>
 8015430:	e6f7      	b.n	8015222 <_dtoa_r+0x962>
 8015432:	9a00      	ldr	r2, [sp, #0]
 8015434:	429a      	cmp	r2, r3
 8015436:	d1a5      	bne.n	8015384 <_dtoa_r+0xac4>
 8015438:	f10a 0a01 	add.w	sl, sl, #1
 801543c:	2331      	movs	r3, #49	; 0x31
 801543e:	e779      	b.n	8015334 <_dtoa_r+0xa74>
 8015440:	4b13      	ldr	r3, [pc, #76]	; (8015490 <_dtoa_r+0xbd0>)
 8015442:	f7ff baaf 	b.w	80149a4 <_dtoa_r+0xe4>
 8015446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015448:	2b00      	cmp	r3, #0
 801544a:	f47f aa86 	bne.w	801495a <_dtoa_r+0x9a>
 801544e:	4b11      	ldr	r3, [pc, #68]	; (8015494 <_dtoa_r+0xbd4>)
 8015450:	f7ff baa8 	b.w	80149a4 <_dtoa_r+0xe4>
 8015454:	f1b9 0f00 	cmp.w	r9, #0
 8015458:	dc03      	bgt.n	8015462 <_dtoa_r+0xba2>
 801545a:	9b05      	ldr	r3, [sp, #20]
 801545c:	2b02      	cmp	r3, #2
 801545e:	f73f aec9 	bgt.w	80151f4 <_dtoa_r+0x934>
 8015462:	9d00      	ldr	r5, [sp, #0]
 8015464:	4631      	mov	r1, r6
 8015466:	4658      	mov	r0, fp
 8015468:	f7ff f99e 	bl	80147a8 <quorem>
 801546c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015470:	f805 3b01 	strb.w	r3, [r5], #1
 8015474:	9a00      	ldr	r2, [sp, #0]
 8015476:	1aaa      	subs	r2, r5, r2
 8015478:	4591      	cmp	r9, r2
 801547a:	ddba      	ble.n	80153f2 <_dtoa_r+0xb32>
 801547c:	4659      	mov	r1, fp
 801547e:	2300      	movs	r3, #0
 8015480:	220a      	movs	r2, #10
 8015482:	4620      	mov	r0, r4
 8015484:	f000 fce2 	bl	8015e4c <__multadd>
 8015488:	4683      	mov	fp, r0
 801548a:	e7eb      	b.n	8015464 <_dtoa_r+0xba4>
 801548c:	08017f78 	.word	0x08017f78
 8015490:	08018179 	.word	0x08018179
 8015494:	08017ef5 	.word	0x08017ef5

08015498 <__sflush_r>:
 8015498:	898a      	ldrh	r2, [r1, #12]
 801549a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801549e:	4605      	mov	r5, r0
 80154a0:	0710      	lsls	r0, r2, #28
 80154a2:	460c      	mov	r4, r1
 80154a4:	d458      	bmi.n	8015558 <__sflush_r+0xc0>
 80154a6:	684b      	ldr	r3, [r1, #4]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	dc05      	bgt.n	80154b8 <__sflush_r+0x20>
 80154ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	dc02      	bgt.n	80154b8 <__sflush_r+0x20>
 80154b2:	2000      	movs	r0, #0
 80154b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80154ba:	2e00      	cmp	r6, #0
 80154bc:	d0f9      	beq.n	80154b2 <__sflush_r+0x1a>
 80154be:	2300      	movs	r3, #0
 80154c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80154c4:	682f      	ldr	r7, [r5, #0]
 80154c6:	602b      	str	r3, [r5, #0]
 80154c8:	d032      	beq.n	8015530 <__sflush_r+0x98>
 80154ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80154cc:	89a3      	ldrh	r3, [r4, #12]
 80154ce:	075a      	lsls	r2, r3, #29
 80154d0:	d505      	bpl.n	80154de <__sflush_r+0x46>
 80154d2:	6863      	ldr	r3, [r4, #4]
 80154d4:	1ac0      	subs	r0, r0, r3
 80154d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80154d8:	b10b      	cbz	r3, 80154de <__sflush_r+0x46>
 80154da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80154dc:	1ac0      	subs	r0, r0, r3
 80154de:	2300      	movs	r3, #0
 80154e0:	4602      	mov	r2, r0
 80154e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80154e4:	6a21      	ldr	r1, [r4, #32]
 80154e6:	4628      	mov	r0, r5
 80154e8:	47b0      	blx	r6
 80154ea:	1c43      	adds	r3, r0, #1
 80154ec:	89a3      	ldrh	r3, [r4, #12]
 80154ee:	d106      	bne.n	80154fe <__sflush_r+0x66>
 80154f0:	6829      	ldr	r1, [r5, #0]
 80154f2:	291d      	cmp	r1, #29
 80154f4:	d82c      	bhi.n	8015550 <__sflush_r+0xb8>
 80154f6:	4a2a      	ldr	r2, [pc, #168]	; (80155a0 <__sflush_r+0x108>)
 80154f8:	40ca      	lsrs	r2, r1
 80154fa:	07d6      	lsls	r6, r2, #31
 80154fc:	d528      	bpl.n	8015550 <__sflush_r+0xb8>
 80154fe:	2200      	movs	r2, #0
 8015500:	6062      	str	r2, [r4, #4]
 8015502:	04d9      	lsls	r1, r3, #19
 8015504:	6922      	ldr	r2, [r4, #16]
 8015506:	6022      	str	r2, [r4, #0]
 8015508:	d504      	bpl.n	8015514 <__sflush_r+0x7c>
 801550a:	1c42      	adds	r2, r0, #1
 801550c:	d101      	bne.n	8015512 <__sflush_r+0x7a>
 801550e:	682b      	ldr	r3, [r5, #0]
 8015510:	b903      	cbnz	r3, 8015514 <__sflush_r+0x7c>
 8015512:	6560      	str	r0, [r4, #84]	; 0x54
 8015514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015516:	602f      	str	r7, [r5, #0]
 8015518:	2900      	cmp	r1, #0
 801551a:	d0ca      	beq.n	80154b2 <__sflush_r+0x1a>
 801551c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015520:	4299      	cmp	r1, r3
 8015522:	d002      	beq.n	801552a <__sflush_r+0x92>
 8015524:	4628      	mov	r0, r5
 8015526:	f7fd f943 	bl	80127b0 <_free_r>
 801552a:	2000      	movs	r0, #0
 801552c:	6360      	str	r0, [r4, #52]	; 0x34
 801552e:	e7c1      	b.n	80154b4 <__sflush_r+0x1c>
 8015530:	6a21      	ldr	r1, [r4, #32]
 8015532:	2301      	movs	r3, #1
 8015534:	4628      	mov	r0, r5
 8015536:	47b0      	blx	r6
 8015538:	1c41      	adds	r1, r0, #1
 801553a:	d1c7      	bne.n	80154cc <__sflush_r+0x34>
 801553c:	682b      	ldr	r3, [r5, #0]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d0c4      	beq.n	80154cc <__sflush_r+0x34>
 8015542:	2b1d      	cmp	r3, #29
 8015544:	d001      	beq.n	801554a <__sflush_r+0xb2>
 8015546:	2b16      	cmp	r3, #22
 8015548:	d101      	bne.n	801554e <__sflush_r+0xb6>
 801554a:	602f      	str	r7, [r5, #0]
 801554c:	e7b1      	b.n	80154b2 <__sflush_r+0x1a>
 801554e:	89a3      	ldrh	r3, [r4, #12]
 8015550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015554:	81a3      	strh	r3, [r4, #12]
 8015556:	e7ad      	b.n	80154b4 <__sflush_r+0x1c>
 8015558:	690f      	ldr	r7, [r1, #16]
 801555a:	2f00      	cmp	r7, #0
 801555c:	d0a9      	beq.n	80154b2 <__sflush_r+0x1a>
 801555e:	0793      	lsls	r3, r2, #30
 8015560:	680e      	ldr	r6, [r1, #0]
 8015562:	bf08      	it	eq
 8015564:	694b      	ldreq	r3, [r1, #20]
 8015566:	600f      	str	r7, [r1, #0]
 8015568:	bf18      	it	ne
 801556a:	2300      	movne	r3, #0
 801556c:	eba6 0807 	sub.w	r8, r6, r7
 8015570:	608b      	str	r3, [r1, #8]
 8015572:	f1b8 0f00 	cmp.w	r8, #0
 8015576:	dd9c      	ble.n	80154b2 <__sflush_r+0x1a>
 8015578:	6a21      	ldr	r1, [r4, #32]
 801557a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801557c:	4643      	mov	r3, r8
 801557e:	463a      	mov	r2, r7
 8015580:	4628      	mov	r0, r5
 8015582:	47b0      	blx	r6
 8015584:	2800      	cmp	r0, #0
 8015586:	dc06      	bgt.n	8015596 <__sflush_r+0xfe>
 8015588:	89a3      	ldrh	r3, [r4, #12]
 801558a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801558e:	81a3      	strh	r3, [r4, #12]
 8015590:	f04f 30ff 	mov.w	r0, #4294967295
 8015594:	e78e      	b.n	80154b4 <__sflush_r+0x1c>
 8015596:	4407      	add	r7, r0
 8015598:	eba8 0800 	sub.w	r8, r8, r0
 801559c:	e7e9      	b.n	8015572 <__sflush_r+0xda>
 801559e:	bf00      	nop
 80155a0:	20400001 	.word	0x20400001

080155a4 <_fflush_r>:
 80155a4:	b538      	push	{r3, r4, r5, lr}
 80155a6:	690b      	ldr	r3, [r1, #16]
 80155a8:	4605      	mov	r5, r0
 80155aa:	460c      	mov	r4, r1
 80155ac:	b913      	cbnz	r3, 80155b4 <_fflush_r+0x10>
 80155ae:	2500      	movs	r5, #0
 80155b0:	4628      	mov	r0, r5
 80155b2:	bd38      	pop	{r3, r4, r5, pc}
 80155b4:	b118      	cbz	r0, 80155be <_fflush_r+0x1a>
 80155b6:	6983      	ldr	r3, [r0, #24]
 80155b8:	b90b      	cbnz	r3, 80155be <_fflush_r+0x1a>
 80155ba:	f7fc fff3 	bl	80125a4 <__sinit>
 80155be:	4b14      	ldr	r3, [pc, #80]	; (8015610 <_fflush_r+0x6c>)
 80155c0:	429c      	cmp	r4, r3
 80155c2:	d11b      	bne.n	80155fc <_fflush_r+0x58>
 80155c4:	686c      	ldr	r4, [r5, #4]
 80155c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d0ef      	beq.n	80155ae <_fflush_r+0xa>
 80155ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80155d0:	07d0      	lsls	r0, r2, #31
 80155d2:	d404      	bmi.n	80155de <_fflush_r+0x3a>
 80155d4:	0599      	lsls	r1, r3, #22
 80155d6:	d402      	bmi.n	80155de <_fflush_r+0x3a>
 80155d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80155da:	f7fd f8a6 	bl	801272a <__retarget_lock_acquire_recursive>
 80155de:	4628      	mov	r0, r5
 80155e0:	4621      	mov	r1, r4
 80155e2:	f7ff ff59 	bl	8015498 <__sflush_r>
 80155e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80155e8:	07da      	lsls	r2, r3, #31
 80155ea:	4605      	mov	r5, r0
 80155ec:	d4e0      	bmi.n	80155b0 <_fflush_r+0xc>
 80155ee:	89a3      	ldrh	r3, [r4, #12]
 80155f0:	059b      	lsls	r3, r3, #22
 80155f2:	d4dd      	bmi.n	80155b0 <_fflush_r+0xc>
 80155f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80155f6:	f7fd f899 	bl	801272c <__retarget_lock_release_recursive>
 80155fa:	e7d9      	b.n	80155b0 <_fflush_r+0xc>
 80155fc:	4b05      	ldr	r3, [pc, #20]	; (8015614 <_fflush_r+0x70>)
 80155fe:	429c      	cmp	r4, r3
 8015600:	d101      	bne.n	8015606 <_fflush_r+0x62>
 8015602:	68ac      	ldr	r4, [r5, #8]
 8015604:	e7df      	b.n	80155c6 <_fflush_r+0x22>
 8015606:	4b04      	ldr	r3, [pc, #16]	; (8015618 <_fflush_r+0x74>)
 8015608:	429c      	cmp	r4, r3
 801560a:	bf08      	it	eq
 801560c:	68ec      	ldreq	r4, [r5, #12]
 801560e:	e7da      	b.n	80155c6 <_fflush_r+0x22>
 8015610:	08017ce8 	.word	0x08017ce8
 8015614:	08017d08 	.word	0x08017d08
 8015618:	08017cc8 	.word	0x08017cc8

0801561c <fiprintf>:
 801561c:	b40e      	push	{r1, r2, r3}
 801561e:	b503      	push	{r0, r1, lr}
 8015620:	4601      	mov	r1, r0
 8015622:	ab03      	add	r3, sp, #12
 8015624:	4805      	ldr	r0, [pc, #20]	; (801563c <fiprintf+0x20>)
 8015626:	f853 2b04 	ldr.w	r2, [r3], #4
 801562a:	6800      	ldr	r0, [r0, #0]
 801562c:	9301      	str	r3, [sp, #4]
 801562e:	f001 fbf3 	bl	8016e18 <_vfiprintf_r>
 8015632:	b002      	add	sp, #8
 8015634:	f85d eb04 	ldr.w	lr, [sp], #4
 8015638:	b003      	add	sp, #12
 801563a:	4770      	bx	lr
 801563c:	200001a4 	.word	0x200001a4

08015640 <rshift>:
 8015640:	6903      	ldr	r3, [r0, #16]
 8015642:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015646:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801564a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801564e:	f100 0414 	add.w	r4, r0, #20
 8015652:	dd45      	ble.n	80156e0 <rshift+0xa0>
 8015654:	f011 011f 	ands.w	r1, r1, #31
 8015658:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801565c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015660:	d10c      	bne.n	801567c <rshift+0x3c>
 8015662:	f100 0710 	add.w	r7, r0, #16
 8015666:	4629      	mov	r1, r5
 8015668:	42b1      	cmp	r1, r6
 801566a:	d334      	bcc.n	80156d6 <rshift+0x96>
 801566c:	1a9b      	subs	r3, r3, r2
 801566e:	009b      	lsls	r3, r3, #2
 8015670:	1eea      	subs	r2, r5, #3
 8015672:	4296      	cmp	r6, r2
 8015674:	bf38      	it	cc
 8015676:	2300      	movcc	r3, #0
 8015678:	4423      	add	r3, r4
 801567a:	e015      	b.n	80156a8 <rshift+0x68>
 801567c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015680:	f1c1 0820 	rsb	r8, r1, #32
 8015684:	40cf      	lsrs	r7, r1
 8015686:	f105 0e04 	add.w	lr, r5, #4
 801568a:	46a1      	mov	r9, r4
 801568c:	4576      	cmp	r6, lr
 801568e:	46f4      	mov	ip, lr
 8015690:	d815      	bhi.n	80156be <rshift+0x7e>
 8015692:	1a9b      	subs	r3, r3, r2
 8015694:	009a      	lsls	r2, r3, #2
 8015696:	3a04      	subs	r2, #4
 8015698:	3501      	adds	r5, #1
 801569a:	42ae      	cmp	r6, r5
 801569c:	bf38      	it	cc
 801569e:	2200      	movcc	r2, #0
 80156a0:	18a3      	adds	r3, r4, r2
 80156a2:	50a7      	str	r7, [r4, r2]
 80156a4:	b107      	cbz	r7, 80156a8 <rshift+0x68>
 80156a6:	3304      	adds	r3, #4
 80156a8:	1b1a      	subs	r2, r3, r4
 80156aa:	42a3      	cmp	r3, r4
 80156ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80156b0:	bf08      	it	eq
 80156b2:	2300      	moveq	r3, #0
 80156b4:	6102      	str	r2, [r0, #16]
 80156b6:	bf08      	it	eq
 80156b8:	6143      	streq	r3, [r0, #20]
 80156ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156be:	f8dc c000 	ldr.w	ip, [ip]
 80156c2:	fa0c fc08 	lsl.w	ip, ip, r8
 80156c6:	ea4c 0707 	orr.w	r7, ip, r7
 80156ca:	f849 7b04 	str.w	r7, [r9], #4
 80156ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80156d2:	40cf      	lsrs	r7, r1
 80156d4:	e7da      	b.n	801568c <rshift+0x4c>
 80156d6:	f851 cb04 	ldr.w	ip, [r1], #4
 80156da:	f847 cf04 	str.w	ip, [r7, #4]!
 80156de:	e7c3      	b.n	8015668 <rshift+0x28>
 80156e0:	4623      	mov	r3, r4
 80156e2:	e7e1      	b.n	80156a8 <rshift+0x68>

080156e4 <__hexdig_fun>:
 80156e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80156e8:	2b09      	cmp	r3, #9
 80156ea:	d802      	bhi.n	80156f2 <__hexdig_fun+0xe>
 80156ec:	3820      	subs	r0, #32
 80156ee:	b2c0      	uxtb	r0, r0
 80156f0:	4770      	bx	lr
 80156f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80156f6:	2b05      	cmp	r3, #5
 80156f8:	d801      	bhi.n	80156fe <__hexdig_fun+0x1a>
 80156fa:	3847      	subs	r0, #71	; 0x47
 80156fc:	e7f7      	b.n	80156ee <__hexdig_fun+0xa>
 80156fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015702:	2b05      	cmp	r3, #5
 8015704:	d801      	bhi.n	801570a <__hexdig_fun+0x26>
 8015706:	3827      	subs	r0, #39	; 0x27
 8015708:	e7f1      	b.n	80156ee <__hexdig_fun+0xa>
 801570a:	2000      	movs	r0, #0
 801570c:	4770      	bx	lr
	...

08015710 <__gethex>:
 8015710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015714:	ed2d 8b02 	vpush	{d8}
 8015718:	b089      	sub	sp, #36	; 0x24
 801571a:	ee08 0a10 	vmov	s16, r0
 801571e:	9304      	str	r3, [sp, #16]
 8015720:	4bbc      	ldr	r3, [pc, #752]	; (8015a14 <__gethex+0x304>)
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	9301      	str	r3, [sp, #4]
 8015726:	4618      	mov	r0, r3
 8015728:	468b      	mov	fp, r1
 801572a:	4690      	mov	r8, r2
 801572c:	f7ea fd60 	bl	80001f0 <strlen>
 8015730:	9b01      	ldr	r3, [sp, #4]
 8015732:	f8db 2000 	ldr.w	r2, [fp]
 8015736:	4403      	add	r3, r0
 8015738:	4682      	mov	sl, r0
 801573a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801573e:	9305      	str	r3, [sp, #20]
 8015740:	1c93      	adds	r3, r2, #2
 8015742:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015746:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801574a:	32fe      	adds	r2, #254	; 0xfe
 801574c:	18d1      	adds	r1, r2, r3
 801574e:	461f      	mov	r7, r3
 8015750:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015754:	9100      	str	r1, [sp, #0]
 8015756:	2830      	cmp	r0, #48	; 0x30
 8015758:	d0f8      	beq.n	801574c <__gethex+0x3c>
 801575a:	f7ff ffc3 	bl	80156e4 <__hexdig_fun>
 801575e:	4604      	mov	r4, r0
 8015760:	2800      	cmp	r0, #0
 8015762:	d13a      	bne.n	80157da <__gethex+0xca>
 8015764:	9901      	ldr	r1, [sp, #4]
 8015766:	4652      	mov	r2, sl
 8015768:	4638      	mov	r0, r7
 801576a:	f7fe f89a 	bl	80138a2 <strncmp>
 801576e:	4605      	mov	r5, r0
 8015770:	2800      	cmp	r0, #0
 8015772:	d168      	bne.n	8015846 <__gethex+0x136>
 8015774:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015778:	eb07 060a 	add.w	r6, r7, sl
 801577c:	f7ff ffb2 	bl	80156e4 <__hexdig_fun>
 8015780:	2800      	cmp	r0, #0
 8015782:	d062      	beq.n	801584a <__gethex+0x13a>
 8015784:	4633      	mov	r3, r6
 8015786:	7818      	ldrb	r0, [r3, #0]
 8015788:	2830      	cmp	r0, #48	; 0x30
 801578a:	461f      	mov	r7, r3
 801578c:	f103 0301 	add.w	r3, r3, #1
 8015790:	d0f9      	beq.n	8015786 <__gethex+0x76>
 8015792:	f7ff ffa7 	bl	80156e4 <__hexdig_fun>
 8015796:	2301      	movs	r3, #1
 8015798:	fab0 f480 	clz	r4, r0
 801579c:	0964      	lsrs	r4, r4, #5
 801579e:	4635      	mov	r5, r6
 80157a0:	9300      	str	r3, [sp, #0]
 80157a2:	463a      	mov	r2, r7
 80157a4:	4616      	mov	r6, r2
 80157a6:	3201      	adds	r2, #1
 80157a8:	7830      	ldrb	r0, [r6, #0]
 80157aa:	f7ff ff9b 	bl	80156e4 <__hexdig_fun>
 80157ae:	2800      	cmp	r0, #0
 80157b0:	d1f8      	bne.n	80157a4 <__gethex+0x94>
 80157b2:	9901      	ldr	r1, [sp, #4]
 80157b4:	4652      	mov	r2, sl
 80157b6:	4630      	mov	r0, r6
 80157b8:	f7fe f873 	bl	80138a2 <strncmp>
 80157bc:	b980      	cbnz	r0, 80157e0 <__gethex+0xd0>
 80157be:	b94d      	cbnz	r5, 80157d4 <__gethex+0xc4>
 80157c0:	eb06 050a 	add.w	r5, r6, sl
 80157c4:	462a      	mov	r2, r5
 80157c6:	4616      	mov	r6, r2
 80157c8:	3201      	adds	r2, #1
 80157ca:	7830      	ldrb	r0, [r6, #0]
 80157cc:	f7ff ff8a 	bl	80156e4 <__hexdig_fun>
 80157d0:	2800      	cmp	r0, #0
 80157d2:	d1f8      	bne.n	80157c6 <__gethex+0xb6>
 80157d4:	1bad      	subs	r5, r5, r6
 80157d6:	00ad      	lsls	r5, r5, #2
 80157d8:	e004      	b.n	80157e4 <__gethex+0xd4>
 80157da:	2400      	movs	r4, #0
 80157dc:	4625      	mov	r5, r4
 80157de:	e7e0      	b.n	80157a2 <__gethex+0x92>
 80157e0:	2d00      	cmp	r5, #0
 80157e2:	d1f7      	bne.n	80157d4 <__gethex+0xc4>
 80157e4:	7833      	ldrb	r3, [r6, #0]
 80157e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80157ea:	2b50      	cmp	r3, #80	; 0x50
 80157ec:	d13b      	bne.n	8015866 <__gethex+0x156>
 80157ee:	7873      	ldrb	r3, [r6, #1]
 80157f0:	2b2b      	cmp	r3, #43	; 0x2b
 80157f2:	d02c      	beq.n	801584e <__gethex+0x13e>
 80157f4:	2b2d      	cmp	r3, #45	; 0x2d
 80157f6:	d02e      	beq.n	8015856 <__gethex+0x146>
 80157f8:	1c71      	adds	r1, r6, #1
 80157fa:	f04f 0900 	mov.w	r9, #0
 80157fe:	7808      	ldrb	r0, [r1, #0]
 8015800:	f7ff ff70 	bl	80156e4 <__hexdig_fun>
 8015804:	1e43      	subs	r3, r0, #1
 8015806:	b2db      	uxtb	r3, r3
 8015808:	2b18      	cmp	r3, #24
 801580a:	d82c      	bhi.n	8015866 <__gethex+0x156>
 801580c:	f1a0 0210 	sub.w	r2, r0, #16
 8015810:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015814:	f7ff ff66 	bl	80156e4 <__hexdig_fun>
 8015818:	1e43      	subs	r3, r0, #1
 801581a:	b2db      	uxtb	r3, r3
 801581c:	2b18      	cmp	r3, #24
 801581e:	d91d      	bls.n	801585c <__gethex+0x14c>
 8015820:	f1b9 0f00 	cmp.w	r9, #0
 8015824:	d000      	beq.n	8015828 <__gethex+0x118>
 8015826:	4252      	negs	r2, r2
 8015828:	4415      	add	r5, r2
 801582a:	f8cb 1000 	str.w	r1, [fp]
 801582e:	b1e4      	cbz	r4, 801586a <__gethex+0x15a>
 8015830:	9b00      	ldr	r3, [sp, #0]
 8015832:	2b00      	cmp	r3, #0
 8015834:	bf14      	ite	ne
 8015836:	2700      	movne	r7, #0
 8015838:	2706      	moveq	r7, #6
 801583a:	4638      	mov	r0, r7
 801583c:	b009      	add	sp, #36	; 0x24
 801583e:	ecbd 8b02 	vpop	{d8}
 8015842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015846:	463e      	mov	r6, r7
 8015848:	4625      	mov	r5, r4
 801584a:	2401      	movs	r4, #1
 801584c:	e7ca      	b.n	80157e4 <__gethex+0xd4>
 801584e:	f04f 0900 	mov.w	r9, #0
 8015852:	1cb1      	adds	r1, r6, #2
 8015854:	e7d3      	b.n	80157fe <__gethex+0xee>
 8015856:	f04f 0901 	mov.w	r9, #1
 801585a:	e7fa      	b.n	8015852 <__gethex+0x142>
 801585c:	230a      	movs	r3, #10
 801585e:	fb03 0202 	mla	r2, r3, r2, r0
 8015862:	3a10      	subs	r2, #16
 8015864:	e7d4      	b.n	8015810 <__gethex+0x100>
 8015866:	4631      	mov	r1, r6
 8015868:	e7df      	b.n	801582a <__gethex+0x11a>
 801586a:	1bf3      	subs	r3, r6, r7
 801586c:	3b01      	subs	r3, #1
 801586e:	4621      	mov	r1, r4
 8015870:	2b07      	cmp	r3, #7
 8015872:	dc0b      	bgt.n	801588c <__gethex+0x17c>
 8015874:	ee18 0a10 	vmov	r0, s16
 8015878:	f000 fa86 	bl	8015d88 <_Balloc>
 801587c:	4604      	mov	r4, r0
 801587e:	b940      	cbnz	r0, 8015892 <__gethex+0x182>
 8015880:	4b65      	ldr	r3, [pc, #404]	; (8015a18 <__gethex+0x308>)
 8015882:	4602      	mov	r2, r0
 8015884:	21de      	movs	r1, #222	; 0xde
 8015886:	4865      	ldr	r0, [pc, #404]	; (8015a1c <__gethex+0x30c>)
 8015888:	f7fe ff60 	bl	801474c <__assert_func>
 801588c:	3101      	adds	r1, #1
 801588e:	105b      	asrs	r3, r3, #1
 8015890:	e7ee      	b.n	8015870 <__gethex+0x160>
 8015892:	f100 0914 	add.w	r9, r0, #20
 8015896:	f04f 0b00 	mov.w	fp, #0
 801589a:	f1ca 0301 	rsb	r3, sl, #1
 801589e:	f8cd 9008 	str.w	r9, [sp, #8]
 80158a2:	f8cd b000 	str.w	fp, [sp]
 80158a6:	9306      	str	r3, [sp, #24]
 80158a8:	42b7      	cmp	r7, r6
 80158aa:	d340      	bcc.n	801592e <__gethex+0x21e>
 80158ac:	9802      	ldr	r0, [sp, #8]
 80158ae:	9b00      	ldr	r3, [sp, #0]
 80158b0:	f840 3b04 	str.w	r3, [r0], #4
 80158b4:	eba0 0009 	sub.w	r0, r0, r9
 80158b8:	1080      	asrs	r0, r0, #2
 80158ba:	0146      	lsls	r6, r0, #5
 80158bc:	6120      	str	r0, [r4, #16]
 80158be:	4618      	mov	r0, r3
 80158c0:	f000 fb58 	bl	8015f74 <__hi0bits>
 80158c4:	1a30      	subs	r0, r6, r0
 80158c6:	f8d8 6000 	ldr.w	r6, [r8]
 80158ca:	42b0      	cmp	r0, r6
 80158cc:	dd63      	ble.n	8015996 <__gethex+0x286>
 80158ce:	1b87      	subs	r7, r0, r6
 80158d0:	4639      	mov	r1, r7
 80158d2:	4620      	mov	r0, r4
 80158d4:	f000 fef2 	bl	80166bc <__any_on>
 80158d8:	4682      	mov	sl, r0
 80158da:	b1a8      	cbz	r0, 8015908 <__gethex+0x1f8>
 80158dc:	1e7b      	subs	r3, r7, #1
 80158de:	1159      	asrs	r1, r3, #5
 80158e0:	f003 021f 	and.w	r2, r3, #31
 80158e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80158e8:	f04f 0a01 	mov.w	sl, #1
 80158ec:	fa0a f202 	lsl.w	r2, sl, r2
 80158f0:	420a      	tst	r2, r1
 80158f2:	d009      	beq.n	8015908 <__gethex+0x1f8>
 80158f4:	4553      	cmp	r3, sl
 80158f6:	dd05      	ble.n	8015904 <__gethex+0x1f4>
 80158f8:	1eb9      	subs	r1, r7, #2
 80158fa:	4620      	mov	r0, r4
 80158fc:	f000 fede 	bl	80166bc <__any_on>
 8015900:	2800      	cmp	r0, #0
 8015902:	d145      	bne.n	8015990 <__gethex+0x280>
 8015904:	f04f 0a02 	mov.w	sl, #2
 8015908:	4639      	mov	r1, r7
 801590a:	4620      	mov	r0, r4
 801590c:	f7ff fe98 	bl	8015640 <rshift>
 8015910:	443d      	add	r5, r7
 8015912:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015916:	42ab      	cmp	r3, r5
 8015918:	da4c      	bge.n	80159b4 <__gethex+0x2a4>
 801591a:	ee18 0a10 	vmov	r0, s16
 801591e:	4621      	mov	r1, r4
 8015920:	f000 fa72 	bl	8015e08 <_Bfree>
 8015924:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015926:	2300      	movs	r3, #0
 8015928:	6013      	str	r3, [r2, #0]
 801592a:	27a3      	movs	r7, #163	; 0xa3
 801592c:	e785      	b.n	801583a <__gethex+0x12a>
 801592e:	1e73      	subs	r3, r6, #1
 8015930:	9a05      	ldr	r2, [sp, #20]
 8015932:	9303      	str	r3, [sp, #12]
 8015934:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015938:	4293      	cmp	r3, r2
 801593a:	d019      	beq.n	8015970 <__gethex+0x260>
 801593c:	f1bb 0f20 	cmp.w	fp, #32
 8015940:	d107      	bne.n	8015952 <__gethex+0x242>
 8015942:	9b02      	ldr	r3, [sp, #8]
 8015944:	9a00      	ldr	r2, [sp, #0]
 8015946:	f843 2b04 	str.w	r2, [r3], #4
 801594a:	9302      	str	r3, [sp, #8]
 801594c:	2300      	movs	r3, #0
 801594e:	9300      	str	r3, [sp, #0]
 8015950:	469b      	mov	fp, r3
 8015952:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015956:	f7ff fec5 	bl	80156e4 <__hexdig_fun>
 801595a:	9b00      	ldr	r3, [sp, #0]
 801595c:	f000 000f 	and.w	r0, r0, #15
 8015960:	fa00 f00b 	lsl.w	r0, r0, fp
 8015964:	4303      	orrs	r3, r0
 8015966:	9300      	str	r3, [sp, #0]
 8015968:	f10b 0b04 	add.w	fp, fp, #4
 801596c:	9b03      	ldr	r3, [sp, #12]
 801596e:	e00d      	b.n	801598c <__gethex+0x27c>
 8015970:	9b03      	ldr	r3, [sp, #12]
 8015972:	9a06      	ldr	r2, [sp, #24]
 8015974:	4413      	add	r3, r2
 8015976:	42bb      	cmp	r3, r7
 8015978:	d3e0      	bcc.n	801593c <__gethex+0x22c>
 801597a:	4618      	mov	r0, r3
 801597c:	9901      	ldr	r1, [sp, #4]
 801597e:	9307      	str	r3, [sp, #28]
 8015980:	4652      	mov	r2, sl
 8015982:	f7fd ff8e 	bl	80138a2 <strncmp>
 8015986:	9b07      	ldr	r3, [sp, #28]
 8015988:	2800      	cmp	r0, #0
 801598a:	d1d7      	bne.n	801593c <__gethex+0x22c>
 801598c:	461e      	mov	r6, r3
 801598e:	e78b      	b.n	80158a8 <__gethex+0x198>
 8015990:	f04f 0a03 	mov.w	sl, #3
 8015994:	e7b8      	b.n	8015908 <__gethex+0x1f8>
 8015996:	da0a      	bge.n	80159ae <__gethex+0x29e>
 8015998:	1a37      	subs	r7, r6, r0
 801599a:	4621      	mov	r1, r4
 801599c:	ee18 0a10 	vmov	r0, s16
 80159a0:	463a      	mov	r2, r7
 80159a2:	f000 fc4d 	bl	8016240 <__lshift>
 80159a6:	1bed      	subs	r5, r5, r7
 80159a8:	4604      	mov	r4, r0
 80159aa:	f100 0914 	add.w	r9, r0, #20
 80159ae:	f04f 0a00 	mov.w	sl, #0
 80159b2:	e7ae      	b.n	8015912 <__gethex+0x202>
 80159b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80159b8:	42a8      	cmp	r0, r5
 80159ba:	dd72      	ble.n	8015aa2 <__gethex+0x392>
 80159bc:	1b45      	subs	r5, r0, r5
 80159be:	42ae      	cmp	r6, r5
 80159c0:	dc36      	bgt.n	8015a30 <__gethex+0x320>
 80159c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80159c6:	2b02      	cmp	r3, #2
 80159c8:	d02a      	beq.n	8015a20 <__gethex+0x310>
 80159ca:	2b03      	cmp	r3, #3
 80159cc:	d02c      	beq.n	8015a28 <__gethex+0x318>
 80159ce:	2b01      	cmp	r3, #1
 80159d0:	d115      	bne.n	80159fe <__gethex+0x2ee>
 80159d2:	42ae      	cmp	r6, r5
 80159d4:	d113      	bne.n	80159fe <__gethex+0x2ee>
 80159d6:	2e01      	cmp	r6, #1
 80159d8:	d10b      	bne.n	80159f2 <__gethex+0x2e2>
 80159da:	9a04      	ldr	r2, [sp, #16]
 80159dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80159e0:	6013      	str	r3, [r2, #0]
 80159e2:	2301      	movs	r3, #1
 80159e4:	6123      	str	r3, [r4, #16]
 80159e6:	f8c9 3000 	str.w	r3, [r9]
 80159ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80159ec:	2762      	movs	r7, #98	; 0x62
 80159ee:	601c      	str	r4, [r3, #0]
 80159f0:	e723      	b.n	801583a <__gethex+0x12a>
 80159f2:	1e71      	subs	r1, r6, #1
 80159f4:	4620      	mov	r0, r4
 80159f6:	f000 fe61 	bl	80166bc <__any_on>
 80159fa:	2800      	cmp	r0, #0
 80159fc:	d1ed      	bne.n	80159da <__gethex+0x2ca>
 80159fe:	ee18 0a10 	vmov	r0, s16
 8015a02:	4621      	mov	r1, r4
 8015a04:	f000 fa00 	bl	8015e08 <_Bfree>
 8015a08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	6013      	str	r3, [r2, #0]
 8015a0e:	2750      	movs	r7, #80	; 0x50
 8015a10:	e713      	b.n	801583a <__gethex+0x12a>
 8015a12:	bf00      	nop
 8015a14:	08017ff4 	.word	0x08017ff4
 8015a18:	08017f78 	.word	0x08017f78
 8015a1c:	08017f89 	.word	0x08017f89
 8015a20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d1eb      	bne.n	80159fe <__gethex+0x2ee>
 8015a26:	e7d8      	b.n	80159da <__gethex+0x2ca>
 8015a28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d1d5      	bne.n	80159da <__gethex+0x2ca>
 8015a2e:	e7e6      	b.n	80159fe <__gethex+0x2ee>
 8015a30:	1e6f      	subs	r7, r5, #1
 8015a32:	f1ba 0f00 	cmp.w	sl, #0
 8015a36:	d131      	bne.n	8015a9c <__gethex+0x38c>
 8015a38:	b127      	cbz	r7, 8015a44 <__gethex+0x334>
 8015a3a:	4639      	mov	r1, r7
 8015a3c:	4620      	mov	r0, r4
 8015a3e:	f000 fe3d 	bl	80166bc <__any_on>
 8015a42:	4682      	mov	sl, r0
 8015a44:	117b      	asrs	r3, r7, #5
 8015a46:	2101      	movs	r1, #1
 8015a48:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015a4c:	f007 071f 	and.w	r7, r7, #31
 8015a50:	fa01 f707 	lsl.w	r7, r1, r7
 8015a54:	421f      	tst	r7, r3
 8015a56:	4629      	mov	r1, r5
 8015a58:	4620      	mov	r0, r4
 8015a5a:	bf18      	it	ne
 8015a5c:	f04a 0a02 	orrne.w	sl, sl, #2
 8015a60:	1b76      	subs	r6, r6, r5
 8015a62:	f7ff fded 	bl	8015640 <rshift>
 8015a66:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015a6a:	2702      	movs	r7, #2
 8015a6c:	f1ba 0f00 	cmp.w	sl, #0
 8015a70:	d048      	beq.n	8015b04 <__gethex+0x3f4>
 8015a72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015a76:	2b02      	cmp	r3, #2
 8015a78:	d015      	beq.n	8015aa6 <__gethex+0x396>
 8015a7a:	2b03      	cmp	r3, #3
 8015a7c:	d017      	beq.n	8015aae <__gethex+0x39e>
 8015a7e:	2b01      	cmp	r3, #1
 8015a80:	d109      	bne.n	8015a96 <__gethex+0x386>
 8015a82:	f01a 0f02 	tst.w	sl, #2
 8015a86:	d006      	beq.n	8015a96 <__gethex+0x386>
 8015a88:	f8d9 0000 	ldr.w	r0, [r9]
 8015a8c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015a90:	f01a 0f01 	tst.w	sl, #1
 8015a94:	d10e      	bne.n	8015ab4 <__gethex+0x3a4>
 8015a96:	f047 0710 	orr.w	r7, r7, #16
 8015a9a:	e033      	b.n	8015b04 <__gethex+0x3f4>
 8015a9c:	f04f 0a01 	mov.w	sl, #1
 8015aa0:	e7d0      	b.n	8015a44 <__gethex+0x334>
 8015aa2:	2701      	movs	r7, #1
 8015aa4:	e7e2      	b.n	8015a6c <__gethex+0x35c>
 8015aa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015aa8:	f1c3 0301 	rsb	r3, r3, #1
 8015aac:	9315      	str	r3, [sp, #84]	; 0x54
 8015aae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d0f0      	beq.n	8015a96 <__gethex+0x386>
 8015ab4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015ab8:	f104 0314 	add.w	r3, r4, #20
 8015abc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015ac0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015ac4:	f04f 0c00 	mov.w	ip, #0
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ace:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015ad2:	d01c      	beq.n	8015b0e <__gethex+0x3fe>
 8015ad4:	3201      	adds	r2, #1
 8015ad6:	6002      	str	r2, [r0, #0]
 8015ad8:	2f02      	cmp	r7, #2
 8015ada:	f104 0314 	add.w	r3, r4, #20
 8015ade:	d13f      	bne.n	8015b60 <__gethex+0x450>
 8015ae0:	f8d8 2000 	ldr.w	r2, [r8]
 8015ae4:	3a01      	subs	r2, #1
 8015ae6:	42b2      	cmp	r2, r6
 8015ae8:	d10a      	bne.n	8015b00 <__gethex+0x3f0>
 8015aea:	1171      	asrs	r1, r6, #5
 8015aec:	2201      	movs	r2, #1
 8015aee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015af2:	f006 061f 	and.w	r6, r6, #31
 8015af6:	fa02 f606 	lsl.w	r6, r2, r6
 8015afa:	421e      	tst	r6, r3
 8015afc:	bf18      	it	ne
 8015afe:	4617      	movne	r7, r2
 8015b00:	f047 0720 	orr.w	r7, r7, #32
 8015b04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015b06:	601c      	str	r4, [r3, #0]
 8015b08:	9b04      	ldr	r3, [sp, #16]
 8015b0a:	601d      	str	r5, [r3, #0]
 8015b0c:	e695      	b.n	801583a <__gethex+0x12a>
 8015b0e:	4299      	cmp	r1, r3
 8015b10:	f843 cc04 	str.w	ip, [r3, #-4]
 8015b14:	d8d8      	bhi.n	8015ac8 <__gethex+0x3b8>
 8015b16:	68a3      	ldr	r3, [r4, #8]
 8015b18:	459b      	cmp	fp, r3
 8015b1a:	db19      	blt.n	8015b50 <__gethex+0x440>
 8015b1c:	6861      	ldr	r1, [r4, #4]
 8015b1e:	ee18 0a10 	vmov	r0, s16
 8015b22:	3101      	adds	r1, #1
 8015b24:	f000 f930 	bl	8015d88 <_Balloc>
 8015b28:	4681      	mov	r9, r0
 8015b2a:	b918      	cbnz	r0, 8015b34 <__gethex+0x424>
 8015b2c:	4b1a      	ldr	r3, [pc, #104]	; (8015b98 <__gethex+0x488>)
 8015b2e:	4602      	mov	r2, r0
 8015b30:	2184      	movs	r1, #132	; 0x84
 8015b32:	e6a8      	b.n	8015886 <__gethex+0x176>
 8015b34:	6922      	ldr	r2, [r4, #16]
 8015b36:	3202      	adds	r2, #2
 8015b38:	f104 010c 	add.w	r1, r4, #12
 8015b3c:	0092      	lsls	r2, r2, #2
 8015b3e:	300c      	adds	r0, #12
 8015b40:	f7fc fe06 	bl	8012750 <memcpy>
 8015b44:	4621      	mov	r1, r4
 8015b46:	ee18 0a10 	vmov	r0, s16
 8015b4a:	f000 f95d 	bl	8015e08 <_Bfree>
 8015b4e:	464c      	mov	r4, r9
 8015b50:	6923      	ldr	r3, [r4, #16]
 8015b52:	1c5a      	adds	r2, r3, #1
 8015b54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015b58:	6122      	str	r2, [r4, #16]
 8015b5a:	2201      	movs	r2, #1
 8015b5c:	615a      	str	r2, [r3, #20]
 8015b5e:	e7bb      	b.n	8015ad8 <__gethex+0x3c8>
 8015b60:	6922      	ldr	r2, [r4, #16]
 8015b62:	455a      	cmp	r2, fp
 8015b64:	dd0b      	ble.n	8015b7e <__gethex+0x46e>
 8015b66:	2101      	movs	r1, #1
 8015b68:	4620      	mov	r0, r4
 8015b6a:	f7ff fd69 	bl	8015640 <rshift>
 8015b6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015b72:	3501      	adds	r5, #1
 8015b74:	42ab      	cmp	r3, r5
 8015b76:	f6ff aed0 	blt.w	801591a <__gethex+0x20a>
 8015b7a:	2701      	movs	r7, #1
 8015b7c:	e7c0      	b.n	8015b00 <__gethex+0x3f0>
 8015b7e:	f016 061f 	ands.w	r6, r6, #31
 8015b82:	d0fa      	beq.n	8015b7a <__gethex+0x46a>
 8015b84:	449a      	add	sl, r3
 8015b86:	f1c6 0620 	rsb	r6, r6, #32
 8015b8a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015b8e:	f000 f9f1 	bl	8015f74 <__hi0bits>
 8015b92:	42b0      	cmp	r0, r6
 8015b94:	dbe7      	blt.n	8015b66 <__gethex+0x456>
 8015b96:	e7f0      	b.n	8015b7a <__gethex+0x46a>
 8015b98:	08017f78 	.word	0x08017f78

08015b9c <L_shift>:
 8015b9c:	f1c2 0208 	rsb	r2, r2, #8
 8015ba0:	0092      	lsls	r2, r2, #2
 8015ba2:	b570      	push	{r4, r5, r6, lr}
 8015ba4:	f1c2 0620 	rsb	r6, r2, #32
 8015ba8:	6843      	ldr	r3, [r0, #4]
 8015baa:	6804      	ldr	r4, [r0, #0]
 8015bac:	fa03 f506 	lsl.w	r5, r3, r6
 8015bb0:	432c      	orrs	r4, r5
 8015bb2:	40d3      	lsrs	r3, r2
 8015bb4:	6004      	str	r4, [r0, #0]
 8015bb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8015bba:	4288      	cmp	r0, r1
 8015bbc:	d3f4      	bcc.n	8015ba8 <L_shift+0xc>
 8015bbe:	bd70      	pop	{r4, r5, r6, pc}

08015bc0 <__match>:
 8015bc0:	b530      	push	{r4, r5, lr}
 8015bc2:	6803      	ldr	r3, [r0, #0]
 8015bc4:	3301      	adds	r3, #1
 8015bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015bca:	b914      	cbnz	r4, 8015bd2 <__match+0x12>
 8015bcc:	6003      	str	r3, [r0, #0]
 8015bce:	2001      	movs	r0, #1
 8015bd0:	bd30      	pop	{r4, r5, pc}
 8015bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bd6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015bda:	2d19      	cmp	r5, #25
 8015bdc:	bf98      	it	ls
 8015bde:	3220      	addls	r2, #32
 8015be0:	42a2      	cmp	r2, r4
 8015be2:	d0f0      	beq.n	8015bc6 <__match+0x6>
 8015be4:	2000      	movs	r0, #0
 8015be6:	e7f3      	b.n	8015bd0 <__match+0x10>

08015be8 <__hexnan>:
 8015be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bec:	680b      	ldr	r3, [r1, #0]
 8015bee:	6801      	ldr	r1, [r0, #0]
 8015bf0:	115e      	asrs	r6, r3, #5
 8015bf2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015bf6:	f013 031f 	ands.w	r3, r3, #31
 8015bfa:	b087      	sub	sp, #28
 8015bfc:	bf18      	it	ne
 8015bfe:	3604      	addne	r6, #4
 8015c00:	2500      	movs	r5, #0
 8015c02:	1f37      	subs	r7, r6, #4
 8015c04:	4682      	mov	sl, r0
 8015c06:	4690      	mov	r8, r2
 8015c08:	9301      	str	r3, [sp, #4]
 8015c0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8015c0e:	46b9      	mov	r9, r7
 8015c10:	463c      	mov	r4, r7
 8015c12:	9502      	str	r5, [sp, #8]
 8015c14:	46ab      	mov	fp, r5
 8015c16:	784a      	ldrb	r2, [r1, #1]
 8015c18:	1c4b      	adds	r3, r1, #1
 8015c1a:	9303      	str	r3, [sp, #12]
 8015c1c:	b342      	cbz	r2, 8015c70 <__hexnan+0x88>
 8015c1e:	4610      	mov	r0, r2
 8015c20:	9105      	str	r1, [sp, #20]
 8015c22:	9204      	str	r2, [sp, #16]
 8015c24:	f7ff fd5e 	bl	80156e4 <__hexdig_fun>
 8015c28:	2800      	cmp	r0, #0
 8015c2a:	d14f      	bne.n	8015ccc <__hexnan+0xe4>
 8015c2c:	9a04      	ldr	r2, [sp, #16]
 8015c2e:	9905      	ldr	r1, [sp, #20]
 8015c30:	2a20      	cmp	r2, #32
 8015c32:	d818      	bhi.n	8015c66 <__hexnan+0x7e>
 8015c34:	9b02      	ldr	r3, [sp, #8]
 8015c36:	459b      	cmp	fp, r3
 8015c38:	dd13      	ble.n	8015c62 <__hexnan+0x7a>
 8015c3a:	454c      	cmp	r4, r9
 8015c3c:	d206      	bcs.n	8015c4c <__hexnan+0x64>
 8015c3e:	2d07      	cmp	r5, #7
 8015c40:	dc04      	bgt.n	8015c4c <__hexnan+0x64>
 8015c42:	462a      	mov	r2, r5
 8015c44:	4649      	mov	r1, r9
 8015c46:	4620      	mov	r0, r4
 8015c48:	f7ff ffa8 	bl	8015b9c <L_shift>
 8015c4c:	4544      	cmp	r4, r8
 8015c4e:	d950      	bls.n	8015cf2 <__hexnan+0x10a>
 8015c50:	2300      	movs	r3, #0
 8015c52:	f1a4 0904 	sub.w	r9, r4, #4
 8015c56:	f844 3c04 	str.w	r3, [r4, #-4]
 8015c5a:	f8cd b008 	str.w	fp, [sp, #8]
 8015c5e:	464c      	mov	r4, r9
 8015c60:	461d      	mov	r5, r3
 8015c62:	9903      	ldr	r1, [sp, #12]
 8015c64:	e7d7      	b.n	8015c16 <__hexnan+0x2e>
 8015c66:	2a29      	cmp	r2, #41	; 0x29
 8015c68:	d156      	bne.n	8015d18 <__hexnan+0x130>
 8015c6a:	3102      	adds	r1, #2
 8015c6c:	f8ca 1000 	str.w	r1, [sl]
 8015c70:	f1bb 0f00 	cmp.w	fp, #0
 8015c74:	d050      	beq.n	8015d18 <__hexnan+0x130>
 8015c76:	454c      	cmp	r4, r9
 8015c78:	d206      	bcs.n	8015c88 <__hexnan+0xa0>
 8015c7a:	2d07      	cmp	r5, #7
 8015c7c:	dc04      	bgt.n	8015c88 <__hexnan+0xa0>
 8015c7e:	462a      	mov	r2, r5
 8015c80:	4649      	mov	r1, r9
 8015c82:	4620      	mov	r0, r4
 8015c84:	f7ff ff8a 	bl	8015b9c <L_shift>
 8015c88:	4544      	cmp	r4, r8
 8015c8a:	d934      	bls.n	8015cf6 <__hexnan+0x10e>
 8015c8c:	f1a8 0204 	sub.w	r2, r8, #4
 8015c90:	4623      	mov	r3, r4
 8015c92:	f853 1b04 	ldr.w	r1, [r3], #4
 8015c96:	f842 1f04 	str.w	r1, [r2, #4]!
 8015c9a:	429f      	cmp	r7, r3
 8015c9c:	d2f9      	bcs.n	8015c92 <__hexnan+0xaa>
 8015c9e:	1b3b      	subs	r3, r7, r4
 8015ca0:	f023 0303 	bic.w	r3, r3, #3
 8015ca4:	3304      	adds	r3, #4
 8015ca6:	3401      	adds	r4, #1
 8015ca8:	3e03      	subs	r6, #3
 8015caa:	42b4      	cmp	r4, r6
 8015cac:	bf88      	it	hi
 8015cae:	2304      	movhi	r3, #4
 8015cb0:	4443      	add	r3, r8
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	f843 2b04 	str.w	r2, [r3], #4
 8015cb8:	429f      	cmp	r7, r3
 8015cba:	d2fb      	bcs.n	8015cb4 <__hexnan+0xcc>
 8015cbc:	683b      	ldr	r3, [r7, #0]
 8015cbe:	b91b      	cbnz	r3, 8015cc8 <__hexnan+0xe0>
 8015cc0:	4547      	cmp	r7, r8
 8015cc2:	d127      	bne.n	8015d14 <__hexnan+0x12c>
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	603b      	str	r3, [r7, #0]
 8015cc8:	2005      	movs	r0, #5
 8015cca:	e026      	b.n	8015d1a <__hexnan+0x132>
 8015ccc:	3501      	adds	r5, #1
 8015cce:	2d08      	cmp	r5, #8
 8015cd0:	f10b 0b01 	add.w	fp, fp, #1
 8015cd4:	dd06      	ble.n	8015ce4 <__hexnan+0xfc>
 8015cd6:	4544      	cmp	r4, r8
 8015cd8:	d9c3      	bls.n	8015c62 <__hexnan+0x7a>
 8015cda:	2300      	movs	r3, #0
 8015cdc:	f844 3c04 	str.w	r3, [r4, #-4]
 8015ce0:	2501      	movs	r5, #1
 8015ce2:	3c04      	subs	r4, #4
 8015ce4:	6822      	ldr	r2, [r4, #0]
 8015ce6:	f000 000f 	and.w	r0, r0, #15
 8015cea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015cee:	6022      	str	r2, [r4, #0]
 8015cf0:	e7b7      	b.n	8015c62 <__hexnan+0x7a>
 8015cf2:	2508      	movs	r5, #8
 8015cf4:	e7b5      	b.n	8015c62 <__hexnan+0x7a>
 8015cf6:	9b01      	ldr	r3, [sp, #4]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d0df      	beq.n	8015cbc <__hexnan+0xd4>
 8015cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8015d00:	f1c3 0320 	rsb	r3, r3, #32
 8015d04:	fa22 f303 	lsr.w	r3, r2, r3
 8015d08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015d0c:	401a      	ands	r2, r3
 8015d0e:	f846 2c04 	str.w	r2, [r6, #-4]
 8015d12:	e7d3      	b.n	8015cbc <__hexnan+0xd4>
 8015d14:	3f04      	subs	r7, #4
 8015d16:	e7d1      	b.n	8015cbc <__hexnan+0xd4>
 8015d18:	2004      	movs	r0, #4
 8015d1a:	b007      	add	sp, #28
 8015d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d20 <_localeconv_r>:
 8015d20:	4800      	ldr	r0, [pc, #0]	; (8015d24 <_localeconv_r+0x4>)
 8015d22:	4770      	bx	lr
 8015d24:	200002fc 	.word	0x200002fc

08015d28 <_lseek_r>:
 8015d28:	b538      	push	{r3, r4, r5, lr}
 8015d2a:	4d07      	ldr	r5, [pc, #28]	; (8015d48 <_lseek_r+0x20>)
 8015d2c:	4604      	mov	r4, r0
 8015d2e:	4608      	mov	r0, r1
 8015d30:	4611      	mov	r1, r2
 8015d32:	2200      	movs	r2, #0
 8015d34:	602a      	str	r2, [r5, #0]
 8015d36:	461a      	mov	r2, r3
 8015d38:	f7ed f964 	bl	8003004 <_lseek>
 8015d3c:	1c43      	adds	r3, r0, #1
 8015d3e:	d102      	bne.n	8015d46 <_lseek_r+0x1e>
 8015d40:	682b      	ldr	r3, [r5, #0]
 8015d42:	b103      	cbz	r3, 8015d46 <_lseek_r+0x1e>
 8015d44:	6023      	str	r3, [r4, #0]
 8015d46:	bd38      	pop	{r3, r4, r5, pc}
 8015d48:	200073ac 	.word	0x200073ac

08015d4c <__ascii_mbtowc>:
 8015d4c:	b082      	sub	sp, #8
 8015d4e:	b901      	cbnz	r1, 8015d52 <__ascii_mbtowc+0x6>
 8015d50:	a901      	add	r1, sp, #4
 8015d52:	b142      	cbz	r2, 8015d66 <__ascii_mbtowc+0x1a>
 8015d54:	b14b      	cbz	r3, 8015d6a <__ascii_mbtowc+0x1e>
 8015d56:	7813      	ldrb	r3, [r2, #0]
 8015d58:	600b      	str	r3, [r1, #0]
 8015d5a:	7812      	ldrb	r2, [r2, #0]
 8015d5c:	1e10      	subs	r0, r2, #0
 8015d5e:	bf18      	it	ne
 8015d60:	2001      	movne	r0, #1
 8015d62:	b002      	add	sp, #8
 8015d64:	4770      	bx	lr
 8015d66:	4610      	mov	r0, r2
 8015d68:	e7fb      	b.n	8015d62 <__ascii_mbtowc+0x16>
 8015d6a:	f06f 0001 	mvn.w	r0, #1
 8015d6e:	e7f8      	b.n	8015d62 <__ascii_mbtowc+0x16>

08015d70 <__malloc_lock>:
 8015d70:	4801      	ldr	r0, [pc, #4]	; (8015d78 <__malloc_lock+0x8>)
 8015d72:	f7fc bcda 	b.w	801272a <__retarget_lock_acquire_recursive>
 8015d76:	bf00      	nop
 8015d78:	200073a4 	.word	0x200073a4

08015d7c <__malloc_unlock>:
 8015d7c:	4801      	ldr	r0, [pc, #4]	; (8015d84 <__malloc_unlock+0x8>)
 8015d7e:	f7fc bcd5 	b.w	801272c <__retarget_lock_release_recursive>
 8015d82:	bf00      	nop
 8015d84:	200073a4 	.word	0x200073a4

08015d88 <_Balloc>:
 8015d88:	b570      	push	{r4, r5, r6, lr}
 8015d8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015d8c:	4604      	mov	r4, r0
 8015d8e:	460d      	mov	r5, r1
 8015d90:	b976      	cbnz	r6, 8015db0 <_Balloc+0x28>
 8015d92:	2010      	movs	r0, #16
 8015d94:	f7fc fccc 	bl	8012730 <malloc>
 8015d98:	4602      	mov	r2, r0
 8015d9a:	6260      	str	r0, [r4, #36]	; 0x24
 8015d9c:	b920      	cbnz	r0, 8015da8 <_Balloc+0x20>
 8015d9e:	4b18      	ldr	r3, [pc, #96]	; (8015e00 <_Balloc+0x78>)
 8015da0:	4818      	ldr	r0, [pc, #96]	; (8015e04 <_Balloc+0x7c>)
 8015da2:	2166      	movs	r1, #102	; 0x66
 8015da4:	f7fe fcd2 	bl	801474c <__assert_func>
 8015da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015dac:	6006      	str	r6, [r0, #0]
 8015dae:	60c6      	str	r6, [r0, #12]
 8015db0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015db2:	68f3      	ldr	r3, [r6, #12]
 8015db4:	b183      	cbz	r3, 8015dd8 <_Balloc+0x50>
 8015db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015db8:	68db      	ldr	r3, [r3, #12]
 8015dba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015dbe:	b9b8      	cbnz	r0, 8015df0 <_Balloc+0x68>
 8015dc0:	2101      	movs	r1, #1
 8015dc2:	fa01 f605 	lsl.w	r6, r1, r5
 8015dc6:	1d72      	adds	r2, r6, #5
 8015dc8:	0092      	lsls	r2, r2, #2
 8015dca:	4620      	mov	r0, r4
 8015dcc:	f000 fc97 	bl	80166fe <_calloc_r>
 8015dd0:	b160      	cbz	r0, 8015dec <_Balloc+0x64>
 8015dd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015dd6:	e00e      	b.n	8015df6 <_Balloc+0x6e>
 8015dd8:	2221      	movs	r2, #33	; 0x21
 8015dda:	2104      	movs	r1, #4
 8015ddc:	4620      	mov	r0, r4
 8015dde:	f000 fc8e 	bl	80166fe <_calloc_r>
 8015de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015de4:	60f0      	str	r0, [r6, #12]
 8015de6:	68db      	ldr	r3, [r3, #12]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d1e4      	bne.n	8015db6 <_Balloc+0x2e>
 8015dec:	2000      	movs	r0, #0
 8015dee:	bd70      	pop	{r4, r5, r6, pc}
 8015df0:	6802      	ldr	r2, [r0, #0]
 8015df2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015df6:	2300      	movs	r3, #0
 8015df8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015dfc:	e7f7      	b.n	8015dee <_Balloc+0x66>
 8015dfe:	bf00      	nop
 8015e00:	08017f02 	.word	0x08017f02
 8015e04:	08018008 	.word	0x08018008

08015e08 <_Bfree>:
 8015e08:	b570      	push	{r4, r5, r6, lr}
 8015e0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015e0c:	4605      	mov	r5, r0
 8015e0e:	460c      	mov	r4, r1
 8015e10:	b976      	cbnz	r6, 8015e30 <_Bfree+0x28>
 8015e12:	2010      	movs	r0, #16
 8015e14:	f7fc fc8c 	bl	8012730 <malloc>
 8015e18:	4602      	mov	r2, r0
 8015e1a:	6268      	str	r0, [r5, #36]	; 0x24
 8015e1c:	b920      	cbnz	r0, 8015e28 <_Bfree+0x20>
 8015e1e:	4b09      	ldr	r3, [pc, #36]	; (8015e44 <_Bfree+0x3c>)
 8015e20:	4809      	ldr	r0, [pc, #36]	; (8015e48 <_Bfree+0x40>)
 8015e22:	218a      	movs	r1, #138	; 0x8a
 8015e24:	f7fe fc92 	bl	801474c <__assert_func>
 8015e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015e2c:	6006      	str	r6, [r0, #0]
 8015e2e:	60c6      	str	r6, [r0, #12]
 8015e30:	b13c      	cbz	r4, 8015e42 <_Bfree+0x3a>
 8015e32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015e34:	6862      	ldr	r2, [r4, #4]
 8015e36:	68db      	ldr	r3, [r3, #12]
 8015e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015e3c:	6021      	str	r1, [r4, #0]
 8015e3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015e42:	bd70      	pop	{r4, r5, r6, pc}
 8015e44:	08017f02 	.word	0x08017f02
 8015e48:	08018008 	.word	0x08018008

08015e4c <__multadd>:
 8015e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e50:	690e      	ldr	r6, [r1, #16]
 8015e52:	4607      	mov	r7, r0
 8015e54:	4698      	mov	r8, r3
 8015e56:	460c      	mov	r4, r1
 8015e58:	f101 0014 	add.w	r0, r1, #20
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	6805      	ldr	r5, [r0, #0]
 8015e60:	b2a9      	uxth	r1, r5
 8015e62:	fb02 8101 	mla	r1, r2, r1, r8
 8015e66:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8015e6a:	0c2d      	lsrs	r5, r5, #16
 8015e6c:	fb02 c505 	mla	r5, r2, r5, ip
 8015e70:	b289      	uxth	r1, r1
 8015e72:	3301      	adds	r3, #1
 8015e74:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8015e78:	429e      	cmp	r6, r3
 8015e7a:	f840 1b04 	str.w	r1, [r0], #4
 8015e7e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8015e82:	dcec      	bgt.n	8015e5e <__multadd+0x12>
 8015e84:	f1b8 0f00 	cmp.w	r8, #0
 8015e88:	d022      	beq.n	8015ed0 <__multadd+0x84>
 8015e8a:	68a3      	ldr	r3, [r4, #8]
 8015e8c:	42b3      	cmp	r3, r6
 8015e8e:	dc19      	bgt.n	8015ec4 <__multadd+0x78>
 8015e90:	6861      	ldr	r1, [r4, #4]
 8015e92:	4638      	mov	r0, r7
 8015e94:	3101      	adds	r1, #1
 8015e96:	f7ff ff77 	bl	8015d88 <_Balloc>
 8015e9a:	4605      	mov	r5, r0
 8015e9c:	b928      	cbnz	r0, 8015eaa <__multadd+0x5e>
 8015e9e:	4602      	mov	r2, r0
 8015ea0:	4b0d      	ldr	r3, [pc, #52]	; (8015ed8 <__multadd+0x8c>)
 8015ea2:	480e      	ldr	r0, [pc, #56]	; (8015edc <__multadd+0x90>)
 8015ea4:	21b5      	movs	r1, #181	; 0xb5
 8015ea6:	f7fe fc51 	bl	801474c <__assert_func>
 8015eaa:	6922      	ldr	r2, [r4, #16]
 8015eac:	3202      	adds	r2, #2
 8015eae:	f104 010c 	add.w	r1, r4, #12
 8015eb2:	0092      	lsls	r2, r2, #2
 8015eb4:	300c      	adds	r0, #12
 8015eb6:	f7fc fc4b 	bl	8012750 <memcpy>
 8015eba:	4621      	mov	r1, r4
 8015ebc:	4638      	mov	r0, r7
 8015ebe:	f7ff ffa3 	bl	8015e08 <_Bfree>
 8015ec2:	462c      	mov	r4, r5
 8015ec4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015ec8:	3601      	adds	r6, #1
 8015eca:	f8c3 8014 	str.w	r8, [r3, #20]
 8015ece:	6126      	str	r6, [r4, #16]
 8015ed0:	4620      	mov	r0, r4
 8015ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ed6:	bf00      	nop
 8015ed8:	08017f78 	.word	0x08017f78
 8015edc:	08018008 	.word	0x08018008

08015ee0 <__s2b>:
 8015ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ee4:	460c      	mov	r4, r1
 8015ee6:	4615      	mov	r5, r2
 8015ee8:	461f      	mov	r7, r3
 8015eea:	2209      	movs	r2, #9
 8015eec:	3308      	adds	r3, #8
 8015eee:	4606      	mov	r6, r0
 8015ef0:	fb93 f3f2 	sdiv	r3, r3, r2
 8015ef4:	2100      	movs	r1, #0
 8015ef6:	2201      	movs	r2, #1
 8015ef8:	429a      	cmp	r2, r3
 8015efa:	db09      	blt.n	8015f10 <__s2b+0x30>
 8015efc:	4630      	mov	r0, r6
 8015efe:	f7ff ff43 	bl	8015d88 <_Balloc>
 8015f02:	b940      	cbnz	r0, 8015f16 <__s2b+0x36>
 8015f04:	4602      	mov	r2, r0
 8015f06:	4b19      	ldr	r3, [pc, #100]	; (8015f6c <__s2b+0x8c>)
 8015f08:	4819      	ldr	r0, [pc, #100]	; (8015f70 <__s2b+0x90>)
 8015f0a:	21ce      	movs	r1, #206	; 0xce
 8015f0c:	f7fe fc1e 	bl	801474c <__assert_func>
 8015f10:	0052      	lsls	r2, r2, #1
 8015f12:	3101      	adds	r1, #1
 8015f14:	e7f0      	b.n	8015ef8 <__s2b+0x18>
 8015f16:	9b08      	ldr	r3, [sp, #32]
 8015f18:	6143      	str	r3, [r0, #20]
 8015f1a:	2d09      	cmp	r5, #9
 8015f1c:	f04f 0301 	mov.w	r3, #1
 8015f20:	6103      	str	r3, [r0, #16]
 8015f22:	dd16      	ble.n	8015f52 <__s2b+0x72>
 8015f24:	f104 0909 	add.w	r9, r4, #9
 8015f28:	46c8      	mov	r8, r9
 8015f2a:	442c      	add	r4, r5
 8015f2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015f30:	4601      	mov	r1, r0
 8015f32:	3b30      	subs	r3, #48	; 0x30
 8015f34:	220a      	movs	r2, #10
 8015f36:	4630      	mov	r0, r6
 8015f38:	f7ff ff88 	bl	8015e4c <__multadd>
 8015f3c:	45a0      	cmp	r8, r4
 8015f3e:	d1f5      	bne.n	8015f2c <__s2b+0x4c>
 8015f40:	f1a5 0408 	sub.w	r4, r5, #8
 8015f44:	444c      	add	r4, r9
 8015f46:	1b2d      	subs	r5, r5, r4
 8015f48:	1963      	adds	r3, r4, r5
 8015f4a:	42bb      	cmp	r3, r7
 8015f4c:	db04      	blt.n	8015f58 <__s2b+0x78>
 8015f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f52:	340a      	adds	r4, #10
 8015f54:	2509      	movs	r5, #9
 8015f56:	e7f6      	b.n	8015f46 <__s2b+0x66>
 8015f58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015f5c:	4601      	mov	r1, r0
 8015f5e:	3b30      	subs	r3, #48	; 0x30
 8015f60:	220a      	movs	r2, #10
 8015f62:	4630      	mov	r0, r6
 8015f64:	f7ff ff72 	bl	8015e4c <__multadd>
 8015f68:	e7ee      	b.n	8015f48 <__s2b+0x68>
 8015f6a:	bf00      	nop
 8015f6c:	08017f78 	.word	0x08017f78
 8015f70:	08018008 	.word	0x08018008

08015f74 <__hi0bits>:
 8015f74:	0c03      	lsrs	r3, r0, #16
 8015f76:	041b      	lsls	r3, r3, #16
 8015f78:	b9d3      	cbnz	r3, 8015fb0 <__hi0bits+0x3c>
 8015f7a:	0400      	lsls	r0, r0, #16
 8015f7c:	2310      	movs	r3, #16
 8015f7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015f82:	bf04      	itt	eq
 8015f84:	0200      	lsleq	r0, r0, #8
 8015f86:	3308      	addeq	r3, #8
 8015f88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015f8c:	bf04      	itt	eq
 8015f8e:	0100      	lsleq	r0, r0, #4
 8015f90:	3304      	addeq	r3, #4
 8015f92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015f96:	bf04      	itt	eq
 8015f98:	0080      	lsleq	r0, r0, #2
 8015f9a:	3302      	addeq	r3, #2
 8015f9c:	2800      	cmp	r0, #0
 8015f9e:	db05      	blt.n	8015fac <__hi0bits+0x38>
 8015fa0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015fa4:	f103 0301 	add.w	r3, r3, #1
 8015fa8:	bf08      	it	eq
 8015faa:	2320      	moveq	r3, #32
 8015fac:	4618      	mov	r0, r3
 8015fae:	4770      	bx	lr
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	e7e4      	b.n	8015f7e <__hi0bits+0xa>

08015fb4 <__lo0bits>:
 8015fb4:	6803      	ldr	r3, [r0, #0]
 8015fb6:	f013 0207 	ands.w	r2, r3, #7
 8015fba:	4601      	mov	r1, r0
 8015fbc:	d00b      	beq.n	8015fd6 <__lo0bits+0x22>
 8015fbe:	07da      	lsls	r2, r3, #31
 8015fc0:	d424      	bmi.n	801600c <__lo0bits+0x58>
 8015fc2:	0798      	lsls	r0, r3, #30
 8015fc4:	bf49      	itett	mi
 8015fc6:	085b      	lsrmi	r3, r3, #1
 8015fc8:	089b      	lsrpl	r3, r3, #2
 8015fca:	2001      	movmi	r0, #1
 8015fcc:	600b      	strmi	r3, [r1, #0]
 8015fce:	bf5c      	itt	pl
 8015fd0:	600b      	strpl	r3, [r1, #0]
 8015fd2:	2002      	movpl	r0, #2
 8015fd4:	4770      	bx	lr
 8015fd6:	b298      	uxth	r0, r3
 8015fd8:	b9b0      	cbnz	r0, 8016008 <__lo0bits+0x54>
 8015fda:	0c1b      	lsrs	r3, r3, #16
 8015fdc:	2010      	movs	r0, #16
 8015fde:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015fe2:	bf04      	itt	eq
 8015fe4:	0a1b      	lsreq	r3, r3, #8
 8015fe6:	3008      	addeq	r0, #8
 8015fe8:	071a      	lsls	r2, r3, #28
 8015fea:	bf04      	itt	eq
 8015fec:	091b      	lsreq	r3, r3, #4
 8015fee:	3004      	addeq	r0, #4
 8015ff0:	079a      	lsls	r2, r3, #30
 8015ff2:	bf04      	itt	eq
 8015ff4:	089b      	lsreq	r3, r3, #2
 8015ff6:	3002      	addeq	r0, #2
 8015ff8:	07da      	lsls	r2, r3, #31
 8015ffa:	d403      	bmi.n	8016004 <__lo0bits+0x50>
 8015ffc:	085b      	lsrs	r3, r3, #1
 8015ffe:	f100 0001 	add.w	r0, r0, #1
 8016002:	d005      	beq.n	8016010 <__lo0bits+0x5c>
 8016004:	600b      	str	r3, [r1, #0]
 8016006:	4770      	bx	lr
 8016008:	4610      	mov	r0, r2
 801600a:	e7e8      	b.n	8015fde <__lo0bits+0x2a>
 801600c:	2000      	movs	r0, #0
 801600e:	4770      	bx	lr
 8016010:	2020      	movs	r0, #32
 8016012:	4770      	bx	lr

08016014 <__i2b>:
 8016014:	b510      	push	{r4, lr}
 8016016:	460c      	mov	r4, r1
 8016018:	2101      	movs	r1, #1
 801601a:	f7ff feb5 	bl	8015d88 <_Balloc>
 801601e:	4602      	mov	r2, r0
 8016020:	b928      	cbnz	r0, 801602e <__i2b+0x1a>
 8016022:	4b05      	ldr	r3, [pc, #20]	; (8016038 <__i2b+0x24>)
 8016024:	4805      	ldr	r0, [pc, #20]	; (801603c <__i2b+0x28>)
 8016026:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801602a:	f7fe fb8f 	bl	801474c <__assert_func>
 801602e:	2301      	movs	r3, #1
 8016030:	6144      	str	r4, [r0, #20]
 8016032:	6103      	str	r3, [r0, #16]
 8016034:	bd10      	pop	{r4, pc}
 8016036:	bf00      	nop
 8016038:	08017f78 	.word	0x08017f78
 801603c:	08018008 	.word	0x08018008

08016040 <__multiply>:
 8016040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016044:	4614      	mov	r4, r2
 8016046:	690a      	ldr	r2, [r1, #16]
 8016048:	6923      	ldr	r3, [r4, #16]
 801604a:	429a      	cmp	r2, r3
 801604c:	bfb8      	it	lt
 801604e:	460b      	movlt	r3, r1
 8016050:	460d      	mov	r5, r1
 8016052:	bfbc      	itt	lt
 8016054:	4625      	movlt	r5, r4
 8016056:	461c      	movlt	r4, r3
 8016058:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801605c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016060:	68ab      	ldr	r3, [r5, #8]
 8016062:	6869      	ldr	r1, [r5, #4]
 8016064:	eb0a 0709 	add.w	r7, sl, r9
 8016068:	42bb      	cmp	r3, r7
 801606a:	b085      	sub	sp, #20
 801606c:	bfb8      	it	lt
 801606e:	3101      	addlt	r1, #1
 8016070:	f7ff fe8a 	bl	8015d88 <_Balloc>
 8016074:	b930      	cbnz	r0, 8016084 <__multiply+0x44>
 8016076:	4602      	mov	r2, r0
 8016078:	4b42      	ldr	r3, [pc, #264]	; (8016184 <__multiply+0x144>)
 801607a:	4843      	ldr	r0, [pc, #268]	; (8016188 <__multiply+0x148>)
 801607c:	f240 115d 	movw	r1, #349	; 0x15d
 8016080:	f7fe fb64 	bl	801474c <__assert_func>
 8016084:	f100 0614 	add.w	r6, r0, #20
 8016088:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801608c:	4633      	mov	r3, r6
 801608e:	2200      	movs	r2, #0
 8016090:	4543      	cmp	r3, r8
 8016092:	d31e      	bcc.n	80160d2 <__multiply+0x92>
 8016094:	f105 0c14 	add.w	ip, r5, #20
 8016098:	f104 0314 	add.w	r3, r4, #20
 801609c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80160a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80160a4:	9202      	str	r2, [sp, #8]
 80160a6:	ebac 0205 	sub.w	r2, ip, r5
 80160aa:	3a15      	subs	r2, #21
 80160ac:	f022 0203 	bic.w	r2, r2, #3
 80160b0:	3204      	adds	r2, #4
 80160b2:	f105 0115 	add.w	r1, r5, #21
 80160b6:	458c      	cmp	ip, r1
 80160b8:	bf38      	it	cc
 80160ba:	2204      	movcc	r2, #4
 80160bc:	9201      	str	r2, [sp, #4]
 80160be:	9a02      	ldr	r2, [sp, #8]
 80160c0:	9303      	str	r3, [sp, #12]
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d808      	bhi.n	80160d8 <__multiply+0x98>
 80160c6:	2f00      	cmp	r7, #0
 80160c8:	dc55      	bgt.n	8016176 <__multiply+0x136>
 80160ca:	6107      	str	r7, [r0, #16]
 80160cc:	b005      	add	sp, #20
 80160ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160d2:	f843 2b04 	str.w	r2, [r3], #4
 80160d6:	e7db      	b.n	8016090 <__multiply+0x50>
 80160d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80160dc:	f1ba 0f00 	cmp.w	sl, #0
 80160e0:	d020      	beq.n	8016124 <__multiply+0xe4>
 80160e2:	f105 0e14 	add.w	lr, r5, #20
 80160e6:	46b1      	mov	r9, r6
 80160e8:	2200      	movs	r2, #0
 80160ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 80160ee:	f8d9 b000 	ldr.w	fp, [r9]
 80160f2:	b2a1      	uxth	r1, r4
 80160f4:	fa1f fb8b 	uxth.w	fp, fp
 80160f8:	fb0a b101 	mla	r1, sl, r1, fp
 80160fc:	4411      	add	r1, r2
 80160fe:	f8d9 2000 	ldr.w	r2, [r9]
 8016102:	0c24      	lsrs	r4, r4, #16
 8016104:	0c12      	lsrs	r2, r2, #16
 8016106:	fb0a 2404 	mla	r4, sl, r4, r2
 801610a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801610e:	b289      	uxth	r1, r1
 8016110:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8016114:	45f4      	cmp	ip, lr
 8016116:	f849 1b04 	str.w	r1, [r9], #4
 801611a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801611e:	d8e4      	bhi.n	80160ea <__multiply+0xaa>
 8016120:	9901      	ldr	r1, [sp, #4]
 8016122:	5072      	str	r2, [r6, r1]
 8016124:	9a03      	ldr	r2, [sp, #12]
 8016126:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801612a:	3304      	adds	r3, #4
 801612c:	f1b9 0f00 	cmp.w	r9, #0
 8016130:	d01f      	beq.n	8016172 <__multiply+0x132>
 8016132:	6834      	ldr	r4, [r6, #0]
 8016134:	f105 0114 	add.w	r1, r5, #20
 8016138:	46b6      	mov	lr, r6
 801613a:	f04f 0a00 	mov.w	sl, #0
 801613e:	880a      	ldrh	r2, [r1, #0]
 8016140:	f8be b002 	ldrh.w	fp, [lr, #2]
 8016144:	fb09 b202 	mla	r2, r9, r2, fp
 8016148:	4492      	add	sl, r2
 801614a:	b2a4      	uxth	r4, r4
 801614c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8016150:	f84e 4b04 	str.w	r4, [lr], #4
 8016154:	f851 4b04 	ldr.w	r4, [r1], #4
 8016158:	f8be 2000 	ldrh.w	r2, [lr]
 801615c:	0c24      	lsrs	r4, r4, #16
 801615e:	fb09 2404 	mla	r4, r9, r4, r2
 8016162:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8016166:	458c      	cmp	ip, r1
 8016168:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801616c:	d8e7      	bhi.n	801613e <__multiply+0xfe>
 801616e:	9a01      	ldr	r2, [sp, #4]
 8016170:	50b4      	str	r4, [r6, r2]
 8016172:	3604      	adds	r6, #4
 8016174:	e7a3      	b.n	80160be <__multiply+0x7e>
 8016176:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801617a:	2b00      	cmp	r3, #0
 801617c:	d1a5      	bne.n	80160ca <__multiply+0x8a>
 801617e:	3f01      	subs	r7, #1
 8016180:	e7a1      	b.n	80160c6 <__multiply+0x86>
 8016182:	bf00      	nop
 8016184:	08017f78 	.word	0x08017f78
 8016188:	08018008 	.word	0x08018008

0801618c <__pow5mult>:
 801618c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016190:	4615      	mov	r5, r2
 8016192:	f012 0203 	ands.w	r2, r2, #3
 8016196:	4606      	mov	r6, r0
 8016198:	460f      	mov	r7, r1
 801619a:	d007      	beq.n	80161ac <__pow5mult+0x20>
 801619c:	4c25      	ldr	r4, [pc, #148]	; (8016234 <__pow5mult+0xa8>)
 801619e:	3a01      	subs	r2, #1
 80161a0:	2300      	movs	r3, #0
 80161a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80161a6:	f7ff fe51 	bl	8015e4c <__multadd>
 80161aa:	4607      	mov	r7, r0
 80161ac:	10ad      	asrs	r5, r5, #2
 80161ae:	d03d      	beq.n	801622c <__pow5mult+0xa0>
 80161b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80161b2:	b97c      	cbnz	r4, 80161d4 <__pow5mult+0x48>
 80161b4:	2010      	movs	r0, #16
 80161b6:	f7fc fabb 	bl	8012730 <malloc>
 80161ba:	4602      	mov	r2, r0
 80161bc:	6270      	str	r0, [r6, #36]	; 0x24
 80161be:	b928      	cbnz	r0, 80161cc <__pow5mult+0x40>
 80161c0:	4b1d      	ldr	r3, [pc, #116]	; (8016238 <__pow5mult+0xac>)
 80161c2:	481e      	ldr	r0, [pc, #120]	; (801623c <__pow5mult+0xb0>)
 80161c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80161c8:	f7fe fac0 	bl	801474c <__assert_func>
 80161cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80161d0:	6004      	str	r4, [r0, #0]
 80161d2:	60c4      	str	r4, [r0, #12]
 80161d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80161d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80161dc:	b94c      	cbnz	r4, 80161f2 <__pow5mult+0x66>
 80161de:	f240 2171 	movw	r1, #625	; 0x271
 80161e2:	4630      	mov	r0, r6
 80161e4:	f7ff ff16 	bl	8016014 <__i2b>
 80161e8:	2300      	movs	r3, #0
 80161ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80161ee:	4604      	mov	r4, r0
 80161f0:	6003      	str	r3, [r0, #0]
 80161f2:	f04f 0900 	mov.w	r9, #0
 80161f6:	07eb      	lsls	r3, r5, #31
 80161f8:	d50a      	bpl.n	8016210 <__pow5mult+0x84>
 80161fa:	4639      	mov	r1, r7
 80161fc:	4622      	mov	r2, r4
 80161fe:	4630      	mov	r0, r6
 8016200:	f7ff ff1e 	bl	8016040 <__multiply>
 8016204:	4639      	mov	r1, r7
 8016206:	4680      	mov	r8, r0
 8016208:	4630      	mov	r0, r6
 801620a:	f7ff fdfd 	bl	8015e08 <_Bfree>
 801620e:	4647      	mov	r7, r8
 8016210:	106d      	asrs	r5, r5, #1
 8016212:	d00b      	beq.n	801622c <__pow5mult+0xa0>
 8016214:	6820      	ldr	r0, [r4, #0]
 8016216:	b938      	cbnz	r0, 8016228 <__pow5mult+0x9c>
 8016218:	4622      	mov	r2, r4
 801621a:	4621      	mov	r1, r4
 801621c:	4630      	mov	r0, r6
 801621e:	f7ff ff0f 	bl	8016040 <__multiply>
 8016222:	6020      	str	r0, [r4, #0]
 8016224:	f8c0 9000 	str.w	r9, [r0]
 8016228:	4604      	mov	r4, r0
 801622a:	e7e4      	b.n	80161f6 <__pow5mult+0x6a>
 801622c:	4638      	mov	r0, r7
 801622e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016232:	bf00      	nop
 8016234:	08018158 	.word	0x08018158
 8016238:	08017f02 	.word	0x08017f02
 801623c:	08018008 	.word	0x08018008

08016240 <__lshift>:
 8016240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016244:	460c      	mov	r4, r1
 8016246:	6849      	ldr	r1, [r1, #4]
 8016248:	6923      	ldr	r3, [r4, #16]
 801624a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801624e:	68a3      	ldr	r3, [r4, #8]
 8016250:	4607      	mov	r7, r0
 8016252:	4691      	mov	r9, r2
 8016254:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016258:	f108 0601 	add.w	r6, r8, #1
 801625c:	42b3      	cmp	r3, r6
 801625e:	db0b      	blt.n	8016278 <__lshift+0x38>
 8016260:	4638      	mov	r0, r7
 8016262:	f7ff fd91 	bl	8015d88 <_Balloc>
 8016266:	4605      	mov	r5, r0
 8016268:	b948      	cbnz	r0, 801627e <__lshift+0x3e>
 801626a:	4602      	mov	r2, r0
 801626c:	4b28      	ldr	r3, [pc, #160]	; (8016310 <__lshift+0xd0>)
 801626e:	4829      	ldr	r0, [pc, #164]	; (8016314 <__lshift+0xd4>)
 8016270:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016274:	f7fe fa6a 	bl	801474c <__assert_func>
 8016278:	3101      	adds	r1, #1
 801627a:	005b      	lsls	r3, r3, #1
 801627c:	e7ee      	b.n	801625c <__lshift+0x1c>
 801627e:	2300      	movs	r3, #0
 8016280:	f100 0114 	add.w	r1, r0, #20
 8016284:	f100 0210 	add.w	r2, r0, #16
 8016288:	4618      	mov	r0, r3
 801628a:	4553      	cmp	r3, sl
 801628c:	db33      	blt.n	80162f6 <__lshift+0xb6>
 801628e:	6920      	ldr	r0, [r4, #16]
 8016290:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016294:	f104 0314 	add.w	r3, r4, #20
 8016298:	f019 091f 	ands.w	r9, r9, #31
 801629c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80162a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80162a4:	d02b      	beq.n	80162fe <__lshift+0xbe>
 80162a6:	f1c9 0e20 	rsb	lr, r9, #32
 80162aa:	468a      	mov	sl, r1
 80162ac:	2200      	movs	r2, #0
 80162ae:	6818      	ldr	r0, [r3, #0]
 80162b0:	fa00 f009 	lsl.w	r0, r0, r9
 80162b4:	4302      	orrs	r2, r0
 80162b6:	f84a 2b04 	str.w	r2, [sl], #4
 80162ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80162be:	459c      	cmp	ip, r3
 80162c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80162c4:	d8f3      	bhi.n	80162ae <__lshift+0x6e>
 80162c6:	ebac 0304 	sub.w	r3, ip, r4
 80162ca:	3b15      	subs	r3, #21
 80162cc:	f023 0303 	bic.w	r3, r3, #3
 80162d0:	3304      	adds	r3, #4
 80162d2:	f104 0015 	add.w	r0, r4, #21
 80162d6:	4584      	cmp	ip, r0
 80162d8:	bf38      	it	cc
 80162da:	2304      	movcc	r3, #4
 80162dc:	50ca      	str	r2, [r1, r3]
 80162de:	b10a      	cbz	r2, 80162e4 <__lshift+0xa4>
 80162e0:	f108 0602 	add.w	r6, r8, #2
 80162e4:	3e01      	subs	r6, #1
 80162e6:	4638      	mov	r0, r7
 80162e8:	612e      	str	r6, [r5, #16]
 80162ea:	4621      	mov	r1, r4
 80162ec:	f7ff fd8c 	bl	8015e08 <_Bfree>
 80162f0:	4628      	mov	r0, r5
 80162f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80162fa:	3301      	adds	r3, #1
 80162fc:	e7c5      	b.n	801628a <__lshift+0x4a>
 80162fe:	3904      	subs	r1, #4
 8016300:	f853 2b04 	ldr.w	r2, [r3], #4
 8016304:	f841 2f04 	str.w	r2, [r1, #4]!
 8016308:	459c      	cmp	ip, r3
 801630a:	d8f9      	bhi.n	8016300 <__lshift+0xc0>
 801630c:	e7ea      	b.n	80162e4 <__lshift+0xa4>
 801630e:	bf00      	nop
 8016310:	08017f78 	.word	0x08017f78
 8016314:	08018008 	.word	0x08018008

08016318 <__mcmp>:
 8016318:	b530      	push	{r4, r5, lr}
 801631a:	6902      	ldr	r2, [r0, #16]
 801631c:	690c      	ldr	r4, [r1, #16]
 801631e:	1b12      	subs	r2, r2, r4
 8016320:	d10e      	bne.n	8016340 <__mcmp+0x28>
 8016322:	f100 0314 	add.w	r3, r0, #20
 8016326:	3114      	adds	r1, #20
 8016328:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801632c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016330:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016334:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016338:	42a5      	cmp	r5, r4
 801633a:	d003      	beq.n	8016344 <__mcmp+0x2c>
 801633c:	d305      	bcc.n	801634a <__mcmp+0x32>
 801633e:	2201      	movs	r2, #1
 8016340:	4610      	mov	r0, r2
 8016342:	bd30      	pop	{r4, r5, pc}
 8016344:	4283      	cmp	r3, r0
 8016346:	d3f3      	bcc.n	8016330 <__mcmp+0x18>
 8016348:	e7fa      	b.n	8016340 <__mcmp+0x28>
 801634a:	f04f 32ff 	mov.w	r2, #4294967295
 801634e:	e7f7      	b.n	8016340 <__mcmp+0x28>

08016350 <__mdiff>:
 8016350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016354:	460c      	mov	r4, r1
 8016356:	4606      	mov	r6, r0
 8016358:	4611      	mov	r1, r2
 801635a:	4620      	mov	r0, r4
 801635c:	4617      	mov	r7, r2
 801635e:	f7ff ffdb 	bl	8016318 <__mcmp>
 8016362:	1e05      	subs	r5, r0, #0
 8016364:	d110      	bne.n	8016388 <__mdiff+0x38>
 8016366:	4629      	mov	r1, r5
 8016368:	4630      	mov	r0, r6
 801636a:	f7ff fd0d 	bl	8015d88 <_Balloc>
 801636e:	b930      	cbnz	r0, 801637e <__mdiff+0x2e>
 8016370:	4b39      	ldr	r3, [pc, #228]	; (8016458 <__mdiff+0x108>)
 8016372:	4602      	mov	r2, r0
 8016374:	f240 2132 	movw	r1, #562	; 0x232
 8016378:	4838      	ldr	r0, [pc, #224]	; (801645c <__mdiff+0x10c>)
 801637a:	f7fe f9e7 	bl	801474c <__assert_func>
 801637e:	2301      	movs	r3, #1
 8016380:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016384:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016388:	bfa4      	itt	ge
 801638a:	463b      	movge	r3, r7
 801638c:	4627      	movge	r7, r4
 801638e:	4630      	mov	r0, r6
 8016390:	6879      	ldr	r1, [r7, #4]
 8016392:	bfa6      	itte	ge
 8016394:	461c      	movge	r4, r3
 8016396:	2500      	movge	r5, #0
 8016398:	2501      	movlt	r5, #1
 801639a:	f7ff fcf5 	bl	8015d88 <_Balloc>
 801639e:	b920      	cbnz	r0, 80163aa <__mdiff+0x5a>
 80163a0:	4b2d      	ldr	r3, [pc, #180]	; (8016458 <__mdiff+0x108>)
 80163a2:	4602      	mov	r2, r0
 80163a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80163a8:	e7e6      	b.n	8016378 <__mdiff+0x28>
 80163aa:	693e      	ldr	r6, [r7, #16]
 80163ac:	60c5      	str	r5, [r0, #12]
 80163ae:	6925      	ldr	r5, [r4, #16]
 80163b0:	f107 0114 	add.w	r1, r7, #20
 80163b4:	f104 0914 	add.w	r9, r4, #20
 80163b8:	f100 0e14 	add.w	lr, r0, #20
 80163bc:	f107 0210 	add.w	r2, r7, #16
 80163c0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80163c4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80163c8:	46f2      	mov	sl, lr
 80163ca:	2700      	movs	r7, #0
 80163cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80163d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80163d4:	fa1f f883 	uxth.w	r8, r3
 80163d8:	fa17 f78b 	uxtah	r7, r7, fp
 80163dc:	0c1b      	lsrs	r3, r3, #16
 80163de:	eba7 0808 	sub.w	r8, r7, r8
 80163e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80163e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80163ea:	fa1f f888 	uxth.w	r8, r8
 80163ee:	141f      	asrs	r7, r3, #16
 80163f0:	454d      	cmp	r5, r9
 80163f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80163f6:	f84a 3b04 	str.w	r3, [sl], #4
 80163fa:	d8e7      	bhi.n	80163cc <__mdiff+0x7c>
 80163fc:	1b2b      	subs	r3, r5, r4
 80163fe:	3b15      	subs	r3, #21
 8016400:	f023 0303 	bic.w	r3, r3, #3
 8016404:	3304      	adds	r3, #4
 8016406:	3415      	adds	r4, #21
 8016408:	42a5      	cmp	r5, r4
 801640a:	bf38      	it	cc
 801640c:	2304      	movcc	r3, #4
 801640e:	4419      	add	r1, r3
 8016410:	4473      	add	r3, lr
 8016412:	469e      	mov	lr, r3
 8016414:	460d      	mov	r5, r1
 8016416:	4565      	cmp	r5, ip
 8016418:	d30e      	bcc.n	8016438 <__mdiff+0xe8>
 801641a:	f10c 0203 	add.w	r2, ip, #3
 801641e:	1a52      	subs	r2, r2, r1
 8016420:	f022 0203 	bic.w	r2, r2, #3
 8016424:	3903      	subs	r1, #3
 8016426:	458c      	cmp	ip, r1
 8016428:	bf38      	it	cc
 801642a:	2200      	movcc	r2, #0
 801642c:	441a      	add	r2, r3
 801642e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016432:	b17b      	cbz	r3, 8016454 <__mdiff+0x104>
 8016434:	6106      	str	r6, [r0, #16]
 8016436:	e7a5      	b.n	8016384 <__mdiff+0x34>
 8016438:	f855 8b04 	ldr.w	r8, [r5], #4
 801643c:	fa17 f488 	uxtah	r4, r7, r8
 8016440:	1422      	asrs	r2, r4, #16
 8016442:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8016446:	b2a4      	uxth	r4, r4
 8016448:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801644c:	f84e 4b04 	str.w	r4, [lr], #4
 8016450:	1417      	asrs	r7, r2, #16
 8016452:	e7e0      	b.n	8016416 <__mdiff+0xc6>
 8016454:	3e01      	subs	r6, #1
 8016456:	e7ea      	b.n	801642e <__mdiff+0xde>
 8016458:	08017f78 	.word	0x08017f78
 801645c:	08018008 	.word	0x08018008

08016460 <__ulp>:
 8016460:	b082      	sub	sp, #8
 8016462:	ed8d 0b00 	vstr	d0, [sp]
 8016466:	9b01      	ldr	r3, [sp, #4]
 8016468:	4912      	ldr	r1, [pc, #72]	; (80164b4 <__ulp+0x54>)
 801646a:	4019      	ands	r1, r3
 801646c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016470:	2900      	cmp	r1, #0
 8016472:	dd05      	ble.n	8016480 <__ulp+0x20>
 8016474:	2200      	movs	r2, #0
 8016476:	460b      	mov	r3, r1
 8016478:	ec43 2b10 	vmov	d0, r2, r3
 801647c:	b002      	add	sp, #8
 801647e:	4770      	bx	lr
 8016480:	4249      	negs	r1, r1
 8016482:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016486:	ea4f 5021 	mov.w	r0, r1, asr #20
 801648a:	f04f 0200 	mov.w	r2, #0
 801648e:	f04f 0300 	mov.w	r3, #0
 8016492:	da04      	bge.n	801649e <__ulp+0x3e>
 8016494:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016498:	fa41 f300 	asr.w	r3, r1, r0
 801649c:	e7ec      	b.n	8016478 <__ulp+0x18>
 801649e:	f1a0 0114 	sub.w	r1, r0, #20
 80164a2:	291e      	cmp	r1, #30
 80164a4:	bfda      	itte	le
 80164a6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80164aa:	fa20 f101 	lsrle.w	r1, r0, r1
 80164ae:	2101      	movgt	r1, #1
 80164b0:	460a      	mov	r2, r1
 80164b2:	e7e1      	b.n	8016478 <__ulp+0x18>
 80164b4:	7ff00000 	.word	0x7ff00000

080164b8 <__b2d>:
 80164b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164ba:	6905      	ldr	r5, [r0, #16]
 80164bc:	f100 0714 	add.w	r7, r0, #20
 80164c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80164c4:	1f2e      	subs	r6, r5, #4
 80164c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80164ca:	4620      	mov	r0, r4
 80164cc:	f7ff fd52 	bl	8015f74 <__hi0bits>
 80164d0:	f1c0 0320 	rsb	r3, r0, #32
 80164d4:	280a      	cmp	r0, #10
 80164d6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016554 <__b2d+0x9c>
 80164da:	600b      	str	r3, [r1, #0]
 80164dc:	dc14      	bgt.n	8016508 <__b2d+0x50>
 80164de:	f1c0 0e0b 	rsb	lr, r0, #11
 80164e2:	fa24 f10e 	lsr.w	r1, r4, lr
 80164e6:	42b7      	cmp	r7, r6
 80164e8:	ea41 030c 	orr.w	r3, r1, ip
 80164ec:	bf34      	ite	cc
 80164ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80164f2:	2100      	movcs	r1, #0
 80164f4:	3015      	adds	r0, #21
 80164f6:	fa04 f000 	lsl.w	r0, r4, r0
 80164fa:	fa21 f10e 	lsr.w	r1, r1, lr
 80164fe:	ea40 0201 	orr.w	r2, r0, r1
 8016502:	ec43 2b10 	vmov	d0, r2, r3
 8016506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016508:	42b7      	cmp	r7, r6
 801650a:	bf3a      	itte	cc
 801650c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016510:	f1a5 0608 	subcc.w	r6, r5, #8
 8016514:	2100      	movcs	r1, #0
 8016516:	380b      	subs	r0, #11
 8016518:	d017      	beq.n	801654a <__b2d+0x92>
 801651a:	f1c0 0c20 	rsb	ip, r0, #32
 801651e:	fa04 f500 	lsl.w	r5, r4, r0
 8016522:	42be      	cmp	r6, r7
 8016524:	fa21 f40c 	lsr.w	r4, r1, ip
 8016528:	ea45 0504 	orr.w	r5, r5, r4
 801652c:	bf8c      	ite	hi
 801652e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016532:	2400      	movls	r4, #0
 8016534:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016538:	fa01 f000 	lsl.w	r0, r1, r0
 801653c:	fa24 f40c 	lsr.w	r4, r4, ip
 8016540:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016544:	ea40 0204 	orr.w	r2, r0, r4
 8016548:	e7db      	b.n	8016502 <__b2d+0x4a>
 801654a:	ea44 030c 	orr.w	r3, r4, ip
 801654e:	460a      	mov	r2, r1
 8016550:	e7d7      	b.n	8016502 <__b2d+0x4a>
 8016552:	bf00      	nop
 8016554:	3ff00000 	.word	0x3ff00000

08016558 <__d2b>:
 8016558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801655c:	4689      	mov	r9, r1
 801655e:	2101      	movs	r1, #1
 8016560:	ec57 6b10 	vmov	r6, r7, d0
 8016564:	4690      	mov	r8, r2
 8016566:	f7ff fc0f 	bl	8015d88 <_Balloc>
 801656a:	4604      	mov	r4, r0
 801656c:	b930      	cbnz	r0, 801657c <__d2b+0x24>
 801656e:	4602      	mov	r2, r0
 8016570:	4b25      	ldr	r3, [pc, #148]	; (8016608 <__d2b+0xb0>)
 8016572:	4826      	ldr	r0, [pc, #152]	; (801660c <__d2b+0xb4>)
 8016574:	f240 310a 	movw	r1, #778	; 0x30a
 8016578:	f7fe f8e8 	bl	801474c <__assert_func>
 801657c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016580:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016584:	bb35      	cbnz	r5, 80165d4 <__d2b+0x7c>
 8016586:	2e00      	cmp	r6, #0
 8016588:	9301      	str	r3, [sp, #4]
 801658a:	d028      	beq.n	80165de <__d2b+0x86>
 801658c:	4668      	mov	r0, sp
 801658e:	9600      	str	r6, [sp, #0]
 8016590:	f7ff fd10 	bl	8015fb4 <__lo0bits>
 8016594:	9900      	ldr	r1, [sp, #0]
 8016596:	b300      	cbz	r0, 80165da <__d2b+0x82>
 8016598:	9a01      	ldr	r2, [sp, #4]
 801659a:	f1c0 0320 	rsb	r3, r0, #32
 801659e:	fa02 f303 	lsl.w	r3, r2, r3
 80165a2:	430b      	orrs	r3, r1
 80165a4:	40c2      	lsrs	r2, r0
 80165a6:	6163      	str	r3, [r4, #20]
 80165a8:	9201      	str	r2, [sp, #4]
 80165aa:	9b01      	ldr	r3, [sp, #4]
 80165ac:	61a3      	str	r3, [r4, #24]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	bf14      	ite	ne
 80165b2:	2202      	movne	r2, #2
 80165b4:	2201      	moveq	r2, #1
 80165b6:	6122      	str	r2, [r4, #16]
 80165b8:	b1d5      	cbz	r5, 80165f0 <__d2b+0x98>
 80165ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80165be:	4405      	add	r5, r0
 80165c0:	f8c9 5000 	str.w	r5, [r9]
 80165c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80165c8:	f8c8 0000 	str.w	r0, [r8]
 80165cc:	4620      	mov	r0, r4
 80165ce:	b003      	add	sp, #12
 80165d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80165d8:	e7d5      	b.n	8016586 <__d2b+0x2e>
 80165da:	6161      	str	r1, [r4, #20]
 80165dc:	e7e5      	b.n	80165aa <__d2b+0x52>
 80165de:	a801      	add	r0, sp, #4
 80165e0:	f7ff fce8 	bl	8015fb4 <__lo0bits>
 80165e4:	9b01      	ldr	r3, [sp, #4]
 80165e6:	6163      	str	r3, [r4, #20]
 80165e8:	2201      	movs	r2, #1
 80165ea:	6122      	str	r2, [r4, #16]
 80165ec:	3020      	adds	r0, #32
 80165ee:	e7e3      	b.n	80165b8 <__d2b+0x60>
 80165f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80165f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80165f8:	f8c9 0000 	str.w	r0, [r9]
 80165fc:	6918      	ldr	r0, [r3, #16]
 80165fe:	f7ff fcb9 	bl	8015f74 <__hi0bits>
 8016602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016606:	e7df      	b.n	80165c8 <__d2b+0x70>
 8016608:	08017f78 	.word	0x08017f78
 801660c:	08018008 	.word	0x08018008

08016610 <__ratio>:
 8016610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016614:	4688      	mov	r8, r1
 8016616:	4669      	mov	r1, sp
 8016618:	4681      	mov	r9, r0
 801661a:	f7ff ff4d 	bl	80164b8 <__b2d>
 801661e:	a901      	add	r1, sp, #4
 8016620:	4640      	mov	r0, r8
 8016622:	ec55 4b10 	vmov	r4, r5, d0
 8016626:	f7ff ff47 	bl	80164b8 <__b2d>
 801662a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801662e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016632:	eba3 0c02 	sub.w	ip, r3, r2
 8016636:	e9dd 3200 	ldrd	r3, r2, [sp]
 801663a:	1a9b      	subs	r3, r3, r2
 801663c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016640:	ec51 0b10 	vmov	r0, r1, d0
 8016644:	2b00      	cmp	r3, #0
 8016646:	bfd6      	itet	le
 8016648:	460a      	movle	r2, r1
 801664a:	462a      	movgt	r2, r5
 801664c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016650:	468b      	mov	fp, r1
 8016652:	462f      	mov	r7, r5
 8016654:	bfd4      	ite	le
 8016656:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801665a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801665e:	4620      	mov	r0, r4
 8016660:	ee10 2a10 	vmov	r2, s0
 8016664:	465b      	mov	r3, fp
 8016666:	4639      	mov	r1, r7
 8016668:	f7ea f900 	bl	800086c <__aeabi_ddiv>
 801666c:	ec41 0b10 	vmov	d0, r0, r1
 8016670:	b003      	add	sp, #12
 8016672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016676 <__copybits>:
 8016676:	3901      	subs	r1, #1
 8016678:	b570      	push	{r4, r5, r6, lr}
 801667a:	1149      	asrs	r1, r1, #5
 801667c:	6914      	ldr	r4, [r2, #16]
 801667e:	3101      	adds	r1, #1
 8016680:	f102 0314 	add.w	r3, r2, #20
 8016684:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016688:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801668c:	1f05      	subs	r5, r0, #4
 801668e:	42a3      	cmp	r3, r4
 8016690:	d30c      	bcc.n	80166ac <__copybits+0x36>
 8016692:	1aa3      	subs	r3, r4, r2
 8016694:	3b11      	subs	r3, #17
 8016696:	f023 0303 	bic.w	r3, r3, #3
 801669a:	3211      	adds	r2, #17
 801669c:	42a2      	cmp	r2, r4
 801669e:	bf88      	it	hi
 80166a0:	2300      	movhi	r3, #0
 80166a2:	4418      	add	r0, r3
 80166a4:	2300      	movs	r3, #0
 80166a6:	4288      	cmp	r0, r1
 80166a8:	d305      	bcc.n	80166b6 <__copybits+0x40>
 80166aa:	bd70      	pop	{r4, r5, r6, pc}
 80166ac:	f853 6b04 	ldr.w	r6, [r3], #4
 80166b0:	f845 6f04 	str.w	r6, [r5, #4]!
 80166b4:	e7eb      	b.n	801668e <__copybits+0x18>
 80166b6:	f840 3b04 	str.w	r3, [r0], #4
 80166ba:	e7f4      	b.n	80166a6 <__copybits+0x30>

080166bc <__any_on>:
 80166bc:	f100 0214 	add.w	r2, r0, #20
 80166c0:	6900      	ldr	r0, [r0, #16]
 80166c2:	114b      	asrs	r3, r1, #5
 80166c4:	4298      	cmp	r0, r3
 80166c6:	b510      	push	{r4, lr}
 80166c8:	db11      	blt.n	80166ee <__any_on+0x32>
 80166ca:	dd0a      	ble.n	80166e2 <__any_on+0x26>
 80166cc:	f011 011f 	ands.w	r1, r1, #31
 80166d0:	d007      	beq.n	80166e2 <__any_on+0x26>
 80166d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80166d6:	fa24 f001 	lsr.w	r0, r4, r1
 80166da:	fa00 f101 	lsl.w	r1, r0, r1
 80166de:	428c      	cmp	r4, r1
 80166e0:	d10b      	bne.n	80166fa <__any_on+0x3e>
 80166e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80166e6:	4293      	cmp	r3, r2
 80166e8:	d803      	bhi.n	80166f2 <__any_on+0x36>
 80166ea:	2000      	movs	r0, #0
 80166ec:	bd10      	pop	{r4, pc}
 80166ee:	4603      	mov	r3, r0
 80166f0:	e7f7      	b.n	80166e2 <__any_on+0x26>
 80166f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80166f6:	2900      	cmp	r1, #0
 80166f8:	d0f5      	beq.n	80166e6 <__any_on+0x2a>
 80166fa:	2001      	movs	r0, #1
 80166fc:	e7f6      	b.n	80166ec <__any_on+0x30>

080166fe <_calloc_r>:
 80166fe:	b513      	push	{r0, r1, r4, lr}
 8016700:	434a      	muls	r2, r1
 8016702:	4611      	mov	r1, r2
 8016704:	9201      	str	r2, [sp, #4]
 8016706:	f7fc f8a3 	bl	8012850 <_malloc_r>
 801670a:	4604      	mov	r4, r0
 801670c:	b118      	cbz	r0, 8016716 <_calloc_r+0x18>
 801670e:	9a01      	ldr	r2, [sp, #4]
 8016710:	2100      	movs	r1, #0
 8016712:	f7fc f845 	bl	80127a0 <memset>
 8016716:	4620      	mov	r0, r4
 8016718:	b002      	add	sp, #8
 801671a:	bd10      	pop	{r4, pc}

0801671c <_realloc_r>:
 801671c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801671e:	4607      	mov	r7, r0
 8016720:	4614      	mov	r4, r2
 8016722:	460e      	mov	r6, r1
 8016724:	b921      	cbnz	r1, 8016730 <_realloc_r+0x14>
 8016726:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801672a:	4611      	mov	r1, r2
 801672c:	f7fc b890 	b.w	8012850 <_malloc_r>
 8016730:	b922      	cbnz	r2, 801673c <_realloc_r+0x20>
 8016732:	f7fc f83d 	bl	80127b0 <_free_r>
 8016736:	4625      	mov	r5, r4
 8016738:	4628      	mov	r0, r5
 801673a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801673c:	f000 ffaa 	bl	8017694 <_malloc_usable_size_r>
 8016740:	42a0      	cmp	r0, r4
 8016742:	d20f      	bcs.n	8016764 <_realloc_r+0x48>
 8016744:	4621      	mov	r1, r4
 8016746:	4638      	mov	r0, r7
 8016748:	f7fc f882 	bl	8012850 <_malloc_r>
 801674c:	4605      	mov	r5, r0
 801674e:	2800      	cmp	r0, #0
 8016750:	d0f2      	beq.n	8016738 <_realloc_r+0x1c>
 8016752:	4631      	mov	r1, r6
 8016754:	4622      	mov	r2, r4
 8016756:	f7fb fffb 	bl	8012750 <memcpy>
 801675a:	4631      	mov	r1, r6
 801675c:	4638      	mov	r0, r7
 801675e:	f7fc f827 	bl	80127b0 <_free_r>
 8016762:	e7e9      	b.n	8016738 <_realloc_r+0x1c>
 8016764:	4635      	mov	r5, r6
 8016766:	e7e7      	b.n	8016738 <_realloc_r+0x1c>

08016768 <__ssputs_r>:
 8016768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801676c:	688e      	ldr	r6, [r1, #8]
 801676e:	429e      	cmp	r6, r3
 8016770:	4682      	mov	sl, r0
 8016772:	460c      	mov	r4, r1
 8016774:	4690      	mov	r8, r2
 8016776:	461f      	mov	r7, r3
 8016778:	d838      	bhi.n	80167ec <__ssputs_r+0x84>
 801677a:	898a      	ldrh	r2, [r1, #12]
 801677c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016780:	d032      	beq.n	80167e8 <__ssputs_r+0x80>
 8016782:	6825      	ldr	r5, [r4, #0]
 8016784:	6909      	ldr	r1, [r1, #16]
 8016786:	eba5 0901 	sub.w	r9, r5, r1
 801678a:	6965      	ldr	r5, [r4, #20]
 801678c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016790:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016794:	3301      	adds	r3, #1
 8016796:	444b      	add	r3, r9
 8016798:	106d      	asrs	r5, r5, #1
 801679a:	429d      	cmp	r5, r3
 801679c:	bf38      	it	cc
 801679e:	461d      	movcc	r5, r3
 80167a0:	0553      	lsls	r3, r2, #21
 80167a2:	d531      	bpl.n	8016808 <__ssputs_r+0xa0>
 80167a4:	4629      	mov	r1, r5
 80167a6:	f7fc f853 	bl	8012850 <_malloc_r>
 80167aa:	4606      	mov	r6, r0
 80167ac:	b950      	cbnz	r0, 80167c4 <__ssputs_r+0x5c>
 80167ae:	230c      	movs	r3, #12
 80167b0:	f8ca 3000 	str.w	r3, [sl]
 80167b4:	89a3      	ldrh	r3, [r4, #12]
 80167b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167ba:	81a3      	strh	r3, [r4, #12]
 80167bc:	f04f 30ff 	mov.w	r0, #4294967295
 80167c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167c4:	6921      	ldr	r1, [r4, #16]
 80167c6:	464a      	mov	r2, r9
 80167c8:	f7fb ffc2 	bl	8012750 <memcpy>
 80167cc:	89a3      	ldrh	r3, [r4, #12]
 80167ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80167d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80167d6:	81a3      	strh	r3, [r4, #12]
 80167d8:	6126      	str	r6, [r4, #16]
 80167da:	6165      	str	r5, [r4, #20]
 80167dc:	444e      	add	r6, r9
 80167de:	eba5 0509 	sub.w	r5, r5, r9
 80167e2:	6026      	str	r6, [r4, #0]
 80167e4:	60a5      	str	r5, [r4, #8]
 80167e6:	463e      	mov	r6, r7
 80167e8:	42be      	cmp	r6, r7
 80167ea:	d900      	bls.n	80167ee <__ssputs_r+0x86>
 80167ec:	463e      	mov	r6, r7
 80167ee:	4632      	mov	r2, r6
 80167f0:	6820      	ldr	r0, [r4, #0]
 80167f2:	4641      	mov	r1, r8
 80167f4:	f7fb ffba 	bl	801276c <memmove>
 80167f8:	68a3      	ldr	r3, [r4, #8]
 80167fa:	6822      	ldr	r2, [r4, #0]
 80167fc:	1b9b      	subs	r3, r3, r6
 80167fe:	4432      	add	r2, r6
 8016800:	60a3      	str	r3, [r4, #8]
 8016802:	6022      	str	r2, [r4, #0]
 8016804:	2000      	movs	r0, #0
 8016806:	e7db      	b.n	80167c0 <__ssputs_r+0x58>
 8016808:	462a      	mov	r2, r5
 801680a:	f7ff ff87 	bl	801671c <_realloc_r>
 801680e:	4606      	mov	r6, r0
 8016810:	2800      	cmp	r0, #0
 8016812:	d1e1      	bne.n	80167d8 <__ssputs_r+0x70>
 8016814:	6921      	ldr	r1, [r4, #16]
 8016816:	4650      	mov	r0, sl
 8016818:	f7fb ffca 	bl	80127b0 <_free_r>
 801681c:	e7c7      	b.n	80167ae <__ssputs_r+0x46>
	...

08016820 <_svfiprintf_r>:
 8016820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016824:	4698      	mov	r8, r3
 8016826:	898b      	ldrh	r3, [r1, #12]
 8016828:	061b      	lsls	r3, r3, #24
 801682a:	b09d      	sub	sp, #116	; 0x74
 801682c:	4607      	mov	r7, r0
 801682e:	460d      	mov	r5, r1
 8016830:	4614      	mov	r4, r2
 8016832:	d50e      	bpl.n	8016852 <_svfiprintf_r+0x32>
 8016834:	690b      	ldr	r3, [r1, #16]
 8016836:	b963      	cbnz	r3, 8016852 <_svfiprintf_r+0x32>
 8016838:	2140      	movs	r1, #64	; 0x40
 801683a:	f7fc f809 	bl	8012850 <_malloc_r>
 801683e:	6028      	str	r0, [r5, #0]
 8016840:	6128      	str	r0, [r5, #16]
 8016842:	b920      	cbnz	r0, 801684e <_svfiprintf_r+0x2e>
 8016844:	230c      	movs	r3, #12
 8016846:	603b      	str	r3, [r7, #0]
 8016848:	f04f 30ff 	mov.w	r0, #4294967295
 801684c:	e0d1      	b.n	80169f2 <_svfiprintf_r+0x1d2>
 801684e:	2340      	movs	r3, #64	; 0x40
 8016850:	616b      	str	r3, [r5, #20]
 8016852:	2300      	movs	r3, #0
 8016854:	9309      	str	r3, [sp, #36]	; 0x24
 8016856:	2320      	movs	r3, #32
 8016858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801685c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016860:	2330      	movs	r3, #48	; 0x30
 8016862:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016a0c <_svfiprintf_r+0x1ec>
 8016866:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801686a:	f04f 0901 	mov.w	r9, #1
 801686e:	4623      	mov	r3, r4
 8016870:	469a      	mov	sl, r3
 8016872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016876:	b10a      	cbz	r2, 801687c <_svfiprintf_r+0x5c>
 8016878:	2a25      	cmp	r2, #37	; 0x25
 801687a:	d1f9      	bne.n	8016870 <_svfiprintf_r+0x50>
 801687c:	ebba 0b04 	subs.w	fp, sl, r4
 8016880:	d00b      	beq.n	801689a <_svfiprintf_r+0x7a>
 8016882:	465b      	mov	r3, fp
 8016884:	4622      	mov	r2, r4
 8016886:	4629      	mov	r1, r5
 8016888:	4638      	mov	r0, r7
 801688a:	f7ff ff6d 	bl	8016768 <__ssputs_r>
 801688e:	3001      	adds	r0, #1
 8016890:	f000 80aa 	beq.w	80169e8 <_svfiprintf_r+0x1c8>
 8016894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016896:	445a      	add	r2, fp
 8016898:	9209      	str	r2, [sp, #36]	; 0x24
 801689a:	f89a 3000 	ldrb.w	r3, [sl]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	f000 80a2 	beq.w	80169e8 <_svfiprintf_r+0x1c8>
 80168a4:	2300      	movs	r3, #0
 80168a6:	f04f 32ff 	mov.w	r2, #4294967295
 80168aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80168ae:	f10a 0a01 	add.w	sl, sl, #1
 80168b2:	9304      	str	r3, [sp, #16]
 80168b4:	9307      	str	r3, [sp, #28]
 80168b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80168ba:	931a      	str	r3, [sp, #104]	; 0x68
 80168bc:	4654      	mov	r4, sl
 80168be:	2205      	movs	r2, #5
 80168c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168c4:	4851      	ldr	r0, [pc, #324]	; (8016a0c <_svfiprintf_r+0x1ec>)
 80168c6:	f7e9 fc9b 	bl	8000200 <memchr>
 80168ca:	9a04      	ldr	r2, [sp, #16]
 80168cc:	b9d8      	cbnz	r0, 8016906 <_svfiprintf_r+0xe6>
 80168ce:	06d0      	lsls	r0, r2, #27
 80168d0:	bf44      	itt	mi
 80168d2:	2320      	movmi	r3, #32
 80168d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168d8:	0711      	lsls	r1, r2, #28
 80168da:	bf44      	itt	mi
 80168dc:	232b      	movmi	r3, #43	; 0x2b
 80168de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168e2:	f89a 3000 	ldrb.w	r3, [sl]
 80168e6:	2b2a      	cmp	r3, #42	; 0x2a
 80168e8:	d015      	beq.n	8016916 <_svfiprintf_r+0xf6>
 80168ea:	9a07      	ldr	r2, [sp, #28]
 80168ec:	4654      	mov	r4, sl
 80168ee:	2000      	movs	r0, #0
 80168f0:	f04f 0c0a 	mov.w	ip, #10
 80168f4:	4621      	mov	r1, r4
 80168f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168fa:	3b30      	subs	r3, #48	; 0x30
 80168fc:	2b09      	cmp	r3, #9
 80168fe:	d94e      	bls.n	801699e <_svfiprintf_r+0x17e>
 8016900:	b1b0      	cbz	r0, 8016930 <_svfiprintf_r+0x110>
 8016902:	9207      	str	r2, [sp, #28]
 8016904:	e014      	b.n	8016930 <_svfiprintf_r+0x110>
 8016906:	eba0 0308 	sub.w	r3, r0, r8
 801690a:	fa09 f303 	lsl.w	r3, r9, r3
 801690e:	4313      	orrs	r3, r2
 8016910:	9304      	str	r3, [sp, #16]
 8016912:	46a2      	mov	sl, r4
 8016914:	e7d2      	b.n	80168bc <_svfiprintf_r+0x9c>
 8016916:	9b03      	ldr	r3, [sp, #12]
 8016918:	1d19      	adds	r1, r3, #4
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	9103      	str	r1, [sp, #12]
 801691e:	2b00      	cmp	r3, #0
 8016920:	bfbb      	ittet	lt
 8016922:	425b      	neglt	r3, r3
 8016924:	f042 0202 	orrlt.w	r2, r2, #2
 8016928:	9307      	strge	r3, [sp, #28]
 801692a:	9307      	strlt	r3, [sp, #28]
 801692c:	bfb8      	it	lt
 801692e:	9204      	strlt	r2, [sp, #16]
 8016930:	7823      	ldrb	r3, [r4, #0]
 8016932:	2b2e      	cmp	r3, #46	; 0x2e
 8016934:	d10c      	bne.n	8016950 <_svfiprintf_r+0x130>
 8016936:	7863      	ldrb	r3, [r4, #1]
 8016938:	2b2a      	cmp	r3, #42	; 0x2a
 801693a:	d135      	bne.n	80169a8 <_svfiprintf_r+0x188>
 801693c:	9b03      	ldr	r3, [sp, #12]
 801693e:	1d1a      	adds	r2, r3, #4
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	9203      	str	r2, [sp, #12]
 8016944:	2b00      	cmp	r3, #0
 8016946:	bfb8      	it	lt
 8016948:	f04f 33ff 	movlt.w	r3, #4294967295
 801694c:	3402      	adds	r4, #2
 801694e:	9305      	str	r3, [sp, #20]
 8016950:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016a1c <_svfiprintf_r+0x1fc>
 8016954:	7821      	ldrb	r1, [r4, #0]
 8016956:	2203      	movs	r2, #3
 8016958:	4650      	mov	r0, sl
 801695a:	f7e9 fc51 	bl	8000200 <memchr>
 801695e:	b140      	cbz	r0, 8016972 <_svfiprintf_r+0x152>
 8016960:	2340      	movs	r3, #64	; 0x40
 8016962:	eba0 000a 	sub.w	r0, r0, sl
 8016966:	fa03 f000 	lsl.w	r0, r3, r0
 801696a:	9b04      	ldr	r3, [sp, #16]
 801696c:	4303      	orrs	r3, r0
 801696e:	3401      	adds	r4, #1
 8016970:	9304      	str	r3, [sp, #16]
 8016972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016976:	4826      	ldr	r0, [pc, #152]	; (8016a10 <_svfiprintf_r+0x1f0>)
 8016978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801697c:	2206      	movs	r2, #6
 801697e:	f7e9 fc3f 	bl	8000200 <memchr>
 8016982:	2800      	cmp	r0, #0
 8016984:	d038      	beq.n	80169f8 <_svfiprintf_r+0x1d8>
 8016986:	4b23      	ldr	r3, [pc, #140]	; (8016a14 <_svfiprintf_r+0x1f4>)
 8016988:	bb1b      	cbnz	r3, 80169d2 <_svfiprintf_r+0x1b2>
 801698a:	9b03      	ldr	r3, [sp, #12]
 801698c:	3307      	adds	r3, #7
 801698e:	f023 0307 	bic.w	r3, r3, #7
 8016992:	3308      	adds	r3, #8
 8016994:	9303      	str	r3, [sp, #12]
 8016996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016998:	4433      	add	r3, r6
 801699a:	9309      	str	r3, [sp, #36]	; 0x24
 801699c:	e767      	b.n	801686e <_svfiprintf_r+0x4e>
 801699e:	fb0c 3202 	mla	r2, ip, r2, r3
 80169a2:	460c      	mov	r4, r1
 80169a4:	2001      	movs	r0, #1
 80169a6:	e7a5      	b.n	80168f4 <_svfiprintf_r+0xd4>
 80169a8:	2300      	movs	r3, #0
 80169aa:	3401      	adds	r4, #1
 80169ac:	9305      	str	r3, [sp, #20]
 80169ae:	4619      	mov	r1, r3
 80169b0:	f04f 0c0a 	mov.w	ip, #10
 80169b4:	4620      	mov	r0, r4
 80169b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80169ba:	3a30      	subs	r2, #48	; 0x30
 80169bc:	2a09      	cmp	r2, #9
 80169be:	d903      	bls.n	80169c8 <_svfiprintf_r+0x1a8>
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d0c5      	beq.n	8016950 <_svfiprintf_r+0x130>
 80169c4:	9105      	str	r1, [sp, #20]
 80169c6:	e7c3      	b.n	8016950 <_svfiprintf_r+0x130>
 80169c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80169cc:	4604      	mov	r4, r0
 80169ce:	2301      	movs	r3, #1
 80169d0:	e7f0      	b.n	80169b4 <_svfiprintf_r+0x194>
 80169d2:	ab03      	add	r3, sp, #12
 80169d4:	9300      	str	r3, [sp, #0]
 80169d6:	462a      	mov	r2, r5
 80169d8:	4b0f      	ldr	r3, [pc, #60]	; (8016a18 <_svfiprintf_r+0x1f8>)
 80169da:	a904      	add	r1, sp, #16
 80169dc:	4638      	mov	r0, r7
 80169de:	f7fc f831 	bl	8012a44 <_printf_float>
 80169e2:	1c42      	adds	r2, r0, #1
 80169e4:	4606      	mov	r6, r0
 80169e6:	d1d6      	bne.n	8016996 <_svfiprintf_r+0x176>
 80169e8:	89ab      	ldrh	r3, [r5, #12]
 80169ea:	065b      	lsls	r3, r3, #25
 80169ec:	f53f af2c 	bmi.w	8016848 <_svfiprintf_r+0x28>
 80169f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80169f2:	b01d      	add	sp, #116	; 0x74
 80169f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169f8:	ab03      	add	r3, sp, #12
 80169fa:	9300      	str	r3, [sp, #0]
 80169fc:	462a      	mov	r2, r5
 80169fe:	4b06      	ldr	r3, [pc, #24]	; (8016a18 <_svfiprintf_r+0x1f8>)
 8016a00:	a904      	add	r1, sp, #16
 8016a02:	4638      	mov	r0, r7
 8016a04:	f7fc fac2 	bl	8012f8c <_printf_i>
 8016a08:	e7eb      	b.n	80169e2 <_svfiprintf_r+0x1c2>
 8016a0a:	bf00      	nop
 8016a0c:	08018164 	.word	0x08018164
 8016a10:	0801816e 	.word	0x0801816e
 8016a14:	08012a45 	.word	0x08012a45
 8016a18:	08016769 	.word	0x08016769
 8016a1c:	0801816a 	.word	0x0801816a

08016a20 <_sungetc_r>:
 8016a20:	b538      	push	{r3, r4, r5, lr}
 8016a22:	1c4b      	adds	r3, r1, #1
 8016a24:	4614      	mov	r4, r2
 8016a26:	d103      	bne.n	8016a30 <_sungetc_r+0x10>
 8016a28:	f04f 35ff 	mov.w	r5, #4294967295
 8016a2c:	4628      	mov	r0, r5
 8016a2e:	bd38      	pop	{r3, r4, r5, pc}
 8016a30:	8993      	ldrh	r3, [r2, #12]
 8016a32:	f023 0320 	bic.w	r3, r3, #32
 8016a36:	8193      	strh	r3, [r2, #12]
 8016a38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016a3a:	6852      	ldr	r2, [r2, #4]
 8016a3c:	b2cd      	uxtb	r5, r1
 8016a3e:	b18b      	cbz	r3, 8016a64 <_sungetc_r+0x44>
 8016a40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016a42:	4293      	cmp	r3, r2
 8016a44:	dd08      	ble.n	8016a58 <_sungetc_r+0x38>
 8016a46:	6823      	ldr	r3, [r4, #0]
 8016a48:	1e5a      	subs	r2, r3, #1
 8016a4a:	6022      	str	r2, [r4, #0]
 8016a4c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016a50:	6863      	ldr	r3, [r4, #4]
 8016a52:	3301      	adds	r3, #1
 8016a54:	6063      	str	r3, [r4, #4]
 8016a56:	e7e9      	b.n	8016a2c <_sungetc_r+0xc>
 8016a58:	4621      	mov	r1, r4
 8016a5a:	f000 fcaf 	bl	80173bc <__submore>
 8016a5e:	2800      	cmp	r0, #0
 8016a60:	d0f1      	beq.n	8016a46 <_sungetc_r+0x26>
 8016a62:	e7e1      	b.n	8016a28 <_sungetc_r+0x8>
 8016a64:	6921      	ldr	r1, [r4, #16]
 8016a66:	6823      	ldr	r3, [r4, #0]
 8016a68:	b151      	cbz	r1, 8016a80 <_sungetc_r+0x60>
 8016a6a:	4299      	cmp	r1, r3
 8016a6c:	d208      	bcs.n	8016a80 <_sungetc_r+0x60>
 8016a6e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016a72:	42a9      	cmp	r1, r5
 8016a74:	d104      	bne.n	8016a80 <_sungetc_r+0x60>
 8016a76:	3b01      	subs	r3, #1
 8016a78:	3201      	adds	r2, #1
 8016a7a:	6023      	str	r3, [r4, #0]
 8016a7c:	6062      	str	r2, [r4, #4]
 8016a7e:	e7d5      	b.n	8016a2c <_sungetc_r+0xc>
 8016a80:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016a88:	6363      	str	r3, [r4, #52]	; 0x34
 8016a8a:	2303      	movs	r3, #3
 8016a8c:	63a3      	str	r3, [r4, #56]	; 0x38
 8016a8e:	4623      	mov	r3, r4
 8016a90:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016a94:	6023      	str	r3, [r4, #0]
 8016a96:	2301      	movs	r3, #1
 8016a98:	e7dc      	b.n	8016a54 <_sungetc_r+0x34>

08016a9a <__ssrefill_r>:
 8016a9a:	b510      	push	{r4, lr}
 8016a9c:	460c      	mov	r4, r1
 8016a9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016aa0:	b169      	cbz	r1, 8016abe <__ssrefill_r+0x24>
 8016aa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016aa6:	4299      	cmp	r1, r3
 8016aa8:	d001      	beq.n	8016aae <__ssrefill_r+0x14>
 8016aaa:	f7fb fe81 	bl	80127b0 <_free_r>
 8016aae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016ab0:	6063      	str	r3, [r4, #4]
 8016ab2:	2000      	movs	r0, #0
 8016ab4:	6360      	str	r0, [r4, #52]	; 0x34
 8016ab6:	b113      	cbz	r3, 8016abe <__ssrefill_r+0x24>
 8016ab8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016aba:	6023      	str	r3, [r4, #0]
 8016abc:	bd10      	pop	{r4, pc}
 8016abe:	6923      	ldr	r3, [r4, #16]
 8016ac0:	6023      	str	r3, [r4, #0]
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	6063      	str	r3, [r4, #4]
 8016ac6:	89a3      	ldrh	r3, [r4, #12]
 8016ac8:	f043 0320 	orr.w	r3, r3, #32
 8016acc:	81a3      	strh	r3, [r4, #12]
 8016ace:	f04f 30ff 	mov.w	r0, #4294967295
 8016ad2:	e7f3      	b.n	8016abc <__ssrefill_r+0x22>

08016ad4 <__ssvfiscanf_r>:
 8016ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ad8:	460c      	mov	r4, r1
 8016ada:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016ade:	2100      	movs	r1, #0
 8016ae0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016ae4:	49b2      	ldr	r1, [pc, #712]	; (8016db0 <__ssvfiscanf_r+0x2dc>)
 8016ae6:	91a0      	str	r1, [sp, #640]	; 0x280
 8016ae8:	f10d 0804 	add.w	r8, sp, #4
 8016aec:	49b1      	ldr	r1, [pc, #708]	; (8016db4 <__ssvfiscanf_r+0x2e0>)
 8016aee:	4fb2      	ldr	r7, [pc, #712]	; (8016db8 <__ssvfiscanf_r+0x2e4>)
 8016af0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8016dbc <__ssvfiscanf_r+0x2e8>
 8016af4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016af8:	4606      	mov	r6, r0
 8016afa:	91a1      	str	r1, [sp, #644]	; 0x284
 8016afc:	9300      	str	r3, [sp, #0]
 8016afe:	f892 a000 	ldrb.w	sl, [r2]
 8016b02:	f1ba 0f00 	cmp.w	sl, #0
 8016b06:	f000 8151 	beq.w	8016dac <__ssvfiscanf_r+0x2d8>
 8016b0a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8016b0e:	f013 0308 	ands.w	r3, r3, #8
 8016b12:	f102 0501 	add.w	r5, r2, #1
 8016b16:	d019      	beq.n	8016b4c <__ssvfiscanf_r+0x78>
 8016b18:	6863      	ldr	r3, [r4, #4]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	dd0f      	ble.n	8016b3e <__ssvfiscanf_r+0x6a>
 8016b1e:	6823      	ldr	r3, [r4, #0]
 8016b20:	781a      	ldrb	r2, [r3, #0]
 8016b22:	5cba      	ldrb	r2, [r7, r2]
 8016b24:	0712      	lsls	r2, r2, #28
 8016b26:	d401      	bmi.n	8016b2c <__ssvfiscanf_r+0x58>
 8016b28:	462a      	mov	r2, r5
 8016b2a:	e7e8      	b.n	8016afe <__ssvfiscanf_r+0x2a>
 8016b2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016b2e:	3201      	adds	r2, #1
 8016b30:	9245      	str	r2, [sp, #276]	; 0x114
 8016b32:	6862      	ldr	r2, [r4, #4]
 8016b34:	3301      	adds	r3, #1
 8016b36:	3a01      	subs	r2, #1
 8016b38:	6062      	str	r2, [r4, #4]
 8016b3a:	6023      	str	r3, [r4, #0]
 8016b3c:	e7ec      	b.n	8016b18 <__ssvfiscanf_r+0x44>
 8016b3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016b40:	4621      	mov	r1, r4
 8016b42:	4630      	mov	r0, r6
 8016b44:	4798      	blx	r3
 8016b46:	2800      	cmp	r0, #0
 8016b48:	d0e9      	beq.n	8016b1e <__ssvfiscanf_r+0x4a>
 8016b4a:	e7ed      	b.n	8016b28 <__ssvfiscanf_r+0x54>
 8016b4c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8016b50:	f040 8083 	bne.w	8016c5a <__ssvfiscanf_r+0x186>
 8016b54:	9341      	str	r3, [sp, #260]	; 0x104
 8016b56:	9343      	str	r3, [sp, #268]	; 0x10c
 8016b58:	7853      	ldrb	r3, [r2, #1]
 8016b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8016b5c:	bf02      	ittt	eq
 8016b5e:	2310      	moveq	r3, #16
 8016b60:	1c95      	addeq	r5, r2, #2
 8016b62:	9341      	streq	r3, [sp, #260]	; 0x104
 8016b64:	220a      	movs	r2, #10
 8016b66:	46ab      	mov	fp, r5
 8016b68:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8016b6c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8016b70:	2b09      	cmp	r3, #9
 8016b72:	d91d      	bls.n	8016bb0 <__ssvfiscanf_r+0xdc>
 8016b74:	4891      	ldr	r0, [pc, #580]	; (8016dbc <__ssvfiscanf_r+0x2e8>)
 8016b76:	2203      	movs	r2, #3
 8016b78:	f7e9 fb42 	bl	8000200 <memchr>
 8016b7c:	b140      	cbz	r0, 8016b90 <__ssvfiscanf_r+0xbc>
 8016b7e:	2301      	movs	r3, #1
 8016b80:	eba0 0009 	sub.w	r0, r0, r9
 8016b84:	fa03 f000 	lsl.w	r0, r3, r0
 8016b88:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016b8a:	4318      	orrs	r0, r3
 8016b8c:	9041      	str	r0, [sp, #260]	; 0x104
 8016b8e:	465d      	mov	r5, fp
 8016b90:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016b94:	2b78      	cmp	r3, #120	; 0x78
 8016b96:	d806      	bhi.n	8016ba6 <__ssvfiscanf_r+0xd2>
 8016b98:	2b57      	cmp	r3, #87	; 0x57
 8016b9a:	d810      	bhi.n	8016bbe <__ssvfiscanf_r+0xea>
 8016b9c:	2b25      	cmp	r3, #37	; 0x25
 8016b9e:	d05c      	beq.n	8016c5a <__ssvfiscanf_r+0x186>
 8016ba0:	d856      	bhi.n	8016c50 <__ssvfiscanf_r+0x17c>
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d074      	beq.n	8016c90 <__ssvfiscanf_r+0x1bc>
 8016ba6:	2303      	movs	r3, #3
 8016ba8:	9347      	str	r3, [sp, #284]	; 0x11c
 8016baa:	230a      	movs	r3, #10
 8016bac:	9342      	str	r3, [sp, #264]	; 0x108
 8016bae:	e081      	b.n	8016cb4 <__ssvfiscanf_r+0x1e0>
 8016bb0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016bb2:	fb02 1303 	mla	r3, r2, r3, r1
 8016bb6:	3b30      	subs	r3, #48	; 0x30
 8016bb8:	9343      	str	r3, [sp, #268]	; 0x10c
 8016bba:	465d      	mov	r5, fp
 8016bbc:	e7d3      	b.n	8016b66 <__ssvfiscanf_r+0x92>
 8016bbe:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8016bc2:	2a20      	cmp	r2, #32
 8016bc4:	d8ef      	bhi.n	8016ba6 <__ssvfiscanf_r+0xd2>
 8016bc6:	a101      	add	r1, pc, #4	; (adr r1, 8016bcc <__ssvfiscanf_r+0xf8>)
 8016bc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016bcc:	08016c9f 	.word	0x08016c9f
 8016bd0:	08016ba7 	.word	0x08016ba7
 8016bd4:	08016ba7 	.word	0x08016ba7
 8016bd8:	08016cfd 	.word	0x08016cfd
 8016bdc:	08016ba7 	.word	0x08016ba7
 8016be0:	08016ba7 	.word	0x08016ba7
 8016be4:	08016ba7 	.word	0x08016ba7
 8016be8:	08016ba7 	.word	0x08016ba7
 8016bec:	08016ba7 	.word	0x08016ba7
 8016bf0:	08016ba7 	.word	0x08016ba7
 8016bf4:	08016ba7 	.word	0x08016ba7
 8016bf8:	08016d13 	.word	0x08016d13
 8016bfc:	08016ce9 	.word	0x08016ce9
 8016c00:	08016c57 	.word	0x08016c57
 8016c04:	08016c57 	.word	0x08016c57
 8016c08:	08016c57 	.word	0x08016c57
 8016c0c:	08016ba7 	.word	0x08016ba7
 8016c10:	08016ced 	.word	0x08016ced
 8016c14:	08016ba7 	.word	0x08016ba7
 8016c18:	08016ba7 	.word	0x08016ba7
 8016c1c:	08016ba7 	.word	0x08016ba7
 8016c20:	08016ba7 	.word	0x08016ba7
 8016c24:	08016d23 	.word	0x08016d23
 8016c28:	08016cf5 	.word	0x08016cf5
 8016c2c:	08016c97 	.word	0x08016c97
 8016c30:	08016ba7 	.word	0x08016ba7
 8016c34:	08016ba7 	.word	0x08016ba7
 8016c38:	08016d1f 	.word	0x08016d1f
 8016c3c:	08016ba7 	.word	0x08016ba7
 8016c40:	08016ce9 	.word	0x08016ce9
 8016c44:	08016ba7 	.word	0x08016ba7
 8016c48:	08016ba7 	.word	0x08016ba7
 8016c4c:	08016c9f 	.word	0x08016c9f
 8016c50:	3b45      	subs	r3, #69	; 0x45
 8016c52:	2b02      	cmp	r3, #2
 8016c54:	d8a7      	bhi.n	8016ba6 <__ssvfiscanf_r+0xd2>
 8016c56:	2305      	movs	r3, #5
 8016c58:	e02b      	b.n	8016cb2 <__ssvfiscanf_r+0x1de>
 8016c5a:	6863      	ldr	r3, [r4, #4]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	dd0d      	ble.n	8016c7c <__ssvfiscanf_r+0x1a8>
 8016c60:	6823      	ldr	r3, [r4, #0]
 8016c62:	781a      	ldrb	r2, [r3, #0]
 8016c64:	4552      	cmp	r2, sl
 8016c66:	f040 80a1 	bne.w	8016dac <__ssvfiscanf_r+0x2d8>
 8016c6a:	3301      	adds	r3, #1
 8016c6c:	6862      	ldr	r2, [r4, #4]
 8016c6e:	6023      	str	r3, [r4, #0]
 8016c70:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016c72:	3a01      	subs	r2, #1
 8016c74:	3301      	adds	r3, #1
 8016c76:	6062      	str	r2, [r4, #4]
 8016c78:	9345      	str	r3, [sp, #276]	; 0x114
 8016c7a:	e755      	b.n	8016b28 <__ssvfiscanf_r+0x54>
 8016c7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016c7e:	4621      	mov	r1, r4
 8016c80:	4630      	mov	r0, r6
 8016c82:	4798      	blx	r3
 8016c84:	2800      	cmp	r0, #0
 8016c86:	d0eb      	beq.n	8016c60 <__ssvfiscanf_r+0x18c>
 8016c88:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016c8a:	2800      	cmp	r0, #0
 8016c8c:	f040 8084 	bne.w	8016d98 <__ssvfiscanf_r+0x2c4>
 8016c90:	f04f 30ff 	mov.w	r0, #4294967295
 8016c94:	e086      	b.n	8016da4 <__ssvfiscanf_r+0x2d0>
 8016c96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016c98:	f042 0220 	orr.w	r2, r2, #32
 8016c9c:	9241      	str	r2, [sp, #260]	; 0x104
 8016c9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016ca4:	9241      	str	r2, [sp, #260]	; 0x104
 8016ca6:	2210      	movs	r2, #16
 8016ca8:	2b6f      	cmp	r3, #111	; 0x6f
 8016caa:	9242      	str	r2, [sp, #264]	; 0x108
 8016cac:	bf34      	ite	cc
 8016cae:	2303      	movcc	r3, #3
 8016cb0:	2304      	movcs	r3, #4
 8016cb2:	9347      	str	r3, [sp, #284]	; 0x11c
 8016cb4:	6863      	ldr	r3, [r4, #4]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	dd41      	ble.n	8016d3e <__ssvfiscanf_r+0x26a>
 8016cba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016cbc:	0659      	lsls	r1, r3, #25
 8016cbe:	d404      	bmi.n	8016cca <__ssvfiscanf_r+0x1f6>
 8016cc0:	6823      	ldr	r3, [r4, #0]
 8016cc2:	781a      	ldrb	r2, [r3, #0]
 8016cc4:	5cba      	ldrb	r2, [r7, r2]
 8016cc6:	0712      	lsls	r2, r2, #28
 8016cc8:	d440      	bmi.n	8016d4c <__ssvfiscanf_r+0x278>
 8016cca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016ccc:	2b02      	cmp	r3, #2
 8016cce:	dc4f      	bgt.n	8016d70 <__ssvfiscanf_r+0x29c>
 8016cd0:	466b      	mov	r3, sp
 8016cd2:	4622      	mov	r2, r4
 8016cd4:	a941      	add	r1, sp, #260	; 0x104
 8016cd6:	4630      	mov	r0, r6
 8016cd8:	f000 f9ce 	bl	8017078 <_scanf_chars>
 8016cdc:	2801      	cmp	r0, #1
 8016cde:	d065      	beq.n	8016dac <__ssvfiscanf_r+0x2d8>
 8016ce0:	2802      	cmp	r0, #2
 8016ce2:	f47f af21 	bne.w	8016b28 <__ssvfiscanf_r+0x54>
 8016ce6:	e7cf      	b.n	8016c88 <__ssvfiscanf_r+0x1b4>
 8016ce8:	220a      	movs	r2, #10
 8016cea:	e7dd      	b.n	8016ca8 <__ssvfiscanf_r+0x1d4>
 8016cec:	2300      	movs	r3, #0
 8016cee:	9342      	str	r3, [sp, #264]	; 0x108
 8016cf0:	2303      	movs	r3, #3
 8016cf2:	e7de      	b.n	8016cb2 <__ssvfiscanf_r+0x1de>
 8016cf4:	2308      	movs	r3, #8
 8016cf6:	9342      	str	r3, [sp, #264]	; 0x108
 8016cf8:	2304      	movs	r3, #4
 8016cfa:	e7da      	b.n	8016cb2 <__ssvfiscanf_r+0x1de>
 8016cfc:	4629      	mov	r1, r5
 8016cfe:	4640      	mov	r0, r8
 8016d00:	f000 fb22 	bl	8017348 <__sccl>
 8016d04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d0a:	9341      	str	r3, [sp, #260]	; 0x104
 8016d0c:	4605      	mov	r5, r0
 8016d0e:	2301      	movs	r3, #1
 8016d10:	e7cf      	b.n	8016cb2 <__ssvfiscanf_r+0x1de>
 8016d12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d18:	9341      	str	r3, [sp, #260]	; 0x104
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	e7c9      	b.n	8016cb2 <__ssvfiscanf_r+0x1de>
 8016d1e:	2302      	movs	r3, #2
 8016d20:	e7c7      	b.n	8016cb2 <__ssvfiscanf_r+0x1de>
 8016d22:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016d24:	06c3      	lsls	r3, r0, #27
 8016d26:	f53f aeff 	bmi.w	8016b28 <__ssvfiscanf_r+0x54>
 8016d2a:	9b00      	ldr	r3, [sp, #0]
 8016d2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016d2e:	1d19      	adds	r1, r3, #4
 8016d30:	9100      	str	r1, [sp, #0]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	07c0      	lsls	r0, r0, #31
 8016d36:	bf4c      	ite	mi
 8016d38:	801a      	strhmi	r2, [r3, #0]
 8016d3a:	601a      	strpl	r2, [r3, #0]
 8016d3c:	e6f4      	b.n	8016b28 <__ssvfiscanf_r+0x54>
 8016d3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016d40:	4621      	mov	r1, r4
 8016d42:	4630      	mov	r0, r6
 8016d44:	4798      	blx	r3
 8016d46:	2800      	cmp	r0, #0
 8016d48:	d0b7      	beq.n	8016cba <__ssvfiscanf_r+0x1e6>
 8016d4a:	e79d      	b.n	8016c88 <__ssvfiscanf_r+0x1b4>
 8016d4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016d4e:	3201      	adds	r2, #1
 8016d50:	9245      	str	r2, [sp, #276]	; 0x114
 8016d52:	6862      	ldr	r2, [r4, #4]
 8016d54:	3a01      	subs	r2, #1
 8016d56:	2a00      	cmp	r2, #0
 8016d58:	6062      	str	r2, [r4, #4]
 8016d5a:	dd02      	ble.n	8016d62 <__ssvfiscanf_r+0x28e>
 8016d5c:	3301      	adds	r3, #1
 8016d5e:	6023      	str	r3, [r4, #0]
 8016d60:	e7ae      	b.n	8016cc0 <__ssvfiscanf_r+0x1ec>
 8016d62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016d64:	4621      	mov	r1, r4
 8016d66:	4630      	mov	r0, r6
 8016d68:	4798      	blx	r3
 8016d6a:	2800      	cmp	r0, #0
 8016d6c:	d0a8      	beq.n	8016cc0 <__ssvfiscanf_r+0x1ec>
 8016d6e:	e78b      	b.n	8016c88 <__ssvfiscanf_r+0x1b4>
 8016d70:	2b04      	cmp	r3, #4
 8016d72:	dc06      	bgt.n	8016d82 <__ssvfiscanf_r+0x2ae>
 8016d74:	466b      	mov	r3, sp
 8016d76:	4622      	mov	r2, r4
 8016d78:	a941      	add	r1, sp, #260	; 0x104
 8016d7a:	4630      	mov	r0, r6
 8016d7c:	f000 f9d4 	bl	8017128 <_scanf_i>
 8016d80:	e7ac      	b.n	8016cdc <__ssvfiscanf_r+0x208>
 8016d82:	4b0f      	ldr	r3, [pc, #60]	; (8016dc0 <__ssvfiscanf_r+0x2ec>)
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	f43f aecf 	beq.w	8016b28 <__ssvfiscanf_r+0x54>
 8016d8a:	466b      	mov	r3, sp
 8016d8c:	4622      	mov	r2, r4
 8016d8e:	a941      	add	r1, sp, #260	; 0x104
 8016d90:	4630      	mov	r0, r6
 8016d92:	f7fc fa21 	bl	80131d8 <_scanf_float>
 8016d96:	e7a1      	b.n	8016cdc <__ssvfiscanf_r+0x208>
 8016d98:	89a3      	ldrh	r3, [r4, #12]
 8016d9a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016d9e:	bf18      	it	ne
 8016da0:	f04f 30ff 	movne.w	r0, #4294967295
 8016da4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8016da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dac:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016dae:	e7f9      	b.n	8016da4 <__ssvfiscanf_r+0x2d0>
 8016db0:	08016a21 	.word	0x08016a21
 8016db4:	08016a9b 	.word	0x08016a9b
 8016db8:	08017df5 	.word	0x08017df5
 8016dbc:	0801816a 	.word	0x0801816a
 8016dc0:	080131d9 	.word	0x080131d9

08016dc4 <__sfputc_r>:
 8016dc4:	6893      	ldr	r3, [r2, #8]
 8016dc6:	3b01      	subs	r3, #1
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	b410      	push	{r4}
 8016dcc:	6093      	str	r3, [r2, #8]
 8016dce:	da08      	bge.n	8016de2 <__sfputc_r+0x1e>
 8016dd0:	6994      	ldr	r4, [r2, #24]
 8016dd2:	42a3      	cmp	r3, r4
 8016dd4:	db01      	blt.n	8016dda <__sfputc_r+0x16>
 8016dd6:	290a      	cmp	r1, #10
 8016dd8:	d103      	bne.n	8016de2 <__sfputc_r+0x1e>
 8016dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016dde:	f000 bb27 	b.w	8017430 <__swbuf_r>
 8016de2:	6813      	ldr	r3, [r2, #0]
 8016de4:	1c58      	adds	r0, r3, #1
 8016de6:	6010      	str	r0, [r2, #0]
 8016de8:	7019      	strb	r1, [r3, #0]
 8016dea:	4608      	mov	r0, r1
 8016dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016df0:	4770      	bx	lr

08016df2 <__sfputs_r>:
 8016df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016df4:	4606      	mov	r6, r0
 8016df6:	460f      	mov	r7, r1
 8016df8:	4614      	mov	r4, r2
 8016dfa:	18d5      	adds	r5, r2, r3
 8016dfc:	42ac      	cmp	r4, r5
 8016dfe:	d101      	bne.n	8016e04 <__sfputs_r+0x12>
 8016e00:	2000      	movs	r0, #0
 8016e02:	e007      	b.n	8016e14 <__sfputs_r+0x22>
 8016e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e08:	463a      	mov	r2, r7
 8016e0a:	4630      	mov	r0, r6
 8016e0c:	f7ff ffda 	bl	8016dc4 <__sfputc_r>
 8016e10:	1c43      	adds	r3, r0, #1
 8016e12:	d1f3      	bne.n	8016dfc <__sfputs_r+0xa>
 8016e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016e18 <_vfiprintf_r>:
 8016e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e1c:	460d      	mov	r5, r1
 8016e1e:	b09d      	sub	sp, #116	; 0x74
 8016e20:	4614      	mov	r4, r2
 8016e22:	4698      	mov	r8, r3
 8016e24:	4606      	mov	r6, r0
 8016e26:	b118      	cbz	r0, 8016e30 <_vfiprintf_r+0x18>
 8016e28:	6983      	ldr	r3, [r0, #24]
 8016e2a:	b90b      	cbnz	r3, 8016e30 <_vfiprintf_r+0x18>
 8016e2c:	f7fb fbba 	bl	80125a4 <__sinit>
 8016e30:	4b89      	ldr	r3, [pc, #548]	; (8017058 <_vfiprintf_r+0x240>)
 8016e32:	429d      	cmp	r5, r3
 8016e34:	d11b      	bne.n	8016e6e <_vfiprintf_r+0x56>
 8016e36:	6875      	ldr	r5, [r6, #4]
 8016e38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016e3a:	07d9      	lsls	r1, r3, #31
 8016e3c:	d405      	bmi.n	8016e4a <_vfiprintf_r+0x32>
 8016e3e:	89ab      	ldrh	r3, [r5, #12]
 8016e40:	059a      	lsls	r2, r3, #22
 8016e42:	d402      	bmi.n	8016e4a <_vfiprintf_r+0x32>
 8016e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016e46:	f7fb fc70 	bl	801272a <__retarget_lock_acquire_recursive>
 8016e4a:	89ab      	ldrh	r3, [r5, #12]
 8016e4c:	071b      	lsls	r3, r3, #28
 8016e4e:	d501      	bpl.n	8016e54 <_vfiprintf_r+0x3c>
 8016e50:	692b      	ldr	r3, [r5, #16]
 8016e52:	b9eb      	cbnz	r3, 8016e90 <_vfiprintf_r+0x78>
 8016e54:	4629      	mov	r1, r5
 8016e56:	4630      	mov	r0, r6
 8016e58:	f000 fb4a 	bl	80174f0 <__swsetup_r>
 8016e5c:	b1c0      	cbz	r0, 8016e90 <_vfiprintf_r+0x78>
 8016e5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016e60:	07dc      	lsls	r4, r3, #31
 8016e62:	d50e      	bpl.n	8016e82 <_vfiprintf_r+0x6a>
 8016e64:	f04f 30ff 	mov.w	r0, #4294967295
 8016e68:	b01d      	add	sp, #116	; 0x74
 8016e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e6e:	4b7b      	ldr	r3, [pc, #492]	; (801705c <_vfiprintf_r+0x244>)
 8016e70:	429d      	cmp	r5, r3
 8016e72:	d101      	bne.n	8016e78 <_vfiprintf_r+0x60>
 8016e74:	68b5      	ldr	r5, [r6, #8]
 8016e76:	e7df      	b.n	8016e38 <_vfiprintf_r+0x20>
 8016e78:	4b79      	ldr	r3, [pc, #484]	; (8017060 <_vfiprintf_r+0x248>)
 8016e7a:	429d      	cmp	r5, r3
 8016e7c:	bf08      	it	eq
 8016e7e:	68f5      	ldreq	r5, [r6, #12]
 8016e80:	e7da      	b.n	8016e38 <_vfiprintf_r+0x20>
 8016e82:	89ab      	ldrh	r3, [r5, #12]
 8016e84:	0598      	lsls	r0, r3, #22
 8016e86:	d4ed      	bmi.n	8016e64 <_vfiprintf_r+0x4c>
 8016e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016e8a:	f7fb fc4f 	bl	801272c <__retarget_lock_release_recursive>
 8016e8e:	e7e9      	b.n	8016e64 <_vfiprintf_r+0x4c>
 8016e90:	2300      	movs	r3, #0
 8016e92:	9309      	str	r3, [sp, #36]	; 0x24
 8016e94:	2320      	movs	r3, #32
 8016e96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e9e:	2330      	movs	r3, #48	; 0x30
 8016ea0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017064 <_vfiprintf_r+0x24c>
 8016ea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016ea8:	f04f 0901 	mov.w	r9, #1
 8016eac:	4623      	mov	r3, r4
 8016eae:	469a      	mov	sl, r3
 8016eb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016eb4:	b10a      	cbz	r2, 8016eba <_vfiprintf_r+0xa2>
 8016eb6:	2a25      	cmp	r2, #37	; 0x25
 8016eb8:	d1f9      	bne.n	8016eae <_vfiprintf_r+0x96>
 8016eba:	ebba 0b04 	subs.w	fp, sl, r4
 8016ebe:	d00b      	beq.n	8016ed8 <_vfiprintf_r+0xc0>
 8016ec0:	465b      	mov	r3, fp
 8016ec2:	4622      	mov	r2, r4
 8016ec4:	4629      	mov	r1, r5
 8016ec6:	4630      	mov	r0, r6
 8016ec8:	f7ff ff93 	bl	8016df2 <__sfputs_r>
 8016ecc:	3001      	adds	r0, #1
 8016ece:	f000 80aa 	beq.w	8017026 <_vfiprintf_r+0x20e>
 8016ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ed4:	445a      	add	r2, fp
 8016ed6:	9209      	str	r2, [sp, #36]	; 0x24
 8016ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	f000 80a2 	beq.w	8017026 <_vfiprintf_r+0x20e>
 8016ee2:	2300      	movs	r3, #0
 8016ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8016ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016eec:	f10a 0a01 	add.w	sl, sl, #1
 8016ef0:	9304      	str	r3, [sp, #16]
 8016ef2:	9307      	str	r3, [sp, #28]
 8016ef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016ef8:	931a      	str	r3, [sp, #104]	; 0x68
 8016efa:	4654      	mov	r4, sl
 8016efc:	2205      	movs	r2, #5
 8016efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f02:	4858      	ldr	r0, [pc, #352]	; (8017064 <_vfiprintf_r+0x24c>)
 8016f04:	f7e9 f97c 	bl	8000200 <memchr>
 8016f08:	9a04      	ldr	r2, [sp, #16]
 8016f0a:	b9d8      	cbnz	r0, 8016f44 <_vfiprintf_r+0x12c>
 8016f0c:	06d1      	lsls	r1, r2, #27
 8016f0e:	bf44      	itt	mi
 8016f10:	2320      	movmi	r3, #32
 8016f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016f16:	0713      	lsls	r3, r2, #28
 8016f18:	bf44      	itt	mi
 8016f1a:	232b      	movmi	r3, #43	; 0x2b
 8016f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016f20:	f89a 3000 	ldrb.w	r3, [sl]
 8016f24:	2b2a      	cmp	r3, #42	; 0x2a
 8016f26:	d015      	beq.n	8016f54 <_vfiprintf_r+0x13c>
 8016f28:	9a07      	ldr	r2, [sp, #28]
 8016f2a:	4654      	mov	r4, sl
 8016f2c:	2000      	movs	r0, #0
 8016f2e:	f04f 0c0a 	mov.w	ip, #10
 8016f32:	4621      	mov	r1, r4
 8016f34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016f38:	3b30      	subs	r3, #48	; 0x30
 8016f3a:	2b09      	cmp	r3, #9
 8016f3c:	d94e      	bls.n	8016fdc <_vfiprintf_r+0x1c4>
 8016f3e:	b1b0      	cbz	r0, 8016f6e <_vfiprintf_r+0x156>
 8016f40:	9207      	str	r2, [sp, #28]
 8016f42:	e014      	b.n	8016f6e <_vfiprintf_r+0x156>
 8016f44:	eba0 0308 	sub.w	r3, r0, r8
 8016f48:	fa09 f303 	lsl.w	r3, r9, r3
 8016f4c:	4313      	orrs	r3, r2
 8016f4e:	9304      	str	r3, [sp, #16]
 8016f50:	46a2      	mov	sl, r4
 8016f52:	e7d2      	b.n	8016efa <_vfiprintf_r+0xe2>
 8016f54:	9b03      	ldr	r3, [sp, #12]
 8016f56:	1d19      	adds	r1, r3, #4
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	9103      	str	r1, [sp, #12]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	bfbb      	ittet	lt
 8016f60:	425b      	neglt	r3, r3
 8016f62:	f042 0202 	orrlt.w	r2, r2, #2
 8016f66:	9307      	strge	r3, [sp, #28]
 8016f68:	9307      	strlt	r3, [sp, #28]
 8016f6a:	bfb8      	it	lt
 8016f6c:	9204      	strlt	r2, [sp, #16]
 8016f6e:	7823      	ldrb	r3, [r4, #0]
 8016f70:	2b2e      	cmp	r3, #46	; 0x2e
 8016f72:	d10c      	bne.n	8016f8e <_vfiprintf_r+0x176>
 8016f74:	7863      	ldrb	r3, [r4, #1]
 8016f76:	2b2a      	cmp	r3, #42	; 0x2a
 8016f78:	d135      	bne.n	8016fe6 <_vfiprintf_r+0x1ce>
 8016f7a:	9b03      	ldr	r3, [sp, #12]
 8016f7c:	1d1a      	adds	r2, r3, #4
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	9203      	str	r2, [sp, #12]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	bfb8      	it	lt
 8016f86:	f04f 33ff 	movlt.w	r3, #4294967295
 8016f8a:	3402      	adds	r4, #2
 8016f8c:	9305      	str	r3, [sp, #20]
 8016f8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017074 <_vfiprintf_r+0x25c>
 8016f92:	7821      	ldrb	r1, [r4, #0]
 8016f94:	2203      	movs	r2, #3
 8016f96:	4650      	mov	r0, sl
 8016f98:	f7e9 f932 	bl	8000200 <memchr>
 8016f9c:	b140      	cbz	r0, 8016fb0 <_vfiprintf_r+0x198>
 8016f9e:	2340      	movs	r3, #64	; 0x40
 8016fa0:	eba0 000a 	sub.w	r0, r0, sl
 8016fa4:	fa03 f000 	lsl.w	r0, r3, r0
 8016fa8:	9b04      	ldr	r3, [sp, #16]
 8016faa:	4303      	orrs	r3, r0
 8016fac:	3401      	adds	r4, #1
 8016fae:	9304      	str	r3, [sp, #16]
 8016fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016fb4:	482c      	ldr	r0, [pc, #176]	; (8017068 <_vfiprintf_r+0x250>)
 8016fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016fba:	2206      	movs	r2, #6
 8016fbc:	f7e9 f920 	bl	8000200 <memchr>
 8016fc0:	2800      	cmp	r0, #0
 8016fc2:	d03f      	beq.n	8017044 <_vfiprintf_r+0x22c>
 8016fc4:	4b29      	ldr	r3, [pc, #164]	; (801706c <_vfiprintf_r+0x254>)
 8016fc6:	bb1b      	cbnz	r3, 8017010 <_vfiprintf_r+0x1f8>
 8016fc8:	9b03      	ldr	r3, [sp, #12]
 8016fca:	3307      	adds	r3, #7
 8016fcc:	f023 0307 	bic.w	r3, r3, #7
 8016fd0:	3308      	adds	r3, #8
 8016fd2:	9303      	str	r3, [sp, #12]
 8016fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fd6:	443b      	add	r3, r7
 8016fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8016fda:	e767      	b.n	8016eac <_vfiprintf_r+0x94>
 8016fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8016fe0:	460c      	mov	r4, r1
 8016fe2:	2001      	movs	r0, #1
 8016fe4:	e7a5      	b.n	8016f32 <_vfiprintf_r+0x11a>
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	3401      	adds	r4, #1
 8016fea:	9305      	str	r3, [sp, #20]
 8016fec:	4619      	mov	r1, r3
 8016fee:	f04f 0c0a 	mov.w	ip, #10
 8016ff2:	4620      	mov	r0, r4
 8016ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ff8:	3a30      	subs	r2, #48	; 0x30
 8016ffa:	2a09      	cmp	r2, #9
 8016ffc:	d903      	bls.n	8017006 <_vfiprintf_r+0x1ee>
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d0c5      	beq.n	8016f8e <_vfiprintf_r+0x176>
 8017002:	9105      	str	r1, [sp, #20]
 8017004:	e7c3      	b.n	8016f8e <_vfiprintf_r+0x176>
 8017006:	fb0c 2101 	mla	r1, ip, r1, r2
 801700a:	4604      	mov	r4, r0
 801700c:	2301      	movs	r3, #1
 801700e:	e7f0      	b.n	8016ff2 <_vfiprintf_r+0x1da>
 8017010:	ab03      	add	r3, sp, #12
 8017012:	9300      	str	r3, [sp, #0]
 8017014:	462a      	mov	r2, r5
 8017016:	4b16      	ldr	r3, [pc, #88]	; (8017070 <_vfiprintf_r+0x258>)
 8017018:	a904      	add	r1, sp, #16
 801701a:	4630      	mov	r0, r6
 801701c:	f7fb fd12 	bl	8012a44 <_printf_float>
 8017020:	4607      	mov	r7, r0
 8017022:	1c78      	adds	r0, r7, #1
 8017024:	d1d6      	bne.n	8016fd4 <_vfiprintf_r+0x1bc>
 8017026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017028:	07d9      	lsls	r1, r3, #31
 801702a:	d405      	bmi.n	8017038 <_vfiprintf_r+0x220>
 801702c:	89ab      	ldrh	r3, [r5, #12]
 801702e:	059a      	lsls	r2, r3, #22
 8017030:	d402      	bmi.n	8017038 <_vfiprintf_r+0x220>
 8017032:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017034:	f7fb fb7a 	bl	801272c <__retarget_lock_release_recursive>
 8017038:	89ab      	ldrh	r3, [r5, #12]
 801703a:	065b      	lsls	r3, r3, #25
 801703c:	f53f af12 	bmi.w	8016e64 <_vfiprintf_r+0x4c>
 8017040:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017042:	e711      	b.n	8016e68 <_vfiprintf_r+0x50>
 8017044:	ab03      	add	r3, sp, #12
 8017046:	9300      	str	r3, [sp, #0]
 8017048:	462a      	mov	r2, r5
 801704a:	4b09      	ldr	r3, [pc, #36]	; (8017070 <_vfiprintf_r+0x258>)
 801704c:	a904      	add	r1, sp, #16
 801704e:	4630      	mov	r0, r6
 8017050:	f7fb ff9c 	bl	8012f8c <_printf_i>
 8017054:	e7e4      	b.n	8017020 <_vfiprintf_r+0x208>
 8017056:	bf00      	nop
 8017058:	08017ce8 	.word	0x08017ce8
 801705c:	08017d08 	.word	0x08017d08
 8017060:	08017cc8 	.word	0x08017cc8
 8017064:	08018164 	.word	0x08018164
 8017068:	0801816e 	.word	0x0801816e
 801706c:	08012a45 	.word	0x08012a45
 8017070:	08016df3 	.word	0x08016df3
 8017074:	0801816a 	.word	0x0801816a

08017078 <_scanf_chars>:
 8017078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801707c:	4615      	mov	r5, r2
 801707e:	688a      	ldr	r2, [r1, #8]
 8017080:	4680      	mov	r8, r0
 8017082:	460c      	mov	r4, r1
 8017084:	b932      	cbnz	r2, 8017094 <_scanf_chars+0x1c>
 8017086:	698a      	ldr	r2, [r1, #24]
 8017088:	2a00      	cmp	r2, #0
 801708a:	bf0c      	ite	eq
 801708c:	2201      	moveq	r2, #1
 801708e:	f04f 32ff 	movne.w	r2, #4294967295
 8017092:	608a      	str	r2, [r1, #8]
 8017094:	6822      	ldr	r2, [r4, #0]
 8017096:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8017124 <_scanf_chars+0xac>
 801709a:	06d1      	lsls	r1, r2, #27
 801709c:	bf5f      	itttt	pl
 801709e:	681a      	ldrpl	r2, [r3, #0]
 80170a0:	1d11      	addpl	r1, r2, #4
 80170a2:	6019      	strpl	r1, [r3, #0]
 80170a4:	6816      	ldrpl	r6, [r2, #0]
 80170a6:	2700      	movs	r7, #0
 80170a8:	69a0      	ldr	r0, [r4, #24]
 80170aa:	b188      	cbz	r0, 80170d0 <_scanf_chars+0x58>
 80170ac:	2801      	cmp	r0, #1
 80170ae:	d107      	bne.n	80170c0 <_scanf_chars+0x48>
 80170b0:	682b      	ldr	r3, [r5, #0]
 80170b2:	781a      	ldrb	r2, [r3, #0]
 80170b4:	6963      	ldr	r3, [r4, #20]
 80170b6:	5c9b      	ldrb	r3, [r3, r2]
 80170b8:	b953      	cbnz	r3, 80170d0 <_scanf_chars+0x58>
 80170ba:	bb27      	cbnz	r7, 8017106 <_scanf_chars+0x8e>
 80170bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170c0:	2802      	cmp	r0, #2
 80170c2:	d120      	bne.n	8017106 <_scanf_chars+0x8e>
 80170c4:	682b      	ldr	r3, [r5, #0]
 80170c6:	781b      	ldrb	r3, [r3, #0]
 80170c8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80170cc:	071b      	lsls	r3, r3, #28
 80170ce:	d41a      	bmi.n	8017106 <_scanf_chars+0x8e>
 80170d0:	6823      	ldr	r3, [r4, #0]
 80170d2:	06da      	lsls	r2, r3, #27
 80170d4:	bf5e      	ittt	pl
 80170d6:	682b      	ldrpl	r3, [r5, #0]
 80170d8:	781b      	ldrbpl	r3, [r3, #0]
 80170da:	f806 3b01 	strbpl.w	r3, [r6], #1
 80170de:	682a      	ldr	r2, [r5, #0]
 80170e0:	686b      	ldr	r3, [r5, #4]
 80170e2:	3201      	adds	r2, #1
 80170e4:	602a      	str	r2, [r5, #0]
 80170e6:	68a2      	ldr	r2, [r4, #8]
 80170e8:	3b01      	subs	r3, #1
 80170ea:	3a01      	subs	r2, #1
 80170ec:	606b      	str	r3, [r5, #4]
 80170ee:	3701      	adds	r7, #1
 80170f0:	60a2      	str	r2, [r4, #8]
 80170f2:	b142      	cbz	r2, 8017106 <_scanf_chars+0x8e>
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	dcd7      	bgt.n	80170a8 <_scanf_chars+0x30>
 80170f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80170fc:	4629      	mov	r1, r5
 80170fe:	4640      	mov	r0, r8
 8017100:	4798      	blx	r3
 8017102:	2800      	cmp	r0, #0
 8017104:	d0d0      	beq.n	80170a8 <_scanf_chars+0x30>
 8017106:	6823      	ldr	r3, [r4, #0]
 8017108:	f013 0310 	ands.w	r3, r3, #16
 801710c:	d105      	bne.n	801711a <_scanf_chars+0xa2>
 801710e:	68e2      	ldr	r2, [r4, #12]
 8017110:	3201      	adds	r2, #1
 8017112:	60e2      	str	r2, [r4, #12]
 8017114:	69a2      	ldr	r2, [r4, #24]
 8017116:	b102      	cbz	r2, 801711a <_scanf_chars+0xa2>
 8017118:	7033      	strb	r3, [r6, #0]
 801711a:	6923      	ldr	r3, [r4, #16]
 801711c:	441f      	add	r7, r3
 801711e:	6127      	str	r7, [r4, #16]
 8017120:	2000      	movs	r0, #0
 8017122:	e7cb      	b.n	80170bc <_scanf_chars+0x44>
 8017124:	08017df5 	.word	0x08017df5

08017128 <_scanf_i>:
 8017128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801712c:	4698      	mov	r8, r3
 801712e:	4b74      	ldr	r3, [pc, #464]	; (8017300 <_scanf_i+0x1d8>)
 8017130:	460c      	mov	r4, r1
 8017132:	4682      	mov	sl, r0
 8017134:	4616      	mov	r6, r2
 8017136:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801713a:	b087      	sub	sp, #28
 801713c:	ab03      	add	r3, sp, #12
 801713e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017142:	4b70      	ldr	r3, [pc, #448]	; (8017304 <_scanf_i+0x1dc>)
 8017144:	69a1      	ldr	r1, [r4, #24]
 8017146:	4a70      	ldr	r2, [pc, #448]	; (8017308 <_scanf_i+0x1e0>)
 8017148:	2903      	cmp	r1, #3
 801714a:	bf18      	it	ne
 801714c:	461a      	movne	r2, r3
 801714e:	68a3      	ldr	r3, [r4, #8]
 8017150:	9201      	str	r2, [sp, #4]
 8017152:	1e5a      	subs	r2, r3, #1
 8017154:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017158:	bf88      	it	hi
 801715a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801715e:	4627      	mov	r7, r4
 8017160:	bf82      	ittt	hi
 8017162:	eb03 0905 	addhi.w	r9, r3, r5
 8017166:	f240 135d 	movwhi	r3, #349	; 0x15d
 801716a:	60a3      	strhi	r3, [r4, #8]
 801716c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017170:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017174:	bf98      	it	ls
 8017176:	f04f 0900 	movls.w	r9, #0
 801717a:	6023      	str	r3, [r4, #0]
 801717c:	463d      	mov	r5, r7
 801717e:	f04f 0b00 	mov.w	fp, #0
 8017182:	6831      	ldr	r1, [r6, #0]
 8017184:	ab03      	add	r3, sp, #12
 8017186:	7809      	ldrb	r1, [r1, #0]
 8017188:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801718c:	2202      	movs	r2, #2
 801718e:	f7e9 f837 	bl	8000200 <memchr>
 8017192:	b328      	cbz	r0, 80171e0 <_scanf_i+0xb8>
 8017194:	f1bb 0f01 	cmp.w	fp, #1
 8017198:	d159      	bne.n	801724e <_scanf_i+0x126>
 801719a:	6862      	ldr	r2, [r4, #4]
 801719c:	b92a      	cbnz	r2, 80171aa <_scanf_i+0x82>
 801719e:	6822      	ldr	r2, [r4, #0]
 80171a0:	2308      	movs	r3, #8
 80171a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80171a6:	6063      	str	r3, [r4, #4]
 80171a8:	6022      	str	r2, [r4, #0]
 80171aa:	6822      	ldr	r2, [r4, #0]
 80171ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80171b0:	6022      	str	r2, [r4, #0]
 80171b2:	68a2      	ldr	r2, [r4, #8]
 80171b4:	1e51      	subs	r1, r2, #1
 80171b6:	60a1      	str	r1, [r4, #8]
 80171b8:	b192      	cbz	r2, 80171e0 <_scanf_i+0xb8>
 80171ba:	6832      	ldr	r2, [r6, #0]
 80171bc:	1c51      	adds	r1, r2, #1
 80171be:	6031      	str	r1, [r6, #0]
 80171c0:	7812      	ldrb	r2, [r2, #0]
 80171c2:	f805 2b01 	strb.w	r2, [r5], #1
 80171c6:	6872      	ldr	r2, [r6, #4]
 80171c8:	3a01      	subs	r2, #1
 80171ca:	2a00      	cmp	r2, #0
 80171cc:	6072      	str	r2, [r6, #4]
 80171ce:	dc07      	bgt.n	80171e0 <_scanf_i+0xb8>
 80171d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80171d4:	4631      	mov	r1, r6
 80171d6:	4650      	mov	r0, sl
 80171d8:	4790      	blx	r2
 80171da:	2800      	cmp	r0, #0
 80171dc:	f040 8085 	bne.w	80172ea <_scanf_i+0x1c2>
 80171e0:	f10b 0b01 	add.w	fp, fp, #1
 80171e4:	f1bb 0f03 	cmp.w	fp, #3
 80171e8:	d1cb      	bne.n	8017182 <_scanf_i+0x5a>
 80171ea:	6863      	ldr	r3, [r4, #4]
 80171ec:	b90b      	cbnz	r3, 80171f2 <_scanf_i+0xca>
 80171ee:	230a      	movs	r3, #10
 80171f0:	6063      	str	r3, [r4, #4]
 80171f2:	6863      	ldr	r3, [r4, #4]
 80171f4:	4945      	ldr	r1, [pc, #276]	; (801730c <_scanf_i+0x1e4>)
 80171f6:	6960      	ldr	r0, [r4, #20]
 80171f8:	1ac9      	subs	r1, r1, r3
 80171fa:	f000 f8a5 	bl	8017348 <__sccl>
 80171fe:	f04f 0b00 	mov.w	fp, #0
 8017202:	68a3      	ldr	r3, [r4, #8]
 8017204:	6822      	ldr	r2, [r4, #0]
 8017206:	2b00      	cmp	r3, #0
 8017208:	d03d      	beq.n	8017286 <_scanf_i+0x15e>
 801720a:	6831      	ldr	r1, [r6, #0]
 801720c:	6960      	ldr	r0, [r4, #20]
 801720e:	f891 c000 	ldrb.w	ip, [r1]
 8017212:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017216:	2800      	cmp	r0, #0
 8017218:	d035      	beq.n	8017286 <_scanf_i+0x15e>
 801721a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801721e:	d124      	bne.n	801726a <_scanf_i+0x142>
 8017220:	0510      	lsls	r0, r2, #20
 8017222:	d522      	bpl.n	801726a <_scanf_i+0x142>
 8017224:	f10b 0b01 	add.w	fp, fp, #1
 8017228:	f1b9 0f00 	cmp.w	r9, #0
 801722c:	d003      	beq.n	8017236 <_scanf_i+0x10e>
 801722e:	3301      	adds	r3, #1
 8017230:	f109 39ff 	add.w	r9, r9, #4294967295
 8017234:	60a3      	str	r3, [r4, #8]
 8017236:	6873      	ldr	r3, [r6, #4]
 8017238:	3b01      	subs	r3, #1
 801723a:	2b00      	cmp	r3, #0
 801723c:	6073      	str	r3, [r6, #4]
 801723e:	dd1b      	ble.n	8017278 <_scanf_i+0x150>
 8017240:	6833      	ldr	r3, [r6, #0]
 8017242:	3301      	adds	r3, #1
 8017244:	6033      	str	r3, [r6, #0]
 8017246:	68a3      	ldr	r3, [r4, #8]
 8017248:	3b01      	subs	r3, #1
 801724a:	60a3      	str	r3, [r4, #8]
 801724c:	e7d9      	b.n	8017202 <_scanf_i+0xda>
 801724e:	f1bb 0f02 	cmp.w	fp, #2
 8017252:	d1ae      	bne.n	80171b2 <_scanf_i+0x8a>
 8017254:	6822      	ldr	r2, [r4, #0]
 8017256:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801725a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801725e:	d1bf      	bne.n	80171e0 <_scanf_i+0xb8>
 8017260:	2310      	movs	r3, #16
 8017262:	6063      	str	r3, [r4, #4]
 8017264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017268:	e7a2      	b.n	80171b0 <_scanf_i+0x88>
 801726a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801726e:	6022      	str	r2, [r4, #0]
 8017270:	780b      	ldrb	r3, [r1, #0]
 8017272:	f805 3b01 	strb.w	r3, [r5], #1
 8017276:	e7de      	b.n	8017236 <_scanf_i+0x10e>
 8017278:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801727c:	4631      	mov	r1, r6
 801727e:	4650      	mov	r0, sl
 8017280:	4798      	blx	r3
 8017282:	2800      	cmp	r0, #0
 8017284:	d0df      	beq.n	8017246 <_scanf_i+0x11e>
 8017286:	6823      	ldr	r3, [r4, #0]
 8017288:	05d9      	lsls	r1, r3, #23
 801728a:	d50d      	bpl.n	80172a8 <_scanf_i+0x180>
 801728c:	42bd      	cmp	r5, r7
 801728e:	d909      	bls.n	80172a4 <_scanf_i+0x17c>
 8017290:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017294:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017298:	4632      	mov	r2, r6
 801729a:	4650      	mov	r0, sl
 801729c:	4798      	blx	r3
 801729e:	f105 39ff 	add.w	r9, r5, #4294967295
 80172a2:	464d      	mov	r5, r9
 80172a4:	42bd      	cmp	r5, r7
 80172a6:	d028      	beq.n	80172fa <_scanf_i+0x1d2>
 80172a8:	6822      	ldr	r2, [r4, #0]
 80172aa:	f012 0210 	ands.w	r2, r2, #16
 80172ae:	d113      	bne.n	80172d8 <_scanf_i+0x1b0>
 80172b0:	702a      	strb	r2, [r5, #0]
 80172b2:	6863      	ldr	r3, [r4, #4]
 80172b4:	9e01      	ldr	r6, [sp, #4]
 80172b6:	4639      	mov	r1, r7
 80172b8:	4650      	mov	r0, sl
 80172ba:	47b0      	blx	r6
 80172bc:	f8d8 3000 	ldr.w	r3, [r8]
 80172c0:	6821      	ldr	r1, [r4, #0]
 80172c2:	1d1a      	adds	r2, r3, #4
 80172c4:	f8c8 2000 	str.w	r2, [r8]
 80172c8:	f011 0f20 	tst.w	r1, #32
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	d00f      	beq.n	80172f0 <_scanf_i+0x1c8>
 80172d0:	6018      	str	r0, [r3, #0]
 80172d2:	68e3      	ldr	r3, [r4, #12]
 80172d4:	3301      	adds	r3, #1
 80172d6:	60e3      	str	r3, [r4, #12]
 80172d8:	1bed      	subs	r5, r5, r7
 80172da:	44ab      	add	fp, r5
 80172dc:	6925      	ldr	r5, [r4, #16]
 80172de:	445d      	add	r5, fp
 80172e0:	6125      	str	r5, [r4, #16]
 80172e2:	2000      	movs	r0, #0
 80172e4:	b007      	add	sp, #28
 80172e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ea:	f04f 0b00 	mov.w	fp, #0
 80172ee:	e7ca      	b.n	8017286 <_scanf_i+0x15e>
 80172f0:	07ca      	lsls	r2, r1, #31
 80172f2:	bf4c      	ite	mi
 80172f4:	8018      	strhmi	r0, [r3, #0]
 80172f6:	6018      	strpl	r0, [r3, #0]
 80172f8:	e7eb      	b.n	80172d2 <_scanf_i+0x1aa>
 80172fa:	2001      	movs	r0, #1
 80172fc:	e7f2      	b.n	80172e4 <_scanf_i+0x1bc>
 80172fe:	bf00      	nop
 8017300:	08017b4c 	.word	0x08017b4c
 8017304:	08014725 	.word	0x08014725
 8017308:	08014629 	.word	0x08014629
 801730c:	0801818e 	.word	0x0801818e

08017310 <_read_r>:
 8017310:	b538      	push	{r3, r4, r5, lr}
 8017312:	4d07      	ldr	r5, [pc, #28]	; (8017330 <_read_r+0x20>)
 8017314:	4604      	mov	r4, r0
 8017316:	4608      	mov	r0, r1
 8017318:	4611      	mov	r1, r2
 801731a:	2200      	movs	r2, #0
 801731c:	602a      	str	r2, [r5, #0]
 801731e:	461a      	mov	r2, r3
 8017320:	f7eb fe10 	bl	8002f44 <_read>
 8017324:	1c43      	adds	r3, r0, #1
 8017326:	d102      	bne.n	801732e <_read_r+0x1e>
 8017328:	682b      	ldr	r3, [r5, #0]
 801732a:	b103      	cbz	r3, 801732e <_read_r+0x1e>
 801732c:	6023      	str	r3, [r4, #0]
 801732e:	bd38      	pop	{r3, r4, r5, pc}
 8017330:	200073ac 	.word	0x200073ac
 8017334:	00000000 	.word	0x00000000

08017338 <nan>:
 8017338:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017340 <nan+0x8>
 801733c:	4770      	bx	lr
 801733e:	bf00      	nop
 8017340:	00000000 	.word	0x00000000
 8017344:	7ff80000 	.word	0x7ff80000

08017348 <__sccl>:
 8017348:	b570      	push	{r4, r5, r6, lr}
 801734a:	780b      	ldrb	r3, [r1, #0]
 801734c:	4604      	mov	r4, r0
 801734e:	2b5e      	cmp	r3, #94	; 0x5e
 8017350:	bf0b      	itete	eq
 8017352:	784b      	ldrbeq	r3, [r1, #1]
 8017354:	1c48      	addne	r0, r1, #1
 8017356:	1c88      	addeq	r0, r1, #2
 8017358:	2200      	movne	r2, #0
 801735a:	bf08      	it	eq
 801735c:	2201      	moveq	r2, #1
 801735e:	1e61      	subs	r1, r4, #1
 8017360:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017364:	f801 2f01 	strb.w	r2, [r1, #1]!
 8017368:	42a9      	cmp	r1, r5
 801736a:	d1fb      	bne.n	8017364 <__sccl+0x1c>
 801736c:	b90b      	cbnz	r3, 8017372 <__sccl+0x2a>
 801736e:	3801      	subs	r0, #1
 8017370:	bd70      	pop	{r4, r5, r6, pc}
 8017372:	f082 0101 	eor.w	r1, r2, #1
 8017376:	54e1      	strb	r1, [r4, r3]
 8017378:	1c42      	adds	r2, r0, #1
 801737a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801737e:	2d2d      	cmp	r5, #45	; 0x2d
 8017380:	f102 36ff 	add.w	r6, r2, #4294967295
 8017384:	4610      	mov	r0, r2
 8017386:	d006      	beq.n	8017396 <__sccl+0x4e>
 8017388:	2d5d      	cmp	r5, #93	; 0x5d
 801738a:	d0f1      	beq.n	8017370 <__sccl+0x28>
 801738c:	b90d      	cbnz	r5, 8017392 <__sccl+0x4a>
 801738e:	4630      	mov	r0, r6
 8017390:	e7ee      	b.n	8017370 <__sccl+0x28>
 8017392:	462b      	mov	r3, r5
 8017394:	e7ef      	b.n	8017376 <__sccl+0x2e>
 8017396:	7816      	ldrb	r6, [r2, #0]
 8017398:	2e5d      	cmp	r6, #93	; 0x5d
 801739a:	d0fa      	beq.n	8017392 <__sccl+0x4a>
 801739c:	42b3      	cmp	r3, r6
 801739e:	dcf8      	bgt.n	8017392 <__sccl+0x4a>
 80173a0:	4618      	mov	r0, r3
 80173a2:	3001      	adds	r0, #1
 80173a4:	4286      	cmp	r6, r0
 80173a6:	5421      	strb	r1, [r4, r0]
 80173a8:	dcfb      	bgt.n	80173a2 <__sccl+0x5a>
 80173aa:	43d8      	mvns	r0, r3
 80173ac:	4430      	add	r0, r6
 80173ae:	1c5d      	adds	r5, r3, #1
 80173b0:	42b3      	cmp	r3, r6
 80173b2:	bfa8      	it	ge
 80173b4:	2000      	movge	r0, #0
 80173b6:	182b      	adds	r3, r5, r0
 80173b8:	3202      	adds	r2, #2
 80173ba:	e7de      	b.n	801737a <__sccl+0x32>

080173bc <__submore>:
 80173bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173c0:	460c      	mov	r4, r1
 80173c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80173c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80173c8:	4299      	cmp	r1, r3
 80173ca:	d11d      	bne.n	8017408 <__submore+0x4c>
 80173cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80173d0:	f7fb fa3e 	bl	8012850 <_malloc_r>
 80173d4:	b918      	cbnz	r0, 80173de <__submore+0x22>
 80173d6:	f04f 30ff 	mov.w	r0, #4294967295
 80173da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80173e2:	63a3      	str	r3, [r4, #56]	; 0x38
 80173e4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80173e8:	6360      	str	r0, [r4, #52]	; 0x34
 80173ea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80173ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80173f2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80173f6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80173fa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80173fe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017402:	6020      	str	r0, [r4, #0]
 8017404:	2000      	movs	r0, #0
 8017406:	e7e8      	b.n	80173da <__submore+0x1e>
 8017408:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801740a:	0077      	lsls	r7, r6, #1
 801740c:	463a      	mov	r2, r7
 801740e:	f7ff f985 	bl	801671c <_realloc_r>
 8017412:	4605      	mov	r5, r0
 8017414:	2800      	cmp	r0, #0
 8017416:	d0de      	beq.n	80173d6 <__submore+0x1a>
 8017418:	eb00 0806 	add.w	r8, r0, r6
 801741c:	4601      	mov	r1, r0
 801741e:	4632      	mov	r2, r6
 8017420:	4640      	mov	r0, r8
 8017422:	f7fb f995 	bl	8012750 <memcpy>
 8017426:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801742a:	f8c4 8000 	str.w	r8, [r4]
 801742e:	e7e9      	b.n	8017404 <__submore+0x48>

08017430 <__swbuf_r>:
 8017430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017432:	460e      	mov	r6, r1
 8017434:	4614      	mov	r4, r2
 8017436:	4605      	mov	r5, r0
 8017438:	b118      	cbz	r0, 8017442 <__swbuf_r+0x12>
 801743a:	6983      	ldr	r3, [r0, #24]
 801743c:	b90b      	cbnz	r3, 8017442 <__swbuf_r+0x12>
 801743e:	f7fb f8b1 	bl	80125a4 <__sinit>
 8017442:	4b21      	ldr	r3, [pc, #132]	; (80174c8 <__swbuf_r+0x98>)
 8017444:	429c      	cmp	r4, r3
 8017446:	d12b      	bne.n	80174a0 <__swbuf_r+0x70>
 8017448:	686c      	ldr	r4, [r5, #4]
 801744a:	69a3      	ldr	r3, [r4, #24]
 801744c:	60a3      	str	r3, [r4, #8]
 801744e:	89a3      	ldrh	r3, [r4, #12]
 8017450:	071a      	lsls	r2, r3, #28
 8017452:	d52f      	bpl.n	80174b4 <__swbuf_r+0x84>
 8017454:	6923      	ldr	r3, [r4, #16]
 8017456:	b36b      	cbz	r3, 80174b4 <__swbuf_r+0x84>
 8017458:	6923      	ldr	r3, [r4, #16]
 801745a:	6820      	ldr	r0, [r4, #0]
 801745c:	1ac0      	subs	r0, r0, r3
 801745e:	6963      	ldr	r3, [r4, #20]
 8017460:	b2f6      	uxtb	r6, r6
 8017462:	4283      	cmp	r3, r0
 8017464:	4637      	mov	r7, r6
 8017466:	dc04      	bgt.n	8017472 <__swbuf_r+0x42>
 8017468:	4621      	mov	r1, r4
 801746a:	4628      	mov	r0, r5
 801746c:	f7fe f89a 	bl	80155a4 <_fflush_r>
 8017470:	bb30      	cbnz	r0, 80174c0 <__swbuf_r+0x90>
 8017472:	68a3      	ldr	r3, [r4, #8]
 8017474:	3b01      	subs	r3, #1
 8017476:	60a3      	str	r3, [r4, #8]
 8017478:	6823      	ldr	r3, [r4, #0]
 801747a:	1c5a      	adds	r2, r3, #1
 801747c:	6022      	str	r2, [r4, #0]
 801747e:	701e      	strb	r6, [r3, #0]
 8017480:	6963      	ldr	r3, [r4, #20]
 8017482:	3001      	adds	r0, #1
 8017484:	4283      	cmp	r3, r0
 8017486:	d004      	beq.n	8017492 <__swbuf_r+0x62>
 8017488:	89a3      	ldrh	r3, [r4, #12]
 801748a:	07db      	lsls	r3, r3, #31
 801748c:	d506      	bpl.n	801749c <__swbuf_r+0x6c>
 801748e:	2e0a      	cmp	r6, #10
 8017490:	d104      	bne.n	801749c <__swbuf_r+0x6c>
 8017492:	4621      	mov	r1, r4
 8017494:	4628      	mov	r0, r5
 8017496:	f7fe f885 	bl	80155a4 <_fflush_r>
 801749a:	b988      	cbnz	r0, 80174c0 <__swbuf_r+0x90>
 801749c:	4638      	mov	r0, r7
 801749e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174a0:	4b0a      	ldr	r3, [pc, #40]	; (80174cc <__swbuf_r+0x9c>)
 80174a2:	429c      	cmp	r4, r3
 80174a4:	d101      	bne.n	80174aa <__swbuf_r+0x7a>
 80174a6:	68ac      	ldr	r4, [r5, #8]
 80174a8:	e7cf      	b.n	801744a <__swbuf_r+0x1a>
 80174aa:	4b09      	ldr	r3, [pc, #36]	; (80174d0 <__swbuf_r+0xa0>)
 80174ac:	429c      	cmp	r4, r3
 80174ae:	bf08      	it	eq
 80174b0:	68ec      	ldreq	r4, [r5, #12]
 80174b2:	e7ca      	b.n	801744a <__swbuf_r+0x1a>
 80174b4:	4621      	mov	r1, r4
 80174b6:	4628      	mov	r0, r5
 80174b8:	f000 f81a 	bl	80174f0 <__swsetup_r>
 80174bc:	2800      	cmp	r0, #0
 80174be:	d0cb      	beq.n	8017458 <__swbuf_r+0x28>
 80174c0:	f04f 37ff 	mov.w	r7, #4294967295
 80174c4:	e7ea      	b.n	801749c <__swbuf_r+0x6c>
 80174c6:	bf00      	nop
 80174c8:	08017ce8 	.word	0x08017ce8
 80174cc:	08017d08 	.word	0x08017d08
 80174d0:	08017cc8 	.word	0x08017cc8

080174d4 <__ascii_wctomb>:
 80174d4:	b149      	cbz	r1, 80174ea <__ascii_wctomb+0x16>
 80174d6:	2aff      	cmp	r2, #255	; 0xff
 80174d8:	bf85      	ittet	hi
 80174da:	238a      	movhi	r3, #138	; 0x8a
 80174dc:	6003      	strhi	r3, [r0, #0]
 80174de:	700a      	strbls	r2, [r1, #0]
 80174e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80174e4:	bf98      	it	ls
 80174e6:	2001      	movls	r0, #1
 80174e8:	4770      	bx	lr
 80174ea:	4608      	mov	r0, r1
 80174ec:	4770      	bx	lr
	...

080174f0 <__swsetup_r>:
 80174f0:	4b32      	ldr	r3, [pc, #200]	; (80175bc <__swsetup_r+0xcc>)
 80174f2:	b570      	push	{r4, r5, r6, lr}
 80174f4:	681d      	ldr	r5, [r3, #0]
 80174f6:	4606      	mov	r6, r0
 80174f8:	460c      	mov	r4, r1
 80174fa:	b125      	cbz	r5, 8017506 <__swsetup_r+0x16>
 80174fc:	69ab      	ldr	r3, [r5, #24]
 80174fe:	b913      	cbnz	r3, 8017506 <__swsetup_r+0x16>
 8017500:	4628      	mov	r0, r5
 8017502:	f7fb f84f 	bl	80125a4 <__sinit>
 8017506:	4b2e      	ldr	r3, [pc, #184]	; (80175c0 <__swsetup_r+0xd0>)
 8017508:	429c      	cmp	r4, r3
 801750a:	d10f      	bne.n	801752c <__swsetup_r+0x3c>
 801750c:	686c      	ldr	r4, [r5, #4]
 801750e:	89a3      	ldrh	r3, [r4, #12]
 8017510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017514:	0719      	lsls	r1, r3, #28
 8017516:	d42c      	bmi.n	8017572 <__swsetup_r+0x82>
 8017518:	06dd      	lsls	r5, r3, #27
 801751a:	d411      	bmi.n	8017540 <__swsetup_r+0x50>
 801751c:	2309      	movs	r3, #9
 801751e:	6033      	str	r3, [r6, #0]
 8017520:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017524:	81a3      	strh	r3, [r4, #12]
 8017526:	f04f 30ff 	mov.w	r0, #4294967295
 801752a:	e03e      	b.n	80175aa <__swsetup_r+0xba>
 801752c:	4b25      	ldr	r3, [pc, #148]	; (80175c4 <__swsetup_r+0xd4>)
 801752e:	429c      	cmp	r4, r3
 8017530:	d101      	bne.n	8017536 <__swsetup_r+0x46>
 8017532:	68ac      	ldr	r4, [r5, #8]
 8017534:	e7eb      	b.n	801750e <__swsetup_r+0x1e>
 8017536:	4b24      	ldr	r3, [pc, #144]	; (80175c8 <__swsetup_r+0xd8>)
 8017538:	429c      	cmp	r4, r3
 801753a:	bf08      	it	eq
 801753c:	68ec      	ldreq	r4, [r5, #12]
 801753e:	e7e6      	b.n	801750e <__swsetup_r+0x1e>
 8017540:	0758      	lsls	r0, r3, #29
 8017542:	d512      	bpl.n	801756a <__swsetup_r+0x7a>
 8017544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017546:	b141      	cbz	r1, 801755a <__swsetup_r+0x6a>
 8017548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801754c:	4299      	cmp	r1, r3
 801754e:	d002      	beq.n	8017556 <__swsetup_r+0x66>
 8017550:	4630      	mov	r0, r6
 8017552:	f7fb f92d 	bl	80127b0 <_free_r>
 8017556:	2300      	movs	r3, #0
 8017558:	6363      	str	r3, [r4, #52]	; 0x34
 801755a:	89a3      	ldrh	r3, [r4, #12]
 801755c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017560:	81a3      	strh	r3, [r4, #12]
 8017562:	2300      	movs	r3, #0
 8017564:	6063      	str	r3, [r4, #4]
 8017566:	6923      	ldr	r3, [r4, #16]
 8017568:	6023      	str	r3, [r4, #0]
 801756a:	89a3      	ldrh	r3, [r4, #12]
 801756c:	f043 0308 	orr.w	r3, r3, #8
 8017570:	81a3      	strh	r3, [r4, #12]
 8017572:	6923      	ldr	r3, [r4, #16]
 8017574:	b94b      	cbnz	r3, 801758a <__swsetup_r+0x9a>
 8017576:	89a3      	ldrh	r3, [r4, #12]
 8017578:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801757c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017580:	d003      	beq.n	801758a <__swsetup_r+0x9a>
 8017582:	4621      	mov	r1, r4
 8017584:	4630      	mov	r0, r6
 8017586:	f000 f845 	bl	8017614 <__smakebuf_r>
 801758a:	89a0      	ldrh	r0, [r4, #12]
 801758c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017590:	f010 0301 	ands.w	r3, r0, #1
 8017594:	d00a      	beq.n	80175ac <__swsetup_r+0xbc>
 8017596:	2300      	movs	r3, #0
 8017598:	60a3      	str	r3, [r4, #8]
 801759a:	6963      	ldr	r3, [r4, #20]
 801759c:	425b      	negs	r3, r3
 801759e:	61a3      	str	r3, [r4, #24]
 80175a0:	6923      	ldr	r3, [r4, #16]
 80175a2:	b943      	cbnz	r3, 80175b6 <__swsetup_r+0xc6>
 80175a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80175a8:	d1ba      	bne.n	8017520 <__swsetup_r+0x30>
 80175aa:	bd70      	pop	{r4, r5, r6, pc}
 80175ac:	0781      	lsls	r1, r0, #30
 80175ae:	bf58      	it	pl
 80175b0:	6963      	ldrpl	r3, [r4, #20]
 80175b2:	60a3      	str	r3, [r4, #8]
 80175b4:	e7f4      	b.n	80175a0 <__swsetup_r+0xb0>
 80175b6:	2000      	movs	r0, #0
 80175b8:	e7f7      	b.n	80175aa <__swsetup_r+0xba>
 80175ba:	bf00      	nop
 80175bc:	200001a4 	.word	0x200001a4
 80175c0:	08017ce8 	.word	0x08017ce8
 80175c4:	08017d08 	.word	0x08017d08
 80175c8:	08017cc8 	.word	0x08017cc8

080175cc <__swhatbuf_r>:
 80175cc:	b570      	push	{r4, r5, r6, lr}
 80175ce:	460e      	mov	r6, r1
 80175d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175d4:	2900      	cmp	r1, #0
 80175d6:	b096      	sub	sp, #88	; 0x58
 80175d8:	4614      	mov	r4, r2
 80175da:	461d      	mov	r5, r3
 80175dc:	da07      	bge.n	80175ee <__swhatbuf_r+0x22>
 80175de:	2300      	movs	r3, #0
 80175e0:	602b      	str	r3, [r5, #0]
 80175e2:	89b3      	ldrh	r3, [r6, #12]
 80175e4:	061a      	lsls	r2, r3, #24
 80175e6:	d410      	bmi.n	801760a <__swhatbuf_r+0x3e>
 80175e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80175ec:	e00e      	b.n	801760c <__swhatbuf_r+0x40>
 80175ee:	466a      	mov	r2, sp
 80175f0:	f000 f858 	bl	80176a4 <_fstat_r>
 80175f4:	2800      	cmp	r0, #0
 80175f6:	dbf2      	blt.n	80175de <__swhatbuf_r+0x12>
 80175f8:	9a01      	ldr	r2, [sp, #4]
 80175fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80175fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017602:	425a      	negs	r2, r3
 8017604:	415a      	adcs	r2, r3
 8017606:	602a      	str	r2, [r5, #0]
 8017608:	e7ee      	b.n	80175e8 <__swhatbuf_r+0x1c>
 801760a:	2340      	movs	r3, #64	; 0x40
 801760c:	2000      	movs	r0, #0
 801760e:	6023      	str	r3, [r4, #0]
 8017610:	b016      	add	sp, #88	; 0x58
 8017612:	bd70      	pop	{r4, r5, r6, pc}

08017614 <__smakebuf_r>:
 8017614:	898b      	ldrh	r3, [r1, #12]
 8017616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017618:	079d      	lsls	r5, r3, #30
 801761a:	4606      	mov	r6, r0
 801761c:	460c      	mov	r4, r1
 801761e:	d507      	bpl.n	8017630 <__smakebuf_r+0x1c>
 8017620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017624:	6023      	str	r3, [r4, #0]
 8017626:	6123      	str	r3, [r4, #16]
 8017628:	2301      	movs	r3, #1
 801762a:	6163      	str	r3, [r4, #20]
 801762c:	b002      	add	sp, #8
 801762e:	bd70      	pop	{r4, r5, r6, pc}
 8017630:	ab01      	add	r3, sp, #4
 8017632:	466a      	mov	r2, sp
 8017634:	f7ff ffca 	bl	80175cc <__swhatbuf_r>
 8017638:	9900      	ldr	r1, [sp, #0]
 801763a:	4605      	mov	r5, r0
 801763c:	4630      	mov	r0, r6
 801763e:	f7fb f907 	bl	8012850 <_malloc_r>
 8017642:	b948      	cbnz	r0, 8017658 <__smakebuf_r+0x44>
 8017644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017648:	059a      	lsls	r2, r3, #22
 801764a:	d4ef      	bmi.n	801762c <__smakebuf_r+0x18>
 801764c:	f023 0303 	bic.w	r3, r3, #3
 8017650:	f043 0302 	orr.w	r3, r3, #2
 8017654:	81a3      	strh	r3, [r4, #12]
 8017656:	e7e3      	b.n	8017620 <__smakebuf_r+0xc>
 8017658:	4b0d      	ldr	r3, [pc, #52]	; (8017690 <__smakebuf_r+0x7c>)
 801765a:	62b3      	str	r3, [r6, #40]	; 0x28
 801765c:	89a3      	ldrh	r3, [r4, #12]
 801765e:	6020      	str	r0, [r4, #0]
 8017660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017664:	81a3      	strh	r3, [r4, #12]
 8017666:	9b00      	ldr	r3, [sp, #0]
 8017668:	6163      	str	r3, [r4, #20]
 801766a:	9b01      	ldr	r3, [sp, #4]
 801766c:	6120      	str	r0, [r4, #16]
 801766e:	b15b      	cbz	r3, 8017688 <__smakebuf_r+0x74>
 8017670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017674:	4630      	mov	r0, r6
 8017676:	f000 f827 	bl	80176c8 <_isatty_r>
 801767a:	b128      	cbz	r0, 8017688 <__smakebuf_r+0x74>
 801767c:	89a3      	ldrh	r3, [r4, #12]
 801767e:	f023 0303 	bic.w	r3, r3, #3
 8017682:	f043 0301 	orr.w	r3, r3, #1
 8017686:	81a3      	strh	r3, [r4, #12]
 8017688:	89a0      	ldrh	r0, [r4, #12]
 801768a:	4305      	orrs	r5, r0
 801768c:	81a5      	strh	r5, [r4, #12]
 801768e:	e7cd      	b.n	801762c <__smakebuf_r+0x18>
 8017690:	0801253d 	.word	0x0801253d

08017694 <_malloc_usable_size_r>:
 8017694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017698:	1f18      	subs	r0, r3, #4
 801769a:	2b00      	cmp	r3, #0
 801769c:	bfbc      	itt	lt
 801769e:	580b      	ldrlt	r3, [r1, r0]
 80176a0:	18c0      	addlt	r0, r0, r3
 80176a2:	4770      	bx	lr

080176a4 <_fstat_r>:
 80176a4:	b538      	push	{r3, r4, r5, lr}
 80176a6:	4d07      	ldr	r5, [pc, #28]	; (80176c4 <_fstat_r+0x20>)
 80176a8:	2300      	movs	r3, #0
 80176aa:	4604      	mov	r4, r0
 80176ac:	4608      	mov	r0, r1
 80176ae:	4611      	mov	r1, r2
 80176b0:	602b      	str	r3, [r5, #0]
 80176b2:	f7eb fc8c 	bl	8002fce <_fstat>
 80176b6:	1c43      	adds	r3, r0, #1
 80176b8:	d102      	bne.n	80176c0 <_fstat_r+0x1c>
 80176ba:	682b      	ldr	r3, [r5, #0]
 80176bc:	b103      	cbz	r3, 80176c0 <_fstat_r+0x1c>
 80176be:	6023      	str	r3, [r4, #0]
 80176c0:	bd38      	pop	{r3, r4, r5, pc}
 80176c2:	bf00      	nop
 80176c4:	200073ac 	.word	0x200073ac

080176c8 <_isatty_r>:
 80176c8:	b538      	push	{r3, r4, r5, lr}
 80176ca:	4d06      	ldr	r5, [pc, #24]	; (80176e4 <_isatty_r+0x1c>)
 80176cc:	2300      	movs	r3, #0
 80176ce:	4604      	mov	r4, r0
 80176d0:	4608      	mov	r0, r1
 80176d2:	602b      	str	r3, [r5, #0]
 80176d4:	f7eb fc8b 	bl	8002fee <_isatty>
 80176d8:	1c43      	adds	r3, r0, #1
 80176da:	d102      	bne.n	80176e2 <_isatty_r+0x1a>
 80176dc:	682b      	ldr	r3, [r5, #0]
 80176de:	b103      	cbz	r3, 80176e2 <_isatty_r+0x1a>
 80176e0:	6023      	str	r3, [r4, #0]
 80176e2:	bd38      	pop	{r3, r4, r5, pc}
 80176e4:	200073ac 	.word	0x200073ac

080176e8 <_init>:
 80176e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176ea:	bf00      	nop
 80176ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176ee:	bc08      	pop	{r3}
 80176f0:	469e      	mov	lr, r3
 80176f2:	4770      	bx	lr

080176f4 <_fini>:
 80176f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176f6:	bf00      	nop
 80176f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176fa:	bc08      	pop	{r3}
 80176fc:	469e      	mov	lr, r3
 80176fe:	4770      	bx	lr
