
FC_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016860  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022f0  08016a10  08016a10  00026a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018d00  08018d00  00030278  2**0
                  CONTENTS
  4 .ARM          00000008  08018d00  08018d00  00028d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018d08  08018d08  00030278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018d08  08018d08  00028d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018d10  08018d10  00028d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08018d14  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030278  2**0
                  CONTENTS
 10 .bss          00005f1c  20000278  20000278  00030278  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20006194  20006194  00030278  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 13 .debug_info   00056fb1  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000079ea  00000000  00000000  00087259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000036a0  00000000  00000000  0008ec48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000034b8  00000000  00000000  000922e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dd12  00000000  00000000  000957a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035bf3  00000000  00000000  000a34b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112eb0  00000000  00000000  000d90a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ebf55  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010868  00000000  00000000  001ebfa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000278 	.word	0x20000278
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080169f8 	.word	0x080169f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000027c 	.word	0x2000027c
 80001ec:	080169f8 	.word	0x080169f8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	461a      	mov	r2, r3
 80010d8:	460b      	mov	r3, r1
 80010da:	72fb      	strb	r3, [r7, #11]
 80010dc:	4613      	mov	r3, r2
 80010de:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	893b      	ldrh	r3, [r7, #8]
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	21d5      	movs	r1, #213	; 0xd5
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f007 fd3c 	bl	8008b74 <HAL_I2C_Mem_Write>
  return 0;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b088      	sub	sp, #32
 800110a:	af04      	add	r7, sp, #16
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	461a      	mov	r2, r3
 8001112:	460b      	mov	r3, r1
 8001114:	72fb      	strb	r3, [r7, #11]
 8001116:	4613      	mov	r3, r2
 8001118:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800111a:	7afb      	ldrb	r3, [r7, #11]
 800111c:	b29a      	uxth	r2, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	893b      	ldrh	r3, [r7, #8]
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	21d5      	movs	r1, #213	; 0xd5
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f007 fe19 	bl	8008d68 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b08b      	sub	sp, #44	; 0x2c
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800114c:	4a53      	ldr	r2, [pc, #332]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001152:	4b52      	ldr	r3, [pc, #328]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	2216      	movs	r2, #22
 800115c:	4950      	ldr	r1, [pc, #320]	; (80012a0 <MRT_LSM6DSR_Setup+0x160>)
 800115e:	f00b fcda 	bl	800cb16 <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 8001162:	4b50      	ldr	r3, [pc, #320]	; (80012a4 <MRT_LSM6DSR_Setup+0x164>)
 8001164:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 8001166:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <MRT_LSM6DSR_Setup+0x168>)
 8001168:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 800116e:	2064      	movs	r0, #100	; 0x64
 8001170:	f006 fe1c 	bl	8007dac <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	494c      	ldr	r1, [pc, #304]	; (80012ac <MRT_LSM6DSR_Setup+0x16c>)
 800117a:	4618      	mov	r0, r3
 800117c:	f006 fac6 	bl	800770c <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 8001180:	4b46      	ldr	r3, [pc, #280]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	2215      	movs	r2, #21
 800118a:	4949      	ldr	r1, [pc, #292]	; (80012b0 <MRT_LSM6DSR_Setup+0x170>)
 800118c:	f00b fcc3 	bl	800cb16 <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 8001190:	4b46      	ldr	r3, [pc, #280]	; (80012ac <MRT_LSM6DSR_Setup+0x16c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b6a      	cmp	r3, #106	; 0x6a
 8001196:	d032      	beq.n	80011fe <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 8001198:	4b40      	ldr	r3, [pc, #256]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	2208      	movs	r2, #8
 80011a2:	4944      	ldr	r1, [pc, #272]	; (80012b4 <MRT_LSM6DSR_Setup+0x174>)
 80011a4:	f00b fcb7 	bl	800cb16 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80011a8:	4b3c      	ldr	r3, [pc, #240]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	2210      	movs	r2, #16
 80011b2:	4941      	ldr	r1, [pc, #260]	; (80012b8 <MRT_LSM6DSR_Setup+0x178>)
 80011b4:	f00b fcaf 	bl	800cb16 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80011b8:	4b3c      	ldr	r3, [pc, #240]	; (80012ac <MRT_LSM6DSR_Setup+0x16c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	493e      	ldr	r1, [pc, #248]	; (80012bc <MRT_LSM6DSR_Setup+0x17c>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f011 f905 	bl	80123d4 <siprintf>

			__BKPT();
 80011ca:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 80011cc:	4b33      	ldr	r3, [pc, #204]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 80011ce:	681c      	ldr	r4, [r3, #0]
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f815 	bl	8000204 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	b29a      	uxth	r2, r3
 80011de:	f107 0110 	add.w	r1, r7, #16
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	4620      	mov	r0, r4
 80011e8:	f00b fc95 	bl	800cb16 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	2216      	movs	r2, #22
 80011f6:	4932      	ldr	r1, [pc, #200]	; (80012c0 <MRT_LSM6DSR_Setup+0x180>)
 80011f8:	f00b fc8d 	bl	800cb16 <HAL_UART_Transmit>
		  while(1);
 80011fc:	e7fe      	b.n	80011fc <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	2206      	movs	r2, #6
 8001208:	492e      	ldr	r1, [pc, #184]	; (80012c4 <MRT_LSM6DSR_Setup+0x184>)
 800120a:	f00b fc84 	bl	800cb16 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2101      	movs	r1, #1
 8001214:	4618      	mov	r0, r3
 8001216:	f006 fa8a 	bl	800772e <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800121a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121e:	f006 fdc5 	bl	8007dac <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4928      	ldr	r1, [pc, #160]	; (80012c8 <MRT_LSM6DSR_Setup+0x188>)
 8001228:	4618      	mov	r0, r3
 800122a:	f006 faa6 	bl	800777a <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <MRT_LSM6DSR_Setup+0x188>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f5      	bne.n	8001222 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f006 f915 	bl	800746c <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	2101      	movs	r1, #1
 8001248:	4618      	mov	r0, r3
 800124a:	f005 fef1 	bl	8007030 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2101      	movs	r1, #1
 8001254:	4618      	mov	r0, r3
 8001256:	f006 f80d 	bl	8007274 <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f005 febf 	bl	8006fe4 <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	210c      	movs	r1, #12
 800126c:	4618      	mov	r0, r3
 800126e:	f005 ffdb 	bl	8007228 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	2219      	movs	r2, #25
 800127c:	4913      	ldr	r1, [pc, #76]	; (80012cc <MRT_LSM6DSR_Setup+0x18c>)
 800127e:	f00b fc4a 	bl	800cb16 <HAL_UART_Transmit>

	  return lsm_ctx;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	461c      	mov	r4, r3
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800128e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	372c      	adds	r7, #44	; 0x2c
 8001296:	46bd      	mov	sp, r7
 8001298:	bd90      	pop	{r4, r7, pc}
 800129a:	bf00      	nop
 800129c:	20005a2c 	.word	0x20005a2c
 80012a0:	08016a10 	.word	0x08016a10
 80012a4:	080010cd 	.word	0x080010cd
 80012a8:	08001107 	.word	0x08001107
 80012ac:	200002a4 	.word	0x200002a4
 80012b0:	08016a28 	.word	0x08016a28
 80012b4:	08016a40 	.word	0x08016a40
 80012b8:	08016a4c 	.word	0x08016a4c
 80012bc:	08016a60 	.word	0x08016a60
 80012c0:	08016a68 	.word	0x08016a68
 80012c4:	08016a80 	.word	0x08016a80
 80012c8:	200002a5 	.word	0x200002a5
 80012cc:	08016a88 	.word	0x08016a88

080012d0 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	1d3c      	adds	r4, r7, #4
 80012d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012dc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 80012de:	f107 0217 	add.w	r2, r7, #23
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f006 f8e6 	bl	80074b8 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d02d      	beq.n	800134e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80012f2:	2206      	movs	r2, #6
 80012f4:	2100      	movs	r1, #0
 80012f6:	4818      	ldr	r0, [pc, #96]	; (8001358 <MRT_LSM6DSR_getAcceleration+0x88>)
 80012f8:	f00f fd70 	bl	8010ddc <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4916      	ldr	r1, [pc, #88]	; (8001358 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001300:	4618      	mov	r0, r3
 8001302:	f006 f992 	bl	800762a <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130c:	4618      	mov	r0, r3
 800130e:	f005 fe1d 	bl	8006f4c <lsm6dsr_from_fs2g_to_mg>
 8001312:	eef0 7a40 	vmov.f32	s15, s0
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MRT_LSM6DSR_getAcceleration+0x88>)
 800131e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	1d1c      	adds	r4, r3, #4
 8001326:	4610      	mov	r0, r2
 8001328:	f005 fe10 	bl	8006f4c <lsm6dsr_from_fs2g_to_mg>
 800132c:	eef0 7a40 	vmov.f32	s15, s0
 8001330:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001336:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	f103 0408 	add.w	r4, r3, #8
 8001340:	4610      	mov	r0, r2
 8001342:	f005 fe03 	bl	8006f4c <lsm6dsr_from_fs2g_to_mg>
 8001346:	eef0 7a40 	vmov.f32	s15, s0
 800134a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800134e:	bf00      	nop
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}
 8001356:	bf00      	nop
 8001358:	20000294 	.word	0x20000294

0800135c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	1d3c      	adds	r4, r7, #4
 8001364:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001368:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 800136a:	f107 0217 	add.w	r2, r7, #23
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f006 f8d2 	bl	800751c <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d012      	beq.n	80013a4 <MRT_LSM6DSR_getTemperature+0x48>
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MRT_LSM6DSR_getTemperature+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	801a      	strh	r2, [r3, #0]
		//Read temperature data
		memset(&lsm_data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	4909      	ldr	r1, [pc, #36]	; (80013ac <MRT_LSM6DSR_getTemperature+0x50>)
 8001388:	4618      	mov	r0, r3
 800138a:	f006 f8e0 	bl	800754e <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MRT_LSM6DSR_getTemperature+0x50>)
 8001390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001394:	4618      	mov	r0, r3
 8001396:	f005 fe09 	bl	8006fac <lsm6dsr_from_lsb_to_celsius>
 800139a:	eef0 7a40 	vmov.f32	s15, s0
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80013a4:	bf00      	nop
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	200002a2 	.word	0x200002a2

080013b0 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	1d3c      	adds	r4, r7, #4
 80013b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80013bc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 80013be:	f107 0217 	add.w	r2, r7, #23
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f006 f88f 	bl	80074ea <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d02d      	beq.n	800142e <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80013d2:	2206      	movs	r2, #6
 80013d4:	2100      	movs	r1, #0
 80013d6:	4818      	ldr	r0, [pc, #96]	; (8001438 <MRT_LSM6DSR_getAngularRate+0x88>)
 80013d8:	f00f fd00 	bl	8010ddc <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4916      	ldr	r1, [pc, #88]	; (8001438 <MRT_LSM6DSR_getAngularRate+0x88>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f006 f8d7 	bl	8007594 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MRT_LSM6DSR_getAngularRate+0x88>)
 80013e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f005 fdc5 	bl	8006f7c <lsm6dsr_from_fs2000dps_to_mdps>
 80013f2:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MRT_LSM6DSR_getAngularRate+0x88>)
 80013fe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001406:	4610      	mov	r0, r2
 8001408:	f005 fdb8 	bl	8006f7c <lsm6dsr_from_fs2000dps_to_mdps>
 800140c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8001410:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001416:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001420:	4610      	mov	r0, r2
 8001422:	f005 fdab 	bl	8006f7c <lsm6dsr_from_fs2000dps_to_mdps>
 8001426:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800142a:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800142e:	bf00      	nop
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	bf00      	nop
 8001438:	2000029c 	.word	0x2000029c

0800143c <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b08d      	sub	sp, #52	; 0x34
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001448:	4a4b      	ldr	r2, [pc, #300]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800144e:	4b4a      	ldr	r3, [pc, #296]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	2216      	movs	r2, #22
 8001458:	4948      	ldr	r1, [pc, #288]	; (800157c <MRT_LPS22HH_Setup+0x140>)
 800145a:	f00b fb5c 	bl	800cb16 <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 800145e:	4b48      	ldr	r3, [pc, #288]	; (8001580 <MRT_LPS22HH_Setup+0x144>)
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 8001462:	4b48      	ldr	r3, [pc, #288]	; (8001584 <MRT_LPS22HH_Setup+0x148>)
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 800146a:	2064      	movs	r0, #100	; 0x64
 800146c:	f006 fc9e 	bl	8007dac <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 8001470:	4b45      	ldr	r3, [pc, #276]	; (8001588 <MRT_LPS22HH_Setup+0x14c>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	4943      	ldr	r1, [pc, #268]	; (8001588 <MRT_LPS22HH_Setup+0x14c>)
 800147c:	4618      	mov	r0, r3
 800147e:	f005 fce4 	bl	8006e4a <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	2216      	movs	r2, #22
 800148c:	493f      	ldr	r1, [pc, #252]	; (800158c <MRT_LPS22HH_Setup+0x150>)
 800148e:	f00b fb42 	bl	800cb16 <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 8001492:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <MRT_LPS22HH_Setup+0x14c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2bb3      	cmp	r3, #179	; 0xb3
 8001498:	d031      	beq.n	80014fe <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	2208      	movs	r2, #8
 80014a4:	493a      	ldr	r1, [pc, #232]	; (8001590 <MRT_LPS22HH_Setup+0x154>)
 80014a6:	f00b fb36 	bl	800cb16 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	2210      	movs	r2, #16
 80014b4:	4937      	ldr	r1, [pc, #220]	; (8001594 <MRT_LPS22HH_Setup+0x158>)
 80014b6:	f00b fb2e 	bl	800cb16 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 80014ba:	4b33      	ldr	r3, [pc, #204]	; (8001588 <MRT_LPS22HH_Setup+0x14c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4934      	ldr	r1, [pc, #208]	; (8001598 <MRT_LPS22HH_Setup+0x15c>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f010 ff84 	bl	80123d4 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 80014cc:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 80014ce:	681c      	ldr	r4, [r3, #0]
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe fe95 	bl	8000204 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f107 0114 	add.w	r1, r7, #20
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	4620      	mov	r0, r4
 80014e8:	f00b fb15 	bl	800cb16 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	2216      	movs	r2, #22
 80014f6:	4929      	ldr	r1, [pc, #164]	; (800159c <MRT_LPS22HH_Setup+0x160>)
 80014f8:	f00b fb0d 	bl	800cb16 <HAL_UART_Transmit>
		  while(1);
 80014fc:	e7fe      	b.n	80014fc <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	2204      	movs	r2, #4
 8001508:	4925      	ldr	r1, [pc, #148]	; (80015a0 <MRT_LPS22HH_Setup+0x164>)
 800150a:	f00b fb04 	bl	800cb16 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	2101      	movs	r1, #1
 8001514:	4618      	mov	r0, r3
 8001516:	f005 fca9 	bl	8006e6c <lps22hh_reset_set>

	  HAL_Delay(1000);
 800151a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800151e:	f006 fc45 	bl	8007dac <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	491f      	ldr	r1, [pc, #124]	; (80015a4 <MRT_LPS22HH_Setup+0x168>)
 8001528:	4618      	mov	r0, r3
 800152a:	f005 fcc5 	bl	8006eb8 <lps22hh_reset_get>
	  } while (lps_rst);
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <MRT_LPS22HH_Setup+0x168>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f5      	bne.n	8001522 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	2101      	movs	r1, #1
 800153c:	4618      	mov	r0, r3
 800153e:	f005 fbab 	bl	8006c98 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	2115      	movs	r1, #21
 8001548:	4618      	mov	r0, r3
 800154a:	f005 fbcb 	bl	8006ce4 <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	2218      	movs	r2, #24
 8001558:	4913      	ldr	r1, [pc, #76]	; (80015a8 <MRT_LPS22HH_Setup+0x16c>)
 800155a:	f00b fadc 	bl	800cb16 <HAL_UART_Transmit>

	  return lps_ctx;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	461c      	mov	r4, r3
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800156a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	3734      	adds	r7, #52	; 0x34
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}
 8001576:	bf00      	nop
 8001578:	20005a2c 	.word	0x20005a2c
 800157c:	08016aa0 	.word	0x08016aa0
 8001580:	08001659 	.word	0x08001659
 8001584:	08001693 	.word	0x08001693
 8001588:	200002ae 	.word	0x200002ae
 800158c:	08016a28 	.word	0x08016a28
 8001590:	08016a40 	.word	0x08016a40
 8001594:	08016a4c 	.word	0x08016a4c
 8001598:	08016a60 	.word	0x08016a60
 800159c:	08016a68 	.word	0x08016a68
 80015a0:	08016a80 	.word	0x08016a80
 80015a4:	200002af 	.word	0x200002af
 80015a8:	08016ab8 	.word	0x08016ab8

080015ac <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	1d3c      	adds	r4, r7, #4
 80015b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015b8:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80015ba:	f107 0214 	add.w	r2, r7, #20
 80015be:	1d38      	adds	r0, r7, #4
 80015c0:	2301      	movs	r3, #1
 80015c2:	2127      	movs	r1, #39	; 0x27
 80015c4:	f005 fb06 	bl	8006bd4 <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 80015c8:	7d3b      	ldrb	r3, [r7, #20]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d011      	beq.n	80015f8 <MRT_LPS22HH_getPressure+0x4c>
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <MRT_LPS22HH_getPressure+0x54>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4908      	ldr	r1, [pc, #32]	; (8001600 <MRT_LPS22HH_getPressure+0x54>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f005 fbe7 	bl	8006db2 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MRT_LPS22HH_getPressure+0x54>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f005 fb23 	bl	8006c34 <lps22hh_from_lsb_to_hpa>
 80015ee:	eef0 7a40 	vmov.f32	s15, s0
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80015f8:	bf00      	nop
 80015fa:	371c      	adds	r7, #28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd90      	pop	{r4, r7, pc}
 8001600:	200002a8 	.word	0x200002a8

08001604 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	1d3c      	adds	r4, r7, #4
 800160c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001610:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001612:	f107 0217 	add.w	r2, r7, #23
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f005 fbb0 	bl	8006d80 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d012      	beq.n	800164c <MRT_LPS22HH_getTemperature+0x48>
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MRT_LPS22HH_getTemperature+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	801a      	strh	r2, [r3, #0]
	  memset(&lps_data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4909      	ldr	r1, [pc, #36]	; (8001654 <MRT_LPS22HH_getTemperature+0x50>)
 8001630:	4618      	mov	r0, r3
 8001632:	f005 fbe7 	bl	8006e04 <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <MRT_LPS22HH_getTemperature+0x50>)
 8001638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163c:	4618      	mov	r0, r3
 800163e:	f005 fb11 	bl	8006c64 <lps22hh_from_lsb_to_celsius>
 8001642:	eef0 7a40 	vmov.f32	s15, s0
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800164c:	bf00      	nop
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd90      	pop	{r4, r7, pc}
 8001654:	200002ac 	.word	0x200002ac

08001658 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af04      	add	r7, sp, #16
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	461a      	mov	r2, r3
 8001664:	460b      	mov	r3, r1
 8001666:	72fb      	strb	r3, [r7, #11]
 8001668:	4613      	mov	r3, r2
 800166a:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	b29a      	uxth	r2, r3
 8001670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001674:	9302      	str	r3, [sp, #8]
 8001676:	893b      	ldrh	r3, [r7, #8]
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2301      	movs	r3, #1
 8001680:	21b9      	movs	r1, #185	; 0xb9
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f007 fa76 	bl	8008b74 <HAL_I2C_Mem_Write>
  return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b088      	sub	sp, #32
 8001696:	af04      	add	r7, sp, #16
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	461a      	mov	r2, r3
 800169e:	460b      	mov	r3, r1
 80016a0:	72fb      	strb	r3, [r7, #11]
 80016a2:	4613      	mov	r3, r2
 80016a4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80016a6:	7afb      	ldrb	r3, [r7, #11]
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	893b      	ldrh	r3, [r7, #8]
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	21b9      	movs	r1, #185	; 0xb9
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f007 fb53 	bl	8008d68 <HAL_I2C_Mem_Read>
  return 0;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016d0:	f3bf 8f4f 	dsb	sy
}
 80016d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <__NVIC_SystemReset+0x24>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016de:	4904      	ldr	r1, [pc, #16]	; (80016f0 <__NVIC_SystemReset+0x24>)
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <__NVIC_SystemReset+0x28>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016e6:	f3bf 8f4f 	dsb	sy
}
 80016ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <__NVIC_SystemReset+0x20>
 80016f0:	e000ed00 	.word	0xe000ed00
 80016f4:	05fa0004 	.word	0x05fa0004

080016f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fa:	b099      	sub	sp, #100	; 0x64
 80016fc:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fe:	f006 fb13 	bl	8007d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001702:	f000 f975 	bl	80019f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001706:	f000 fd05 	bl	8002114 <MX_GPIO_Init>
  MX_ADC1_Init();
 800170a:	f000 f9d3 	bl	8001ab4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800170e:	f000 fa23 	bl	8001b58 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001712:	f000 fa61 	bl	8001bd8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001716:	f000 fa9f 	bl	8001c58 <MX_I2C3_Init>
  MX_SPI2_Init();
 800171a:	f000 fb83 	bl	8001e24 <MX_SPI2_Init>
  MX_SPI4_Init();
 800171e:	f000 fbb7 	bl	8001e90 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001722:	f000 fbeb 	bl	8001efc <MX_SPI5_Init>
  MX_TIM2_Init();
 8001726:	f000 fc1f 	bl	8001f68 <MX_TIM2_Init>
  MX_UART8_Init();
 800172a:	f000 fc75 	bl	8002018 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800172e:	f000 fc9d 	bl	800206c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001732:	f000 fcc5 	bl	80020c0 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001736:	f000 fae9 	bl	8001d0c <MX_RTC_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2102      	movs	r1, #2
 800173e:	488a      	ldr	r0, [pc, #552]	; (8001968 <main+0x270>)
 8001740:	f007 f8a2 	bl	8008888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	2104      	movs	r1, #4
 8001748:	4887      	ldr	r0, [pc, #540]	; (8001968 <main+0x270>)
 800174a:	f007 f89d 	bl	8008888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2108      	movs	r1, #8
 8001752:	4885      	ldr	r0, [pc, #532]	; (8001968 <main+0x270>)
 8001754:	f007 f898 	bl	8008888 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001758:	2201      	movs	r2, #1
 800175a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175e:	4883      	ldr	r0, [pc, #524]	; (800196c <main+0x274>)
 8001760:	f007 f892 	bl	8008888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001764:	2200      	movs	r2, #0
 8001766:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176a:	4880      	ldr	r0, [pc, #512]	; (800196c <main+0x274>)
 800176c:	f007 f88c 	bl	8008888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001776:	487d      	ldr	r0, [pc, #500]	; (800196c <main+0x274>)
 8001778:	f007 f886 	bl	8008888 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 800177c:	2201      	movs	r2, #1
 800177e:	2102      	movs	r1, #2
 8001780:	487a      	ldr	r0, [pc, #488]	; (800196c <main+0x274>)
 8001782:	f007 f881 	bl	8008888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178c:	4878      	ldr	r0, [pc, #480]	; (8001970 <main+0x278>)
 800178e:	f007 f87b 	bl	8008888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001798:	4875      	ldr	r0, [pc, #468]	; (8001970 <main+0x278>)
 800179a:	f007 f875 	bl	8008888 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 800179e:	2200      	movs	r2, #0
 80017a0:	2104      	movs	r1, #4
 80017a2:	4874      	ldr	r0, [pc, #464]	; (8001974 <main+0x27c>)
 80017a4:	f007 f870 	bl	8008888 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ae:	4871      	ldr	r0, [pc, #452]	; (8001974 <main+0x27c>)
 80017b0:	f007 f86a 	bl	8008888 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ba:	486c      	ldr	r0, [pc, #432]	; (800196c <main+0x274>)
 80017bc:	f007 f864 	bl	8008888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80017c0:	2200      	movs	r2, #0
 80017c2:	2180      	movs	r1, #128	; 0x80
 80017c4:	486c      	ldr	r0, [pc, #432]	; (8001978 <main+0x280>)
 80017c6:	f007 f85f 	bl	8008888 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2140      	movs	r1, #64	; 0x40
 80017ce:	486a      	ldr	r0, [pc, #424]	; (8001978 <main+0x280>)
 80017d0:	f007 f85a 	bl	8008888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	2120      	movs	r1, #32
 80017d8:	4867      	ldr	r0, [pc, #412]	; (8001978 <main+0x280>)
 80017da:	f007 f855 	bl	8008888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	2110      	movs	r1, #16
 80017e2:	4865      	ldr	r0, [pc, #404]	; (8001978 <main+0x280>)
 80017e4:	f007 f850 	bl	8008888 <HAL_GPIO_WritePin>
   *-Activate freeRTOS
   *-Change SysTic to any other timer (done in .ioc)
   *-Include the path to all includes folders of the drivers (for C and C++ linkers)
   */

  HAL_UART_Transmit(&DEBUG_UART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	2213      	movs	r2, #19
 80017ee:	4963      	ldr	r1, [pc, #396]	; (800197c <main+0x284>)
 80017f0:	4863      	ldr	r0, [pc, #396]	; (8001980 <main+0x288>)
 80017f2:	f00b f990 	bl	800cb16 <HAL_UART_Transmit>
   * -(Optional) Use MCU APB1 freeze register to freeze the WD in StandByMode instead of resetting the FC
   * -(Optional) Setup alarm A and the clock time in .ioc (not recommend because random resets)
   * The rest have been taken care of
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */
  MRT_setRTC(0x0,0x0,0x0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	2000      	movs	r0, #0
 80017fc:	f006 f9be 	bl	8007b7c <MRT_setRTC>
  MRT_setAlarmA(WHEN_SLEEP_TIME_HOURS,WHEN_SLEEP_TIME_MIN,WHEN_SLEEP_TIME_SEC);
 8001800:	2215      	movs	r2, #21
 8001802:	2100      	movs	r1, #0
 8001804:	2000      	movs	r0, #0
 8001806:	f006 f97b 	bl	8007b00 <MRT_setAlarmA>
  MRT_SetupRTOS(DEBUG_UART,SLEEP_TIME);
 800180a:	4e5d      	ldr	r6, [pc, #372]	; (8001980 <main+0x288>)
 800180c:	231e      	movs	r3, #30
 800180e:	930d      	str	r3, [sp, #52]	; 0x34
 8001810:	466d      	mov	r5, sp
 8001812:	f106 0410 	add.w	r4, r6, #16
 8001816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001820:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	602b      	str	r3, [r5, #0]
 8001826:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800182a:	f006 f84b 	bl	80078c4 <MRT_SetupRTOS>

  /*
   * For external FLASH memory
   *
   */
	MRT_externalFlashSetup(&DEBUG_UART);
 800182e:	4854      	ldr	r0, [pc, #336]	; (8001980 <main+0x288>)
 8001830:	f001 ffc4 	bl	80037bc <MRT_externalFlashSetup>

  /*
   * For Iridium:
   * -Set the project as c++
   */
	HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 8001834:	2201      	movs	r2, #1
 8001836:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800183a:	484e      	ldr	r0, [pc, #312]	; (8001974 <main+0x27c>)
 800183c:	f007 f824 	bl	8008888 <HAL_GPIO_WritePin>
   uint8_t lol = MRT_Static_Iridium_Setup(DEBUG_UART);
 8001840:	4e4f      	ldr	r6, [pc, #316]	; (8001980 <main+0x288>)
 8001842:	466d      	mov	r5, sp
 8001844:	f106 0410 	add.w	r4, r6, #16
 8001848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800184a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800184c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800184e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	602b      	str	r3, [r5, #0]
 8001858:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800185c:	f004 fc0e 	bl	800607c <MRT_Static_Iridium_Setup>
 8001860:	4603      	mov	r3, r0
 8001862:	75fb      	strb	r3, [r7, #23]

  /*
   * For LSM6DSR
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
  lsm_ctx = MRT_LSM6DSR_Setup(&LSM_I2C, &DEBUG_UART);
 8001864:	4c47      	ldr	r4, [pc, #284]	; (8001984 <main+0x28c>)
 8001866:	463b      	mov	r3, r7
 8001868:	4a45      	ldr	r2, [pc, #276]	; (8001980 <main+0x288>)
 800186a:	4947      	ldr	r1, [pc, #284]	; (8001988 <main+0x290>)
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fc67 	bl	8001140 <MRT_LSM6DSR_Setup>
 8001872:	463b      	mov	r3, r7
 8001874:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001878:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   /*
    * For LPS22HH
    *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
    */
  lps_ctx = MRT_LPS22HH_Setup(&LPS_I2C, &DEBUG_UART);
 800187c:	4c43      	ldr	r4, [pc, #268]	; (800198c <main+0x294>)
 800187e:	463b      	mov	r3, r7
 8001880:	4a3f      	ldr	r2, [pc, #252]	; (8001980 <main+0x288>)
 8001882:	4941      	ldr	r1, [pc, #260]	; (8001988 <main+0x290>)
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fdd9 	bl	800143c <MRT_LPS22HH_Setup>
 800188a:	463b      	mov	r3, r7
 800188c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001890:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    * For the GPS:
    * -huart6 on v4.3
    * -Set its uart to 9600
    *
    */
   GPS_init(&GPS_UART, &DEBUG_UART);
 8001894:	493a      	ldr	r1, [pc, #232]	; (8001980 <main+0x288>)
 8001896:	483e      	ldr	r0, [pc, #248]	; (8001990 <main+0x298>)
 8001898:	f001 ff5c 	bl	8003754 <GPS_init>

   /*
    * For the xtend
    * -huart3 on v4.3
    */
   HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET); //TODO is it necessary?
 800189c:	2200      	movs	r2, #0
 800189e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018a6:	f006 ffef 	bl	8008888 <HAL_GPIO_WritePin>

   /*
    * For the SRadio
    * -SPI2 on v4.3
    */
	set_hspi(SRADIO_SPI);
 80018aa:	4c3a      	ldr	r4, [pc, #232]	; (8001994 <main+0x29c>)
 80018ac:	4668      	mov	r0, sp
 80018ae:	f104 0310 	add.w	r3, r4, #16
 80018b2:	2248      	movs	r2, #72	; 0x48
 80018b4:	4619      	mov	r1, r3
 80018b6:	f00f fa69 	bl	8010d8c <memcpy>
 80018ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018be:	f00b fd7d 	bl	800d3bc <set_hspi>
	// SPI2_SX_CS_GPIO_Port
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 80018c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c6:	4834      	ldr	r0, [pc, #208]	; (8001998 <main+0x2a0>)
 80018c8:	f00b fd20 	bl	800d30c <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 80018cc:	2108      	movs	r1, #8
 80018ce:	4827      	ldr	r0, [pc, #156]	; (800196c <main+0x274>)
 80018d0:	f00b fd32 	bl	800d338 <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 80018d4:	2104      	movs	r1, #4
 80018d6:	4825      	ldr	r0, [pc, #148]	; (800196c <main+0x274>)
 80018d8:	f00b fd44 	bl	800d364 <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 80018dc:	2110      	movs	r1, #16
 80018de:	4823      	ldr	r0, [pc, #140]	; (800196c <main+0x274>)
 80018e0:	f00b fd56 	bl	800d390 <set_DIO1_pin>
	Tx_setup();
 80018e4:	f00b fd82 	bl	800d3ec <Tx_setup>
   *random resets. Now the problem is how do we start the FC from the beginning if we have a random
   *amount of resets?
   *Solution : We use the external IN_Button has an external reset that resets the board from
   *the beginning using the callback function (defined in MRT_Helpers.c)
   */
  MX_IWDG_Init();
 80018e8:	f000 f9f6 	bl	8001cd8 <MX_IWDG_Init>
//TODO DISABLE EXTERNAL BUTTON INTERRUPT ONCE ROCKET IS ARMED

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018ec:	f00c f9bc 	bl	800dc68 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 80018f0:	4a2a      	ldr	r2, [pc, #168]	; (800199c <main+0x2a4>)
 80018f2:	2100      	movs	r1, #0
 80018f4:	482a      	ldr	r0, [pc, #168]	; (80019a0 <main+0x2a8>)
 80018f6:	f00c fa01 	bl	800dcfc <osThreadNew>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a29      	ldr	r2, [pc, #164]	; (80019a4 <main+0x2ac>)
 80018fe:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001900:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <main+0x2b0>)
 8001902:	2100      	movs	r1, #0
 8001904:	4829      	ldr	r0, [pc, #164]	; (80019ac <main+0x2b4>)
 8001906:	f00c f9f9 	bl	800dcfc <osThreadNew>
 800190a:	4603      	mov	r3, r0
 800190c:	4a28      	ldr	r2, [pc, #160]	; (80019b0 <main+0x2b8>)
 800190e:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 8001910:	4a28      	ldr	r2, [pc, #160]	; (80019b4 <main+0x2bc>)
 8001912:	2100      	movs	r1, #0
 8001914:	4828      	ldr	r0, [pc, #160]	; (80019b8 <main+0x2c0>)
 8001916:	f00c f9f1 	bl	800dcfc <osThreadNew>
 800191a:	4603      	mov	r3, r0
 800191c:	4a27      	ldr	r2, [pc, #156]	; (80019bc <main+0x2c4>)
 800191e:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 8001920:	4a27      	ldr	r2, [pc, #156]	; (80019c0 <main+0x2c8>)
 8001922:	2100      	movs	r1, #0
 8001924:	4827      	ldr	r0, [pc, #156]	; (80019c4 <main+0x2cc>)
 8001926:	f00c f9e9 	bl	800dcfc <osThreadNew>
 800192a:	4603      	mov	r3, r0
 800192c:	4a26      	ldr	r2, [pc, #152]	; (80019c8 <main+0x2d0>)
 800192e:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 8001930:	4a26      	ldr	r2, [pc, #152]	; (80019cc <main+0x2d4>)
 8001932:	2100      	movs	r1, #0
 8001934:	4826      	ldr	r0, [pc, #152]	; (80019d0 <main+0x2d8>)
 8001936:	f00c f9e1 	bl	800dcfc <osThreadNew>
 800193a:	4603      	mov	r3, r0
 800193c:	4a25      	ldr	r2, [pc, #148]	; (80019d4 <main+0x2dc>)
 800193e:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 8001940:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <main+0x2e0>)
 8001942:	2100      	movs	r1, #0
 8001944:	4825      	ldr	r0, [pc, #148]	; (80019dc <main+0x2e4>)
 8001946:	f00c f9d9 	bl	800dcfc <osThreadNew>
 800194a:	4603      	mov	r3, r0
 800194c:	4a24      	ldr	r2, [pc, #144]	; (80019e0 <main+0x2e8>)
 800194e:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 8001950:	4a24      	ldr	r2, [pc, #144]	; (80019e4 <main+0x2ec>)
 8001952:	2100      	movs	r1, #0
 8001954:	4824      	ldr	r0, [pc, #144]	; (80019e8 <main+0x2f0>)
 8001956:	f00c f9d1 	bl	800dcfc <osThreadNew>
 800195a:	4603      	mov	r3, r0
 800195c:	4a23      	ldr	r2, [pc, #140]	; (80019ec <main+0x2f4>)
 800195e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001960:	f00c f9a6 	bl	800dcb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001964:	e7fe      	b.n	8001964 <main+0x26c>
 8001966:	bf00      	nop
 8001968:	40020800 	.word	0x40020800
 800196c:	40021800 	.word	0x40021800
 8001970:	40021400 	.word	0x40021400
 8001974:	40021000 	.word	0x40021000
 8001978:	40020c00 	.word	0x40020c00
 800197c:	08016b20 	.word	0x08016b20
 8001980:	20005eac 	.word	0x20005eac
 8001984:	20005f98 	.word	0x20005f98
 8001988:	20005a30 	.word	0x20005a30
 800198c:	20005f8c 	.word	0x20005f8c
 8001990:	20005ef0 	.word	0x20005ef0
 8001994:	20005a84 	.word	0x20005a84
 8001998:	40020400 	.word	0x40020400
 800199c:	08018568 	.word	0x08018568
 80019a0:	08002439 	.word	0x08002439
 80019a4:	20005c60 	.word	0x20005c60
 80019a8:	0801858c 	.word	0x0801858c
 80019ac:	08002491 	.word	0x08002491
 80019b0:	20005ea4 	.word	0x20005ea4
 80019b4:	080185b0 	.word	0x080185b0
 80019b8:	0800249f 	.word	0x0800249f
 80019bc:	20005ea8 	.word	0x20005ea8
 80019c0:	080185d4 	.word	0x080185d4
 80019c4:	080024ad 	.word	0x080024ad
 80019c8:	20005f88 	.word	0x20005f88
 80019cc:	080185f8 	.word	0x080185f8
 80019d0:	0800254d 	.word	0x0800254d
 80019d4:	20005fa4 	.word	0x20005fa4
 80019d8:	0801861c 	.word	0x0801861c
 80019dc:	08002559 	.word	0x08002559
 80019e0:	20005e34 	.word	0x20005e34
 80019e4:	08018640 	.word	0x08018640
 80019e8:	08002815 	.word	0x08002815
 80019ec:	20005c4c 	.word	0x20005c4c

080019f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b094      	sub	sp, #80	; 0x50
 80019f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f6:	f107 0320 	add.w	r3, r7, #32
 80019fa:	2230      	movs	r2, #48	; 0x30
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f00f f9ec 	bl	8010ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	4b24      	ldr	r3, [pc, #144]	; (8001aac <SystemClock_Config+0xbc>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4a23      	ldr	r2, [pc, #140]	; (8001aac <SystemClock_Config+0xbc>)
 8001a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a22:	6413      	str	r3, [r2, #64]	; 0x40
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <SystemClock_Config+0xbc>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <SystemClock_Config+0xc0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a3c:	4a1c      	ldr	r2, [pc, #112]	; (8001ab0 <SystemClock_Config+0xc0>)
 8001a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <SystemClock_Config+0xc0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001a50:	2309      	movs	r3, #9
 8001a52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	4618      	mov	r0, r3
 8001a68:	f008 f840 	bl	8009aec <HAL_RCC_OscConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001a72:	f000 ff35 	bl	80028e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a76:	230f      	movs	r3, #15
 8001a78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f008 faa2 	bl	8009fdc <HAL_RCC_ClockConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001a9e:	f000 ff1f 	bl	80028e0 <Error_Handler>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3750      	adds	r7, #80	; 0x50
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40007000 	.word	0x40007000

08001ab4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aba:	463b      	mov	r3, r7
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ac6:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001ac8:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <MX_ADC1_Init+0x9c>)
 8001aca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001acc:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ad8:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ade:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001af4:	4a17      	ldr	r2, [pc, #92]	; (8001b54 <MX_ADC1_Init+0xa0>)
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b12:	480e      	ldr	r0, [pc, #56]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001b14:	f006 f96e 	bl	8007df4 <HAL_ADC_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b1e:	f000 fedf 	bl	80028e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b22:	2306      	movs	r3, #6
 8001b24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b26:	2301      	movs	r3, #1
 8001b28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b2e:	463b      	mov	r3, r7
 8001b30:	4619      	mov	r1, r3
 8001b32:	4806      	ldr	r0, [pc, #24]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001b34:	f006 f9a2 	bl	8007e7c <HAL_ADC_ConfigChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b3e:	f000 fecf 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20005c68 	.word	0x20005c68
 8001b50:	40012000 	.word	0x40012000
 8001b54:	0f000001 	.word	0x0f000001

08001b58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <MX_I2C1_Init+0x74>)
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <MX_I2C1_Init+0x78>)
 8001b60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b62:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <MX_I2C1_Init+0x74>)
 8001b64:	4a1b      	ldr	r2, [pc, #108]	; (8001bd4 <MX_I2C1_Init+0x7c>)
 8001b66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <MX_I2C1_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <MX_I2C1_Init+0x74>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <MX_I2C1_Init+0x74>)
 8001b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <MX_I2C1_Init+0x74>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <MX_I2C1_Init+0x74>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_I2C1_Init+0x74>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_I2C1_Init+0x74>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b94:	480d      	ldr	r0, [pc, #52]	; (8001bcc <MX_I2C1_Init+0x74>)
 8001b96:	f006 fea9 	bl	80088ec <HAL_I2C_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ba0:	f000 fe9e 	bl	80028e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4809      	ldr	r0, [pc, #36]	; (8001bcc <MX_I2C1_Init+0x74>)
 8001ba8:	f007 fe95 	bl	80098d6 <HAL_I2CEx_ConfigAnalogFilter>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001bb2:	f000 fe95 	bl	80028e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4804      	ldr	r0, [pc, #16]	; (8001bcc <MX_I2C1_Init+0x74>)
 8001bba:	f007 fec8 	bl	800994e <HAL_I2CEx_ConfigDigitalFilter>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001bc4:	f000 fe8c 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20005b98 	.word	0x20005b98
 8001bd0:	40005400 	.word	0x40005400
 8001bd4:	000186a0 	.word	0x000186a0

08001bd8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <MX_I2C2_Init+0x74>)
 8001bde:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <MX_I2C2_Init+0x78>)
 8001be0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <MX_I2C2_Init+0x74>)
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <MX_I2C2_Init+0x7c>)
 8001be6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <MX_I2C2_Init+0x74>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <MX_I2C2_Init+0x74>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <MX_I2C2_Init+0x74>)
 8001bf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bfa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <MX_I2C2_Init+0x74>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <MX_I2C2_Init+0x74>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <MX_I2C2_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <MX_I2C2_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c14:	480d      	ldr	r0, [pc, #52]	; (8001c4c <MX_I2C2_Init+0x74>)
 8001c16:	f006 fe69 	bl	80088ec <HAL_I2C_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c20:	f000 fe5e 	bl	80028e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c24:	2100      	movs	r1, #0
 8001c26:	4809      	ldr	r0, [pc, #36]	; (8001c4c <MX_I2C2_Init+0x74>)
 8001c28:	f007 fe55 	bl	80098d6 <HAL_I2CEx_ConfigAnalogFilter>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001c32:	f000 fe55 	bl	80028e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c36:	2100      	movs	r1, #0
 8001c38:	4804      	ldr	r0, [pc, #16]	; (8001c4c <MX_I2C2_Init+0x74>)
 8001c3a:	f007 fe88 	bl	800994e <HAL_I2CEx_ConfigDigitalFilter>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001c44:	f000 fe4c 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20005bf8 	.word	0x20005bf8
 8001c50:	40005800 	.word	0x40005800
 8001c54:	000186a0 	.word	0x000186a0

08001c58 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <MX_I2C3_Init+0x74>)
 8001c5e:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <MX_I2C3_Init+0x78>)
 8001c60:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <MX_I2C3_Init+0x74>)
 8001c64:	4a1b      	ldr	r2, [pc, #108]	; (8001cd4 <MX_I2C3_Init+0x7c>)
 8001c66:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <MX_I2C3_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <MX_I2C3_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c74:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <MX_I2C3_Init+0x74>)
 8001c76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c7a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <MX_I2C3_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <MX_I2C3_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <MX_I2C3_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <MX_I2C3_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c94:	480d      	ldr	r0, [pc, #52]	; (8001ccc <MX_I2C3_Init+0x74>)
 8001c96:	f006 fe29 	bl	80088ec <HAL_I2C_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ca0:	f000 fe1e 	bl	80028e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4809      	ldr	r0, [pc, #36]	; (8001ccc <MX_I2C3_Init+0x74>)
 8001ca8:	f007 fe15 	bl	80098d6 <HAL_I2CEx_ConfigAnalogFilter>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001cb2:	f000 fe15 	bl	80028e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <MX_I2C3_Init+0x74>)
 8001cba:	f007 fe48 	bl	800994e <HAL_I2CEx_ConfigDigitalFilter>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001cc4:	f000 fe0c 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20005a30 	.word	0x20005a30
 8001cd0:	40005c00 	.word	0x40005c00
 8001cd4:	000186a0 	.word	0x000186a0

08001cd8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_IWDG_Init+0x2c>)
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <MX_IWDG_Init+0x30>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_IWDG_Init+0x2c>)
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_IWDG_Init+0x2c>)
 8001cea:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001cee:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001cf0:	4804      	ldr	r0, [pc, #16]	; (8001d04 <MX_IWDG_Init+0x2c>)
 8001cf2:	f007 fe6b 	bl	80099cc <HAL_IWDG_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001cfc:	f000 fdf0 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20005bec 	.word	0x20005bec
 8001d08:	40003000 	.word	0x40003000

08001d0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b090      	sub	sp, #64	; 0x40
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001d22:	2300      	movs	r3, #0
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001d26:	463b      	mov	r3, r7
 8001d28:	2228      	movs	r2, #40	; 0x28
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f00f f855 	bl	8010ddc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d32:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <MX_RTC_Init+0x110>)
 8001d34:	4a3a      	ldr	r2, [pc, #232]	; (8001e20 <MX_RTC_Init+0x114>)
 8001d36:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d38:	4b38      	ldr	r3, [pc, #224]	; (8001e1c <MX_RTC_Init+0x110>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <MX_RTC_Init+0x110>)
 8001d40:	227f      	movs	r2, #127	; 0x7f
 8001d42:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d44:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <MX_RTC_Init+0x110>)
 8001d46:	22ff      	movs	r2, #255	; 0xff
 8001d48:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d4a:	4b34      	ldr	r3, [pc, #208]	; (8001e1c <MX_RTC_Init+0x110>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d50:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <MX_RTC_Init+0x110>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d56:	4b31      	ldr	r3, [pc, #196]	; (8001e1c <MX_RTC_Init+0x110>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d5c:	482f      	ldr	r0, [pc, #188]	; (8001e1c <MX_RTC_Init+0x110>)
 8001d5e:	f008 fd27 	bl	800a7b0 <HAL_RTC_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001d68:	f000 fdba 	bl	80028e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4823      	ldr	r0, [pc, #140]	; (8001e1c <MX_RTC_Init+0x110>)
 8001d90:	f008 fd9f 	bl	800a8d2 <HAL_RTC_SetTime>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001d9a:	f000 fda1 	bl	80028e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001da4:	2301      	movs	r3, #1
 8001da6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4817      	ldr	r0, [pc, #92]	; (8001e1c <MX_RTC_Init+0x110>)
 8001dc0:	f008 fea2 	bl	800ab08 <HAL_RTC_SetDate>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001dca:	f000 fd89 	bl	80028e0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001df2:	2301      	movs	r3, #1
 8001df4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001dfe:	463b      	mov	r3, r7
 8001e00:	2201      	movs	r2, #1
 8001e02:	4619      	mov	r1, r3
 8001e04:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_RTC_Init+0x110>)
 8001e06:	f008 ff75 	bl	800acf4 <HAL_RTC_SetAlarm_IT>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001e10:	f000 fd66 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	3740      	adds	r7, #64	; 0x40
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20005e10 	.word	0x20005e10
 8001e20:	40002800 	.word	0x40002800

08001e24 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <MX_SPI2_Init+0x64>)
 8001e2a:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <MX_SPI2_Init+0x68>)
 8001e2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <MX_SPI2_Init+0x64>)
 8001e30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <MX_SPI2_Init+0x64>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <MX_SPI2_Init+0x64>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_SPI2_Init+0x64>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <MX_SPI2_Init+0x64>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_SPI2_Init+0x64>)
 8001e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_SPI2_Init+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <MX_SPI2_Init+0x64>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_SPI2_Init+0x64>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <MX_SPI2_Init+0x64>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_SPI2_Init+0x64>)
 8001e70:	220a      	movs	r2, #10
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e74:	4804      	ldr	r0, [pc, #16]	; (8001e88 <MX_SPI2_Init+0x64>)
 8001e76:	f009 fa6d 	bl	800b354 <HAL_SPI_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e80:	f000 fd2e 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20005a84 	.word	0x20005a84
 8001e8c:	40003800 	.word	0x40003800

08001e90 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001e94:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <MX_SPI4_Init+0x64>)
 8001e96:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <MX_SPI4_Init+0x68>)
 8001e98:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e9a:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <MX_SPI4_Init+0x64>)
 8001e9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ea0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001ea2:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <MX_SPI4_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <MX_SPI4_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <MX_SPI4_Init+0x64>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <MX_SPI4_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <MX_SPI4_Init+0x64>)
 8001ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <MX_SPI4_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <MX_SPI4_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <MX_SPI4_Init+0x64>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <MX_SPI4_Init+0x64>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <MX_SPI4_Init+0x64>)
 8001edc:	220a      	movs	r2, #10
 8001ede:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001ee0:	4804      	ldr	r0, [pc, #16]	; (8001ef4 <MX_SPI4_Init+0x64>)
 8001ee2:	f009 fa37 	bl	800b354 <HAL_SPI_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001eec:	f000 fcf8 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20005db8 	.word	0x20005db8
 8001ef8:	40013400 	.word	0x40013400

08001efc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <MX_SPI5_Init+0x64>)
 8001f02:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <MX_SPI5_Init+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <MX_SPI5_Init+0x64>)
 8001f08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f0c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <MX_SPI5_Init+0x64>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <MX_SPI5_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_SPI5_Init+0x64>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_SPI5_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <MX_SPI5_Init+0x64>)
 8001f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f2c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <MX_SPI5_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <MX_SPI5_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <MX_SPI5_Init+0x64>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <MX_SPI5_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_SPI5_Init+0x64>)
 8001f48:	220a      	movs	r2, #10
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <MX_SPI5_Init+0x64>)
 8001f4e:	f009 fa01 	bl	800b354 <HAL_SPI_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001f58:	f000 fcc2 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20005ae0 	.word	0x20005ae0
 8001f64:	40015000 	.word	0x40015000

08001f68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6e:	f107 0320 	add.w	r3, r7, #32
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]
 8001f86:	615a      	str	r2, [r3, #20]
 8001f88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f8a:	4b22      	ldr	r3, [pc, #136]	; (8002014 <MX_TIM2_Init+0xac>)
 8001f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <MX_TIM2_Init+0xac>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f98:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <MX_TIM2_Init+0xac>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <MX_TIM2_Init+0xac>)
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <MX_TIM2_Init+0xac>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <MX_TIM2_Init+0xac>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fb2:	4818      	ldr	r0, [pc, #96]	; (8002014 <MX_TIM2_Init+0xac>)
 8001fb4:	f00a f840 	bl	800c038 <HAL_TIM_PWM_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001fbe:	f000 fc8f 	bl	80028e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fca:	f107 0320 	add.w	r3, r7, #32
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4810      	ldr	r0, [pc, #64]	; (8002014 <MX_TIM2_Init+0xac>)
 8001fd2:	f00a fcc3 	bl	800c95c <HAL_TIMEx_MasterConfigSynchronization>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001fdc:	f000 fc80 	bl	80028e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe0:	2360      	movs	r3, #96	; 0x60
 8001fe2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4807      	ldr	r0, [pc, #28]	; (8002014 <MX_TIM2_Init+0xac>)
 8001ff8:	f00a f976 	bl	800c2e8 <HAL_TIM_PWM_ConfigChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002002:	f000 fc6d 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002006:	4803      	ldr	r0, [pc, #12]	; (8002014 <MX_TIM2_Init+0xac>)
 8002008:	f000 fec0 	bl	8002d8c <HAL_TIM_MspPostInit>

}
 800200c:	bf00      	nop
 800200e:	3728      	adds	r7, #40	; 0x28
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20005f40 	.word	0x20005f40

08002018 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_UART8_Init+0x4c>)
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <MX_UART8_Init+0x50>)
 8002020:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <MX_UART8_Init+0x4c>)
 8002024:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002028:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_UART8_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <MX_UART8_Init+0x4c>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <MX_UART8_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_UART8_Init+0x4c>)
 800203e:	220c      	movs	r2, #12
 8002040:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <MX_UART8_Init+0x4c>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_UART8_Init+0x4c>)
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_UART8_Init+0x4c>)
 8002050:	f00a fd14 	bl	800ca7c <HAL_UART_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800205a:	f000 fc41 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20005eac 	.word	0x20005eac
 8002068:	40007c00 	.word	0x40007c00

0800206c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <MX_USART3_UART_Init+0x4c>)
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <MX_USART3_UART_Init+0x50>)
 8002074:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <MX_USART3_UART_Init+0x4c>)
 8002078:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800207c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <MX_USART3_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <MX_USART3_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <MX_USART3_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_USART3_UART_Init+0x4c>)
 8002092:	220c      	movs	r2, #12
 8002094:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <MX_USART3_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <MX_USART3_UART_Init+0x4c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <MX_USART3_UART_Init+0x4c>)
 80020a4:	f00a fcea 	bl	800ca7c <HAL_UART_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020ae:	f000 fc17 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20005b3c 	.word	0x20005b3c
 80020bc:	40004800 	.word	0x40004800

080020c0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <MX_USART6_UART_Init+0x4c>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	; (8002110 <MX_USART6_UART_Init+0x50>)
 80020c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <MX_USART6_UART_Init+0x4c>)
 80020cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <MX_USART6_UART_Init+0x4c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <MX_USART6_UART_Init+0x4c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <MX_USART6_UART_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <MX_USART6_UART_Init+0x4c>)
 80020e6:	220c      	movs	r2, #12
 80020e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <MX_USART6_UART_Init+0x4c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <MX_USART6_UART_Init+0x4c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020f6:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_USART6_UART_Init+0x4c>)
 80020f8:	f00a fcc0 	bl	800ca7c <HAL_UART_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002102:	f000 fbed 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20005ef0 	.word	0x20005ef0
 8002110:	40011400 	.word	0x40011400

08002114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08e      	sub	sp, #56	; 0x38
 8002118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
 8002128:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
 800212e:	4bb5      	ldr	r3, [pc, #724]	; (8002404 <MX_GPIO_Init+0x2f0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4ab4      	ldr	r2, [pc, #720]	; (8002404 <MX_GPIO_Init+0x2f0>)
 8002134:	f043 0310 	orr.w	r3, r3, #16
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4bb2      	ldr	r3, [pc, #712]	; (8002404 <MX_GPIO_Init+0x2f0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	623b      	str	r3, [r7, #32]
 8002144:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	4bae      	ldr	r3, [pc, #696]	; (8002404 <MX_GPIO_Init+0x2f0>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4aad      	ldr	r2, [pc, #692]	; (8002404 <MX_GPIO_Init+0x2f0>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4bab      	ldr	r3, [pc, #684]	; (8002404 <MX_GPIO_Init+0x2f0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	4ba7      	ldr	r3, [pc, #668]	; (8002404 <MX_GPIO_Init+0x2f0>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4aa6      	ldr	r2, [pc, #664]	; (8002404 <MX_GPIO_Init+0x2f0>)
 800216c:	f043 0320 	orr.w	r3, r3, #32
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4ba4      	ldr	r3, [pc, #656]	; (8002404 <MX_GPIO_Init+0x2f0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	4ba0      	ldr	r3, [pc, #640]	; (8002404 <MX_GPIO_Init+0x2f0>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a9f      	ldr	r2, [pc, #636]	; (8002404 <MX_GPIO_Init+0x2f0>)
 8002188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b9d      	ldr	r3, [pc, #628]	; (8002404 <MX_GPIO_Init+0x2f0>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	4b99      	ldr	r3, [pc, #612]	; (8002404 <MX_GPIO_Init+0x2f0>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a98      	ldr	r2, [pc, #608]	; (8002404 <MX_GPIO_Init+0x2f0>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b96      	ldr	r3, [pc, #600]	; (8002404 <MX_GPIO_Init+0x2f0>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	4b92      	ldr	r3, [pc, #584]	; (8002404 <MX_GPIO_Init+0x2f0>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a91      	ldr	r2, [pc, #580]	; (8002404 <MX_GPIO_Init+0x2f0>)
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b8f      	ldr	r3, [pc, #572]	; (8002404 <MX_GPIO_Init+0x2f0>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	4b8b      	ldr	r3, [pc, #556]	; (8002404 <MX_GPIO_Init+0x2f0>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a8a      	ldr	r2, [pc, #552]	; (8002404 <MX_GPIO_Init+0x2f0>)
 80021dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b88      	ldr	r3, [pc, #544]	; (8002404 <MX_GPIO_Init+0x2f0>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	4b84      	ldr	r3, [pc, #528]	; (8002404 <MX_GPIO_Init+0x2f0>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a83      	ldr	r2, [pc, #524]	; (8002404 <MX_GPIO_Init+0x2f0>)
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b81      	ldr	r3, [pc, #516]	; (8002404 <MX_GPIO_Init+0x2f0>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 800220a:	2200      	movs	r2, #0
 800220c:	f248 4184 	movw	r1, #33924	; 0x8484
 8002210:	487d      	ldr	r0, [pc, #500]	; (8002408 <MX_GPIO_Init+0x2f4>)
 8002212:	f006 fb39 	bl	8008888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 800221c:	487b      	ldr	r0, [pc, #492]	; (800240c <MX_GPIO_Init+0x2f8>)
 800221e:	f006 fb33 	bl	8008888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002228:	4879      	ldr	r0, [pc, #484]	; (8002410 <MX_GPIO_Init+0x2fc>)
 800222a:	f006 fb2d 	bl	8008888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	2108      	movs	r1, #8
 8002232:	4878      	ldr	r0, [pc, #480]	; (8002414 <MX_GPIO_Init+0x300>)
 8002234:	f006 fb28 	bl	8008888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8002238:	2200      	movs	r2, #0
 800223a:	f645 213e 	movw	r1, #23102	; 0x5a3e
 800223e:	4876      	ldr	r0, [pc, #472]	; (8002418 <MX_GPIO_Init+0x304>)
 8002240:	f006 fb22 	bl	8008888 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224a:	4874      	ldr	r0, [pc, #464]	; (800241c <MX_GPIO_Init+0x308>)
 800224c:	f006 fb1c 	bl	8008888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002250:	2200      	movs	r2, #0
 8002252:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8002256:	4872      	ldr	r0, [pc, #456]	; (8002420 <MX_GPIO_Init+0x30c>)
 8002258:	f006 fb16 	bl	8008888 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 800225c:	f248 4384 	movw	r3, #33924	; 0x8484
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002262:	2301      	movs	r3, #1
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800226e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002272:	4619      	mov	r1, r3
 8002274:	4864      	ldr	r0, [pc, #400]	; (8002408 <MX_GPIO_Init+0x2f4>)
 8002276:	f006 f943 	bl	8008500 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 800227a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002280:	2301      	movs	r3, #1
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800228c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002290:	4619      	mov	r1, r3
 8002292:	485e      	ldr	r0, [pc, #376]	; (800240c <MX_GPIO_Init+0x2f8>)
 8002294:	f006 f934 	bl	8008500 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8002298:	2301      	movs	r3, #1
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800229c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80022a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022aa:	4619      	mov	r1, r3
 80022ac:	4858      	ldr	r0, [pc, #352]	; (8002410 <MX_GPIO_Init+0x2fc>)
 80022ae:	f006 f927 	bl	8008500 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 80022b2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b8:	2301      	movs	r3, #1
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c8:	4619      	mov	r1, r3
 80022ca:	4851      	ldr	r0, [pc, #324]	; (8002410 <MX_GPIO_Init+0x2fc>)
 80022cc:	f006 f918 	bl	8008500 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 80022d0:	2308      	movs	r3, #8
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d4:	2301      	movs	r3, #1
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 80022e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e4:	4619      	mov	r1, r3
 80022e6:	484b      	ldr	r0, [pc, #300]	; (8002414 <MX_GPIO_Init+0x300>)
 80022e8:	f006 f90a 	bl	8008500 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 80022ec:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f2:	2300      	movs	r3, #0
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fe:	4619      	mov	r1, r3
 8002300:	4843      	ldr	r0, [pc, #268]	; (8002410 <MX_GPIO_Init+0x2fc>)
 8002302:	f006 f8fd 	bl	8008500 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8002306:	2302      	movs	r3, #2
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	4619      	mov	r1, r3
 8002318:	4840      	ldr	r0, [pc, #256]	; (800241c <MX_GPIO_Init+0x308>)
 800231a:	f006 f8f1 	bl	8008500 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 800231e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002330:	4619      	mov	r1, r3
 8002332:	4836      	ldr	r0, [pc, #216]	; (800240c <MX_GPIO_Init+0x2f8>)
 8002334:	f006 f8e4 	bl	8008500 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 8002338:	f242 4301 	movw	r3, #9217	; 0x2401
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233e:	2300      	movs	r3, #0
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234a:	4619      	mov	r1, r3
 800234c:	4832      	ldr	r0, [pc, #200]	; (8002418 <MX_GPIO_Init+0x304>)
 800234e:	f006 f8d7 	bl	8008500 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8002352:	f645 233e 	movw	r3, #23102	; 0x5a3e
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002358:	2301      	movs	r3, #1
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2300      	movs	r3, #0
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002368:	4619      	mov	r1, r3
 800236a:	482b      	ldr	r0, [pc, #172]	; (8002418 <MX_GPIO_Init+0x304>)
 800236c:	f006 f8c8 	bl	8008500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8002370:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002376:	2300      	movs	r3, #0
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800237e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002382:	4619      	mov	r1, r3
 8002384:	4820      	ldr	r0, [pc, #128]	; (8002408 <MX_GPIO_Init+0x2f4>)
 8002386:	f006 f8bb 	bl	8008500 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 800238a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002390:	2301      	movs	r3, #1
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002398:	2300      	movs	r3, #0
 800239a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 800239c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a0:	4619      	mov	r1, r3
 80023a2:	481e      	ldr	r0, [pc, #120]	; (800241c <MX_GPIO_Init+0x308>)
 80023a4:	f006 f8ac 	bl	8008500 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80023a8:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ae:	2301      	movs	r3, #1
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023be:	4619      	mov	r1, r3
 80023c0:	4817      	ldr	r0, [pc, #92]	; (8002420 <MX_GPIO_Init+0x30c>)
 80023c2:	f006 f89d 	bl	8008500 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 80023c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 80023d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d8:	4619      	mov	r1, r3
 80023da:	4811      	ldr	r0, [pc, #68]	; (8002420 <MX_GPIO_Init+0x30c>)
 80023dc:	f006 f890 	bl	8008500 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 80023e0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f4:	4619      	mov	r1, r3
 80023f6:	4808      	ldr	r0, [pc, #32]	; (8002418 <MX_GPIO_Init+0x304>)
 80023f8:	f006 f882 	bl	8008500 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2105      	movs	r1, #5
 8002400:	2006      	movs	r0, #6
 8002402:	e00f      	b.n	8002424 <MX_GPIO_Init+0x310>
 8002404:	40023800 	.word	0x40023800
 8002408:	40021000 	.word	0x40021000
 800240c:	40021400 	.word	0x40021400
 8002410:	40020800 	.word	0x40020800
 8002414:	40020000 	.word	0x40020000
 8002418:	40021800 	.word	0x40021800
 800241c:	40020400 	.word	0x40020400
 8002420:	40020c00 	.word	0x40020c00
 8002424:	f006 f834 	bl	8008490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002428:	2006      	movs	r0, #6
 800242a:	f006 f84d 	bl	80084c8 <HAL_NVIC_EnableIRQ>

}
 800242e:	bf00      	nop
 8002430:	3738      	adds	r7, #56	; 0x38
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop

08002438 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	//osThreadExit();

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 8002440:	f00b fcee 	bl	800de20 <osThreadGetId>
 8002444:	4603      	mov	r3, r0
 8002446:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <StartMemory0+0x48>)
 8002448:	6013      	str	r3, [r2, #0]
		  //Write data to sd and flash


		  //Check if it's sleep time
		//if (flagA==1 && wu_flag !=1){
		  if (flagA==1){
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <StartMemory0+0x4c>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d111      	bne.n	8002476 <StartMemory0+0x3e>
			//Update iwdg_flag
			iwdg_flag = 1;
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <StartMemory0+0x50>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
			flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <StartMemory0+0x50>)
 800245a:	781a      	ldrb	r2, [r3, #0]
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <StartMemory0+0x54>)
 800245e:	709a      	strb	r2, [r3, #2]
			W25qxx_EraseSector(1);
 8002460:	2001      	movs	r0, #1
 8002462:	f001 fd5d 	bl	8003f20 <W25qxx_EraseSector>
			W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002466:	2303      	movs	r3, #3
 8002468:	2200      	movs	r2, #0
 800246a:	2101      	movs	r1, #1
 800246c:	4807      	ldr	r0, [pc, #28]	; (800248c <StartMemory0+0x54>)
 800246e:	f001 fea1 	bl	80041b4 <W25qxx_WriteSector>

			//Reset to deactivate IWDG
			NVIC_SystemReset();
 8002472:	f7ff f92b 	bl	80016cc <__NVIC_SystemReset>
		}

		  //osDelay(1000/DATA_FREQ);
		osDelay(3000);
 8002476:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800247a:	f00b fce2 	bl	800de42 <osDelay>
		  if (flagA==1){
 800247e:	e7e4      	b.n	800244a <StartMemory0+0x12>
 8002480:	20005b84 	.word	0x20005b84
 8002484:	2000050c 	.word	0x2000050c
 8002488:	200002df 	.word	0x200002df
 800248c:	20005b80 	.word	0x20005b80

08002490 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b0c2      	sub	sp, #264	; 0x108
 8002494:	af00      	add	r7, sp, #0
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEjection1 */

	osThreadExit();
 800249a:	f00b fccc 	bl	800de36 <osThreadExit>

0800249e <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */

	osThreadExit();
 80024a6:	f00b fcc6 	bl	800de36 <osThreadExit>
	...

080024ac <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//osThreadExit();

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 80024b4:	f00b fcb4 	bl	800de20 <osThreadGetId>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4a18      	ldr	r2, [pc, #96]	; (800251c <StartSensors3+0x70>)
 80024bc:	60d3      	str	r3, [r2, #12]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80024be:	2201      	movs	r2, #1
 80024c0:	2102      	movs	r1, #2
 80024c2:	4817      	ldr	r0, [pc, #92]	; (8002520 <StartSensors3+0x74>)
 80024c4:	f006 f9e0 	bl	8008888 <HAL_GPIO_WritePin>


	  //GPS
	  GPS_Poll(&latitude, &longitude, &time);
 80024c8:	4a16      	ldr	r2, [pc, #88]	; (8002524 <StartSensors3+0x78>)
 80024ca:	4917      	ldr	r1, [pc, #92]	; (8002528 <StartSensors3+0x7c>)
 80024cc:	4817      	ldr	r0, [pc, #92]	; (800252c <StartSensors3+0x80>)
 80024ce:	f000 fedf 	bl	8003290 <GPS_Poll>

  	  //LSM6DSR
  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 80024d2:	4a17      	ldr	r2, [pc, #92]	; (8002530 <StartSensors3+0x84>)
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <StartSensors3+0x88>)
 80024d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80024d8:	f7fe fefa 	bl	80012d0 <MRT_LSM6DSR_getAcceleration>
  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <StartSensors3+0x84>)
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <StartSensors3+0x8c>)
 80024e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80024e2:	f7fe ff65 	bl	80013b0 <MRT_LSM6DSR_getAngularRate>
	  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <StartSensors3+0x84>)
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <StartSensors3+0x90>)
 80024ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80024ec:	f7fe ff36 	bl	800135c <MRT_LSM6DSR_getTemperature>

	  //LPS22HH
  	  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 80024f0:	4a13      	ldr	r2, [pc, #76]	; (8002540 <StartSensors3+0x94>)
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <StartSensors3+0x98>)
 80024f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80024f6:	f7ff f859 	bl	80015ac <MRT_LPS22HH_getPressure>
	  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 80024fa:	4a11      	ldr	r2, [pc, #68]	; (8002540 <StartSensors3+0x94>)
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <StartSensors3+0x9c>)
 80024fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002500:	f7ff f880 	bl	8001604 <MRT_LPS22HH_getTemperature>

	  //TODO Pressure tank (just use an analog sensor if you don't have it)


	  //Thermocouple
	  Max31855_Read_Temp();
 8002504:	f005 fb7c 	bl	8007c00 <Max31855_Read_Temp>

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8002508:	2200      	movs	r2, #0
 800250a:	2102      	movs	r1, #2
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <StartSensors3+0x74>)
 800250e:	f006 f9bb 	bl	8008888 <HAL_GPIO_WritePin>

	  osDelay(1000/POLL_FREQ);
 8002512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002516:	f00b fc94 	bl	800de42 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 800251a:	e7d0      	b.n	80024be <StartSensors3+0x12>
 800251c:	20005b84 	.word	0x20005b84
 8002520:	40020800 	.word	0x40020800
 8002524:	20005e9c 	.word	0x20005e9c
 8002528:	20005e30 	.word	0x20005e30
 800252c:	20005f38 	.word	0x20005f38
 8002530:	20005f98 	.word	0x20005f98
 8002534:	200002b8 	.word	0x200002b8
 8002538:	200002c4 	.word	0x200002c4
 800253c:	200002d0 	.word	0x200002d0
 8002540:	20005f8c 	.word	0x20005f8c
 8002544:	200002b0 	.word	0x200002b0
 8002548:	200002b4 	.word	0x200002b4

0800254c <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	osThreadExit();
 8002554:	f00b fc6f 	bl	800de36 <osThreadExit>

08002558 <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 8002558:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800255c:	b0c6      	sub	sp, #280	; 0x118
 800255e:	af04      	add	r7, sp, #16
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	6018      	str	r0, [r3, #0]
	char buffer[TX_BUF_DIM];

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8002564:	2201      	movs	r2, #1
 8002566:	2108      	movs	r1, #8
 8002568:	4898      	ldr	r0, [pc, #608]	; (80027cc <StartPrinting+0x274>)
 800256a:	f006 f98d 	bl	8008888 <HAL_GPIO_WritePin>

	  //GPS
  	  /*
  	   * TODO HOW DO WE RESET THE TIME
  	   */
	  memset(gps_data, 0, GPS_DATA_BUF_DIM);
 800256e:	2264      	movs	r2, #100	; 0x64
 8002570:	2100      	movs	r1, #0
 8002572:	4897      	ldr	r0, [pc, #604]	; (80027d0 <StartPrinting+0x278>)
 8002574:	f00e fc32 	bl	8010ddc <memset>
	  sprintf(gps_data,"Alt: %.2f   Long: %.2f   Time: %.0f\r\n",latitude, longitude, time);
 8002578:	4b96      	ldr	r3, [pc, #600]	; (80027d4 <StartPrinting+0x27c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe f803 	bl	8000588 <__aeabi_f2d>
 8002582:	4680      	mov	r8, r0
 8002584:	4689      	mov	r9, r1
 8002586:	4b94      	ldr	r3, [pc, #592]	; (80027d8 <StartPrinting+0x280>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd fffc 	bl	8000588 <__aeabi_f2d>
 8002590:	4604      	mov	r4, r0
 8002592:	460d      	mov	r5, r1
 8002594:	4b91      	ldr	r3, [pc, #580]	; (80027dc <StartPrinting+0x284>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd fff5 	bl	8000588 <__aeabi_f2d>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025a6:	e9cd 4500 	strd	r4, r5, [sp]
 80025aa:	4642      	mov	r2, r8
 80025ac:	464b      	mov	r3, r9
 80025ae:	498c      	ldr	r1, [pc, #560]	; (80027e0 <StartPrinting+0x288>)
 80025b0:	4887      	ldr	r0, [pc, #540]	; (80027d0 <StartPrinting+0x278>)
 80025b2:	f00f ff0f 	bl	80123d4 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART,gps_data,strlen(gps_data),HAL_MAX_DELAY);
 80025b6:	4886      	ldr	r0, [pc, #536]	; (80027d0 <StartPrinting+0x278>)
 80025b8:	f7fd fe24 	bl	8000204 <strlen>
 80025bc:	4603      	mov	r3, r0
 80025be:	b29a      	uxth	r2, r3
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295
 80025c4:	4982      	ldr	r1, [pc, #520]	; (80027d0 <StartPrinting+0x278>)
 80025c6:	4887      	ldr	r0, [pc, #540]	; (80027e4 <StartPrinting+0x28c>)
 80025c8:	f00a faa5 	bl	800cb16 <HAL_UART_Transmit>

  	  //LSM6DSR
  	  memset(buffer, 0, TX_BUF_DIM);
 80025cc:	f107 0308 	add.w	r3, r7, #8
 80025d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f00e fc00 	bl	8010ddc <memset>
  	  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80025dc:	4b82      	ldr	r3, [pc, #520]	; (80027e8 <StartPrinting+0x290>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ffd1 	bl	8000588 <__aeabi_f2d>
 80025e6:	4680      	mov	r8, r0
 80025e8:	4689      	mov	r9, r1
 80025ea:	4b7f      	ldr	r3, [pc, #508]	; (80027e8 <StartPrinting+0x290>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd ffca 	bl	8000588 <__aeabi_f2d>
 80025f4:	4604      	mov	r4, r0
 80025f6:	460d      	mov	r5, r1
 80025f8:	4b7b      	ldr	r3, [pc, #492]	; (80027e8 <StartPrinting+0x290>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ffc3 	bl	8000588 <__aeabi_f2d>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	f107 0008 	add.w	r0, r7, #8
 800260a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800260e:	e9cd 4500 	strd	r4, r5, [sp]
 8002612:	4642      	mov	r2, r8
 8002614:	464b      	mov	r3, r9
 8002616:	4975      	ldr	r1, [pc, #468]	; (80027ec <StartPrinting+0x294>)
 8002618:	f00f fedc 	bl	80123d4 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 800261c:	f107 0308 	add.w	r3, r7, #8
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd fdef 	bl	8000204 <strlen>
 8002626:	4603      	mov	r3, r0
 8002628:	b29a      	uxth	r2, r3
 800262a:	f107 0108 	add.w	r1, r7, #8
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
 8002632:	486c      	ldr	r0, [pc, #432]	; (80027e4 <StartPrinting+0x28c>)
 8002634:	f00a fa6f 	bl	800cb16 <HAL_UART_Transmit>

  	  /*
  	   * TODO NEEDS FILTERING BUT WORKS (maybe acceleration needs filtering too)
  	   */
  	  memset(buffer, 0, TX_BUF_DIM);
 8002638:	f107 0308 	add.w	r3, r7, #8
 800263c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f00e fbca 	bl	8010ddc <memset>
  	  sprintf(buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8002648:	4b69      	ldr	r3, [pc, #420]	; (80027f0 <StartPrinting+0x298>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd ff9b 	bl	8000588 <__aeabi_f2d>
 8002652:	4680      	mov	r8, r0
 8002654:	4689      	mov	r9, r1
 8002656:	4b66      	ldr	r3, [pc, #408]	; (80027f0 <StartPrinting+0x298>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd ff94 	bl	8000588 <__aeabi_f2d>
 8002660:	4604      	mov	r4, r0
 8002662:	460d      	mov	r5, r1
 8002664:	4b62      	ldr	r3, [pc, #392]	; (80027f0 <StartPrinting+0x298>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd ff8d 	bl	8000588 <__aeabi_f2d>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	f107 0008 	add.w	r0, r7, #8
 8002676:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800267a:	e9cd 4500 	strd	r4, r5, [sp]
 800267e:	4642      	mov	r2, r8
 8002680:	464b      	mov	r3, r9
 8002682:	495c      	ldr	r1, [pc, #368]	; (80027f4 <StartPrinting+0x29c>)
 8002684:	f00f fea6 	bl	80123d4 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002688:	f107 0308 	add.w	r3, r7, #8
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd fdb9 	bl	8000204 <strlen>
 8002692:	4603      	mov	r3, r0
 8002694:	b29a      	uxth	r2, r3
 8002696:	f107 0108 	add.w	r1, r7, #8
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
 800269e:	4851      	ldr	r0, [pc, #324]	; (80027e4 <StartPrinting+0x28c>)
 80026a0:	f00a fa39 	bl	800cb16 <HAL_UART_Transmit>

	  memset(buffer, 0, TX_BUF_DIM);
 80026a4:	f107 0308 	add.w	r3, r7, #8
 80026a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f00e fb94 	bl	8010ddc <memset>
	  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", lsm_temperature_degC);
 80026b4:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <StartPrinting+0x2a0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd ff65 	bl	8000588 <__aeabi_f2d>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	f107 0008 	add.w	r0, r7, #8
 80026c6:	494d      	ldr	r1, [pc, #308]	; (80027fc <StartPrinting+0x2a4>)
 80026c8:	f00f fe84 	bl	80123d4 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd fd97 	bl	8000204 <strlen>
 80026d6:	4603      	mov	r3, r0
 80026d8:	b29a      	uxth	r2, r3
 80026da:	f107 0108 	add.w	r1, r7, #8
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	4840      	ldr	r0, [pc, #256]	; (80027e4 <StartPrinting+0x28c>)
 80026e4:	f00a fa17 	bl	800cb16 <HAL_UART_Transmit>


	  //LPS22HH
  	  memset(buffer, 0, TX_BUF_DIM);
 80026e8:	f107 0308 	add.w	r3, r7, #8
 80026ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f00e fb72 	bl	8010ddc <memset>
  	  sprintf(buffer,"Pressure [hPa]:%6.2f\r\n",pressure_hPa);
 80026f8:	4b41      	ldr	r3, [pc, #260]	; (8002800 <StartPrinting+0x2a8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd ff43 	bl	8000588 <__aeabi_f2d>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	f107 0008 	add.w	r0, r7, #8
 800270a:	493e      	ldr	r1, [pc, #248]	; (8002804 <StartPrinting+0x2ac>)
 800270c:	f00f fe62 	bl	80123d4 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd fd75 	bl	8000204 <strlen>
 800271a:	4603      	mov	r3, r0
 800271c:	b29a      	uxth	r2, r3
 800271e:	f107 0108 	add.w	r1, r7, #8
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
 8002726:	482f      	ldr	r0, [pc, #188]	; (80027e4 <StartPrinting+0x28c>)
 8002728:	f00a f9f5 	bl	800cb16 <HAL_UART_Transmit>

	  memset(buffer, 0, TX_BUF_DIM);
 800272c:	f107 0308 	add.w	r3, r7, #8
 8002730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f00e fb50 	bl	8010ddc <memset>
	  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", lps_temperature_degC);
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <StartPrinting+0x2b0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd ff21 	bl	8000588 <__aeabi_f2d>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	f107 0008 	add.w	r0, r7, #8
 800274e:	492b      	ldr	r1, [pc, #172]	; (80027fc <StartPrinting+0x2a4>)
 8002750:	f00f fe40 	bl	80123d4 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002754:	f107 0308 	add.w	r3, r7, #8
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd fd53 	bl	8000204 <strlen>
 800275e:	4603      	mov	r3, r0
 8002760:	b29a      	uxth	r2, r3
 8002762:	f107 0108 	add.w	r1, r7, #8
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	481e      	ldr	r0, [pc, #120]	; (80027e4 <StartPrinting+0x28c>)
 800276c:	f00a f9d3 	bl	800cb16 <HAL_UART_Transmit>


	  //Thermocouple
	  memset(buffer, 0, TX_BUF_DIM);
 8002770:	f107 0308 	add.w	r3, r7, #8
 8002774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f00e fb2e 	bl	8010ddc <memset>
	  sprintf(buffer, "Thermocouple temperature [degC]: %6.2f\r\n", THERMO_TEMP);
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <StartPrinting+0x2b4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7fd feff 	bl	8000588 <__aeabi_f2d>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	f107 0008 	add.w	r0, r7, #8
 8002792:	491f      	ldr	r1, [pc, #124]	; (8002810 <StartPrinting+0x2b8>)
 8002794:	f00f fe1e 	bl	80123d4 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002798:	f107 0308 	add.w	r3, r7, #8
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd fd31 	bl	8000204 <strlen>
 80027a2:	4603      	mov	r3, r0
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	f107 0108 	add.w	r1, r7, #8
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	480d      	ldr	r0, [pc, #52]	; (80027e4 <StartPrinting+0x28c>)
 80027b0:	f00a f9b1 	bl	800cb16 <HAL_UART_Transmit>


	  //Iridium
	  MRT_Static_Iridium_getTime(); //TODO Can get stuck for some time (SHOULD CHANGE TIMEOUT)
 80027b4:	f003 fca4 	bl	8006100 <MRT_Static_Iridium_getTime>

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 80027b8:	2200      	movs	r2, #0
 80027ba:	2108      	movs	r1, #8
 80027bc:	4803      	ldr	r0, [pc, #12]	; (80027cc <StartPrinting+0x274>)
 80027be:	f006 f863 	bl	8008888 <HAL_GPIO_WritePin>

	  osDelay(1000/SEND_FREQ);
 80027c2:	2064      	movs	r0, #100	; 0x64
 80027c4:	f00b fb3d 	bl	800de42 <osDelay>
  {
 80027c8:	e6cc      	b.n	8002564 <StartPrinting+0xc>
 80027ca:	bf00      	nop
 80027cc:	40020800 	.word	0x40020800
 80027d0:	20005e38 	.word	0x20005e38
 80027d4:	20005f38 	.word	0x20005f38
 80027d8:	20005e30 	.word	0x20005e30
 80027dc:	20005e9c 	.word	0x20005e9c
 80027e0:	08016b34 	.word	0x08016b34
 80027e4:	20005eac 	.word	0x20005eac
 80027e8:	200002b8 	.word	0x200002b8
 80027ec:	08016b5c 	.word	0x08016b5c
 80027f0:	200002c4 	.word	0x200002c4
 80027f4:	08016b84 	.word	0x08016b84
 80027f8:	200002d0 	.word	0x200002d0
 80027fc:	08016bac 	.word	0x08016bac
 8002800:	200002b0 	.word	0x200002b0
 8002804:	08016bc8 	.word	0x08016bc8
 8002808:	200002b4 	.word	0x200002b4
 800280c:	20005f3c 	.word	0x20005f3c
 8002810:	08016be0 	.word	0x08016be0

08002814 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b0c4      	sub	sp, #272	; 0x110
 8002818:	af02      	add	r7, sp, #8
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	6018      	str	r0, [r3, #0]

	char buffer[TX_BUF_DIM];
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 800281e:	2201      	movs	r2, #1
 8002820:	2104      	movs	r1, #4
 8002822:	481f      	ldr	r0, [pc, #124]	; (80028a0 <StartWatchDog+0x8c>)
 8002824:	f006 f830 	bl	8008888 <HAL_GPIO_WritePin>
	 HAL_IWDG_Refresh(&hiwdg);
 8002828:	481e      	ldr	r0, [pc, #120]	; (80028a4 <StartWatchDog+0x90>)
 800282a:	f007 f911 	bl	8009a50 <HAL_IWDG_Refresh>

	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800282e:	2200      	movs	r2, #0
 8002830:	491d      	ldr	r1, [pc, #116]	; (80028a8 <StartWatchDog+0x94>)
 8002832:	481e      	ldr	r0, [pc, #120]	; (80028ac <StartWatchDog+0x98>)
 8002834:	f008 f90a 	bl	800aa4c <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002838:	2200      	movs	r2, #0
 800283a:	491d      	ldr	r1, [pc, #116]	; (80028b0 <StartWatchDog+0x9c>)
 800283c:	481b      	ldr	r0, [pc, #108]	; (80028ac <StartWatchDog+0x98>)
 800283e:	f008 fa0a 	bl	800ac56 <HAL_RTC_GetDate>


	  memset(buffer, 0, TX_BUF_DIM);
 8002842:	f107 0308 	add.w	r3, r7, #8
 8002846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f00e fac5 	bl	8010ddc <memset>
	  sprintf(buffer, "Time: %i:%i:%i	Date: \r\n", sTime.Hours,sTime.Minutes,sTime.Seconds);
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <StartWatchDog+0x94>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <StartWatchDog+0x94>)
 800285a:	785b      	ldrb	r3, [r3, #1]
 800285c:	4619      	mov	r1, r3
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <StartWatchDog+0x94>)
 8002860:	789b      	ldrb	r3, [r3, #2]
 8002862:	f107 0008 	add.w	r0, r7, #8
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	460b      	mov	r3, r1
 800286a:	4912      	ldr	r1, [pc, #72]	; (80028b4 <StartWatchDog+0xa0>)
 800286c:	f00f fdb2 	bl	80123d4 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002870:	f107 0308 	add.w	r3, r7, #8
 8002874:	4618      	mov	r0, r3
 8002876:	f7fd fcc5 	bl	8000204 <strlen>
 800287a:	4603      	mov	r3, r0
 800287c:	b29a      	uxth	r2, r3
 800287e:	f107 0108 	add.w	r1, r7, #8
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	480c      	ldr	r0, [pc, #48]	; (80028b8 <StartWatchDog+0xa4>)
 8002888:	f00a f945 	bl	800cb16 <HAL_UART_Transmit>

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 800288c:	2200      	movs	r2, #0
 800288e:	2104      	movs	r1, #4
 8002890:	4803      	ldr	r0, [pc, #12]	; (80028a0 <StartWatchDog+0x8c>)
 8002892:	f005 fff9 	bl	8008888 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8002896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800289a:	f00b fad2 	bl	800de42 <osDelay>
  {
 800289e:	e7be      	b.n	800281e <StartWatchDog+0xa>
 80028a0:	40020800 	.word	0x40020800
 80028a4:	20005bec 	.word	0x20005bec
 80028a8:	20000510 	.word	0x20000510
 80028ac:	20005e10 	.word	0x20005e10
 80028b0:	20000524 	.word	0x20000524
 80028b4:	08016c0c 	.word	0x08016c0c
 80028b8:	20005eac 	.word	0x20005eac

080028bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a04      	ldr	r2, [pc, #16]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d101      	bne.n	80028d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028ce:	f005 fa4d 	bl	8007d6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40001000 	.word	0x40001000

080028e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_MspInit+0x54>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	4a11      	ldr	r2, [pc, #68]	; (8002944 <HAL_MspInit+0x54>)
 8002900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002904:	6453      	str	r3, [r2, #68]	; 0x44
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_MspInit+0x54>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_MspInit+0x54>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <HAL_MspInit+0x54>)
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b08      	ldr	r3, [pc, #32]	; (8002944 <HAL_MspInit+0x54>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	210f      	movs	r1, #15
 8002932:	f06f 0001 	mvn.w	r0, #1
 8002936:	f005 fdab 	bl	8008490 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800

08002948 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <HAL_ADC_MspInit+0x7c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d127      	bne.n	80029ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <HAL_ADC_MspInit+0x80>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	4a15      	ldr	r2, [pc, #84]	; (80029c8 <HAL_ADC_MspInit+0x80>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	6453      	str	r3, [r2, #68]	; 0x44
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <HAL_ADC_MspInit+0x80>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_ADC_MspInit+0x80>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <HAL_ADC_MspInit+0x80>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <HAL_ADC_MspInit+0x80>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80029a2:	2340      	movs	r3, #64	; 0x40
 80029a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029a6:	2303      	movs	r3, #3
 80029a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 80029ae:	f107 0314 	add.w	r3, r7, #20
 80029b2:	4619      	mov	r1, r3
 80029b4:	4805      	ldr	r0, [pc, #20]	; (80029cc <HAL_ADC_MspInit+0x84>)
 80029b6:	f005 fda3 	bl	8008500 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029ba:	bf00      	nop
 80029bc:	3728      	adds	r7, #40	; 0x28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40012000 	.word	0x40012000
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40020000 	.word	0x40020000

080029d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08e      	sub	sp, #56	; 0x38
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a5c      	ldr	r2, [pc, #368]	; (8002b60 <HAL_I2C_MspInit+0x190>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d12d      	bne.n	8002a4e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	623b      	str	r3, [r7, #32]
 80029f6:	4b5b      	ldr	r3, [pc, #364]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a5a      	ldr	r2, [pc, #360]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b58      	ldr	r3, [pc, #352]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	623b      	str	r3, [r7, #32]
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a14:	2312      	movs	r3, #18
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a20:	2304      	movs	r3, #4
 8002a22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a28:	4619      	mov	r1, r3
 8002a2a:	484f      	ldr	r0, [pc, #316]	; (8002b68 <HAL_I2C_MspInit+0x198>)
 8002a2c:	f005 fd68 	bl	8008500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	4a4a      	ldr	r2, [pc, #296]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002a3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a40:	4b48      	ldr	r3, [pc, #288]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a4c:	e083      	b.n	8002b56 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a46      	ldr	r2, [pc, #280]	; (8002b6c <HAL_I2C_MspInit+0x19c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d12d      	bne.n	8002ab4 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	4b41      	ldr	r3, [pc, #260]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	4a40      	ldr	r2, [pc, #256]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002a62:	f043 0302 	orr.w	r3, r3, #2
 8002a66:	6313      	str	r3, [r2, #48]	; 0x30
 8002a68:	4b3e      	ldr	r3, [pc, #248]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a7a:	2312      	movs	r3, #18
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a82:	2303      	movs	r3, #3
 8002a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a86:	2304      	movs	r3, #4
 8002a88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4835      	ldr	r0, [pc, #212]	; (8002b68 <HAL_I2C_MspInit+0x198>)
 8002a92:	f005 fd35 	bl	8008500 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	4a31      	ldr	r2, [pc, #196]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	697b      	ldr	r3, [r7, #20]
}
 8002ab2:	e050      	b.n	8002b56 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2d      	ldr	r2, [pc, #180]	; (8002b70 <HAL_I2C_MspInit+0x1a0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d14b      	bne.n	8002b56 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a27      	ldr	r2, [pc, #156]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a20      	ldr	r2, [pc, #128]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002afc:	2312      	movs	r3, #18
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b00:	2301      	movs	r3, #1
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b08:	2304      	movs	r3, #4
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b10:	4619      	mov	r1, r3
 8002b12:	4818      	ldr	r0, [pc, #96]	; (8002b74 <HAL_I2C_MspInit+0x1a4>)
 8002b14:	f005 fcf4 	bl	8008500 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b1e:	2312      	movs	r3, #18
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b22:	2301      	movs	r3, #1
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b32:	4619      	mov	r1, r3
 8002b34:	4810      	ldr	r0, [pc, #64]	; (8002b78 <HAL_I2C_MspInit+0x1a8>)
 8002b36:	f005 fce3 	bl	8008500 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	4a08      	ldr	r2, [pc, #32]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002b44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b48:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_I2C_MspInit+0x194>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
}
 8002b56:	bf00      	nop
 8002b58:	3738      	adds	r7, #56	; 0x38
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40005400 	.word	0x40005400
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40020400 	.word	0x40020400
 8002b6c:	40005800 	.word	0x40005800
 8002b70:	40005c00 	.word	0x40005c00
 8002b74:	40020800 	.word	0x40020800
 8002b78:	40020000 	.word	0x40020000

08002b7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08e      	sub	sp, #56	; 0x38
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b84:	f107 0308 	add.w	r3, r7, #8
 8002b88:	2230      	movs	r2, #48	; 0x30
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f00e f925 	bl	8010ddc <memset>
  if(hrtc->Instance==RTC)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a10      	ldr	r2, [pc, #64]	; (8002bd8 <HAL_RTC_MspInit+0x5c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d119      	bne.n	8002bd0 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ba6:	f107 0308 	add.w	r3, r7, #8
 8002baa:	4618      	mov	r0, r3
 8002bac:	f007 fc42 	bl	800a434 <HAL_RCCEx_PeriphCLKConfig>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002bb6:	f7ff fe93 	bl	80028e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <HAL_RTC_MspInit+0x60>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2105      	movs	r1, #5
 8002bc4:	2029      	movs	r0, #41	; 0x29
 8002bc6:	f005 fc63 	bl	8008490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002bca:	2029      	movs	r0, #41	; 0x29
 8002bcc:	f005 fc7c 	bl	80084c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002bd0:	bf00      	nop
 8002bd2:	3738      	adds	r7, #56	; 0x38
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40002800 	.word	0x40002800
 8002bdc:	42470e3c 	.word	0x42470e3c

08002be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08e      	sub	sp, #56	; 0x38
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a4c      	ldr	r2, [pc, #304]	; (8002d30 <HAL_SPI_MspInit+0x150>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d12d      	bne.n	8002c5e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
 8002c06:	4b4b      	ldr	r3, [pc, #300]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	4a4a      	ldr	r2, [pc, #296]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c10:	6413      	str	r3, [r2, #64]	; 0x40
 8002c12:	4b48      	ldr	r3, [pc, #288]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1a:	623b      	str	r3, [r7, #32]
 8002c1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	4b44      	ldr	r3, [pc, #272]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	4a43      	ldr	r2, [pc, #268]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2e:	4b41      	ldr	r3, [pc, #260]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c3a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c4c:	2305      	movs	r3, #5
 8002c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c54:	4619      	mov	r1, r3
 8002c56:	4838      	ldr	r0, [pc, #224]	; (8002d38 <HAL_SPI_MspInit+0x158>)
 8002c58:	f005 fc52 	bl	8008500 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002c5c:	e064      	b.n	8002d28 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a36      	ldr	r2, [pc, #216]	; (8002d3c <HAL_SPI_MspInit+0x15c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d12d      	bne.n	8002cc4 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61bb      	str	r3, [r7, #24]
 8002c6c:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	4a30      	ldr	r2, [pc, #192]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002c72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c76:	6453      	str	r3, [r2, #68]	; 0x44
 8002c78:	4b2e      	ldr	r3, [pc, #184]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	4b2a      	ldr	r3, [pc, #168]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	4a29      	ldr	r2, [pc, #164]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002c8e:	f043 0310 	orr.w	r3, r3, #16
 8002c92:	6313      	str	r3, [r2, #48]	; 0x30
 8002c94:	4b27      	ldr	r3, [pc, #156]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002ca0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002cb2:	2305      	movs	r3, #5
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4820      	ldr	r0, [pc, #128]	; (8002d40 <HAL_SPI_MspInit+0x160>)
 8002cbe:	f005 fc1f 	bl	8008500 <HAL_GPIO_Init>
}
 8002cc2:	e031      	b.n	8002d28 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <HAL_SPI_MspInit+0x164>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d12c      	bne.n	8002d28 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	4a17      	ldr	r2, [pc, #92]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002cd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cde:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a10      	ldr	r2, [pc, #64]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002cf4:	f043 0320 	orr.w	r3, r3, #32
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <HAL_SPI_MspInit+0x154>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002d06:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d14:	2303      	movs	r3, #3
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d18:	2305      	movs	r3, #5
 8002d1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d20:	4619      	mov	r1, r3
 8002d22:	4809      	ldr	r0, [pc, #36]	; (8002d48 <HAL_SPI_MspInit+0x168>)
 8002d24:	f005 fbec 	bl	8008500 <HAL_GPIO_Init>
}
 8002d28:	bf00      	nop
 8002d2a:	3738      	adds	r7, #56	; 0x38
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40003800 	.word	0x40003800
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40020400 	.word	0x40020400
 8002d3c:	40013400 	.word	0x40013400
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40015000 	.word	0x40015000
 8002d48:	40021400 	.word	0x40021400

08002d4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5c:	d10d      	bne.n	8002d7a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6e:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800

08002d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 030c 	add.w	r3, r7, #12
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dac:	d11d      	bne.n	8002dea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <HAL_TIM_MspPostInit+0x68>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <HAL_TIM_MspPostInit+0x68>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <HAL_TIM_MspPostInit+0x68>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002dca:	2304      	movs	r3, #4
 8002dcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002dde:	f107 030c 	add.w	r3, r7, #12
 8002de2:	4619      	mov	r1, r3
 8002de4:	4804      	ldr	r0, [pc, #16]	; (8002df8 <HAL_TIM_MspPostInit+0x6c>)
 8002de6:	f005 fb8b 	bl	8008500 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002dea:	bf00      	nop
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020000 	.word	0x40020000

08002dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08e      	sub	sp, #56	; 0x38
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a4b      	ldr	r2, [pc, #300]	; (8002f48 <HAL_UART_MspInit+0x14c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d12c      	bne.n	8002e78 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	623b      	str	r3, [r7, #32]
 8002e22:	4b4a      	ldr	r3, [pc, #296]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a49      	ldr	r2, [pc, #292]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002e28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e36:	623b      	str	r3, [r7, #32]
 8002e38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	4b43      	ldr	r3, [pc, #268]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a42      	ldr	r2, [pc, #264]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002e44:	f043 0310 	orr.w	r3, r3, #16
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b40      	ldr	r3, [pc, #256]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	61fb      	str	r3, [r7, #28]
 8002e54:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002e56:	2303      	movs	r3, #3
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e62:	2303      	movs	r3, #3
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002e66:	2308      	movs	r3, #8
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4837      	ldr	r0, [pc, #220]	; (8002f50 <HAL_UART_MspInit+0x154>)
 8002e72:	f005 fb45 	bl	8008500 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002e76:	e063      	b.n	8002f40 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a35      	ldr	r2, [pc, #212]	; (8002f54 <HAL_UART_MspInit+0x158>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d12d      	bne.n	8002ede <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	4b31      	ldr	r3, [pc, #196]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	4a30      	ldr	r2, [pc, #192]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40
 8002e92:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a29      	ldr	r2, [pc, #164]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002ea8:	f043 0308 	orr.w	r3, r3, #8
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002eba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ecc:	2307      	movs	r3, #7
 8002ece:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4820      	ldr	r0, [pc, #128]	; (8002f58 <HAL_UART_MspInit+0x15c>)
 8002ed8:	f005 fb12 	bl	8008500 <HAL_GPIO_Init>
}
 8002edc:	e030      	b.n	8002f40 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <HAL_UART_MspInit+0x160>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d12b      	bne.n	8002f40 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	4a16      	ldr	r2, [pc, #88]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002ef2:	f043 0320 	orr.w	r3, r3, #32
 8002ef6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	4a0f      	ldr	r2, [pc, #60]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002f0e:	f043 0304 	orr.w	r3, r3, #4
 8002f12:	6313      	str	r3, [r2, #48]	; 0x30
 8002f14:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <HAL_UART_MspInit+0x150>)
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002f20:	23c0      	movs	r3, #192	; 0xc0
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002f30:	2308      	movs	r3, #8
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4809      	ldr	r0, [pc, #36]	; (8002f60 <HAL_UART_MspInit+0x164>)
 8002f3c:	f005 fae0 	bl	8008500 <HAL_GPIO_Init>
}
 8002f40:	bf00      	nop
 8002f42:	3738      	adds	r7, #56	; 0x38
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40007c00 	.word	0x40007c00
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40004800 	.word	0x40004800
 8002f58:	40020c00 	.word	0x40020c00
 8002f5c:	40011400 	.word	0x40011400
 8002f60:	40020800 	.word	0x40020800

08002f64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08c      	sub	sp, #48	; 0x30
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002f74:	2200      	movs	r2, #0
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	2036      	movs	r0, #54	; 0x36
 8002f7a:	f005 fa89 	bl	8008490 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f7e:	2036      	movs	r0, #54	; 0x36
 8002f80:	f005 faa2 	bl	80084c8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <HAL_InitTick+0xa4>)
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_InitTick+0xa4>)
 8002f8e:	f043 0310 	orr.w	r3, r3, #16
 8002f92:	6413      	str	r3, [r2, #64]	; 0x40
 8002f94:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <HAL_InitTick+0xa4>)
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fa0:	f107 0210 	add.w	r2, r7, #16
 8002fa4:	f107 0314 	add.w	r3, r7, #20
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f007 fa10 	bl	800a3d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002fb0:	f007 f9e6 	bl	800a380 <HAL_RCC_GetPCLK1Freq>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	4a13      	ldr	r2, [pc, #76]	; (800300c <HAL_InitTick+0xa8>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	0c9b      	lsrs	r3, r3, #18
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_InitTick+0xac>)
 8002fca:	4a12      	ldr	r2, [pc, #72]	; (8003014 <HAL_InitTick+0xb0>)
 8002fcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <HAL_InitTick+0xac>)
 8002fd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fd4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002fd6:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <HAL_InitTick+0xac>)
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_InitTick+0xac>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_InitTick+0xac>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002fe8:	4809      	ldr	r0, [pc, #36]	; (8003010 <HAL_InitTick+0xac>)
 8002fea:	f008 ff5b 	bl	800bea4 <HAL_TIM_Base_Init>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ff4:	4806      	ldr	r0, [pc, #24]	; (8003010 <HAL_InitTick+0xac>)
 8002ff6:	f008 ffaf 	bl	800bf58 <HAL_TIM_Base_Start_IT>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	e000      	b.n	8003000 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
}
 8003000:	4618      	mov	r0, r3
 8003002:	3730      	adds	r7, #48	; 0x30
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40023800 	.word	0x40023800
 800300c:	431bde83 	.word	0x431bde83
 8003010:	20005fb8 	.word	0x20005fb8
 8003014:	40001000 	.word	0x40001000

08003018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800302a:	e7fe      	b.n	800302a <HardFault_Handler+0x4>

0800302c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003030:	e7fe      	b.n	8003030 <MemManage_Handler+0x4>

08003032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003036:	e7fe      	b.n	8003036 <BusFault_Handler+0x4>

08003038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800303c:	e7fe      	b.n	800303c <UsageFault_Handler+0x4>

0800303e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003050:	2001      	movs	r0, #1
 8003052:	f005 fc33 	bl	80088bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003060:	4802      	ldr	r0, [pc, #8]	; (800306c <RTC_Alarm_IRQHandler+0x10>)
 8003062:	f007 ff7f 	bl	800af64 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20005e10 	.word	0x20005e10

08003070 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003074:	4802      	ldr	r0, [pc, #8]	; (8003080 <TIM6_DAC_IRQHandler+0x10>)
 8003076:	f009 f82e 	bl	800c0d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20005fb8 	.word	0x20005fb8

08003084 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
	return 1;
 8003088:	2301      	movs	r3, #1
}
 800308a:	4618      	mov	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <_kill>:

int _kill(int pid, int sig)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800309e:	f00d fc23 	bl	80108e8 <__errno>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2216      	movs	r2, #22
 80030a6:	601a      	str	r2, [r3, #0]
	return -1;
 80030a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <_exit>:

void _exit (int status)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030bc:	f04f 31ff 	mov.w	r1, #4294967295
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ffe7 	bl	8003094 <_kill>
	while (1) {}		/* Make sure we hang here */
 80030c6:	e7fe      	b.n	80030c6 <_exit+0x12>

080030c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	e00a      	b.n	80030f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030da:	f3af 8000 	nop.w
 80030de:	4601      	mov	r1, r0
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	60ba      	str	r2, [r7, #8]
 80030e6:	b2ca      	uxtb	r2, r1
 80030e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	3301      	adds	r3, #1
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	dbf0      	blt.n	80030da <_read+0x12>
	}

return len;
 80030f8:	687b      	ldr	r3, [r7, #4]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b086      	sub	sp, #24
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	e009      	b.n	8003128 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	60ba      	str	r2, [r7, #8]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	3301      	adds	r3, #1
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	429a      	cmp	r2, r3
 800312e:	dbf1      	blt.n	8003114 <_write+0x12>
	}
	return len;
 8003130:	687b      	ldr	r3, [r7, #4]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <_close>:

int _close(int file)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
	return -1;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003162:	605a      	str	r2, [r3, #4]
	return 0;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <_isatty>:

int _isatty(int file)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
	return 1;
 800317a:	2301      	movs	r3, #1
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
	return 0;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031ac:	4a14      	ldr	r2, [pc, #80]	; (8003200 <_sbrk+0x5c>)
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <_sbrk+0x60>)
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031b8:	4b13      	ldr	r3, [pc, #76]	; (8003208 <_sbrk+0x64>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031c0:	4b11      	ldr	r3, [pc, #68]	; (8003208 <_sbrk+0x64>)
 80031c2:	4a12      	ldr	r2, [pc, #72]	; (800320c <_sbrk+0x68>)
 80031c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <_sbrk+0x64>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4413      	add	r3, r2
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d207      	bcs.n	80031e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031d4:	f00d fb88 	bl	80108e8 <__errno>
 80031d8:	4603      	mov	r3, r0
 80031da:	220c      	movs	r2, #12
 80031dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031de:	f04f 33ff 	mov.w	r3, #4294967295
 80031e2:	e009      	b.n	80031f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031e4:	4b08      	ldr	r3, [pc, #32]	; (8003208 <_sbrk+0x64>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ea:	4b07      	ldr	r3, [pc, #28]	; (8003208 <_sbrk+0x64>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	4a05      	ldr	r2, [pc, #20]	; (8003208 <_sbrk+0x64>)
 80031f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031f6:	68fb      	ldr	r3, [r7, #12]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	20030000 	.word	0x20030000
 8003204:	00000400 	.word	0x00000400
 8003208:	200002d8 	.word	0x200002d8
 800320c:	20006198 	.word	0x20006198

08003210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <SystemInit+0x28>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321a:	4a07      	ldr	r2, [pc, #28]	; (8003238 <SystemInit+0x28>)
 800321c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <SystemInit+0x28>)
 8003226:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800322a:	609a      	str	r2, [r3, #8]
#endif
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800323c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003274 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003240:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003242:	e003      	b.n	800324c <LoopCopyDataInit>

08003244 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003246:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003248:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800324a:	3104      	adds	r1, #4

0800324c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800324c:	480b      	ldr	r0, [pc, #44]	; (800327c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003250:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003252:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003254:	d3f6      	bcc.n	8003244 <CopyDataInit>
  ldr  r2, =_sbss
 8003256:	4a0b      	ldr	r2, [pc, #44]	; (8003284 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003258:	e002      	b.n	8003260 <LoopFillZerobss>

0800325a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800325a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800325c:	f842 3b04 	str.w	r3, [r2], #4

08003260 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003260:	4b09      	ldr	r3, [pc, #36]	; (8003288 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003262:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003264:	d3f9      	bcc.n	800325a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003266:	f7ff ffd3 	bl	8003210 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800326a:	f00d fc39 	bl	8010ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800326e:	f7fe fa43 	bl	80016f8 <main>
  bx  lr    
 8003272:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003274:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003278:	08018d14 	.word	0x08018d14
  ldr  r0, =_sdata
 800327c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003280:	20000278 	.word	0x20000278
  ldr  r2, =_sbss
 8003284:	20000278 	.word	0x20000278
  ldr  r3, = _ebss
 8003288:	20006194 	.word	0x20006194

0800328c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800328c:	e7fe      	b.n	800328c <ADC_IRQHandler>
	...

08003290 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08c      	sub	sp, #48	; 0x30
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 800329c:	2364      	movs	r3, #100	; 0x64
 800329e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 80032a8:	e073      	b.n	8003392 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 80032aa:	4b3f      	ldr	r3, [pc, #252]	; (80033a8 <GPS_Poll+0x118>)
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	2364      	movs	r3, #100	; 0x64
 80032b0:	2201      	movs	r2, #1
 80032b2:	493e      	ldr	r1, [pc, #248]	; (80033ac <GPS_Poll+0x11c>)
 80032b4:	f009 fcc1 	bl	800cc3a <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 80032b8:	4b3c      	ldr	r3, [pc, #240]	; (80033ac <GPS_Poll+0x11c>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b0a      	cmp	r3, #10
 80032be:	d00f      	beq.n	80032e0 <GPS_Poll+0x50>
 80032c0:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <GPS_Poll+0x120>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b63      	cmp	r3, #99	; 0x63
 80032c6:	d80b      	bhi.n	80032e0 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 80032c8:	4b39      	ldr	r3, [pc, #228]	; (80033b0 <GPS_Poll+0x120>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	b2d1      	uxtb	r1, r2
 80032d0:	4a37      	ldr	r2, [pc, #220]	; (80033b0 <GPS_Poll+0x120>)
 80032d2:	7011      	strb	r1, [r2, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b35      	ldr	r3, [pc, #212]	; (80033ac <GPS_Poll+0x11c>)
 80032d8:	7819      	ldrb	r1, [r3, #0]
 80032da:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <GPS_Poll+0x124>)
 80032dc:	5499      	strb	r1, [r3, r2]
 80032de:	e021      	b.n	8003324 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 80032e0:	4834      	ldr	r0, [pc, #208]	; (80033b4 <GPS_Poll+0x124>)
 80032e2:	f000 f86b 	bl	80033bc <GPS_validate>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 80032ec:	4831      	ldr	r0, [pc, #196]	; (80033b4 <GPS_Poll+0x124>)
 80032ee:	f000 f8c7 	bl	8003480 <GPS_parse>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00d      	beq.n	8003314 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 80032f8:	4b2f      	ldr	r3, [pc, #188]	; (80033b8 <GPS_Poll+0x128>)
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8003300:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <GPS_Poll+0x128>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8003308:	4b2b      	ldr	r3, [pc, #172]	; (80033b8 <GPS_Poll+0x128>)
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	601a      	str	r2, [r3, #0]
					done = 1;
 8003310:	2301      	movs	r3, #1
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8003314:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <GPS_Poll+0x120>)
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 800331a:	2264      	movs	r2, #100	; 0x64
 800331c:	2100      	movs	r1, #0
 800331e:	4825      	ldr	r0, [pc, #148]	; (80033b4 <GPS_Poll+0x124>)
 8003320:	f00d fd5c 	bl	8010ddc <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 8003324:	2300      	movs	r3, #0
 8003326:	623b      	str	r3, [r7, #32]
 8003328:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <GPS_Poll+0x118>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	623b      	str	r3, [r7, #32]
 8003332:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <GPS_Poll+0x118>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	623b      	str	r3, [r7, #32]
 800333c:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <GPS_Poll+0x118>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <GPS_Poll+0x118>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <GPS_Poll+0x118>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <GPS_Poll+0x118>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	61bb      	str	r3, [r7, #24]
 8003370:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <GPS_Poll+0x118>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <GPS_Poll+0x118>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 800338c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800338e:	3301      	adds	r3, #1
 8003390:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 8003392:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003394:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003396:	429a      	cmp	r2, r3
 8003398:	d202      	bcs.n	80033a0 <GPS_Poll+0x110>
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	d084      	beq.n	80032aa <GPS_Poll+0x1a>
	}
}
 80033a0:	bf00      	nop
 80033a2:	3730      	adds	r7, #48	; 0x30
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20005adc 	.word	0x20005adc
 80033ac:	200002dc 	.word	0x200002dc
 80033b0:	200002dd 	.word	0x200002dd
 80033b4:	20006058 	.word	0x20006058
 80033b8:	20006000 	.word	0x20006000

080033bc <GPS_validate>:

int GPS_validate(char *nmeastr){
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b24      	cmp	r3, #36	; 0x24
 80033d6:	d103      	bne.n	80033e0 <GPS_validate+0x24>
        i++;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3301      	adds	r3, #1
 80033dc:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80033de:	e00c      	b.n	80033fa <GPS_validate+0x3e>
        return 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e047      	b.n	8003474 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4053      	eors	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        i++;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	3301      	adds	r3, #1
 80033f8:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <GPS_validate+0x5c>
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	4413      	add	r3, r2
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b2a      	cmp	r3, #42	; 0x2a
 8003410:	d002      	beq.n	8003418 <GPS_validate+0x5c>
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b4a      	cmp	r3, #74	; 0x4a
 8003416:	dde5      	ble.n	80033e4 <GPS_validate+0x28>
    }

    if(i >= 75){
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2b4a      	cmp	r3, #74	; 0x4a
 800341c:	dd01      	ble.n	8003422 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800341e:	2300      	movs	r3, #0
 8003420:	e028      	b.n	8003474 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	4413      	add	r3, r2
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b2a      	cmp	r3, #42	; 0x2a
 800342c:	d119      	bne.n	8003462 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	3301      	adds	r3, #1
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	3302      	adds	r3, #2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	4413      	add	r3, r2
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800344a:	f107 0308 	add.w	r3, r7, #8
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	490a      	ldr	r1, [pc, #40]	; (800347c <GPS_validate+0xc0>)
 8003452:	4618      	mov	r0, r3
 8003454:	f00e ffbe 	bl	80123d4 <siprintf>
    return((checkcalcstr[0] == check[0])
 8003458:	7a3a      	ldrb	r2, [r7, #8]
 800345a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800345c:	429a      	cmp	r2, r3
 800345e:	d108      	bne.n	8003472 <GPS_validate+0xb6>
 8003460:	e001      	b.n	8003466 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8003462:	2300      	movs	r3, #0
 8003464:	e006      	b.n	8003474 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003466:	7a7a      	ldrb	r2, [r7, #9]
 8003468:	7b7b      	ldrb	r3, [r7, #13]
 800346a:	429a      	cmp	r2, r3
 800346c:	d101      	bne.n	8003472 <GPS_validate+0xb6>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <GPS_validate+0xb8>
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	08016c24 	.word	0x08016c24

08003480 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af08      	add	r7, sp, #32
 8003486:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8003488:	2206      	movs	r2, #6
 800348a:	496d      	ldr	r1, [pc, #436]	; (8003640 <GPS_parse+0x1c0>)
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f00f f83a 	bl	8012506 <strncmp>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d139      	bne.n	800350c <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8003498:	4b6a      	ldr	r3, [pc, #424]	; (8003644 <GPS_parse+0x1c4>)
 800349a:	9307      	str	r3, [sp, #28]
 800349c:	4b6a      	ldr	r3, [pc, #424]	; (8003648 <GPS_parse+0x1c8>)
 800349e:	9306      	str	r3, [sp, #24]
 80034a0:	4b6a      	ldr	r3, [pc, #424]	; (800364c <GPS_parse+0x1cc>)
 80034a2:	9305      	str	r3, [sp, #20]
 80034a4:	4b6a      	ldr	r3, [pc, #424]	; (8003650 <GPS_parse+0x1d0>)
 80034a6:	9304      	str	r3, [sp, #16]
 80034a8:	4b6a      	ldr	r3, [pc, #424]	; (8003654 <GPS_parse+0x1d4>)
 80034aa:	9303      	str	r3, [sp, #12]
 80034ac:	4b6a      	ldr	r3, [pc, #424]	; (8003658 <GPS_parse+0x1d8>)
 80034ae:	9302      	str	r3, [sp, #8]
 80034b0:	4b6a      	ldr	r3, [pc, #424]	; (800365c <GPS_parse+0x1dc>)
 80034b2:	9301      	str	r3, [sp, #4]
 80034b4:	4b6a      	ldr	r3, [pc, #424]	; (8003660 <GPS_parse+0x1e0>)
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	4b6a      	ldr	r3, [pc, #424]	; (8003664 <GPS_parse+0x1e4>)
 80034ba:	4a6b      	ldr	r2, [pc, #428]	; (8003668 <GPS_parse+0x1e8>)
 80034bc:	496b      	ldr	r1, [pc, #428]	; (800366c <GPS_parse+0x1ec>)
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f00e ffa8 	bl	8012414 <siscanf>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f340 80b5 	ble.w	8003636 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80034cc:	4b68      	ldr	r3, [pc, #416]	; (8003670 <GPS_parse+0x1f0>)
 80034ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <GPS_parse+0x1f0>)
 80034d4:	7e1b      	ldrb	r3, [r3, #24]
 80034d6:	4618      	mov	r0, r3
 80034d8:	eeb0 0a67 	vmov.f32	s0, s15
 80034dc:	f000 f8ec 	bl	80036b8 <GPS_nmea_to_dec>
 80034e0:	eef0 7a40 	vmov.f32	s15, s0
 80034e4:	4b62      	ldr	r3, [pc, #392]	; (8003670 <GPS_parse+0x1f0>)
 80034e6:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80034ea:	4b61      	ldr	r3, [pc, #388]	; (8003670 <GPS_parse+0x1f0>)
 80034ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80034f0:	4b5f      	ldr	r3, [pc, #380]	; (8003670 <GPS_parse+0x1f0>)
 80034f2:	7e5b      	ldrb	r3, [r3, #25]
 80034f4:	4618      	mov	r0, r3
 80034f6:	eeb0 0a67 	vmov.f32	s0, s15
 80034fa:	f000 f8dd 	bl	80036b8 <GPS_nmea_to_dec>
 80034fe:	eef0 7a40 	vmov.f32	s15, s0
 8003502:	4b5b      	ldr	r3, [pc, #364]	; (8003670 <GPS_parse+0x1f0>)
 8003504:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8003508:	2301      	movs	r3, #1
 800350a:	e095      	b.n	8003638 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 800350c:	2206      	movs	r2, #6
 800350e:	4959      	ldr	r1, [pc, #356]	; (8003674 <GPS_parse+0x1f4>)
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f00e fff8 	bl	8012506 <strncmp>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d134      	bne.n	8003586 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 800351c:	4b56      	ldr	r3, [pc, #344]	; (8003678 <GPS_parse+0x1f8>)
 800351e:	9305      	str	r3, [sp, #20]
 8003520:	4b56      	ldr	r3, [pc, #344]	; (800367c <GPS_parse+0x1fc>)
 8003522:	9304      	str	r3, [sp, #16]
 8003524:	4b56      	ldr	r3, [pc, #344]	; (8003680 <GPS_parse+0x200>)
 8003526:	9303      	str	r3, [sp, #12]
 8003528:	4b4b      	ldr	r3, [pc, #300]	; (8003658 <GPS_parse+0x1d8>)
 800352a:	9302      	str	r3, [sp, #8]
 800352c:	4b4b      	ldr	r3, [pc, #300]	; (800365c <GPS_parse+0x1dc>)
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	4b4b      	ldr	r3, [pc, #300]	; (8003660 <GPS_parse+0x1e0>)
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <GPS_parse+0x1e4>)
 8003536:	4a4c      	ldr	r2, [pc, #304]	; (8003668 <GPS_parse+0x1e8>)
 8003538:	4952      	ldr	r1, [pc, #328]	; (8003684 <GPS_parse+0x204>)
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f00e ff6a 	bl	8012414 <siscanf>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	dd77      	ble.n	8003636 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003546:	4b4a      	ldr	r3, [pc, #296]	; (8003670 <GPS_parse+0x1f0>)
 8003548:	edd3 7a04 	vldr	s15, [r3, #16]
 800354c:	4b48      	ldr	r3, [pc, #288]	; (8003670 <GPS_parse+0x1f0>)
 800354e:	7e1b      	ldrb	r3, [r3, #24]
 8003550:	4618      	mov	r0, r3
 8003552:	eeb0 0a67 	vmov.f32	s0, s15
 8003556:	f000 f8af 	bl	80036b8 <GPS_nmea_to_dec>
 800355a:	eef0 7a40 	vmov.f32	s15, s0
 800355e:	4b44      	ldr	r3, [pc, #272]	; (8003670 <GPS_parse+0x1f0>)
 8003560:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003564:	4b42      	ldr	r3, [pc, #264]	; (8003670 <GPS_parse+0x1f0>)
 8003566:	edd3 7a03 	vldr	s15, [r3, #12]
 800356a:	4b41      	ldr	r3, [pc, #260]	; (8003670 <GPS_parse+0x1f0>)
 800356c:	7e5b      	ldrb	r3, [r3, #25]
 800356e:	4618      	mov	r0, r3
 8003570:	eeb0 0a67 	vmov.f32	s0, s15
 8003574:	f000 f8a0 	bl	80036b8 <GPS_nmea_to_dec>
 8003578:	eef0 7a40 	vmov.f32	s15, s0
 800357c:	4b3c      	ldr	r3, [pc, #240]	; (8003670 <GPS_parse+0x1f0>)
 800357e:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8003582:	2301      	movs	r3, #1
 8003584:	e058      	b.n	8003638 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8003586:	2206      	movs	r2, #6
 8003588:	493f      	ldr	r1, [pc, #252]	; (8003688 <GPS_parse+0x208>)
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f00e ffbb 	bl	8012506 <strncmp>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d130      	bne.n	80035f8 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8003596:	4b3d      	ldr	r3, [pc, #244]	; (800368c <GPS_parse+0x20c>)
 8003598:	9303      	str	r3, [sp, #12]
 800359a:	4b33      	ldr	r3, [pc, #204]	; (8003668 <GPS_parse+0x1e8>)
 800359c:	9302      	str	r3, [sp, #8]
 800359e:	4b2e      	ldr	r3, [pc, #184]	; (8003658 <GPS_parse+0x1d8>)
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	4b2e      	ldr	r3, [pc, #184]	; (800365c <GPS_parse+0x1dc>)
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	4b2e      	ldr	r3, [pc, #184]	; (8003660 <GPS_parse+0x1e0>)
 80035a8:	4a2e      	ldr	r2, [pc, #184]	; (8003664 <GPS_parse+0x1e4>)
 80035aa:	4939      	ldr	r1, [pc, #228]	; (8003690 <GPS_parse+0x210>)
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f00e ff31 	bl	8012414 <siscanf>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	dd3e      	ble.n	8003636 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80035b8:	4b2d      	ldr	r3, [pc, #180]	; (8003670 <GPS_parse+0x1f0>)
 80035ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80035be:	4b2c      	ldr	r3, [pc, #176]	; (8003670 <GPS_parse+0x1f0>)
 80035c0:	7e1b      	ldrb	r3, [r3, #24]
 80035c2:	4618      	mov	r0, r3
 80035c4:	eeb0 0a67 	vmov.f32	s0, s15
 80035c8:	f000 f876 	bl	80036b8 <GPS_nmea_to_dec>
 80035cc:	eef0 7a40 	vmov.f32	s15, s0
 80035d0:	4b27      	ldr	r3, [pc, #156]	; (8003670 <GPS_parse+0x1f0>)
 80035d2:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80035d6:	4b26      	ldr	r3, [pc, #152]	; (8003670 <GPS_parse+0x1f0>)
 80035d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80035dc:	4b24      	ldr	r3, [pc, #144]	; (8003670 <GPS_parse+0x1f0>)
 80035de:	7e5b      	ldrb	r3, [r3, #25]
 80035e0:	4618      	mov	r0, r3
 80035e2:	eeb0 0a67 	vmov.f32	s0, s15
 80035e6:	f000 f867 	bl	80036b8 <GPS_nmea_to_dec>
 80035ea:	eef0 7a40 	vmov.f32	s15, s0
 80035ee:	4b20      	ldr	r3, [pc, #128]	; (8003670 <GPS_parse+0x1f0>)
 80035f0:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e01f      	b.n	8003638 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80035f8:	2206      	movs	r2, #6
 80035fa:	4926      	ldr	r1, [pc, #152]	; (8003694 <GPS_parse+0x214>)
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f00e ff82 	bl	8012506 <strncmp>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d116      	bne.n	8003636 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8003608:	4b23      	ldr	r3, [pc, #140]	; (8003698 <GPS_parse+0x218>)
 800360a:	9305      	str	r3, [sp, #20]
 800360c:	4b23      	ldr	r3, [pc, #140]	; (800369c <GPS_parse+0x21c>)
 800360e:	9304      	str	r3, [sp, #16]
 8003610:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <GPS_parse+0x220>)
 8003612:	9303      	str	r3, [sp, #12]
 8003614:	4b1a      	ldr	r3, [pc, #104]	; (8003680 <GPS_parse+0x200>)
 8003616:	9302      	str	r3, [sp, #8]
 8003618:	4b22      	ldr	r3, [pc, #136]	; (80036a4 <GPS_parse+0x224>)
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <GPS_parse+0x228>)
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	4b22      	ldr	r3, [pc, #136]	; (80036ac <GPS_parse+0x22c>)
 8003622:	4a23      	ldr	r2, [pc, #140]	; (80036b0 <GPS_parse+0x230>)
 8003624:	4923      	ldr	r1, [pc, #140]	; (80036b4 <GPS_parse+0x234>)
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f00e fef4 	bl	8012414 <siscanf>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	dd01      	ble.n	8003636 <GPS_parse+0x1b6>
            return 0;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <GPS_parse+0x1b8>
    }
    return 0;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	08016c2c 	.word	0x08016c2c
 8003644:	2000602c 	.word	0x2000602c
 8003648:	20006028 	.word	0x20006028
 800364c:	20006024 	.word	0x20006024
 8003650:	20006020 	.word	0x20006020
 8003654:	2000601c 	.word	0x2000601c
 8003658:	20006019 	.word	0x20006019
 800365c:	2000600c 	.word	0x2000600c
 8003660:	20006018 	.word	0x20006018
 8003664:	20006010 	.word	0x20006010
 8003668:	20006014 	.word	0x20006014
 800366c:	08016c34 	.word	0x08016c34
 8003670:	20006000 	.word	0x20006000
 8003674:	08016c5c 	.word	0x08016c5c
 8003678:	20006038 	.word	0x20006038
 800367c:	20006034 	.word	0x20006034
 8003680:	20006030 	.word	0x20006030
 8003684:	08016c64 	.word	0x08016c64
 8003688:	08016c84 	.word	0x08016c84
 800368c:	2000603c 	.word	0x2000603c
 8003690:	08016c8c 	.word	0x08016c8c
 8003694:	08016ca8 	.word	0x08016ca8
 8003698:	20006054 	.word	0x20006054
 800369c:	20006050 	.word	0x20006050
 80036a0:	2000604d 	.word	0x2000604d
 80036a4:	2000604c 	.word	0x2000604c
 80036a8:	20006048 	.word	0x20006048
 80036ac:	20006044 	.word	0x20006044
 80036b0:	20006040 	.word	0x20006040
 80036b4:	08016cb0 	.word	0x08016cb0

080036b8 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	ed87 0a01 	vstr	s0, [r7, #4]
 80036c2:	4603      	mov	r3, r0
 80036c4:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80036c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80036ca:	eddf 6a20 	vldr	s13, [pc, #128]	; 800374c <GPS_nmea_to_dec+0x94>
 80036ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036d6:	ee17 3a90 	vmov	r3, s15
 80036da:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2264      	movs	r2, #100	; 0x64
 80036e0:	fb02 f303 	mul.w	r3, r2, r3
 80036e4:	ee07 3a90 	vmov	s15, r3
 80036e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80036f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036f4:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80036f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80036fc:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003750 <GPS_nmea_to_dec+0x98>
 8003700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003704:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003712:	ed97 7a02 	vldr	s14, [r7, #8]
 8003716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800371a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	2b53      	cmp	r3, #83	; 0x53
 8003722:	d002      	beq.n	800372a <GPS_nmea_to_dec+0x72>
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	2b57      	cmp	r3, #87	; 0x57
 8003728:	d105      	bne.n	8003736 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800372a:	edd7 7a05 	vldr	s15, [r7, #20]
 800372e:	eef1 7a67 	vneg.f32	s15, s15
 8003732:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	ee07 3a90 	vmov	s15, r3
}
 800373c:	eeb0 0a67 	vmov.f32	s0, s15
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	42c80000 	.word	0x42c80000
 8003750:	42700000 	.word	0x42700000

08003754 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 800375e:	4a09      	ldr	r2, [pc, #36]	; (8003784 <GPS_init+0x30>)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 8003764:	4a08      	ldr	r2, [pc, #32]	; (8003788 <GPS_init+0x34>)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 800376a:	4b07      	ldr	r3, [pc, #28]	; (8003788 <GPS_init+0x34>)
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	f04f 33ff 	mov.w	r3, #4294967295
 8003772:	2210      	movs	r2, #16
 8003774:	4905      	ldr	r1, [pc, #20]	; (800378c <GPS_init+0x38>)
 8003776:	f009 f9ce 	bl	800cb16 <HAL_UART_Transmit>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20005adc 	.word	0x20005adc
 8003788:	200060bc 	.word	0x200060bc
 800378c:	08016cd0 	.word	0x08016cd0

08003790 <__NVIC_SystemReset>:
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003794:	f3bf 8f4f 	dsb	sy
}
 8003798:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <__NVIC_SystemReset+0x24>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80037a2:	4904      	ldr	r1, [pc, #16]	; (80037b4 <__NVIC_SystemReset+0x24>)
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <__NVIC_SystemReset+0x28>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80037aa:	f3bf 8f4f 	dsb	sy
}
 80037ae:	bf00      	nop
    __NOP();
 80037b0:	bf00      	nop
 80037b2:	e7fd      	b.n	80037b0 <__NVIC_SystemReset+0x20>
 80037b4:	e000ed00 	.word	0xe000ed00
 80037b8:	05fa0004 	.word	0x05fa0004

080037bc <MRT_externalFlashSetup>:
uint8_t NULL_BUFFER[NB_OF_FLAGS];

/*
 * User functions
 */
void MRT_externalFlashSetup(UART_HandleTypeDef* uart){
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NB_OF_FLAGS; i++){
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e007      	b.n	80037da <MRT_externalFlashSetup+0x1e>
		NULL_BUFFER[i] = 0; //Setup the null buffer for the correct number of values
 80037ca:	4a0f      	ldr	r2, [pc, #60]	; (8003808 <MRT_externalFlashSetup+0x4c>)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3301      	adds	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	ddf4      	ble.n	80037ca <MRT_externalFlashSetup+0xe>
	}

	if (!W25qxx_Init()) {
 80037e0:	f000 fa4c 	bl	8003c7c <W25qxx_Init>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f083 0301 	eor.w	r3, r3, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MRT_externalFlashSetup+0x38>
		Error_Handler(); // hangs and blinks LEDF
 80037f0:	f7ff f876 	bl	80028e0 <Error_Handler>
	}
	MRT_getFlags();
 80037f4:	f000 f82a 	bl	800384c <MRT_getFlags>
	MRT_resetInfo(uart);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f8a9 	bl	8003950 <MRT_resetInfo>
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200060c8 	.word	0x200060c8

0800380c <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset
		MRT_resetFromStart();
 800381c:	f000 f804 	bl	8003828 <MRT_resetFromStart>
	}

}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <MRT_resetFromStart>:


void MRT_resetFromStart(void){
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
	//Clear all saved data of stages
	//TODO

	//Clear wakeup and reset flags
	W25qxx_EraseSector(1);
 800382c:	2001      	movs	r0, #1
 800382e:	f000 fb77 	bl	8003f20 <W25qxx_EraseSector>
	W25qxx_WriteSector(NULL_BUFFER, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003832:	2303      	movs	r3, #3
 8003834:	2200      	movs	r2, #0
 8003836:	2101      	movs	r1, #1
 8003838:	4803      	ldr	r0, [pc, #12]	; (8003848 <MRT_resetFromStart+0x20>)
 800383a:	f000 fcbb 	bl	80041b4 <W25qxx_WriteSector>

	//Shutdown Iridium
	MRT_Static_Iridium_Shutdown();
 800383e:	f002 fc47 	bl	80060d0 <MRT_Static_Iridium_Shutdown>

	//Reset function
	NVIC_SystemReset();
 8003842:	f7ff ffa5 	bl	8003790 <__NVIC_SystemReset>
 8003846:	bf00      	nop
 8003848:	200060c8 	.word	0x200060c8

0800384c <MRT_getFlags>:
		flash_flags_buffer[i] = *flash_flags[i];
	}
}


void MRT_getFlags(void){
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003852:	2303      	movs	r3, #3
 8003854:	2200      	movs	r2, #0
 8003856:	2101      	movs	r1, #1
 8003858:	4838      	ldr	r0, [pc, #224]	; (800393c <MRT_getFlags+0xf0>)
 800385a:	f000 fde9 	bl	8004430 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 800385e:	4b38      	ldr	r3, [pc, #224]	; (8003940 <MRT_getFlags+0xf4>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d10c      	bne.n	8003880 <MRT_getFlags+0x34>
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8003866:	4b36      	ldr	r3, [pc, #216]	; (8003940 <MRT_getFlags+0xf4>)
 8003868:	781a      	ldrb	r2, [r3, #0]
 800386a:	4b34      	ldr	r3, [pc, #208]	; (800393c <MRT_getFlags+0xf0>)
 800386c:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 800386e:	2001      	movs	r0, #1
 8003870:	f000 fb56 	bl	8003f20 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003874:	2303      	movs	r3, #3
 8003876:	2200      	movs	r2, #0
 8003878:	2101      	movs	r1, #1
 800387a:	4830      	ldr	r0, [pc, #192]	; (800393c <MRT_getFlags+0xf0>)
 800387c:	f000 fc9a 	bl	80041b4 <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003880:	2300      	movs	r3, #0
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	e00b      	b.n	800389e <MRT_getFlags+0x52>
		*flash_flags[i] = flash_flags_buffer[i];
 8003886:	4a2f      	ldr	r2, [pc, #188]	; (8003944 <MRT_getFlags+0xf8>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388e:	492b      	ldr	r1, [pc, #172]	; (800393c <MRT_getFlags+0xf0>)
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	440a      	add	r2, r1
 8003894:	7812      	ldrb	r2, [r2, #0]
 8003896:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3301      	adds	r3, #1
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	ddf0      	ble.n	8003886 <MRT_getFlags+0x3a>


	//Check flags values

	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 80038a4:	4b28      	ldr	r3, [pc, #160]	; (8003948 <MRT_getFlags+0xfc>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d013      	beq.n	80038d4 <MRT_getFlags+0x88>
 80038ac:	4b26      	ldr	r3, [pc, #152]	; (8003948 <MRT_getFlags+0xfc>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d00f      	beq.n	80038d4 <MRT_getFlags+0x88>
		reset_flag = 0;
 80038b4:	4b24      	ldr	r3, [pc, #144]	; (8003948 <MRT_getFlags+0xfc>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 80038ba:	4b23      	ldr	r3, [pc, #140]	; (8003948 <MRT_getFlags+0xfc>)
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	4b1f      	ldr	r3, [pc, #124]	; (800393c <MRT_getFlags+0xf0>)
 80038c0:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 80038c2:	2001      	movs	r0, #1
 80038c4:	f000 fb2c 	bl	8003f20 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80038c8:	2303      	movs	r3, #3
 80038ca:	2200      	movs	r2, #0
 80038cc:	2101      	movs	r1, #1
 80038ce:	481b      	ldr	r0, [pc, #108]	; (800393c <MRT_getFlags+0xf0>)
 80038d0:	f000 fc70 	bl	80041b4 <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1){ //If random value (none was written)
 80038d4:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <MRT_getFlags+0xf4>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d013      	beq.n	8003904 <MRT_getFlags+0xb8>
 80038dc:	4b18      	ldr	r3, [pc, #96]	; (8003940 <MRT_getFlags+0xf4>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d00f      	beq.n	8003904 <MRT_getFlags+0xb8>
		wu_flag = 0;
 80038e4:	4b16      	ldr	r3, [pc, #88]	; (8003940 <MRT_getFlags+0xf4>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 80038ea:	4b15      	ldr	r3, [pc, #84]	; (8003940 <MRT_getFlags+0xf4>)
 80038ec:	781a      	ldrb	r2, [r3, #0]
 80038ee:	4b13      	ldr	r3, [pc, #76]	; (800393c <MRT_getFlags+0xf0>)
 80038f0:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 80038f2:	2001      	movs	r0, #1
 80038f4:	f000 fb14 	bl	8003f20 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80038f8:	2303      	movs	r3, #3
 80038fa:	2200      	movs	r2, #0
 80038fc:	2101      	movs	r1, #1
 80038fe:	480f      	ldr	r0, [pc, #60]	; (800393c <MRT_getFlags+0xf0>)
 8003900:	f000 fc58 	bl	80041b4 <W25qxx_WriteSector>
	}


	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <MRT_getFlags+0x100>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <MRT_getFlags+0xe8>
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <MRT_getFlags+0x100>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d00f      	beq.n	8003934 <MRT_getFlags+0xe8>
		iwdg_flag = 0;
 8003914:	4b0d      	ldr	r3, [pc, #52]	; (800394c <MRT_getFlags+0x100>)
 8003916:	2200      	movs	r2, #0
 8003918:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 800391a:	4b0c      	ldr	r3, [pc, #48]	; (800394c <MRT_getFlags+0x100>)
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	4b07      	ldr	r3, [pc, #28]	; (800393c <MRT_getFlags+0xf0>)
 8003920:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8003922:	2001      	movs	r0, #1
 8003924:	f000 fafc 	bl	8003f20 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003928:	2303      	movs	r3, #3
 800392a:	2200      	movs	r2, #0
 800392c:	2101      	movs	r1, #1
 800392e:	4803      	ldr	r0, [pc, #12]	; (800393c <MRT_getFlags+0xf0>)
 8003930:	f000 fc40 	bl	80041b4 <W25qxx_WriteSector>
	}
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20005b80 	.word	0x20005b80
 8003940:	2000050d 	.word	0x2000050d
 8003944:	20000008 	.word	0x20000008
 8003948:	200002de 	.word	0x200002de
 800394c:	200002df 	.word	0x200002df

08003950 <MRT_resetInfo>:


void MRT_resetInfo(UART_HandleTypeDef* uart){
 8003950:	b580      	push	{r7, lr}
 8003952:	b092      	sub	sp, #72	; 0x48
 8003954:	af02      	add	r7, sp, #8
 8003956:	6078      	str	r0, [r7, #4]

	  char buffer[50];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\n",reset_flag, wu_flag, iwdg_flag);
 8003958:	4b3b      	ldr	r3, [pc, #236]	; (8003a48 <MRT_resetInfo+0xf8>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	4b3b      	ldr	r3, [pc, #236]	; (8003a4c <MRT_resetInfo+0xfc>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	4619      	mov	r1, r3
 8003964:	4b3a      	ldr	r3, [pc, #232]	; (8003a50 <MRT_resetInfo+0x100>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	f107 000c 	add.w	r0, r7, #12
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	460b      	mov	r3, r1
 8003970:	4938      	ldr	r1, [pc, #224]	; (8003a54 <MRT_resetInfo+0x104>)
 8003972:	f00e fd2f 	bl	80123d4 <siprintf>
	  HAL_UART_Transmit(uart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8003976:	f107 030c 	add.w	r3, r7, #12
 800397a:	4618      	mov	r0, r3
 800397c:	f7fc fc42 	bl	8000204 <strlen>
 8003980:	4603      	mov	r3, r0
 8003982:	b29a      	uxth	r2, r3
 8003984:	f107 010c 	add.w	r1, r7, #12
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f009 f8c2 	bl	800cb16 <HAL_UART_Transmit>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8003992:	4b2f      	ldr	r3, [pc, #188]	; (8003a50 <MRT_resetInfo+0x100>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d122      	bne.n	80039e0 <MRT_resetInfo+0x90>
		  HAL_UART_Transmit(uart, "Deactivating IWDG\r\n", 19, HAL_MAX_DELAY);
 800399a:	f04f 33ff 	mov.w	r3, #4294967295
 800399e:	2213      	movs	r2, #19
 80039a0:	492d      	ldr	r1, [pc, #180]	; (8003a58 <MRT_resetInfo+0x108>)
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f009 f8b7 	bl	800cb16 <HAL_UART_Transmit>

		  iwdg_flag = 0; //Flip flag
 80039a8:	4b29      	ldr	r3, [pc, #164]	; (8003a50 <MRT_resetInfo+0x100>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80039ae:	4b28      	ldr	r3, [pc, #160]	; (8003a50 <MRT_resetInfo+0x100>)
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <MRT_resetInfo+0x10c>)
 80039b4:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 80039b6:	2001      	movs	r0, #1
 80039b8:	f000 fab2 	bl	8003f20 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80039bc:	2303      	movs	r3, #3
 80039be:	2200      	movs	r2, #0
 80039c0:	2101      	movs	r1, #1
 80039c2:	4826      	ldr	r0, [pc, #152]	; (8003a5c <MRT_resetInfo+0x10c>)
 80039c4:	f000 fbf6 	bl	80041b4 <W25qxx_WriteSector>

		  //Disable alarm A only
		  MRT_setAlarmA(0,0,0);
 80039c8:	2200      	movs	r2, #0
 80039ca:	2100      	movs	r1, #0
 80039cc:	2000      	movs	r0, #0
 80039ce:	f004 f897 	bl	8007b00 <MRT_setAlarmA>

		  HAL_Delay(1000);
 80039d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039d6:	f004 f9e9 	bl	8007dac <HAL_Delay>


		  //MRT_Static_Iridium_Shutdown(); TODO

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 80039da:	201e      	movs	r0, #30
 80039dc:	f004 f848 	bl	8007a70 <MRT_StandByMode>
	  }


	  //Check if we are after waking up
	  if (wu_flag==1){
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <MRT_resetInfo+0xfc>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d10f      	bne.n	8003a08 <MRT_resetInfo+0xb8>
		  HAL_UART_Transmit(uart, "FC wake up\r\n", 12, HAL_MAX_DELAY);
 80039e8:	f04f 33ff 	mov.w	r3, #4294967295
 80039ec:	220c      	movs	r2, #12
 80039ee:	491c      	ldr	r1, [pc, #112]	; (8003a60 <MRT_resetInfo+0x110>)
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f009 f890 	bl	800cb16 <HAL_UART_Transmit>

		  //Deactivate alarm interrupts
		  HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 80039f6:	2029      	movs	r0, #41	; 0x29
 80039f8:	f004 fd74 	bl	80084e4 <HAL_NVIC_DisableIRQ>
		  __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <MRT_resetInfo+0x114>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <MRT_resetInfo+0x114>)
 8003a02:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a06:	6013      	str	r3, [r2, #0]
	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8003a08:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <MRT_resetInfo+0xf8>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d116      	bne.n	8003a3e <MRT_resetInfo+0xee>
		  HAL_UART_Transmit(uart, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 8003a10:	f04f 33ff 	mov.w	r3, #4294967295
 8003a14:	220e      	movs	r2, #14
 8003a16:	4914      	ldr	r1, [pc, #80]	; (8003a68 <MRT_resetInfo+0x118>)
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f009 f87c 	bl	800cb16 <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <MRT_resetInfo+0xf8>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003a24:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <MRT_resetInfo+0xf8>)
 8003a26:	781a      	ldrb	r2, [r3, #0]
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <MRT_resetInfo+0x10c>)
 8003a2a:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f000 fa77 	bl	8003f20 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a32:	2303      	movs	r3, #3
 8003a34:	2200      	movs	r2, #0
 8003a36:	2101      	movs	r1, #1
 8003a38:	4808      	ldr	r0, [pc, #32]	; (8003a5c <MRT_resetInfo+0x10c>)
 8003a3a:	f000 fbbb 	bl	80041b4 <W25qxx_WriteSector>
	  }
}
 8003a3e:	bf00      	nop
 8003a40:	3740      	adds	r7, #64	; 0x40
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	200002de 	.word	0x200002de
 8003a4c:	2000050d 	.word	0x2000050d
 8003a50:	200002df 	.word	0x200002df
 8003a54:	08016d14 	.word	0x08016d14
 8003a58:	08016d34 	.word	0x08016d34
 8003a5c:	20005b80 	.word	0x20005b80
 8003a60:	08016d48 	.word	0x08016d48
 8003a64:	40013c00 	.word	0x40013c00
 8003a68:	08016d58 	.word	0x08016d58

08003a6c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	4603      	mov	r3, r0
 8003a74:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003a76:	f107 020f 	add.w	r2, r7, #15
 8003a7a:	1df9      	adds	r1, r7, #7
 8003a7c:	2364      	movs	r3, #100	; 0x64
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	2301      	movs	r3, #1
 8003a82:	4804      	ldr	r0, [pc, #16]	; (8003a94 <W25qxx_Spi+0x28>)
 8003a84:	f007 ff3c 	bl	800b900 <HAL_SPI_TransmitReceive>
	return ret;
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20005ae0 	.word	0x20005ae0

08003a98 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2140      	movs	r1, #64	; 0x40
 8003ab2:	4813      	ldr	r0, [pc, #76]	; (8003b00 <W25qxx_ReadID+0x68>)
 8003ab4:	f004 fee8 	bl	8008888 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003ab8:	209f      	movs	r0, #159	; 0x9f
 8003aba:	f7ff ffd7 	bl	8003a6c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003abe:	20a5      	movs	r0, #165	; 0xa5
 8003ac0:	f7ff ffd4 	bl	8003a6c <W25qxx_Spi>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003ac8:	20a5      	movs	r0, #165	; 0xa5
 8003aca:	f7ff ffcf 	bl	8003a6c <W25qxx_Spi>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003ad2:	20a5      	movs	r0, #165	; 0xa5
 8003ad4:	f7ff ffca 	bl	8003a6c <W25qxx_Spi>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003adc:	2201      	movs	r2, #1
 8003ade:	2140      	movs	r1, #64	; 0x40
 8003ae0:	4807      	ldr	r0, [pc, #28]	; (8003b00 <W25qxx_ReadID+0x68>)
 8003ae2:	f004 fed1 	bl	8008888 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	041a      	lsls	r2, r3, #16
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	4313      	orrs	r3, r2
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003af6:	68fb      	ldr	r3, [r7, #12]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40020c00 	.word	0x40020c00

08003b04 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2140      	movs	r1, #64	; 0x40
 8003b0e:	4816      	ldr	r0, [pc, #88]	; (8003b68 <W25qxx_ReadUniqID+0x64>)
 8003b10:	f004 feba 	bl	8008888 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003b14:	204b      	movs	r0, #75	; 0x4b
 8003b16:	f7ff ffa9 	bl	8003a6c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	71fb      	strb	r3, [r7, #7]
 8003b1e:	e005      	b.n	8003b2c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b20:	20a5      	movs	r0, #165	; 0xa5
 8003b22:	f7ff ffa3 	bl	8003a6c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	71fb      	strb	r3, [r7, #7]
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d9f6      	bls.n	8003b20 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003b32:	2300      	movs	r3, #0
 8003b34:	71bb      	strb	r3, [r7, #6]
 8003b36:	e00b      	b.n	8003b50 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b38:	79bc      	ldrb	r4, [r7, #6]
 8003b3a:	20a5      	movs	r0, #165	; 0xa5
 8003b3c:	f7ff ff96 	bl	8003a6c <W25qxx_Spi>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <W25qxx_ReadUniqID+0x68>)
 8003b46:	4423      	add	r3, r4
 8003b48:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003b4a:	79bb      	ldrb	r3, [r7, #6]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	71bb      	strb	r3, [r7, #6]
 8003b50:	79bb      	ldrb	r3, [r7, #6]
 8003b52:	2b07      	cmp	r3, #7
 8003b54:	d9f0      	bls.n	8003b38 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003b56:	2201      	movs	r2, #1
 8003b58:	2140      	movs	r1, #64	; 0x40
 8003b5a:	4803      	ldr	r0, [pc, #12]	; (8003b68 <W25qxx_ReadUniqID+0x64>)
 8003b5c:	f004 fe94 	bl	8008888 <HAL_GPIO_WritePin>
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd90      	pop	{r4, r7, pc}
 8003b68:	40020c00 	.word	0x40020c00
 8003b6c:	200060cc 	.word	0x200060cc

08003b70 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003b74:	2200      	movs	r2, #0
 8003b76:	2140      	movs	r1, #64	; 0x40
 8003b78:	4807      	ldr	r0, [pc, #28]	; (8003b98 <W25qxx_WriteEnable+0x28>)
 8003b7a:	f004 fe85 	bl	8008888 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8003b7e:	2006      	movs	r0, #6
 8003b80:	f7ff ff74 	bl	8003a6c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003b84:	2201      	movs	r2, #1
 8003b86:	2140      	movs	r1, #64	; 0x40
 8003b88:	4803      	ldr	r0, [pc, #12]	; (8003b98 <W25qxx_WriteEnable+0x28>)
 8003b8a:	f004 fe7d 	bl	8008888 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f00a f957 	bl	800de42 <osDelay>
}
 8003b94:	bf00      	nop
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40020c00 	.word	0x40020c00

08003b9c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003baa:	2200      	movs	r2, #0
 8003bac:	2140      	movs	r1, #64	; 0x40
 8003bae:	481c      	ldr	r0, [pc, #112]	; (8003c20 <W25qxx_ReadStatusRegister+0x84>)
 8003bb0:	f004 fe6a 	bl	8008888 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d10c      	bne.n	8003bd4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003bba:	2005      	movs	r0, #5
 8003bbc:	f7ff ff56 	bl	8003a6c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003bc0:	20a5      	movs	r0, #165	; 0xa5
 8003bc2:	f7ff ff53 	bl	8003a6c <W25qxx_Spi>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003bca:	4a16      	ldr	r2, [pc, #88]	; (8003c24 <W25qxx_ReadStatusRegister+0x88>)
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003bd2:	e01b      	b.n	8003c0c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d10c      	bne.n	8003bf4 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003bda:	2035      	movs	r0, #53	; 0x35
 8003bdc:	f7ff ff46 	bl	8003a6c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003be0:	20a5      	movs	r0, #165	; 0xa5
 8003be2:	f7ff ff43 	bl	8003a6c <W25qxx_Spi>
 8003be6:	4603      	mov	r3, r0
 8003be8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003bea:	4a0e      	ldr	r2, [pc, #56]	; (8003c24 <W25qxx_ReadStatusRegister+0x88>)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003bf2:	e00b      	b.n	8003c0c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003bf4:	2015      	movs	r0, #21
 8003bf6:	f7ff ff39 	bl	8003a6c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003bfa:	20a5      	movs	r0, #165	; 0xa5
 8003bfc:	f7ff ff36 	bl	8003a6c <W25qxx_Spi>
 8003c00:	4603      	mov	r3, r0
 8003c02:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003c04:	4a07      	ldr	r2, [pc, #28]	; (8003c24 <W25qxx_ReadStatusRegister+0x88>)
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	2140      	movs	r1, #64	; 0x40
 8003c10:	4803      	ldr	r0, [pc, #12]	; (8003c20 <W25qxx_ReadStatusRegister+0x84>)
 8003c12:	f004 fe39 	bl	8008888 <HAL_GPIO_WritePin>
	return status;
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40020c00 	.word	0x40020c00
 8003c24:	200060cc 	.word	0x200060cc

08003c28 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	f00a f908 	bl	800de42 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003c32:	2200      	movs	r2, #0
 8003c34:	2140      	movs	r1, #64	; 0x40
 8003c36:	480f      	ldr	r0, [pc, #60]	; (8003c74 <W25qxx_WaitForWriteEnd+0x4c>)
 8003c38:	f004 fe26 	bl	8008888 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003c3c:	2005      	movs	r0, #5
 8003c3e:	f7ff ff15 	bl	8003a6c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c42:	20a5      	movs	r0, #165	; 0xa5
 8003c44:	f7ff ff12 	bl	8003a6c <W25qxx_Spi>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <W25qxx_WaitForWriteEnd+0x50>)
 8003c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003c52:	2001      	movs	r0, #1
 8003c54:	f00a f8f5 	bl	800de42 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003c58:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <W25qxx_WaitForWriteEnd+0x50>)
 8003c5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1ed      	bne.n	8003c42 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003c66:	2201      	movs	r2, #1
 8003c68:	2140      	movs	r1, #64	; 0x40
 8003c6a:	4802      	ldr	r0, [pc, #8]	; (8003c74 <W25qxx_WaitForWriteEnd+0x4c>)
 8003c6c:	f004 fe0c 	bl	8008888 <HAL_GPIO_WritePin>
}
 8003c70:	bf00      	nop
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40020c00 	.word	0x40020c00
 8003c78:	200060cc 	.word	0x200060cc

08003c7c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003c82:	4b90      	ldr	r3, [pc, #576]	; (8003ec4 <W25qxx_Init+0x248>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003c8a:	e002      	b.n	8003c92 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	f00a f8d8 	bl	800de42 <osDelay>
	while (HAL_GetTick() < 100)
 8003c92:	f004 f87f 	bl	8007d94 <HAL_GetTick>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b63      	cmp	r3, #99	; 0x63
 8003c9a:	d9f7      	bls.n	8003c8c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	2140      	movs	r1, #64	; 0x40
 8003ca0:	4889      	ldr	r0, [pc, #548]	; (8003ec8 <W25qxx_Init+0x24c>)
 8003ca2:	f004 fdf1 	bl	8008888 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003ca6:	2064      	movs	r0, #100	; 0x64
 8003ca8:	f00a f8cb 	bl	800de42 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8003cac:	4887      	ldr	r0, [pc, #540]	; (8003ecc <W25qxx_Init+0x250>)
 8003cae:	f00e fac5 	bl	801223c <puts>
#endif
	id = W25qxx_ReadID();
 8003cb2:	f7ff fef1 	bl	8003a98 <W25qxx_ReadID>
 8003cb6:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4885      	ldr	r0, [pc, #532]	; (8003ed0 <W25qxx_Init+0x254>)
 8003cbc:	f00e fa38 	bl	8012130 <iprintf>
#endif
	switch (id & 0x000000FF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	3b11      	subs	r3, #17
 8003cc6:	2b0f      	cmp	r3, #15
 8003cc8:	f200 808b 	bhi.w	8003de2 <W25qxx_Init+0x166>
 8003ccc:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <W25qxx_Init+0x58>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003dcf 	.word	0x08003dcf
 8003cd8:	08003dbb 	.word	0x08003dbb
 8003cdc:	08003da7 	.word	0x08003da7
 8003ce0:	08003d93 	.word	0x08003d93
 8003ce4:	08003d7f 	.word	0x08003d7f
 8003ce8:	08003d6b 	.word	0x08003d6b
 8003cec:	08003d57 	.word	0x08003d57
 8003cf0:	08003d41 	.word	0x08003d41
 8003cf4:	08003d2b 	.word	0x08003d2b
 8003cf8:	08003de3 	.word	0x08003de3
 8003cfc:	08003de3 	.word	0x08003de3
 8003d00:	08003de3 	.word	0x08003de3
 8003d04:	08003de3 	.word	0x08003de3
 8003d08:	08003de3 	.word	0x08003de3
 8003d0c:	08003de3 	.word	0x08003de3
 8003d10:	08003d15 	.word	0x08003d15
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8003d14:	4b6b      	ldr	r3, [pc, #428]	; (8003ec4 <W25qxx_Init+0x248>)
 8003d16:	220a      	movs	r2, #10
 8003d18:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8003d1a:	4b6a      	ldr	r3, [pc, #424]	; (8003ec4 <W25qxx_Init+0x248>)
 8003d1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d20:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8003d22:	486c      	ldr	r0, [pc, #432]	; (8003ed4 <W25qxx_Init+0x258>)
 8003d24:	f00e fa8a 	bl	801223c <puts>
#endif
		break;
 8003d28:	e064      	b.n	8003df4 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8003d2a:	4b66      	ldr	r3, [pc, #408]	; (8003ec4 <W25qxx_Init+0x248>)
 8003d2c:	2209      	movs	r2, #9
 8003d2e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003d30:	4b64      	ldr	r3, [pc, #400]	; (8003ec4 <W25qxx_Init+0x248>)
 8003d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d36:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8003d38:	4867      	ldr	r0, [pc, #412]	; (8003ed8 <W25qxx_Init+0x25c>)
 8003d3a:	f00e fa7f 	bl	801223c <puts>
#endif
		break;
 8003d3e:	e059      	b.n	8003df4 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003d40:	4b60      	ldr	r3, [pc, #384]	; (8003ec4 <W25qxx_Init+0x248>)
 8003d42:	2208      	movs	r2, #8
 8003d44:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003d46:	4b5f      	ldr	r3, [pc, #380]	; (8003ec4 <W25qxx_Init+0x248>)
 8003d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d4c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8003d4e:	4863      	ldr	r0, [pc, #396]	; (8003edc <W25qxx_Init+0x260>)
 8003d50:	f00e fa74 	bl	801223c <puts>
#endif
		break;
 8003d54:	e04e      	b.n	8003df4 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003d56:	4b5b      	ldr	r3, [pc, #364]	; (8003ec4 <W25qxx_Init+0x248>)
 8003d58:	2207      	movs	r2, #7
 8003d5a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8003d5c:	4b59      	ldr	r3, [pc, #356]	; (8003ec4 <W25qxx_Init+0x248>)
 8003d5e:	2280      	movs	r2, #128	; 0x80
 8003d60:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8003d62:	485f      	ldr	r0, [pc, #380]	; (8003ee0 <W25qxx_Init+0x264>)
 8003d64:	f00e fa6a 	bl	801223c <puts>
#endif
		break;
 8003d68:	e044      	b.n	8003df4 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003d6a:	4b56      	ldr	r3, [pc, #344]	; (8003ec4 <W25qxx_Init+0x248>)
 8003d6c:	2206      	movs	r2, #6
 8003d6e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003d70:	4b54      	ldr	r3, [pc, #336]	; (8003ec4 <W25qxx_Init+0x248>)
 8003d72:	2240      	movs	r2, #64	; 0x40
 8003d74:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8003d76:	485b      	ldr	r0, [pc, #364]	; (8003ee4 <W25qxx_Init+0x268>)
 8003d78:	f00e fa60 	bl	801223c <puts>
#endif
		break;
 8003d7c:	e03a      	b.n	8003df4 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8003d7e:	4b51      	ldr	r3, [pc, #324]	; (8003ec4 <W25qxx_Init+0x248>)
 8003d80:	2205      	movs	r2, #5
 8003d82:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003d84:	4b4f      	ldr	r3, [pc, #316]	; (8003ec4 <W25qxx_Init+0x248>)
 8003d86:	2220      	movs	r2, #32
 8003d88:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8003d8a:	4857      	ldr	r0, [pc, #348]	; (8003ee8 <W25qxx_Init+0x26c>)
 8003d8c:	f00e fa56 	bl	801223c <puts>
#endif
		break;
 8003d90:	e030      	b.n	8003df4 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8003d92:	4b4c      	ldr	r3, [pc, #304]	; (8003ec4 <W25qxx_Init+0x248>)
 8003d94:	2204      	movs	r2, #4
 8003d96:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003d98:	4b4a      	ldr	r3, [pc, #296]	; (8003ec4 <W25qxx_Init+0x248>)
 8003d9a:	2210      	movs	r2, #16
 8003d9c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8003d9e:	4853      	ldr	r0, [pc, #332]	; (8003eec <W25qxx_Init+0x270>)
 8003da0:	f00e fa4c 	bl	801223c <puts>
#endif
		break;
 8003da4:	e026      	b.n	8003df4 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003da6:	4b47      	ldr	r3, [pc, #284]	; (8003ec4 <W25qxx_Init+0x248>)
 8003da8:	2203      	movs	r2, #3
 8003daa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003dac:	4b45      	ldr	r3, [pc, #276]	; (8003ec4 <W25qxx_Init+0x248>)
 8003dae:	2208      	movs	r2, #8
 8003db0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8003db2:	484f      	ldr	r0, [pc, #316]	; (8003ef0 <W25qxx_Init+0x274>)
 8003db4:	f00e fa42 	bl	801223c <puts>
#endif
		break;
 8003db8:	e01c      	b.n	8003df4 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8003dba:	4b42      	ldr	r3, [pc, #264]	; (8003ec4 <W25qxx_Init+0x248>)
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003dc0:	4b40      	ldr	r3, [pc, #256]	; (8003ec4 <W25qxx_Init+0x248>)
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8003dc6:	484b      	ldr	r0, [pc, #300]	; (8003ef4 <W25qxx_Init+0x278>)
 8003dc8:	f00e fa38 	bl	801223c <puts>
#endif
		break;
 8003dcc:	e012      	b.n	8003df4 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003dce:	4b3d      	ldr	r3, [pc, #244]	; (8003ec4 <W25qxx_Init+0x248>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003dd4:	4b3b      	ldr	r3, [pc, #236]	; (8003ec4 <W25qxx_Init+0x248>)
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8003dda:	4847      	ldr	r0, [pc, #284]	; (8003ef8 <W25qxx_Init+0x27c>)
 8003ddc:	f00e fa2e 	bl	801223c <puts>
#endif
		break;
 8003de0:	e008      	b.n	8003df4 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8003de2:	4846      	ldr	r0, [pc, #280]	; (8003efc <W25qxx_Init+0x280>)
 8003de4:	f00e fa2a 	bl	801223c <puts>
#endif
		w25qxx.Lock = 0;
 8003de8:	4b36      	ldr	r3, [pc, #216]	; (8003ec4 <W25qxx_Init+0x248>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003df0:	2300      	movs	r3, #0
 8003df2:	e063      	b.n	8003ebc <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8003df4:	4b33      	ldr	r3, [pc, #204]	; (8003ec4 <W25qxx_Init+0x248>)
 8003df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dfa:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003dfc:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <W25qxx_Init+0x248>)
 8003dfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e02:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003e04:	4b2f      	ldr	r3, [pc, #188]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	4a2e      	ldr	r2, [pc, #184]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e0c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8003e0e:	4b2d      	ldr	r3, [pc, #180]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	4a2c      	ldr	r2, [pc, #176]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e14:	6912      	ldr	r2, [r2, #16]
 8003e16:	fb02 f303 	mul.w	r3, r2, r3
 8003e1a:	4a2a      	ldr	r2, [pc, #168]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e1c:	8952      	ldrh	r2, [r2, #10]
 8003e1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e22:	4a28      	ldr	r2, [pc, #160]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e24:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003e26:	4b27      	ldr	r3, [pc, #156]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	4a25      	ldr	r2, [pc, #148]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e2e:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003e30:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	4a23      	ldr	r2, [pc, #140]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e36:	6912      	ldr	r2, [r2, #16]
 8003e38:	fb02 f303 	mul.w	r3, r2, r3
 8003e3c:	0a9b      	lsrs	r3, r3, #10
 8003e3e:	4a21      	ldr	r2, [pc, #132]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e40:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003e42:	f7ff fe5f 	bl	8003b04 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8003e46:	2001      	movs	r0, #1
 8003e48:	f7ff fea8 	bl	8003b9c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003e4c:	2002      	movs	r0, #2
 8003e4e:	f7ff fea5 	bl	8003b9c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003e52:	2003      	movs	r0, #3
 8003e54:	f7ff fea2 	bl	8003b9c <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8003e58:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e5a:	895b      	ldrh	r3, [r3, #10]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4828      	ldr	r0, [pc, #160]	; (8003f00 <W25qxx_Init+0x284>)
 8003e60:	f00e f966 	bl	8012130 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8003e64:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4826      	ldr	r0, [pc, #152]	; (8003f04 <W25qxx_Init+0x288>)
 8003e6c:	f00e f960 	bl	8012130 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8003e70:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	4619      	mov	r1, r3
 8003e76:	4824      	ldr	r0, [pc, #144]	; (8003f08 <W25qxx_Init+0x28c>)
 8003e78:	f00e f95a 	bl	8012130 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8003e7c:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	4619      	mov	r1, r3
 8003e82:	4822      	ldr	r0, [pc, #136]	; (8003f0c <W25qxx_Init+0x290>)
 8003e84:	f00e f954 	bl	8012130 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8003e88:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4820      	ldr	r0, [pc, #128]	; (8003f10 <W25qxx_Init+0x294>)
 8003e90:	f00e f94e 	bl	8012130 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <W25qxx_Init+0x248>)
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	4619      	mov	r1, r3
 8003e9a:	481e      	ldr	r0, [pc, #120]	; (8003f14 <W25qxx_Init+0x298>)
 8003e9c:	f00e f948 	bl	8012130 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <W25qxx_Init+0x248>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	481c      	ldr	r0, [pc, #112]	; (8003f18 <W25qxx_Init+0x29c>)
 8003ea8:	f00e f942 	bl	8012130 <iprintf>
	printf("w25qxx Init Done\r\n");
 8003eac:	481b      	ldr	r0, [pc, #108]	; (8003f1c <W25qxx_Init+0x2a0>)
 8003eae:	f00e f9c5 	bl	801223c <puts>
#endif
	w25qxx.Lock = 0;
 8003eb2:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <W25qxx_Init+0x248>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003eba:	2301      	movs	r3, #1
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	200060cc 	.word	0x200060cc
 8003ec8:	40020c00 	.word	0x40020c00
 8003ecc:	08016d68 	.word	0x08016d68
 8003ed0:	08016d80 	.word	0x08016d80
 8003ed4:	08016d94 	.word	0x08016d94
 8003ed8:	08016dac 	.word	0x08016dac
 8003edc:	08016dc4 	.word	0x08016dc4
 8003ee0:	08016ddc 	.word	0x08016ddc
 8003ee4:	08016df4 	.word	0x08016df4
 8003ee8:	08016e0c 	.word	0x08016e0c
 8003eec:	08016e24 	.word	0x08016e24
 8003ef0:	08016e3c 	.word	0x08016e3c
 8003ef4:	08016e54 	.word	0x08016e54
 8003ef8:	08016e6c 	.word	0x08016e6c
 8003efc:	08016e84 	.word	0x08016e84
 8003f00:	08016e98 	.word	0x08016e98
 8003f04:	08016eb8 	.word	0x08016eb8
 8003f08:	08016ed0 	.word	0x08016ed0
 8003f0c:	08016ef0 	.word	0x08016ef0
 8003f10:	08016f0c 	.word	0x08016f0c
 8003f14:	08016f2c 	.word	0x08016f2c
 8003f18:	08016f48 	.word	0x08016f48
 8003f1c:	08016f68 	.word	0x08016f68

08003f20 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003f28:	e002      	b.n	8003f30 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f009 ff89 	bl	800de42 <osDelay>
	while (w25qxx.Lock == 1)
 8003f30:	4b2d      	ldr	r3, [pc, #180]	; (8003fe8 <W25qxx_EraseSector+0xc8>)
 8003f32:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d0f7      	beq.n	8003f2a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8003f3a:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <W25qxx_EraseSector+0xc8>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8003f42:	f003 ff27 	bl	8007d94 <HAL_GetTick>
 8003f46:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4828      	ldr	r0, [pc, #160]	; (8003fec <W25qxx_EraseSector+0xcc>)
 8003f4c:	f00e f8f0 	bl	8012130 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8003f50:	f7ff fe6a 	bl	8003c28 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003f54:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <W25qxx_EraseSector+0xc8>)
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8003f60:	f7ff fe06 	bl	8003b70 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003f64:	2200      	movs	r2, #0
 8003f66:	2140      	movs	r1, #64	; 0x40
 8003f68:	4821      	ldr	r0, [pc, #132]	; (8003ff0 <W25qxx_EraseSector+0xd0>)
 8003f6a:	f004 fc8d 	bl	8008888 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003f6e:	4b1e      	ldr	r3, [pc, #120]	; (8003fe8 <W25qxx_EraseSector+0xc8>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d909      	bls.n	8003f8a <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8003f76:	2021      	movs	r0, #33	; 0x21
 8003f78:	f7ff fd78 	bl	8003a6c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	0e1b      	lsrs	r3, r3, #24
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fd72 	bl	8003a6c <W25qxx_Spi>
 8003f88:	e002      	b.n	8003f90 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8003f8a:	2020      	movs	r0, #32
 8003f8c:	f7ff fd6e 	bl	8003a6c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	0c1b      	lsrs	r3, r3, #16
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fd68 	bl	8003a6c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fd62 	bl	8003a6c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fd5d 	bl	8003a6c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	2140      	movs	r1, #64	; 0x40
 8003fb6:	480e      	ldr	r0, [pc, #56]	; (8003ff0 <W25qxx_EraseSector+0xd0>)
 8003fb8:	f004 fc66 	bl	8008888 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003fbc:	f7ff fe34 	bl	8003c28 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8003fc0:	f003 fee8 	bl	8007d94 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4809      	ldr	r0, [pc, #36]	; (8003ff4 <W25qxx_EraseSector+0xd4>)
 8003fce:	f00e f8af 	bl	8012130 <iprintf>
#endif
	W25qxx_Delay(1);
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	f009 ff35 	bl	800de42 <osDelay>
	w25qxx.Lock = 0;
 8003fd8:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <W25qxx_EraseSector+0xc8>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	200060cc 	.word	0x200060cc
 8003fec:	08016fc0 	.word	0x08016fc0
 8003ff0:	40020c00 	.word	0x40020c00
 8003ff4:	08016fe4 	.word	0x08016fe4

08003ff8 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004000:	4b07      	ldr	r3, [pc, #28]	; (8004020 <W25qxx_SectorToPage+0x28>)
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	4a05      	ldr	r2, [pc, #20]	; (8004020 <W25qxx_SectorToPage+0x28>)
 800400c:	8952      	ldrh	r2, [r2, #10]
 800400e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	200060cc 	.word	0x200060cc

08004024 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004032:	e002      	b.n	800403a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004034:	2001      	movs	r0, #1
 8004036:	f009 ff04 	bl	800de42 <osDelay>
	while (w25qxx.Lock == 1)
 800403a:	4b57      	ldr	r3, [pc, #348]	; (8004198 <W25qxx_WritePage+0x174>)
 800403c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004040:	2b01      	cmp	r3, #1
 8004042:	d0f7      	beq.n	8004034 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004044:	4b54      	ldr	r3, [pc, #336]	; (8004198 <W25qxx_WritePage+0x174>)
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	4a51      	ldr	r2, [pc, #324]	; (8004198 <W25qxx_WritePage+0x174>)
 8004054:	8952      	ldrh	r2, [r2, #10]
 8004056:	4293      	cmp	r3, r2
 8004058:	d802      	bhi.n	8004060 <W25qxx_WritePage+0x3c>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004060:	4b4d      	ldr	r3, [pc, #308]	; (8004198 <W25qxx_WritePage+0x174>)
 8004062:	895b      	ldrh	r3, [r3, #10]
 8004064:	461a      	mov	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	4413      	add	r3, r2
 8004072:	4a49      	ldr	r2, [pc, #292]	; (8004198 <W25qxx_WritePage+0x174>)
 8004074:	8952      	ldrh	r2, [r2, #10]
 8004076:	4293      	cmp	r3, r2
 8004078:	d905      	bls.n	8004086 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800407a:	4b47      	ldr	r3, [pc, #284]	; (8004198 <W25qxx_WritePage+0x174>)
 800407c:	895b      	ldrh	r3, [r3, #10]
 800407e:	461a      	mov	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	68b9      	ldr	r1, [r7, #8]
 800408c:	4843      	ldr	r0, [pc, #268]	; (800419c <W25qxx_WritePage+0x178>)
 800408e:	f00e f84f 	bl	8012130 <iprintf>
	W25qxx_Delay(100);
 8004092:	2064      	movs	r0, #100	; 0x64
 8004094:	f009 fed5 	bl	800de42 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004098:	f003 fe7c 	bl	8007d94 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 800409e:	f7ff fdc3 	bl	8003c28 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80040a2:	f7ff fd65 	bl	8003b70 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80040a6:	2200      	movs	r2, #0
 80040a8:	2140      	movs	r1, #64	; 0x40
 80040aa:	483d      	ldr	r0, [pc, #244]	; (80041a0 <W25qxx_WritePage+0x17c>)
 80040ac:	f004 fbec 	bl	8008888 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80040b0:	4b39      	ldr	r3, [pc, #228]	; (8004198 <W25qxx_WritePage+0x174>)
 80040b2:	895b      	ldrh	r3, [r3, #10]
 80040b4:	461a      	mov	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	fb03 f302 	mul.w	r3, r3, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	4413      	add	r3, r2
 80040c0:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80040c2:	4b35      	ldr	r3, [pc, #212]	; (8004198 <W25qxx_WritePage+0x174>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d909      	bls.n	80040de <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 80040ca:	2012      	movs	r0, #18
 80040cc:	f7ff fcce 	bl	8003a6c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	0e1b      	lsrs	r3, r3, #24
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fcc8 	bl	8003a6c <W25qxx_Spi>
 80040dc:	e002      	b.n	80040e4 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 80040de:	2002      	movs	r0, #2
 80040e0:	f7ff fcc4 	bl	8003a6c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	0c1b      	lsrs	r3, r3, #16
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff fcbe 	bl	8003a6c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fcb8 	bl	8003a6c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff fcb3 	bl	8003a6c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	b29a      	uxth	r2, r3
 800410a:	2364      	movs	r3, #100	; 0x64
 800410c:	68f9      	ldr	r1, [r7, #12]
 800410e:	4825      	ldr	r0, [pc, #148]	; (80041a4 <W25qxx_WritePage+0x180>)
 8004110:	f007 f9a9 	bl	800b466 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004114:	2201      	movs	r2, #1
 8004116:	2140      	movs	r1, #64	; 0x40
 8004118:	4821      	ldr	r0, [pc, #132]	; (80041a0 <W25qxx_WritePage+0x17c>)
 800411a:	f004 fbb5 	bl	8008888 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800411e:	f7ff fd83 	bl	8003c28 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004122:	f003 fe37 	bl	8007d94 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	e018      	b.n	8004166 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	2b00      	cmp	r3, #0
 800413c:	d108      	bne.n	8004150 <W25qxx_WritePage+0x12c>
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d905      	bls.n	8004150 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8004144:	4818      	ldr	r0, [pc, #96]	; (80041a8 <W25qxx_WritePage+0x184>)
 8004146:	f00e f879 	bl	801223c <puts>
			W25qxx_Delay(10);
 800414a:	200a      	movs	r0, #10
 800414c:	f009 fe79 	bl	800de42 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	4413      	add	r3, r2
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	4619      	mov	r1, r3
 800415a:	4814      	ldr	r0, [pc, #80]	; (80041ac <W25qxx_WritePage+0x188>)
 800415c:	f00d ffe8 	bl	8012130 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	3301      	adds	r3, #1
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d3e2      	bcc.n	8004134 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 800416e:	480e      	ldr	r0, [pc, #56]	; (80041a8 <W25qxx_WritePage+0x184>)
 8004170:	f00e f864 	bl	801223c <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 8004174:	6939      	ldr	r1, [r7, #16]
 8004176:	480e      	ldr	r0, [pc, #56]	; (80041b0 <W25qxx_WritePage+0x18c>)
 8004178:	f00d ffda 	bl	8012130 <iprintf>
	W25qxx_Delay(100);
 800417c:	2064      	movs	r0, #100	; 0x64
 800417e:	f009 fe60 	bl	800de42 <osDelay>
#endif
	W25qxx_Delay(1);
 8004182:	2001      	movs	r0, #1
 8004184:	f009 fe5d 	bl	800de42 <osDelay>
	w25qxx.Lock = 0;
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <W25qxx_WritePage+0x174>)
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004190:	bf00      	nop
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	200060cc 	.word	0x200060cc
 800419c:	08017248 	.word	0x08017248
 80041a0:	40020c00 	.word	0x40020c00
 80041a4:	20005ae0 	.word	0x20005ae0
 80041a8:	08017284 	.word	0x08017284
 80041ac:	08017288 	.word	0x08017288
 80041b0:	08017290 	.word	0x08017290

080041b4 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 80041c2:	4b36      	ldr	r3, [pc, #216]	; (800429c <W25qxx_WriteSector+0xe8>)
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d802      	bhi.n	80041d2 <W25qxx_WriteSector+0x1e>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d102      	bne.n	80041d8 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80041d2:	4b32      	ldr	r3, [pc, #200]	; (800429c <W25qxx_WriteSector+0xe8>)
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	4830      	ldr	r0, [pc, #192]	; (80042a0 <W25qxx_WriteSector+0xec>)
 80041e0:	f00d ffa6 	bl	8012130 <iprintf>
	W25qxx_Delay(100);
 80041e4:	2064      	movs	r0, #100	; 0x64
 80041e6:	f009 fe2c 	bl	800de42 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80041ea:	4b2c      	ldr	r3, [pc, #176]	; (800429c <W25qxx_WriteSector+0xe8>)
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d306      	bcc.n	8004202 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 80041f4:	482b      	ldr	r0, [pc, #172]	; (80042a4 <W25qxx_WriteSector+0xf0>)
 80041f6:	f00e f821 	bl	801223c <puts>
		W25qxx_Delay(100);
 80041fa:	2064      	movs	r0, #100	; 0x64
 80041fc:	f009 fe21 	bl	800de42 <osDelay>
#endif
		return;
 8004200:	e048      	b.n	8004294 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	441a      	add	r2, r3
 8004208:	4b24      	ldr	r3, [pc, #144]	; (800429c <W25qxx_WriteSector+0xe8>)
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	429a      	cmp	r2, r3
 800420e:	d905      	bls.n	800421c <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004210:	4b22      	ldr	r3, [pc, #136]	; (800429c <W25qxx_WriteSector+0xe8>)
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	e001      	b.n	8004220 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004220:	68b8      	ldr	r0, [r7, #8]
 8004222:	f7ff fee9 	bl	8003ff8 <W25qxx_SectorToPage>
 8004226:	4602      	mov	r2, r0
 8004228:	4b1c      	ldr	r3, [pc, #112]	; (800429c <W25qxx_WriteSector+0xe8>)
 800422a:	895b      	ldrh	r3, [r3, #10]
 800422c:	4619      	mov	r1, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	fbb3 f3f1 	udiv	r3, r3, r1
 8004234:	4413      	add	r3, r2
 8004236:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004238:	4b18      	ldr	r3, [pc, #96]	; (800429c <W25qxx_WriteSector+0xe8>)
 800423a:	895b      	ldrh	r3, [r3, #10]
 800423c:	461a      	mov	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	fbb3 f1f2 	udiv	r1, r3, r2
 8004244:	fb02 f201 	mul.w	r2, r2, r1
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	69f9      	ldr	r1, [r7, #28]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7ff fee6 	bl	8004024 <W25qxx_WritePage>
		StartPage++;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	3301      	adds	r3, #1
 800425c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800425e:	4b0f      	ldr	r3, [pc, #60]	; (800429c <W25qxx_WriteSector+0xe8>)
 8004260:	895b      	ldrh	r3, [r3, #10]
 8004262:	461a      	mov	r2, r3
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	1a9a      	subs	r2, r3, r2
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	4413      	add	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <W25qxx_WriteSector+0xe8>)
 8004270:	895b      	ldrh	r3, [r3, #10]
 8004272:	461a      	mov	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4413      	add	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	dce1      	bgt.n	800424c <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8004288:	4807      	ldr	r0, [pc, #28]	; (80042a8 <W25qxx_WriteSector+0xf4>)
 800428a:	f00d ffd7 	bl	801223c <puts>
	W25qxx_Delay(100);
 800428e:	2064      	movs	r0, #100	; 0x64
 8004290:	f009 fdd7 	bl	800de42 <osDelay>
#endif
}
 8004294:	3720      	adds	r7, #32
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	200060cc 	.word	0x200060cc
 80042a0:	080172b4 	.word	0x080172b4
 80042a4:	080172f4 	.word	0x080172f4
 80042a8:	08017314 	.word	0x08017314

080042ac <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80042ba:	e002      	b.n	80042c2 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80042bc:	2001      	movs	r0, #1
 80042be:	f009 fdc0 	bl	800de42 <osDelay>
	while (w25qxx.Lock == 1)
 80042c2:	4b54      	ldr	r3, [pc, #336]	; (8004414 <W25qxx_ReadPage+0x168>)
 80042c4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d0f7      	beq.n	80042bc <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80042cc:	4b51      	ldr	r3, [pc, #324]	; (8004414 <W25qxx_ReadPage+0x168>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80042d4:	4b4f      	ldr	r3, [pc, #316]	; (8004414 <W25qxx_ReadPage+0x168>)
 80042d6:	895b      	ldrh	r3, [r3, #10]
 80042d8:	461a      	mov	r2, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	4293      	cmp	r3, r2
 80042de:	d802      	bhi.n	80042e6 <W25qxx_ReadPage+0x3a>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d102      	bne.n	80042ec <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80042e6:	4b4b      	ldr	r3, [pc, #300]	; (8004414 <W25qxx_ReadPage+0x168>)
 80042e8:	895b      	ldrh	r3, [r3, #10]
 80042ea:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	4413      	add	r3, r2
 80042f2:	4a48      	ldr	r2, [pc, #288]	; (8004414 <W25qxx_ReadPage+0x168>)
 80042f4:	8952      	ldrh	r2, [r2, #10]
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d905      	bls.n	8004306 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80042fa:	4b46      	ldr	r3, [pc, #280]	; (8004414 <W25qxx_ReadPage+0x168>)
 80042fc:	895b      	ldrh	r3, [r3, #10]
 80042fe:	461a      	mov	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	4842      	ldr	r0, [pc, #264]	; (8004418 <W25qxx_ReadPage+0x16c>)
 800430e:	f00d ff0f 	bl	8012130 <iprintf>
	W25qxx_Delay(100);
 8004312:	2064      	movs	r0, #100	; 0x64
 8004314:	f009 fd95 	bl	800de42 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004318:	f003 fd3c 	bl	8007d94 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800431e:	4b3d      	ldr	r3, [pc, #244]	; (8004414 <W25qxx_ReadPage+0x168>)
 8004320:	895b      	ldrh	r3, [r3, #10]
 8004322:	461a      	mov	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	fb03 f302 	mul.w	r3, r3, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	4413      	add	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004330:	2200      	movs	r2, #0
 8004332:	2140      	movs	r1, #64	; 0x40
 8004334:	4839      	ldr	r0, [pc, #228]	; (800441c <W25qxx_ReadPage+0x170>)
 8004336:	f004 faa7 	bl	8008888 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <W25qxx_ReadPage+0x168>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b08      	cmp	r3, #8
 8004340:	d909      	bls.n	8004356 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8004342:	200c      	movs	r0, #12
 8004344:	f7ff fb92 	bl	8003a6c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	0e1b      	lsrs	r3, r3, #24
 800434c:	b2db      	uxtb	r3, r3
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fb8c 	bl	8003a6c <W25qxx_Spi>
 8004354:	e002      	b.n	800435c <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8004356:	200b      	movs	r0, #11
 8004358:	f7ff fb88 	bl	8003a6c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	0c1b      	lsrs	r3, r3, #16
 8004360:	b2db      	uxtb	r3, r3
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff fb82 	bl	8003a6c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	b2db      	uxtb	r3, r3
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fb7c 	bl	8003a6c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fb77 	bl	8003a6c <W25qxx_Spi>
	W25qxx_Spi(0);
 800437e:	2000      	movs	r0, #0
 8004380:	f7ff fb74 	bl	8003a6c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	b29a      	uxth	r2, r3
 8004388:	2364      	movs	r3, #100	; 0x64
 800438a:	68f9      	ldr	r1, [r7, #12]
 800438c:	4824      	ldr	r0, [pc, #144]	; (8004420 <W25qxx_ReadPage+0x174>)
 800438e:	f007 f9a6 	bl	800b6de <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004392:	2201      	movs	r2, #1
 8004394:	2140      	movs	r1, #64	; 0x40
 8004396:	4821      	ldr	r0, [pc, #132]	; (800441c <W25qxx_ReadPage+0x170>)
 8004398:	f004 fa76 	bl	8008888 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 800439c:	f003 fcfa 	bl	8007d94 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	e018      	b.n	80043e0 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d108      	bne.n	80043ca <W25qxx_ReadPage+0x11e>
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d905      	bls.n	80043ca <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 80043be:	4819      	ldr	r0, [pc, #100]	; (8004424 <W25qxx_ReadPage+0x178>)
 80043c0:	f00d ff3c 	bl	801223c <puts>
			W25qxx_Delay(10);
 80043c4:	200a      	movs	r0, #10
 80043c6:	f009 fd3c 	bl	800de42 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	4413      	add	r3, r2
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	4619      	mov	r1, r3
 80043d4:	4814      	ldr	r0, [pc, #80]	; (8004428 <W25qxx_ReadPage+0x17c>)
 80043d6:	f00d feab 	bl	8012130 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	3301      	adds	r3, #1
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d3e2      	bcc.n	80043ae <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 80043e8:	480e      	ldr	r0, [pc, #56]	; (8004424 <W25qxx_ReadPage+0x178>)
 80043ea:	f00d ff27 	bl	801223c <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 80043ee:	6939      	ldr	r1, [r7, #16]
 80043f0:	480e      	ldr	r0, [pc, #56]	; (800442c <W25qxx_ReadPage+0x180>)
 80043f2:	f00d fe9d 	bl	8012130 <iprintf>
	W25qxx_Delay(100);
 80043f6:	2064      	movs	r0, #100	; 0x64
 80043f8:	f009 fd23 	bl	800de42 <osDelay>
#endif
	W25qxx_Delay(1);
 80043fc:	2001      	movs	r0, #1
 80043fe:	f009 fd20 	bl	800de42 <osDelay>
	w25qxx.Lock = 0;
 8004402:	4b04      	ldr	r3, [pc, #16]	; (8004414 <W25qxx_ReadPage+0x168>)
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800440a:	bf00      	nop
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	200060cc 	.word	0x200060cc
 8004418:	08017460 	.word	0x08017460
 800441c:	40020c00 	.word	0x40020c00
 8004420:	20005ae0 	.word	0x20005ae0
 8004424:	08017284 	.word	0x08017284
 8004428:	08017288 	.word	0x08017288
 800442c:	0801749c 	.word	0x0801749c

08004430 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800443e:	4b36      	ldr	r3, [pc, #216]	; (8004518 <W25qxx_ReadSector+0xe8>)
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d802      	bhi.n	800444e <W25qxx_ReadSector+0x1e>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800444e:	4b32      	ldr	r3, [pc, #200]	; (8004518 <W25qxx_ReadSector+0xe8>)
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	4830      	ldr	r0, [pc, #192]	; (800451c <W25qxx_ReadSector+0xec>)
 800445c:	f00d fe68 	bl	8012130 <iprintf>
	W25qxx_Delay(100);
 8004460:	2064      	movs	r0, #100	; 0x64
 8004462:	f009 fcee 	bl	800de42 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004466:	4b2c      	ldr	r3, [pc, #176]	; (8004518 <W25qxx_ReadSector+0xe8>)
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d306      	bcc.n	800447e <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8004470:	482b      	ldr	r0, [pc, #172]	; (8004520 <W25qxx_ReadSector+0xf0>)
 8004472:	f00d fee3 	bl	801223c <puts>
		W25qxx_Delay(100);
 8004476:	2064      	movs	r0, #100	; 0x64
 8004478:	f009 fce3 	bl	800de42 <osDelay>
#endif
		return;
 800447c:	e048      	b.n	8004510 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	441a      	add	r2, r3
 8004484:	4b24      	ldr	r3, [pc, #144]	; (8004518 <W25qxx_ReadSector+0xe8>)
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	429a      	cmp	r2, r3
 800448a:	d905      	bls.n	8004498 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 800448c:	4b22      	ldr	r3, [pc, #136]	; (8004518 <W25qxx_ReadSector+0xe8>)
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	e001      	b.n	800449c <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800449c:	68b8      	ldr	r0, [r7, #8]
 800449e:	f7ff fdab 	bl	8003ff8 <W25qxx_SectorToPage>
 80044a2:	4602      	mov	r2, r0
 80044a4:	4b1c      	ldr	r3, [pc, #112]	; (8004518 <W25qxx_ReadSector+0xe8>)
 80044a6:	895b      	ldrh	r3, [r3, #10]
 80044a8:	4619      	mov	r1, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80044b0:	4413      	add	r3, r2
 80044b2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80044b4:	4b18      	ldr	r3, [pc, #96]	; (8004518 <W25qxx_ReadSector+0xe8>)
 80044b6:	895b      	ldrh	r3, [r3, #10]
 80044b8:	461a      	mov	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80044c0:	fb02 f201 	mul.w	r2, r2, r1
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	69f9      	ldr	r1, [r7, #28]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff feec 	bl	80042ac <W25qxx_ReadPage>
		StartPage++;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	3301      	adds	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80044da:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <W25qxx_ReadSector+0xe8>)
 80044dc:	895b      	ldrh	r3, [r3, #10]
 80044de:	461a      	mov	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	1a9a      	subs	r2, r3, r2
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	4413      	add	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80044ea:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <W25qxx_ReadSector+0xe8>)
 80044ec:	895b      	ldrh	r3, [r3, #10]
 80044ee:	461a      	mov	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	dce1      	bgt.n	80044c8 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8004504:	4807      	ldr	r0, [pc, #28]	; (8004524 <W25qxx_ReadSector+0xf4>)
 8004506:	f00d fe99 	bl	801223c <puts>
	W25qxx_Delay(100);
 800450a:	2064      	movs	r0, #100	; 0x64
 800450c:	f009 fc99 	bl	800de42 <osDelay>
#endif
}
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	200060cc 	.word	0x200060cc
 800451c:	080174c0 	.word	0x080174c0
 8004520:	08017500 	.word	0x08017500
 8004524:	08017520 	.word	0x08017520

08004528 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	4611      	mov	r1, r2
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	4798      	blx	r3
 8004542:	4603      	mov	r3, r0
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
 8004550:	2301      	movs	r3, #1
 8004552:	4618      	mov	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	70fb      	strb	r3, [r7, #3]
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 800459e:	2309      	movs	r3, #9
 80045a0:	e01b      	b.n	80045da <_ZN10IridiumSBD5beginEv+0x4e>

   this->reentrant = true;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalBegin();
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fa76 	bl	8004a9c <_ZN10IridiumSBD13internalBeginEv>
 80045b0:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00b      	beq.n	80045d8 <_ZN10IridiumSBD5beginEv+0x4c>
   {
      if (this->useSerial)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <_ZN10IridiumSBD5beginEv+0x44>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fdac 	bl	8005128 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 80045d0:	2100      	movs	r1, #0
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fcf6 	bl	8004fc4 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 80045f4:	2309      	movs	r3, #9
 80045f6:	e028      	b.n	800464a <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d007      	beq.n	8004612 <_ZN10IridiumSBD5sleepEv+0x30>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460c:	d101      	bne.n	8004612 <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 800460e:	230b      	movs	r3, #11
 8004610:	e01b      	b.n	800464a <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fbc8 	bl	8004db0 <_ZN10IridiumSBD13internalSleepEv>
 8004620:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10b      	bne.n	8004648 <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fd74 	bl	8005128 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 8004640:	2100      	movs	r1, #0
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fcbe 	bl	8004fc4 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004648:	68fb      	ldr	r3, [r7, #12]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	460b      	mov	r3, r1
 800465c:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
   if (enable)
 8004666:	78fb      	ldrb	r3, [r7, #3]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00e      	beq.n	800468a <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
   {
      this->ringAsserted = false;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800467a:	f083 0301 	eor.w	r3, r3, #1
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
      {
        clearRingIndicator();
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f9b3 	bl	80049f0 <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 8004694:	b5b0      	push	{r4, r5, r7, lr}
 8004696:	b09c      	sub	sp, #112	; 0x70
 8004698:	af02      	add	r7, sp, #8
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 800469e:	2301      	movs	r3, #1
 80046a0:	2201      	movs	r2, #1
 80046a2:	493f      	ldr	r1, [pc, #252]	; (80047a0 <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fd4d 	bl	8005144 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 80046aa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80046ae:	4b3d      	ldr	r3, [pc, #244]	; (80047a4 <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	4b3d      	ldr	r3, [pc, #244]	; (80047a8 <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 80046b4:	2218      	movs	r2, #24
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fb8c 	bl	8004dd4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80046bc:	4603      	mov	r3, r0
 80046be:	f083 0301 	eor.w	r3, r3, #1
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d009      	beq.n	80046dc <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fc49 	bl	8004f60 <_ZN10IridiumSBD9cancelledEv>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 80046d4:	2304      	movs	r3, #4
 80046d6:	e05e      	b.n	8004796 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 80046d8:	2303      	movs	r3, #3
 80046da:	e05c      	b.n	8004796 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 80046dc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80046e0:	4618      	mov	r0, r3
 80046e2:	f00c fa21 	bl	8010b28 <isxdigit>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 80046ec:	230c      	movs	r3, #12
 80046ee:	e052      	b.n	8004796 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 80046f0:	2372      	movs	r3, #114	; 0x72
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 80046f4:	2304      	movs	r3, #4
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 80046f8:	230b      	movs	r3, #11
 80046fa:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 80046fc:	230e      	movs	r3, #14
 80046fe:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 8004700:	2317      	movs	r3, #23
 8004702:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 8004704:	2337      	movs	r3, #55	; 0x37
 8004706:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 8004708:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800470c:	2210      	movs	r2, #16
 800470e:	2100      	movs	r1, #0
 8004710:	4618      	mov	r0, r3
 8004712:	f00e fe3d 	bl	8013390 <strtoul>
 8004716:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 8004718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800471a:	4a24      	ldr	r2, [pc, #144]	; (80047ac <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 800471c:	fba2 2303 	umull	r2, r3, r2, r3
 8004720:	099b      	lsrs	r3, r3, #6
 8004722:	225a      	movs	r2, #90	; 0x5a
 8004724:	fb02 f303 	mul.w	r3, r2, r3
 8004728:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 800472a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	4a20      	ldr	r2, [pc, #128]	; (80047b0 <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 8004730:	fba2 2303 	umull	r2, r3, r2, r3
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 8004744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004746:	225a      	movs	r2, #90	; 0x5a
 8004748:	fb02 f303 	mul.w	r3, r2, r3
 800474c:	4a17      	ldr	r2, [pc, #92]	; (80047ac <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 800474e:	fba2 2303 	umull	r2, r3, r2, r3
 8004752:	099b      	lsrs	r3, r3, #6
 8004754:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004756:	4413      	add	r3, r2
 8004758:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 800475a:	f107 0314 	add.w	r3, r7, #20
 800475e:	4618      	mov	r0, r3
 8004760:	f00c fc1c 	bl	8010f9c <mktime>
 8004764:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 8004768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800476a:	4618      	mov	r0, r3
 800476c:	f04f 0100 	mov.w	r1, #0
 8004770:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004774:	1884      	adds	r4, r0, r2
 8004776:	eb41 0503 	adc.w	r5, r1, r3
 800477a:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 800477e:	f107 0308 	add.w	r3, r7, #8
 8004782:	4618      	mov	r0, r3
 8004784:	f00c f9d8 	bl	8010b38 <localtime>
 8004788:	4603      	mov	r3, r0
 800478a:	2224      	movs	r2, #36	; 0x24
 800478c:	4619      	mov	r1, r3
 800478e:	6838      	ldr	r0, [r7, #0]
 8004790:	f00c fafc 	bl	8010d8c <memcpy>
   return ISBD_SUCCESS;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3768      	adds	r7, #104	; 0x68
 800479a:	46bd      	mov	sp, r7
 800479c:	bdb0      	pop	{r4, r5, r7, pc}
 800479e:	bf00      	nop
 80047a0:	080175dc 	.word	0x080175dc
 80047a4:	080175f4 	.word	0x080175f4
 80047a8:	080175e8 	.word	0x080175e8
 80047ac:	10624dd3 	.word	0x10624dd3
 80047b0:	b60b60b7 	.word	0xb60b60b7

080047b4 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b07      	cmp	r3, #7
 80047c4:	d801      	bhi.n	80047ca <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 80047c6:	2308      	movs	r3, #8
 80047c8:	e01e      	b.n	8004808 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 80047ca:	2301      	movs	r3, #1
 80047cc:	2201      	movs	r2, #1
 80047ce:	4910      	ldr	r1, [pc, #64]	; (8004810 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 fcb7 	bl	8005144 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 faf7 	bl	8004dd4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f083 0301 	eor.w	r3, r3, #1
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fbb4 	bl	8004f60 <_ZN10IridiumSBD9cancelledEv>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 80047fe:	2304      	movs	r3, #4
 8004800:	e002      	b.n	8004808 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 8004802:	2303      	movs	r3, #3
 8004804:	e000      	b.n	8004808 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	080175fc 	.word	0x080175fc
 8004814:	080175f4 	.word	0x080175f4
 8004818:	08017608 	.word	0x08017608

0800481c <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800482e:	2b00      	cmp	r3, #0
 8004830:	d004      	beq.n	800483c <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004832:	4918      	ldr	r1, [pc, #96]	; (8004894 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fd2d 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 800483a:	e028      	b.n	800488e <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f001 f80b 	bl	8005858 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00b      	beq.n	8004860 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004854:	4313      	orrs	r3, r2
 8004856:	b2da      	uxtb	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800485e:	e00f      	b.n	8004880 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004866:	b25a      	sxtb	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800486e:	b25b      	sxtb	r3, r3
 8004870:	43db      	mvns	r3, r3
 8004872:	b25b      	sxtb	r3, r3
 8004874:	4013      	ands	r3, r2
 8004876:	b25b      	sxtb	r3, r3
 8004878:	b2da      	uxtb	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f001 f820 	bl	80058ce <_ZN10IridiumSBD11set9603pinsEh>
}
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	08017624 	.word	0x08017624

08004898 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d005      	beq.n	80048b6 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1e>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 80048aa:	4912      	ldr	r1, [pc, #72]	; (80048f4 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fcf1 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 80048b2:	2300      	movs	r3, #0
 80048b4:	e01a      	b.n	80048ec <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 ffce 	bl	8005858 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 80048c8:	4013      	ands	r3, r2
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  {
    return(true);
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }
  else
  {
    return(false);
 80048ea:	2300      	movs	r3, #0
  }
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	08017670 	.word	0x08017670

080048f8 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800490a:	2b00      	cmp	r3, #0
 800490c:	d004      	beq.n	8004918 <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 800490e:	4918      	ldr	r1, [pc, #96]	; (8004970 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fcbf 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004916:	e028      	b.n	800496a <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 ff9d 	bl	8005858 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00b      	beq.n	800493c <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004930:	4313      	orrs	r3, r2
 8004932:	b2da      	uxtb	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800493a:	e00f      	b.n	800495c <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004942:	b25a      	sxtb	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 800494a:	b25b      	sxtb	r3, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	b25b      	sxtb	r3, r3
 8004950:	4013      	ands	r3, r2
 8004952:	b25b      	sxtb	r3, r3
 8004954:	b2da      	uxtb	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 ffb2 	bl	80058ce <_ZN10IridiumSBD11set9603pinsEh>
}
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	080176bc 	.word	0x080176bc

08004974 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004986:	2b00      	cmp	r3, #0
 8004988:	d004      	beq.n	8004994 <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 800498a:	4918      	ldr	r1, [pc, #96]	; (80049ec <_ZN10IridiumSBD10enable9603Eb+0x78>)
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fc81 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004992:	e028      	b.n	80049e6 <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 ff5f 	bl	8005858 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00b      	beq.n	80049b8 <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 80049ac:	4313      	orrs	r3, r2
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80049b6:	e00f      	b.n	80049d8 <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80049be:	b25a      	sxtb	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 80049c6:	b25b      	sxtb	r3, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	b25b      	sxtb	r3, r3
 80049cc:	4013      	ands	r3, r2
 80049ce:	b25b      	sxtb	r3, r3
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80049de:	4619      	mov	r1, r3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 ff74 	bl	80058ce <_ZN10IridiumSBD11set9603pinsEh>
}
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	08017704 	.word	0x08017704

080049f0 <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d004      	beq.n	8004a0c <_ZN10IridiumSBD18clearRingIndicatorEv+0x1c>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004a02:	4913      	ldr	r1, [pc, #76]	; (8004a50 <_ZN10IridiumSBD18clearRingIndicatorEv+0x60>)
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fc45 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004a0a:	e01d      	b.n	8004a48 <_ZN10IridiumSBD18clearRingIndicatorEv+0x58>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 ff23 	bl	8005858 <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004a18:	b25a      	sxtb	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004a20:	b25b      	sxtb	r3, r3
 8004a22:	43db      	mvns	r3, r3
 8004a24:	b25b      	sxtb	r3, r3
 8004a26:	4013      	ands	r3, r2
 8004a28:	b25b      	sxtb	r3, r3
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  set9603pins(IO_REGISTER); // Update the pins
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004a38:	4619      	mov	r1, r3
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 ff47 	bl	80058ce <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	080177d4 	.word	0x080177d4

08004a54 <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <_ZN10IridiumSBD11isConnectedEv+0x16>
   {
		return true;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e013      	b.n	8004a92 <_ZN10IridiumSBD11isConnectedEv+0x3e>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f001 fc62 	bl	8006340 <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 fca7 	bl	80063d4 <_ZN7TwoWire15endTransmissionEv>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
   }
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b090      	sub	sp, #64	; 0x40
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8004aa4:	49b1      	ldr	r1, [pc, #708]	; (8004d6c <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fbf4 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004ab2:	f083 0301 	eor.w	r3, r3, #1
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e150      	b.n	8004d62 <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (!this->useSerial) // If we are using I2C
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ac6:	f083 0301 	eor.w	r3, r3, #1
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d005      	beq.n	8004adc <_ZN10IridiumSBD13internalBeginEv+0x40>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fec1 	bl	8005858 <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fde6 	bl	80056a8 <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 8004adc:	2101      	movs	r1, #1
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fa70 	bl	8004fc4 <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 8004aea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 8004af0:	f003 f950 	bl	8007d94 <HAL_GetTick>
 8004af4:	62b8      	str	r0, [r7, #40]	; 0x28
 8004af6:	f003 f94d 	bl	8007d94 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b02:	429a      	cmp	r2, r3
 8004b04:	bf8c      	ite	hi
 8004b06:	2301      	movhi	r3, #1
 8004b08:	2300      	movls	r3, #0
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <_ZN10IridiumSBD13internalBeginEv+0x84>
      if (cancelled())
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fa25 	bl	8004f60 <_ZN10IridiumSBD9cancelledEv>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0ec      	beq.n	8004af6 <_ZN10IridiumSBD13internalBeginEv+0x5a>
         return ISBD_CANCELLED;
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	e120      	b.n	8004d62 <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (this->useSerial) // If we are using Serial
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <_ZN10IridiumSBD13internalBeginEv+0x94>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 faee 	bl	800510c <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 8004b30:	f003 f930 	bl	8007d94 <HAL_GetTick>
 8004b34:	6278      	str	r0, [r7, #36]	; 0x24
 8004b36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b3a:	f083 0301 	eor.w	r3, r3, #1
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d010      	beq.n	8004b66 <_ZN10IridiumSBD13internalBeginEv+0xca>
 8004b44:	f003 f926 	bl	8007d94 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	1ad2      	subs	r2, r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b54:	4619      	mov	r1, r3
 8004b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b5a:	fb03 f301 	mul.w	r3, r3, r1
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d201      	bcs.n	8004b66 <_ZN10IridiumSBD13internalBeginEv+0xca>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <_ZN10IridiumSBD13internalBeginEv+0xcc>
 8004b66:	2300      	movs	r3, #0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d018      	beq.n	8004b9e <_ZN10IridiumSBD13internalBeginEv+0x102>
   {
      send(F("AT\r"));
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	2201      	movs	r2, #1
 8004b70:	497f      	ldr	r1, [pc, #508]	; (8004d70 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fae6 	bl	8005144 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8004b78:	4b7e      	ldr	r3, [pc, #504]	; (8004d74 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2100      	movs	r1, #0
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f926 	bl	8004dd4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f9e6 	bl	8004f60 <_ZN10IridiumSBD9cancelledEv>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0cd      	beq.n	8004b36 <_ZN10IridiumSBD13internalBeginEv+0x9a>
         return ISBD_CANCELLED;
 8004b9a:	2304      	movs	r3, #4
 8004b9c:	e0e1      	b.n	8004d62 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   if (!modemAlive)
 8004b9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ba2:	f083 0301 	eor.w	r3, r3, #1
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <_ZN10IridiumSBD13internalBeginEv+0x11c>
   {
      diagprint(F("No modem detected.\r\n"));
 8004bac:	4972      	ldr	r1, [pc, #456]	; (8004d78 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fb70 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8004bb4:	2305      	movs	r3, #5
 8004bb6:	e0d4      	b.n	8004d62 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8004bb8:	4a70      	ldr	r2, [pc, #448]	; (8004d7c <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 8004bba:	f107 0310 	add.w	r3, r7, #16
 8004bbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8004bc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	dc26      	bgt.n	8004c1c <_ZN10IridiumSBD13internalBeginEv+0x180>
   {
      send(strings[i]);
 8004bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fb0a 	bl	80051f8 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8004be4:	4b63      	ldr	r3, [pc, #396]	; (8004d74 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	2300      	movs	r3, #0
 8004bea:	2200      	movs	r2, #0
 8004bec:	2100      	movs	r1, #0
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8f0 	bl	8004dd4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f083 0301 	eor.w	r3, r3, #1
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d009      	beq.n	8004c14 <_ZN10IridiumSBD13internalBeginEv+0x178>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f9ad 	bl	8004f60 <_ZN10IridiumSBD9cancelledEv>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <_ZN10IridiumSBD13internalBeginEv+0x174>
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	e0a8      	b.n	8004d62 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8004c10:	2303      	movs	r3, #3
 8004c12:	e0a6      	b.n	8004d62 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   for (int i=0; i<3; ++i)
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	3301      	adds	r3, #1
 8004c18:	633b      	str	r3, [r7, #48]	; 0x30
 8004c1a:	e7d5      	b.n	8004bc8 <_ZN10IridiumSBD13internalBeginEv+0x12c>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 8004c1c:	4958      	ldr	r1, [pc, #352]	; (8004d80 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fb38 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <_ZN10IridiumSBD13internalBeginEv+0x196>
 8004c2e:	4b55      	ldr	r3, [pc, #340]	; (8004d84 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8004c30:	e000      	b.n	8004c34 <_ZN10IridiumSBD13internalBeginEv+0x198>
 8004c32:	4b55      	ldr	r3, [pc, #340]	; (8004d88 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8004c34:	4619      	mov	r1, r3
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fb2c 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004c3c:	4953      	ldr	r1, [pc, #332]	; (8004d8c <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fb28 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d004      	beq.n	8004c58 <_ZN10IridiumSBD13internalBeginEv+0x1bc>
 8004c4e:	2101      	movs	r1, #1
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff fcfe 	bl	8004652 <_ZN10IridiumSBD16enableRingAlertsEb>
 8004c56:	e00a      	b.n	8004c6e <_ZN10IridiumSBD13internalBeginEv+0x1d2>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5e:	f083 0301 	eor.w	r3, r3, #1
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <_ZN10IridiumSBD13internalBeginEv+0x1d2>
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff fec1 	bl	80049f0 <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <_ZN10IridiumSBD13internalBeginEv+0x1e0>
 8004c78:	4945      	ldr	r1, [pc, #276]	; (8004d90 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8004c7a:	e000      	b.n	8004c7e <_ZN10IridiumSBD13internalBeginEv+0x1e2>
 8004c7c:	4945      	ldr	r1, [pc, #276]	; (8004d94 <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 8004c7e:	2301      	movs	r3, #1
 8004c80:	2201      	movs	r2, #1
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fa5e 	bl	8005144 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 8004c88:	4b3a      	ldr	r3, [pc, #232]	; (8004d74 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2100      	movs	r1, #0
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f89e 	bl	8004dd4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f083 0301 	eor.w	r3, r3, #1
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d009      	beq.n	8004cb8 <_ZN10IridiumSBD13internalBeginEv+0x21c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f95b 	bl	8004f60 <_ZN10IridiumSBD9cancelledEv>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <_ZN10IridiumSBD13internalBeginEv+0x218>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	e056      	b.n	8004d62 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e054      	b.n	8004d62 <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8004cb8:	f107 0308 	add.w	r3, r7, #8
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff fd77 	bl	80047b4 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8004cc6:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <_ZN10IridiumSBD13internalBeginEv+0x244>
   {
      diagprint(F("Unknown FW version\r\n"));
 8004cce:	4932      	ldr	r1, [pc, #200]	; (8004d98 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fadf 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8004cde:	e027      	b.n	8004d30 <_ZN10IridiumSBD13internalBeginEv+0x294>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 8004ce0:	492e      	ldr	r1, [pc, #184]	; (8004d9c <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fad6 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004ce8:	f107 0308 	add.w	r3, r7, #8
 8004cec:	4619      	mov	r1, r3
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 faf6 	bl	80052e0 <_ZN10IridiumSBD9diagprintEPKc>
 8004cf4:	492a      	ldr	r1, [pc, #168]	; (8004da0 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 facc 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 8004cfc:	7a3b      	ldrb	r3, [r7, #8]
 8004cfe:	2b54      	cmp	r3, #84	; 0x54
 8004d00:	d116      	bne.n	8004d30 <_ZN10IridiumSBD13internalBeginEv+0x294>
 8004d02:	7a7b      	ldrb	r3, [r7, #9]
 8004d04:	2b41      	cmp	r3, #65	; 0x41
 8004d06:	d113      	bne.n	8004d30 <_ZN10IridiumSBD13internalBeginEv+0x294>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 8004d08:	f107 0308 	add.w	r3, r7, #8
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	220a      	movs	r2, #10
 8004d10:	2100      	movs	r1, #0
 8004d12:	4618      	mov	r0, r3
 8004d14:	f00e fb3c 	bl	8013390 <strtoul>
 8004d18:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004d20:	4293      	cmp	r3, r2
 8004d22:	bf94      	ite	ls
 8004d24:	2301      	movls	r3, #1
 8004d26:	2300      	movhi	r3, #0
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 8004d30:	491c      	ldr	r1, [pc, #112]	; (8004da4 <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 faae 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8004d44:	e000      	b.n	8004d48 <_ZN10IridiumSBD13internalBeginEv+0x2ac>
 8004d46:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 faa2 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004d50:	4915      	ldr	r1, [pc, #84]	; (8004da8 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fa9e 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 8004d58:	4914      	ldr	r1, [pc, #80]	; (8004dac <_ZN10IridiumSBD13internalBeginEv+0x310>)
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fa9a 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3738      	adds	r7, #56	; 0x38
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	080178f4 	.word	0x080178f4
 8004d70:	0801790c 	.word	0x0801790c
 8004d74:	080175f4 	.word	0x080175f4
 8004d78:	08017910 	.word	0x08017910
 8004d7c:	080179e4 	.word	0x080179e4
 8004d80:	08017928 	.word	0x08017928
 8004d84:	08017938 	.word	0x08017938
 8004d88:	0801793c 	.word	0x0801793c
 8004d8c:	08017944 	.word	0x08017944
 8004d90:	08017950 	.word	0x08017950
 8004d94:	08017960 	.word	0x08017960
 8004d98:	08017970 	.word	0x08017970
 8004d9c:	08017988 	.word	0x08017988
 8004da0:	080179a0 	.word	0x080179a0
 8004da4:	080179a4 	.word	0x080179a4
 8004da8:	080179b8 	.word	0x080179b8
 8004dac:	080179c8 	.word	0x080179c8

08004db0 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8004dc2:	230a      	movs	r3, #10
 8004dc4:	e000      	b.n	8004dc8 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b08b      	sub	sp, #44	; 0x2c
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 8004de2:	495d      	ldr	r1, [pc, #372]	; (8004f58 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x184>)
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fa55 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 8004dea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fa77 	bl	80052e0 <_ZN10IridiumSBD9diagprintEPKc>
   HAL_UART_Transmit(&(this->uart),(uint8_t*) terminator, strlen(terminator), HAL_MAX_DELAY); //TODO doesn't print otherwise
 8004df2:	68fc      	ldr	r4, [r7, #12]
 8004df4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004df6:	f7fb fa05 	bl	8000204 <strlen>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004e02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e04:	4620      	mov	r0, r4
 8004e06:	f007 fe86 	bl	800cb16 <HAL_UART_Transmit>
   diagprint(F("\r\n"));
 8004e0a:	4954      	ldr	r1, [pc, #336]	; (8004f5c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x188>)
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 fa41 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x50>
      memset(response, 0, responseSize);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	68b8      	ldr	r0, [r7, #8]
 8004e20:	f00b ffdc 	bl	8010ddc <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 8004e24:	2300      	movs	r3, #0
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8004e28:	2300      	movs	r3, #0
 8004e2a:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x62>
 8004e32:	2300      	movs	r3, #0
 8004e34:	e000      	b.n	8004e38 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x64>
 8004e36:	2302      	movs	r3, #2
 8004e38:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial
   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 8004e3a:	f002 ffab 	bl	8007d94 <HAL_GetTick>
 8004e3e:	61b8      	str	r0, [r7, #24]
 8004e40:	f002 ffa8 	bl	8007d94 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	1ad2      	subs	r2, r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e50:	4619      	mov	r1, r3
 8004e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e56:	fb03 f301 	mul.w	r3, r3, r1
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	bf34      	ite	cc
 8004e5e:	2301      	movcc	r3, #1
 8004e60:	2300      	movcs	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d072      	beq.n	8004f4e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17a>
   {
      if (cancelled())
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f879 	bl	8004f60 <_ZN10IridiumSBD9cancelledEv>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         return false;
 8004e74:	2300      	movs	r3, #0
 8004e76:	e06b      	b.n	8004f50 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>

      while (filteredavailable() > 0)
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 fbb3 	bl	80055e4 <_ZN10IridiumSBD17filteredavailableEv>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bfcc      	ite	gt
 8004e84:	2301      	movgt	r3, #1
 8004e86:	2300      	movle	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0d8      	beq.n	8004e40 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x6c>
      {
         char c = filteredread();
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fbc4 	bl	800561c <_ZN10IridiumSBD12filteredreadEv>
 8004e94:	4603      	mov	r3, r0
 8004e96:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d03b      	beq.n	8004f16 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
         {
            switch (promptState)
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xd8>
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d01d      	beq.n	8004ee6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 8004eaa:	e034      	b.n	8004f16 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	7dfa      	ldrb	r2, [r7, #23]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d10b      	bne.n	8004ed2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfe>
               {
                  ++matchPromptPos;
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d121      	bne.n	8004f10 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                     promptState = GATHERING_RESPONSE;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 8004ed0:	e01e      	b.n	8004f10 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	7dfa      	ldrb	r2, [r7, #23]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d101      	bne.n	8004ee0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10c>
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10e>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 8004ee4:	e014      	b.n	8004f10 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d013      	beq.n	8004f14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               {
                  if (c == '\r' || responseSize < 2)
 8004eec:	7dfb      	ldrb	r3, [r7, #23]
 8004eee:	2b0d      	cmp	r3, #13
 8004ef0:	d002      	beq.n	8004ef8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x124>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	dc02      	bgt.n	8004efe <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 8004efc:	e00a      	b.n	8004f14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
                     *response++ = c;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	60ba      	str	r2, [r7, #8]
 8004f04:	7dfa      	ldrb	r2, [r7, #23]
 8004f06:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	607b      	str	r3, [r7, #4]
               break;
 8004f0e:	e001      	b.n	8004f14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               break;
 8004f10:	bf00      	nop
 8004f12:	e000      	b.n	8004f16 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
               break;
 8004f14:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f1a:	4413      	add	r3, r2
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	7dfa      	ldrb	r2, [r7, #23]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d10a      	bne.n	8004f3a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x166>
         {
            ++matchTerminatorPos;
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	3301      	adds	r3, #1
 8004f28:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f2e:	4413      	add	r3, r2
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1a0      	bne.n	8004e78 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
               return true;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e00a      	b.n	8004f50 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	7dfa      	ldrb	r2, [r7, #23]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d101      	bne.n	8004f48 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x176>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8004f4c:	e794      	b.n	8004e78 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	372c      	adds	r7, #44	; 0x2c
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd90      	pop	{r4, r7, pc}
 8004f58:	08017b28 	.word	0x08017b28
 8004f5c:	080179a0 	.word	0x080179a0

08004f60 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d019      	beq.n	8004fa6 <_ZN10IridiumSBD9cancelledEv+0x46>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7c:	d008      	beq.n	8004f90 <_ZN10IridiumSBD9cancelledEv+0x30>
 8004f7e:	2110      	movs	r1, #16
 8004f80:	480e      	ldr	r0, [pc, #56]	; (8004fbc <_ZN10IridiumSBD9cancelledEv+0x5c>)
 8004f82:	f003 fc69 	bl	8008858 <HAL_GPIO_ReadPin>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <_ZN10IridiumSBD9cancelledEv+0x30>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <_ZN10IridiumSBD9cancelledEv+0x32>
 8004f90:	2300      	movs	r3, #0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <_ZN10IridiumSBD9cancelledEv+0x46>
	  {
         ringAsserted = true;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		 diagprint(F("ringPin seen!\r\n"));
 8004f9e:	4908      	ldr	r1, [pc, #32]	; (8004fc0 <_ZN10IridiumSBD9cancelledEv+0x60>)
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f977 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 8004fa6:	f7ff fad1 	bl	800454c <_Z12ISBDCallbackv>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f083 0301 	eor.w	r3, r3, #1
 8004fb0:	b2db      	uxtb	r3, r3
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40020800 	.word	0x40020800
 8004fc0:	08017b40 	.word	0x08017b40

08004fc4 <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	f083 0301 	eor.w	r3, r3, #1
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d011      	beq.n	800500c <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff2:	d04c      	beq.n	800508e <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f84e 	bl	80050a0 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d018      	beq.n	8005044 <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 8005012:	4921      	ldr	r1, [pc, #132]	; (8005098 <_ZN10IridiumSBD5powerEb+0xd4>)
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f93d 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005020:	2b00      	cmp	r3, #0
 8005022:	d004      	beq.n	800502e <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 8005024:	2101      	movs	r1, #1
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f848 	bl	80050bc <_ZN10IridiumSBD11setSleepPinEh>
 800502c:	e003      	b.n	8005036 <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 800502e:	2101      	movs	r1, #1
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff fc9f 	bl	8004974 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8005036:	f002 fead 	bl	8007d94 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8005042:	e025      	b.n	8005090 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8005044:	f002 fea6 	bl	8007d94 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800505a:	d205      	bcs.n	8005068 <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8005062:	4618      	mov	r0, r3
 8005064:	f002 fea2 	bl	8007dac <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8005068:	490c      	ldr	r1, [pc, #48]	; (800509c <_ZN10IridiumSBD5powerEb+0xd8>)
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f912 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005076:	2b00      	cmp	r3, #0
 8005078:	d004      	beq.n	8005084 <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 800507a:	2100      	movs	r1, #0
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f81d 	bl	80050bc <_ZN10IridiumSBD11setSleepPinEh>
 8005082:	e005      	b.n	8005090 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 8005084:	2100      	movs	r1, #0
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff fc74 	bl	8004974 <_ZN10IridiumSBD10enable9603Eb>
 800508c:	e000      	b.n	8005090 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 800508e:	bf00      	nop
      }
   }
}
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	08017b94 	.word	0x08017b94
 800509c:	08017bac 	.word	0x08017bac

080050a0 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 80050a8:	4903      	ldr	r1, [pc, #12]	; (80050b8 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f8f2 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	08017bc4 	.word	0x08017bc4

080050bc <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 80050c8:	2201      	movs	r2, #1
 80050ca:	2108      	movs	r1, #8
 80050cc:	480b      	ldr	r0, [pc, #44]	; (80050fc <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 80050ce:	f003 fbdb 	bl	8008888 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 80050d2:	490b      	ldr	r1, [pc, #44]	; (8005100 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f8dd 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d104      	bne.n	80050ea <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 80050e0:	4908      	ldr	r1, [pc, #32]	; (8005104 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f8d6 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 80050e8:	e003      	b.n	80050f2 <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 80050ea:	4907      	ldr	r1, [pc, #28]	; (8005108 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f8d1 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40020800 	.word	0x40020800
 8005100:	08017bf0 	.word	0x08017bf0
 8005104:	08017c0c 	.word	0x08017c0c
 8005108:	08017c14 	.word	0x08017c14

0800510c <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 8005114:	4903      	ldr	r1, [pc, #12]	; (8005124 <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f8bc 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	08017c1c 	.word	0x08017c1c

08005128 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8005130:	4903      	ldr	r1, [pc, #12]	; (8005140 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f8ae 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005138:	bf00      	nop
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	08017c3c 	.word	0x08017c3c

08005144 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	4611      	mov	r1, r2
 8005150:	461a      	mov	r2, r3
 8005152:	460b      	mov	r3, r1
 8005154:	71fb      	strb	r3, [r7, #7]
 8005156:	4613      	mov	r3, r2
 8005158:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8005160:	4922      	ldr	r1, [pc, #136]	; (80051ec <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f8de 	bl	8005324 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f8da 	bl	8005324 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8005170:	79bb      	ldrb	r3, [r7, #6]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 8005176:	491e      	ldr	r1, [pc, #120]	; (80051f0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f8d3 	bl	8005324 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005184:	2b00      	cmp	r3, #0
 8005186:	d006      	beq.n	8005196 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x52>
   {
      stream->print(str);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	4618      	mov	r0, r3
 8005190:	f001 f80a 	bl	80061a8 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8005194:	e025      	b.n	80051e2 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f001 f8cc 	bl	8006340 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ac:	21ff      	movs	r1, #255	; 0xff
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff f9ba 	bl	8004528 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fff4 	bl	80061a8 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c4:	4618      	mov	r0, r3
 80051c6:	f001 f905 	bl	80063d4 <_ZN7TwoWire15endTransmissionEv>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	bf14      	ite	ne
 80051d0:	2301      	movne	r3, #1
 80051d2:	2300      	moveq	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
         diagprint(F("I2C write was not successful!\r\n"));
 80051da:	4906      	ldr	r1, [pc, #24]	; (80051f4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f859 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80051e2:	bf00      	nop
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	08017c58 	.word	0x08017c58
 80051f0:	080179a0 	.word	0x080179a0
 80051f4:	08017a20 	.word	0x08017a20

080051f8 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 8005202:	4921      	ldr	r1, [pc, #132]	; (8005288 <_ZN10IridiumSBD4sendEPKc+0x90>)
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f88d 	bl	8005324 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f8af 	bl	8005370 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8005212:	491e      	ldr	r1, [pc, #120]	; (800528c <_ZN10IridiumSBD4sendEPKc+0x94>)
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f885 	bl	8005324 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005220:	2b00      	cmp	r3, #0
 8005222:	d006      	beq.n	8005232 <_ZN10IridiumSBD4sendEPKc+0x3a>
   {
      stream->print(str);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 ffca 	bl	80061c4 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8005230:	e025      	b.n	800527e <_ZN10IridiumSBD4sendEPKc+0x86>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800523c:	4619      	mov	r1, r3
 800523e:	4610      	mov	r0, r2
 8005240:	f001 f87e 	bl	8006340 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005248:	21ff      	movs	r1, #255	; 0xff
 800524a:	4618      	mov	r0, r3
 800524c:	f7ff f96c 	bl	8004528 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f000 ffb4 	bl	80061c4 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005260:	4618      	mov	r0, r3
 8005262:	f001 f8b7 	bl	80063d4 <_ZN7TwoWire15endTransmissionEv>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	bf14      	ite	ne
 800526c:	2301      	movne	r3, #1
 800526e:	2300      	moveq	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <_ZN10IridiumSBD4sendEPKc+0x86>
         diagprint(F("I2C write was not successful!\r\n"));
 8005276:	4906      	ldr	r1, [pc, #24]	; (8005290 <_ZN10IridiumSBD4sendEPKc+0x98>)
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f80b 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	08017c58 	.word	0x08017c58
 800528c:	080179a0 	.word	0x080179a0
 8005290:	08017a20 	.word	0x08017a20

08005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 8005294:	b590      	push	{r4, r7, lr}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	60fa      	str	r2, [r7, #12]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80052ac:	7afb      	ldrb	r3, [r7, #11]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 80052b2:	7afb      	ldrb	r3, [r7, #11]
 80052b4:	4619      	mov	r1, r3
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff f95c 	bl	8004574 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 80052bc:	e7f1      	b.n	80052a2 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 80052be:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 80052c0:	687c      	ldr	r4, [r7, #4]
 80052c2:	6838      	ldr	r0, [r7, #0]
 80052c4:	f7fa ff9e 	bl	8000204 <strlen>
 80052c8:	4603      	mov	r3, r0
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	f04f 33ff 	mov.w	r3, #4294967295
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	4620      	mov	r0, r4
 80052d4:	f007 fc1f 	bl	800cb16 <HAL_UART_Transmit>
}
 80052d8:	bf00      	nop
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd90      	pop	{r4, r7, pc}

080052e0 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 80052e0:	b590      	push	{r4, r7, lr}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
   while (*str)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d008      	beq.n	8005304 <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	603a      	str	r2, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	4619      	mov	r1, r3
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff f939 	bl	8004574 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 8005302:	e7f2      	b.n	80052ea <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8005304:	687c      	ldr	r4, [r7, #4]
 8005306:	6838      	ldr	r0, [r7, #0]
 8005308:	f7fa ff7c 	bl	8000204 <strlen>
 800530c:	4603      	mov	r3, r0
 800530e:	b29a      	uxth	r2, r3
 8005310:	f04f 33ff 	mov.w	r3, #4294967295
 8005314:	6839      	ldr	r1, [r7, #0]
 8005316:	4620      	mov	r0, r4
 8005318:	f007 fbfd 	bl	800cb16 <HAL_UART_Transmit>
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	bd90      	pop	{r4, r7, pc}

08005324 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:
   diagprint(str); //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(FlashString str)
{
 8005324:	b590      	push	{r4, r7, lr}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	60fa      	str	r2, [r7, #12]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 800533c:	7afb      	ldrb	r3, [r7, #11]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 8005342:	7afb      	ldrb	r3, [r7, #11]
 8005344:	4619      	mov	r1, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff f908 	bl	800455c <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 800534c:	e7f1      	b.n	8005332 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 800534e:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*) str), HAL_MAX_DELAY);
 8005350:	687c      	ldr	r4, [r7, #4]
 8005352:	6838      	ldr	r0, [r7, #0]
 8005354:	f7fa ff56 	bl	8000204 <strlen>
 8005358:	4603      	mov	r3, r0
 800535a:	b29a      	uxth	r2, r3
 800535c:	f04f 33ff 	mov.w	r3, #4294967295
 8005360:	6839      	ldr	r1, [r7, #0]
 8005362:	4620      	mov	r0, r4
 8005364:	f007 fbd7 	bl	800cb16 <HAL_UART_Transmit>
}
 8005368:	bf00      	nop
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	bd90      	pop	{r4, r7, pc}

08005370 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 8005370:	b590      	push	{r4, r7, lr}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
   while (*str)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d008      	beq.n	8005394 <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	603a      	str	r2, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff f8e5 	bl	800455c <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 8005392:	e7f2      	b.n	800537a <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8005394:	687c      	ldr	r4, [r7, #4]
 8005396:	6838      	ldr	r0, [r7, #0]
 8005398:	f7fa ff34 	bl	8000204 <strlen>
 800539c:	4603      	mov	r3, r0
 800539e:	b29a      	uxth	r2, r3
 80053a0:	f04f 33ff 	mov.w	r3, #4294967295
 80053a4:	6839      	ldr	r1, [r7, #0]
 80053a6:	4620      	mov	r0, r4
 80053a8:	f007 fbb5 	bl	800cb16 <HAL_UART_Transmit>
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd90      	pop	{r4, r7, pc}

080053b4 <_ZN10IridiumSBD12consoleprintEc>:
   //consoleprint((const char*) str);
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(char c)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	4619      	mov	r1, r3
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff f8c9 	bl	800455c <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 80053ca:	bf00      	nop
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   diagprint(F("SBDRING alert seen!\r\n"));
 80053e4:	4903      	ldr	r1, [pc, #12]	; (80053f4 <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff ff54 	bl	8005294 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80053ec:	bf00      	nop
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	08017c60 	.word	0x08017c60

080053f8 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005406:	f083 0301 	eor.w	r3, r3, #1
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f949 	bl	80056a8 <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <_ZN10IridiumSBD13filterSBDRINGEv+0x40>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3308      	adds	r3, #8
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4610      	mov	r0, r2
 8005430:	4798      	blx	r3
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	dc0d      	bgt.n	8005454 <_ZN10IridiumSBD13filterSBDRINGEv+0x5c>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800543e:	f083 0301 	eor.w	r3, r3, #1
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00d      	beq.n	8005464 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fa67 	bl	800591c <_ZN10IridiumSBD15i2cSerAvailableEv>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	dd07      	ble.n	8005464 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545e:	d101      	bne.n	8005464 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <_ZN10IridiumSBD13filterSBDRINGEv+0x6e>
 8005464:	2300      	movs	r3, #0
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 80b6 	beq.w	80055d8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e0>
   {
      char c;
      if (this->useSerial)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00b      	beq.n	800548e <_ZN10IridiumSBD13filterSBDRINGEv+0x96>
      {
         c = stream->read();
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4610      	mov	r0, r2
 8005486:	4798      	blx	r3
 8005488:	4603      	mov	r3, r0
 800548a:	73fb      	strb	r3, [r7, #15]
 800548c:	e004      	b.n	8005498 <_ZN10IridiumSBD13filterSBDRINGEv+0xa0>
      }
      else
      {
         c = i2cSerRead();
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fa5e 	bl	8005950 <_ZN10IridiumSBD10i2cSerReadEv>
 8005494:	4603      	mov	r3, r0
 8005496:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff ff89 	bl	80053b4 <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 808d 	beq.w	80055ca <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	7bfa      	ldrb	r2, [r7, #15]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	f040 8085 	bne.w	80055ca <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
      {
         ++head;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
         if (*head == 0)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10d      	bne.n	80054f6 <_ZN10IridiumSBD13filterSBDRINGEv+0xfe>
         {
            SBDRINGSeen();
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff ff7a 	bl	80053d4 <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a3f      	ldr	r2, [pc, #252]	; (80055e0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e8>)
 80054e4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 80054f4:	e06e      	b.n	80055d4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 80054f6:	f002 fc4d 	bl	8007d94 <HAL_GetTick>
 80054fa:	60b8      	str	r0, [r7, #8]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00b      	beq.n	800551e <_ZN10IridiumSBD13filterSBDRINGEv+0x126>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3308      	adds	r3, #8
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4610      	mov	r0, r2
 8005516:	4798      	blx	r3
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00d      	beq.n	800553a <_ZN10IridiumSBD13filterSBDRINGEv+0x142>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005524:	f083 0301 	eor.w	r3, r3, #1
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00e      	beq.n	800554c <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f9f4 	bl	800591c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d108      	bne.n	800554c <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 800553a:	f002 fc2b 	bl	8007d94 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b09      	cmp	r3, #9
 8005546:	d801      	bhi.n	800554c <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <_ZN10IridiumSBD13filterSBDRINGEv+0x156>
 800554c:	2300      	movs	r3, #0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d000      	beq.n	8005554 <_ZN10IridiumSBD13filterSBDRINGEv+0x15c>
 8005552:	e7d3      	b.n	80054fc <_ZN10IridiumSBD13filterSBDRINGEv+0x104>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800555a:	f083 0301 	eor.w	r3, r3, #1
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <_ZN10IridiumSBD13filterSBDRINGEv+0x172>
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f89f 	bl	80056a8 <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00b      	beq.n	800558c <_ZN10IridiumSBD13filterSBDRINGEv+0x194>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4610      	mov	r0, r2
 8005584:	4798      	blx	r3
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00d      	beq.n	80055a8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005592:	f083 0301 	eor.w	r3, r3, #1
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d007      	beq.n	80055ac <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f9bd 	bl	800591c <_ZN10IridiumSBD15i2cSerAvailableEv>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <_ZN10IridiumSBD13filterSBDRINGEv+0x1b6>
 80055ac:	2300      	movs	r3, #0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d010      	beq.n	80055d4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
               --head;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80055b8:	1e5a      	subs	r2, r3, #1
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
               nextChar = c;
 80055c0:	7bfa      	ldrb	r2, [r7, #15]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
         }
 80055c8:	e004      	b.n	80055d4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
      }
      else
      {
         nextChar = c;
 80055ca:	7bfa      	ldrb	r2, [r7, #15]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80055d2:	e720      	b.n	8005416 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
         }
 80055d4:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 80055d6:	e71e      	b.n	8005416 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
      }
   }
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	0801867c 	.word	0x0801867c

080055e4 <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff ff03 	bl	80053f8 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 8005606:	f1b2 3fff 	cmp.w	r2, #4294967295
 800560a:	d001      	beq.n	8005610 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 800560c:	2201      	movs	r2, #1
 800560e:	e000      	b.n	8005612 <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8005610:	2200      	movs	r2, #0
 8005612:	4413      	add	r3, r2
}
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff fee7 	bl	80053f8 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005636:	429a      	cmp	r2, r3
 8005638:	d91c      	bls.n	8005674 <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005640:	1c59      	adds	r1, r3, #1
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005658:	429a      	cmp	r2, r3
 800565a:	d109      	bne.n	8005670 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a11      	ldr	r2, [pc, #68]	; (80056a4 <_ZN10IridiumSBD12filteredreadEv+0x88>)
 8005660:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      return c;
 8005670:	7bbb      	ldrb	r3, [r7, #14]
 8005672:	e012      	b.n	800569a <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d00a      	beq.n	8005696 <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005686:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f04f 32ff 	mov.w	r2, #4294967295
 800568e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      return c;
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	e001      	b.n	800569a <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 8005696:	f04f 33ff 	mov.w	r3, #4294967295
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	0801867c 	.word	0x0801867c

080056a8 <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 80056b0:	f002 fb70 	bl	8007d94 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 80056c4:	4293      	cmp	r3, r2
 80056c6:	bf2c      	ite	cs
 80056c8:	2301      	movcs	r3, #1
 80056ca:	2300      	movcc	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 80be 	beq.w	8005850 <_ZN10IridiumSBD13check9603dataEv+0x1a8>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f000 fe2b 	bl	8006340 <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ee:	21fd      	movs	r1, #253	; 0xfd
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fe ff19 	bl	8004528 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fe6a 	bl	80063d4 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800570a:	2202      	movs	r2, #2
 800570c:	4619      	mov	r1, r3
 800570e:	f000 fe04 	bl	800631a <_ZN7TwoWire11requestFromEhh>
 8005712:	4603      	mov	r3, r0
 8005714:	2b02      	cmp	r3, #2
 8005716:	bf0c      	ite	eq
 8005718:	2301      	moveq	r3, #1
 800571a:	2300      	movne	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d01d      	beq.n	800575e <_ZN10IridiumSBD13check9603dataEv+0xb6>
    {
      uint8_t msb = wireport->read();
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	330c      	adds	r3, #12
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4610      	mov	r0, r2
 8005732:	4798      	blx	r3
 8005734:	4603      	mov	r3, r0
 8005736:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4610      	mov	r0, r2
 8005748:	4798      	blx	r3
 800574a:	4603      	mov	r3, r0
 800574c:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 800574e:	7b7b      	ldrb	r3, [r7, #13]
 8005750:	021b      	lsls	r3, r3, #8
 8005752:	b21a      	sxth	r2, r3
 8005754:	7b3b      	ldrb	r3, [r7, #12]
 8005756:	b21b      	sxth	r3, r3
 8005758:	4313      	orrs	r3, r2
 800575a:	b21b      	sxth	r3, r3
 800575c:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 800575e:	89fb      	ldrh	r3, [r7, #14]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d06f      	beq.n	8005844 <_ZN10IridiumSBD13check9603dataEv+0x19c>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800576e:	4619      	mov	r1, r3
 8005770:	4610      	mov	r0, r2
 8005772:	f000 fde5 	bl	8006340 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577a:	21ff      	movs	r1, #255	; 0xff
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe fed3 	bl	8004528 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005786:	4618      	mov	r0, r3
 8005788:	f000 fe24 	bl	80063d4 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 800578c:	89fb      	ldrh	r3, [r7, #14]
 800578e:	2b08      	cmp	r3, #8
 8005790:	d92d      	bls.n	80057ee <_ZN10IridiumSBD13check9603dataEv+0x146>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800579c:	2300      	movs	r3, #0
 800579e:	2208      	movs	r2, #8
 80057a0:	f000 fd80 	bl	80062a4 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3308      	adds	r3, #8
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4610      	mov	r0, r2
 80057b4:	4798      	blx	r3
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bf14      	ite	ne
 80057bc:	2301      	movne	r3, #1
 80057be:	2300      	moveq	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00f      	beq.n	80057e6 <_ZN10IridiumSBD13check9603dataEv+0x13e>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4610      	mov	r0, r2
 80057d6:	4798      	blx	r3
 80057d8:	4603      	mov	r3, r0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	4619      	mov	r1, r3
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f8e2 	bl	80059a8 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 80057e4:	e7de      	b.n	80057a4 <_ZN10IridiumSBD13check9603dataEv+0xfc>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 80057e6:	89fb      	ldrh	r3, [r7, #14]
 80057e8:	3b08      	subs	r3, #8
 80057ea:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 80057ec:	e7ce      	b.n	800578c <_ZN10IridiumSBD13check9603dataEv+0xe4>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057f8:	89fa      	ldrh	r2, [r7, #14]
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	4619      	mov	r1, r3
 80057fe:	f000 fd8c 	bl	800631a <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3308      	adds	r3, #8
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4610      	mov	r0, r2
 8005812:	4798      	blx	r3
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	bf14      	ite	ne
 800581a:	2301      	movne	r3, #1
 800581c:	2300      	moveq	r3, #0
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00f      	beq.n	8005844 <_ZN10IridiumSBD13check9603dataEv+0x19c>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	330c      	adds	r3, #12
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4610      	mov	r0, r2
 8005834:	4798      	blx	r3
 8005836:	4603      	mov	r3, r0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	4619      	mov	r1, r3
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f8b3 	bl	80059a8 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8005842:	e7de      	b.n	8005802 <_ZN10IridiumSBD13check9603dataEv+0x15a>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8005844:	f002 faa6 	bl	8007d94 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800586a:	4619      	mov	r1, r3
 800586c:	4610      	mov	r0, r2
 800586e:	f000 fd67 	bl	8006340 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005876:	2110      	movs	r1, #16
 8005878:	4618      	mov	r0, r3
 800587a:	f7fe fe55 	bl	8004528 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fda6 	bl	80063d4 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005892:	2201      	movs	r2, #1
 8005894:	4619      	mov	r1, r3
 8005896:	f000 fd40 	bl	800631a <_ZN7TwoWire11requestFromEhh>
 800589a:	4603      	mov	r3, r0
 800589c:	2b01      	cmp	r3, #1
 800589e:	bf0c      	ite	eq
 80058a0:	2301      	moveq	r3, #1
 80058a2:	2300      	movne	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00d      	beq.n	80058c6 <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4610      	mov	r0, r2
 80058ba:	4798      	blx	r3
 80058bc:	4603      	mov	r3, r0
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 80058c6:	bf00      	nop
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b082      	sub	sp, #8
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	460b      	mov	r3, r1
 80058d8:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058e4:	4619      	mov	r1, r3
 80058e6:	4610      	mov	r0, r2
 80058e8:	f000 fd2a 	bl	8006340 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f0:	2110      	movs	r1, #16
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fe fe18 	bl	8004528 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	78f9      	ldrb	r1, [r7, #3]
 8005906:	4610      	mov	r0, r2
 8005908:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fd60 	bl	80063d4 <_ZN7TwoWire15endTransmissionEv>
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800592a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	425a      	negs	r2, r3
 8005938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800593c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005940:	bf58      	it	pl
 8005942:	4253      	negpl	r3, r2
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005964:	429a      	cmp	r2, r3
 8005966:	d102      	bne.n	800596e <_ZN10IridiumSBD10i2cSerReadEv+0x1e>
    return -1;
 8005968:	f04f 33ff 	mov.w	r3, #4294967295
 800596c:	e016      	b.n	800599c <_ZN10IridiumSBD10i2cSerReadEv+0x4c>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	4413      	add	r3, r2
 8005978:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800597c:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005984:	3301      	adds	r3, #1
 8005986:	425a      	negs	r2, r3
 8005988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800598c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005990:	bf58      	it	pl
 8005992:	4253      	negpl	r3, r2
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  return d;
 800599a:	7bfb      	ldrb	r3, [r7, #15]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ba:	3301      	adds	r3, #1
 80059bc:	425a      	negs	r2, r3
 80059be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80059c6:	bf58      	it	pl
 80059c8:	4253      	negpl	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d00b      	beq.n	80059f0 <_ZN10IridiumSBD10i2cSerPokeEc+0x48>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	4413      	add	r3, r2
 80059e2:	78fa      	ldrb	r2, [r7, #3]
 80059e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    i2c_ser_buffer_tail = next;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }
}
 80059f0:	bf00      	nop
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>:
	#endif
}


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO
uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart){
 80059fc:	b084      	sub	sp, #16
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	f107 001c 	add.w	r0, r7, #28
 8005a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->uart = huart;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f107 031c 	add.w	r3, r7, #28
 8005a16:	2244      	movs	r2, #68	; 0x44
 8005a18:	4619      	mov	r1, r3
 8005a1a:	f00b f9b7 	bl	8010d8c <memcpy>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nSetting up the Iridium 9603N\r\n", 32, HAL_MAX_DELAY);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f04f 33ff 	mov.w	r3, #4294967295
 8005a24:	2220      	movs	r2, #32
 8005a26:	4962      	ldr	r1, [pc, #392]	; (8005bb0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b4>)
 8005a28:	f007 f875 	bl	800cb16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Checking for the device...", 28, HAL_MAX_DELAY);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a32:	221c      	movs	r2, #28
 8005a34:	495f      	ldr	r1, [pc, #380]	; (8005bb4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b8>)
 8005a36:	f007 f86e 	bl	800cb16 <HAL_UART_Transmit>
	while(!this->isConnected()){
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7ff f80a 	bl	8004a54 <_ZN10IridiumSBD11isConnectedEv>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f083 0301 	eor.w	r3, r3, #1
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d02c      	beq.n	8005aa6 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xaa>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Check if the device is connected. Trying again in\r\n", 53, HAL_MAX_DELAY);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a52:	2235      	movs	r2, #53	; 0x35
 8005a54:	4958      	ldr	r1, [pc, #352]	; (8005bb8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1bc>)
 8005a56:	f007 f85e 	bl	800cb16 <HAL_UART_Transmit>
		HAL_Delay(500);
 8005a5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a5e:	f002 f9a5 	bl	8007dac <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r3", 3, HAL_MAX_DELAY);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f04f 33ff 	mov.w	r3, #4294967295
 8005a68:	2203      	movs	r2, #3
 8005a6a:	4954      	ldr	r1, [pc, #336]	; (8005bbc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c0>)
 8005a6c:	f007 f853 	bl	800cb16 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8005a70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a74:	f002 f99a 	bl	8007dac <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r2", 3, HAL_MAX_DELAY);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7e:	2203      	movs	r2, #3
 8005a80:	494f      	ldr	r1, [pc, #316]	; (8005bc0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c4>)
 8005a82:	f007 f848 	bl	800cb16 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8005a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a8a:	f002 f98f 	bl	8007dac <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r1\r\n", 7, HAL_MAX_DELAY);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f04f 33ff 	mov.w	r3, #4294967295
 8005a94:	2207      	movs	r2, #7
 8005a96:	494b      	ldr	r1, [pc, #300]	; (8005bc4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c8>)
 8005a98:	f007 f83d 	bl	800cb16 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8005a9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005aa0:	f002 f984 	bl	8007dac <HAL_Delay>
	while(!this->isConnected()){
 8005aa4:	e7c9      	b.n	8005a3a <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x3e>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aac:	2206      	movs	r2, #6
 8005aae:	4946      	ldr	r1, [pc, #280]	; (8005bc8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005ab0:	f007 f831 	bl	800cb16 <HAL_UART_Transmit>

	//Activate the superchargers
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Activating the superchargers...", 31, HAL_MAX_DELAY);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aba:	221f      	movs	r2, #31
 8005abc:	4943      	ldr	r1, [pc, #268]	; (8005bcc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d0>)
 8005abe:	f007 f82a 	bl	800cb16 <HAL_UART_Transmit>
	this->enableSuperCapCharger(true);
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7fe fea9 	bl	800481c <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad0:	2206      	movs	r2, #6
 8005ad2:	493d      	ldr	r1, [pc, #244]	; (8005bc8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005ad4:	f007 f81f 	bl	800cb16 <HAL_UART_Transmit>


	//Wait for the supercapacitors to charge
	//int start=millis();
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Waiting for the supercapacitors to charge...", 44, HAL_MAX_DELAY);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f04f 33ff 	mov.w	r3, #4294967295
 8005ade:	222c      	movs	r2, #44	; 0x2c
 8005ae0:	493b      	ldr	r1, [pc, #236]	; (8005bd0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d4>)
 8005ae2:	f007 f818 	bl	800cb16 <HAL_UART_Transmit>
	while (!this->checkSuperCapCharger()){
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fe fed6 	bl	8004898 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f083 0301 	eor.w	r3, r3, #1
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d004      	beq.n	8005b02 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x106>
		HAL_Delay(333);
 8005af8:	f240 104d 	movw	r0, #333	; 0x14d
 8005afc:	f002 f956 	bl	8007dac <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8005b00:	e7f1      	b.n	8005ae6 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xea>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f04f 33ff 	mov.w	r3, #4294967295
 8005b08:	2206      	movs	r2, #6
 8005b0a:	492f      	ldr	r1, [pc, #188]	; (8005bc8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005b0c:	f007 f803 	bl	800cb16 <HAL_UART_Transmit>


	//Enable power for the 9603N
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Enabling 9603N power...", 23, HAL_MAX_DELAY);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f04f 33ff 	mov.w	r3, #4294967295
 8005b16:	2217      	movs	r2, #23
 8005b18:	492e      	ldr	r1, [pc, #184]	; (8005bd4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d8>)
 8005b1a:	f006 fffc 	bl	800cb16 <HAL_UART_Transmit>
	this->enable9603Npower(true);
 8005b1e:	2101      	movs	r1, #1
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7fe fee9 	bl	80048f8 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2c:	2206      	movs	r2, #6
 8005b2e:	4926      	ldr	r1, [pc, #152]	; (8005bc8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005b30:	f006 fff1 	bl	800cb16 <HAL_UART_Transmit>
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Starting Modem...", 17, HAL_MAX_DELAY);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3a:	2211      	movs	r2, #17
 8005b3c:	4926      	ldr	r1, [pc, #152]	; (8005bd8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1dc>)
 8005b3e:	f006 ffea 	bl	800cb16 <HAL_UART_Transmit>
	//this->setPowerProfile(profile);
	int err = this->begin();
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7fe fd22 	bl	800458c <_ZN10IridiumSBD5beginEv>
 8005b48:	60f8      	str	r0, [r7, #12]
	if (err != ISBD_SUCCESS)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d015      	beq.n	8005b7c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x180>
	  {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Failed: ", 8, HAL_MAX_DELAY);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f04f 33ff 	mov.w	r3, #4294967295
 8005b56:	2208      	movs	r2, #8
 8005b58:	4920      	ldr	r1, [pc, #128]	; (8005bdc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e0>)
 8005b5a:	f006 ffdc 	bl	800cb16 <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) err, 4, HAL_MAX_DELAY);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	68f9      	ldr	r1, [r7, #12]
 8005b62:	f04f 33ff 	mov.w	r3, #4294967295
 8005b66:	2204      	movs	r2, #4
 8005b68:	f006 ffd5 	bl	800cb16 <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f8b0 	bl	8005cd8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e011      	b.n	8005ba0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1a4>
	  }
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "...OK\r\n", 7, HAL_MAX_DELAY);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b82:	2207      	movs	r2, #7
 8005b84:	4916      	ldr	r1, [pc, #88]	; (8005be0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e4>)
 8005b86:	f006 ffc6 	bl	800cb16 <HAL_UART_Transmit>

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI="000000000000000";
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a15      	ldr	r2, [pc, #84]	; (8005be4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e8>)
 8005b8e:	645a      	str	r2, [r3, #68]	; 0x44

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "End of setup\r\n\r\n", 16, HAL_MAX_DELAY);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f04f 33ff 	mov.w	r3, #4294967295
 8005b96:	2210      	movs	r2, #16
 8005b98:	4913      	ldr	r1, [pc, #76]	; (8005be8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1ec>)
 8005b9a:	f006 ffbc 	bl	800cb16 <HAL_UART_Transmit>

	return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005baa:	b004      	add	sp, #16
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	08017ce0 	.word	0x08017ce0
 8005bb4:	08017d04 	.word	0x08017d04
 8005bb8:	08017d20 	.word	0x08017d20
 8005bbc:	08017d54 	.word	0x08017d54
 8005bc0:	08017d58 	.word	0x08017d58
 8005bc4:	08017d5c 	.word	0x08017d5c
 8005bc8:	080175f4 	.word	0x080175f4
 8005bcc:	08017d64 	.word	0x08017d64
 8005bd0:	08017d84 	.word	0x08017d84
 8005bd4:	08017db4 	.word	0x08017db4
 8005bd8:	08017dcc 	.word	0x08017dcc
 8005bdc:	08017de0 	.word	0x08017de0
 8005be0:	08017dec 	.word	0x08017dec
 8005be4:	08017df4 	.word	0x08017df4
 8005be8:	08017e04 	.word	0x08017e04

08005bec <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8005bec:	b590      	push	{r4, r7, lr}
 8005bee:	b08b      	sub	sp, #44	; 0x2c
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bfa:	221d      	movs	r2, #29
 8005bfc:	492f      	ldr	r1, [pc, #188]	; (8005cbc <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 8005bfe:	f006 ff8a 	bl	800cb16 <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f04f 33ff 	mov.w	r3, #4294967295
 8005c08:	221d      	movs	r2, #29
 8005c0a:	492d      	ldr	r1, [pc, #180]	; (8005cc0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8005c0c:	f006 ff83 	bl	800cb16 <HAL_UART_Transmit>
	int err = this->sleep();
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7fe fce6 	bl	80045e2 <_ZN10IridiumSBD5sleepEv>
 8005c16:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d017      	beq.n	8005c4e <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8005c1e:	f107 0308 	add.w	r3, r7, #8
 8005c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c24:	4927      	ldr	r1, [pc, #156]	; (8005cc4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 8005c26:	4618      	mov	r0, r3
 8005c28:	f00c fbd4 	bl	80123d4 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8005c2c:	687c      	ldr	r4, [r7, #4]
 8005c2e:	f107 0308 	add.w	r3, r7, #8
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fa fae6 	bl	8000204 <strlen>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	f107 0108 	add.w	r1, r7, #8
 8005c40:	f04f 33ff 	mov.w	r3, #4294967295
 8005c44:	4620      	mov	r0, r4
 8005c46:	f006 ff66 	bl	800cb16 <HAL_UART_Transmit>
		return false;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e032      	b.n	8005cb4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f04f 33ff 	mov.w	r3, #4294967295
 8005c54:	2204      	movs	r2, #4
 8005c56:	491c      	ldr	r1, [pc, #112]	; (8005cc8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005c58:	f006 ff5d 	bl	800cb16 <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c62:	2218      	movs	r2, #24
 8005c64:	4919      	ldr	r1, [pc, #100]	; (8005ccc <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 8005c66:	f006 ff56 	bl	800cb16 <HAL_UART_Transmit>
	this->enable9603Npower(false);
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7fe fe43 	bl	80048f8 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f04f 33ff 	mov.w	r3, #4294967295
 8005c78:	2204      	movs	r2, #4
 8005c7a:	4913      	ldr	r1, [pc, #76]	; (8005cc8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005c7c:	f006 ff4b 	bl	800cb16 <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f04f 33ff 	mov.w	r3, #4294967295
 8005c86:	2227      	movs	r2, #39	; 0x27
 8005c88:	4911      	ldr	r1, [pc, #68]	; (8005cd0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 8005c8a:	f006 ff44 	bl	800cb16 <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 8005c8e:	2100      	movs	r1, #0
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7fe fdc3 	bl	800481c <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9c:	2204      	movs	r2, #4
 8005c9e:	490a      	ldr	r1, [pc, #40]	; (8005cc8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005ca0:	f006 ff39 	bl	800cb16 <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8005caa:	2220      	movs	r2, #32
 8005cac:	4909      	ldr	r1, [pc, #36]	; (8005cd4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 8005cae:	f006 ff32 	bl	800cb16 <HAL_UART_Transmit>
	return true;
 8005cb2:	2301      	movs	r3, #1
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	372c      	adds	r7, #44	; 0x2c
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd90      	pop	{r4, r7, pc}
 8005cbc:	08017e18 	.word	0x08017e18
 8005cc0:	08017e38 	.word	0x08017e38
 8005cc4:	08017e58 	.word	0x08017e58
 8005cc8:	080175f4 	.word	0x080175f4
 8005ccc:	08017e74 	.word	0x08017e74
 8005cd0:	08017e90 	.word	0x08017e90
 8005cd4:	08017eb8 	.word	0x08017eb8

08005cd8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nError:\t", 12, HAL_MAX_DELAY);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cea:	220c      	movs	r2, #12
 8005cec:	4948      	ldr	r1, [pc, #288]	; (8005e10 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x138>)
 8005cee:	f006 ff12 	bl	800cb16 <HAL_UART_Transmit>
	if (error == ISBD_ALREADY_AWAKE){
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d107      	bne.n	8005d08 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x30>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Already Awake\r\n", 17, HAL_MAX_DELAY);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfe:	2211      	movs	r2, #17
 8005d00:	4944      	ldr	r1, [pc, #272]	; (8005e14 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x13c>)
 8005d02:	f006 ff08 	bl	800cb16 <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
	}
	else{
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
	}
}
 8005d06:	e07f      	b.n	8005e08 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SERIAL_FAILURE){
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d107      	bne.n	8005d1e <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x46>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Serial Failure\r\n", 18, HAL_MAX_DELAY);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f04f 33ff 	mov.w	r3, #4294967295
 8005d14:	2212      	movs	r2, #18
 8005d16:	4940      	ldr	r1, [pc, #256]	; (8005e18 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x140>)
 8005d18:	f006 fefd 	bl	800cb16 <HAL_UART_Transmit>
}
 8005d1c:	e074      	b.n	8005e08 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_PROTOCOL_ERROR){
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d107      	bne.n	8005d34 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x5c>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Protocol Error\r\n", 18, HAL_MAX_DELAY);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2a:	2212      	movs	r2, #18
 8005d2c:	493b      	ldr	r1, [pc, #236]	; (8005e1c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x144>)
 8005d2e:	f006 fef2 	bl	800cb16 <HAL_UART_Transmit>
}
 8005d32:	e069      	b.n	8005e08 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_CANCELLED){
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d107      	bne.n	8005d4a <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x72>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nCancelled", 13, HAL_MAX_DELAY);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d40:	220d      	movs	r2, #13
 8005d42:	4937      	ldr	r1, [pc, #220]	; (8005e20 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x148>)
 8005d44:	f006 fee7 	bl	800cb16 <HAL_UART_Transmit>
}
 8005d48:	e05e      	b.n	8005e08 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_MODEM_DETECTED){
 8005d4a:	78fb      	ldrb	r3, [r7, #3]
 8005d4c:	2b05      	cmp	r3, #5
 8005d4e:	d107      	bne.n	8005d60 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x88>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo modem detected: check wiring.", 36, HAL_MAX_DELAY);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f04f 33ff 	mov.w	r3, #4294967295
 8005d56:	2224      	movs	r2, #36	; 0x24
 8005d58:	4932      	ldr	r1, [pc, #200]	; (8005e24 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x14c>)
 8005d5a:	f006 fedc 	bl	800cb16 <HAL_UART_Transmit>
}
 8005d5e:	e053      	b.n	8005e08 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	2b06      	cmp	r3, #6
 8005d64:	d107      	bne.n	8005d76 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x9e>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "SDBIX Fatal Error\r\n", 21, HAL_MAX_DELAY);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6c:	2215      	movs	r2, #21
 8005d6e:	492e      	ldr	r1, [pc, #184]	; (8005e28 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x150>)
 8005d70:	f006 fed1 	bl	800cb16 <HAL_UART_Transmit>
}
 8005d74:	e048      	b.n	8005e08 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	2b07      	cmp	r3, #7
 8005d7a:	d107      	bne.n	8005d8c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Send-Receive Timeout\r\n", 24, HAL_MAX_DELAY);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d82:	2218      	movs	r2, #24
 8005d84:	4929      	ldr	r1, [pc, #164]	; (8005e2c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x154>)
 8005d86:	f006 fec6 	bl	800cb16 <HAL_UART_Transmit>
}
 8005d8a:	e03d      	b.n	8005e08 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_RX_OVERFLOW){
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d107      	bne.n	8005da2 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xca>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "RX Overflow\r\n", 15, HAL_MAX_DELAY);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f04f 33ff 	mov.w	r3, #4294967295
 8005d98:	220f      	movs	r2, #15
 8005d9a:	4925      	ldr	r1, [pc, #148]	; (8005e30 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x158>)
 8005d9c:	f006 febb 	bl	800cb16 <HAL_UART_Transmit>
}
 8005da0:	e032      	b.n	8005e08 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_REENTRANT){
 8005da2:	78fb      	ldrb	r3, [r7, #3]
 8005da4:	2b09      	cmp	r3, #9
 8005da6:	d107      	bne.n	8005db8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe0>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "REENTRANT\r\n", 13, HAL_MAX_DELAY);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dae:	220d      	movs	r2, #13
 8005db0:	4920      	ldr	r1, [pc, #128]	; (8005e34 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x15c>)
 8005db2:	f006 feb0 	bl	800cb16 <HAL_UART_Transmit>
}
 8005db6:	e027      	b.n	8005e08 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_IS_ASLEEP){
 8005db8:	78fb      	ldrb	r3, [r7, #3]
 8005dba:	2b0a      	cmp	r3, #10
 8005dbc:	d107      	bne.n	8005dce <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf6>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Is Asleep\r\n", 13, HAL_MAX_DELAY);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc4:	220d      	movs	r2, #13
 8005dc6:	491c      	ldr	r1, [pc, #112]	; (8005e38 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x160>)
 8005dc8:	f006 fea5 	bl	800cb16 <HAL_UART_Transmit>
}
 8005dcc:	e01c      	b.n	8005e08 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_SLEEP_PIN){
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	2b0b      	cmp	r3, #11
 8005dd2:	d107      	bne.n	8005de4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "No Sleep Pin\r\n", 16, HAL_MAX_DELAY);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dda:	2210      	movs	r2, #16
 8005ddc:	4917      	ldr	r1, [pc, #92]	; (8005e3c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x164>)
 8005dde:	f006 fe9a 	bl	800cb16 <HAL_UART_Transmit>
}
 8005de2:	e011      	b.n	8005e08 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if(error == 20){
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	2b14      	cmp	r3, #20
 8005de8:	d107      	bne.n	8005dfa <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x122>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f04f 33ff 	mov.w	r3, #4294967295
 8005df0:	2216      	movs	r2, #22
 8005df2:	4913      	ldr	r1, [pc, #76]	; (8005e40 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x168>)
 8005df4:	f006 fe8f 	bl	800cb16 <HAL_UART_Transmit>
}
 8005df8:	e006      	b.n	8005e08 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8005e00:	220b      	movs	r2, #11
 8005e02:	4910      	ldr	r1, [pc, #64]	; (8005e44 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x16c>)
 8005e04:	f006 fe87 	bl	800cb16 <HAL_UART_Transmit>
}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	08017ed8 	.word	0x08017ed8
 8005e14:	08017ee4 	.word	0x08017ee4
 8005e18:	08017ef4 	.word	0x08017ef4
 8005e1c:	08017f08 	.word	0x08017f08
 8005e20:	08017f1c 	.word	0x08017f1c
 8005e24:	08017f28 	.word	0x08017f28
 8005e28:	08017f4c 	.word	0x08017f4c
 8005e2c:	08017f60 	.word	0x08017f60
 8005e30:	08017f78 	.word	0x08017f78
 8005e34:	08017f88 	.word	0x08017f88
 8005e38:	08017f94 	.word	0x08017f94
 8005e3c:	08017fa0 	.word	0x08017fa0
 8005e40:	08017fb0 	.word	0x08017fb0
 8005e44:	08017fc8 	.word	0x08017fc8

08005e48 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>:


/*
 * This function requests the time
 */
boolean IridiumSBD::MRT_Iridium_getTime(void){
 8005e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e4a:	b0a1      	sub	sp, #132	; 0x84
 8005e4c:	af04      	add	r7, sp, #16
 8005e4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nRetrieving time\r\n", 20, HAL_MAX_DELAY);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f04f 33ff 	mov.w	r3, #4294967295
 8005e56:	2214      	movs	r2, #20
 8005e58:	4928      	ldr	r1, [pc, #160]	; (8005efc <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xb4>)
 8005e5a:	f006 fe5c 	bl	800cb16 <HAL_UART_Transmit>
	struct tm t; // struct tm is defined in time.h
	int err = this->getSystemTime(t); // Ask the 9603N for the system time
 8005e5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7fe fc15 	bl	8004694 <_ZN10IridiumSBD13getSystemTimeER2tm>
 8005e6a:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (err == ISBD_SUCCESS) // Was it successful?
 8005e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d125      	bne.n	8005ebe <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x76>
	    {
		char buf[61];
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8005e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8005e74:	f203 756c 	addw	r5, r3, #1900	; 0x76c
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8005e78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8005e7a:	1c5e      	adds	r6, r3, #1
 8005e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e80:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005e82:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005e84:	f107 0408 	add.w	r4, r7, #8
 8005e88:	9003      	str	r0, [sp, #12]
 8005e8a:	9102      	str	r1, [sp, #8]
 8005e8c:	9201      	str	r2, [sp, #4]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	4633      	mov	r3, r6
 8005e92:	462a      	mov	r2, r5
 8005e94:	491a      	ldr	r1, [pc, #104]	; (8005f00 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xb8>)
 8005e96:	4620      	mov	r0, r4
 8005e98:	f00c fa9c 	bl	80123d4 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) buf, strlen(buf), HAL_MAX_DELAY);
 8005e9c:	687c      	ldr	r4, [r7, #4]
 8005e9e:	f107 0308 	add.w	r3, r7, #8
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fa f9ae 	bl	8000204 <strlen>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	f107 0108 	add.w	r1, r7, #8
 8005eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f006 fe2e 	bl	800cb16 <HAL_UART_Transmit>
		return true;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e019      	b.n	8005ef2 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xaa>
	}

	else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 8005ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec0:	2b0c      	cmp	r3, #12
 8005ec2:	d108      	bne.n	8005ed6 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x8e>
	     {
	  	 HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo network detected.\r\n", 28, HAL_MAX_DELAY);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eca:	221c      	movs	r2, #28
 8005ecc:	490d      	ldr	r1, [pc, #52]	; (8005f04 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xbc>)
 8005ece:	f006 fe22 	bl	800cb16 <HAL_UART_Transmit>
	   	 return false;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e00d      	b.n	8005ef2 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xaa>
	}

	else
	    {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nUnexpected Error ", 21, HAL_MAX_DELAY);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	2215      	movs	r2, #21
 8005ede:	490a      	ldr	r1, [pc, #40]	; (8005f08 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xc0>)
 8005ee0:	f006 fe19 	bl	800cb16 <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 8005ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff fef4 	bl	8005cd8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 8005ef0:	2300      	movs	r3, #0
	}
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3774      	adds	r7, #116	; 0x74
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005efa:	bf00      	nop
 8005efc:	080180e8 	.word	0x080180e8
 8005f00:	080180fc 	.word	0x080180fc
 8005f04:	08018134 	.word	0x08018134
 8005f08:	08018150 	.word	0x08018150

08005f0c <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = MRT_IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	4613      	mov	r3, r2
 8005f18:	71fb      	strb	r3, [r7, #7]
   {
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2205      	movs	r2, #5
 8005f26:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2202      	movs	r2, #2
 8005f36:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2208      	movs	r2, #8
 8005f46:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2210      	movs	r2, #16
 8005f4e:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2240      	movs	r2, #64	; 0x40
 8005f5e:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
      useSerial = false;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      wireport = &wirePort;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	64da      	str	r2, [r3, #76]	; 0x4c
      deviceaddress = deviceAddress;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	79fa      	ldrb	r2, [r7, #7]
 8005f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	221e      	movs	r2, #30
 8005f7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	221e      	movs	r2, #30
 8005f84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	22f0      	movs	r2, #240	; 0xf0
 8005f96:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      remainingMessages = -1;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      asleep = true;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
      reentrant = false;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
      sleepPin = -1;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      sleepPinConfigured = false;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
      ringPin = -1;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fcc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
      msstmWorkaroundRequested = false;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      ringAlertsEnabled = true;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
      ringAsserted = false;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      lastPowerOnTime = 0UL;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      head = SBDRING;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a0d      	ldr	r2, [pc, #52]	; (8006028 <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8005ff4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      tail = SBDRING;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4a0b      	ldr	r2, [pc, #44]	; (8006028 <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8005ffc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      nextChar = -1;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f04f 32ff 	mov.w	r2, #4294967295
 8006006:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      i2c_ser_buffer_tail = 0;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      i2c_ser_buffer_head = 0;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   }
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	0801867c 	.word	0x0801867c

0800602c <MRT_Static_Iridium_Constructor>:
#endif

static IridiumSBD *E_T = NULL;


void MRT_Static_Iridium_Constructor(){
 800602c:	b598      	push	{r3, r4, r7, lr}
 800602e:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 8006030:	4b08      	ldr	r3, [pc, #32]	; (8006054 <MRT_Static_Iridium_Constructor+0x28>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <MRT_Static_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 8006038:	20e4      	movs	r0, #228	; 0xe4
 800603a:	f00a fc1f 	bl	801087c <_Znwj>
 800603e:	4603      	mov	r3, r0
 8006040:	461c      	mov	r4, r3
 8006042:	2263      	movs	r2, #99	; 0x63
 8006044:	4904      	ldr	r1, [pc, #16]	; (8006058 <MRT_Static_Iridium_Constructor+0x2c>)
 8006046:	4620      	mov	r0, r4
 8006048:	f7ff ff60 	bl	8005f0c <_ZN10IridiumSBDC1ER7TwoWireh>
 800604c:	4b01      	ldr	r3, [pc, #4]	; (8006054 <MRT_Static_Iridium_Constructor+0x28>)
 800604e:	601c      	str	r4, [r3, #0]
	}
}
 8006050:	bf00      	nop
 8006052:	bd98      	pop	{r3, r4, r7, pc}
 8006054:	200002e0 	.word	0x200002e0
 8006058:	2000039c 	.word	0x2000039c

0800605c <MRT_Static_Iridium_Destructor>:

void MRT_Static_Iridium_Destructor(){
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <MRT_Static_Iridium_Destructor+0x1c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <MRT_Static_Iridium_Destructor+0x12>
		E_T = NULL;
 8006068:	4b03      	ldr	r3, [pc, #12]	; (8006078 <MRT_Static_Iridium_Destructor+0x1c>)
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]
	}
}
 800606e:	bf00      	nop
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	200002e0 	.word	0x200002e0

0800607c <MRT_Static_Iridium_Setup>:


uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart){
 800607c:	b084      	sub	sp, #16
 800607e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006080:	b08f      	sub	sp, #60	; 0x3c
 8006082:	af0e      	add	r7, sp, #56	; 0x38
 8006084:	f107 0418 	add.w	r4, r7, #24
 8006088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MRT_Static_Iridium_Constructor();
 800608c:	f7ff ffce 	bl	800602c <MRT_Static_Iridium_Constructor>
	return E_T->MRT_Iridium_setup(huart);
 8006090:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <MRT_Static_Iridium_Setup+0x50>)
 8006092:	681e      	ldr	r6, [r3, #0]
 8006094:	466d      	mov	r5, sp
 8006096:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800609a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800609c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800609e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80060aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80060ae:	f107 0318 	add.w	r3, r7, #24
 80060b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060b4:	4630      	mov	r0, r6
 80060b6:	f7ff fca1 	bl	80059fc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>
 80060ba:	4603      	mov	r3, r0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3704      	adds	r7, #4
 80060c0:	46bd      	mov	sp, r7
 80060c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80060c6:	b004      	add	sp, #16
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	200002e0 	.word	0x200002e0

080060d0 <MRT_Static_Iridium_Shutdown>:

bool MRT_Static_Iridium_Shutdown(void){
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 80060d6:	4b09      	ldr	r3, [pc, #36]	; (80060fc <MRT_Static_Iridium_Shutdown+0x2c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fd86 	bl	8005bec <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	bf14      	ite	ne
 80060e6:	2301      	movne	r3, #1
 80060e8:	2300      	moveq	r3, #0
 80060ea:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 80060ec:	f7ff ffb6 	bl	800605c <MRT_Static_Iridium_Destructor>
	return b;
 80060f0:	79fb      	ldrb	r3, [r7, #7]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	200002e0 	.word	0x200002e0

08006100 <MRT_Static_Iridium_getTime>:
bool MRT_Static_Iridium_NetworkAvailability(){
	return E_T->MRT_Iridium_NetworkAvailability();
}


bool MRT_Static_Iridium_getTime(void){
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getTime();
 8006104:	4b06      	ldr	r3, [pc, #24]	; (8006120 <MRT_Static_Iridium_getTime+0x20>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff fe9d 	bl	8005e48 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	bf14      	ite	ne
 8006114:	2301      	movne	r3, #1
 8006116:	2300      	moveq	r3, #0
 8006118:	b2db      	uxtb	r3, r3
}
 800611a:	4618      	mov	r0, r3
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	200002e0 	.word	0x200002e0

08006124 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8006124:	b590      	push	{r4, r7, lr}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <_ZN5Print5writeEPKc+0x14>
 8006134:	2300      	movs	r3, #0
 8006136:	e00d      	b.n	8006154 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3304      	adds	r3, #4
 800613e:	681c      	ldr	r4, [r3, #0]
 8006140:	6838      	ldr	r0, [r7, #0]
 8006142:	f7fa f85f 	bl	8000204 <strlen>
 8006146:	4603      	mov	r3, r0
 8006148:	461a      	mov	r2, r3
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	47a0      	blx	r4
 8006150:	4603      	mov	r3, r0
 8006152:	bf00      	nop
    }
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	bd90      	pop	{r4, r7, pc}

0800615c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	617b      	str	r3, [r7, #20]
  while (size--) {
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	1e5a      	subs	r2, r3, #1
 8006170:	607a      	str	r2, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	bf14      	ite	ne
 8006176:	2301      	movne	r3, #1
 8006178:	2300      	moveq	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00e      	beq.n	800619e <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	1c59      	adds	r1, r3, #1
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	4619      	mov	r1, r3
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	4790      	blx	r2
 8006194:	4602      	mov	r2, r0
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	617b      	str	r3, [r7, #20]
  while (size--) {
 800619c:	e7e6      	b.n	800616c <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 800619e:	697b      	ldr	r3, [r7, #20]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f805 	bl	80061c4 <_ZN5Print5printEPKc>
 80061ba:	4603      	mov	r3, r0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  return write(str);
 80061ce:	6839      	ldr	r1, [r7, #0]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff ffa7 	bl	8006124 <_ZN5Print5writeEPKc>
 80061d6:	4603      	mov	r3, r0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	4a06      	ldr	r2, [pc, #24]	; (8006204 <_ZN5PrintC1Ev+0x24>)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	605a      	str	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	08018690 	.word	0x08018690

08006208 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff ffe4 	bl	80061e0 <_ZN5PrintC1Ev>
 8006218:	4a05      	ldr	r2, [pc, #20]	; (8006230 <_ZN6StreamC1Ev+0x28>)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006224:	609a      	str	r2, [r3, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	080186c0 	.word	0x080186c0

08006234 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4618      	mov	r0, r3
 8006242:	f7ff ffe1 	bl	8006208 <_ZN6StreamC1Ev>
 8006246:	4a16      	ldr	r2, [pc, #88]	; (80062a0 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3390      	adds	r3, #144	; 0x90
 8006256:	2220      	movs	r2, #32
 8006258:	2100      	movs	r1, #0
 800625a:	4618      	mov	r0, r3
 800625c:	f00a fdbe 	bl	8010ddc <memset>
  rxBufferIndex = 0;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	080186a0 	.word	0x080186a0

080062a4 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	4608      	mov	r0, r1
 80062ae:	4611      	mov	r1, r2
 80062b0:	461a      	mov	r2, r3
 80062b2:	4603      	mov	r3, r0
 80062b4:	70fb      	strb	r3, [r7, #3]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70bb      	strb	r3, [r7, #2]
 80062ba:	4613      	mov	r3, r2
 80062bc:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fc24 	bl	8006b0c <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 80062c4:	78bb      	ldrb	r3, [r7, #2]
 80062c6:	2b20      	cmp	r3, #32
 80062c8:	d901      	bls.n	80062ce <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 80062ca:	2320      	movs	r3, #32
 80062cc:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	b2d9      	uxtb	r1, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80062da:	78b8      	ldrb	r0, [r7, #2]
 80062dc:	787b      	ldrb	r3, [r7, #1]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	4603      	mov	r3, r0
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f9cf 	bl	8006686 <_ZN7TwoWire15i2c_master_readEhPchh>
 80062e8:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	da02      	bge.n	80062f6 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	73fb      	strb	r3, [r7, #15]
 80062f4:	e001      	b.n	80062fa <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	7bfa      	ldrb	r2, [r7, #15]
 8006306:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fbcc 	bl	8006aa8 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8006310:	7bfb      	ldrb	r3, [r7, #15]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	460b      	mov	r3, r1
 8006324:	70fb      	strb	r3, [r7, #3]
 8006326:	4613      	mov	r3, r2
 8006328:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 800632a:	78ba      	ldrb	r2, [r7, #2]
 800632c:	78f9      	ldrb	r1, [r7, #3]
 800632e:	2301      	movs	r3, #1
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff ffb7 	bl	80062a4 <_ZN7TwoWire11requestFromEhhh>
 8006336:	4603      	mov	r3, r0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	78fa      	ldrb	r2, [r7, #3]
 8006358:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b086      	sub	sp, #24
 800637a:	af02      	add	r7, sp, #8
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	460b      	mov	r3, r1
 8006380:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fbc2 	bl	8006b0c <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	7c1b      	ldrb	r3, [r3, #16]
 800638c:	0059      	lsls	r1, r3, #1
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f103 0211 	add.w	r2, r3, #17
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800639a:	4618      	mov	r0, r3
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	4603      	mov	r3, r0
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fa00 	bl	80067a8 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 80063a8:	4603      	mov	r3, r0
 80063aa:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fb6f 	bl	8006aa8 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 80063dc:	2101      	movs	r1, #1
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff ffc9 	bl	8006376 <_ZN7TwoWire15endTransmissionEh>
 80063e4:	4603      	mov	r3, r0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006400:	2b00      	cmp	r3, #0
 8006402:	d01d      	beq.n	8006440 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800640a:	2b1f      	cmp	r3, #31
 800640c:	d901      	bls.n	8006412 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 800640e:	2300      	movs	r3, #0
 8006410:	e028      	b.n	8006464 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006418:	4619      	mov	r1, r3
 800641a:	78fa      	ldrb	r2, [r7, #3]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	440b      	add	r3, r1
 8006420:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006428:	3301      	adds	r3, #1
 800642a:	b2da      	uxtb	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800643e:	e010      	b.n	8006462 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fb63 	bl	8006b0c <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8006446:	1cfb      	adds	r3, r7, #3
 8006448:	2201      	movs	r2, #1
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fa95 	bl	800697c <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fb28 	bl	8006aa8 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	333c      	adds	r3, #60	; 0x3c
 800645c:	4618      	mov	r0, r3
 800645e:	f002 fea9 	bl	80091b4 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8006462:	2301      	movs	r3, #1
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800647e:	2b00      	cmp	r3, #0
 8006480:	d013      	beq.n	80064aa <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8006482:	2300      	movs	r3, #0
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	429a      	cmp	r2, r3
 800648c:	d21e      	bcs.n	80064cc <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	440a      	add	r2, r1
 800649a:	7812      	ldrb	r2, [r2, #0]
 800649c:	4611      	mov	r1, r2
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	3301      	adds	r3, #1
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	e7ed      	b.n	8006486 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 fb2e 	bl	8006b0c <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	461a      	mov	r2, r3
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 fa60 	bl	800697c <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 faf3 	bl	8006aa8 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	333c      	adds	r3, #60	; 0x3c
 80064c6:	4618      	mov	r0, r3
 80064c8:	f002 fe74 	bl	80091b4 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 80064cc:	687b      	ldr	r3, [r7, #4]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	461a      	mov	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	1ad3      	subs	r3, r2, r3
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 80064fe:	b480      	push	{r7}
 8006500:	b085      	sub	sp, #20
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  int value = -1;
 8006506:	f04f 33ff 	mov.w	r3, #4294967295
 800650a:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006512:	b2da      	uxtb	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800651a:	b2db      	uxtb	r3, r3
 800651c:	429a      	cmp	r2, r3
 800651e:	bf34      	ite	cc
 8006520:	2301      	movcc	r3, #1
 8006522:	2300      	movcs	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d012      	beq.n	8006550 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	461a      	mov	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4413      	add	r3, r2
 8006538:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800653c:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	3301      	adds	r3, #1
 8006548:	b2da      	uxtb	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8006550:	68fb      	ldr	r3, [r7, #12]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 800655e:	b480      	push	{r7}
 8006560:	b085      	sub	sp, #20
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  int value = -1;
 8006566:	f04f 33ff 	mov.w	r3, #4294967295
 800656a:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006572:	b2da      	uxtb	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800657a:	b2db      	uxtb	r3, r3
 800657c:	429a      	cmp	r2, r3
 800657e:	bf34      	ite	cc
 8006580:	2301      	movcc	r3, #1
 8006582:	2300      	movcs	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	461a      	mov	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4413      	add	r3, r2
 8006598:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800659c:	60fb      	str	r3, [r7, #12]
  }

  return value;
 800659e:	68fb      	ldr	r3, [r7, #12]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065cc:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065d6:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 80065d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065dc:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ea:	bf0c      	ite	eq
 80065ec:	2301      	moveq	r3, #1
 80065ee:	2300      	movne	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00b      	beq.n	800660e <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	1e5a      	subs	r2, r3, #1
 80065fa:	60fa      	str	r2, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	bf0c      	ite	eq
 8006600:	2301      	moveq	r3, #1
 8006602:	2300      	movne	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0e9      	beq.n	80065de <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 800660a:	2301      	movs	r3, #1
 800660c:	e021      	b.n	8006652 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 800661a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800661e:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b01      	cmp	r3, #1
 800662c:	bf14      	ite	ne
 800662e:	2301      	movne	r3, #1
 8006630:	2300      	moveq	r3, #0
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	1e5a      	subs	r2, r3, #1
 800663c:	60fa      	str	r2, [r7, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	bf0c      	ite	eq
 8006642:	2301      	moveq	r3, #1
 8006644:	2300      	movne	r3, #0
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0e9      	beq.n	8006620 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 800664c:	2301      	movs	r3, #1
 800664e:	e000      	b.n	8006652 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 800665e:	b480      	push	{r7}
 8006660:	b085      	sub	sp, #20
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666a:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	601a      	str	r2, [r3, #0]

    return 0;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b08a      	sub	sp, #40	; 0x28
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	461a      	mov	r2, r3
 8006692:	460b      	mov	r3, r1
 8006694:	72fb      	strb	r3, [r7, #11]
 8006696:	4613      	mov	r3, r2
 8006698:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669e:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff ff8d 	bl	80065c0 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80066a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	bf14      	ite	ne
 80066ba:	2301      	movne	r3, #1
 80066bc:	2300      	moveq	r3, #0
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d008      	beq.n	80066d6 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	3b01      	subs	r3, #1
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1ed      	bne.n	80066ac <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 80066d0:	f04f 33ff 	mov.w	r3, #4294967295
 80066d4:	e064      	b.n	80067a0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 80066d6:	7afb      	ldrb	r3, [r7, #11]
 80066d8:	f043 0301 	orr.w	r3, r3, #1
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80066e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066e8:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	bf14      	ite	ne
 80066f8:	2301      	movne	r3, #1
 80066fa:	2300      	moveq	r3, #0
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d008      	beq.n	8006714 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	3b01      	subs	r3, #1
 8006706:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1ed      	bne.n	80066ea <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 800670e:	f04f 33ff 	mov.w	r3, #4294967295
 8006712:	e045      	b.n	80067a0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8006714:	2300      	movs	r3, #0
 8006716:	613b      	str	r3, [r7, #16]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 800672a:	2300      	movs	r3, #0
 800672c:	623b      	str	r3, [r7, #32]
 800672e:	7abb      	ldrb	r3, [r7, #10]
 8006730:	3b01      	subs	r3, #1
 8006732:	6a3a      	ldr	r2, [r7, #32]
 8006734:	429a      	cmp	r2, r3
 8006736:	da17      	bge.n	8006768 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8006738:	f107 0314 	add.w	r3, r7, #20
 800673c:	2200      	movs	r2, #0
 800673e:	4619      	mov	r1, r3
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 f8a4 	bl	800688e <_ZN7TwoWire20i2c_master_byte_readEPii>
 8006746:	61b8      	str	r0, [r7, #24]
        if(ret)
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 800674e:	f04f 33ff 	mov.w	r3, #4294967295
 8006752:	e025      	b.n	80067a0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8006754:	6979      	ldr	r1, [r7, #20]
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4413      	add	r3, r2
 800675c:	b2ca      	uxtb	r2, r1
 800675e:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	3301      	adds	r3, #1
 8006764:	623b      	str	r3, [r7, #32]
 8006766:	e7e2      	b.n	800672e <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8006768:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f7ff ff74 	bl	800665e <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 8006776:	f107 0314 	add.w	r3, r7, #20
 800677a:	2201      	movs	r2, #1
 800677c:	4619      	mov	r1, r3
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 f885 	bl	800688e <_ZN7TwoWire20i2c_master_byte_readEPii>
 8006784:	61b8      	str	r0, [r7, #24]
    if(ret)
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 800678c:	f04f 33ff 	mov.w	r3, #4294967295
 8006790:	e006      	b.n	80067a0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 8006792:	6979      	ldr	r1, [r7, #20]
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	4413      	add	r3, r2
 800679a:	b2ca      	uxtb	r2, r1
 800679c:	701a      	strb	r2, [r3, #0]

    return length;
 800679e:	7abb      	ldrb	r3, [r7, #10]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3728      	adds	r7, #40	; 0x28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ba:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f7ff feff 	bl	80065c0 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80067c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067c6:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	bf14      	ite	ne
 80067d6:	2301      	movne	r3, #1
 80067d8:	2300      	moveq	r3, #0
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d007      	beq.n	80067f0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1ed      	bne.n	80067c8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 80067ec:	2304      	movs	r3, #4
 80067ee:	e04a      	b.n	8006886 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80067fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006800:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b02      	cmp	r3, #2
 800680e:	bf14      	ite	ne
 8006810:	2301      	movne	r3, #1
 8006812:	2300      	moveq	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d007      	beq.n	800682a <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3b01      	subs	r3, #1
 800681e:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1ed      	bne.n	8006802 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8006826:	2302      	movs	r3, #2
 8006828:	e02d      	b.n	8006886 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800682a:	2300      	movs	r3, #0
 800682c:	613b      	str	r3, [r7, #16]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	613b      	str	r3, [r7, #16]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8006840:	2300      	movs	r3, #0
 8006842:	61bb      	str	r3, [r7, #24]
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	429a      	cmp	r2, r3
 800684a:	da15      	bge.n	8006878 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	4413      	add	r3, r2
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	4619      	mov	r1, r3
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 f85a 	bl	8006910 <_ZN7TwoWire21i2c_master_byte_writeEi>
 800685c:	4603      	mov	r3, r0
 800685e:	2b01      	cmp	r3, #1
 8006860:	bf14      	ite	ne
 8006862:	2301      	movne	r3, #1
 8006864:	2300      	moveq	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 800686c:	2303      	movs	r3, #3
 800686e:	e00a      	b.n	8006886 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	3301      	adds	r3, #1
 8006874:	61bb      	str	r3, [r7, #24]
 8006876:	e7e5      	b.n	8006844 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f7ff feed 	bl	800665e <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3720      	adds	r7, #32
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 800688e:	b480      	push	{r7}
 8006890:	b087      	sub	sp, #28
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800689e:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d006      	beq.n	80068b4 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	e005      	b.n	80068c0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 80068c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068c4:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	bf14      	ite	ne
 80068d4:	2301      	movne	r3, #1
 80068d6:	2300      	moveq	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00c      	beq.n	80068f8 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	1e5a      	subs	r2, r3, #1
 80068e2:	617a      	str	r2, [r7, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bf0c      	ite	eq
 80068e8:	2301      	moveq	r3, #1
 80068ea:	2300      	movne	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0e9      	beq.n	80068c6 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	e005      	b.n	8006904 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	461a      	mov	r2, r3
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	601a      	str	r2, [r3, #0]

    return 0;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691e:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	461a      	mov	r2, r3
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 800692a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800692e:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693a:	2b80      	cmp	r3, #128	; 0x80
 800693c:	d008      	beq.n	8006950 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8006948:	2b04      	cmp	r3, #4
 800694a:	d001      	beq.n	8006950 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 800694c:	2301      	movs	r3, #1
 800694e:	e000      	b.n	8006952 <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8006950:	2300      	movs	r3, #0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	1e5a      	subs	r2, r3, #1
 800695a:	60fa      	str	r2, [r7, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	bf0c      	ite	eq
 8006960:	2301      	moveq	r3, #1
 8006962:	2300      	movne	r3, #0
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0e2      	beq.n	8006930 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 800696a:	2300      	movs	r3, #0
 800696c:	e000      	b.n	8006970 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 800696e:	2301      	movs	r3, #1
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 800697c:	b480      	push	{r7}
 800697e:	b089      	sub	sp, #36	; 0x24
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8006988:	2300      	movs	r3, #0
 800698a:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006990:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	dd41      	ble.n	8006a1c <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8006998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800699c:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a8:	2b80      	cmp	r3, #128	; 0x80
 80069aa:	bf14      	ite	ne
 80069ac:	2301      	movne	r3, #1
 80069ae:	2300      	moveq	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d008      	beq.n	80069c8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1ed      	bne.n	800699e <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 80069c2:	f04f 33ff 	mov.w	r3, #4294967295
 80069c6:	e068      	b.n	8006a9a <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	60ba      	str	r2, [r7, #8]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	611a      	str	r2, [r3, #16]
        length--;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	3b01      	subs	r3, #1
 80069da:	607b      	str	r3, [r7, #4]
        size++;
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	3301      	adds	r3, #1
 80069e0:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d104      	bne.n	80069fa <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e000      	b.n	80069fc <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 80069fa:	2300      	movs	r3, #0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0c8      	beq.n	8006992 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	60ba      	str	r2, [r7, #8]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	611a      	str	r2, [r3, #16]
            length--;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	607b      	str	r3, [r7, #4]
            size++;
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	3301      	adds	r3, #1
 8006a18:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8006a1a:	e7ba      	b.n	8006992 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8006a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a20:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a30:	bf14      	ite	ne
 8006a32:	2301      	movne	r3, #1
 8006a34:	2300      	moveq	r3, #0
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d008      	beq.n	8006a4e <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1ec      	bne.n	8006a22 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8006a48:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4c:	e025      	b.n	8006a9a <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a56:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8006a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a5c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2301      	moveq	r3, #1
 8006a6e:	2300      	movne	r3, #0
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d008      	beq.n	8006a88 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1ed      	bne.n	8006a5e <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8006a82:	f04f 33ff 	mov.w	r3, #4294967295
 8006a86:	e008      	b.n	8006a9a <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8006a98:	69bb      	ldr	r3, [r7, #24]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3724      	adds	r7, #36	; 0x24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
	...

08006aa8 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab4:	4a12      	ldr	r2, [pc, #72]	; (8006b00 <_ZN7TwoWire15enableInterruptEv+0x58>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d106      	bne.n	8006ac8 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8006aba:	2049      	movs	r0, #73	; 0x49
 8006abc:	f001 fd04 	bl	80084c8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8006ac0:	2048      	movs	r0, #72	; 0x48
 8006ac2:	f001 fd01 	bl	80084c8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8006ac6:	e016      	b.n	8006af6 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006acc:	4a0d      	ldr	r2, [pc, #52]	; (8006b04 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d106      	bne.n	8006ae0 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8006ad2:	2022      	movs	r0, #34	; 0x22
 8006ad4:	f001 fcf8 	bl	80084c8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8006ad8:	2021      	movs	r0, #33	; 0x21
 8006ada:	f001 fcf5 	bl	80084c8 <HAL_NVIC_EnableIRQ>
}
 8006ade:	e00a      	b.n	8006af6 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae4:	4a08      	ldr	r2, [pc, #32]	; (8006b08 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d105      	bne.n	8006af6 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006aea:	2020      	movs	r0, #32
 8006aec:	f001 fcec 	bl	80084c8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006af0:	201f      	movs	r0, #31
 8006af2:	f001 fce9 	bl	80084c8 <HAL_NVIC_EnableIRQ>
}
 8006af6:	bf00      	nop
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	40005c00 	.word	0x40005c00
 8006b04:	40005800 	.word	0x40005800
 8006b08:	40005400 	.word	0x40005400

08006b0c <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b18:	4a12      	ldr	r2, [pc, #72]	; (8006b64 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d106      	bne.n	8006b2c <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8006b1e:	2049      	movs	r0, #73	; 0x49
 8006b20:	f001 fce0 	bl	80084e4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8006b24:	2048      	movs	r0, #72	; 0x48
 8006b26:	f001 fcdd 	bl	80084e4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8006b2a:	e016      	b.n	8006b5a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b30:	4a0d      	ldr	r2, [pc, #52]	; (8006b68 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d106      	bne.n	8006b44 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8006b36:	2022      	movs	r0, #34	; 0x22
 8006b38:	f001 fcd4 	bl	80084e4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8006b3c:	2021      	movs	r0, #33	; 0x21
 8006b3e:	f001 fcd1 	bl	80084e4 <HAL_NVIC_DisableIRQ>
}
 8006b42:	e00a      	b.n	8006b5a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b48:	4a08      	ldr	r2, [pc, #32]	; (8006b6c <_ZN7TwoWire16disableInterruptEv+0x60>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d105      	bne.n	8006b5a <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8006b4e:	2020      	movs	r0, #32
 8006b50:	f001 fcc8 	bl	80084e4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8006b54:	201f      	movs	r0, #31
 8006b56:	f001 fcc5 	bl	80084e4 <HAL_NVIC_DisableIRQ>
}
 8006b5a:	bf00      	nop
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	40005c00 	.word	0x40005c00
 8006b68:	40005800 	.word	0x40005800
 8006b6c:	40005400 	.word	0x40005400

08006b70 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d110      	bne.n	8006ba2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d10b      	bne.n	8006ba2 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8006b8a:	4908      	ldr	r1, [pc, #32]	; (8006bac <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8006b8c:	4808      	ldr	r0, [pc, #32]	; (8006bb0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006b8e:	f7ff fb51 	bl	8006234 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8006b92:	4908      	ldr	r1, [pc, #32]	; (8006bb4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8006b94:	4808      	ldr	r0, [pc, #32]	; (8006bb8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8006b96:	f7ff fb4d 	bl	8006234 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8006b9a:	4908      	ldr	r1, [pc, #32]	; (8006bbc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006b9c:	4808      	ldr	r0, [pc, #32]	; (8006bc0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8006b9e:	f7ff fb49 	bl	8006234 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8006ba2:	bf00      	nop
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40005400 	.word	0x40005400
 8006bb0:	200002e4 	.word	0x200002e4
 8006bb4:	40005800 	.word	0x40005800
 8006bb8:	2000039c 	.word	0x2000039c
 8006bbc:	40005c00 	.word	0x40005c00
 8006bc0:	20000454 	.word	0x20000454

08006bc4 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006bcc:	2001      	movs	r0, #1
 8006bce:	f7ff ffcf 	bl	8006b70 <_Z41__static_initialization_and_destruction_0ii>
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006bd4:	b590      	push	{r4, r7, lr}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	607a      	str	r2, [r7, #4]
 8006bde:	461a      	mov	r2, r3
 8006be0:	460b      	mov	r3, r1
 8006be2:	72fb      	strb	r3, [r7, #11]
 8006be4:	4613      	mov	r3, r2
 8006be6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	685c      	ldr	r4, [r3, #4]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6898      	ldr	r0, [r3, #8]
 8006bf0:	893b      	ldrh	r3, [r7, #8]
 8006bf2:	7af9      	ldrb	r1, [r7, #11]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	47a0      	blx	r4
 8006bf8:	6178      	str	r0, [r7, #20]

  return ret;
 8006bfa:	697b      	ldr	r3, [r7, #20]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd90      	pop	{r4, r7, pc}

08006c04 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006c04:	b590      	push	{r4, r7, lr}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	460b      	mov	r3, r1
 8006c12:	72fb      	strb	r3, [r7, #11]
 8006c14:	4613      	mov	r3, r2
 8006c16:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681c      	ldr	r4, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6898      	ldr	r0, [r3, #8]
 8006c20:	893b      	ldrh	r3, [r7, #8]
 8006c22:	7af9      	ldrb	r1, [r7, #11]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	47a0      	blx	r4
 8006c28:	6178      	str	r0, [r7, #20]

  return ret;
 8006c2a:	697b      	ldr	r3, [r7, #20]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	371c      	adds	r7, #28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd90      	pop	{r4, r7, pc}

08006c34 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c46:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006c60 <lps22hh_from_lsb_to_hpa+0x2c>
 8006c4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c4e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006c52:	eeb0 0a67 	vmov.f32	s0, s15
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	49800000 	.word	0x49800000

08006c64 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8006c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c7a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006c94 <lps22hh_from_lsb_to_celsius+0x30>
 8006c7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c82:	eef0 7a66 	vmov.f32	s15, s13
}
 8006c86:	eeb0 0a67 	vmov.f32	s0, s15
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	42c80000 	.word	0x42c80000

08006c98 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006ca4:	f107 0208 	add.w	r2, r7, #8
 8006ca8:	2301      	movs	r3, #1
 8006caa:	2110      	movs	r1, #16
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7ff ff91 	bl	8006bd4 <lps22hh_read_reg>
 8006cb2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10f      	bne.n	8006cda <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006cba:	78fb      	ldrb	r3, [r7, #3]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	7a3b      	ldrb	r3, [r7, #8]
 8006cc4:	f362 0341 	bfi	r3, r2, #1, #1
 8006cc8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006cca:	f107 0208 	add.w	r2, r7, #8
 8006cce:	2301      	movs	r3, #1
 8006cd0:	2110      	movs	r1, #16
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff ff96 	bl	8006c04 <lps22hh_write_reg>
 8006cd8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006cda:	68fb      	ldr	r3, [r7, #12]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006cf0:	f107 0210 	add.w	r2, r7, #16
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	2110      	movs	r1, #16
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff ff6b 	bl	8006bd4 <lps22hh_read_reg>
 8006cfe:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d107      	bne.n	8006d16 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006d06:	f107 020c 	add.w	r2, r7, #12
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	2111      	movs	r1, #17
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff ff60 	bl	8006bd4 <lps22hh_read_reg>
 8006d14:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10f      	bne.n	8006d3c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006d1c:	78fb      	ldrb	r3, [r7, #3]
 8006d1e:	f003 0307 	and.w	r3, r3, #7
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	7c3b      	ldrb	r3, [r7, #16]
 8006d26:	f362 1306 	bfi	r3, r2, #4, #3
 8006d2a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006d2c:	f107 0210 	add.w	r2, r7, #16
 8006d30:	2301      	movs	r3, #1
 8006d32:	2110      	movs	r1, #16
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff ff65 	bl	8006c04 <lps22hh_write_reg>
 8006d3a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d119      	bne.n	8006d76 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006d42:	78fb      	ldrb	r3, [r7, #3]
 8006d44:	091b      	lsrs	r3, r3, #4
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	7b3b      	ldrb	r3, [r7, #12]
 8006d4e:	f362 0341 	bfi	r3, r2, #1, #1
 8006d52:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	08db      	lsrs	r3, r3, #3
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	7b3b      	ldrb	r3, [r7, #12]
 8006d60:	f362 0300 	bfi	r3, r2, #0, #1
 8006d64:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006d66:	f107 020c 	add.w	r2, r7, #12
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	2111      	movs	r1, #17
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff ff48 	bl	8006c04 <lps22hh_write_reg>
 8006d74:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006d76:	697b      	ldr	r3, [r7, #20]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8006d8a:	f107 0208 	add.w	r2, r7, #8
 8006d8e:	2301      	movs	r3, #1
 8006d90:	2127      	movs	r1, #39	; 0x27
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7ff ff1e 	bl	8006bd4 <lps22hh_read_reg>
 8006d98:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8006d9a:	7a3b      	ldrb	r3, [r7, #8]
 8006d9c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	461a      	mov	r2, r3
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	701a      	strb	r2, [r3, #0]

  return ret;
 8006da8:	68fb      	ldr	r3, [r7, #12]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8006dbc:	f107 0208 	add.w	r2, r7, #8
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	2128      	movs	r1, #40	; 0x28
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff ff05 	bl	8006bd4 <lps22hh_read_reg>
 8006dca:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006dcc:	7abb      	ldrb	r3, [r7, #10]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	7a7a      	ldrb	r2, [r7, #9]
 8006ddc:	441a      	add	r2, r3
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	021b      	lsls	r3, r3, #8
 8006de8:	7a3a      	ldrb	r2, [r7, #8]
 8006dea:	441a      	add	r2, r3
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	021a      	lsls	r2, r3, #8
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	601a      	str	r2, [r3, #0]

  return ret;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006e0e:	f107 0208 	add.w	r2, r7, #8
 8006e12:	2302      	movs	r3, #2
 8006e14:	212b      	movs	r1, #43	; 0x2b
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff fedc 	bl	8006bd4 <lps22hh_read_reg>
 8006e1c:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006e1e:	7a7b      	ldrb	r3, [r7, #9]
 8006e20:	b21a      	sxth	r2, r3
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	021b      	lsls	r3, r3, #8
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	7a3b      	ldrb	r3, [r7, #8]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	4413      	add	r3, r2
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	b21a      	sxth	r2, r3
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	801a      	strh	r2, [r3, #0]

  return ret;
 8006e40:	68fb      	ldr	r3, [r7, #12]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006e54:	2301      	movs	r3, #1
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	210f      	movs	r1, #15
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7ff feba 	bl	8006bd4 <lps22hh_read_reg>
 8006e60:	60f8      	str	r0, [r7, #12]

  return ret;
 8006e62:	68fb      	ldr	r3, [r7, #12]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006e78:	f107 0208 	add.w	r2, r7, #8
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	2111      	movs	r1, #17
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7ff fea7 	bl	8006bd4 <lps22hh_read_reg>
 8006e86:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10f      	bne.n	8006eae <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8006e8e:	78fb      	ldrb	r3, [r7, #3]
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	7a3b      	ldrb	r3, [r7, #8]
 8006e98:	f362 0382 	bfi	r3, r2, #2, #1
 8006e9c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006e9e:	f107 0208 	add.w	r2, r7, #8
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	2111      	movs	r1, #17
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff feac 	bl	8006c04 <lps22hh_write_reg>
 8006eac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006eae:	68fb      	ldr	r3, [r7, #12]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006ec2:	f107 0208 	add.w	r2, r7, #8
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	2111      	movs	r1, #17
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff fe82 	bl	8006bd4 <lps22hh_read_reg>
 8006ed0:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8006ed2:	7a3b      	ldrb	r3, [r7, #8]
 8006ed4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	461a      	mov	r2, r3
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	701a      	strb	r2, [r3, #0]

  return ret;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006eea:	b590      	push	{r4, r7, lr}
 8006eec:	b087      	sub	sp, #28
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	72fb      	strb	r3, [r7, #11]
 8006efa:	4613      	mov	r3, r2
 8006efc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	685c      	ldr	r4, [r3, #4]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6898      	ldr	r0, [r3, #8]
 8006f06:	893b      	ldrh	r3, [r7, #8]
 8006f08:	7af9      	ldrb	r1, [r7, #11]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	47a0      	blx	r4
 8006f0e:	6178      	str	r0, [r7, #20]

  return ret;
 8006f10:	697b      	ldr	r3, [r7, #20]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd90      	pop	{r4, r7, pc}

08006f1a <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006f1a:	b590      	push	{r4, r7, lr}
 8006f1c:	b087      	sub	sp, #28
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	60f8      	str	r0, [r7, #12]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	461a      	mov	r2, r3
 8006f26:	460b      	mov	r3, r1
 8006f28:	72fb      	strb	r3, [r7, #11]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681c      	ldr	r4, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6898      	ldr	r0, [r3, #8]
 8006f36:	893b      	ldrh	r3, [r7, #8]
 8006f38:	7af9      	ldrb	r1, [r7, #11]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	47a0      	blx	r4
 8006f3e:	6178      	str	r0, [r7, #20]

  return ret;
 8006f40:	697b      	ldr	r3, [r7, #20]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	371c      	adds	r7, #28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd90      	pop	{r4, r7, pc}
	...

08006f4c <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	4603      	mov	r3, r0
 8006f54:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8006f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f62:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006f78 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8006f66:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	3d79db23 	.word	0x3d79db23

08006f7c <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8006f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f92:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006fa8 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8006f96:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	428c0000 	.word	0x428c0000

08006fac <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8006fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fc2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006fe0 <lsm6dsr_from_lsb_to_celsius+0x34>
 8006fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006fca:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006fce:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8006fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	43800000 	.word	0x43800000

08006fe4 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006ff0:	f107 0208 	add.w	r2, r7, #8
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	2110      	movs	r1, #16
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7ff ff76 	bl	8006eea <lsm6dsr_read_reg>
 8006ffe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10f      	bne.n	8007026 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8007006:	78fb      	ldrb	r3, [r7, #3]
 8007008:	f003 0303 	and.w	r3, r3, #3
 800700c:	b2da      	uxtb	r2, r3
 800700e:	7a3b      	ldrb	r3, [r7, #8]
 8007010:	f362 0383 	bfi	r3, r2, #2, #2
 8007014:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8007016:	f107 0208 	add.w	r2, r7, #8
 800701a:	2301      	movs	r3, #1
 800701c:	2110      	movs	r1, #16
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff ff7b 	bl	8006f1a <lsm6dsr_write_reg>
 8007024:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8007026:	68fb      	ldr	r3, [r7, #12]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 800703c:	78fb      	ldrb	r3, [r7, #3]
 800703e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8007040:	f107 030c 	add.w	r3, r7, #12
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fbb0 	bl	80077ac <lsm6dsr_fsm_enable_get>
 800704c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	f040 80c4 	bne.w	80071de <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007056:	7b3b      	ldrb	r3, [r7, #12]
 8007058:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800705c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800705e:	7b3b      	ldrb	r3, [r7, #12]
 8007060:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007064:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007066:	4313      	orrs	r3, r2
 8007068:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800706a:	7b3b      	ldrb	r3, [r7, #12]
 800706c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007070:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007072:	4313      	orrs	r3, r2
 8007074:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007076:	7b3b      	ldrb	r3, [r7, #12]
 8007078:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800707c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800707e:	4313      	orrs	r3, r2
 8007080:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007082:	7b3b      	ldrb	r3, [r7, #12]
 8007084:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007088:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800708a:	4313      	orrs	r3, r2
 800708c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800708e:	7b3b      	ldrb	r3, [r7, #12]
 8007090:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007094:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007096:	4313      	orrs	r3, r2
 8007098:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800709a:	7b3b      	ldrb	r3, [r7, #12]
 800709c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80070a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80070a2:	4313      	orrs	r3, r2
 80070a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80070a6:	7b3b      	ldrb	r3, [r7, #12]
 80070a8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80070ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80070ae:	4313      	orrs	r3, r2
 80070b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80070b2:	7b7b      	ldrb	r3, [r7, #13]
 80070b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80070b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80070ba:	4313      	orrs	r3, r2
 80070bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80070be:	7b7b      	ldrb	r3, [r7, #13]
 80070c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80070c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80070c6:	4313      	orrs	r3, r2
 80070c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80070ca:	7b7b      	ldrb	r3, [r7, #13]
 80070cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80070d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80070d2:	4313      	orrs	r3, r2
 80070d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80070d6:	7b7b      	ldrb	r3, [r7, #13]
 80070d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80070dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80070de:	4313      	orrs	r3, r2
 80070e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80070e2:	7b7b      	ldrb	r3, [r7, #13]
 80070e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80070e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80070ea:	4313      	orrs	r3, r2
 80070ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80070ee:	7b7b      	ldrb	r3, [r7, #13]
 80070f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80070f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80070f6:	4313      	orrs	r3, r2
 80070f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80070fa:	7b7b      	ldrb	r3, [r7, #13]
 80070fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007100:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007102:	4313      	orrs	r3, r2
 8007104:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007106:	7b7b      	ldrb	r3, [r7, #13]
 8007108:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800710c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800710e:	4313      	orrs	r3, r2
 8007110:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007112:	2b01      	cmp	r3, #1
 8007114:	d163      	bne.n	80071de <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8007116:	f107 030b 	add.w	r3, r7, #11
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fb71 	bl	8007804 <lsm6dsr_fsm_data_rate_get>
 8007122:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d159      	bne.n	80071de <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800712a:	7afb      	ldrb	r3, [r7, #11]
 800712c:	2b03      	cmp	r3, #3
 800712e:	d853      	bhi.n	80071d8 <lsm6dsr_xl_data_rate_set+0x1a8>
 8007130:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <lsm6dsr_xl_data_rate_set+0x108>)
 8007132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007136:	bf00      	nop
 8007138:	08007149 	.word	0x08007149
 800713c:	0800715b 	.word	0x0800715b
 8007140:	08007179 	.word	0x08007179
 8007144:	080071a3 	.word	0x080071a3
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d102      	bne.n	8007154 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800714e:	2301      	movs	r3, #1
 8007150:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007152:	e045      	b.n	80071e0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	75fb      	strb	r3, [r7, #23]
            break;
 8007158:	e042      	b.n	80071e0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d102      	bne.n	8007166 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8007160:	2302      	movs	r3, #2
 8007162:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007164:	e03c      	b.n	80071e0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8007166:	78fb      	ldrb	r3, [r7, #3]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d102      	bne.n	8007172 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800716c:	2302      	movs	r3, #2
 800716e:	75fb      	strb	r3, [r7, #23]
            break;
 8007170:	e036      	b.n	80071e0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007172:	78fb      	ldrb	r3, [r7, #3]
 8007174:	75fb      	strb	r3, [r7, #23]
            break;
 8007176:	e033      	b.n	80071e0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8007178:	78fb      	ldrb	r3, [r7, #3]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d102      	bne.n	8007184 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800717e:	2303      	movs	r3, #3
 8007180:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007182:	e02d      	b.n	80071e0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d102      	bne.n	8007190 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800718a:	2303      	movs	r3, #3
 800718c:	75fb      	strb	r3, [r7, #23]
            break;
 800718e:	e027      	b.n	80071e0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	2b02      	cmp	r3, #2
 8007194:	d102      	bne.n	800719c <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8007196:	2303      	movs	r3, #3
 8007198:	75fb      	strb	r3, [r7, #23]
            break;
 800719a:	e021      	b.n	80071e0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	75fb      	strb	r3, [r7, #23]
            break;
 80071a0:	e01e      	b.n	80071e0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80071a2:	78fb      	ldrb	r3, [r7, #3]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80071a8:	2304      	movs	r3, #4
 80071aa:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80071ac:	e018      	b.n	80071e0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80071ae:	78fb      	ldrb	r3, [r7, #3]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d102      	bne.n	80071ba <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80071b4:	2304      	movs	r3, #4
 80071b6:	75fb      	strb	r3, [r7, #23]
            break;
 80071b8:	e012      	b.n	80071e0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80071ba:	78fb      	ldrb	r3, [r7, #3]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d102      	bne.n	80071c6 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80071c0:	2304      	movs	r3, #4
 80071c2:	75fb      	strb	r3, [r7, #23]
            break;
 80071c4:	e00c      	b.n	80071e0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 80071c6:	78fb      	ldrb	r3, [r7, #3]
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d102      	bne.n	80071d2 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80071cc:	2304      	movs	r3, #4
 80071ce:	75fb      	strb	r3, [r7, #23]
            break;
 80071d0:	e006      	b.n	80071e0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80071d2:	78fb      	ldrb	r3, [r7, #3]
 80071d4:	75fb      	strb	r3, [r7, #23]
            break;
 80071d6:	e003      	b.n	80071e0 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80071d8:	78fb      	ldrb	r3, [r7, #3]
 80071da:	75fb      	strb	r3, [r7, #23]
            break;
 80071dc:	e000      	b.n	80071e0 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 80071de:	bf00      	nop
    }
  }

  if (ret == 0)
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d107      	bne.n	80071f6 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80071e6:	f107 0208 	add.w	r2, r7, #8
 80071ea:	2301      	movs	r3, #1
 80071ec:	2110      	movs	r1, #16
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7ff fe7b 	bl	8006eea <lsm6dsr_read_reg>
 80071f4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10f      	bne.n	800721c <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
 80071fe:	f003 030f 	and.w	r3, r3, #15
 8007202:	b2da      	uxtb	r2, r3
 8007204:	7a3b      	ldrb	r3, [r7, #8]
 8007206:	f362 1307 	bfi	r3, r2, #4, #4
 800720a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800720c:	f107 0208 	add.w	r2, r7, #8
 8007210:	2301      	movs	r3, #1
 8007212:	2110      	movs	r1, #16
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff fe80 	bl	8006f1a <lsm6dsr_write_reg>
 800721a:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800721c:	693b      	ldr	r3, [r7, #16]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop

08007228 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007234:	f107 0208 	add.w	r2, r7, #8
 8007238:	2301      	movs	r3, #1
 800723a:	2111      	movs	r1, #17
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff fe54 	bl	8006eea <lsm6dsr_read_reg>
 8007242:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10f      	bne.n	800726a <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800724a:	78fb      	ldrb	r3, [r7, #3]
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	b2da      	uxtb	r2, r3
 8007252:	7a3b      	ldrb	r3, [r7, #8]
 8007254:	f362 0303 	bfi	r3, r2, #0, #4
 8007258:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800725a:	f107 0208 	add.w	r2, r7, #8
 800725e:	2301      	movs	r3, #1
 8007260:	2111      	movs	r1, #17
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7ff fe59 	bl	8006f1a <lsm6dsr_write_reg>
 8007268:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800726a:	68fb      	ldr	r3, [r7, #12]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8007280:	78fb      	ldrb	r3, [r7, #3]
 8007282:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8007284:	f107 030c 	add.w	r3, r7, #12
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa8e 	bl	80077ac <lsm6dsr_fsm_enable_get>
 8007290:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	f040 80c4 	bne.w	8007422 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800729a:	7b3b      	ldrb	r3, [r7, #12]
 800729c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80072a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80072a2:	7b3b      	ldrb	r3, [r7, #12]
 80072a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80072a8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80072aa:	4313      	orrs	r3, r2
 80072ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80072ae:	7b3b      	ldrb	r3, [r7, #12]
 80072b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80072b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80072b6:	4313      	orrs	r3, r2
 80072b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80072ba:	7b3b      	ldrb	r3, [r7, #12]
 80072bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80072c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80072c2:	4313      	orrs	r3, r2
 80072c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80072c6:	7b3b      	ldrb	r3, [r7, #12]
 80072c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80072cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80072ce:	4313      	orrs	r3, r2
 80072d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80072d2:	7b3b      	ldrb	r3, [r7, #12]
 80072d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80072d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80072da:	4313      	orrs	r3, r2
 80072dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80072de:	7b3b      	ldrb	r3, [r7, #12]
 80072e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80072e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80072e6:	4313      	orrs	r3, r2
 80072e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80072ea:	7b3b      	ldrb	r3, [r7, #12]
 80072ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80072f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80072f2:	4313      	orrs	r3, r2
 80072f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80072f6:	7b7b      	ldrb	r3, [r7, #13]
 80072f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80072fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80072fe:	4313      	orrs	r3, r2
 8007300:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007302:	7b7b      	ldrb	r3, [r7, #13]
 8007304:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007308:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800730a:	4313      	orrs	r3, r2
 800730c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800730e:	7b7b      	ldrb	r3, [r7, #13]
 8007310:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007314:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007316:	4313      	orrs	r3, r2
 8007318:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800731a:	7b7b      	ldrb	r3, [r7, #13]
 800731c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007320:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007322:	4313      	orrs	r3, r2
 8007324:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007326:	7b7b      	ldrb	r3, [r7, #13]
 8007328:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800732c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800732e:	4313      	orrs	r3, r2
 8007330:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007332:	7b7b      	ldrb	r3, [r7, #13]
 8007334:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007338:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800733a:	4313      	orrs	r3, r2
 800733c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800733e:	7b7b      	ldrb	r3, [r7, #13]
 8007340:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007344:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007346:	4313      	orrs	r3, r2
 8007348:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800734a:	7b7b      	ldrb	r3, [r7, #13]
 800734c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007350:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007352:	4313      	orrs	r3, r2
 8007354:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007356:	2b01      	cmp	r3, #1
 8007358:	d163      	bne.n	8007422 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800735a:	f107 030b 	add.w	r3, r7, #11
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fa4f 	bl	8007804 <lsm6dsr_fsm_data_rate_get>
 8007366:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d159      	bne.n	8007422 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800736e:	7afb      	ldrb	r3, [r7, #11]
 8007370:	2b03      	cmp	r3, #3
 8007372:	d853      	bhi.n	800741c <lsm6dsr_gy_data_rate_set+0x1a8>
 8007374:	a201      	add	r2, pc, #4	; (adr r2, 800737c <lsm6dsr_gy_data_rate_set+0x108>)
 8007376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737a:	bf00      	nop
 800737c:	0800738d 	.word	0x0800738d
 8007380:	0800739f 	.word	0x0800739f
 8007384:	080073bd 	.word	0x080073bd
 8007388:	080073e7 	.word	0x080073e7
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 800738c:	78fb      	ldrb	r3, [r7, #3]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d102      	bne.n	8007398 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8007392:	2301      	movs	r3, #1
 8007394:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007396:	e045      	b.n	8007424 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007398:	78fb      	ldrb	r3, [r7, #3]
 800739a:	75fb      	strb	r3, [r7, #23]
            break;
 800739c:	e042      	b.n	8007424 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800739e:	78fb      	ldrb	r3, [r7, #3]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d102      	bne.n	80073aa <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80073a4:	2302      	movs	r3, #2
 80073a6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80073a8:	e03c      	b.n	8007424 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80073aa:	78fb      	ldrb	r3, [r7, #3]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d102      	bne.n	80073b6 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80073b0:	2302      	movs	r3, #2
 80073b2:	75fb      	strb	r3, [r7, #23]
            break;
 80073b4:	e036      	b.n	8007424 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80073b6:	78fb      	ldrb	r3, [r7, #3]
 80073b8:	75fb      	strb	r3, [r7, #23]
            break;
 80073ba:	e033      	b.n	8007424 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80073bc:	78fb      	ldrb	r3, [r7, #3]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80073c2:	2303      	movs	r3, #3
 80073c4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80073c6:	e02d      	b.n	8007424 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80073c8:	78fb      	ldrb	r3, [r7, #3]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d102      	bne.n	80073d4 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80073ce:	2303      	movs	r3, #3
 80073d0:	75fb      	strb	r3, [r7, #23]
            break;
 80073d2:	e027      	b.n	8007424 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d102      	bne.n	80073e0 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80073da:	2303      	movs	r3, #3
 80073dc:	75fb      	strb	r3, [r7, #23]
            break;
 80073de:	e021      	b.n	8007424 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	75fb      	strb	r3, [r7, #23]
            break;
 80073e4:	e01e      	b.n	8007424 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80073e6:	78fb      	ldrb	r3, [r7, #3]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d102      	bne.n	80073f2 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80073ec:	2304      	movs	r3, #4
 80073ee:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80073f0:	e018      	b.n	8007424 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80073f2:	78fb      	ldrb	r3, [r7, #3]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d102      	bne.n	80073fe <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80073f8:	2304      	movs	r3, #4
 80073fa:	75fb      	strb	r3, [r7, #23]
            break;
 80073fc:	e012      	b.n	8007424 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80073fe:	78fb      	ldrb	r3, [r7, #3]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d102      	bne.n	800740a <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007404:	2304      	movs	r3, #4
 8007406:	75fb      	strb	r3, [r7, #23]
            break;
 8007408:	e00c      	b.n	8007424 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	2b03      	cmp	r3, #3
 800740e:	d102      	bne.n	8007416 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007410:	2304      	movs	r3, #4
 8007412:	75fb      	strb	r3, [r7, #23]
            break;
 8007414:	e006      	b.n	8007424 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007416:	78fb      	ldrb	r3, [r7, #3]
 8007418:	75fb      	strb	r3, [r7, #23]
            break;
 800741a:	e003      	b.n	8007424 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	75fb      	strb	r3, [r7, #23]
            break;
 8007420:	e000      	b.n	8007424 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8007422:	bf00      	nop
    }
  }

  if (ret == 0)
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d107      	bne.n	800743a <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800742a:	f107 0208 	add.w	r2, r7, #8
 800742e:	2301      	movs	r3, #1
 8007430:	2111      	movs	r1, #17
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff fd59 	bl	8006eea <lsm6dsr_read_reg>
 8007438:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10f      	bne.n	8007460 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8007440:	7dfb      	ldrb	r3, [r7, #23]
 8007442:	f003 030f 	and.w	r3, r3, #15
 8007446:	b2da      	uxtb	r2, r3
 8007448:	7a3b      	ldrb	r3, [r7, #8]
 800744a:	f362 1307 	bfi	r3, r2, #4, #4
 800744e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007450:	f107 0208 	add.w	r2, r7, #8
 8007454:	2301      	movs	r3, #1
 8007456:	2111      	movs	r1, #17
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff fd5e 	bl	8006f1a <lsm6dsr_write_reg>
 800745e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8007460:	693b      	ldr	r3, [r7, #16]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop

0800746c <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007478:	f107 0208 	add.w	r2, r7, #8
 800747c:	2301      	movs	r3, #1
 800747e:	2112      	movs	r1, #18
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7ff fd32 	bl	8006eea <lsm6dsr_read_reg>
 8007486:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10f      	bne.n	80074ae <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800748e:	78fb      	ldrb	r3, [r7, #3]
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	b2da      	uxtb	r2, r3
 8007496:	7a3b      	ldrb	r3, [r7, #8]
 8007498:	f362 1386 	bfi	r3, r2, #6, #1
 800749c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800749e:	f107 0208 	add.w	r2, r7, #8
 80074a2:	2301      	movs	r3, #1
 80074a4:	2112      	movs	r1, #18
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7ff fd37 	bl	8006f1a <lsm6dsr_write_reg>
 80074ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80074ae:	68fb      	ldr	r3, [r7, #12]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80074c2:	f107 0208 	add.w	r2, r7, #8
 80074c6:	2301      	movs	r3, #1
 80074c8:	211e      	movs	r1, #30
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff fd0d 	bl	8006eea <lsm6dsr_read_reg>
 80074d0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80074d2:	7a3b      	ldrb	r3, [r7, #8]
 80074d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	461a      	mov	r2, r3
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	701a      	strb	r2, [r3, #0]

  return ret;
 80074e0:	68fb      	ldr	r3, [r7, #12]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80074f4:	f107 0208 	add.w	r2, r7, #8
 80074f8:	2301      	movs	r3, #1
 80074fa:	211e      	movs	r1, #30
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7ff fcf4 	bl	8006eea <lsm6dsr_read_reg>
 8007502:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8007504:	7a3b      	ldrb	r3, [r7, #8]
 8007506:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800750a:	b2db      	uxtb	r3, r3
 800750c:	461a      	mov	r2, r3
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	701a      	strb	r2, [r3, #0]

  return ret;
 8007512:	68fb      	ldr	r3, [r7, #12]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8007526:	f107 0208 	add.w	r2, r7, #8
 800752a:	2301      	movs	r3, #1
 800752c:	211e      	movs	r1, #30
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff fcdb 	bl	8006eea <lsm6dsr_read_reg>
 8007534:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8007536:	7a3b      	ldrb	r3, [r7, #8]
 8007538:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800753c:	b2db      	uxtb	r3, r3
 800753e:	461a      	mov	r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	701a      	strb	r2, [r3, #0]

  return ret;
 8007544:	68fb      	ldr	r3, [r7, #12]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8007558:	f107 0208 	add.w	r2, r7, #8
 800755c:	2302      	movs	r3, #2
 800755e:	2120      	movs	r1, #32
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff fcc2 	bl	8006eea <lsm6dsr_read_reg>
 8007566:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8007568:	7a7b      	ldrb	r3, [r7, #9]
 800756a:	b21a      	sxth	r2, r3
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007576:	b29b      	uxth	r3, r3
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	b29a      	uxth	r2, r3
 800757c:	7a3b      	ldrb	r3, [r7, #8]
 800757e:	b29b      	uxth	r3, r3
 8007580:	4413      	add	r3, r2
 8007582:	b29b      	uxth	r3, r3
 8007584:	b21a      	sxth	r2, r3
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	801a      	strh	r2, [r3, #0]

  return ret;
 800758a:	68fb      	ldr	r3, [r7, #12]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 800759e:	f107 020c 	add.w	r2, r7, #12
 80075a2:	2306      	movs	r3, #6
 80075a4:	2122      	movs	r1, #34	; 0x22
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7ff fc9f 	bl	8006eea <lsm6dsr_read_reg>
 80075ac:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80075ae:	7b7b      	ldrb	r3, [r7, #13]
 80075b0:	b21a      	sxth	r2, r3
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	021b      	lsls	r3, r3, #8
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	7b3b      	ldrb	r3, [r7, #12]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	4413      	add	r3, r2
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	b21a      	sxth	r2, r3
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80075d0:	7bfa      	ldrb	r2, [r7, #15]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	3302      	adds	r3, #2
 80075d6:	b212      	sxth	r2, r2
 80075d8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	3302      	adds	r3, #2
 80075de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	4413      	add	r3, r2
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	3302      	adds	r3, #2
 80075f4:	b212      	sxth	r2, r2
 80075f6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80075f8:	7c7a      	ldrb	r2, [r7, #17]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	3304      	adds	r3, #4
 80075fe:	b212      	sxth	r2, r2
 8007600:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	3304      	adds	r3, #4
 8007606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800760a:	b29b      	uxth	r3, r3
 800760c:	021b      	lsls	r3, r3, #8
 800760e:	b29a      	uxth	r2, r3
 8007610:	7c3b      	ldrb	r3, [r7, #16]
 8007612:	b29b      	uxth	r3, r3
 8007614:	4413      	add	r3, r2
 8007616:	b29a      	uxth	r2, r3
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	3304      	adds	r3, #4
 800761c:	b212      	sxth	r2, r2
 800761e:	801a      	strh	r2, [r3, #0]

  return ret;
 8007620:	697b      	ldr	r3, [r7, #20]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b086      	sub	sp, #24
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8007634:	f107 020c 	add.w	r2, r7, #12
 8007638:	2306      	movs	r3, #6
 800763a:	2128      	movs	r1, #40	; 0x28
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff fc54 	bl	8006eea <lsm6dsr_read_reg>
 8007642:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007644:	7b7b      	ldrb	r3, [r7, #13]
 8007646:	b21a      	sxth	r2, r3
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007652:	b29b      	uxth	r3, r3
 8007654:	021b      	lsls	r3, r3, #8
 8007656:	b29a      	uxth	r2, r3
 8007658:	7b3b      	ldrb	r3, [r7, #12]
 800765a:	b29b      	uxth	r3, r3
 800765c:	4413      	add	r3, r2
 800765e:	b29b      	uxth	r3, r3
 8007660:	b21a      	sxth	r2, r3
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007666:	7bfa      	ldrb	r2, [r7, #15]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	3302      	adds	r3, #2
 800766c:	b212      	sxth	r2, r2
 800766e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	3302      	adds	r3, #2
 8007674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007678:	b29b      	uxth	r3, r3
 800767a:	021b      	lsls	r3, r3, #8
 800767c:	b29a      	uxth	r2, r3
 800767e:	7bbb      	ldrb	r3, [r7, #14]
 8007680:	b29b      	uxth	r3, r3
 8007682:	4413      	add	r3, r2
 8007684:	b29a      	uxth	r2, r3
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	3302      	adds	r3, #2
 800768a:	b212      	sxth	r2, r2
 800768c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800768e:	7c7a      	ldrb	r2, [r7, #17]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	3304      	adds	r3, #4
 8007694:	b212      	sxth	r2, r2
 8007696:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	3304      	adds	r3, #4
 800769c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	021b      	lsls	r3, r3, #8
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	7c3b      	ldrb	r3, [r7, #16]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	4413      	add	r3, r2
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	3304      	adds	r3, #4
 80076b2:	b212      	sxth	r2, r2
 80076b4:	801a      	strh	r2, [r3, #0]

  return ret;
 80076b6:	697b      	ldr	r3, [r7, #20]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80076cc:	f107 0208 	add.w	r2, r7, #8
 80076d0:	2301      	movs	r3, #1
 80076d2:	2101      	movs	r1, #1
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff fc08 	bl	8006eea <lsm6dsr_read_reg>
 80076da:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10f      	bne.n	8007702 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	f003 0303 	and.w	r3, r3, #3
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	7a3b      	ldrb	r3, [r7, #8]
 80076ec:	f362 1387 	bfi	r3, r2, #6, #2
 80076f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80076f2:	f107 0208 	add.w	r2, r7, #8
 80076f6:	2301      	movs	r3, #1
 80076f8:	2101      	movs	r1, #1
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7ff fc0d 	bl	8006f1a <lsm6dsr_write_reg>
 8007700:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8007702:	68fb      	ldr	r3, [r7, #12]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8007716:	2301      	movs	r3, #1
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	210f      	movs	r1, #15
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff fbe4 	bl	8006eea <lsm6dsr_read_reg>
 8007722:	60f8      	str	r0, [r7, #12]

  return ret;
 8007724:	68fb      	ldr	r3, [r7, #12]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	460b      	mov	r3, r1
 8007738:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800773a:	f107 0208 	add.w	r2, r7, #8
 800773e:	2301      	movs	r3, #1
 8007740:	2112      	movs	r1, #18
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff fbd1 	bl	8006eea <lsm6dsr_read_reg>
 8007748:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10f      	bne.n	8007770 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	b2da      	uxtb	r2, r3
 8007758:	7a3b      	ldrb	r3, [r7, #8]
 800775a:	f362 0300 	bfi	r3, r2, #0, #1
 800775e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007760:	f107 0208 	add.w	r2, r7, #8
 8007764:	2301      	movs	r3, #1
 8007766:	2112      	movs	r1, #18
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7ff fbd6 	bl	8006f1a <lsm6dsr_write_reg>
 800776e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007770:	68fb      	ldr	r3, [r7, #12]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007784:	f107 0208 	add.w	r2, r7, #8
 8007788:	2301      	movs	r3, #1
 800778a:	2112      	movs	r1, #18
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7ff fbac 	bl	8006eea <lsm6dsr_read_reg>
 8007792:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8007794:	7a3b      	ldrb	r3, [r7, #8]
 8007796:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800779a:	b2db      	uxtb	r3, r3
 800779c:	461a      	mov	r2, r3
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	701a      	strb	r2, [r3, #0]

  return ret;
 80077a2:	68fb      	ldr	r3, [r7, #12]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80077b6:	2102      	movs	r1, #2
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff ff81 	bl	80076c0 <lsm6dsr_mem_bank_set>
 80077be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d106      	bne.n	80077d4 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80077c6:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80077c8:	2301      	movs	r3, #1
 80077ca:	2146      	movs	r1, #70	; 0x46
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7ff fb8c 	bl	8006eea <lsm6dsr_read_reg>
 80077d2:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d107      	bne.n	80077ea <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80077de:	2301      	movs	r3, #1
 80077e0:	2147      	movs	r1, #71	; 0x47
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff fb81 	bl	8006eea <lsm6dsr_read_reg>
 80077e8:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d104      	bne.n	80077fa <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80077f0:	2100      	movs	r1, #0
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff ff64 	bl	80076c0 <lsm6dsr_mem_bank_set>
 80077f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80077fa:	68fb      	ldr	r3, [r7, #12]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800780e:	2102      	movs	r1, #2
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7ff ff55 	bl	80076c0 <lsm6dsr_mem_bank_set>
 8007816:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d107      	bne.n	800782e <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800781e:	f107 0208 	add.w	r2, r7, #8
 8007822:	2301      	movs	r3, #1
 8007824:	215f      	movs	r1, #95	; 0x5f
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff fb5f 	bl	8006eea <lsm6dsr_read_reg>
 800782c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d104      	bne.n	800783e <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8007834:	2100      	movs	r1, #0
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff ff42 	bl	80076c0 <lsm6dsr_mem_bank_set>
 800783c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800783e:	7a3b      	ldrb	r3, [r7, #8]
 8007840:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b03      	cmp	r3, #3
 8007848:	d81a      	bhi.n	8007880 <lsm6dsr_fsm_data_rate_get+0x7c>
 800784a:	a201      	add	r2, pc, #4	; (adr r2, 8007850 <lsm6dsr_fsm_data_rate_get+0x4c>)
 800784c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007850:	08007861 	.word	0x08007861
 8007854:	08007869 	.word	0x08007869
 8007858:	08007871 	.word	0x08007871
 800785c:	08007879 	.word	0x08007879
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2200      	movs	r2, #0
 8007864:	701a      	strb	r2, [r3, #0]
      break;
 8007866:	e00f      	b.n	8007888 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2201      	movs	r2, #1
 800786c:	701a      	strb	r2, [r3, #0]
      break;
 800786e:	e00b      	b.n	8007888 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2202      	movs	r2, #2
 8007874:	701a      	strb	r2, [r3, #0]
      break;
 8007876:	e007      	b.n	8007888 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2203      	movs	r2, #3
 800787c:	701a      	strb	r2, [r3, #0]
      break;
 800787e:	e003      	b.n	8007888 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2200      	movs	r2, #0
 8007884:	701a      	strb	r2, [r3, #0]
      break;
 8007886:	bf00      	nop
  }

  return ret;
 8007888:	68fb      	ldr	r3, [r7, #12]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop

08007894 <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef sDate = {0};
RTC_AlarmTypeDef sAlarm = {0};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 800789c:	f04f 33ff 	mov.w	r3, #4294967295
 80078a0:	2208      	movs	r2, #8
 80078a2:	4905      	ldr	r1, [pc, #20]	; (80078b8 <HAL_RTC_AlarmAEventCallback+0x24>)
 80078a4:	4805      	ldr	r0, [pc, #20]	; (80078bc <HAL_RTC_AlarmAEventCallback+0x28>)
 80078a6:	f005 f936 	bl	800cb16 <HAL_UART_Transmit>
	flagA = 1;
 80078aa:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80078ac:	2201      	movs	r2, #1
 80078ae:	701a      	strb	r2, [r3, #0]
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	080183d0 	.word	0x080183d0
 80078bc:	200060f4 	.word	0x200060f4
 80078c0:	2000050c 	.word	0x2000050c

080078c4 <MRT_SetupRTOS>:
}




void MRT_SetupRTOS(UART_HandleTypeDef uart,uint8_t sleepT){
 80078c4:	b084      	sub	sp, #16
 80078c6:	b580      	push	{r7, lr}
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	f107 0c08 	add.w	ip, r7, #8
 80078ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	rtos.huart = uart;
 80078d2:	4b0e      	ldr	r3, [pc, #56]	; (800790c <MRT_SetupRTOS+0x48>)
 80078d4:	4618      	mov	r0, r3
 80078d6:	f107 0308 	add.w	r3, r7, #8
 80078da:	2244      	movs	r2, #68	; 0x44
 80078dc:	4619      	mov	r1, r3
 80078de:	f009 fa55 	bl	8010d8c <memcpy>
	rtos.sleepTime = sleepT;
 80078e2:	4a0a      	ldr	r2, [pc, #40]	; (800790c <MRT_SetupRTOS+0x48>)
 80078e4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80078e8:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 80078ec:	f04f 33ff 	mov.w	r3, #4294967295
 80078f0:	2211      	movs	r2, #17
 80078f2:	4907      	ldr	r1, [pc, #28]	; (8007910 <MRT_SetupRTOS+0x4c>)
 80078f4:	4805      	ldr	r0, [pc, #20]	; (800790c <MRT_SetupRTOS+0x48>)
 80078f6:	f005 f90e 	bl	800cb16 <HAL_UART_Transmit>
	MRT_WUProcedure();
 80078fa:	f000 f80b 	bl	8007914 <MRT_WUProcedure>
}
 80078fe:	bf00      	nop
 8007900:	46bd      	mov	sp, r7
 8007902:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007906:	b004      	add	sp, #16
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	200060f4 	.word	0x200060f4
 8007910:	080183e8 	.word	0x080183e8

08007914 <MRT_WUProcedure>:



void MRT_WUProcedure(void){
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800791a:	4b14      	ldr	r3, [pc, #80]	; (800796c <MRT_WUProcedure+0x58>)
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b02      	cmp	r3, #2
 8007924:	d11c      	bne.n	8007960 <MRT_WUProcedure+0x4c>
	{

		wu_flag = 1;
 8007926:	4b12      	ldr	r3, [pc, #72]	; (8007970 <MRT_WUProcedure+0x5c>)
 8007928:	2201      	movs	r2, #1
 800792a:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800792c:	4b0f      	ldr	r3, [pc, #60]	; (800796c <MRT_WUProcedure+0x58>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a0e      	ldr	r2, [pc, #56]	; (800796c <MRT_WUProcedure+0x58>)
 8007932:	f043 0308 	orr.w	r3, r3, #8
 8007936:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 8007938:	4b0e      	ldr	r3, [pc, #56]	; (8007974 <MRT_WUProcedure+0x60>)
 800793a:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7f8 fc61 	bl	8000204 <strlen>
 8007942:	4603      	mov	r3, r0
 8007944:	b29a      	uxth	r2, r3
 8007946:	f04f 33ff 	mov.w	r3, #4294967295
 800794a:	6879      	ldr	r1, [r7, #4]
 800794c:	480a      	ldr	r0, [pc, #40]	; (8007978 <MRT_WUProcedure+0x64>)
 800794e:	f005 f8e2 	bl	800cb16 <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8007952:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007956:	f002 f89d 	bl	8009a94 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800795a:	4808      	ldr	r0, [pc, #32]	; (800797c <MRT_WUProcedure+0x68>)
 800795c:	f003 fc98 	bl	800b290 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 8007960:	f000 f80e 	bl	8007980 <MRT_ClearFlags>
}
 8007964:	bf00      	nop
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	40007000 	.word	0x40007000
 8007970:	2000050d 	.word	0x2000050d
 8007974:	080183fc 	.word	0x080183fc
 8007978:	200060f4 	.word	0x200060f4
 800797c:	20005e10 	.word	0x20005e10

08007980 <MRT_ClearFlags>:


void MRT_ClearFlags(void){
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 8007984:	f04f 33ff 	mov.w	r3, #4294967295
 8007988:	2214      	movs	r2, #20
 800798a:	4932      	ldr	r1, [pc, #200]	; (8007a54 <MRT_ClearFlags+0xd4>)
 800798c:	4832      	ldr	r0, [pc, #200]	; (8007a58 <MRT_ClearFlags+0xd8>)
 800798e:	f005 f8c2 	bl	800cb16 <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8007992:	4b32      	ldr	r3, [pc, #200]	; (8007a5c <MRT_ClearFlags+0xdc>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	22ca      	movs	r2, #202	; 0xca
 8007998:	625a      	str	r2, [r3, #36]	; 0x24
 800799a:	4b30      	ldr	r3, [pc, #192]	; (8007a5c <MRT_ClearFlags+0xdc>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2253      	movs	r2, #83	; 0x53
 80079a0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80079a2:	e00f      	b.n	80079c4 <MRT_ClearFlags+0x44>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 80079a4:	f04f 33ff 	mov.w	r3, #4294967295
 80079a8:	2217      	movs	r2, #23
 80079aa:	492d      	ldr	r1, [pc, #180]	; (8007a60 <MRT_ClearFlags+0xe0>)
 80079ac:	482a      	ldr	r0, [pc, #168]	; (8007a58 <MRT_ClearFlags+0xd8>)
 80079ae:	f005 f8b2 	bl	800cb16 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80079b2:	4b2a      	ldr	r3, [pc, #168]	; (8007a5c <MRT_ClearFlags+0xdc>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	4b28      	ldr	r3, [pc, #160]	; (8007a5c <MRT_ClearFlags+0xdc>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80079c2:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80079c4:	4b25      	ldr	r3, [pc, #148]	; (8007a5c <MRT_ClearFlags+0xdc>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e8      	bne.n	80079a4 <MRT_ClearFlags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80079d2:	4b22      	ldr	r3, [pc, #136]	; (8007a5c <MRT_ClearFlags+0xdc>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	22ff      	movs	r2, #255	; 0xff
 80079d8:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80079da:	4b22      	ldr	r3, [pc, #136]	; (8007a64 <MRT_ClearFlags+0xe4>)
 80079dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80079e0:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80079e2:	4b1e      	ldr	r3, [pc, #120]	; (8007a5c <MRT_ClearFlags+0xdc>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	22ca      	movs	r2, #202	; 0xca
 80079e8:	625a      	str	r2, [r3, #36]	; 0x24
 80079ea:	4b1c      	ldr	r3, [pc, #112]	; (8007a5c <MRT_ClearFlags+0xdc>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2253      	movs	r2, #83	; 0x53
 80079f0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80079f2:	e00f      	b.n	8007a14 <MRT_ClearFlags+0x94>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 80079f4:	f04f 33ff 	mov.w	r3, #4294967295
 80079f8:	2217      	movs	r2, #23
 80079fa:	491b      	ldr	r1, [pc, #108]	; (8007a68 <MRT_ClearFlags+0xe8>)
 80079fc:	4816      	ldr	r0, [pc, #88]	; (8007a58 <MRT_ClearFlags+0xd8>)
 80079fe:	f005 f88a 	bl	800cb16 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8007a02:	4b16      	ldr	r3, [pc, #88]	; (8007a5c <MRT_ClearFlags+0xdc>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	4b14      	ldr	r3, [pc, #80]	; (8007a5c <MRT_ClearFlags+0xdc>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007a12:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8007a14:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <MRT_ClearFlags+0xdc>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e8      	bne.n	80079f4 <MRT_ClearFlags+0x74>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8007a22:	4b0e      	ldr	r3, [pc, #56]	; (8007a5c <MRT_ClearFlags+0xdc>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	22ff      	movs	r2, #255	; 0xff
 8007a28:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007a2a:	4b0e      	ldr	r3, [pc, #56]	; (8007a64 <MRT_ClearFlags+0xe4>)
 8007a2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a30:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8007a32:	4b0e      	ldr	r3, [pc, #56]	; (8007a6c <MRT_ClearFlags+0xec>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a0d      	ldr	r2, [pc, #52]	; (8007a6c <MRT_ClearFlags+0xec>)
 8007a38:	f043 0304 	orr.w	r3, r3, #4
 8007a3c:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8007a3e:	4b07      	ldr	r3, [pc, #28]	; (8007a5c <MRT_ClearFlags+0xdc>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <MRT_ClearFlags+0xdc>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007a4e:	60da      	str	r2, [r3, #12]
}
 8007a50:	bf00      	nop
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	0801841c 	.word	0x0801841c
 8007a58:	200060f4 	.word	0x200060f4
 8007a5c:	20005e10 	.word	0x20005e10
 8007a60:	08018434 	.word	0x08018434
 8007a64:	40013c00 	.word	0x40013c00
 8007a68:	0801844c 	.word	0x0801844c
 8007a6c:	40007000 	.word	0x40007000

08007a70 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b0a4      	sub	sp, #144	; 0x90
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 8007a78:	f04f 33ff 	mov.w	r3, #4294967295
 8007a7c:	220f      	movs	r2, #15
 8007a7e:	491b      	ldr	r1, [pc, #108]	; (8007aec <MRT_StandByMode+0x7c>)
 8007a80:	481b      	ldr	r0, [pc, #108]	; (8007af0 <MRT_StandByMode+0x80>)
 8007a82:	f005 f848 	bl	800cb16 <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8007a86:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007a8a:	f001 fff1 	bl	8009a70 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 8007a8e:	f7ff ff77 	bl	8007980 <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 8007a92:	f04f 33ff 	mov.w	r3, #4294967295
 8007a96:	2211      	movs	r2, #17
 8007a98:	4916      	ldr	r1, [pc, #88]	; (8007af4 <MRT_StandByMode+0x84>)
 8007a9a:	4815      	ldr	r0, [pc, #84]	; (8007af0 <MRT_StandByMode+0x80>)
 8007a9c:	f005 f83b 	bl	800cb16 <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 8007aa0:	f107 0308 	add.w	r3, r7, #8
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	4914      	ldr	r1, [pc, #80]	; (8007af8 <MRT_StandByMode+0x88>)
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f00a fc93 	bl	80123d4 <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 8007aae:	f107 0308 	add.w	r3, r7, #8
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7f8 fba6 	bl	8000204 <strlen>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	f107 0108 	add.w	r1, r7, #8
 8007ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac4:	480a      	ldr	r0, [pc, #40]	; (8007af0 <MRT_StandByMode+0x80>)
 8007ac6:	f005 f826 	bl	800cb16 <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8007aca:	2204      	movs	r2, #4
 8007acc:	6879      	ldr	r1, [r7, #4]
 8007ace:	480b      	ldr	r0, [pc, #44]	; (8007afc <MRT_StandByMode+0x8c>)
 8007ad0:	f003 fb1e 	bl	800b110 <HAL_RTCEx_SetWakeUpTimer_IT>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <MRT_StandByMode+0x6e>
	{
	  Error_Handler();
 8007ada:	f7fa ff01 	bl	80028e0 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8007ade:	f001 ffed 	bl	8009abc <HAL_PWR_EnterSTANDBYMode>
}
 8007ae2:	bf00      	nop
 8007ae4:	3790      	adds	r7, #144	; 0x90
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	08018464 	.word	0x08018464
 8007af0:	200060f4 	.word	0x200060f4
 8007af4:	08018474 	.word	0x08018474
 8007af8:	08018488 	.word	0x08018488
 8007afc:	20005e10 	.word	0x20005e10

08007b00 <MRT_setAlarmA>:
	  }
}



void MRT_setAlarmA(uint8_t h, uint8_t m, uint8_t s){
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	71fb      	strb	r3, [r7, #7]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	71bb      	strb	r3, [r7, #6]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = h;
 8007b12:	4a18      	ldr	r2, [pc, #96]	; (8007b74 <MRT_setAlarmA+0x74>)
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	7013      	strb	r3, [r2, #0]
	  sAlarm.AlarmTime.Minutes = m;
 8007b18:	4a16      	ldr	r2, [pc, #88]	; (8007b74 <MRT_setAlarmA+0x74>)
 8007b1a:	79bb      	ldrb	r3, [r7, #6]
 8007b1c:	7053      	strb	r3, [r2, #1]
	  sAlarm.AlarmTime.Seconds = s;
 8007b1e:	4a15      	ldr	r2, [pc, #84]	; (8007b74 <MRT_setAlarmA+0x74>)
 8007b20:	797b      	ldrb	r3, [r7, #5]
 8007b22:	7093      	strb	r3, [r2, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8007b24:	4b13      	ldr	r3, [pc, #76]	; (8007b74 <MRT_setAlarmA+0x74>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007b2a:	4b12      	ldr	r3, [pc, #72]	; (8007b74 <MRT_setAlarmA+0x74>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007b30:	4b10      	ldr	r3, [pc, #64]	; (8007b74 <MRT_setAlarmA+0x74>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8007b36:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <MRT_setAlarmA+0x74>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8007b3c:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <MRT_setAlarmA+0x74>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8007b42:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <MRT_setAlarmA+0x74>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8007b48:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <MRT_setAlarmA+0x74>)
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8007b50:	4b08      	ldr	r3, [pc, #32]	; (8007b74 <MRT_setAlarmA+0x74>)
 8007b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b56:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8007b58:	2201      	movs	r2, #1
 8007b5a:	4906      	ldr	r1, [pc, #24]	; (8007b74 <MRT_setAlarmA+0x74>)
 8007b5c:	4806      	ldr	r0, [pc, #24]	; (8007b78 <MRT_setAlarmA+0x78>)
 8007b5e:	f003 f8c9 	bl	800acf4 <HAL_RTC_SetAlarm_IT>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <MRT_setAlarmA+0x6c>
	  {
	    Error_Handler();
 8007b68:	f7fa feba 	bl	80028e0 <Error_Handler>
	  }
}
 8007b6c:	bf00      	nop
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	20000528 	.word	0x20000528
 8007b78:	20005e10 	.word	0x20005e10

08007b7c <MRT_setRTC>:


void MRT_setRTC(uint8_t h, uint8_t m, uint8_t s){
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	71fb      	strb	r3, [r7, #7]
 8007b86:	460b      	mov	r3, r1
 8007b88:	71bb      	strb	r3, [r7, #6]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = h;
 8007b8e:	4a19      	ldr	r2, [pc, #100]	; (8007bf4 <MRT_setRTC+0x78>)
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	7013      	strb	r3, [r2, #0]
	  sTime.Minutes = m;
 8007b94:	4a17      	ldr	r2, [pc, #92]	; (8007bf4 <MRT_setRTC+0x78>)
 8007b96:	79bb      	ldrb	r3, [r7, #6]
 8007b98:	7053      	strb	r3, [r2, #1]
	  sTime.Seconds = s;
 8007b9a:	4a16      	ldr	r2, [pc, #88]	; (8007bf4 <MRT_setRTC+0x78>)
 8007b9c:	797b      	ldrb	r3, [r7, #5]
 8007b9e:	7093      	strb	r3, [r2, #2]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007ba0:	4b14      	ldr	r3, [pc, #80]	; (8007bf4 <MRT_setRTC+0x78>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007ba6:	4b13      	ldr	r3, [pc, #76]	; (8007bf4 <MRT_setRTC+0x78>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	611a      	str	r2, [r3, #16]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007bac:	2201      	movs	r2, #1
 8007bae:	4911      	ldr	r1, [pc, #68]	; (8007bf4 <MRT_setRTC+0x78>)
 8007bb0:	4811      	ldr	r0, [pc, #68]	; (8007bf8 <MRT_setRTC+0x7c>)
 8007bb2:	f002 fe8e 	bl	800a8d2 <HAL_RTC_SetTime>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <MRT_setRTC+0x44>
	  {
	    Error_Handler();
 8007bbc:	f7fa fe90 	bl	80028e0 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007bc0:	4b0e      	ldr	r3, [pc, #56]	; (8007bfc <MRT_setRTC+0x80>)
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8007bc6:	4b0d      	ldr	r3, [pc, #52]	; (8007bfc <MRT_setRTC+0x80>)
 8007bc8:	2201      	movs	r2, #1
 8007bca:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8007bcc:	4b0b      	ldr	r3, [pc, #44]	; (8007bfc <MRT_setRTC+0x80>)
 8007bce:	2201      	movs	r2, #1
 8007bd0:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8007bd2:	4b0a      	ldr	r3, [pc, #40]	; (8007bfc <MRT_setRTC+0x80>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8007bd8:	2201      	movs	r2, #1
 8007bda:	4908      	ldr	r1, [pc, #32]	; (8007bfc <MRT_setRTC+0x80>)
 8007bdc:	4806      	ldr	r0, [pc, #24]	; (8007bf8 <MRT_setRTC+0x7c>)
 8007bde:	f002 ff93 	bl	800ab08 <HAL_RTC_SetDate>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <MRT_setRTC+0x70>
	  {
	    Error_Handler();
 8007be8:	f7fa fe7a 	bl	80028e0 <Error_Handler>
	  }
}
 8007bec:	bf00      	nop
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	20000510 	.word	0x20000510
 8007bf8:	20005e10 	.word	0x20005e10
 8007bfc:	20000524 	.word	0x20000524

08007c00 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
void Max31855_Read_Temp(void) {
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8007c06:	2300      	movs	r3, #0
 8007c08:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c10:	483f      	ldr	r0, [pc, #252]	; (8007d10 <Max31855_Read_Temp+0x110>)
 8007c12:	f000 fe39 	bl	8008888 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8007c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	493d      	ldr	r1, [pc, #244]	; (8007d14 <Max31855_Read_Temp+0x114>)
 8007c1e:	483e      	ldr	r0, [pc, #248]	; (8007d18 <Max31855_Read_Temp+0x118>)
 8007c20:	f003 fd5d 	bl	800b6de <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8007c24:	2201      	movs	r2, #1
 8007c26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c2a:	4839      	ldr	r0, [pc, #228]	; (8007d10 <Max31855_Read_Temp+0x110>)
 8007c2c:	f000 fe2c 	bl	8008888 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8007c30:	4b38      	ldr	r3, [pc, #224]	; (8007d14 <Max31855_Read_Temp+0x114>)
 8007c32:	78db      	ldrb	r3, [r3, #3]
 8007c34:	461a      	mov	r2, r3
 8007c36:	4b37      	ldr	r3, [pc, #220]	; (8007d14 <Max31855_Read_Temp+0x114>)
 8007c38:	789b      	ldrb	r3, [r3, #2]
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	431a      	orrs	r2, r3
 8007c3e:	4b35      	ldr	r3, [pc, #212]	; (8007d14 <Max31855_Read_Temp+0x114>)
 8007c40:	785b      	ldrb	r3, [r3, #1]
 8007c42:	041b      	lsls	r3, r3, #16
 8007c44:	431a      	orrs	r2, r3
 8007c46:	4b33      	ldr	r3, [pc, #204]	; (8007d14 <Max31855_Read_Temp+0x114>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	061b      	lsls	r3, r3, #24
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	f003 0307 	and.w	r3, r3, #7
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	4b30      	ldr	r3, [pc, #192]	; (8007d1c <Max31855_Read_Temp+0x11c>)
 8007c5c:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8007c5e:	4b2d      	ldr	r3, [pc, #180]	; (8007d14 <Max31855_Read_Temp+0x114>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	09db      	lsrs	r3, r3, #7
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	461a      	mov	r2, r3
 8007c68:	4b2d      	ldr	r3, [pc, #180]	; (8007d20 <Max31855_Read_Temp+0x120>)
 8007c6a:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8007c6c:	4b29      	ldr	r3, [pc, #164]	; (8007d14 <Max31855_Read_Temp+0x114>)
 8007c6e:	78db      	ldrb	r3, [r3, #3]
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00c      	beq.n	8007c92 <Max31855_Read_Temp+0x92>
			THERMO_TEMP = (-1 * (DATARX[3] & 0x07));
 8007c78:	4b26      	ldr	r3, [pc, #152]	; (8007d14 <Max31855_Read_Temp+0x114>)
 8007c7a:	78db      	ldrb	r3, [r3, #3]
 8007c7c:	f003 0307 	and.w	r3, r3, #7
 8007c80:	425b      	negs	r3, r3
 8007c82:	ee07 3a90 	vmov	s15, r3
 8007c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c8a:	4b26      	ldr	r3, [pc, #152]	; (8007d24 <Max31855_Read_Temp+0x124>)
 8007c8c:	edc3 7a00 	vstr	s15, [r3]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8007c90:	e039      	b.n	8007d06 <Max31855_Read_Temp+0x106>
		else if (sign == 1) {								// Negative Temperature
 8007c92:	4b23      	ldr	r3, [pc, #140]	; (8007d20 <Max31855_Read_Temp+0x120>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d120      	bne.n	8007cdc <Max31855_Read_Temp+0xdc>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8007c9a:	4b1e      	ldr	r3, [pc, #120]	; (8007d14 <Max31855_Read_Temp+0x114>)
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	019b      	lsls	r3, r3, #6
 8007ca0:	4a1c      	ldr	r2, [pc, #112]	; (8007d14 <Max31855_Read_Temp+0x114>)
 8007ca2:	7852      	ldrb	r2, [r2, #1]
 8007ca4:	0892      	lsrs	r2, r2, #2
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cb2:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8007cba:	f083 031f 	eor.w	r3, r3, #31
 8007cbe:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) -Temp / 4);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	425b      	negs	r3, r3
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ccc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007cd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007cd4:	4b13      	ldr	r3, [pc, #76]	; (8007d24 <Max31855_Read_Temp+0x124>)
 8007cd6:	edc3 7a00 	vstr	s15, [r3]
}
 8007cda:	e014      	b.n	8007d06 <Max31855_Read_Temp+0x106>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8007cdc:	4b0d      	ldr	r3, [pc, #52]	; (8007d14 <Max31855_Read_Temp+0x114>)
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	019b      	lsls	r3, r3, #6
 8007ce2:	4a0c      	ldr	r2, [pc, #48]	; (8007d14 <Max31855_Read_Temp+0x114>)
 8007ce4:	7852      	ldrb	r2, [r2, #1]
 8007ce6:	0892      	lsrs	r2, r2, #2
 8007ce8:	b2d2      	uxtb	r2, r2
 8007cea:	4313      	orrs	r3, r2
 8007cec:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) Temp / 4.0);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	ee07 3a90 	vmov	s15, r3
 8007cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cf8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007cfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007d00:	4b08      	ldr	r3, [pc, #32]	; (8007d24 <Max31855_Read_Temp+0x124>)
 8007d02:	edc3 7a00 	vstr	s15, [r3]
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	40021000 	.word	0x40021000
 8007d14:	2000613c 	.word	0x2000613c
 8007d18:	20005db8 	.word	0x20005db8
 8007d1c:	20000550 	.word	0x20000550
 8007d20:	20000554 	.word	0x20000554
 8007d24:	20005f3c 	.word	0x20005f3c

08007d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007d2c:	4b0e      	ldr	r3, [pc, #56]	; (8007d68 <HAL_Init+0x40>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a0d      	ldr	r2, [pc, #52]	; (8007d68 <HAL_Init+0x40>)
 8007d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007d38:	4b0b      	ldr	r3, [pc, #44]	; (8007d68 <HAL_Init+0x40>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a0a      	ldr	r2, [pc, #40]	; (8007d68 <HAL_Init+0x40>)
 8007d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d44:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <HAL_Init+0x40>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a07      	ldr	r2, [pc, #28]	; (8007d68 <HAL_Init+0x40>)
 8007d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d50:	2003      	movs	r0, #3
 8007d52:	f000 fb92 	bl	800847a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007d56:	2000      	movs	r0, #0
 8007d58:	f7fb f904 	bl	8002f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007d5c:	f7fa fdc8 	bl	80028f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	40023c00 	.word	0x40023c00

08007d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007d70:	4b06      	ldr	r3, [pc, #24]	; (8007d8c <HAL_IncTick+0x20>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	4b06      	ldr	r3, [pc, #24]	; (8007d90 <HAL_IncTick+0x24>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	4a04      	ldr	r2, [pc, #16]	; (8007d90 <HAL_IncTick+0x24>)
 8007d7e:	6013      	str	r3, [r2, #0]
}
 8007d80:	bf00      	nop
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	20000018 	.word	0x20000018
 8007d90:	20006140 	.word	0x20006140

08007d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d94:	b480      	push	{r7}
 8007d96:	af00      	add	r7, sp, #0
  return uwTick;
 8007d98:	4b03      	ldr	r3, [pc, #12]	; (8007da8 <HAL_GetTick+0x14>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	20006140 	.word	0x20006140

08007dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007db4:	f7ff ffee 	bl	8007d94 <HAL_GetTick>
 8007db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc4:	d005      	beq.n	8007dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007dc6:	4b0a      	ldr	r3, [pc, #40]	; (8007df0 <HAL_Delay+0x44>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007dd2:	bf00      	nop
 8007dd4:	f7ff ffde 	bl	8007d94 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d8f7      	bhi.n	8007dd4 <HAL_Delay+0x28>
  {
  }
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000018 	.word	0x20000018

08007df4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e033      	b.n	8007e72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d109      	bne.n	8007e26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7fa fd98 	bl	8002948 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2a:	f003 0310 	and.w	r3, r3, #16
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d118      	bne.n	8007e64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007e3a:	f023 0302 	bic.w	r3, r3, #2
 8007e3e:	f043 0202 	orr.w	r2, r3, #2
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f94a 	bl	80080e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	f023 0303 	bic.w	r3, r3, #3
 8007e5a:	f043 0201 	orr.w	r2, r3, #1
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	641a      	str	r2, [r3, #64]	; 0x40
 8007e62:	e001      	b.n	8007e68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_ADC_ConfigChannel+0x1c>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e113      	b.n	80080c0 <HAL_ADC_ConfigChannel+0x244>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b09      	cmp	r3, #9
 8007ea6:	d925      	bls.n	8007ef4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68d9      	ldr	r1, [r3, #12]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	4413      	add	r3, r2
 8007ebc:	3b1e      	subs	r3, #30
 8007ebe:	2207      	movs	r2, #7
 8007ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec4:	43da      	mvns	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	400a      	ands	r2, r1
 8007ecc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68d9      	ldr	r1, [r3, #12]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	4618      	mov	r0, r3
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	4403      	add	r3, r0
 8007ee6:	3b1e      	subs	r3, #30
 8007ee8:	409a      	lsls	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	60da      	str	r2, [r3, #12]
 8007ef2:	e022      	b.n	8007f3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6919      	ldr	r1, [r3, #16]
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	461a      	mov	r2, r3
 8007f02:	4613      	mov	r3, r2
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	4413      	add	r3, r2
 8007f08:	2207      	movs	r2, #7
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	43da      	mvns	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	400a      	ands	r2, r1
 8007f16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6919      	ldr	r1, [r3, #16]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	689a      	ldr	r2, [r3, #8]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	4618      	mov	r0, r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	4403      	add	r3, r0
 8007f30:	409a      	lsls	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	2b06      	cmp	r3, #6
 8007f40:	d824      	bhi.n	8007f8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	3b05      	subs	r3, #5
 8007f54:	221f      	movs	r2, #31
 8007f56:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5a:	43da      	mvns	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	400a      	ands	r2, r1
 8007f62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	4618      	mov	r0, r3
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	4613      	mov	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	3b05      	subs	r3, #5
 8007f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	635a      	str	r2, [r3, #52]	; 0x34
 8007f8a:	e04c      	b.n	8008026 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	2b0c      	cmp	r3, #12
 8007f92:	d824      	bhi.n	8007fde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	3b23      	subs	r3, #35	; 0x23
 8007fa6:	221f      	movs	r2, #31
 8007fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fac:	43da      	mvns	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	400a      	ands	r2, r1
 8007fb4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	3b23      	subs	r3, #35	; 0x23
 8007fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	631a      	str	r2, [r3, #48]	; 0x30
 8007fdc:	e023      	b.n	8008026 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	3b41      	subs	r3, #65	; 0x41
 8007ff0:	221f      	movs	r2, #31
 8007ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff6:	43da      	mvns	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	400a      	ands	r2, r1
 8007ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	b29b      	uxth	r3, r3
 800800c:	4618      	mov	r0, r3
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	4613      	mov	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	3b41      	subs	r3, #65	; 0x41
 800801a:	fa00 f203 	lsl.w	r2, r0, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008026:	4b29      	ldr	r3, [pc, #164]	; (80080cc <HAL_ADC_ConfigChannel+0x250>)
 8008028:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a28      	ldr	r2, [pc, #160]	; (80080d0 <HAL_ADC_ConfigChannel+0x254>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d10f      	bne.n	8008054 <HAL_ADC_ConfigChannel+0x1d8>
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b12      	cmp	r3, #18
 800803a:	d10b      	bne.n	8008054 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a1d      	ldr	r2, [pc, #116]	; (80080d0 <HAL_ADC_ConfigChannel+0x254>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d12b      	bne.n	80080b6 <HAL_ADC_ConfigChannel+0x23a>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a1c      	ldr	r2, [pc, #112]	; (80080d4 <HAL_ADC_ConfigChannel+0x258>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d003      	beq.n	8008070 <HAL_ADC_ConfigChannel+0x1f4>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b11      	cmp	r3, #17
 800806e:	d122      	bne.n	80080b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a11      	ldr	r2, [pc, #68]	; (80080d4 <HAL_ADC_ConfigChannel+0x258>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d111      	bne.n	80080b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008092:	4b11      	ldr	r3, [pc, #68]	; (80080d8 <HAL_ADC_ConfigChannel+0x25c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a11      	ldr	r2, [pc, #68]	; (80080dc <HAL_ADC_ConfigChannel+0x260>)
 8008098:	fba2 2303 	umull	r2, r3, r2, r3
 800809c:	0c9a      	lsrs	r2, r3, #18
 800809e:	4613      	mov	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80080a8:	e002      	b.n	80080b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1f9      	bne.n	80080aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	40012300 	.word	0x40012300
 80080d0:	40012000 	.word	0x40012000
 80080d4:	10000012 	.word	0x10000012
 80080d8:	20000004 	.word	0x20000004
 80080dc:	431bde83 	.word	0x431bde83

080080e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80080e8:	4b79      	ldr	r3, [pc, #484]	; (80082d0 <ADC_Init+0x1f0>)
 80080ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	431a      	orrs	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6859      	ldr	r1, [r3, #4]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	021a      	lsls	r2, r3, #8
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	430a      	orrs	r2, r1
 8008128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	6859      	ldr	r1, [r3, #4]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800815a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6899      	ldr	r1, [r3, #8]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	430a      	orrs	r2, r1
 800816c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008172:	4a58      	ldr	r2, [pc, #352]	; (80082d4 <ADC_Init+0x1f4>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d022      	beq.n	80081be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008186:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6899      	ldr	r1, [r3, #8]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80081a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6899      	ldr	r1, [r3, #8]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	609a      	str	r2, [r3, #8]
 80081bc:	e00f      	b.n	80081de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689a      	ldr	r2, [r3, #8]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80081cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689a      	ldr	r2, [r3, #8]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80081dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 0202 	bic.w	r2, r2, #2
 80081ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6899      	ldr	r1, [r3, #8]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	7e1b      	ldrb	r3, [r3, #24]
 80081f8:	005a      	lsls	r2, r3, #1
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01b      	beq.n	8008244 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685a      	ldr	r2, [r3, #4]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800821a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800822a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6859      	ldr	r1, [r3, #4]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	3b01      	subs	r3, #1
 8008238:	035a      	lsls	r2, r3, #13
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	605a      	str	r2, [r3, #4]
 8008242:	e007      	b.n	8008254 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008252:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008262:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	3b01      	subs	r3, #1
 8008270:	051a      	lsls	r2, r3, #20
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6899      	ldr	r1, [r3, #8]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008296:	025a      	lsls	r2, r3, #9
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6899      	ldr	r1, [r3, #8]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	029a      	lsls	r2, r3, #10
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	609a      	str	r2, [r3, #8]
}
 80082c4:	bf00      	nop
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	40012300 	.word	0x40012300
 80082d4:	0f000001 	.word	0x0f000001

080082d8 <__NVIC_SetPriorityGrouping>:
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80082e8:	4b0c      	ldr	r3, [pc, #48]	; (800831c <__NVIC_SetPriorityGrouping+0x44>)
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80082f4:	4013      	ands	r3, r2
 80082f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800830a:	4a04      	ldr	r2, [pc, #16]	; (800831c <__NVIC_SetPriorityGrouping+0x44>)
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	60d3      	str	r3, [r2, #12]
}
 8008310:	bf00      	nop
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	e000ed00 	.word	0xe000ed00

08008320 <__NVIC_GetPriorityGrouping>:
{
 8008320:	b480      	push	{r7}
 8008322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008324:	4b04      	ldr	r3, [pc, #16]	; (8008338 <__NVIC_GetPriorityGrouping+0x18>)
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	0a1b      	lsrs	r3, r3, #8
 800832a:	f003 0307 	and.w	r3, r3, #7
}
 800832e:	4618      	mov	r0, r3
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	e000ed00 	.word	0xe000ed00

0800833c <__NVIC_EnableIRQ>:
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800834a:	2b00      	cmp	r3, #0
 800834c:	db0b      	blt.n	8008366 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800834e:	79fb      	ldrb	r3, [r7, #7]
 8008350:	f003 021f 	and.w	r2, r3, #31
 8008354:	4907      	ldr	r1, [pc, #28]	; (8008374 <__NVIC_EnableIRQ+0x38>)
 8008356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800835a:	095b      	lsrs	r3, r3, #5
 800835c:	2001      	movs	r0, #1
 800835e:	fa00 f202 	lsl.w	r2, r0, r2
 8008362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008366:	bf00      	nop
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	e000e100 	.word	0xe000e100

08008378 <__NVIC_DisableIRQ>:
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008386:	2b00      	cmp	r3, #0
 8008388:	db12      	blt.n	80083b0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	f003 021f 	and.w	r2, r3, #31
 8008390:	490a      	ldr	r1, [pc, #40]	; (80083bc <__NVIC_DisableIRQ+0x44>)
 8008392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008396:	095b      	lsrs	r3, r3, #5
 8008398:	2001      	movs	r0, #1
 800839a:	fa00 f202 	lsl.w	r2, r0, r2
 800839e:	3320      	adds	r3, #32
 80083a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80083a4:	f3bf 8f4f 	dsb	sy
}
 80083a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80083aa:	f3bf 8f6f 	isb	sy
}
 80083ae:	bf00      	nop
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	e000e100 	.word	0xe000e100

080083c0 <__NVIC_SetPriority>:
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	6039      	str	r1, [r7, #0]
 80083ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	db0a      	blt.n	80083ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	490c      	ldr	r1, [pc, #48]	; (800840c <__NVIC_SetPriority+0x4c>)
 80083da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083de:	0112      	lsls	r2, r2, #4
 80083e0:	b2d2      	uxtb	r2, r2
 80083e2:	440b      	add	r3, r1
 80083e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80083e8:	e00a      	b.n	8008400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	4908      	ldr	r1, [pc, #32]	; (8008410 <__NVIC_SetPriority+0x50>)
 80083f0:	79fb      	ldrb	r3, [r7, #7]
 80083f2:	f003 030f 	and.w	r3, r3, #15
 80083f6:	3b04      	subs	r3, #4
 80083f8:	0112      	lsls	r2, r2, #4
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	440b      	add	r3, r1
 80083fe:	761a      	strb	r2, [r3, #24]
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	e000e100 	.word	0xe000e100
 8008410:	e000ed00 	.word	0xe000ed00

08008414 <NVIC_EncodePriority>:
{
 8008414:	b480      	push	{r7}
 8008416:	b089      	sub	sp, #36	; 0x24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	f1c3 0307 	rsb	r3, r3, #7
 800842e:	2b04      	cmp	r3, #4
 8008430:	bf28      	it	cs
 8008432:	2304      	movcs	r3, #4
 8008434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	3304      	adds	r3, #4
 800843a:	2b06      	cmp	r3, #6
 800843c:	d902      	bls.n	8008444 <NVIC_EncodePriority+0x30>
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	3b03      	subs	r3, #3
 8008442:	e000      	b.n	8008446 <NVIC_EncodePriority+0x32>
 8008444:	2300      	movs	r3, #0
 8008446:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008448:	f04f 32ff 	mov.w	r2, #4294967295
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	fa02 f303 	lsl.w	r3, r2, r3
 8008452:	43da      	mvns	r2, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	401a      	ands	r2, r3
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800845c:	f04f 31ff 	mov.w	r1, #4294967295
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	fa01 f303 	lsl.w	r3, r1, r3
 8008466:	43d9      	mvns	r1, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800846c:	4313      	orrs	r3, r2
}
 800846e:	4618      	mov	r0, r3
 8008470:	3724      	adds	r7, #36	; 0x24
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff ff28 	bl	80082d8 <__NVIC_SetPriorityGrouping>
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800849e:	2300      	movs	r3, #0
 80084a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80084a2:	f7ff ff3d 	bl	8008320 <__NVIC_GetPriorityGrouping>
 80084a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	6978      	ldr	r0, [r7, #20]
 80084ae:	f7ff ffb1 	bl	8008414 <NVIC_EncodePriority>
 80084b2:	4602      	mov	r2, r0
 80084b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084b8:	4611      	mov	r1, r2
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff ff80 	bl	80083c0 <__NVIC_SetPriority>
}
 80084c0:	bf00      	nop
 80084c2:	3718      	adds	r7, #24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	4603      	mov	r3, r0
 80084d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80084d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7ff ff30 	bl	800833c <__NVIC_EnableIRQ>
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	4603      	mov	r3, r0
 80084ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80084ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7ff ff40 	bl	8008378 <__NVIC_DisableIRQ>
}
 80084f8:	bf00      	nop
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008500:	b480      	push	{r7}
 8008502:	b089      	sub	sp, #36	; 0x24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800850a:	2300      	movs	r3, #0
 800850c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800850e:	2300      	movs	r3, #0
 8008510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008512:	2300      	movs	r3, #0
 8008514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008516:	2300      	movs	r3, #0
 8008518:	61fb      	str	r3, [r7, #28]
 800851a:	e177      	b.n	800880c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800851c:	2201      	movs	r2, #1
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	fa02 f303 	lsl.w	r3, r2, r3
 8008524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	4013      	ands	r3, r2
 800852e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	429a      	cmp	r2, r3
 8008536:	f040 8166 	bne.w	8008806 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f003 0303 	and.w	r3, r3, #3
 8008542:	2b01      	cmp	r3, #1
 8008544:	d005      	beq.n	8008552 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800854e:	2b02      	cmp	r3, #2
 8008550:	d130      	bne.n	80085b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	2203      	movs	r2, #3
 800855e:	fa02 f303 	lsl.w	r3, r2, r3
 8008562:	43db      	mvns	r3, r3
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	4013      	ands	r3, r2
 8008568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	fa02 f303 	lsl.w	r3, r2, r3
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	4313      	orrs	r3, r2
 800857a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	69ba      	ldr	r2, [r7, #24]
 8008580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008588:	2201      	movs	r2, #1
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	fa02 f303 	lsl.w	r3, r2, r3
 8008590:	43db      	mvns	r3, r3
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	4013      	ands	r3, r2
 8008596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	091b      	lsrs	r3, r3, #4
 800859e:	f003 0201 	and.w	r2, r3, #1
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	fa02 f303 	lsl.w	r3, r2, r3
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f003 0303 	and.w	r3, r3, #3
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d017      	beq.n	80085f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	005b      	lsls	r3, r3, #1
 80085ca:	2203      	movs	r2, #3
 80085cc:	fa02 f303 	lsl.w	r3, r2, r3
 80085d0:	43db      	mvns	r3, r3
 80085d2:	69ba      	ldr	r2, [r7, #24]
 80085d4:	4013      	ands	r3, r2
 80085d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	689a      	ldr	r2, [r3, #8]
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	005b      	lsls	r3, r3, #1
 80085e0:	fa02 f303 	lsl.w	r3, r2, r3
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f003 0303 	and.w	r3, r3, #3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d123      	bne.n	8008644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	08da      	lsrs	r2, r3, #3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	3208      	adds	r2, #8
 8008604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	f003 0307 	and.w	r3, r3, #7
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	220f      	movs	r2, #15
 8008614:	fa02 f303 	lsl.w	r3, r2, r3
 8008618:	43db      	mvns	r3, r3
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	4013      	ands	r3, r2
 800861e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	691a      	ldr	r2, [r3, #16]
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	fa02 f303 	lsl.w	r3, r2, r3
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	4313      	orrs	r3, r2
 8008634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	08da      	lsrs	r2, r3, #3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	3208      	adds	r2, #8
 800863e:	69b9      	ldr	r1, [r7, #24]
 8008640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	2203      	movs	r2, #3
 8008650:	fa02 f303 	lsl.w	r3, r2, r3
 8008654:	43db      	mvns	r3, r3
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	4013      	ands	r3, r2
 800865a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f003 0203 	and.w	r2, r3, #3
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	005b      	lsls	r3, r3, #1
 8008668:	fa02 f303 	lsl.w	r3, r2, r3
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	4313      	orrs	r3, r2
 8008670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 80c0 	beq.w	8008806 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
 800868a:	4b66      	ldr	r3, [pc, #408]	; (8008824 <HAL_GPIO_Init+0x324>)
 800868c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800868e:	4a65      	ldr	r2, [pc, #404]	; (8008824 <HAL_GPIO_Init+0x324>)
 8008690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008694:	6453      	str	r3, [r2, #68]	; 0x44
 8008696:	4b63      	ldr	r3, [pc, #396]	; (8008824 <HAL_GPIO_Init+0x324>)
 8008698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80086a2:	4a61      	ldr	r2, [pc, #388]	; (8008828 <HAL_GPIO_Init+0x328>)
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	089b      	lsrs	r3, r3, #2
 80086a8:	3302      	adds	r3, #2
 80086aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	f003 0303 	and.w	r3, r3, #3
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	220f      	movs	r2, #15
 80086ba:	fa02 f303 	lsl.w	r3, r2, r3
 80086be:	43db      	mvns	r3, r3
 80086c0:	69ba      	ldr	r2, [r7, #24]
 80086c2:	4013      	ands	r3, r2
 80086c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a58      	ldr	r2, [pc, #352]	; (800882c <HAL_GPIO_Init+0x32c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d037      	beq.n	800873e <HAL_GPIO_Init+0x23e>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a57      	ldr	r2, [pc, #348]	; (8008830 <HAL_GPIO_Init+0x330>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d031      	beq.n	800873a <HAL_GPIO_Init+0x23a>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a56      	ldr	r2, [pc, #344]	; (8008834 <HAL_GPIO_Init+0x334>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d02b      	beq.n	8008736 <HAL_GPIO_Init+0x236>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a55      	ldr	r2, [pc, #340]	; (8008838 <HAL_GPIO_Init+0x338>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d025      	beq.n	8008732 <HAL_GPIO_Init+0x232>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a54      	ldr	r2, [pc, #336]	; (800883c <HAL_GPIO_Init+0x33c>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d01f      	beq.n	800872e <HAL_GPIO_Init+0x22e>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a53      	ldr	r2, [pc, #332]	; (8008840 <HAL_GPIO_Init+0x340>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d019      	beq.n	800872a <HAL_GPIO_Init+0x22a>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a52      	ldr	r2, [pc, #328]	; (8008844 <HAL_GPIO_Init+0x344>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d013      	beq.n	8008726 <HAL_GPIO_Init+0x226>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a51      	ldr	r2, [pc, #324]	; (8008848 <HAL_GPIO_Init+0x348>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d00d      	beq.n	8008722 <HAL_GPIO_Init+0x222>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a50      	ldr	r2, [pc, #320]	; (800884c <HAL_GPIO_Init+0x34c>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d007      	beq.n	800871e <HAL_GPIO_Init+0x21e>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a4f      	ldr	r2, [pc, #316]	; (8008850 <HAL_GPIO_Init+0x350>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d101      	bne.n	800871a <HAL_GPIO_Init+0x21a>
 8008716:	2309      	movs	r3, #9
 8008718:	e012      	b.n	8008740 <HAL_GPIO_Init+0x240>
 800871a:	230a      	movs	r3, #10
 800871c:	e010      	b.n	8008740 <HAL_GPIO_Init+0x240>
 800871e:	2308      	movs	r3, #8
 8008720:	e00e      	b.n	8008740 <HAL_GPIO_Init+0x240>
 8008722:	2307      	movs	r3, #7
 8008724:	e00c      	b.n	8008740 <HAL_GPIO_Init+0x240>
 8008726:	2306      	movs	r3, #6
 8008728:	e00a      	b.n	8008740 <HAL_GPIO_Init+0x240>
 800872a:	2305      	movs	r3, #5
 800872c:	e008      	b.n	8008740 <HAL_GPIO_Init+0x240>
 800872e:	2304      	movs	r3, #4
 8008730:	e006      	b.n	8008740 <HAL_GPIO_Init+0x240>
 8008732:	2303      	movs	r3, #3
 8008734:	e004      	b.n	8008740 <HAL_GPIO_Init+0x240>
 8008736:	2302      	movs	r3, #2
 8008738:	e002      	b.n	8008740 <HAL_GPIO_Init+0x240>
 800873a:	2301      	movs	r3, #1
 800873c:	e000      	b.n	8008740 <HAL_GPIO_Init+0x240>
 800873e:	2300      	movs	r3, #0
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	f002 0203 	and.w	r2, r2, #3
 8008746:	0092      	lsls	r2, r2, #2
 8008748:	4093      	lsls	r3, r2
 800874a:	69ba      	ldr	r2, [r7, #24]
 800874c:	4313      	orrs	r3, r2
 800874e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008750:	4935      	ldr	r1, [pc, #212]	; (8008828 <HAL_GPIO_Init+0x328>)
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	089b      	lsrs	r3, r3, #2
 8008756:	3302      	adds	r3, #2
 8008758:	69ba      	ldr	r2, [r7, #24]
 800875a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800875e:	4b3d      	ldr	r3, [pc, #244]	; (8008854 <HAL_GPIO_Init+0x354>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	43db      	mvns	r3, r3
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	4013      	ands	r3, r2
 800876c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	4313      	orrs	r3, r2
 8008780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008782:	4a34      	ldr	r2, [pc, #208]	; (8008854 <HAL_GPIO_Init+0x354>)
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008788:	4b32      	ldr	r3, [pc, #200]	; (8008854 <HAL_GPIO_Init+0x354>)
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	43db      	mvns	r3, r3
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	4013      	ands	r3, r2
 8008796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d003      	beq.n	80087ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80087ac:	4a29      	ldr	r2, [pc, #164]	; (8008854 <HAL_GPIO_Init+0x354>)
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80087b2:	4b28      	ldr	r3, [pc, #160]	; (8008854 <HAL_GPIO_Init+0x354>)
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	43db      	mvns	r3, r3
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	4013      	ands	r3, r2
 80087c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80087d6:	4a1f      	ldr	r2, [pc, #124]	; (8008854 <HAL_GPIO_Init+0x354>)
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80087dc:	4b1d      	ldr	r3, [pc, #116]	; (8008854 <HAL_GPIO_Init+0x354>)
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	43db      	mvns	r3, r3
 80087e6:	69ba      	ldr	r2, [r7, #24]
 80087e8:	4013      	ands	r3, r2
 80087ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d003      	beq.n	8008800 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80087f8:	69ba      	ldr	r2, [r7, #24]
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008800:	4a14      	ldr	r2, [pc, #80]	; (8008854 <HAL_GPIO_Init+0x354>)
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	3301      	adds	r3, #1
 800880a:	61fb      	str	r3, [r7, #28]
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	2b0f      	cmp	r3, #15
 8008810:	f67f ae84 	bls.w	800851c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop
 8008818:	3724      	adds	r7, #36	; 0x24
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	40023800 	.word	0x40023800
 8008828:	40013800 	.word	0x40013800
 800882c:	40020000 	.word	0x40020000
 8008830:	40020400 	.word	0x40020400
 8008834:	40020800 	.word	0x40020800
 8008838:	40020c00 	.word	0x40020c00
 800883c:	40021000 	.word	0x40021000
 8008840:	40021400 	.word	0x40021400
 8008844:	40021800 	.word	0x40021800
 8008848:	40021c00 	.word	0x40021c00
 800884c:	40022000 	.word	0x40022000
 8008850:	40022400 	.word	0x40022400
 8008854:	40013c00 	.word	0x40013c00

08008858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691a      	ldr	r2, [r3, #16]
 8008868:	887b      	ldrh	r3, [r7, #2]
 800886a:	4013      	ands	r3, r2
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008870:	2301      	movs	r3, #1
 8008872:	73fb      	strb	r3, [r7, #15]
 8008874:	e001      	b.n	800887a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008876:	2300      	movs	r3, #0
 8008878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800887a:	7bfb      	ldrb	r3, [r7, #15]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	807b      	strh	r3, [r7, #2]
 8008894:	4613      	mov	r3, r2
 8008896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008898:	787b      	ldrb	r3, [r7, #1]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800889e:	887a      	ldrh	r2, [r7, #2]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80088a4:	e003      	b.n	80088ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80088a6:	887b      	ldrh	r3, [r7, #2]
 80088a8:	041a      	lsls	r2, r3, #16
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	619a      	str	r2, [r3, #24]
}
 80088ae:	bf00      	nop
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
	...

080088bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	4603      	mov	r3, r0
 80088c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80088c6:	4b08      	ldr	r3, [pc, #32]	; (80088e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80088c8:	695a      	ldr	r2, [r3, #20]
 80088ca:	88fb      	ldrh	r3, [r7, #6]
 80088cc:	4013      	ands	r3, r2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d006      	beq.n	80088e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80088d2:	4a05      	ldr	r2, [pc, #20]	; (80088e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80088d4:	88fb      	ldrh	r3, [r7, #6]
 80088d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80088d8:	88fb      	ldrh	r3, [r7, #6]
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fa ff96 	bl	800380c <HAL_GPIO_EXTI_Callback>
  }
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	40013c00 	.word	0x40013c00

080088ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e12b      	b.n	8008b56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d106      	bne.n	8008918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7fa f85c 	bl	80029d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2224      	movs	r2, #36	; 0x24
 800891c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 0201 	bic.w	r2, r2, #1
 800892e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800893e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800894e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008950:	f001 fd16 	bl	800a380 <HAL_RCC_GetPCLK1Freq>
 8008954:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	4a81      	ldr	r2, [pc, #516]	; (8008b60 <HAL_I2C_Init+0x274>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d807      	bhi.n	8008970 <HAL_I2C_Init+0x84>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4a80      	ldr	r2, [pc, #512]	; (8008b64 <HAL_I2C_Init+0x278>)
 8008964:	4293      	cmp	r3, r2
 8008966:	bf94      	ite	ls
 8008968:	2301      	movls	r3, #1
 800896a:	2300      	movhi	r3, #0
 800896c:	b2db      	uxtb	r3, r3
 800896e:	e006      	b.n	800897e <HAL_I2C_Init+0x92>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4a7d      	ldr	r2, [pc, #500]	; (8008b68 <HAL_I2C_Init+0x27c>)
 8008974:	4293      	cmp	r3, r2
 8008976:	bf94      	ite	ls
 8008978:	2301      	movls	r3, #1
 800897a:	2300      	movhi	r3, #0
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e0e7      	b.n	8008b56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4a78      	ldr	r2, [pc, #480]	; (8008b6c <HAL_I2C_Init+0x280>)
 800898a:	fba2 2303 	umull	r2, r3, r2, r3
 800898e:	0c9b      	lsrs	r3, r3, #18
 8008990:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	430a      	orrs	r2, r1
 80089a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6a1b      	ldr	r3, [r3, #32]
 80089ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	4a6a      	ldr	r2, [pc, #424]	; (8008b60 <HAL_I2C_Init+0x274>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d802      	bhi.n	80089c0 <HAL_I2C_Init+0xd4>
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	3301      	adds	r3, #1
 80089be:	e009      	b.n	80089d4 <HAL_I2C_Init+0xe8>
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80089c6:	fb02 f303 	mul.w	r3, r2, r3
 80089ca:	4a69      	ldr	r2, [pc, #420]	; (8008b70 <HAL_I2C_Init+0x284>)
 80089cc:	fba2 2303 	umull	r2, r3, r2, r3
 80089d0:	099b      	lsrs	r3, r3, #6
 80089d2:	3301      	adds	r3, #1
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	6812      	ldr	r2, [r2, #0]
 80089d8:	430b      	orrs	r3, r1
 80089da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80089e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	495c      	ldr	r1, [pc, #368]	; (8008b60 <HAL_I2C_Init+0x274>)
 80089f0:	428b      	cmp	r3, r1
 80089f2:	d819      	bhi.n	8008a28 <HAL_I2C_Init+0x13c>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	1e59      	subs	r1, r3, #1
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	005b      	lsls	r3, r3, #1
 80089fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a02:	1c59      	adds	r1, r3, #1
 8008a04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008a08:	400b      	ands	r3, r1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00a      	beq.n	8008a24 <HAL_I2C_Init+0x138>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	1e59      	subs	r1, r3, #1
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	005b      	lsls	r3, r3, #1
 8008a18:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a22:	e051      	b.n	8008ac8 <HAL_I2C_Init+0x1dc>
 8008a24:	2304      	movs	r3, #4
 8008a26:	e04f      	b.n	8008ac8 <HAL_I2C_Init+0x1dc>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d111      	bne.n	8008a54 <HAL_I2C_Init+0x168>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	1e58      	subs	r0, r3, #1
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6859      	ldr	r1, [r3, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	440b      	add	r3, r1
 8008a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a42:	3301      	adds	r3, #1
 8008a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	bf0c      	ite	eq
 8008a4c:	2301      	moveq	r3, #1
 8008a4e:	2300      	movne	r3, #0
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	e012      	b.n	8008a7a <HAL_I2C_Init+0x18e>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	1e58      	subs	r0, r3, #1
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6859      	ldr	r1, [r3, #4]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	440b      	add	r3, r1
 8008a62:	0099      	lsls	r1, r3, #2
 8008a64:	440b      	add	r3, r1
 8008a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bf0c      	ite	eq
 8008a74:	2301      	moveq	r3, #1
 8008a76:	2300      	movne	r3, #0
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <HAL_I2C_Init+0x196>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e022      	b.n	8008ac8 <HAL_I2C_Init+0x1dc>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10e      	bne.n	8008aa8 <HAL_I2C_Init+0x1bc>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	1e58      	subs	r0, r3, #1
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6859      	ldr	r1, [r3, #4]
 8008a92:	460b      	mov	r3, r1
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	440b      	add	r3, r1
 8008a98:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aa6:	e00f      	b.n	8008ac8 <HAL_I2C_Init+0x1dc>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	1e58      	subs	r0, r3, #1
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6859      	ldr	r1, [r3, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	440b      	add	r3, r1
 8008ab6:	0099      	lsls	r1, r3, #2
 8008ab8:	440b      	add	r3, r1
 8008aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8008abe:	3301      	adds	r3, #1
 8008ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ac8:	6879      	ldr	r1, [r7, #4]
 8008aca:	6809      	ldr	r1, [r1, #0]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	69da      	ldr	r2, [r3, #28]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008af6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	6911      	ldr	r1, [r2, #16]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	68d2      	ldr	r2, [r2, #12]
 8008b02:	4311      	orrs	r1, r2
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	6812      	ldr	r2, [r2, #0]
 8008b08:	430b      	orrs	r3, r1
 8008b0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	695a      	ldr	r2, [r3, #20]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	431a      	orrs	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 0201 	orr.w	r2, r2, #1
 8008b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2220      	movs	r2, #32
 8008b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	000186a0 	.word	0x000186a0
 8008b64:	001e847f 	.word	0x001e847f
 8008b68:	003d08ff 	.word	0x003d08ff
 8008b6c:	431bde83 	.word	0x431bde83
 8008b70:	10624dd3 	.word	0x10624dd3

08008b74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af02      	add	r7, sp, #8
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	4608      	mov	r0, r1
 8008b7e:	4611      	mov	r1, r2
 8008b80:	461a      	mov	r2, r3
 8008b82:	4603      	mov	r3, r0
 8008b84:	817b      	strh	r3, [r7, #10]
 8008b86:	460b      	mov	r3, r1
 8008b88:	813b      	strh	r3, [r7, #8]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b8e:	f7ff f901 	bl	8007d94 <HAL_GetTick>
 8008b92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b20      	cmp	r3, #32
 8008b9e:	f040 80d9 	bne.w	8008d54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	2319      	movs	r3, #25
 8008ba8:	2201      	movs	r2, #1
 8008baa:	496d      	ldr	r1, [pc, #436]	; (8008d60 <HAL_I2C_Mem_Write+0x1ec>)
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 fcb5 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e0cc      	b.n	8008d56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d101      	bne.n	8008bca <HAL_I2C_Mem_Write+0x56>
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	e0c5      	b.n	8008d56 <HAL_I2C_Mem_Write+0x1e2>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0301 	and.w	r3, r3, #1
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d007      	beq.n	8008bf0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f042 0201 	orr.w	r2, r2, #1
 8008bee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2221      	movs	r2, #33	; 0x21
 8008c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2240      	movs	r2, #64	; 0x40
 8008c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6a3a      	ldr	r2, [r7, #32]
 8008c1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4a4d      	ldr	r2, [pc, #308]	; (8008d64 <HAL_I2C_Mem_Write+0x1f0>)
 8008c30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c32:	88f8      	ldrh	r0, [r7, #6]
 8008c34:	893a      	ldrh	r2, [r7, #8]
 8008c36:	8979      	ldrh	r1, [r7, #10]
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	9301      	str	r3, [sp, #4]
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	4603      	mov	r3, r0
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 faec 	bl	8009220 <I2C_RequestMemoryWrite>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d052      	beq.n	8008cf4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e081      	b.n	8008d56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 fd36 	bl	80096c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00d      	beq.n	8008c7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d107      	bne.n	8008c7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e06b      	b.n	8008d56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c82:	781a      	ldrb	r2, [r3, #0]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	f003 0304 	and.w	r3, r3, #4
 8008cb8:	2b04      	cmp	r3, #4
 8008cba:	d11b      	bne.n	8008cf4 <HAL_I2C_Mem_Write+0x180>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d017      	beq.n	8008cf4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	1c5a      	adds	r2, r3, #1
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	3b01      	subs	r3, #1
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1aa      	bne.n	8008c52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 fd22 	bl	800974a <I2C_WaitOnBTFFlagUntilTimeout>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00d      	beq.n	8008d28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d10:	2b04      	cmp	r3, #4
 8008d12:	d107      	bne.n	8008d24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e016      	b.n	8008d56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	e000      	b.n	8008d56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008d54:	2302      	movs	r3, #2
  }
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	00100002 	.word	0x00100002
 8008d64:	ffff0000 	.word	0xffff0000

08008d68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08c      	sub	sp, #48	; 0x30
 8008d6c:	af02      	add	r7, sp, #8
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	4608      	mov	r0, r1
 8008d72:	4611      	mov	r1, r2
 8008d74:	461a      	mov	r2, r3
 8008d76:	4603      	mov	r3, r0
 8008d78:	817b      	strh	r3, [r7, #10]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	813b      	strh	r3, [r7, #8]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d82:	f7ff f807 	bl	8007d94 <HAL_GetTick>
 8008d86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b20      	cmp	r3, #32
 8008d92:	f040 8208 	bne.w	80091a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	2319      	movs	r3, #25
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	497b      	ldr	r1, [pc, #492]	; (8008f8c <HAL_I2C_Mem_Read+0x224>)
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 fbbb 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008dac:	2302      	movs	r3, #2
 8008dae:	e1fb      	b.n	80091a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d101      	bne.n	8008dbe <HAL_I2C_Mem_Read+0x56>
 8008dba:	2302      	movs	r3, #2
 8008dbc:	e1f4      	b.n	80091a8 <HAL_I2C_Mem_Read+0x440>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d007      	beq.n	8008de4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f042 0201 	orr.w	r2, r2, #1
 8008de2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008df2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2222      	movs	r2, #34	; 0x22
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2240      	movs	r2, #64	; 0x40
 8008e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4a5b      	ldr	r2, [pc, #364]	; (8008f90 <HAL_I2C_Mem_Read+0x228>)
 8008e24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e26:	88f8      	ldrh	r0, [r7, #6]
 8008e28:	893a      	ldrh	r2, [r7, #8]
 8008e2a:	8979      	ldrh	r1, [r7, #10]
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	4603      	mov	r3, r0
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 fa88 	bl	800934c <I2C_RequestMemoryRead>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e1b0      	b.n	80091a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d113      	bne.n	8008e76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e4e:	2300      	movs	r3, #0
 8008e50:	623b      	str	r3, [r7, #32]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	623b      	str	r3, [r7, #32]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	623b      	str	r3, [r7, #32]
 8008e62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	e184      	b.n	8009180 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d11b      	bne.n	8008eb6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e8e:	2300      	movs	r3, #0
 8008e90:	61fb      	str	r3, [r7, #28]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	61fb      	str	r3, [r7, #28]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	61fb      	str	r3, [r7, #28]
 8008ea2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	e164      	b.n	8009180 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d11b      	bne.n	8008ef6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ecc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008edc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ede:	2300      	movs	r3, #0
 8008ee0:	61bb      	str	r3, [r7, #24]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	61bb      	str	r3, [r7, #24]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	61bb      	str	r3, [r7, #24]
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	e144      	b.n	8009180 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	617b      	str	r3, [r7, #20]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	617b      	str	r3, [r7, #20]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	617b      	str	r3, [r7, #20]
 8008f0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008f0c:	e138      	b.n	8009180 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	f200 80f1 	bhi.w	80090fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d123      	bne.n	8008f68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 fc51 	bl	80097cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e139      	b.n	80091a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	691a      	ldr	r2, [r3, #16]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	b2d2      	uxtb	r2, r2
 8008f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f50:	3b01      	subs	r3, #1
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f66:	e10b      	b.n	8009180 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d14e      	bne.n	800900e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f76:	2200      	movs	r2, #0
 8008f78:	4906      	ldr	r1, [pc, #24]	; (8008f94 <HAL_I2C_Mem_Read+0x22c>)
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 face 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d008      	beq.n	8008f98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e10e      	b.n	80091a8 <HAL_I2C_Mem_Read+0x440>
 8008f8a:	bf00      	nop
 8008f8c:	00100002 	.word	0x00100002
 8008f90:	ffff0000 	.word	0xffff0000
 8008f94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	691a      	ldr	r2, [r3, #16]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb2:	b2d2      	uxtb	r2, r2
 8008fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fba:	1c5a      	adds	r2, r3, #1
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	691a      	ldr	r2, [r3, #16]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe4:	b2d2      	uxtb	r2, r2
 8008fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fec:	1c5a      	adds	r2, r3, #1
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009002:	b29b      	uxth	r3, r3
 8009004:	3b01      	subs	r3, #1
 8009006:	b29a      	uxth	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800900c:	e0b8      	b.n	8009180 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009014:	2200      	movs	r2, #0
 8009016:	4966      	ldr	r1, [pc, #408]	; (80091b0 <HAL_I2C_Mem_Read+0x448>)
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 fa7f 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	e0bf      	b.n	80091a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009036:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	691a      	ldr	r2, [r3, #16]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	b2d2      	uxtb	r2, r2
 8009044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009054:	3b01      	subs	r3, #1
 8009056:	b29a      	uxth	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009060:	b29b      	uxth	r3, r3
 8009062:	3b01      	subs	r3, #1
 8009064:	b29a      	uxth	r2, r3
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009070:	2200      	movs	r2, #0
 8009072:	494f      	ldr	r1, [pc, #316]	; (80091b0 <HAL_I2C_Mem_Read+0x448>)
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 fa51 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e091      	b.n	80091a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	691a      	ldr	r2, [r3, #16]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	b2d2      	uxtb	r2, r2
 80090a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	1c5a      	adds	r2, r3, #1
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b0:	3b01      	subs	r3, #1
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090bc:	b29b      	uxth	r3, r3
 80090be:	3b01      	subs	r3, #1
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	691a      	ldr	r2, [r3, #16]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d0:	b2d2      	uxtb	r2, r2
 80090d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d8:	1c5a      	adds	r2, r3, #1
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090e2:	3b01      	subs	r3, #1
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	3b01      	subs	r3, #1
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80090f8:	e042      	b.n	8009180 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 fb64 	bl	80097cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e04c      	b.n	80091a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	691a      	ldr	r2, [r3, #16]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	b2d2      	uxtb	r2, r2
 800911a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009120:	1c5a      	adds	r2, r3, #1
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800912a:	3b01      	subs	r3, #1
 800912c:	b29a      	uxth	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009136:	b29b      	uxth	r3, r3
 8009138:	3b01      	subs	r3, #1
 800913a:	b29a      	uxth	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	f003 0304 	and.w	r3, r3, #4
 800914a:	2b04      	cmp	r3, #4
 800914c:	d118      	bne.n	8009180 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	691a      	ldr	r2, [r3, #16]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	b2d2      	uxtb	r2, r2
 800915a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009160:	1c5a      	adds	r2, r3, #1
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800916a:	3b01      	subs	r3, #1
 800916c:	b29a      	uxth	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009176:	b29b      	uxth	r3, r3
 8009178:	3b01      	subs	r3, #1
 800917a:	b29a      	uxth	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009184:	2b00      	cmp	r3, #0
 8009186:	f47f aec2 	bne.w	8008f0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2220      	movs	r2, #32
 800918e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	e000      	b.n	80091a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80091a6:	2302      	movs	r3, #2
  }
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3728      	adds	r7, #40	; 0x28
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	00010004 	.word	0x00010004

080091b4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b20      	cmp	r3, #32
 80091c6:	d124      	bne.n	8009212 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2228      	movs	r2, #40	; 0x28
 80091cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d007      	beq.n	80091ee <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f042 0201 	orr.w	r2, r2, #1
 80091ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80091fc:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800920c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	e000      	b.n	8009214 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8009212:	2302      	movs	r3, #2
  }
}
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af02      	add	r7, sp, #8
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	4608      	mov	r0, r1
 800922a:	4611      	mov	r1, r2
 800922c:	461a      	mov	r2, r3
 800922e:	4603      	mov	r3, r0
 8009230:	817b      	strh	r3, [r7, #10]
 8009232:	460b      	mov	r3, r1
 8009234:	813b      	strh	r3, [r7, #8]
 8009236:	4613      	mov	r3, r2
 8009238:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009248:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	2200      	movs	r2, #0
 8009252:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f000 f960 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00d      	beq.n	800927e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800926c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009270:	d103      	bne.n	800927a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009278:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e05f      	b.n	800933e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800927e:	897b      	ldrh	r3, [r7, #10]
 8009280:	b2db      	uxtb	r3, r3
 8009282:	461a      	mov	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800928c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	6a3a      	ldr	r2, [r7, #32]
 8009292:	492d      	ldr	r1, [pc, #180]	; (8009348 <I2C_RequestMemoryWrite+0x128>)
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f000 f998 	bl	80095ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d001      	beq.n	80092a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e04c      	b.n	800933e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092a4:	2300      	movs	r3, #0
 80092a6:	617b      	str	r3, [r7, #20]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	617b      	str	r3, [r7, #20]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	617b      	str	r3, [r7, #20]
 80092b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092bc:	6a39      	ldr	r1, [r7, #32]
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f000 fa02 	bl	80096c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00d      	beq.n	80092e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ce:	2b04      	cmp	r3, #4
 80092d0:	d107      	bne.n	80092e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e02b      	b.n	800933e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80092e6:	88fb      	ldrh	r3, [r7, #6]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d105      	bne.n	80092f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80092ec:	893b      	ldrh	r3, [r7, #8]
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	611a      	str	r2, [r3, #16]
 80092f6:	e021      	b.n	800933c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80092f8:	893b      	ldrh	r3, [r7, #8]
 80092fa:	0a1b      	lsrs	r3, r3, #8
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009308:	6a39      	ldr	r1, [r7, #32]
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 f9dc 	bl	80096c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00d      	beq.n	8009332 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931a:	2b04      	cmp	r3, #4
 800931c:	d107      	bne.n	800932e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800932c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e005      	b.n	800933e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009332:	893b      	ldrh	r3, [r7, #8]
 8009334:	b2da      	uxtb	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	00010002 	.word	0x00010002

0800934c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b088      	sub	sp, #32
 8009350:	af02      	add	r7, sp, #8
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	4608      	mov	r0, r1
 8009356:	4611      	mov	r1, r2
 8009358:	461a      	mov	r2, r3
 800935a:	4603      	mov	r3, r0
 800935c:	817b      	strh	r3, [r7, #10]
 800935e:	460b      	mov	r3, r1
 8009360:	813b      	strh	r3, [r7, #8]
 8009362:	4613      	mov	r3, r2
 8009364:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009374:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009384:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	6a3b      	ldr	r3, [r7, #32]
 800938c:	2200      	movs	r2, #0
 800938e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 f8c2 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00d      	beq.n	80093ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ac:	d103      	bne.n	80093b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e0aa      	b.n	8009510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80093ba:	897b      	ldrh	r3, [r7, #10]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	461a      	mov	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80093c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093cc:	6a3a      	ldr	r2, [r7, #32]
 80093ce:	4952      	ldr	r1, [pc, #328]	; (8009518 <I2C_RequestMemoryRead+0x1cc>)
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 f8fa 	bl	80095ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e097      	b.n	8009510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093e0:	2300      	movs	r3, #0
 80093e2:	617b      	str	r3, [r7, #20]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	617b      	str	r3, [r7, #20]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	617b      	str	r3, [r7, #20]
 80093f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f8:	6a39      	ldr	r1, [r7, #32]
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f000 f964 	bl	80096c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00d      	beq.n	8009422 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940a:	2b04      	cmp	r3, #4
 800940c:	d107      	bne.n	800941e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800941c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e076      	b.n	8009510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009422:	88fb      	ldrh	r3, [r7, #6]
 8009424:	2b01      	cmp	r3, #1
 8009426:	d105      	bne.n	8009434 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009428:	893b      	ldrh	r3, [r7, #8]
 800942a:	b2da      	uxtb	r2, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	611a      	str	r2, [r3, #16]
 8009432:	e021      	b.n	8009478 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009434:	893b      	ldrh	r3, [r7, #8]
 8009436:	0a1b      	lsrs	r3, r3, #8
 8009438:	b29b      	uxth	r3, r3
 800943a:	b2da      	uxtb	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009444:	6a39      	ldr	r1, [r7, #32]
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f000 f93e 	bl	80096c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00d      	beq.n	800946e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009456:	2b04      	cmp	r3, #4
 8009458:	d107      	bne.n	800946a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009468:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e050      	b.n	8009510 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800946e:	893b      	ldrh	r3, [r7, #8]
 8009470:	b2da      	uxtb	r2, r3
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800947a:	6a39      	ldr	r1, [r7, #32]
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 f923 	bl	80096c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00d      	beq.n	80094a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948c:	2b04      	cmp	r3, #4
 800948e:	d107      	bne.n	80094a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800949e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e035      	b.n	8009510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 f82b 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00d      	beq.n	80094e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094da:	d103      	bne.n	80094e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e013      	b.n	8009510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80094e8:	897b      	ldrh	r3, [r7, #10]
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	f043 0301 	orr.w	r3, r3, #1
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	6a3a      	ldr	r2, [r7, #32]
 80094fc:	4906      	ldr	r1, [pc, #24]	; (8009518 <I2C_RequestMemoryRead+0x1cc>)
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 f863 	bl	80095ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e000      	b.n	8009510 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3718      	adds	r7, #24
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	00010002 	.word	0x00010002

0800951c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	603b      	str	r3, [r7, #0]
 8009528:	4613      	mov	r3, r2
 800952a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800952c:	e025      	b.n	800957a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009534:	d021      	beq.n	800957a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009536:	f7fe fc2d 	bl	8007d94 <HAL_GetTick>
 800953a:	4602      	mov	r2, r0
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	429a      	cmp	r2, r3
 8009544:	d302      	bcc.n	800954c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d116      	bne.n	800957a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2220      	movs	r2, #32
 8009556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009566:	f043 0220 	orr.w	r2, r3, #32
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e023      	b.n	80095c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	0c1b      	lsrs	r3, r3, #16
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b01      	cmp	r3, #1
 8009582:	d10d      	bne.n	80095a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	43da      	mvns	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	4013      	ands	r3, r2
 8009590:	b29b      	uxth	r3, r3
 8009592:	2b00      	cmp	r3, #0
 8009594:	bf0c      	ite	eq
 8009596:	2301      	moveq	r3, #1
 8009598:	2300      	movne	r3, #0
 800959a:	b2db      	uxtb	r3, r3
 800959c:	461a      	mov	r2, r3
 800959e:	e00c      	b.n	80095ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	43da      	mvns	r2, r3
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	4013      	ands	r3, r2
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	bf0c      	ite	eq
 80095b2:	2301      	moveq	r3, #1
 80095b4:	2300      	movne	r3, #0
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	461a      	mov	r2, r3
 80095ba:	79fb      	ldrb	r3, [r7, #7]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d0b6      	beq.n	800952e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b084      	sub	sp, #16
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	60b9      	str	r1, [r7, #8]
 80095d4:	607a      	str	r2, [r7, #4]
 80095d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095d8:	e051      	b.n	800967e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095e8:	d123      	bne.n	8009632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009602:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2220      	movs	r2, #32
 800960e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961e:	f043 0204 	orr.w	r2, r3, #4
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e046      	b.n	80096c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009638:	d021      	beq.n	800967e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800963a:	f7fe fbab 	bl	8007d94 <HAL_GetTick>
 800963e:	4602      	mov	r2, r0
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	429a      	cmp	r2, r3
 8009648:	d302      	bcc.n	8009650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d116      	bne.n	800967e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2220      	movs	r2, #32
 800965a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966a:	f043 0220 	orr.w	r2, r3, #32
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e020      	b.n	80096c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	0c1b      	lsrs	r3, r3, #16
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b01      	cmp	r3, #1
 8009686:	d10c      	bne.n	80096a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	43da      	mvns	r2, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	4013      	ands	r3, r2
 8009694:	b29b      	uxth	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	bf14      	ite	ne
 800969a:	2301      	movne	r3, #1
 800969c:	2300      	moveq	r3, #0
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	e00b      	b.n	80096ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	43da      	mvns	r2, r3
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	4013      	ands	r3, r2
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	bf14      	ite	ne
 80096b4:	2301      	movne	r3, #1
 80096b6:	2300      	moveq	r3, #0
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d18d      	bne.n	80095da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096d4:	e02d      	b.n	8009732 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f000 f8ce 	bl	8009878 <I2C_IsAcknowledgeFailed>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e02d      	b.n	8009742 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ec:	d021      	beq.n	8009732 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ee:	f7fe fb51 	bl	8007d94 <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d302      	bcc.n	8009704 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d116      	bne.n	8009732 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2220      	movs	r2, #32
 800970e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971e:	f043 0220 	orr.w	r2, r3, #32
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e007      	b.n	8009742 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800973c:	2b80      	cmp	r3, #128	; 0x80
 800973e:	d1ca      	bne.n	80096d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b084      	sub	sp, #16
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	60b9      	str	r1, [r7, #8]
 8009754:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009756:	e02d      	b.n	80097b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 f88d 	bl	8009878 <I2C_IsAcknowledgeFailed>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e02d      	b.n	80097c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976e:	d021      	beq.n	80097b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009770:	f7fe fb10 	bl	8007d94 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	429a      	cmp	r2, r3
 800977e:	d302      	bcc.n	8009786 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d116      	bne.n	80097b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2220      	movs	r2, #32
 8009790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a0:	f043 0220 	orr.w	r2, r3, #32
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e007      	b.n	80097c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	f003 0304 	and.w	r3, r3, #4
 80097be:	2b04      	cmp	r3, #4
 80097c0:	d1ca      	bne.n	8009758 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097d8:	e042      	b.n	8009860 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	695b      	ldr	r3, [r3, #20]
 80097e0:	f003 0310 	and.w	r3, r3, #16
 80097e4:	2b10      	cmp	r3, #16
 80097e6:	d119      	bne.n	800981c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f06f 0210 	mvn.w	r2, #16
 80097f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e029      	b.n	8009870 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800981c:	f7fe faba 	bl	8007d94 <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	429a      	cmp	r2, r3
 800982a:	d302      	bcc.n	8009832 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d116      	bne.n	8009860 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2220      	movs	r2, #32
 800983c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984c:	f043 0220 	orr.w	r2, r3, #32
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	e007      	b.n	8009870 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986a:	2b40      	cmp	r3, #64	; 0x40
 800986c:	d1b5      	bne.n	80097da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800988a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800988e:	d11b      	bne.n	80098c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009898:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2220      	movs	r2, #32
 80098a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b4:	f043 0204 	orr.w	r2, r3, #4
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e000      	b.n	80098ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80098d6:	b480      	push	{r7}
 80098d8:	b083      	sub	sp, #12
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b20      	cmp	r3, #32
 80098ea:	d129      	bne.n	8009940 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2224      	movs	r2, #36	; 0x24
 80098f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f022 0201 	bic.w	r2, r2, #1
 8009902:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f022 0210 	bic.w	r2, r2, #16
 8009912:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	683a      	ldr	r2, [r7, #0]
 8009920:	430a      	orrs	r2, r1
 8009922:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 0201 	orr.w	r2, r2, #1
 8009932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2220      	movs	r2, #32
 8009938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	e000      	b.n	8009942 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009940:	2302      	movs	r3, #2
  }
}
 8009942:	4618      	mov	r0, r3
 8009944:	370c      	adds	r7, #12
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr

0800994e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800994e:	b480      	push	{r7}
 8009950:	b085      	sub	sp, #20
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
 8009956:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009958:	2300      	movs	r3, #0
 800995a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b20      	cmp	r3, #32
 8009966:	d12a      	bne.n	80099be <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2224      	movs	r2, #36	; 0x24
 800996c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f022 0201 	bic.w	r2, r2, #1
 800997e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009986:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009988:	89fb      	ldrh	r3, [r7, #14]
 800998a:	f023 030f 	bic.w	r3, r3, #15
 800998e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	b29a      	uxth	r2, r3
 8009994:	89fb      	ldrh	r3, [r7, #14]
 8009996:	4313      	orrs	r3, r2
 8009998:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	89fa      	ldrh	r2, [r7, #14]
 80099a0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f042 0201 	orr.w	r2, r2, #1
 80099b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2220      	movs	r2, #32
 80099b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	e000      	b.n	80099c0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80099be:	2302      	movs	r3, #2
  }
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3714      	adds	r7, #20
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d101      	bne.n	80099de <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e034      	b.n	8009a48 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80099e6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f245 5255 	movw	r2, #21845	; 0x5555
 80099f0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	6852      	ldr	r2, [r2, #4]
 80099fa:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	6892      	ldr	r2, [r2, #8]
 8009a04:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009a06:	f7fe f9c5 	bl	8007d94 <HAL_GetTick>
 8009a0a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009a0c:	e00f      	b.n	8009a2e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009a0e:	f7fe f9c1 	bl	8007d94 <HAL_GetTick>
 8009a12:	4602      	mov	r2, r0
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	2b31      	cmp	r3, #49	; 0x31
 8009a1a:	d908      	bls.n	8009a2e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f003 0303 	and.w	r3, r3, #3
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e00c      	b.n	8009a48 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	f003 0303 	and.w	r3, r3, #3
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1e8      	bne.n	8009a0e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009a44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009a60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8009a78:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <HAL_PWR_EnableWakeUpPin+0x20>)
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	4904      	ldr	r1, [pc, #16]	; (8009a90 <HAL_PWR_EnableWakeUpPin+0x20>)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	604b      	str	r3, [r1, #4]
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	40007000 	.word	0x40007000

08009a94 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8009a9c:	4b06      	ldr	r3, [pc, #24]	; (8009ab8 <HAL_PWR_DisableWakeUpPin+0x24>)
 8009a9e:	685a      	ldr	r2, [r3, #4]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	43db      	mvns	r3, r3
 8009aa4:	4904      	ldr	r1, [pc, #16]	; (8009ab8 <HAL_PWR_DisableWakeUpPin+0x24>)
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	604b      	str	r3, [r1, #4]
}
 8009aaa:	bf00      	nop
 8009aac:	370c      	adds	r7, #12
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	40007000 	.word	0x40007000

08009abc <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8009abc:	b480      	push	{r7}
 8009abe:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8009ac0:	4b08      	ldr	r3, [pc, #32]	; (8009ae4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a07      	ldr	r2, [pc, #28]	; (8009ae4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8009ac6:	f043 0302 	orr.w	r3, r3, #2
 8009aca:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009acc:	4b06      	ldr	r3, [pc, #24]	; (8009ae8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	4a05      	ldr	r2, [pc, #20]	; (8009ae8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8009ad2:	f043 0304 	orr.w	r3, r3, #4
 8009ad6:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8009ad8:	bf30      	wfi
}
 8009ada:	bf00      	nop
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	40007000 	.word	0x40007000
 8009ae8:	e000ed00 	.word	0xe000ed00

08009aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e264      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 0301 	and.w	r3, r3, #1
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d075      	beq.n	8009bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009b0a:	4ba3      	ldr	r3, [pc, #652]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	f003 030c 	and.w	r3, r3, #12
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d00c      	beq.n	8009b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b16:	4ba0      	ldr	r3, [pc, #640]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009b1e:	2b08      	cmp	r3, #8
 8009b20:	d112      	bne.n	8009b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b22:	4b9d      	ldr	r3, [pc, #628]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b2e:	d10b      	bne.n	8009b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b30:	4b99      	ldr	r3, [pc, #612]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d05b      	beq.n	8009bf4 <HAL_RCC_OscConfig+0x108>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d157      	bne.n	8009bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e23f      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b50:	d106      	bne.n	8009b60 <HAL_RCC_OscConfig+0x74>
 8009b52:	4b91      	ldr	r3, [pc, #580]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a90      	ldr	r2, [pc, #576]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b5c:	6013      	str	r3, [r2, #0]
 8009b5e:	e01d      	b.n	8009b9c <HAL_RCC_OscConfig+0xb0>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b68:	d10c      	bne.n	8009b84 <HAL_RCC_OscConfig+0x98>
 8009b6a:	4b8b      	ldr	r3, [pc, #556]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a8a      	ldr	r2, [pc, #552]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	4b88      	ldr	r3, [pc, #544]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a87      	ldr	r2, [pc, #540]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b80:	6013      	str	r3, [r2, #0]
 8009b82:	e00b      	b.n	8009b9c <HAL_RCC_OscConfig+0xb0>
 8009b84:	4b84      	ldr	r3, [pc, #528]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a83      	ldr	r2, [pc, #524]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b8e:	6013      	str	r3, [r2, #0]
 8009b90:	4b81      	ldr	r3, [pc, #516]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a80      	ldr	r2, [pc, #512]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d013      	beq.n	8009bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ba4:	f7fe f8f6 	bl	8007d94 <HAL_GetTick>
 8009ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009baa:	e008      	b.n	8009bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009bac:	f7fe f8f2 	bl	8007d94 <HAL_GetTick>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	2b64      	cmp	r3, #100	; 0x64
 8009bb8:	d901      	bls.n	8009bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e204      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009bbe:	4b76      	ldr	r3, [pc, #472]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d0f0      	beq.n	8009bac <HAL_RCC_OscConfig+0xc0>
 8009bca:	e014      	b.n	8009bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bcc:	f7fe f8e2 	bl	8007d94 <HAL_GetTick>
 8009bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009bd2:	e008      	b.n	8009be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009bd4:	f7fe f8de 	bl	8007d94 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	2b64      	cmp	r3, #100	; 0x64
 8009be0:	d901      	bls.n	8009be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e1f0      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009be6:	4b6c      	ldr	r3, [pc, #432]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1f0      	bne.n	8009bd4 <HAL_RCC_OscConfig+0xe8>
 8009bf2:	e000      	b.n	8009bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0302 	and.w	r3, r3, #2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d063      	beq.n	8009cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009c02:	4b65      	ldr	r3, [pc, #404]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	f003 030c 	and.w	r3, r3, #12
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00b      	beq.n	8009c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c0e:	4b62      	ldr	r3, [pc, #392]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009c16:	2b08      	cmp	r3, #8
 8009c18:	d11c      	bne.n	8009c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c1a:	4b5f      	ldr	r3, [pc, #380]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d116      	bne.n	8009c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c26:	4b5c      	ldr	r3, [pc, #368]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0302 	and.w	r3, r3, #2
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d005      	beq.n	8009c3e <HAL_RCC_OscConfig+0x152>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d001      	beq.n	8009c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e1c4      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c3e:	4b56      	ldr	r3, [pc, #344]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	00db      	lsls	r3, r3, #3
 8009c4c:	4952      	ldr	r1, [pc, #328]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c52:	e03a      	b.n	8009cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d020      	beq.n	8009c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c5c:	4b4f      	ldr	r3, [pc, #316]	; (8009d9c <HAL_RCC_OscConfig+0x2b0>)
 8009c5e:	2201      	movs	r2, #1
 8009c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c62:	f7fe f897 	bl	8007d94 <HAL_GetTick>
 8009c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c68:	e008      	b.n	8009c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c6a:	f7fe f893 	bl	8007d94 <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d901      	bls.n	8009c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e1a5      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c7c:	4b46      	ldr	r3, [pc, #280]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0302 	and.w	r3, r3, #2
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0f0      	beq.n	8009c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c88:	4b43      	ldr	r3, [pc, #268]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	4940      	ldr	r1, [pc, #256]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	600b      	str	r3, [r1, #0]
 8009c9c:	e015      	b.n	8009cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c9e:	4b3f      	ldr	r3, [pc, #252]	; (8009d9c <HAL_RCC_OscConfig+0x2b0>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ca4:	f7fe f876 	bl	8007d94 <HAL_GetTick>
 8009ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009caa:	e008      	b.n	8009cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009cac:	f7fe f872 	bl	8007d94 <HAL_GetTick>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	1ad3      	subs	r3, r2, r3
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d901      	bls.n	8009cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e184      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009cbe:	4b36      	ldr	r3, [pc, #216]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0302 	and.w	r3, r3, #2
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1f0      	bne.n	8009cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 0308 	and.w	r3, r3, #8
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d030      	beq.n	8009d38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d016      	beq.n	8009d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009cde:	4b30      	ldr	r3, [pc, #192]	; (8009da0 <HAL_RCC_OscConfig+0x2b4>)
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ce4:	f7fe f856 	bl	8007d94 <HAL_GetTick>
 8009ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009cea:	e008      	b.n	8009cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009cec:	f7fe f852 	bl	8007d94 <HAL_GetTick>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d901      	bls.n	8009cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e164      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009cfe:	4b26      	ldr	r3, [pc, #152]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d02:	f003 0302 	and.w	r3, r3, #2
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0f0      	beq.n	8009cec <HAL_RCC_OscConfig+0x200>
 8009d0a:	e015      	b.n	8009d38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d0c:	4b24      	ldr	r3, [pc, #144]	; (8009da0 <HAL_RCC_OscConfig+0x2b4>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d12:	f7fe f83f 	bl	8007d94 <HAL_GetTick>
 8009d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d18:	e008      	b.n	8009d2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d1a:	f7fe f83b 	bl	8007d94 <HAL_GetTick>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d901      	bls.n	8009d2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e14d      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d2c:	4b1a      	ldr	r3, [pc, #104]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d30:	f003 0302 	and.w	r3, r3, #2
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1f0      	bne.n	8009d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 0304 	and.w	r3, r3, #4
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 80a0 	beq.w	8009e86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d46:	2300      	movs	r3, #0
 8009d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d4a:	4b13      	ldr	r3, [pc, #76]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10f      	bne.n	8009d76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d56:	2300      	movs	r3, #0
 8009d58:	60bb      	str	r3, [r7, #8]
 8009d5a:	4b0f      	ldr	r3, [pc, #60]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5e:	4a0e      	ldr	r2, [pc, #56]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d64:	6413      	str	r3, [r2, #64]	; 0x40
 8009d66:	4b0c      	ldr	r3, [pc, #48]	; (8009d98 <HAL_RCC_OscConfig+0x2ac>)
 8009d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d6e:	60bb      	str	r3, [r7, #8]
 8009d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d72:	2301      	movs	r3, #1
 8009d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d76:	4b0b      	ldr	r3, [pc, #44]	; (8009da4 <HAL_RCC_OscConfig+0x2b8>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d121      	bne.n	8009dc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d82:	4b08      	ldr	r3, [pc, #32]	; (8009da4 <HAL_RCC_OscConfig+0x2b8>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a07      	ldr	r2, [pc, #28]	; (8009da4 <HAL_RCC_OscConfig+0x2b8>)
 8009d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d8e:	f7fe f801 	bl	8007d94 <HAL_GetTick>
 8009d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d94:	e011      	b.n	8009dba <HAL_RCC_OscConfig+0x2ce>
 8009d96:	bf00      	nop
 8009d98:	40023800 	.word	0x40023800
 8009d9c:	42470000 	.word	0x42470000
 8009da0:	42470e80 	.word	0x42470e80
 8009da4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009da8:	f7fd fff4 	bl	8007d94 <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d901      	bls.n	8009dba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e106      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009dba:	4b85      	ldr	r3, [pc, #532]	; (8009fd0 <HAL_RCC_OscConfig+0x4e4>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d0f0      	beq.n	8009da8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d106      	bne.n	8009ddc <HAL_RCC_OscConfig+0x2f0>
 8009dce:	4b81      	ldr	r3, [pc, #516]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd2:	4a80      	ldr	r2, [pc, #512]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009dd4:	f043 0301 	orr.w	r3, r3, #1
 8009dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8009dda:	e01c      	b.n	8009e16 <HAL_RCC_OscConfig+0x32a>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	2b05      	cmp	r3, #5
 8009de2:	d10c      	bne.n	8009dfe <HAL_RCC_OscConfig+0x312>
 8009de4:	4b7b      	ldr	r3, [pc, #492]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de8:	4a7a      	ldr	r2, [pc, #488]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009dea:	f043 0304 	orr.w	r3, r3, #4
 8009dee:	6713      	str	r3, [r2, #112]	; 0x70
 8009df0:	4b78      	ldr	r3, [pc, #480]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df4:	4a77      	ldr	r2, [pc, #476]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009df6:	f043 0301 	orr.w	r3, r3, #1
 8009dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8009dfc:	e00b      	b.n	8009e16 <HAL_RCC_OscConfig+0x32a>
 8009dfe:	4b75      	ldr	r3, [pc, #468]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e02:	4a74      	ldr	r2, [pc, #464]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009e04:	f023 0301 	bic.w	r3, r3, #1
 8009e08:	6713      	str	r3, [r2, #112]	; 0x70
 8009e0a:	4b72      	ldr	r3, [pc, #456]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0e:	4a71      	ldr	r2, [pc, #452]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009e10:	f023 0304 	bic.w	r3, r3, #4
 8009e14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d015      	beq.n	8009e4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e1e:	f7fd ffb9 	bl	8007d94 <HAL_GetTick>
 8009e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e24:	e00a      	b.n	8009e3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e26:	f7fd ffb5 	bl	8007d94 <HAL_GetTick>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d901      	bls.n	8009e3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e0c5      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e3c:	4b65      	ldr	r3, [pc, #404]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e40:	f003 0302 	and.w	r3, r3, #2
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d0ee      	beq.n	8009e26 <HAL_RCC_OscConfig+0x33a>
 8009e48:	e014      	b.n	8009e74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e4a:	f7fd ffa3 	bl	8007d94 <HAL_GetTick>
 8009e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e50:	e00a      	b.n	8009e68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e52:	f7fd ff9f 	bl	8007d94 <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d901      	bls.n	8009e68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e0af      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e68:	4b5a      	ldr	r3, [pc, #360]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e6c:	f003 0302 	and.w	r3, r3, #2
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1ee      	bne.n	8009e52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d105      	bne.n	8009e86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e7a:	4b56      	ldr	r3, [pc, #344]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7e:	4a55      	ldr	r2, [pc, #340]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 809b 	beq.w	8009fc6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009e90:	4b50      	ldr	r3, [pc, #320]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	f003 030c 	and.w	r3, r3, #12
 8009e98:	2b08      	cmp	r3, #8
 8009e9a:	d05c      	beq.n	8009f56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d141      	bne.n	8009f28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ea4:	4b4c      	ldr	r3, [pc, #304]	; (8009fd8 <HAL_RCC_OscConfig+0x4ec>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009eaa:	f7fd ff73 	bl	8007d94 <HAL_GetTick>
 8009eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009eb0:	e008      	b.n	8009ec4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009eb2:	f7fd ff6f 	bl	8007d94 <HAL_GetTick>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d901      	bls.n	8009ec4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e081      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ec4:	4b43      	ldr	r3, [pc, #268]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1f0      	bne.n	8009eb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	69da      	ldr	r2, [r3, #28]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a1b      	ldr	r3, [r3, #32]
 8009ed8:	431a      	orrs	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ede:	019b      	lsls	r3, r3, #6
 8009ee0:	431a      	orrs	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee6:	085b      	lsrs	r3, r3, #1
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	041b      	lsls	r3, r3, #16
 8009eec:	431a      	orrs	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef2:	061b      	lsls	r3, r3, #24
 8009ef4:	4937      	ldr	r1, [pc, #220]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009efa:	4b37      	ldr	r3, [pc, #220]	; (8009fd8 <HAL_RCC_OscConfig+0x4ec>)
 8009efc:	2201      	movs	r2, #1
 8009efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f00:	f7fd ff48 	bl	8007d94 <HAL_GetTick>
 8009f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f06:	e008      	b.n	8009f1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f08:	f7fd ff44 	bl	8007d94 <HAL_GetTick>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d901      	bls.n	8009f1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e056      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f1a:	4b2e      	ldr	r3, [pc, #184]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d0f0      	beq.n	8009f08 <HAL_RCC_OscConfig+0x41c>
 8009f26:	e04e      	b.n	8009fc6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f28:	4b2b      	ldr	r3, [pc, #172]	; (8009fd8 <HAL_RCC_OscConfig+0x4ec>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f2e:	f7fd ff31 	bl	8007d94 <HAL_GetTick>
 8009f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f34:	e008      	b.n	8009f48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f36:	f7fd ff2d 	bl	8007d94 <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d901      	bls.n	8009f48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e03f      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f48:	4b22      	ldr	r3, [pc, #136]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1f0      	bne.n	8009f36 <HAL_RCC_OscConfig+0x44a>
 8009f54:	e037      	b.n	8009fc6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d101      	bne.n	8009f62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e032      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009f62:	4b1c      	ldr	r3, [pc, #112]	; (8009fd4 <HAL_RCC_OscConfig+0x4e8>)
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	699b      	ldr	r3, [r3, #24]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d028      	beq.n	8009fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d121      	bne.n	8009fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d11a      	bne.n	8009fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009f92:	4013      	ands	r3, r2
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d111      	bne.n	8009fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa8:	085b      	lsrs	r3, r3, #1
 8009faa:	3b01      	subs	r3, #1
 8009fac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d107      	bne.n	8009fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d001      	beq.n	8009fc6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e000      	b.n	8009fc8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3718      	adds	r7, #24
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	40007000 	.word	0x40007000
 8009fd4:	40023800 	.word	0x40023800
 8009fd8:	42470060 	.word	0x42470060

08009fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d101      	bne.n	8009ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e0cc      	b.n	800a18a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ff0:	4b68      	ldr	r3, [pc, #416]	; (800a194 <HAL_RCC_ClockConfig+0x1b8>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 030f 	and.w	r3, r3, #15
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d90c      	bls.n	800a018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ffe:	4b65      	ldr	r3, [pc, #404]	; (800a194 <HAL_RCC_ClockConfig+0x1b8>)
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	b2d2      	uxtb	r2, r2
 800a004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a006:	4b63      	ldr	r3, [pc, #396]	; (800a194 <HAL_RCC_ClockConfig+0x1b8>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 030f 	and.w	r3, r3, #15
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	429a      	cmp	r2, r3
 800a012:	d001      	beq.n	800a018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e0b8      	b.n	800a18a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0302 	and.w	r3, r3, #2
 800a020:	2b00      	cmp	r3, #0
 800a022:	d020      	beq.n	800a066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0304 	and.w	r3, r3, #4
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d005      	beq.n	800a03c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a030:	4b59      	ldr	r3, [pc, #356]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	4a58      	ldr	r2, [pc, #352]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a03a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 0308 	and.w	r3, r3, #8
 800a044:	2b00      	cmp	r3, #0
 800a046:	d005      	beq.n	800a054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a048:	4b53      	ldr	r3, [pc, #332]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	4a52      	ldr	r2, [pc, #328]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a04e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a054:	4b50      	ldr	r3, [pc, #320]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	494d      	ldr	r1, [pc, #308]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a062:	4313      	orrs	r3, r2
 800a064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 0301 	and.w	r3, r3, #1
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d044      	beq.n	800a0fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d107      	bne.n	800a08a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a07a:	4b47      	ldr	r3, [pc, #284]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a082:	2b00      	cmp	r3, #0
 800a084:	d119      	bne.n	800a0ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e07f      	b.n	800a18a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	2b02      	cmp	r3, #2
 800a090:	d003      	beq.n	800a09a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a096:	2b03      	cmp	r3, #3
 800a098:	d107      	bne.n	800a0aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a09a:	4b3f      	ldr	r3, [pc, #252]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d109      	bne.n	800a0ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e06f      	b.n	800a18a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0aa:	4b3b      	ldr	r3, [pc, #236]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 0302 	and.w	r3, r3, #2
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d101      	bne.n	800a0ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e067      	b.n	800a18a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a0ba:	4b37      	ldr	r3, [pc, #220]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f023 0203 	bic.w	r2, r3, #3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	4934      	ldr	r1, [pc, #208]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a0cc:	f7fd fe62 	bl	8007d94 <HAL_GetTick>
 800a0d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0d2:	e00a      	b.n	800a0ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0d4:	f7fd fe5e 	bl	8007d94 <HAL_GetTick>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d901      	bls.n	800a0ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e04f      	b.n	800a18a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0ea:	4b2b      	ldr	r3, [pc, #172]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	f003 020c 	and.w	r2, r3, #12
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d1eb      	bne.n	800a0d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a0fc:	4b25      	ldr	r3, [pc, #148]	; (800a194 <HAL_RCC_ClockConfig+0x1b8>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 030f 	and.w	r3, r3, #15
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	429a      	cmp	r2, r3
 800a108:	d20c      	bcs.n	800a124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a10a:	4b22      	ldr	r3, [pc, #136]	; (800a194 <HAL_RCC_ClockConfig+0x1b8>)
 800a10c:	683a      	ldr	r2, [r7, #0]
 800a10e:	b2d2      	uxtb	r2, r2
 800a110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a112:	4b20      	ldr	r3, [pc, #128]	; (800a194 <HAL_RCC_ClockConfig+0x1b8>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 030f 	and.w	r3, r3, #15
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d001      	beq.n	800a124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e032      	b.n	800a18a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 0304 	and.w	r3, r3, #4
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d008      	beq.n	800a142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a130:	4b19      	ldr	r3, [pc, #100]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	4916      	ldr	r1, [pc, #88]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a13e:	4313      	orrs	r3, r2
 800a140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 0308 	and.w	r3, r3, #8
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d009      	beq.n	800a162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a14e:	4b12      	ldr	r3, [pc, #72]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	00db      	lsls	r3, r3, #3
 800a15c:	490e      	ldr	r1, [pc, #56]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a15e:	4313      	orrs	r3, r2
 800a160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a162:	f000 f821 	bl	800a1a8 <HAL_RCC_GetSysClockFreq>
 800a166:	4602      	mov	r2, r0
 800a168:	4b0b      	ldr	r3, [pc, #44]	; (800a198 <HAL_RCC_ClockConfig+0x1bc>)
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	091b      	lsrs	r3, r3, #4
 800a16e:	f003 030f 	and.w	r3, r3, #15
 800a172:	490a      	ldr	r1, [pc, #40]	; (800a19c <HAL_RCC_ClockConfig+0x1c0>)
 800a174:	5ccb      	ldrb	r3, [r1, r3]
 800a176:	fa22 f303 	lsr.w	r3, r2, r3
 800a17a:	4a09      	ldr	r2, [pc, #36]	; (800a1a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a17c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a17e:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <HAL_RCC_ClockConfig+0x1c8>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4618      	mov	r0, r3
 800a184:	f7f8 feee 	bl	8002f64 <HAL_InitTick>

  return HAL_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	40023c00 	.word	0x40023c00
 800a198:	40023800 	.word	0x40023800
 800a19c:	08018664 	.word	0x08018664
 800a1a0:	20000004 	.word	0x20000004
 800a1a4:	20000014 	.word	0x20000014

0800a1a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a1ac:	b084      	sub	sp, #16
 800a1ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	607b      	str	r3, [r7, #4]
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60fb      	str	r3, [r7, #12]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a1c0:	4b67      	ldr	r3, [pc, #412]	; (800a360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	f003 030c 	and.w	r3, r3, #12
 800a1c8:	2b08      	cmp	r3, #8
 800a1ca:	d00d      	beq.n	800a1e8 <HAL_RCC_GetSysClockFreq+0x40>
 800a1cc:	2b08      	cmp	r3, #8
 800a1ce:	f200 80bd 	bhi.w	800a34c <HAL_RCC_GetSysClockFreq+0x1a4>
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d002      	beq.n	800a1dc <HAL_RCC_GetSysClockFreq+0x34>
 800a1d6:	2b04      	cmp	r3, #4
 800a1d8:	d003      	beq.n	800a1e2 <HAL_RCC_GetSysClockFreq+0x3a>
 800a1da:	e0b7      	b.n	800a34c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a1dc:	4b61      	ldr	r3, [pc, #388]	; (800a364 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a1de:	60bb      	str	r3, [r7, #8]
       break;
 800a1e0:	e0b7      	b.n	800a352 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a1e2:	4b60      	ldr	r3, [pc, #384]	; (800a364 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a1e4:	60bb      	str	r3, [r7, #8]
      break;
 800a1e6:	e0b4      	b.n	800a352 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a1e8:	4b5d      	ldr	r3, [pc, #372]	; (800a360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a1f2:	4b5b      	ldr	r3, [pc, #364]	; (800a360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d04d      	beq.n	800a29a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1fe:	4b58      	ldr	r3, [pc, #352]	; (800a360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	099b      	lsrs	r3, r3, #6
 800a204:	461a      	mov	r2, r3
 800a206:	f04f 0300 	mov.w	r3, #0
 800a20a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a20e:	f04f 0100 	mov.w	r1, #0
 800a212:	ea02 0800 	and.w	r8, r2, r0
 800a216:	ea03 0901 	and.w	r9, r3, r1
 800a21a:	4640      	mov	r0, r8
 800a21c:	4649      	mov	r1, r9
 800a21e:	f04f 0200 	mov.w	r2, #0
 800a222:	f04f 0300 	mov.w	r3, #0
 800a226:	014b      	lsls	r3, r1, #5
 800a228:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a22c:	0142      	lsls	r2, r0, #5
 800a22e:	4610      	mov	r0, r2
 800a230:	4619      	mov	r1, r3
 800a232:	ebb0 0008 	subs.w	r0, r0, r8
 800a236:	eb61 0109 	sbc.w	r1, r1, r9
 800a23a:	f04f 0200 	mov.w	r2, #0
 800a23e:	f04f 0300 	mov.w	r3, #0
 800a242:	018b      	lsls	r3, r1, #6
 800a244:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a248:	0182      	lsls	r2, r0, #6
 800a24a:	1a12      	subs	r2, r2, r0
 800a24c:	eb63 0301 	sbc.w	r3, r3, r1
 800a250:	f04f 0000 	mov.w	r0, #0
 800a254:	f04f 0100 	mov.w	r1, #0
 800a258:	00d9      	lsls	r1, r3, #3
 800a25a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a25e:	00d0      	lsls	r0, r2, #3
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	eb12 0208 	adds.w	r2, r2, r8
 800a268:	eb43 0309 	adc.w	r3, r3, r9
 800a26c:	f04f 0000 	mov.w	r0, #0
 800a270:	f04f 0100 	mov.w	r1, #0
 800a274:	0299      	lsls	r1, r3, #10
 800a276:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a27a:	0290      	lsls	r0, r2, #10
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	4610      	mov	r0, r2
 800a282:	4619      	mov	r1, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	461a      	mov	r2, r3
 800a288:	f04f 0300 	mov.w	r3, #0
 800a28c:	f7f6 fd6c 	bl	8000d68 <__aeabi_uldivmod>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	4613      	mov	r3, r2
 800a296:	60fb      	str	r3, [r7, #12]
 800a298:	e04a      	b.n	800a330 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a29a:	4b31      	ldr	r3, [pc, #196]	; (800a360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	099b      	lsrs	r3, r3, #6
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	f04f 0300 	mov.w	r3, #0
 800a2a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a2aa:	f04f 0100 	mov.w	r1, #0
 800a2ae:	ea02 0400 	and.w	r4, r2, r0
 800a2b2:	ea03 0501 	and.w	r5, r3, r1
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	f04f 0200 	mov.w	r2, #0
 800a2be:	f04f 0300 	mov.w	r3, #0
 800a2c2:	014b      	lsls	r3, r1, #5
 800a2c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a2c8:	0142      	lsls	r2, r0, #5
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	1b00      	subs	r0, r0, r4
 800a2d0:	eb61 0105 	sbc.w	r1, r1, r5
 800a2d4:	f04f 0200 	mov.w	r2, #0
 800a2d8:	f04f 0300 	mov.w	r3, #0
 800a2dc:	018b      	lsls	r3, r1, #6
 800a2de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a2e2:	0182      	lsls	r2, r0, #6
 800a2e4:	1a12      	subs	r2, r2, r0
 800a2e6:	eb63 0301 	sbc.w	r3, r3, r1
 800a2ea:	f04f 0000 	mov.w	r0, #0
 800a2ee:	f04f 0100 	mov.w	r1, #0
 800a2f2:	00d9      	lsls	r1, r3, #3
 800a2f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a2f8:	00d0      	lsls	r0, r2, #3
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	1912      	adds	r2, r2, r4
 800a300:	eb45 0303 	adc.w	r3, r5, r3
 800a304:	f04f 0000 	mov.w	r0, #0
 800a308:	f04f 0100 	mov.w	r1, #0
 800a30c:	0299      	lsls	r1, r3, #10
 800a30e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a312:	0290      	lsls	r0, r2, #10
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4610      	mov	r0, r2
 800a31a:	4619      	mov	r1, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	461a      	mov	r2, r3
 800a320:	f04f 0300 	mov.w	r3, #0
 800a324:	f7f6 fd20 	bl	8000d68 <__aeabi_uldivmod>
 800a328:	4602      	mov	r2, r0
 800a32a:	460b      	mov	r3, r1
 800a32c:	4613      	mov	r3, r2
 800a32e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a330:	4b0b      	ldr	r3, [pc, #44]	; (800a360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	0c1b      	lsrs	r3, r3, #16
 800a336:	f003 0303 	and.w	r3, r3, #3
 800a33a:	3301      	adds	r3, #1
 800a33c:	005b      	lsls	r3, r3, #1
 800a33e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	fbb2 f3f3 	udiv	r3, r2, r3
 800a348:	60bb      	str	r3, [r7, #8]
      break;
 800a34a:	e002      	b.n	800a352 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a34c:	4b05      	ldr	r3, [pc, #20]	; (800a364 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a34e:	60bb      	str	r3, [r7, #8]
      break;
 800a350:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a352:	68bb      	ldr	r3, [r7, #8]
}
 800a354:	4618      	mov	r0, r3
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a35e:	bf00      	nop
 800a360:	40023800 	.word	0x40023800
 800a364:	00f42400 	.word	0x00f42400

0800a368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a368:	b480      	push	{r7}
 800a36a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a36c:	4b03      	ldr	r3, [pc, #12]	; (800a37c <HAL_RCC_GetHCLKFreq+0x14>)
 800a36e:	681b      	ldr	r3, [r3, #0]
}
 800a370:	4618      	mov	r0, r3
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	20000004 	.word	0x20000004

0800a380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a384:	f7ff fff0 	bl	800a368 <HAL_RCC_GetHCLKFreq>
 800a388:	4602      	mov	r2, r0
 800a38a:	4b05      	ldr	r3, [pc, #20]	; (800a3a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	0a9b      	lsrs	r3, r3, #10
 800a390:	f003 0307 	and.w	r3, r3, #7
 800a394:	4903      	ldr	r1, [pc, #12]	; (800a3a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a396:	5ccb      	ldrb	r3, [r1, r3]
 800a398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	40023800 	.word	0x40023800
 800a3a4:	08018674 	.word	0x08018674

0800a3a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a3ac:	f7ff ffdc 	bl	800a368 <HAL_RCC_GetHCLKFreq>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	4b05      	ldr	r3, [pc, #20]	; (800a3c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	0b5b      	lsrs	r3, r3, #13
 800a3b8:	f003 0307 	and.w	r3, r3, #7
 800a3bc:	4903      	ldr	r1, [pc, #12]	; (800a3cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a3be:	5ccb      	ldrb	r3, [r1, r3]
 800a3c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	40023800 	.word	0x40023800
 800a3cc:	08018674 	.word	0x08018674

0800a3d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	220f      	movs	r2, #15
 800a3de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a3e0:	4b12      	ldr	r3, [pc, #72]	; (800a42c <HAL_RCC_GetClockConfig+0x5c>)
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	f003 0203 	and.w	r2, r3, #3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a3ec:	4b0f      	ldr	r3, [pc, #60]	; (800a42c <HAL_RCC_GetClockConfig+0x5c>)
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a3f8:	4b0c      	ldr	r3, [pc, #48]	; (800a42c <HAL_RCC_GetClockConfig+0x5c>)
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a404:	4b09      	ldr	r3, [pc, #36]	; (800a42c <HAL_RCC_GetClockConfig+0x5c>)
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	08db      	lsrs	r3, r3, #3
 800a40a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a412:	4b07      	ldr	r3, [pc, #28]	; (800a430 <HAL_RCC_GetClockConfig+0x60>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 020f 	and.w	r2, r3, #15
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	601a      	str	r2, [r3, #0]
}
 800a41e:	bf00      	nop
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	40023800 	.word	0x40023800
 800a430:	40023c00 	.word	0x40023c00

0800a434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10b      	bne.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d105      	bne.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a464:	2b00      	cmp	r3, #0
 800a466:	d075      	beq.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a468:	4bad      	ldr	r3, [pc, #692]	; (800a720 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a46e:	f7fd fc91 	bl	8007d94 <HAL_GetTick>
 800a472:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a474:	e008      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a476:	f7fd fc8d 	bl	8007d94 <HAL_GetTick>
 800a47a:	4602      	mov	r2, r0
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	2b02      	cmp	r3, #2
 800a482:	d901      	bls.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a484:	2303      	movs	r3, #3
 800a486:	e18b      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a488:	4ba6      	ldr	r3, [pc, #664]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1f0      	bne.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 0301 	and.w	r3, r3, #1
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d009      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	019a      	lsls	r2, r3, #6
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	071b      	lsls	r3, r3, #28
 800a4ac:	499d      	ldr	r1, [pc, #628]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 0302 	and.w	r3, r3, #2
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d01f      	beq.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a4c0:	4b98      	ldr	r3, [pc, #608]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a4c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4c6:	0f1b      	lsrs	r3, r3, #28
 800a4c8:	f003 0307 	and.w	r3, r3, #7
 800a4cc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	019a      	lsls	r2, r3, #6
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	061b      	lsls	r3, r3, #24
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	071b      	lsls	r3, r3, #28
 800a4e0:	4990      	ldr	r1, [pc, #576]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a4e8:	4b8e      	ldr	r3, [pc, #568]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a4ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4ee:	f023 021f 	bic.w	r2, r3, #31
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	498a      	ldr	r1, [pc, #552]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00d      	beq.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	019a      	lsls	r2, r3, #6
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	061b      	lsls	r3, r3, #24
 800a518:	431a      	orrs	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	071b      	lsls	r3, r3, #28
 800a520:	4980      	ldr	r1, [pc, #512]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a522:	4313      	orrs	r3, r2
 800a524:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a528:	4b7d      	ldr	r3, [pc, #500]	; (800a720 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a52a:	2201      	movs	r2, #1
 800a52c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a52e:	f7fd fc31 	bl	8007d94 <HAL_GetTick>
 800a532:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a534:	e008      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a536:	f7fd fc2d 	bl	8007d94 <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	2b02      	cmp	r3, #2
 800a542:	d901      	bls.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a544:	2303      	movs	r3, #3
 800a546:	e12b      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a548:	4b76      	ldr	r3, [pc, #472]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d0f0      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 0304 	and.w	r3, r3, #4
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d105      	bne.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d079      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a56c:	4b6e      	ldr	r3, [pc, #440]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a56e:	2200      	movs	r2, #0
 800a570:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a572:	f7fd fc0f 	bl	8007d94 <HAL_GetTick>
 800a576:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a578:	e008      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a57a:	f7fd fc0b 	bl	8007d94 <HAL_GetTick>
 800a57e:	4602      	mov	r2, r0
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	2b02      	cmp	r3, #2
 800a586:	d901      	bls.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e109      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a58c:	4b65      	ldr	r3, [pc, #404]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a598:	d0ef      	beq.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0304 	and.w	r3, r3, #4
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d020      	beq.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a5a6:	4b5f      	ldr	r3, [pc, #380]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ac:	0f1b      	lsrs	r3, r3, #28
 800a5ae:	f003 0307 	and.w	r3, r3, #7
 800a5b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	019a      	lsls	r2, r3, #6
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	061b      	lsls	r3, r3, #24
 800a5c0:	431a      	orrs	r2, r3
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	071b      	lsls	r3, r3, #28
 800a5c6:	4957      	ldr	r1, [pc, #348]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a5ce:	4b55      	ldr	r3, [pc, #340]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a5d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a1b      	ldr	r3, [r3, #32]
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	021b      	lsls	r3, r3, #8
 800a5e0:	4950      	ldr	r1, [pc, #320]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 0308 	and.w	r3, r3, #8
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d01e      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a5f4:	4b4b      	ldr	r3, [pc, #300]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5fa:	0e1b      	lsrs	r3, r3, #24
 800a5fc:	f003 030f 	and.w	r3, r3, #15
 800a600:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	019a      	lsls	r2, r3, #6
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	061b      	lsls	r3, r3, #24
 800a60c:	431a      	orrs	r2, r3
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	071b      	lsls	r3, r3, #28
 800a614:	4943      	ldr	r1, [pc, #268]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a616:	4313      	orrs	r3, r2
 800a618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a61c:	4b41      	ldr	r3, [pc, #260]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a61e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a622:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62a:	493e      	ldr	r1, [pc, #248]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a62c:	4313      	orrs	r3, r2
 800a62e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a632:	4b3d      	ldr	r3, [pc, #244]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a634:	2201      	movs	r2, #1
 800a636:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a638:	f7fd fbac 	bl	8007d94 <HAL_GetTick>
 800a63c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a63e:	e008      	b.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a640:	f7fd fba8 	bl	8007d94 <HAL_GetTick>
 800a644:	4602      	mov	r2, r0
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d901      	bls.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a64e:	2303      	movs	r3, #3
 800a650:	e0a6      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a652:	4b34      	ldr	r3, [pc, #208]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a65a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a65e:	d1ef      	bne.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 0320 	and.w	r3, r3, #32
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 808d 	beq.w	800a788 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a66e:	2300      	movs	r3, #0
 800a670:	60fb      	str	r3, [r7, #12]
 800a672:	4b2c      	ldr	r3, [pc, #176]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a676:	4a2b      	ldr	r2, [pc, #172]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a67c:	6413      	str	r3, [r2, #64]	; 0x40
 800a67e:	4b29      	ldr	r3, [pc, #164]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a686:	60fb      	str	r3, [r7, #12]
 800a688:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a68a:	4b28      	ldr	r3, [pc, #160]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a27      	ldr	r2, [pc, #156]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a694:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a696:	f7fd fb7d 	bl	8007d94 <HAL_GetTick>
 800a69a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a69c:	e008      	b.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a69e:	f7fd fb79 	bl	8007d94 <HAL_GetTick>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d901      	bls.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e077      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a6b0:	4b1e      	ldr	r3, [pc, #120]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d0f0      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a6bc:	4b19      	ldr	r3, [pc, #100]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a6be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d039      	beq.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6d4:	693a      	ldr	r2, [r7, #16]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d032      	beq.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a6da:	4b12      	ldr	r3, [pc, #72]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a6dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a6e4:	4b12      	ldr	r3, [pc, #72]	; (800a730 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a6ea:	4b11      	ldr	r3, [pc, #68]	; (800a730 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a6f0:	4a0c      	ldr	r2, [pc, #48]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a6f6:	4b0b      	ldr	r3, [pc, #44]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6fa:	f003 0301 	and.w	r3, r3, #1
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d11e      	bne.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a702:	f7fd fb47 	bl	8007d94 <HAL_GetTick>
 800a706:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a708:	e014      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a70a:	f7fd fb43 	bl	8007d94 <HAL_GetTick>
 800a70e:	4602      	mov	r2, r0
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	f241 3288 	movw	r2, #5000	; 0x1388
 800a718:	4293      	cmp	r3, r2
 800a71a:	d90b      	bls.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800a71c:	2303      	movs	r3, #3
 800a71e:	e03f      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800a720:	42470068 	.word	0x42470068
 800a724:	40023800 	.word	0x40023800
 800a728:	42470070 	.word	0x42470070
 800a72c:	40007000 	.word	0x40007000
 800a730:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a734:	4b1c      	ldr	r3, [pc, #112]	; (800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a738:	f003 0302 	and.w	r3, r3, #2
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d0e4      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a748:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a74c:	d10d      	bne.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a74e:	4b16      	ldr	r3, [pc, #88]	; (800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a75e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a762:	4911      	ldr	r1, [pc, #68]	; (800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a764:	4313      	orrs	r3, r2
 800a766:	608b      	str	r3, [r1, #8]
 800a768:	e005      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a76a:	4b0f      	ldr	r3, [pc, #60]	; (800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	4a0e      	ldr	r2, [pc, #56]	; (800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a770:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a774:	6093      	str	r3, [r2, #8]
 800a776:	4b0c      	ldr	r3, [pc, #48]	; (800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a778:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a782:	4909      	ldr	r1, [pc, #36]	; (800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a784:	4313      	orrs	r3, r2
 800a786:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0310 	and.w	r3, r3, #16
 800a790:	2b00      	cmp	r3, #0
 800a792:	d004      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a79a:	4b04      	ldr	r3, [pc, #16]	; (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a79c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3718      	adds	r7, #24
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	40023800 	.word	0x40023800
 800a7ac:	424711e0 	.word	0x424711e0

0800a7b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d101      	bne.n	800a7c2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e083      	b.n	800a8ca <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	7f5b      	ldrb	r3, [r3, #29]
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d105      	bne.n	800a7d8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7f8 f9d2 	bl	8002b7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	22ca      	movs	r2, #202	; 0xca
 800a7e4:	625a      	str	r2, [r3, #36]	; 0x24
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2253      	movs	r2, #83	; 0x53
 800a7ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fc26 	bl	800b040 <RTC_EnterInitMode>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d008      	beq.n	800a80c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	22ff      	movs	r2, #255	; 0xff
 800a800:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2204      	movs	r2, #4
 800a806:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	e05e      	b.n	800a8ca <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	6812      	ldr	r2, [r2, #0]
 800a816:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a81a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a81e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	6899      	ldr	r1, [r3, #8]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	685a      	ldr	r2, [r3, #4]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	431a      	orrs	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	431a      	orrs	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	430a      	orrs	r2, r1
 800a83c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	68d2      	ldr	r2, [r2, #12]
 800a846:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	6919      	ldr	r1, [r3, #16]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	041a      	lsls	r2, r3, #16
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	430a      	orrs	r2, r1
 800a85a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68da      	ldr	r2, [r3, #12]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a86a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f003 0320 	and.w	r3, r3, #32
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10e      	bne.n	800a898 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fbb8 	bl	800aff0 <HAL_RTC_WaitForSynchro>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d008      	beq.n	800a898 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	22ff      	movs	r2, #255	; 0xff
 800a88c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2204      	movs	r2, #4
 800a892:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e018      	b.n	800a8ca <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a8a6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	699a      	ldr	r2, [r3, #24]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	430a      	orrs	r2, r1
 800a8b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	22ff      	movs	r2, #255	; 0xff
 800a8c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
  }
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a8d2:	b590      	push	{r4, r7, lr}
 800a8d4:	b087      	sub	sp, #28
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	60f8      	str	r0, [r7, #12]
 800a8da:	60b9      	str	r1, [r7, #8]
 800a8dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	7f1b      	ldrb	r3, [r3, #28]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d101      	bne.n	800a8ee <HAL_RTC_SetTime+0x1c>
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	e0aa      	b.n	800aa44 <HAL_RTC_SetTime+0x172>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d126      	bne.n	800a94e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d102      	bne.n	800a914 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	2200      	movs	r2, #0
 800a912:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	4618      	mov	r0, r3
 800a91a:	f000 fbbd 	bl	800b098 <RTC_ByteToBcd2>
 800a91e:	4603      	mov	r3, r0
 800a920:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	785b      	ldrb	r3, [r3, #1]
 800a926:	4618      	mov	r0, r3
 800a928:	f000 fbb6 	bl	800b098 <RTC_ByteToBcd2>
 800a92c:	4603      	mov	r3, r0
 800a92e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a930:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	789b      	ldrb	r3, [r3, #2]
 800a936:	4618      	mov	r0, r3
 800a938:	f000 fbae 	bl	800b098 <RTC_ByteToBcd2>
 800a93c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a93e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	78db      	ldrb	r3, [r3, #3]
 800a946:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a948:	4313      	orrs	r3, r2
 800a94a:	617b      	str	r3, [r7, #20]
 800a94c:	e018      	b.n	800a980 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d102      	bne.n	800a962 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	2200      	movs	r2, #0
 800a960:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	785b      	ldrb	r3, [r3, #1]
 800a96c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a96e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a974:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	78db      	ldrb	r3, [r3, #3]
 800a97a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a97c:	4313      	orrs	r3, r2
 800a97e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	22ca      	movs	r2, #202	; 0xca
 800a986:	625a      	str	r2, [r3, #36]	; 0x24
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2253      	movs	r2, #83	; 0x53
 800a98e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f000 fb55 	bl	800b040 <RTC_EnterInitMode>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00b      	beq.n	800a9b4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	22ff      	movs	r2, #255	; 0xff
 800a9a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2204      	movs	r2, #4
 800a9a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e047      	b.n	800aa44 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a9be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a9c2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	689a      	ldr	r2, [r3, #8]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a9d2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6899      	ldr	r1, [r3, #8]
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	68da      	ldr	r2, [r3, #12]
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	431a      	orrs	r2, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	430a      	orrs	r2, r1
 800a9ea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68da      	ldr	r2, [r3, #12]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a9fa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	f003 0320 	and.w	r3, r3, #32
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d111      	bne.n	800aa2e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f000 faf0 	bl	800aff0 <HAL_RTC_WaitForSynchro>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d00b      	beq.n	800aa2e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	22ff      	movs	r2, #255	; 0xff
 800aa1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2204      	movs	r2, #4
 800aa22:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e00a      	b.n	800aa44 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	22ff      	movs	r2, #255	; 0xff
 800aa34:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800aa42:	2300      	movs	r3, #0
  }
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	371c      	adds	r7, #28
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd90      	pop	{r4, r7, pc}

0800aa4c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b086      	sub	sp, #24
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800aa7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800aa82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	0c1b      	lsrs	r3, r3, #16
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa8e:	b2da      	uxtb	r2, r3
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	0a1b      	lsrs	r3, r3, #8
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaac:	b2da      	uxtb	r2, r3
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	0c1b      	lsrs	r3, r3, #16
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d11a      	bne.n	800aafe <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	4618      	mov	r0, r3
 800aace:	f000 fb01 	bl	800b0d4 <RTC_Bcd2ToByte>
 800aad2:	4603      	mov	r3, r0
 800aad4:	461a      	mov	r2, r3
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	785b      	ldrb	r3, [r3, #1]
 800aade:	4618      	mov	r0, r3
 800aae0:	f000 faf8 	bl	800b0d4 <RTC_Bcd2ToByte>
 800aae4:	4603      	mov	r3, r0
 800aae6:	461a      	mov	r2, r3
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	789b      	ldrb	r3, [r3, #2]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 faef 	bl	800b0d4 <RTC_Bcd2ToByte>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	461a      	mov	r2, r3
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3718      	adds	r7, #24
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ab08:	b590      	push	{r4, r7, lr}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ab14:	2300      	movs	r3, #0
 800ab16:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	7f1b      	ldrb	r3, [r3, #28]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d101      	bne.n	800ab24 <HAL_RTC_SetDate+0x1c>
 800ab20:	2302      	movs	r3, #2
 800ab22:	e094      	b.n	800ac4e <HAL_RTC_SetDate+0x146>
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2201      	movs	r2, #1
 800ab28:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10e      	bne.n	800ab54 <HAL_RTC_SetDate+0x4c>
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	785b      	ldrb	r3, [r3, #1]
 800ab3a:	f003 0310 	and.w	r3, r3, #16
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d008      	beq.n	800ab54 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	785b      	ldrb	r3, [r3, #1]
 800ab46:	f023 0310 	bic.w	r3, r3, #16
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	330a      	adds	r3, #10
 800ab4e:	b2da      	uxtb	r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d11c      	bne.n	800ab94 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	78db      	ldrb	r3, [r3, #3]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f000 fa9a 	bl	800b098 <RTC_ByteToBcd2>
 800ab64:	4603      	mov	r3, r0
 800ab66:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	785b      	ldrb	r3, [r3, #1]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f000 fa93 	bl	800b098 <RTC_ByteToBcd2>
 800ab72:	4603      	mov	r3, r0
 800ab74:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ab76:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	789b      	ldrb	r3, [r3, #2]
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f000 fa8b 	bl	800b098 <RTC_ByteToBcd2>
 800ab82:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ab84:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	617b      	str	r3, [r7, #20]
 800ab92:	e00e      	b.n	800abb2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	78db      	ldrb	r3, [r3, #3]
 800ab98:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	785b      	ldrb	r3, [r3, #1]
 800ab9e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800aba0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800aba6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800abae:	4313      	orrs	r3, r2
 800abb0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	22ca      	movs	r2, #202	; 0xca
 800abb8:	625a      	str	r2, [r3, #36]	; 0x24
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2253      	movs	r2, #83	; 0x53
 800abc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 fa3c 	bl	800b040 <RTC_EnterInitMode>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00b      	beq.n	800abe6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	22ff      	movs	r2, #255	; 0xff
 800abd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2204      	movs	r2, #4
 800abda:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	e033      	b.n	800ac4e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800abf0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800abf4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68da      	ldr	r2, [r3, #12]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac04:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	f003 0320 	and.w	r3, r3, #32
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d111      	bne.n	800ac38 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f000 f9eb 	bl	800aff0 <HAL_RTC_WaitForSynchro>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00b      	beq.n	800ac38 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	22ff      	movs	r2, #255	; 0xff
 800ac26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2204      	movs	r2, #4
 800ac2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ac34:	2301      	movs	r3, #1
 800ac36:	e00a      	b.n	800ac4e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	22ff      	movs	r2, #255	; 0xff
 800ac3e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2201      	movs	r2, #1
 800ac44:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
  }
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	371c      	adds	r7, #28
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd90      	pop	{r4, r7, pc}

0800ac56 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b086      	sub	sp, #24
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	60f8      	str	r0, [r7, #12]
 800ac5e:	60b9      	str	r1, [r7, #8]
 800ac60:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ac62:	2300      	movs	r3, #0
 800ac64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ac74:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	0c1b      	lsrs	r3, r3, #16
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	0a1b      	lsrs	r3, r3, #8
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	f003 031f 	and.w	r3, r3, #31
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac98:	b2da      	uxtb	r2, r3
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	0b5b      	lsrs	r3, r3, #13
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	f003 0307 	and.w	r3, r3, #7
 800aca8:	b2da      	uxtb	r2, r3
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d11a      	bne.n	800acea <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	78db      	ldrb	r3, [r3, #3]
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 fa0b 	bl	800b0d4 <RTC_Bcd2ToByte>
 800acbe:	4603      	mov	r3, r0
 800acc0:	461a      	mov	r2, r3
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	785b      	ldrb	r3, [r3, #1]
 800acca:	4618      	mov	r0, r3
 800accc:	f000 fa02 	bl	800b0d4 <RTC_Bcd2ToByte>
 800acd0:	4603      	mov	r3, r0
 800acd2:	461a      	mov	r2, r3
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	789b      	ldrb	r3, [r3, #2]
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 f9f9 	bl	800b0d4 <RTC_Bcd2ToByte>
 800ace2:	4603      	mov	r3, r0
 800ace4:	461a      	mov	r2, r3
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3718      	adds	r7, #24
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800acf4:	b590      	push	{r4, r7, lr}
 800acf6:	b089      	sub	sp, #36	; 0x24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800ad00:	2300      	movs	r3, #0
 800ad02:	61fb      	str	r3, [r7, #28]
 800ad04:	2300      	movs	r3, #0
 800ad06:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800ad08:	4b93      	ldr	r3, [pc, #588]	; (800af58 <HAL_RTC_SetAlarm_IT+0x264>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a93      	ldr	r2, [pc, #588]	; (800af5c <HAL_RTC_SetAlarm_IT+0x268>)
 800ad0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad12:	0adb      	lsrs	r3, r3, #11
 800ad14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ad18:	fb02 f303 	mul.w	r3, r2, r3
 800ad1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	7f1b      	ldrb	r3, [r3, #28]
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d101      	bne.n	800ad2a <HAL_RTC_SetAlarm_IT+0x36>
 800ad26:	2302      	movs	r3, #2
 800ad28:	e111      	b.n	800af4e <HAL_RTC_SetAlarm_IT+0x25a>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2202      	movs	r2, #2
 800ad34:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d137      	bne.n	800adac <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d102      	bne.n	800ad50 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 f99f 	bl	800b098 <RTC_ByteToBcd2>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	785b      	ldrb	r3, [r3, #1]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 f998 	bl	800b098 <RTC_ByteToBcd2>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ad6c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	789b      	ldrb	r3, [r3, #2]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f000 f990 	bl	800b098 <RTC_ByteToBcd2>
 800ad78:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ad7a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	78db      	ldrb	r3, [r3, #3]
 800ad82:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ad84:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 f982 	bl	800b098 <RTC_ByteToBcd2>
 800ad94:	4603      	mov	r3, r0
 800ad96:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ad98:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ada0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ada6:	4313      	orrs	r3, r2
 800ada8:	61fb      	str	r3, [r7, #28]
 800adaa:	e023      	b.n	800adf4 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d102      	bne.n	800adc0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	2200      	movs	r2, #0
 800adbe:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	785b      	ldrb	r3, [r3, #1]
 800adca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800adcc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800add2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	78db      	ldrb	r3, [r3, #3]
 800add8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800adda:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ade2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ade4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800adea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800adf0:	4313      	orrs	r3, r2
 800adf2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	685a      	ldr	r2, [r3, #4]
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	699b      	ldr	r3, [r3, #24]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	22ca      	movs	r2, #202	; 0xca
 800ae06:	625a      	str	r2, [r3, #36]	; 0x24
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2253      	movs	r2, #83	; 0x53
 800ae0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae18:	d141      	bne.n	800ae9e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	689a      	ldr	r2, [r3, #8]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae28:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	b2da      	uxtb	r2, r3
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800ae3a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	1e5a      	subs	r2, r3, #1
 800ae40:	617a      	str	r2, [r7, #20]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10b      	bne.n	800ae5e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	22ff      	movs	r2, #255	; 0xff
 800ae4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2203      	movs	r2, #3
 800ae52:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ae5a:	2303      	movs	r3, #3
 800ae5c:	e077      	b.n	800af4e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	f003 0301 	and.w	r3, r3, #1
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d0e7      	beq.n	800ae3c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	69fa      	ldr	r2, [r7, #28]
 800ae72:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	69ba      	ldr	r2, [r7, #24]
 800ae7a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	689a      	ldr	r2, [r3, #8]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae8a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	689a      	ldr	r2, [r3, #8]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ae9a:	609a      	str	r2, [r3, #8]
 800ae9c:	e040      	b.n	800af20 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	689a      	ldr	r2, [r3, #8]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800aeac:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	b2da      	uxtb	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f462 7220 	orn	r2, r2, #640	; 0x280
 800aebe:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	1e5a      	subs	r2, r3, #1
 800aec4:	617a      	str	r2, [r7, #20]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10b      	bne.n	800aee2 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	22ff      	movs	r2, #255	; 0xff
 800aed0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2203      	movs	r2, #3
 800aed6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800aede:	2303      	movs	r3, #3
 800aee0:	e035      	b.n	800af4e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	f003 0302 	and.w	r3, r3, #2
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d0e7      	beq.n	800aec0 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	69fa      	ldr	r2, [r7, #28]
 800aef6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	69ba      	ldr	r2, [r7, #24]
 800aefe:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	689a      	ldr	r2, [r3, #8]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af0e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	689a      	ldr	r2, [r3, #8]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af1e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800af20:	4b0f      	ldr	r3, [pc, #60]	; (800af60 <HAL_RTC_SetAlarm_IT+0x26c>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a0e      	ldr	r2, [pc, #56]	; (800af60 <HAL_RTC_SetAlarm_IT+0x26c>)
 800af26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af2a:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800af2c:	4b0c      	ldr	r3, [pc, #48]	; (800af60 <HAL_RTC_SetAlarm_IT+0x26c>)
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	4a0b      	ldr	r2, [pc, #44]	; (800af60 <HAL_RTC_SetAlarm_IT+0x26c>)
 800af32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af36:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	22ff      	movs	r2, #255	; 0xff
 800af3e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2201      	movs	r2, #1
 800af44:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3724      	adds	r7, #36	; 0x24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd90      	pop	{r4, r7, pc}
 800af56:	bf00      	nop
 800af58:	20000004 	.word	0x20000004
 800af5c:	10624dd3 	.word	0x10624dd3
 800af60:	40013c00 	.word	0x40013c00

0800af64 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af76:	2b00      	cmp	r3, #0
 800af78:	d012      	beq.n	800afa0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af84:	2b00      	cmp	r3, #0
 800af86:	d00b      	beq.n	800afa0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f7fc fc83 	bl	8007894 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	b2da      	uxtb	r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800af9e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d012      	beq.n	800afd4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00b      	beq.n	800afd4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f9bf 	bl	800b340 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f462 7220 	orn	r2, r2, #640	; 0x280
 800afd2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800afd4:	4b05      	ldr	r3, [pc, #20]	; (800afec <HAL_RTC_AlarmIRQHandler+0x88>)
 800afd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800afda:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	775a      	strb	r2, [r3, #29]
}
 800afe2:	bf00      	nop
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	40013c00 	.word	0x40013c00

0800aff0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aff8:	2300      	movs	r3, #0
 800affa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68da      	ldr	r2, [r3, #12]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b00a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b00c:	f7fc fec2 	bl	8007d94 <HAL_GetTick>
 800b010:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b012:	e009      	b.n	800b028 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b014:	f7fc febe 	bl	8007d94 <HAL_GetTick>
 800b018:	4602      	mov	r2, r0
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b022:	d901      	bls.n	800b028 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b024:	2303      	movs	r3, #3
 800b026:	e007      	b.n	800b038 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	f003 0320 	and.w	r3, r3, #32
 800b032:	2b00      	cmp	r3, #0
 800b034:	d0ee      	beq.n	800b014 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b048:	2300      	movs	r3, #0
 800b04a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b056:	2b00      	cmp	r3, #0
 800b058:	d119      	bne.n	800b08e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f04f 32ff 	mov.w	r2, #4294967295
 800b062:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b064:	f7fc fe96 	bl	8007d94 <HAL_GetTick>
 800b068:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b06a:	e009      	b.n	800b080 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b06c:	f7fc fe92 	bl	8007d94 <HAL_GetTick>
 800b070:	4602      	mov	r2, r0
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	1ad3      	subs	r3, r2, r3
 800b076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b07a:	d901      	bls.n	800b080 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800b07c:	2303      	movs	r3, #3
 800b07e:	e007      	b.n	800b090 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d0ee      	beq.n	800b06c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	4603      	mov	r3, r0
 800b0a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800b0a6:	e005      	b.n	800b0b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800b0ae:	79fb      	ldrb	r3, [r7, #7]
 800b0b0:	3b0a      	subs	r3, #10
 800b0b2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800b0b4:	79fb      	ldrb	r3, [r7, #7]
 800b0b6:	2b09      	cmp	r3, #9
 800b0b8:	d8f6      	bhi.n	800b0a8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	011b      	lsls	r3, r3, #4
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	79fb      	ldrb	r3, [r7, #7]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	b2db      	uxtb	r3, r3
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	4603      	mov	r3, r0
 800b0dc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b0e2:	79fb      	ldrb	r3, [r7, #7]
 800b0e4:	091b      	lsrs	r3, r3, #4
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4413      	add	r3, r2
 800b0f0:	005b      	lsls	r3, r3, #1
 800b0f2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800b0f4:	79fb      	ldrb	r3, [r7, #7]
 800b0f6:	f003 030f 	and.w	r3, r3, #15
 800b0fa:	b2da      	uxtb	r2, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	4413      	add	r3, r2
 800b102:	b2db      	uxtb	r3, r3
}
 800b104:	4618      	mov	r0, r3
 800b106:	3714      	adds	r7, #20
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800b110:	b480      	push	{r7}
 800b112:	b087      	sub	sp, #28
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	7f1b      	ldrb	r3, [r3, #28]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d101      	bne.n	800b128 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800b124:	2302      	movs	r3, #2
 800b126:	e0a6      	b.n	800b276 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2201      	movs	r2, #1
 800b12c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2202      	movs	r2, #2
 800b132:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	22ca      	movs	r2, #202	; 0xca
 800b13a:	625a      	str	r2, [r3, #36]	; 0x24
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2253      	movs	r2, #83	; 0x53
 800b142:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d022      	beq.n	800b198 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800b152:	4b4c      	ldr	r3, [pc, #304]	; (800b284 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a4c      	ldr	r2, [pc, #304]	; (800b288 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800b158:	fba2 2303 	umull	r2, r3, r2, r3
 800b15c:	0adb      	lsrs	r3, r3, #11
 800b15e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b162:	fb02 f303 	mul.w	r3, r2, r3
 800b166:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	1e5a      	subs	r2, r3, #1
 800b16c:	617a      	str	r2, [r7, #20]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10b      	bne.n	800b18a <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	22ff      	movs	r2, #255	; 0xff
 800b178:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2203      	movs	r2, #3
 800b17e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b186:	2303      	movs	r3, #3
 800b188:	e075      	b.n	800b276 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	f003 0304 	and.w	r3, r3, #4
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1e7      	bne.n	800b168 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	689a      	ldr	r2, [r3, #8]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1a6:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800b1a8:	4b36      	ldr	r3, [pc, #216]	; (800b284 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a36      	ldr	r2, [pc, #216]	; (800b288 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800b1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b2:	0adb      	lsrs	r3, r3, #11
 800b1b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b1b8:	fb02 f303 	mul.w	r3, r2, r3
 800b1bc:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	1e5a      	subs	r2, r3, #1
 800b1c2:	617a      	str	r2, [r7, #20]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10b      	bne.n	800b1e0 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	22ff      	movs	r2, #255	; 0xff
 800b1ce:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2203      	movs	r2, #3
 800b1d4:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800b1dc:	2303      	movs	r3, #3
 800b1de:	e04a      	b.n	800b276 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	f003 0304 	and.w	r3, r3, #4
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d0e7      	beq.n	800b1be <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	689a      	ldr	r2, [r3, #8]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f022 0207 	bic.w	r2, r2, #7
 800b204:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	6899      	ldr	r1, [r3, #8]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	430a      	orrs	r2, r1
 800b214:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800b216:	4b1d      	ldr	r3, [pc, #116]	; (800b28c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a1c      	ldr	r2, [pc, #112]	; (800b28c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b21c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b220:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800b222:	4b1a      	ldr	r3, [pc, #104]	; (800b28c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	4a19      	ldr	r2, [pc, #100]	; (800b28c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b228:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b22c:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	b2da      	uxtb	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800b23e:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	689a      	ldr	r2, [r3, #8]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b24e:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	689a      	ldr	r2, [r3, #8]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b25e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	22ff      	movs	r2, #255	; 0xff
 800b266:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2201      	movs	r2, #1
 800b26c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	371c      	adds	r7, #28
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	20000004 	.word	0x20000004
 800b288:	10624dd3 	.word	0x10624dd3
 800b28c:	40013c00 	.word	0x40013c00

0800b290 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b298:	2300      	movs	r3, #0
 800b29a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	7f1b      	ldrb	r3, [r3, #28]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d101      	bne.n	800b2a8 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	e047      	b.n	800b338 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2202      	movs	r2, #2
 800b2b2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	22ca      	movs	r2, #202	; 0xca
 800b2ba:	625a      	str	r2, [r3, #36]	; 0x24
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2253      	movs	r2, #83	; 0x53
 800b2c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	689a      	ldr	r2, [r3, #8]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2d2:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	689a      	ldr	r2, [r3, #8]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b2e2:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2e4:	f7fc fd56 	bl	8007d94 <HAL_GetTick>
 800b2e8:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800b2ea:	e013      	b.n	800b314 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b2ec:	f7fc fd52 	bl	8007d94 <HAL_GetTick>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2fa:	d90b      	bls.n	800b314 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	22ff      	movs	r2, #255	; 0xff
 800b302:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2203      	movs	r2, #3
 800b308:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800b310:	2303      	movs	r3, #3
 800b312:	e011      	b.n	800b338 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	f003 0304 	and.w	r3, r3, #4
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d0e4      	beq.n	800b2ec <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	22ff      	movs	r2, #255	; 0xff
 800b328:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2201      	movs	r2, #1
 800b32e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d101      	bne.n	800b366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e07b      	b.n	800b45e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d108      	bne.n	800b380 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b376:	d009      	beq.n	800b38c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	61da      	str	r2, [r3, #28]
 800b37e:	e005      	b.n	800b38c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2200      	movs	r2, #0
 800b390:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d106      	bne.n	800b3ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f7f7 fc1a 	bl	8002be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b3d4:	431a      	orrs	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3de:	431a      	orrs	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	f003 0302 	and.w	r3, r3, #2
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	f003 0301 	and.w	r3, r3, #1
 800b3f2:	431a      	orrs	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	699b      	ldr	r3, [r3, #24]
 800b3f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3fc:	431a      	orrs	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	69db      	ldr	r3, [r3, #28]
 800b402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b406:	431a      	orrs	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6a1b      	ldr	r3, [r3, #32]
 800b40c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b410:	ea42 0103 	orr.w	r1, r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b418:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	430a      	orrs	r2, r1
 800b422:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	699b      	ldr	r3, [r3, #24]
 800b428:	0c1b      	lsrs	r3, r3, #16
 800b42a:	f003 0104 	and.w	r1, r3, #4
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b432:	f003 0210 	and.w	r2, r3, #16
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	430a      	orrs	r2, r1
 800b43c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	69da      	ldr	r2, [r3, #28]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b44c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2201      	movs	r2, #1
 800b458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b088      	sub	sp, #32
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	60f8      	str	r0, [r7, #12]
 800b46e:	60b9      	str	r1, [r7, #8]
 800b470:	603b      	str	r3, [r7, #0]
 800b472:	4613      	mov	r3, r2
 800b474:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b476:	2300      	movs	r3, #0
 800b478:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b480:	2b01      	cmp	r3, #1
 800b482:	d101      	bne.n	800b488 <HAL_SPI_Transmit+0x22>
 800b484:	2302      	movs	r3, #2
 800b486:	e126      	b.n	800b6d6 <HAL_SPI_Transmit+0x270>
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b490:	f7fc fc80 	bl	8007d94 <HAL_GetTick>
 800b494:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b496:	88fb      	ldrh	r3, [r7, #6]
 800b498:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d002      	beq.n	800b4ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b4a6:	2302      	movs	r3, #2
 800b4a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b4aa:	e10b      	b.n	800b6c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d002      	beq.n	800b4b8 <HAL_SPI_Transmit+0x52>
 800b4b2:	88fb      	ldrh	r3, [r7, #6]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d102      	bne.n	800b4be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b4bc:	e102      	b.n	800b6c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2203      	movs	r2, #3
 800b4c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	88fa      	ldrh	r2, [r7, #6]
 800b4d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	88fa      	ldrh	r2, [r7, #6]
 800b4dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b504:	d10f      	bne.n	800b526 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b514:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b524:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b530:	2b40      	cmp	r3, #64	; 0x40
 800b532:	d007      	beq.n	800b544 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b542:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b54c:	d14b      	bne.n	800b5e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d002      	beq.n	800b55c <HAL_SPI_Transmit+0xf6>
 800b556:	8afb      	ldrh	r3, [r7, #22]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d13e      	bne.n	800b5da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b560:	881a      	ldrh	r2, [r3, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56c:	1c9a      	adds	r2, r3, #2
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b576:	b29b      	uxth	r3, r3
 800b578:	3b01      	subs	r3, #1
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b580:	e02b      	b.n	800b5da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	f003 0302 	and.w	r3, r3, #2
 800b58c:	2b02      	cmp	r3, #2
 800b58e:	d112      	bne.n	800b5b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b594:	881a      	ldrh	r2, [r3, #0]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a0:	1c9a      	adds	r2, r3, #2
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	86da      	strh	r2, [r3, #54]	; 0x36
 800b5b4:	e011      	b.n	800b5da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5b6:	f7fc fbed 	bl	8007d94 <HAL_GetTick>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	683a      	ldr	r2, [r7, #0]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d803      	bhi.n	800b5ce <HAL_SPI_Transmit+0x168>
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5cc:	d102      	bne.n	800b5d4 <HAL_SPI_Transmit+0x16e>
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d102      	bne.n	800b5da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b5d8:	e074      	b.n	800b6c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1ce      	bne.n	800b582 <HAL_SPI_Transmit+0x11c>
 800b5e4:	e04c      	b.n	800b680 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <HAL_SPI_Transmit+0x18e>
 800b5ee:	8afb      	ldrh	r3, [r7, #22]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d140      	bne.n	800b676 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	330c      	adds	r3, #12
 800b5fe:	7812      	ldrb	r2, [r2, #0]
 800b600:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b606:	1c5a      	adds	r2, r3, #1
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b610:	b29b      	uxth	r3, r3
 800b612:	3b01      	subs	r3, #1
 800b614:	b29a      	uxth	r2, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b61a:	e02c      	b.n	800b676 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	f003 0302 	and.w	r3, r3, #2
 800b626:	2b02      	cmp	r3, #2
 800b628:	d113      	bne.n	800b652 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	330c      	adds	r3, #12
 800b634:	7812      	ldrb	r2, [r2, #0]
 800b636:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63c:	1c5a      	adds	r2, r3, #1
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b646:	b29b      	uxth	r3, r3
 800b648:	3b01      	subs	r3, #1
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	86da      	strh	r2, [r3, #54]	; 0x36
 800b650:	e011      	b.n	800b676 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b652:	f7fc fb9f 	bl	8007d94 <HAL_GetTick>
 800b656:	4602      	mov	r2, r0
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d803      	bhi.n	800b66a <HAL_SPI_Transmit+0x204>
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b668:	d102      	bne.n	800b670 <HAL_SPI_Transmit+0x20a>
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d102      	bne.n	800b676 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b670:	2303      	movs	r3, #3
 800b672:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b674:	e026      	b.n	800b6c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1cd      	bne.n	800b61c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b680:	69ba      	ldr	r2, [r7, #24]
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f000 fbcb 	bl	800be20 <SPI_EndRxTxTransaction>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2220      	movs	r2, #32
 800b694:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10a      	bne.n	800b6b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b69e:	2300      	movs	r3, #0
 800b6a0:	613b      	str	r3, [r7, #16]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	613b      	str	r3, [r7, #16]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	613b      	str	r3, [r7, #16]
 800b6b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d002      	beq.n	800b6c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	77fb      	strb	r3, [r7, #31]
 800b6c0:	e000      	b.n	800b6c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b6c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b6d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3720      	adds	r7, #32
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b088      	sub	sp, #32
 800b6e2:	af02      	add	r7, sp, #8
 800b6e4:	60f8      	str	r0, [r7, #12]
 800b6e6:	60b9      	str	r1, [r7, #8]
 800b6e8:	603b      	str	r3, [r7, #0]
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6fa:	d112      	bne.n	800b722 <HAL_SPI_Receive+0x44>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d10e      	bne.n	800b722 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2204      	movs	r2, #4
 800b708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b70c:	88fa      	ldrh	r2, [r7, #6]
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	4613      	mov	r3, r2
 800b714:	68ba      	ldr	r2, [r7, #8]
 800b716:	68b9      	ldr	r1, [r7, #8]
 800b718:	68f8      	ldr	r0, [r7, #12]
 800b71a:	f000 f8f1 	bl	800b900 <HAL_SPI_TransmitReceive>
 800b71e:	4603      	mov	r3, r0
 800b720:	e0ea      	b.n	800b8f8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d101      	bne.n	800b730 <HAL_SPI_Receive+0x52>
 800b72c:	2302      	movs	r3, #2
 800b72e:	e0e3      	b.n	800b8f8 <HAL_SPI_Receive+0x21a>
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2201      	movs	r2, #1
 800b734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b738:	f7fc fb2c 	bl	8007d94 <HAL_GetTick>
 800b73c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b744:	b2db      	uxtb	r3, r3
 800b746:	2b01      	cmp	r3, #1
 800b748:	d002      	beq.n	800b750 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b74a:	2302      	movs	r3, #2
 800b74c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b74e:	e0ca      	b.n	800b8e6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d002      	beq.n	800b75c <HAL_SPI_Receive+0x7e>
 800b756:	88fb      	ldrh	r3, [r7, #6]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d102      	bne.n	800b762 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b760:	e0c1      	b.n	800b8e6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2204      	movs	r2, #4
 800b766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2200      	movs	r2, #0
 800b76e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	88fa      	ldrh	r2, [r7, #6]
 800b77a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	88fa      	ldrh	r2, [r7, #6]
 800b780:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2200      	movs	r2, #0
 800b786:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2200      	movs	r2, #0
 800b78c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2200      	movs	r2, #0
 800b798:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2200      	movs	r2, #0
 800b79e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7a8:	d10f      	bne.n	800b7ca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b7c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7d4:	2b40      	cmp	r3, #64	; 0x40
 800b7d6:	d007      	beq.n	800b7e8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d162      	bne.n	800b8b6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b7f0:	e02e      	b.n	800b850 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	f003 0301 	and.w	r3, r3, #1
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d115      	bne.n	800b82c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f103 020c 	add.w	r2, r3, #12
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b80c:	7812      	ldrb	r2, [r2, #0]
 800b80e:	b2d2      	uxtb	r2, r2
 800b810:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b816:	1c5a      	adds	r2, r3, #1
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b820:	b29b      	uxth	r3, r3
 800b822:	3b01      	subs	r3, #1
 800b824:	b29a      	uxth	r2, r3
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b82a:	e011      	b.n	800b850 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b82c:	f7fc fab2 	bl	8007d94 <HAL_GetTick>
 800b830:	4602      	mov	r2, r0
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	1ad3      	subs	r3, r2, r3
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d803      	bhi.n	800b844 <HAL_SPI_Receive+0x166>
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b842:	d102      	bne.n	800b84a <HAL_SPI_Receive+0x16c>
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d102      	bne.n	800b850 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b84a:	2303      	movs	r3, #3
 800b84c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b84e:	e04a      	b.n	800b8e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b854:	b29b      	uxth	r3, r3
 800b856:	2b00      	cmp	r3, #0
 800b858:	d1cb      	bne.n	800b7f2 <HAL_SPI_Receive+0x114>
 800b85a:	e031      	b.n	800b8c0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	f003 0301 	and.w	r3, r3, #1
 800b866:	2b01      	cmp	r3, #1
 800b868:	d113      	bne.n	800b892 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	68da      	ldr	r2, [r3, #12]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b874:	b292      	uxth	r2, r2
 800b876:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b87c:	1c9a      	adds	r2, r3, #2
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b886:	b29b      	uxth	r3, r3
 800b888:	3b01      	subs	r3, #1
 800b88a:	b29a      	uxth	r2, r3
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b890:	e011      	b.n	800b8b6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b892:	f7fc fa7f 	bl	8007d94 <HAL_GetTick>
 800b896:	4602      	mov	r2, r0
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	683a      	ldr	r2, [r7, #0]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d803      	bhi.n	800b8aa <HAL_SPI_Receive+0x1cc>
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a8:	d102      	bne.n	800b8b0 <HAL_SPI_Receive+0x1d2>
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d102      	bne.n	800b8b6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b8b4:	e017      	b.n	800b8e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1cd      	bne.n	800b85c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	6839      	ldr	r1, [r7, #0]
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f000 fa45 	bl	800bd54 <SPI_EndRxTransaction>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2220      	movs	r2, #32
 800b8d4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d002      	beq.n	800b8e4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	75fb      	strb	r3, [r7, #23]
 800b8e2:	e000      	b.n	800b8e6 <HAL_SPI_Receive+0x208>
  }

error :
 800b8e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b8f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3718      	adds	r7, #24
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b08c      	sub	sp, #48	; 0x30
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
 800b90c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b90e:	2301      	movs	r3, #1
 800b910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b912:	2300      	movs	r3, #0
 800b914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d101      	bne.n	800b926 <HAL_SPI_TransmitReceive+0x26>
 800b922:	2302      	movs	r3, #2
 800b924:	e18a      	b.n	800bc3c <HAL_SPI_TransmitReceive+0x33c>
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b92e:	f7fc fa31 	bl	8007d94 <HAL_GetTick>
 800b932:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b93a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b944:	887b      	ldrh	r3, [r7, #2]
 800b946:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b948:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d00f      	beq.n	800b970 <HAL_SPI_TransmitReceive+0x70>
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b956:	d107      	bne.n	800b968 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d103      	bne.n	800b968 <HAL_SPI_TransmitReceive+0x68>
 800b960:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b964:	2b04      	cmp	r3, #4
 800b966:	d003      	beq.n	800b970 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b968:	2302      	movs	r3, #2
 800b96a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b96e:	e15b      	b.n	800bc28 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d005      	beq.n	800b982 <HAL_SPI_TransmitReceive+0x82>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <HAL_SPI_TransmitReceive+0x82>
 800b97c:	887b      	ldrh	r3, [r7, #2]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d103      	bne.n	800b98a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b982:	2301      	movs	r3, #1
 800b984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b988:	e14e      	b.n	800bc28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b04      	cmp	r3, #4
 800b994:	d003      	beq.n	800b99e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2205      	movs	r2, #5
 800b99a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	887a      	ldrh	r2, [r7, #2]
 800b9ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	887a      	ldrh	r2, [r7, #2]
 800b9b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	68ba      	ldr	r2, [r7, #8]
 800b9ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	887a      	ldrh	r2, [r7, #2]
 800b9c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	887a      	ldrh	r2, [r7, #2]
 800b9c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9de:	2b40      	cmp	r3, #64	; 0x40
 800b9e0:	d007      	beq.n	800b9f2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9fa:	d178      	bne.n	800baee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <HAL_SPI_TransmitReceive+0x10a>
 800ba04:	8b7b      	ldrh	r3, [r7, #26]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d166      	bne.n	800bad8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba0e:	881a      	ldrh	r2, [r3, #0]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba1a:	1c9a      	adds	r2, r3, #2
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	3b01      	subs	r3, #1
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba2e:	e053      	b.n	800bad8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	f003 0302 	and.w	r3, r3, #2
 800ba3a:	2b02      	cmp	r3, #2
 800ba3c:	d11b      	bne.n	800ba76 <HAL_SPI_TransmitReceive+0x176>
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d016      	beq.n	800ba76 <HAL_SPI_TransmitReceive+0x176>
 800ba48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d113      	bne.n	800ba76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba52:	881a      	ldrh	r2, [r3, #0]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba5e:	1c9a      	adds	r2, r3, #2
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba72:	2300      	movs	r3, #0
 800ba74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d119      	bne.n	800bab8 <HAL_SPI_TransmitReceive+0x1b8>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d014      	beq.n	800bab8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	68da      	ldr	r2, [r3, #12]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba98:	b292      	uxth	r2, r2
 800ba9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa0:	1c9a      	adds	r2, r3, #2
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800baaa:	b29b      	uxth	r3, r3
 800baac:	3b01      	subs	r3, #1
 800baae:	b29a      	uxth	r2, r3
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bab4:	2301      	movs	r3, #1
 800bab6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bab8:	f7fc f96c 	bl	8007d94 <HAL_GetTick>
 800babc:	4602      	mov	r2, r0
 800babe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac0:	1ad3      	subs	r3, r2, r3
 800bac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d807      	bhi.n	800bad8 <HAL_SPI_TransmitReceive+0x1d8>
 800bac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bace:	d003      	beq.n	800bad8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bad0:	2303      	movs	r3, #3
 800bad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bad6:	e0a7      	b.n	800bc28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800badc:	b29b      	uxth	r3, r3
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1a6      	bne.n	800ba30 <HAL_SPI_TransmitReceive+0x130>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1a1      	bne.n	800ba30 <HAL_SPI_TransmitReceive+0x130>
 800baec:	e07c      	b.n	800bbe8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d002      	beq.n	800bafc <HAL_SPI_TransmitReceive+0x1fc>
 800baf6:	8b7b      	ldrh	r3, [r7, #26]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d16b      	bne.n	800bbd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	330c      	adds	r3, #12
 800bb06:	7812      	ldrb	r2, [r2, #0]
 800bb08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb0e:	1c5a      	adds	r2, r3, #1
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	b29a      	uxth	r2, r3
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb22:	e057      	b.n	800bbd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	f003 0302 	and.w	r3, r3, #2
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d11c      	bne.n	800bb6c <HAL_SPI_TransmitReceive+0x26c>
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d017      	beq.n	800bb6c <HAL_SPI_TransmitReceive+0x26c>
 800bb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d114      	bne.n	800bb6c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	330c      	adds	r3, #12
 800bb4c:	7812      	ldrb	r2, [r2, #0]
 800bb4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb54:	1c5a      	adds	r2, r3, #1
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	3b01      	subs	r3, #1
 800bb62:	b29a      	uxth	r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d119      	bne.n	800bbae <HAL_SPI_TransmitReceive+0x2ae>
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d014      	beq.n	800bbae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68da      	ldr	r2, [r3, #12]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb8e:	b2d2      	uxtb	r2, r2
 800bb90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb96:	1c5a      	adds	r2, r3, #1
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	3b01      	subs	r3, #1
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bbae:	f7fc f8f1 	bl	8007d94 <HAL_GetTick>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb6:	1ad3      	subs	r3, r2, r3
 800bbb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d803      	bhi.n	800bbc6 <HAL_SPI_TransmitReceive+0x2c6>
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc4:	d102      	bne.n	800bbcc <HAL_SPI_TransmitReceive+0x2cc>
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d103      	bne.n	800bbd4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bbcc:	2303      	movs	r3, #3
 800bbce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bbd2:	e029      	b.n	800bc28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1a2      	bne.n	800bb24 <HAL_SPI_TransmitReceive+0x224>
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d19d      	bne.n	800bb24 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bbe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f000 f917 	bl	800be20 <SPI_EndRxTxTransaction>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d006      	beq.n	800bc06 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2220      	movs	r2, #32
 800bc02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bc04:	e010      	b.n	800bc28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d10b      	bne.n	800bc26 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc0e:	2300      	movs	r3, #0
 800bc10:	617b      	str	r3, [r7, #20]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	617b      	str	r3, [r7, #20]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	617b      	str	r3, [r7, #20]
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	e000      	b.n	800bc28 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bc26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bc38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3730      	adds	r7, #48	; 0x30
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b088      	sub	sp, #32
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	603b      	str	r3, [r7, #0]
 800bc50:	4613      	mov	r3, r2
 800bc52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bc54:	f7fc f89e 	bl	8007d94 <HAL_GetTick>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5c:	1a9b      	subs	r3, r3, r2
 800bc5e:	683a      	ldr	r2, [r7, #0]
 800bc60:	4413      	add	r3, r2
 800bc62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bc64:	f7fc f896 	bl	8007d94 <HAL_GetTick>
 800bc68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bc6a:	4b39      	ldr	r3, [pc, #228]	; (800bd50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	015b      	lsls	r3, r3, #5
 800bc70:	0d1b      	lsrs	r3, r3, #20
 800bc72:	69fa      	ldr	r2, [r7, #28]
 800bc74:	fb02 f303 	mul.w	r3, r2, r3
 800bc78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc7a:	e054      	b.n	800bd26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc82:	d050      	beq.n	800bd26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bc84:	f7fc f886 	bl	8007d94 <HAL_GetTick>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	1ad3      	subs	r3, r2, r3
 800bc8e:	69fa      	ldr	r2, [r7, #28]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d902      	bls.n	800bc9a <SPI_WaitFlagStateUntilTimeout+0x56>
 800bc94:	69fb      	ldr	r3, [r7, #28]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d13d      	bne.n	800bd16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	685a      	ldr	r2, [r3, #4]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bca8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcb2:	d111      	bne.n	800bcd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcbc:	d004      	beq.n	800bcc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcc6:	d107      	bne.n	800bcd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bce0:	d10f      	bne.n	800bd02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2201      	movs	r2, #1
 800bd06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bd12:	2303      	movs	r3, #3
 800bd14:	e017      	b.n	800bd46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d101      	bne.n	800bd20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	3b01      	subs	r3, #1
 800bd24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	689a      	ldr	r2, [r3, #8]
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	4013      	ands	r3, r2
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	bf0c      	ite	eq
 800bd36:	2301      	moveq	r3, #1
 800bd38:	2300      	movne	r3, #0
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	79fb      	ldrb	r3, [r7, #7]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d19b      	bne.n	800bc7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3720      	adds	r7, #32
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	20000004 	.word	0x20000004

0800bd54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b086      	sub	sp, #24
 800bd58:	af02      	add	r7, sp, #8
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd68:	d111      	bne.n	800bd8e <SPI_EndRxTransaction+0x3a>
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd72:	d004      	beq.n	800bd7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd7c:	d107      	bne.n	800bd8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd8c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd96:	d12a      	bne.n	800bdee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bda0:	d012      	beq.n	800bdc8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	2180      	movs	r1, #128	; 0x80
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f7ff ff49 	bl	800bc44 <SPI_WaitFlagStateUntilTimeout>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d02d      	beq.n	800be14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdbc:	f043 0220 	orr.w	r2, r3, #32
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bdc4:	2303      	movs	r3, #3
 800bdc6:	e026      	b.n	800be16 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f7ff ff36 	bl	800bc44 <SPI_WaitFlagStateUntilTimeout>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d01a      	beq.n	800be14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bde2:	f043 0220 	orr.w	r2, r3, #32
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bdea:	2303      	movs	r3, #3
 800bdec:	e013      	b.n	800be16 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	2101      	movs	r1, #1
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f7ff ff23 	bl	800bc44 <SPI_WaitFlagStateUntilTimeout>
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d007      	beq.n	800be14 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be08:	f043 0220 	orr.w	r2, r3, #32
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800be10:	2303      	movs	r3, #3
 800be12:	e000      	b.n	800be16 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
	...

0800be20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b088      	sub	sp, #32
 800be24:	af02      	add	r7, sp, #8
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800be2c:	4b1b      	ldr	r3, [pc, #108]	; (800be9c <SPI_EndRxTxTransaction+0x7c>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a1b      	ldr	r2, [pc, #108]	; (800bea0 <SPI_EndRxTxTransaction+0x80>)
 800be32:	fba2 2303 	umull	r2, r3, r2, r3
 800be36:	0d5b      	lsrs	r3, r3, #21
 800be38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be3c:	fb02 f303 	mul.w	r3, r2, r3
 800be40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be4a:	d112      	bne.n	800be72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	2200      	movs	r2, #0
 800be54:	2180      	movs	r1, #128	; 0x80
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f7ff fef4 	bl	800bc44 <SPI_WaitFlagStateUntilTimeout>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d016      	beq.n	800be90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be66:	f043 0220 	orr.w	r2, r3, #32
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800be6e:	2303      	movs	r3, #3
 800be70:	e00f      	b.n	800be92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00a      	beq.n	800be8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	3b01      	subs	r3, #1
 800be7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be88:	2b80      	cmp	r3, #128	; 0x80
 800be8a:	d0f2      	beq.n	800be72 <SPI_EndRxTxTransaction+0x52>
 800be8c:	e000      	b.n	800be90 <SPI_EndRxTxTransaction+0x70>
        break;
 800be8e:	bf00      	nop
  }

  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3718      	adds	r7, #24
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	20000004 	.word	0x20000004
 800bea0:	165e9f81 	.word	0x165e9f81

0800bea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d101      	bne.n	800beb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800beb2:	2301      	movs	r3, #1
 800beb4:	e041      	b.n	800bf3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d106      	bne.n	800bed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f839 	bl	800bf42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2202      	movs	r2, #2
 800bed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	3304      	adds	r3, #4
 800bee0:	4619      	mov	r1, r3
 800bee2:	4610      	mov	r0, r2
 800bee4:	f000 faea 	bl	800c4bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3708      	adds	r7, #8
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800bf42:	b480      	push	{r7}
 800bf44:	b083      	sub	sp, #12
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800bf4a:	bf00      	nop
 800bf4c:	370c      	adds	r7, #12
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
	...

0800bf58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d001      	beq.n	800bf70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e04e      	b.n	800c00e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2202      	movs	r2, #2
 800bf74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	68da      	ldr	r2, [r3, #12]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f042 0201 	orr.w	r2, r2, #1
 800bf86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a23      	ldr	r2, [pc, #140]	; (800c01c <HAL_TIM_Base_Start_IT+0xc4>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d022      	beq.n	800bfd8 <HAL_TIM_Base_Start_IT+0x80>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf9a:	d01d      	beq.n	800bfd8 <HAL_TIM_Base_Start_IT+0x80>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a1f      	ldr	r2, [pc, #124]	; (800c020 <HAL_TIM_Base_Start_IT+0xc8>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d018      	beq.n	800bfd8 <HAL_TIM_Base_Start_IT+0x80>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a1e      	ldr	r2, [pc, #120]	; (800c024 <HAL_TIM_Base_Start_IT+0xcc>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d013      	beq.n	800bfd8 <HAL_TIM_Base_Start_IT+0x80>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a1c      	ldr	r2, [pc, #112]	; (800c028 <HAL_TIM_Base_Start_IT+0xd0>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d00e      	beq.n	800bfd8 <HAL_TIM_Base_Start_IT+0x80>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a1b      	ldr	r2, [pc, #108]	; (800c02c <HAL_TIM_Base_Start_IT+0xd4>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d009      	beq.n	800bfd8 <HAL_TIM_Base_Start_IT+0x80>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a19      	ldr	r2, [pc, #100]	; (800c030 <HAL_TIM_Base_Start_IT+0xd8>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d004      	beq.n	800bfd8 <HAL_TIM_Base_Start_IT+0x80>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a18      	ldr	r2, [pc, #96]	; (800c034 <HAL_TIM_Base_Start_IT+0xdc>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d111      	bne.n	800bffc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	f003 0307 	and.w	r3, r3, #7
 800bfe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2b06      	cmp	r3, #6
 800bfe8:	d010      	beq.n	800c00c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f042 0201 	orr.w	r2, r2, #1
 800bff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bffa:	e007      	b.n	800c00c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f042 0201 	orr.w	r2, r2, #1
 800c00a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	40010000 	.word	0x40010000
 800c020:	40000400 	.word	0x40000400
 800c024:	40000800 	.word	0x40000800
 800c028:	40000c00 	.word	0x40000c00
 800c02c:	40010400 	.word	0x40010400
 800c030:	40014000 	.word	0x40014000
 800c034:	40001800 	.word	0x40001800

0800c038 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d101      	bne.n	800c04a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	e041      	b.n	800c0ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b00      	cmp	r3, #0
 800c054:	d106      	bne.n	800c064 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7f6 fe74 	bl	8002d4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2202      	movs	r2, #2
 800c068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	3304      	adds	r3, #4
 800c074:	4619      	mov	r1, r3
 800c076:	4610      	mov	r0, r2
 800c078:	f000 fa20 	bl	800c4bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2201      	movs	r2, #1
 800c080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2201      	movs	r2, #1
 800c098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0cc:	2300      	movs	r3, #0
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3708      	adds	r7, #8
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b082      	sub	sp, #8
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	f003 0302 	and.w	r3, r3, #2
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	d122      	bne.n	800c132 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	f003 0302 	and.w	r3, r3, #2
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	d11b      	bne.n	800c132 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f06f 0202 	mvn.w	r2, #2
 800c102:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	f003 0303 	and.w	r3, r3, #3
 800c114:	2b00      	cmp	r3, #0
 800c116:	d003      	beq.n	800c120 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 f9b1 	bl	800c480 <HAL_TIM_IC_CaptureCallback>
 800c11e:	e005      	b.n	800c12c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 f9a3 	bl	800c46c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 f9b4 	bl	800c494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	691b      	ldr	r3, [r3, #16]
 800c138:	f003 0304 	and.w	r3, r3, #4
 800c13c:	2b04      	cmp	r3, #4
 800c13e:	d122      	bne.n	800c186 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	f003 0304 	and.w	r3, r3, #4
 800c14a:	2b04      	cmp	r3, #4
 800c14c:	d11b      	bne.n	800c186 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f06f 0204 	mvn.w	r2, #4
 800c156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2202      	movs	r2, #2
 800c15c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	699b      	ldr	r3, [r3, #24]
 800c164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d003      	beq.n	800c174 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 f987 	bl	800c480 <HAL_TIM_IC_CaptureCallback>
 800c172:	e005      	b.n	800c180 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 f979 	bl	800c46c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f98a 	bl	800c494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	691b      	ldr	r3, [r3, #16]
 800c18c:	f003 0308 	and.w	r3, r3, #8
 800c190:	2b08      	cmp	r3, #8
 800c192:	d122      	bne.n	800c1da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	f003 0308 	and.w	r3, r3, #8
 800c19e:	2b08      	cmp	r3, #8
 800c1a0:	d11b      	bne.n	800c1da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f06f 0208 	mvn.w	r2, #8
 800c1aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2204      	movs	r2, #4
 800c1b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	69db      	ldr	r3, [r3, #28]
 800c1b8:	f003 0303 	and.w	r3, r3, #3
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d003      	beq.n	800c1c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 f95d 	bl	800c480 <HAL_TIM_IC_CaptureCallback>
 800c1c6:	e005      	b.n	800c1d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 f94f 	bl	800c46c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 f960 	bl	800c494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	691b      	ldr	r3, [r3, #16]
 800c1e0:	f003 0310 	and.w	r3, r3, #16
 800c1e4:	2b10      	cmp	r3, #16
 800c1e6:	d122      	bne.n	800c22e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	f003 0310 	and.w	r3, r3, #16
 800c1f2:	2b10      	cmp	r3, #16
 800c1f4:	d11b      	bne.n	800c22e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f06f 0210 	mvn.w	r2, #16
 800c1fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2208      	movs	r2, #8
 800c204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	69db      	ldr	r3, [r3, #28]
 800c20c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c210:	2b00      	cmp	r3, #0
 800c212:	d003      	beq.n	800c21c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f933 	bl	800c480 <HAL_TIM_IC_CaptureCallback>
 800c21a:	e005      	b.n	800c228 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f925 	bl	800c46c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 f936 	bl	800c494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	691b      	ldr	r3, [r3, #16]
 800c234:	f003 0301 	and.w	r3, r3, #1
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d10e      	bne.n	800c25a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	f003 0301 	and.w	r3, r3, #1
 800c246:	2b01      	cmp	r3, #1
 800c248:	d107      	bne.n	800c25a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f06f 0201 	mvn.w	r2, #1
 800c252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f7f6 fb31 	bl	80028bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c264:	2b80      	cmp	r3, #128	; 0x80
 800c266:	d10e      	bne.n	800c286 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c272:	2b80      	cmp	r3, #128	; 0x80
 800c274:	d107      	bne.n	800c286 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c27e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 fbf1 	bl	800ca68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	691b      	ldr	r3, [r3, #16]
 800c28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c290:	2b40      	cmp	r3, #64	; 0x40
 800c292:	d10e      	bne.n	800c2b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c29e:	2b40      	cmp	r3, #64	; 0x40
 800c2a0:	d107      	bne.n	800c2b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c2aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 f8fb 	bl	800c4a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	f003 0320 	and.w	r3, r3, #32
 800c2bc:	2b20      	cmp	r3, #32
 800c2be:	d10e      	bne.n	800c2de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	f003 0320 	and.w	r3, r3, #32
 800c2ca:	2b20      	cmp	r3, #32
 800c2cc:	d107      	bne.n	800c2de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f06f 0220 	mvn.w	r2, #32
 800c2d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fbbb 	bl	800ca54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c2de:	bf00      	nop
 800c2e0:	3708      	adds	r7, #8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
	...

0800c2e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b086      	sub	sp, #24
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d101      	bne.n	800c306 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c302:	2302      	movs	r3, #2
 800c304:	e0ae      	b.n	800c464 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2201      	movs	r2, #1
 800c30a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2b0c      	cmp	r3, #12
 800c312:	f200 809f 	bhi.w	800c454 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c316:	a201      	add	r2, pc, #4	; (adr r2, 800c31c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c31c:	0800c351 	.word	0x0800c351
 800c320:	0800c455 	.word	0x0800c455
 800c324:	0800c455 	.word	0x0800c455
 800c328:	0800c455 	.word	0x0800c455
 800c32c:	0800c391 	.word	0x0800c391
 800c330:	0800c455 	.word	0x0800c455
 800c334:	0800c455 	.word	0x0800c455
 800c338:	0800c455 	.word	0x0800c455
 800c33c:	0800c3d3 	.word	0x0800c3d3
 800c340:	0800c455 	.word	0x0800c455
 800c344:	0800c455 	.word	0x0800c455
 800c348:	0800c455 	.word	0x0800c455
 800c34c:	0800c413 	.word	0x0800c413
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	68b9      	ldr	r1, [r7, #8]
 800c356:	4618      	mov	r0, r3
 800c358:	f000 f950 	bl	800c5fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	699a      	ldr	r2, [r3, #24]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f042 0208 	orr.w	r2, r2, #8
 800c36a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	699a      	ldr	r2, [r3, #24]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f022 0204 	bic.w	r2, r2, #4
 800c37a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	6999      	ldr	r1, [r3, #24]
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	691a      	ldr	r2, [r3, #16]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	430a      	orrs	r2, r1
 800c38c:	619a      	str	r2, [r3, #24]
      break;
 800c38e:	e064      	b.n	800c45a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68b9      	ldr	r1, [r7, #8]
 800c396:	4618      	mov	r0, r3
 800c398:	f000 f9a0 	bl	800c6dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	699a      	ldr	r2, [r3, #24]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	699a      	ldr	r2, [r3, #24]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	6999      	ldr	r1, [r3, #24]
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	691b      	ldr	r3, [r3, #16]
 800c3c6:	021a      	lsls	r2, r3, #8
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	430a      	orrs	r2, r1
 800c3ce:	619a      	str	r2, [r3, #24]
      break;
 800c3d0:	e043      	b.n	800c45a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	68b9      	ldr	r1, [r7, #8]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f000 f9f5 	bl	800c7c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	69da      	ldr	r2, [r3, #28]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f042 0208 	orr.w	r2, r2, #8
 800c3ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	69da      	ldr	r2, [r3, #28]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f022 0204 	bic.w	r2, r2, #4
 800c3fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	69d9      	ldr	r1, [r3, #28]
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	691a      	ldr	r2, [r3, #16]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	430a      	orrs	r2, r1
 800c40e:	61da      	str	r2, [r3, #28]
      break;
 800c410:	e023      	b.n	800c45a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	68b9      	ldr	r1, [r7, #8]
 800c418:	4618      	mov	r0, r3
 800c41a:	f000 fa49 	bl	800c8b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	69da      	ldr	r2, [r3, #28]
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c42c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	69da      	ldr	r2, [r3, #28]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c43c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	69d9      	ldr	r1, [r3, #28]
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	021a      	lsls	r2, r3, #8
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	430a      	orrs	r2, r1
 800c450:	61da      	str	r2, [r3, #28]
      break;
 800c452:	e002      	b.n	800c45a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c454:	2301      	movs	r3, #1
 800c456:	75fb      	strb	r3, [r7, #23]
      break;
 800c458:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2200      	movs	r2, #0
 800c45e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c462:	7dfb      	ldrb	r3, [r7, #23]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3718      	adds	r7, #24
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c474:	bf00      	nop
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c488:	bf00      	nop
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c4b0:	bf00      	nop
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4a40      	ldr	r2, [pc, #256]	; (800c5d0 <TIM_Base_SetConfig+0x114>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d013      	beq.n	800c4fc <TIM_Base_SetConfig+0x40>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4da:	d00f      	beq.n	800c4fc <TIM_Base_SetConfig+0x40>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4a3d      	ldr	r2, [pc, #244]	; (800c5d4 <TIM_Base_SetConfig+0x118>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d00b      	beq.n	800c4fc <TIM_Base_SetConfig+0x40>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4a3c      	ldr	r2, [pc, #240]	; (800c5d8 <TIM_Base_SetConfig+0x11c>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d007      	beq.n	800c4fc <TIM_Base_SetConfig+0x40>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	4a3b      	ldr	r2, [pc, #236]	; (800c5dc <TIM_Base_SetConfig+0x120>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d003      	beq.n	800c4fc <TIM_Base_SetConfig+0x40>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	4a3a      	ldr	r2, [pc, #232]	; (800c5e0 <TIM_Base_SetConfig+0x124>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d108      	bne.n	800c50e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	4313      	orrs	r3, r2
 800c50c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4a2f      	ldr	r2, [pc, #188]	; (800c5d0 <TIM_Base_SetConfig+0x114>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d02b      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c51c:	d027      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4a2c      	ldr	r2, [pc, #176]	; (800c5d4 <TIM_Base_SetConfig+0x118>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d023      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4a2b      	ldr	r2, [pc, #172]	; (800c5d8 <TIM_Base_SetConfig+0x11c>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d01f      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4a2a      	ldr	r2, [pc, #168]	; (800c5dc <TIM_Base_SetConfig+0x120>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d01b      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4a29      	ldr	r2, [pc, #164]	; (800c5e0 <TIM_Base_SetConfig+0x124>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d017      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4a28      	ldr	r2, [pc, #160]	; (800c5e4 <TIM_Base_SetConfig+0x128>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d013      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a27      	ldr	r2, [pc, #156]	; (800c5e8 <TIM_Base_SetConfig+0x12c>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d00f      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a26      	ldr	r2, [pc, #152]	; (800c5ec <TIM_Base_SetConfig+0x130>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d00b      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4a25      	ldr	r2, [pc, #148]	; (800c5f0 <TIM_Base_SetConfig+0x134>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d007      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4a24      	ldr	r2, [pc, #144]	; (800c5f4 <TIM_Base_SetConfig+0x138>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d003      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4a23      	ldr	r2, [pc, #140]	; (800c5f8 <TIM_Base_SetConfig+0x13c>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d108      	bne.n	800c580 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	68fa      	ldr	r2, [r7, #12]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	695b      	ldr	r3, [r3, #20]
 800c58a:	4313      	orrs	r3, r2
 800c58c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	689a      	ldr	r2, [r3, #8]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a0a      	ldr	r2, [pc, #40]	; (800c5d0 <TIM_Base_SetConfig+0x114>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d003      	beq.n	800c5b4 <TIM_Base_SetConfig+0xf8>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4a0c      	ldr	r2, [pc, #48]	; (800c5e0 <TIM_Base_SetConfig+0x124>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d103      	bne.n	800c5bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	691a      	ldr	r2, [r3, #16]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	615a      	str	r2, [r3, #20]
}
 800c5c2:	bf00      	nop
 800c5c4:	3714      	adds	r7, #20
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	40010000 	.word	0x40010000
 800c5d4:	40000400 	.word	0x40000400
 800c5d8:	40000800 	.word	0x40000800
 800c5dc:	40000c00 	.word	0x40000c00
 800c5e0:	40010400 	.word	0x40010400
 800c5e4:	40014000 	.word	0x40014000
 800c5e8:	40014400 	.word	0x40014400
 800c5ec:	40014800 	.word	0x40014800
 800c5f0:	40001800 	.word	0x40001800
 800c5f4:	40001c00 	.word	0x40001c00
 800c5f8:	40002000 	.word	0x40002000

0800c5fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b087      	sub	sp, #28
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a1b      	ldr	r3, [r3, #32]
 800c60a:	f023 0201 	bic.w	r2, r3, #1
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a1b      	ldr	r3, [r3, #32]
 800c616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	699b      	ldr	r3, [r3, #24]
 800c622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c62a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f023 0303 	bic.w	r3, r3, #3
 800c632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	f023 0302 	bic.w	r3, r3, #2
 800c644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a20      	ldr	r2, [pc, #128]	; (800c6d4 <TIM_OC1_SetConfig+0xd8>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d003      	beq.n	800c660 <TIM_OC1_SetConfig+0x64>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a1f      	ldr	r2, [pc, #124]	; (800c6d8 <TIM_OC1_SetConfig+0xdc>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d10c      	bne.n	800c67a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	f023 0308 	bic.w	r3, r3, #8
 800c666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	697a      	ldr	r2, [r7, #20]
 800c66e:	4313      	orrs	r3, r2
 800c670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	f023 0304 	bic.w	r3, r3, #4
 800c678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a15      	ldr	r2, [pc, #84]	; (800c6d4 <TIM_OC1_SetConfig+0xd8>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d003      	beq.n	800c68a <TIM_OC1_SetConfig+0x8e>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a14      	ldr	r2, [pc, #80]	; (800c6d8 <TIM_OC1_SetConfig+0xdc>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d111      	bne.n	800c6ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	695b      	ldr	r3, [r3, #20]
 800c69e:	693a      	ldr	r2, [r7, #16]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	699b      	ldr	r3, [r3, #24]
 800c6a8:	693a      	ldr	r2, [r7, #16]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	693a      	ldr	r2, [r7, #16]
 800c6b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	685a      	ldr	r2, [r3, #4]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	697a      	ldr	r2, [r7, #20]
 800c6c6:	621a      	str	r2, [r3, #32]
}
 800c6c8:	bf00      	nop
 800c6ca:	371c      	adds	r7, #28
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr
 800c6d4:	40010000 	.word	0x40010000
 800c6d8:	40010400 	.word	0x40010400

0800c6dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b087      	sub	sp, #28
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6a1b      	ldr	r3, [r3, #32]
 800c6ea:	f023 0210 	bic.w	r2, r3, #16
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a1b      	ldr	r3, [r3, #32]
 800c6f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	699b      	ldr	r3, [r3, #24]
 800c702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c70a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	021b      	lsls	r3, r3, #8
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	4313      	orrs	r3, r2
 800c71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	f023 0320 	bic.w	r3, r3, #32
 800c726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	011b      	lsls	r3, r3, #4
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	4313      	orrs	r3, r2
 800c732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4a22      	ldr	r2, [pc, #136]	; (800c7c0 <TIM_OC2_SetConfig+0xe4>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d003      	beq.n	800c744 <TIM_OC2_SetConfig+0x68>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4a21      	ldr	r2, [pc, #132]	; (800c7c4 <TIM_OC2_SetConfig+0xe8>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d10d      	bne.n	800c760 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c74a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	011b      	lsls	r3, r3, #4
 800c752:	697a      	ldr	r2, [r7, #20]
 800c754:	4313      	orrs	r3, r2
 800c756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c75e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4a17      	ldr	r2, [pc, #92]	; (800c7c0 <TIM_OC2_SetConfig+0xe4>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d003      	beq.n	800c770 <TIM_OC2_SetConfig+0x94>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4a16      	ldr	r2, [pc, #88]	; (800c7c4 <TIM_OC2_SetConfig+0xe8>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d113      	bne.n	800c798 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c77e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	695b      	ldr	r3, [r3, #20]
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	693a      	ldr	r2, [r7, #16]
 800c788:	4313      	orrs	r3, r2
 800c78a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	693a      	ldr	r2, [r7, #16]
 800c794:	4313      	orrs	r3, r2
 800c796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	693a      	ldr	r2, [r7, #16]
 800c79c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	685a      	ldr	r2, [r3, #4]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	697a      	ldr	r2, [r7, #20]
 800c7b0:	621a      	str	r2, [r3, #32]
}
 800c7b2:	bf00      	nop
 800c7b4:	371c      	adds	r7, #28
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop
 800c7c0:	40010000 	.word	0x40010000
 800c7c4:	40010400 	.word	0x40010400

0800c7c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b087      	sub	sp, #28
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6a1b      	ldr	r3, [r3, #32]
 800c7d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6a1b      	ldr	r3, [r3, #32]
 800c7e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	69db      	ldr	r3, [r3, #28]
 800c7ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f023 0303 	bic.w	r3, r3, #3
 800c7fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	4313      	orrs	r3, r2
 800c808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	021b      	lsls	r3, r3, #8
 800c818:	697a      	ldr	r2, [r7, #20]
 800c81a:	4313      	orrs	r3, r2
 800c81c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4a21      	ldr	r2, [pc, #132]	; (800c8a8 <TIM_OC3_SetConfig+0xe0>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d003      	beq.n	800c82e <TIM_OC3_SetConfig+0x66>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4a20      	ldr	r2, [pc, #128]	; (800c8ac <TIM_OC3_SetConfig+0xe4>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d10d      	bne.n	800c84a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c834:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	021b      	lsls	r3, r3, #8
 800c83c:	697a      	ldr	r2, [r7, #20]
 800c83e:	4313      	orrs	r3, r2
 800c840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4a16      	ldr	r2, [pc, #88]	; (800c8a8 <TIM_OC3_SetConfig+0xe0>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d003      	beq.n	800c85a <TIM_OC3_SetConfig+0x92>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	4a15      	ldr	r2, [pc, #84]	; (800c8ac <TIM_OC3_SetConfig+0xe4>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d113      	bne.n	800c882 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	695b      	ldr	r3, [r3, #20]
 800c86e:	011b      	lsls	r3, r3, #4
 800c870:	693a      	ldr	r2, [r7, #16]
 800c872:	4313      	orrs	r3, r2
 800c874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	699b      	ldr	r3, [r3, #24]
 800c87a:	011b      	lsls	r3, r3, #4
 800c87c:	693a      	ldr	r2, [r7, #16]
 800c87e:	4313      	orrs	r3, r2
 800c880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	693a      	ldr	r2, [r7, #16]
 800c886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	685a      	ldr	r2, [r3, #4]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	697a      	ldr	r2, [r7, #20]
 800c89a:	621a      	str	r2, [r3, #32]
}
 800c89c:	bf00      	nop
 800c89e:	371c      	adds	r7, #28
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr
 800c8a8:	40010000 	.word	0x40010000
 800c8ac:	40010400 	.word	0x40010400

0800c8b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b087      	sub	sp, #28
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6a1b      	ldr	r3, [r3, #32]
 800c8be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a1b      	ldr	r3, [r3, #32]
 800c8ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	021b      	lsls	r3, r3, #8
 800c8ee:	68fa      	ldr	r2, [r7, #12]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	031b      	lsls	r3, r3, #12
 800c902:	693a      	ldr	r2, [r7, #16]
 800c904:	4313      	orrs	r3, r2
 800c906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	4a12      	ldr	r2, [pc, #72]	; (800c954 <TIM_OC4_SetConfig+0xa4>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d003      	beq.n	800c918 <TIM_OC4_SetConfig+0x68>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	4a11      	ldr	r2, [pc, #68]	; (800c958 <TIM_OC4_SetConfig+0xa8>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d109      	bne.n	800c92c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c91e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	695b      	ldr	r3, [r3, #20]
 800c924:	019b      	lsls	r3, r3, #6
 800c926:	697a      	ldr	r2, [r7, #20]
 800c928:	4313      	orrs	r3, r2
 800c92a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	697a      	ldr	r2, [r7, #20]
 800c930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	693a      	ldr	r2, [r7, #16]
 800c944:	621a      	str	r2, [r3, #32]
}
 800c946:	bf00      	nop
 800c948:	371c      	adds	r7, #28
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop
 800c954:	40010000 	.word	0x40010000
 800c958:	40010400 	.word	0x40010400

0800c95c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d101      	bne.n	800c974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c970:	2302      	movs	r3, #2
 800c972:	e05a      	b.n	800ca2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2201      	movs	r2, #1
 800c978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2202      	movs	r2, #2
 800c980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c99a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a21      	ldr	r2, [pc, #132]	; (800ca38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d022      	beq.n	800c9fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9c0:	d01d      	beq.n	800c9fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a1d      	ldr	r2, [pc, #116]	; (800ca3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d018      	beq.n	800c9fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a1b      	ldr	r2, [pc, #108]	; (800ca40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d013      	beq.n	800c9fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4a1a      	ldr	r2, [pc, #104]	; (800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d00e      	beq.n	800c9fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a18      	ldr	r2, [pc, #96]	; (800ca48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d009      	beq.n	800c9fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a17      	ldr	r2, [pc, #92]	; (800ca4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d004      	beq.n	800c9fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a15      	ldr	r2, [pc, #84]	; (800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d10c      	bne.n	800ca18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	68ba      	ldr	r2, [r7, #8]
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3714      	adds	r7, #20
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr
 800ca36:	bf00      	nop
 800ca38:	40010000 	.word	0x40010000
 800ca3c:	40000400 	.word	0x40000400
 800ca40:	40000800 	.word	0x40000800
 800ca44:	40000c00 	.word	0x40000c00
 800ca48:	40010400 	.word	0x40010400
 800ca4c:	40014000 	.word	0x40014000
 800ca50:	40001800 	.word	0x40001800

0800ca54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca5c:	bf00      	nop
 800ca5e:	370c      	adds	r7, #12
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca70:	bf00      	nop
 800ca72:	370c      	adds	r7, #12
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr

0800ca7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d101      	bne.n	800ca8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e03f      	b.n	800cb0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d106      	bne.n	800caa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f7f6 f9aa 	bl	8002dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2224      	movs	r2, #36	; 0x24
 800caac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68da      	ldr	r2, [r3, #12]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cabe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 f9cb 	bl	800ce5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	691a      	ldr	r2, [r3, #16]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	695a      	ldr	r2, [r3, #20]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68da      	ldr	r2, [r3, #12]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800caf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2200      	movs	r2, #0
 800cafa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2220      	movs	r2, #32
 800cb00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2220      	movs	r2, #32
 800cb08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3708      	adds	r7, #8
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b08a      	sub	sp, #40	; 0x28
 800cb1a:	af02      	add	r7, sp, #8
 800cb1c:	60f8      	str	r0, [r7, #12]
 800cb1e:	60b9      	str	r1, [r7, #8]
 800cb20:	603b      	str	r3, [r7, #0]
 800cb22:	4613      	mov	r3, r2
 800cb24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cb26:	2300      	movs	r3, #0
 800cb28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b20      	cmp	r3, #32
 800cb34:	d17c      	bne.n	800cc30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d002      	beq.n	800cb42 <HAL_UART_Transmit+0x2c>
 800cb3c:	88fb      	ldrh	r3, [r7, #6]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d101      	bne.n	800cb46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cb42:	2301      	movs	r3, #1
 800cb44:	e075      	b.n	800cc32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d101      	bne.n	800cb54 <HAL_UART_Transmit+0x3e>
 800cb50:	2302      	movs	r3, #2
 800cb52:	e06e      	b.n	800cc32 <HAL_UART_Transmit+0x11c>
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2201      	movs	r2, #1
 800cb58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2221      	movs	r2, #33	; 0x21
 800cb66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cb6a:	f7fb f913 	bl	8007d94 <HAL_GetTick>
 800cb6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	88fa      	ldrh	r2, [r7, #6]
 800cb74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	88fa      	ldrh	r2, [r7, #6]
 800cb7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb84:	d108      	bne.n	800cb98 <HAL_UART_Transmit+0x82>
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	691b      	ldr	r3, [r3, #16]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d104      	bne.n	800cb98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	61bb      	str	r3, [r7, #24]
 800cb96:	e003      	b.n	800cba0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800cba8:	e02a      	b.n	800cc00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	2180      	movs	r1, #128	; 0x80
 800cbb4:	68f8      	ldr	r0, [r7, #12]
 800cbb6:	f000 f8e2 	bl	800cd7e <UART_WaitOnFlagUntilTimeout>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d001      	beq.n	800cbc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800cbc0:	2303      	movs	r3, #3
 800cbc2:	e036      	b.n	800cc32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10b      	bne.n	800cbe2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	881b      	ldrh	r3, [r3, #0]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	3302      	adds	r3, #2
 800cbde:	61bb      	str	r3, [r7, #24]
 800cbe0:	e007      	b.n	800cbf2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	781a      	ldrb	r2, [r3, #0]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	3301      	adds	r3, #1
 800cbf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1cf      	bne.n	800cbaa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2200      	movs	r2, #0
 800cc12:	2140      	movs	r1, #64	; 0x40
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f000 f8b2 	bl	800cd7e <UART_WaitOnFlagUntilTimeout>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d001      	beq.n	800cc24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800cc20:	2303      	movs	r3, #3
 800cc22:	e006      	b.n	800cc32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2220      	movs	r2, #32
 800cc28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	e000      	b.n	800cc32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cc30:	2302      	movs	r3, #2
  }
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3720      	adds	r7, #32
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc3a:	b580      	push	{r7, lr}
 800cc3c:	b08a      	sub	sp, #40	; 0x28
 800cc3e:	af02      	add	r7, sp, #8
 800cc40:	60f8      	str	r0, [r7, #12]
 800cc42:	60b9      	str	r1, [r7, #8]
 800cc44:	603b      	str	r3, [r7, #0]
 800cc46:	4613      	mov	r3, r2
 800cc48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	2b20      	cmp	r3, #32
 800cc58:	f040 808c 	bne.w	800cd74 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d002      	beq.n	800cc68 <HAL_UART_Receive+0x2e>
 800cc62:	88fb      	ldrh	r3, [r7, #6]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d101      	bne.n	800cc6c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e084      	b.n	800cd76 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d101      	bne.n	800cc7a <HAL_UART_Receive+0x40>
 800cc76:	2302      	movs	r3, #2
 800cc78:	e07d      	b.n	800cd76 <HAL_UART_Receive+0x13c>
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2200      	movs	r2, #0
 800cc86:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2222      	movs	r2, #34	; 0x22
 800cc8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2200      	movs	r2, #0
 800cc94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc96:	f7fb f87d 	bl	8007d94 <HAL_GetTick>
 800cc9a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	88fa      	ldrh	r2, [r7, #6]
 800cca0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	88fa      	ldrh	r2, [r7, #6]
 800cca6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccb0:	d108      	bne.n	800ccc4 <HAL_UART_Receive+0x8a>
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d104      	bne.n	800ccc4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	61bb      	str	r3, [r7, #24]
 800ccc2:	e003      	b.n	800cccc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800ccd4:	e043      	b.n	800cd5e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	2120      	movs	r1, #32
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	f000 f84c 	bl	800cd7e <UART_WaitOnFlagUntilTimeout>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d001      	beq.n	800ccf0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800ccec:	2303      	movs	r3, #3
 800ccee:	e042      	b.n	800cd76 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d10c      	bne.n	800cd10 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	3302      	adds	r3, #2
 800cd0c:	61bb      	str	r3, [r7, #24]
 800cd0e:	e01f      	b.n	800cd50 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd18:	d007      	beq.n	800cd2a <HAL_UART_Receive+0xf0>
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d10a      	bne.n	800cd38 <HAL_UART_Receive+0xfe>
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	691b      	ldr	r3, [r3, #16]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d106      	bne.n	800cd38 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	b2da      	uxtb	r2, r3
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	701a      	strb	r2, [r3, #0]
 800cd36:	e008      	b.n	800cd4a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd44:	b2da      	uxtb	r2, r3
 800cd46:	69fb      	ldr	r3, [r7, #28]
 800cd48:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800cd4a:	69fb      	ldr	r3, [r7, #28]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	3b01      	subs	r3, #1
 800cd58:	b29a      	uxth	r2, r3
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d1b6      	bne.n	800ccd6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2220      	movs	r2, #32
 800cd6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	e000      	b.n	800cd76 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800cd74:	2302      	movs	r3, #2
  }
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3720      	adds	r7, #32
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b090      	sub	sp, #64	; 0x40
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	60f8      	str	r0, [r7, #12]
 800cd86:	60b9      	str	r1, [r7, #8]
 800cd88:	603b      	str	r3, [r7, #0]
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd8e:	e050      	b.n	800ce32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd96:	d04c      	beq.n	800ce32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cd98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d007      	beq.n	800cdae <UART_WaitOnFlagUntilTimeout+0x30>
 800cd9e:	f7fa fff9 	bl	8007d94 <HAL_GetTick>
 800cda2:	4602      	mov	r2, r0
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d241      	bcs.n	800ce32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	330c      	adds	r3, #12
 800cdb4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb8:	e853 3f00 	ldrex	r3, [r3]
 800cdbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	330c      	adds	r3, #12
 800cdcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cdce:	637a      	str	r2, [r7, #52]	; 0x34
 800cdd0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cdd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdd6:	e841 2300 	strex	r3, r2, [r1]
 800cdda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d1e5      	bne.n	800cdae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	3314      	adds	r3, #20
 800cde8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	e853 3f00 	ldrex	r3, [r3]
 800cdf0:	613b      	str	r3, [r7, #16]
   return(result);
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	f023 0301 	bic.w	r3, r3, #1
 800cdf8:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	3314      	adds	r3, #20
 800ce00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce02:	623a      	str	r2, [r7, #32]
 800ce04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce06:	69f9      	ldr	r1, [r7, #28]
 800ce08:	6a3a      	ldr	r2, [r7, #32]
 800ce0a:	e841 2300 	strex	r3, r2, [r1]
 800ce0e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1e5      	bne.n	800cde2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2220      	movs	r2, #32
 800ce1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2220      	movs	r2, #32
 800ce22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ce2e:	2303      	movs	r3, #3
 800ce30:	e00f      	b.n	800ce52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	4013      	ands	r3, r2
 800ce3c:	68ba      	ldr	r2, [r7, #8]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	bf0c      	ite	eq
 800ce42:	2301      	moveq	r3, #1
 800ce44:	2300      	movne	r3, #0
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	461a      	mov	r2, r3
 800ce4a:	79fb      	ldrb	r3, [r7, #7]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d09f      	beq.n	800cd90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ce50:	2300      	movs	r3, #0
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3740      	adds	r7, #64	; 0x40
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
	...

0800ce5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce60:	b09f      	sub	sp, #124	; 0x7c
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	691b      	ldr	r3, [r3, #16]
 800ce6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ce70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce72:	68d9      	ldr	r1, [r3, #12]
 800ce74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	ea40 0301 	orr.w	r3, r0, r1
 800ce7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce80:	689a      	ldr	r2, [r3, #8]
 800ce82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	431a      	orrs	r2, r3
 800ce88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce8a:	695b      	ldr	r3, [r3, #20]
 800ce8c:	431a      	orrs	r2, r3
 800ce8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce90:	69db      	ldr	r3, [r3, #28]
 800ce92:	4313      	orrs	r3, r2
 800ce94:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ce96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cea0:	f021 010c 	bic.w	r1, r1, #12
 800cea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ceaa:	430b      	orrs	r3, r1
 800ceac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ceae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	695b      	ldr	r3, [r3, #20]
 800ceb4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ceb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceba:	6999      	ldr	r1, [r3, #24]
 800cebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	ea40 0301 	orr.w	r3, r0, r1
 800cec4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	4bc5      	ldr	r3, [pc, #788]	; (800d1e0 <UART_SetConfig+0x384>)
 800cecc:	429a      	cmp	r2, r3
 800cece:	d004      	beq.n	800ceda <UART_SetConfig+0x7e>
 800ced0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	4bc3      	ldr	r3, [pc, #780]	; (800d1e4 <UART_SetConfig+0x388>)
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d103      	bne.n	800cee2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ceda:	f7fd fa65 	bl	800a3a8 <HAL_RCC_GetPCLK2Freq>
 800cede:	6778      	str	r0, [r7, #116]	; 0x74
 800cee0:	e002      	b.n	800cee8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cee2:	f7fd fa4d 	bl	800a380 <HAL_RCC_GetPCLK1Freq>
 800cee6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceea:	69db      	ldr	r3, [r3, #28]
 800ceec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cef0:	f040 80b6 	bne.w	800d060 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cef6:	461c      	mov	r4, r3
 800cef8:	f04f 0500 	mov.w	r5, #0
 800cefc:	4622      	mov	r2, r4
 800cefe:	462b      	mov	r3, r5
 800cf00:	1891      	adds	r1, r2, r2
 800cf02:	6439      	str	r1, [r7, #64]	; 0x40
 800cf04:	415b      	adcs	r3, r3
 800cf06:	647b      	str	r3, [r7, #68]	; 0x44
 800cf08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cf0c:	1912      	adds	r2, r2, r4
 800cf0e:	eb45 0303 	adc.w	r3, r5, r3
 800cf12:	f04f 0000 	mov.w	r0, #0
 800cf16:	f04f 0100 	mov.w	r1, #0
 800cf1a:	00d9      	lsls	r1, r3, #3
 800cf1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cf20:	00d0      	lsls	r0, r2, #3
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	1911      	adds	r1, r2, r4
 800cf28:	6639      	str	r1, [r7, #96]	; 0x60
 800cf2a:	416b      	adcs	r3, r5
 800cf2c:	667b      	str	r3, [r7, #100]	; 0x64
 800cf2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	461a      	mov	r2, r3
 800cf34:	f04f 0300 	mov.w	r3, #0
 800cf38:	1891      	adds	r1, r2, r2
 800cf3a:	63b9      	str	r1, [r7, #56]	; 0x38
 800cf3c:	415b      	adcs	r3, r3
 800cf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cf44:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800cf48:	f7f3 ff0e 	bl	8000d68 <__aeabi_uldivmod>
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	460b      	mov	r3, r1
 800cf50:	4ba5      	ldr	r3, [pc, #660]	; (800d1e8 <UART_SetConfig+0x38c>)
 800cf52:	fba3 2302 	umull	r2, r3, r3, r2
 800cf56:	095b      	lsrs	r3, r3, #5
 800cf58:	011e      	lsls	r6, r3, #4
 800cf5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf5c:	461c      	mov	r4, r3
 800cf5e:	f04f 0500 	mov.w	r5, #0
 800cf62:	4622      	mov	r2, r4
 800cf64:	462b      	mov	r3, r5
 800cf66:	1891      	adds	r1, r2, r2
 800cf68:	6339      	str	r1, [r7, #48]	; 0x30
 800cf6a:	415b      	adcs	r3, r3
 800cf6c:	637b      	str	r3, [r7, #52]	; 0x34
 800cf6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cf72:	1912      	adds	r2, r2, r4
 800cf74:	eb45 0303 	adc.w	r3, r5, r3
 800cf78:	f04f 0000 	mov.w	r0, #0
 800cf7c:	f04f 0100 	mov.w	r1, #0
 800cf80:	00d9      	lsls	r1, r3, #3
 800cf82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cf86:	00d0      	lsls	r0, r2, #3
 800cf88:	4602      	mov	r2, r0
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	1911      	adds	r1, r2, r4
 800cf8e:	65b9      	str	r1, [r7, #88]	; 0x58
 800cf90:	416b      	adcs	r3, r5
 800cf92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	f04f 0300 	mov.w	r3, #0
 800cf9e:	1891      	adds	r1, r2, r2
 800cfa0:	62b9      	str	r1, [r7, #40]	; 0x28
 800cfa2:	415b      	adcs	r3, r3
 800cfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cfaa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800cfae:	f7f3 fedb 	bl	8000d68 <__aeabi_uldivmod>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	4b8c      	ldr	r3, [pc, #560]	; (800d1e8 <UART_SetConfig+0x38c>)
 800cfb8:	fba3 1302 	umull	r1, r3, r3, r2
 800cfbc:	095b      	lsrs	r3, r3, #5
 800cfbe:	2164      	movs	r1, #100	; 0x64
 800cfc0:	fb01 f303 	mul.w	r3, r1, r3
 800cfc4:	1ad3      	subs	r3, r2, r3
 800cfc6:	00db      	lsls	r3, r3, #3
 800cfc8:	3332      	adds	r3, #50	; 0x32
 800cfca:	4a87      	ldr	r2, [pc, #540]	; (800d1e8 <UART_SetConfig+0x38c>)
 800cfcc:	fba2 2303 	umull	r2, r3, r2, r3
 800cfd0:	095b      	lsrs	r3, r3, #5
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cfd8:	441e      	add	r6, r3
 800cfda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f04f 0100 	mov.w	r1, #0
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	1894      	adds	r4, r2, r2
 800cfe8:	623c      	str	r4, [r7, #32]
 800cfea:	415b      	adcs	r3, r3
 800cfec:	627b      	str	r3, [r7, #36]	; 0x24
 800cfee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cff2:	1812      	adds	r2, r2, r0
 800cff4:	eb41 0303 	adc.w	r3, r1, r3
 800cff8:	f04f 0400 	mov.w	r4, #0
 800cffc:	f04f 0500 	mov.w	r5, #0
 800d000:	00dd      	lsls	r5, r3, #3
 800d002:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d006:	00d4      	lsls	r4, r2, #3
 800d008:	4622      	mov	r2, r4
 800d00a:	462b      	mov	r3, r5
 800d00c:	1814      	adds	r4, r2, r0
 800d00e:	653c      	str	r4, [r7, #80]	; 0x50
 800d010:	414b      	adcs	r3, r1
 800d012:	657b      	str	r3, [r7, #84]	; 0x54
 800d014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	461a      	mov	r2, r3
 800d01a:	f04f 0300 	mov.w	r3, #0
 800d01e:	1891      	adds	r1, r2, r2
 800d020:	61b9      	str	r1, [r7, #24]
 800d022:	415b      	adcs	r3, r3
 800d024:	61fb      	str	r3, [r7, #28]
 800d026:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d02a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d02e:	f7f3 fe9b 	bl	8000d68 <__aeabi_uldivmod>
 800d032:	4602      	mov	r2, r0
 800d034:	460b      	mov	r3, r1
 800d036:	4b6c      	ldr	r3, [pc, #432]	; (800d1e8 <UART_SetConfig+0x38c>)
 800d038:	fba3 1302 	umull	r1, r3, r3, r2
 800d03c:	095b      	lsrs	r3, r3, #5
 800d03e:	2164      	movs	r1, #100	; 0x64
 800d040:	fb01 f303 	mul.w	r3, r1, r3
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	00db      	lsls	r3, r3, #3
 800d048:	3332      	adds	r3, #50	; 0x32
 800d04a:	4a67      	ldr	r2, [pc, #412]	; (800d1e8 <UART_SetConfig+0x38c>)
 800d04c:	fba2 2303 	umull	r2, r3, r2, r3
 800d050:	095b      	lsrs	r3, r3, #5
 800d052:	f003 0207 	and.w	r2, r3, #7
 800d056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4432      	add	r2, r6
 800d05c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d05e:	e0b9      	b.n	800d1d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d062:	461c      	mov	r4, r3
 800d064:	f04f 0500 	mov.w	r5, #0
 800d068:	4622      	mov	r2, r4
 800d06a:	462b      	mov	r3, r5
 800d06c:	1891      	adds	r1, r2, r2
 800d06e:	6139      	str	r1, [r7, #16]
 800d070:	415b      	adcs	r3, r3
 800d072:	617b      	str	r3, [r7, #20]
 800d074:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d078:	1912      	adds	r2, r2, r4
 800d07a:	eb45 0303 	adc.w	r3, r5, r3
 800d07e:	f04f 0000 	mov.w	r0, #0
 800d082:	f04f 0100 	mov.w	r1, #0
 800d086:	00d9      	lsls	r1, r3, #3
 800d088:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d08c:	00d0      	lsls	r0, r2, #3
 800d08e:	4602      	mov	r2, r0
 800d090:	460b      	mov	r3, r1
 800d092:	eb12 0804 	adds.w	r8, r2, r4
 800d096:	eb43 0905 	adc.w	r9, r3, r5
 800d09a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f04f 0100 	mov.w	r1, #0
 800d0a4:	f04f 0200 	mov.w	r2, #0
 800d0a8:	f04f 0300 	mov.w	r3, #0
 800d0ac:	008b      	lsls	r3, r1, #2
 800d0ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d0b2:	0082      	lsls	r2, r0, #2
 800d0b4:	4640      	mov	r0, r8
 800d0b6:	4649      	mov	r1, r9
 800d0b8:	f7f3 fe56 	bl	8000d68 <__aeabi_uldivmod>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	460b      	mov	r3, r1
 800d0c0:	4b49      	ldr	r3, [pc, #292]	; (800d1e8 <UART_SetConfig+0x38c>)
 800d0c2:	fba3 2302 	umull	r2, r3, r3, r2
 800d0c6:	095b      	lsrs	r3, r3, #5
 800d0c8:	011e      	lsls	r6, r3, #4
 800d0ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f04f 0100 	mov.w	r1, #0
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	1894      	adds	r4, r2, r2
 800d0d8:	60bc      	str	r4, [r7, #8]
 800d0da:	415b      	adcs	r3, r3
 800d0dc:	60fb      	str	r3, [r7, #12]
 800d0de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d0e2:	1812      	adds	r2, r2, r0
 800d0e4:	eb41 0303 	adc.w	r3, r1, r3
 800d0e8:	f04f 0400 	mov.w	r4, #0
 800d0ec:	f04f 0500 	mov.w	r5, #0
 800d0f0:	00dd      	lsls	r5, r3, #3
 800d0f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d0f6:	00d4      	lsls	r4, r2, #3
 800d0f8:	4622      	mov	r2, r4
 800d0fa:	462b      	mov	r3, r5
 800d0fc:	1814      	adds	r4, r2, r0
 800d0fe:	64bc      	str	r4, [r7, #72]	; 0x48
 800d100:	414b      	adcs	r3, r1
 800d102:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	4618      	mov	r0, r3
 800d10a:	f04f 0100 	mov.w	r1, #0
 800d10e:	f04f 0200 	mov.w	r2, #0
 800d112:	f04f 0300 	mov.w	r3, #0
 800d116:	008b      	lsls	r3, r1, #2
 800d118:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d11c:	0082      	lsls	r2, r0, #2
 800d11e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d122:	f7f3 fe21 	bl	8000d68 <__aeabi_uldivmod>
 800d126:	4602      	mov	r2, r0
 800d128:	460b      	mov	r3, r1
 800d12a:	4b2f      	ldr	r3, [pc, #188]	; (800d1e8 <UART_SetConfig+0x38c>)
 800d12c:	fba3 1302 	umull	r1, r3, r3, r2
 800d130:	095b      	lsrs	r3, r3, #5
 800d132:	2164      	movs	r1, #100	; 0x64
 800d134:	fb01 f303 	mul.w	r3, r1, r3
 800d138:	1ad3      	subs	r3, r2, r3
 800d13a:	011b      	lsls	r3, r3, #4
 800d13c:	3332      	adds	r3, #50	; 0x32
 800d13e:	4a2a      	ldr	r2, [pc, #168]	; (800d1e8 <UART_SetConfig+0x38c>)
 800d140:	fba2 2303 	umull	r2, r3, r2, r3
 800d144:	095b      	lsrs	r3, r3, #5
 800d146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d14a:	441e      	add	r6, r3
 800d14c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d14e:	4618      	mov	r0, r3
 800d150:	f04f 0100 	mov.w	r1, #0
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	1894      	adds	r4, r2, r2
 800d15a:	603c      	str	r4, [r7, #0]
 800d15c:	415b      	adcs	r3, r3
 800d15e:	607b      	str	r3, [r7, #4]
 800d160:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d164:	1812      	adds	r2, r2, r0
 800d166:	eb41 0303 	adc.w	r3, r1, r3
 800d16a:	f04f 0400 	mov.w	r4, #0
 800d16e:	f04f 0500 	mov.w	r5, #0
 800d172:	00dd      	lsls	r5, r3, #3
 800d174:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d178:	00d4      	lsls	r4, r2, #3
 800d17a:	4622      	mov	r2, r4
 800d17c:	462b      	mov	r3, r5
 800d17e:	eb12 0a00 	adds.w	sl, r2, r0
 800d182:	eb43 0b01 	adc.w	fp, r3, r1
 800d186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	4618      	mov	r0, r3
 800d18c:	f04f 0100 	mov.w	r1, #0
 800d190:	f04f 0200 	mov.w	r2, #0
 800d194:	f04f 0300 	mov.w	r3, #0
 800d198:	008b      	lsls	r3, r1, #2
 800d19a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d19e:	0082      	lsls	r2, r0, #2
 800d1a0:	4650      	mov	r0, sl
 800d1a2:	4659      	mov	r1, fp
 800d1a4:	f7f3 fde0 	bl	8000d68 <__aeabi_uldivmod>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	4b0e      	ldr	r3, [pc, #56]	; (800d1e8 <UART_SetConfig+0x38c>)
 800d1ae:	fba3 1302 	umull	r1, r3, r3, r2
 800d1b2:	095b      	lsrs	r3, r3, #5
 800d1b4:	2164      	movs	r1, #100	; 0x64
 800d1b6:	fb01 f303 	mul.w	r3, r1, r3
 800d1ba:	1ad3      	subs	r3, r2, r3
 800d1bc:	011b      	lsls	r3, r3, #4
 800d1be:	3332      	adds	r3, #50	; 0x32
 800d1c0:	4a09      	ldr	r2, [pc, #36]	; (800d1e8 <UART_SetConfig+0x38c>)
 800d1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d1c6:	095b      	lsrs	r3, r3, #5
 800d1c8:	f003 020f 	and.w	r2, r3, #15
 800d1cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4432      	add	r2, r6
 800d1d2:	609a      	str	r2, [r3, #8]
}
 800d1d4:	bf00      	nop
 800d1d6:	377c      	adds	r7, #124	; 0x7c
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1de:	bf00      	nop
 800d1e0:	40011000 	.word	0x40011000
 800d1e4:	40011400 	.word	0x40011400
 800d1e8:	51eb851f 	.word	0x51eb851f

0800d1ec <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b086      	sub	sp, #24
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	603b      	str	r3, [r7, #0]
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 800d1fc:	bf00      	nop
 800d1fe:	4b18      	ldr	r3, [pc, #96]	; (800d260 <sx126x_hal_write+0x74>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4a18      	ldr	r2, [pc, #96]	; (800d264 <sx126x_hal_write+0x78>)
 800d204:	8812      	ldrh	r2, [r2, #0]
 800d206:	4611      	mov	r1, r2
 800d208:	4618      	mov	r0, r3
 800d20a:	f7fb fb25 	bl	8008858 <HAL_GPIO_ReadPin>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b01      	cmp	r3, #1
 800d212:	d0f4      	beq.n	800d1fe <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800d214:	4b14      	ldr	r3, [pc, #80]	; (800d268 <sx126x_hal_write+0x7c>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a14      	ldr	r2, [pc, #80]	; (800d26c <sx126x_hal_write+0x80>)
 800d21a:	8811      	ldrh	r1, [r2, #0]
 800d21c:	2200      	movs	r2, #0
 800d21e:	4618      	mov	r0, r3
 800d220:	f7fb fb32 	bl	8008888 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 800d224:	88fa      	ldrh	r2, [r7, #6]
 800d226:	2364      	movs	r3, #100	; 0x64
 800d228:	68b9      	ldr	r1, [r7, #8]
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f7fe f91b 	bl	800b466 <HAL_SPI_Transmit>
 800d230:	4603      	mov	r3, r0
 800d232:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 800d234:	8c3a      	ldrh	r2, [r7, #32]
 800d236:	2364      	movs	r3, #100	; 0x64
 800d238:	6839      	ldr	r1, [r7, #0]
 800d23a:	68f8      	ldr	r0, [r7, #12]
 800d23c:	f7fe f913 	bl	800b466 <HAL_SPI_Transmit>
 800d240:	4603      	mov	r3, r0
 800d242:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800d244:	4b08      	ldr	r3, [pc, #32]	; (800d268 <sx126x_hal_write+0x7c>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a08      	ldr	r2, [pc, #32]	; (800d26c <sx126x_hal_write+0x80>)
 800d24a:	8811      	ldrh	r1, [r2, #0]
 800d24c:	2201      	movs	r2, #1
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fb fb1a 	bl	8008888 <HAL_GPIO_WritePin>
    return status;
 800d254:	7dfb      	ldrb	r3, [r7, #23]
}
 800d256:	4618      	mov	r0, r3
 800d258:	3718      	adds	r7, #24
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	2000056c 	.word	0x2000056c
 800d264:	20000568 	.word	0x20000568
 800d268:	2000055c 	.word	0x2000055c
 800d26c:	20000558 	.word	0x20000558

0800d270 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 800d270:	b580      	push	{r7, lr}
 800d272:	b088      	sub	sp, #32
 800d274:	af02      	add	r7, sp, #8
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	603b      	str	r3, [r7, #0]
 800d27c:	4613      	mov	r3, r2
 800d27e:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 800d280:	bf00      	nop
 800d282:	4b1e      	ldr	r3, [pc, #120]	; (800d2fc <sx126x_hal_read+0x8c>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a1e      	ldr	r2, [pc, #120]	; (800d300 <sx126x_hal_read+0x90>)
 800d288:	8812      	ldrh	r2, [r2, #0]
 800d28a:	4611      	mov	r1, r2
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7fb fae3 	bl	8008858 <HAL_GPIO_ReadPin>
 800d292:	4603      	mov	r3, r0
 800d294:	2b01      	cmp	r3, #1
 800d296:	d0f4      	beq.n	800d282 <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800d298:	4b1a      	ldr	r3, [pc, #104]	; (800d304 <sx126x_hal_read+0x94>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a1a      	ldr	r2, [pc, #104]	; (800d308 <sx126x_hal_read+0x98>)
 800d29e:	8811      	ldrh	r1, [r2, #0]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fb faf0 	bl	8008888 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 800d2a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	2364      	movs	r3, #100	; 0x64
 800d2b0:	68b9      	ldr	r1, [r7, #8]
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	f7fe f8d7 	bl	800b466 <HAL_SPI_Transmit>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 800d2bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2c0:	68ba      	ldr	r2, [r7, #8]
 800d2c2:	18d1      	adds	r1, r2, r3
 800d2c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	88fa      	ldrh	r2, [r7, #6]
 800d2cc:	1ad3      	subs	r3, r2, r3
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	2264      	movs	r2, #100	; 0x64
 800d2d2:	9200      	str	r2, [sp, #0]
 800d2d4:	683a      	ldr	r2, [r7, #0]
 800d2d6:	68f8      	ldr	r0, [r7, #12]
 800d2d8:	f7fe fb12 	bl	800b900 <HAL_SPI_TransmitReceive>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800d2e0:	4b08      	ldr	r3, [pc, #32]	; (800d304 <sx126x_hal_read+0x94>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a08      	ldr	r2, [pc, #32]	; (800d308 <sx126x_hal_read+0x98>)
 800d2e6:	8811      	ldrh	r1, [r2, #0]
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fb facc 	bl	8008888 <HAL_GPIO_WritePin>
    return status;
 800d2f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3718      	adds	r7, #24
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	2000056c 	.word	0x2000056c
 800d300:	20000568 	.word	0x20000568
 800d304:	2000055c 	.word	0x2000055c
 800d308:	20000558 	.word	0x20000558

0800d30c <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	460b      	mov	r3, r1
 800d316:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 800d318:	4a05      	ldr	r2, [pc, #20]	; (800d330 <set_NSS_pin+0x24>)
 800d31a:	887b      	ldrh	r3, [r7, #2]
 800d31c:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 800d31e:	4a05      	ldr	r2, [pc, #20]	; (800d334 <set_NSS_pin+0x28>)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6013      	str	r3, [r2, #0]
}
 800d324:	bf00      	nop
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr
 800d330:	20000558 	.word	0x20000558
 800d334:	2000055c 	.word	0x2000055c

0800d338 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	460b      	mov	r3, r1
 800d342:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 800d344:	4a05      	ldr	r2, [pc, #20]	; (800d35c <set_BUSY_pin+0x24>)
 800d346:	887b      	ldrh	r3, [r7, #2]
 800d348:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 800d34a:	4a05      	ldr	r2, [pc, #20]	; (800d360 <set_BUSY_pin+0x28>)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6013      	str	r3, [r2, #0]
}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr
 800d35c:	20000568 	.word	0x20000568
 800d360:	2000056c 	.word	0x2000056c

0800d364 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	460b      	mov	r3, r1
 800d36e:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 800d370:	4a05      	ldr	r2, [pc, #20]	; (800d388 <set_NRESET_pin+0x24>)
 800d372:	887b      	ldrh	r3, [r7, #2]
 800d374:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 800d376:	4a05      	ldr	r2, [pc, #20]	; (800d38c <set_NRESET_pin+0x28>)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6013      	str	r3, [r2, #0]
}
 800d37c:	bf00      	nop
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr
 800d388:	20000560 	.word	0x20000560
 800d38c:	20000564 	.word	0x20000564

0800d390 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	460b      	mov	r3, r1
 800d39a:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 800d39c:	4a05      	ldr	r2, [pc, #20]	; (800d3b4 <set_DIO1_pin+0x24>)
 800d39e:	887b      	ldrh	r3, [r7, #2]
 800d3a0:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 800d3a2:	4a05      	ldr	r2, [pc, #20]	; (800d3b8 <set_DIO1_pin+0x28>)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6013      	str	r3, [r2, #0]
}
 800d3a8:	bf00      	nop
 800d3aa:	370c      	adds	r7, #12
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr
 800d3b4:	20000570 	.word	0x20000570
 800d3b8:	20000574 	.word	0x20000574

0800d3bc <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 800d3bc:	b084      	sub	sp, #16
 800d3be:	b580      	push	{r7, lr}
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	f107 0c08 	add.w	ip, r7, #8
 800d3c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 800d3ca:	4b07      	ldr	r3, [pc, #28]	; (800d3e8 <set_hspi+0x2c>)
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f107 0308 	add.w	r3, r7, #8
 800d3d2:	2258      	movs	r2, #88	; 0x58
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	f003 fcd9 	bl	8010d8c <memcpy>
}
 800d3da:	bf00      	nop
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3e2:	b004      	add	sp, #16
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	20000578 	.word	0x20000578

0800d3ec <Tx_setup>:

void Tx_setup(){
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 800d3f2:	4b66      	ldr	r3, [pc, #408]	; (800d58c <Tx_setup+0x1a0>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4a66      	ldr	r2, [pc, #408]	; (800d590 <Tx_setup+0x1a4>)
 800d3f8:	8811      	ldrh	r1, [r2, #0]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fb fa43 	bl	8008888 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800d402:	4b64      	ldr	r3, [pc, #400]	; (800d594 <Tx_setup+0x1a8>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a64      	ldr	r2, [pc, #400]	; (800d598 <Tx_setup+0x1ac>)
 800d408:	8811      	ldrh	r1, [r2, #0]
 800d40a:	2200      	movs	r2, #0
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7fb fa3b 	bl	8008888 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800d412:	2032      	movs	r0, #50	; 0x32
 800d414:	f7fa fcca 	bl	8007dac <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 800d418:	4b5e      	ldr	r3, [pc, #376]	; (800d594 <Tx_setup+0x1a8>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4a5e      	ldr	r2, [pc, #376]	; (800d598 <Tx_setup+0x1ac>)
 800d41e:	8811      	ldrh	r1, [r2, #0]
 800d420:	2201      	movs	r2, #1
 800d422:	4618      	mov	r0, r3
 800d424:	f7fb fa30 	bl	8008888 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 800d428:	2100      	movs	r1, #0
 800d42a:	485c      	ldr	r0, [pc, #368]	; (800d59c <Tx_setup+0x1b0>)
 800d42c:	f000 f8f2 	bl	800d614 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 800d430:	4b5b      	ldr	r3, [pc, #364]	; (800d5a0 <Tx_setup+0x1b4>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4619      	mov	r1, r3
 800d436:	4859      	ldr	r0, [pc, #356]	; (800d59c <Tx_setup+0x1b0>)
 800d438:	f000 fa76 	bl	800d928 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 800d43c:	4b59      	ldr	r3, [pc, #356]	; (800d5a4 <Tx_setup+0x1b8>)
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	4619      	mov	r1, r3
 800d442:	4856      	ldr	r0, [pc, #344]	; (800d59c <Tx_setup+0x1b0>)
 800d444:	f000 faaa 	bl	800d99c <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 800d448:	4b57      	ldr	r3, [pc, #348]	; (800d5a8 <Tx_setup+0x1bc>)
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	4619      	mov	r1, r3
 800d44e:	4853      	ldr	r0, [pc, #332]	; (800d59c <Tx_setup+0x1b0>)
 800d450:	f000 f977 	bl	800d742 <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 800d454:	2101      	movs	r1, #1
 800d456:	4851      	ldr	r0, [pc, #324]	; (800d59c <Tx_setup+0x1b0>)
 800d458:	f000 fa24 	bl	800d8a4 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 800d45c:	4b53      	ldr	r3, [pc, #332]	; (800d5ac <Tx_setup+0x1c0>)
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	2264      	movs	r2, #100	; 0x64
 800d462:	4619      	mov	r1, r3
 800d464:	484d      	ldr	r0, [pc, #308]	; (800d59c <Tx_setup+0x1b0>)
 800d466:	f000 fa37 	bl	800d8d8 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 800d46a:	4b51      	ldr	r3, [pc, #324]	; (800d5b0 <Tx_setup+0x1c4>)
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	4619      	mov	r1, r3
 800d470:	484a      	ldr	r0, [pc, #296]	; (800d59c <Tx_setup+0x1b0>)
 800d472:	f000 f903 	bl	800d67c <sx126x_cal>
    HAL_Delay(50);
 800d476:	2032      	movs	r0, #50	; 0x32
 800d478:	f7fa fc98 	bl	8007dac <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 800d47c:	4b4d      	ldr	r3, [pc, #308]	; (800d5b4 <Tx_setup+0x1c8>)
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	4619      	mov	r1, r3
 800d482:	4846      	ldr	r0, [pc, #280]	; (800d59c <Tx_setup+0x1b0>)
 800d484:	f000 f8e0 	bl	800d648 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 800d488:	4b4b      	ldr	r3, [pc, #300]	; (800d5b8 <Tx_setup+0x1cc>)
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	4a4b      	ldr	r2, [pc, #300]	; (800d5bc <Tx_setup+0x1d0>)
 800d48e:	7812      	ldrb	r2, [r2, #0]
 800d490:	4619      	mov	r1, r3
 800d492:	4842      	ldr	r0, [pc, #264]	; (800d59c <Tx_setup+0x1b0>)
 800d494:	f000 f90c 	bl	800d6b0 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 800d498:	2004      	movs	r0, #4
 800d49a:	f003 fc67 	bl	8010d6c <malloc>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 800d4a2:	4b47      	ldr	r3, [pc, #284]	; (800d5c0 <Tx_setup+0x1d4>)
 800d4a4:	781a      	ldrb	r2, [r3, #0]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 800d4aa:	4b46      	ldr	r3, [pc, #280]	; (800d5c4 <Tx_setup+0x1d8>)
 800d4ac:	781a      	ldrb	r2, [r3, #0]
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 800d4b2:	4b45      	ldr	r3, [pc, #276]	; (800d5c8 <Tx_setup+0x1dc>)
 800d4b4:	781a      	ldrb	r2, [r3, #0]
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 800d4ba:	4b44      	ldr	r3, [pc, #272]	; (800d5cc <Tx_setup+0x1e0>)
 800d4bc:	781a      	ldrb	r2, [r3, #0]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 800d4c2:	68f9      	ldr	r1, [r7, #12]
 800d4c4:	4835      	ldr	r0, [pc, #212]	; (800d59c <Tx_setup+0x1b0>)
 800d4c6:	f000 f917 	bl	800d6f8 <sx126x_set_pa_cfg>
    free(params);
 800d4ca:	68f8      	ldr	r0, [r7, #12]
 800d4cc:	f003 fc56 	bl	8010d7c <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 800d4d0:	4b3f      	ldr	r3, [pc, #252]	; (800d5d0 <Tx_setup+0x1e4>)
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	b25b      	sxtb	r3, r3
 800d4d6:	4a3f      	ldr	r2, [pc, #252]	; (800d5d4 <Tx_setup+0x1e8>)
 800d4d8:	7812      	ldrb	r2, [r2, #0]
 800d4da:	4619      	mov	r1, r3
 800d4dc:	482f      	ldr	r0, [pc, #188]	; (800d59c <Tx_setup+0x1b0>)
 800d4de:	f000 fa77 	bl	800d9d0 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 800d4e2:	4b3d      	ldr	r3, [pc, #244]	; (800d5d8 <Tx_setup+0x1ec>)
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	4a3d      	ldr	r2, [pc, #244]	; (800d5dc <Tx_setup+0x1f0>)
 800d4e8:	7812      	ldrb	r2, [r2, #0]
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	482b      	ldr	r0, [pc, #172]	; (800d59c <Tx_setup+0x1b0>)
 800d4ee:	f000 fb2d 	bl	800db4c <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 800d4f2:	2004      	movs	r0, #4
 800d4f4:	f003 fc3a 	bl	8010d6c <malloc>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 800d4fc:	4b38      	ldr	r3, [pc, #224]	; (800d5e0 <Tx_setup+0x1f4>)
 800d4fe:	781a      	ldrb	r2, [r3, #0]
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 800d504:	4b37      	ldr	r3, [pc, #220]	; (800d5e4 <Tx_setup+0x1f8>)
 800d506:	781a      	ldrb	r2, [r3, #0]
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 800d50c:	4b36      	ldr	r3, [pc, #216]	; (800d5e8 <Tx_setup+0x1fc>)
 800d50e:	781a      	ldrb	r2, [r3, #0]
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 800d514:	4b35      	ldr	r3, [pc, #212]	; (800d5ec <Tx_setup+0x200>)
 800d516:	781a      	ldrb	r2, [r3, #0]
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 800d51c:	68b9      	ldr	r1, [r7, #8]
 800d51e:	481f      	ldr	r0, [pc, #124]	; (800d59c <Tx_setup+0x1b0>)
 800d520:	f000 fa7a 	bl	800da18 <sx126x_set_lora_mod_params>
    free(mod_params);
 800d524:	68b8      	ldr	r0, [r7, #8]
 800d526:	f003 fc29 	bl	8010d7c <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 800d52a:	2006      	movs	r0, #6
 800d52c:	f003 fc1e 	bl	8010d6c <malloc>
 800d530:	4603      	mov	r3, r0
 800d532:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 800d534:	4b2e      	ldr	r3, [pc, #184]	; (800d5f0 <Tx_setup+0x204>)
 800d536:	881a      	ldrh	r2, [r3, #0]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 800d53c:	4b2d      	ldr	r3, [pc, #180]	; (800d5f4 <Tx_setup+0x208>)
 800d53e:	781a      	ldrb	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 800d544:	4b2c      	ldr	r3, [pc, #176]	; (800d5f8 <Tx_setup+0x20c>)
 800d546:	781a      	ldrb	r2, [r3, #0]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 800d54c:	4b2b      	ldr	r3, [pc, #172]	; (800d5fc <Tx_setup+0x210>)
 800d54e:	781a      	ldrb	r2, [r3, #0]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 800d554:	4b2a      	ldr	r3, [pc, #168]	; (800d600 <Tx_setup+0x214>)
 800d556:	781a      	ldrb	r2, [r3, #0]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 800d55c:	6879      	ldr	r1, [r7, #4]
 800d55e:	480f      	ldr	r0, [pc, #60]	; (800d59c <Tx_setup+0x1b0>)
 800d560:	f000 fa86 	bl	800da70 <sx126x_set_lora_pkt_params>
    free(lora_params);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f003 fc09 	bl	8010d7c <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 800d56a:	4b26      	ldr	r3, [pc, #152]	; (800d604 <Tx_setup+0x218>)
 800d56c:	8819      	ldrh	r1, [r3, #0]
 800d56e:	4b26      	ldr	r3, [pc, #152]	; (800d608 <Tx_setup+0x21c>)
 800d570:	881a      	ldrh	r2, [r3, #0]
 800d572:	4b26      	ldr	r3, [pc, #152]	; (800d60c <Tx_setup+0x220>)
 800d574:	8818      	ldrh	r0, [r3, #0]
 800d576:	4b26      	ldr	r3, [pc, #152]	; (800d610 <Tx_setup+0x224>)
 800d578:	881b      	ldrh	r3, [r3, #0]
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	4603      	mov	r3, r0
 800d57e:	4807      	ldr	r0, [pc, #28]	; (800d59c <Tx_setup+0x1b0>)
 800d580:	f000 f94c 	bl	800d81c <sx126x_set_dio_irq_params>

}
 800d584:	bf00      	nop
 800d586:	3710      	adds	r7, #16
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	20000564 	.word	0x20000564
 800d590:	20000560 	.word	0x20000560
 800d594:	2000055c 	.word	0x2000055c
 800d598:	20000558 	.word	0x20000558
 800d59c:	20000578 	.word	0x20000578
 800d5a0:	2000001c 	.word	0x2000001c
 800d5a4:	20000020 	.word	0x20000020
 800d5a8:	20000021 	.word	0x20000021
 800d5ac:	20000022 	.word	0x20000022
 800d5b0:	20000024 	.word	0x20000024
 800d5b4:	20000023 	.word	0x20000023
 800d5b8:	20000025 	.word	0x20000025
 800d5bc:	20000026 	.word	0x20000026
 800d5c0:	20000027 	.word	0x20000027
 800d5c4:	20000028 	.word	0x20000028
 800d5c8:	200005d0 	.word	0x200005d0
 800d5cc:	20000029 	.word	0x20000029
 800d5d0:	2000002a 	.word	0x2000002a
 800d5d4:	2000002b 	.word	0x2000002b
 800d5d8:	200005d1 	.word	0x200005d1
 800d5dc:	200005d2 	.word	0x200005d2
 800d5e0:	2000002c 	.word	0x2000002c
 800d5e4:	2000002d 	.word	0x2000002d
 800d5e8:	2000002e 	.word	0x2000002e
 800d5ec:	200005d3 	.word	0x200005d3
 800d5f0:	20000030 	.word	0x20000030
 800d5f4:	200005d4 	.word	0x200005d4
 800d5f8:	20000032 	.word	0x20000032
 800d5fc:	20000033 	.word	0x20000033
 800d600:	200005d5 	.word	0x200005d5
 800d604:	20000034 	.word	0x20000034
 800d608:	20000036 	.word	0x20000036
 800d60c:	200005d6 	.word	0x200005d6
 800d610:	200005d8 	.word	0x200005d8

0800d614 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b086      	sub	sp, #24
 800d618:	af02      	add	r7, sp, #8
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	460b      	mov	r3, r1
 800d61e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 800d620:	2300      	movs	r3, #0
 800d622:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 800d624:	2380      	movs	r3, #128	; 0x80
 800d626:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 800d628:	78fb      	ldrb	r3, [r7, #3]
 800d62a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800d62c:	f107 010c 	add.w	r1, r7, #12
 800d630:	2300      	movs	r3, #0
 800d632:	9300      	str	r3, [sp, #0]
 800d634:	2300      	movs	r3, #0
 800d636:	2202      	movs	r2, #2
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7ff fdd7 	bl	800d1ec <sx126x_hal_write>
 800d63e:	4603      	mov	r3, r0
}
 800d640:	4618      	mov	r0, r3
 800d642:	3710      	adds	r7, #16
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b086      	sub	sp, #24
 800d64c:	af02      	add	r7, sp, #8
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	460b      	mov	r3, r1
 800d652:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 800d654:	2300      	movs	r3, #0
 800d656:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 800d658:	2396      	movs	r3, #150	; 0x96
 800d65a:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 800d65c:	78fb      	ldrb	r3, [r7, #3]
 800d65e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800d660:	f107 010c 	add.w	r1, r7, #12
 800d664:	2300      	movs	r3, #0
 800d666:	9300      	str	r3, [sp, #0]
 800d668:	2300      	movs	r3, #0
 800d66a:	2202      	movs	r2, #2
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f7ff fdbd 	bl	800d1ec <sx126x_hal_write>
 800d672:	4603      	mov	r3, r0
}
 800d674:	4618      	mov	r0, r3
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b086      	sub	sp, #24
 800d680:	af02      	add	r7, sp, #8
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	460b      	mov	r3, r1
 800d686:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 800d688:	2300      	movs	r3, #0
 800d68a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 800d68c:	2389      	movs	r3, #137	; 0x89
 800d68e:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 800d690:	78fb      	ldrb	r3, [r7, #3]
 800d692:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800d694:	f107 010c 	add.w	r1, r7, #12
 800d698:	2300      	movs	r3, #0
 800d69a:	9300      	str	r3, [sp, #0]
 800d69c:	2300      	movs	r3, #0
 800d69e:	2202      	movs	r2, #2
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f7ff fda3 	bl	800d1ec <sx126x_hal_write>
 800d6a6:	4603      	mov	r3, r0
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3710      	adds	r7, #16
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}

0800d6b0 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b086      	sub	sp, #24
 800d6b4:	af02      	add	r7, sp, #8
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	460b      	mov	r3, r1
 800d6ba:	70fb      	strb	r3, [r7, #3]
 800d6bc:	4613      	mov	r3, r2
 800d6be:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 800d6c0:	4b0c      	ldr	r3, [pc, #48]	; (800d6f4 <sx126x_cal_img_hex+0x44>)
 800d6c2:	881b      	ldrh	r3, [r3, #0]
 800d6c4:	81bb      	strh	r3, [r7, #12]
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 800d6ca:	2398      	movs	r3, #152	; 0x98
 800d6cc:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 800d6ce:	78fb      	ldrb	r3, [r7, #3]
 800d6d0:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 800d6d2:	78bb      	ldrb	r3, [r7, #2]
 800d6d4:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 800d6d6:	f107 010c 	add.w	r1, r7, #12
 800d6da:	2300      	movs	r3, #0
 800d6dc:	9300      	str	r3, [sp, #0]
 800d6de:	2300      	movs	r3, #0
 800d6e0:	2203      	movs	r2, #3
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7ff fd82 	bl	800d1ec <sx126x_hal_write>
 800d6e8:	4603      	mov	r3, r0
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	08018540 	.word	0x08018540

0800d6f8 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b086      	sub	sp, #24
 800d6fc:	af02      	add	r7, sp, #8
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 800d702:	2300      	movs	r3, #0
 800d704:	60bb      	str	r3, [r7, #8]
 800d706:	2300      	movs	r3, #0
 800d708:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 800d70a:	2395      	movs	r3, #149	; 0x95
 800d70c:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	785b      	ldrb	r3, [r3, #1]
 800d718:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	789b      	ldrb	r3, [r3, #2]
 800d71e:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	78db      	ldrb	r3, [r3, #3]
 800d724:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800d726:	f107 0108 	add.w	r1, r7, #8
 800d72a:	2300      	movs	r3, #0
 800d72c:	9300      	str	r3, [sp, #0]
 800d72e:	2300      	movs	r3, #0
 800d730:	2205      	movs	r2, #5
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f7ff fd5a 	bl	800d1ec <sx126x_hal_write>
 800d738:	4603      	mov	r3, r0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b086      	sub	sp, #24
 800d746:	af02      	add	r7, sp, #8
 800d748:	6078      	str	r0, [r7, #4]
 800d74a:	460b      	mov	r3, r1
 800d74c:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 800d74e:	2300      	movs	r3, #0
 800d750:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 800d752:	2393      	movs	r3, #147	; 0x93
 800d754:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 800d756:	78fb      	ldrb	r3, [r7, #3]
 800d758:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 800d75a:	f107 010c 	add.w	r1, r7, #12
 800d75e:	2300      	movs	r3, #0
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	2300      	movs	r3, #0
 800d764:	2202      	movs	r2, #2
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7ff fd40 	bl	800d1ec <sx126x_hal_write>
 800d76c:	4603      	mov	r3, r0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
	...

0800d778 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b088      	sub	sp, #32
 800d77c:	af02      	add	r7, sp, #8
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	607a      	str	r2, [r7, #4]
 800d782:	461a      	mov	r2, r3
 800d784:	460b      	mov	r3, r1
 800d786:	817b      	strh	r3, [r7, #10]
 800d788:	4613      	mov	r3, r2
 800d78a:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 800d78c:	4b0e      	ldr	r3, [pc, #56]	; (800d7c8 <sx126x_write_register+0x50>)
 800d78e:	881b      	ldrh	r3, [r3, #0]
 800d790:	82bb      	strh	r3, [r7, #20]
 800d792:	2300      	movs	r3, #0
 800d794:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 800d796:	230d      	movs	r3, #13
 800d798:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 800d79a:	897b      	ldrh	r3, [r7, #10]
 800d79c:	0a1b      	lsrs	r3, r3, #8
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 800d7a4:	897b      	ldrh	r3, [r7, #10]
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800d7aa:	7a7b      	ldrb	r3, [r7, #9]
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	f107 0114 	add.w	r1, r7, #20
 800d7b2:	9300      	str	r3, [sp, #0]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2203      	movs	r2, #3
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f7ff fd17 	bl	800d1ec <sx126x_hal_write>
 800d7be:	4603      	mov	r3, r0
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3718      	adds	r7, #24
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	08018540 	.word	0x08018540

0800d7cc <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b088      	sub	sp, #32
 800d7d0:	af02      	add	r7, sp, #8
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	607a      	str	r2, [r7, #4]
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	460b      	mov	r3, r1
 800d7da:	817b      	strh	r3, [r7, #10]
 800d7dc:	4613      	mov	r3, r2
 800d7de:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 800d7e4:	2303      	movs	r3, #3
 800d7e6:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 800d7e8:	231d      	movs	r3, #29
 800d7ea:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 800d7ec:	897b      	ldrh	r3, [r7, #10]
 800d7ee:	0a1b      	lsrs	r3, r3, #8
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 800d7f6:	897b      	ldrh	r3, [r7, #10]
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800d7fc:	f107 0110 	add.w	r1, r7, #16
 800d800:	7a7b      	ldrb	r3, [r7, #9]
 800d802:	9300      	str	r3, [sp, #0]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2204      	movs	r2, #4
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f7ff fd31 	bl	800d270 <sx126x_hal_read>
 800d80e:	4603      	mov	r3, r0
 800d810:	75fb      	strb	r3, [r7, #23]

    return status;
 800d812:	7dfb      	ldrb	r3, [r7, #23]
}
 800d814:	4618      	mov	r0, r3
 800d816:	3718      	adds	r7, #24
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b08a      	sub	sp, #40	; 0x28
 800d820:	af02      	add	r7, sp, #8
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	4608      	mov	r0, r1
 800d826:	4611      	mov	r1, r2
 800d828:	461a      	mov	r2, r3
 800d82a:	4603      	mov	r3, r0
 800d82c:	817b      	strh	r3, [r7, #10]
 800d82e:	460b      	mov	r3, r1
 800d830:	813b      	strh	r3, [r7, #8]
 800d832:	4613      	mov	r3, r2
 800d834:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 800d836:	2300      	movs	r3, #0
 800d838:	617b      	str	r3, [r7, #20]
 800d83a:	f107 0318 	add.w	r3, r7, #24
 800d83e:	2200      	movs	r2, #0
 800d840:	601a      	str	r2, [r3, #0]
 800d842:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 800d844:	2308      	movs	r3, #8
 800d846:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800d848:	897b      	ldrh	r3, [r7, #10]
 800d84a:	0a1b      	lsrs	r3, r3, #8
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800d852:	897b      	ldrh	r3, [r7, #10]
 800d854:	b2db      	uxtb	r3, r3
 800d856:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 800d858:	893b      	ldrh	r3, [r7, #8]
 800d85a:	0a1b      	lsrs	r3, r3, #8
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 800d862:	893b      	ldrh	r3, [r7, #8]
 800d864:	b2db      	uxtb	r3, r3
 800d866:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 800d868:	88fb      	ldrh	r3, [r7, #6]
 800d86a:	0a1b      	lsrs	r3, r3, #8
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 800d872:	88fb      	ldrh	r3, [r7, #6]
 800d874:	b2db      	uxtb	r3, r3
 800d876:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 800d878:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d87a:	0a1b      	lsrs	r3, r3, #8
 800d87c:	b29b      	uxth	r3, r3
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 800d882:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d884:	b2db      	uxtb	r3, r3
 800d886:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800d888:	f107 0114 	add.w	r1, r7, #20
 800d88c:	2300      	movs	r3, #0
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	2300      	movs	r3, #0
 800d892:	2209      	movs	r2, #9
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f7ff fca9 	bl	800d1ec <sx126x_hal_write>
 800d89a:	4603      	mov	r3, r0
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3720      	adds	r7, #32
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af02      	add	r7, sp, #8
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 800d8b4:	239d      	movs	r3, #157	; 0x9d
 800d8b6:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 800d8b8:	78fb      	ldrb	r3, [r7, #3]
 800d8ba:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 800d8bc:	f107 010c 	add.w	r1, r7, #12
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	2202      	movs	r2, #2
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f7ff fc8f 	bl	800d1ec <sx126x_hal_write>
 800d8ce:	4603      	mov	r3, r0
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3710      	adds	r7, #16
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b088      	sub	sp, #32
 800d8dc:	af02      	add	r7, sp, #8
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	607a      	str	r2, [r7, #4]
 800d8e4:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	613b      	str	r3, [r7, #16]
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 800d8ee:	2397      	movs	r3, #151	; 0x97
 800d8f0:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 800d8f2:	7afb      	ldrb	r3, [r7, #11]
 800d8f4:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	0c1b      	lsrs	r3, r3, #16
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	0a1b      	lsrs	r3, r3, #8
 800d902:	b2db      	uxtb	r3, r3
 800d904:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	b2db      	uxtb	r3, r3
 800d90a:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800d90c:	f107 0110 	add.w	r1, r7, #16
 800d910:	2300      	movs	r3, #0
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	2300      	movs	r3, #0
 800d916:	2205      	movs	r2, #5
 800d918:	68f8      	ldr	r0, [r7, #12]
 800d91a:	f7ff fc67 	bl	800d1ec <sx126x_hal_write>
 800d91e:	4603      	mov	r3, r0
}
 800d920:	4618      	mov	r0, r3
 800d922:	3718      	adds	r7, #24
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800d932:	6838      	ldr	r0, [r7, #0]
 800d934:	f000 f92e 	bl	800db94 <sx126x_convert_freq_in_hz_to_pll_step>
 800d938:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800d93a:	68f9      	ldr	r1, [r7, #12]
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 f805 	bl	800d94c <sx126x_set_rf_freq_in_pll_steps>
 800d942:	4603      	mov	r3, r0
}
 800d944:	4618      	mov	r0, r3
 800d946:	3710      	adds	r7, #16
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b086      	sub	sp, #24
 800d950:	af02      	add	r7, sp, #8
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 800d956:	2300      	movs	r3, #0
 800d958:	60bb      	str	r3, [r7, #8]
 800d95a:	2300      	movs	r3, #0
 800d95c:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 800d95e:	2386      	movs	r3, #134	; 0x86
 800d960:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	0e1b      	lsrs	r3, r3, #24
 800d966:	b2db      	uxtb	r3, r3
 800d968:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	0c1b      	lsrs	r3, r3, #16
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	0a1b      	lsrs	r3, r3, #8
 800d976:	b2db      	uxtb	r3, r3
 800d978:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800d980:	f107 0108 	add.w	r1, r7, #8
 800d984:	2300      	movs	r3, #0
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	2300      	movs	r3, #0
 800d98a:	2205      	movs	r2, #5
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f7ff fc2d 	bl	800d1ec <sx126x_hal_write>
 800d992:	4603      	mov	r3, r0
}
 800d994:	4618      	mov	r0, r3
 800d996:	3710      	adds	r7, #16
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b086      	sub	sp, #24
 800d9a0:	af02      	add	r7, sp, #8
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 800d9ac:	238a      	movs	r3, #138	; 0x8a
 800d9ae:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 800d9b0:	78fb      	ldrb	r3, [r7, #3]
 800d9b2:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800d9b4:	f107 010c 	add.w	r1, r7, #12
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	9300      	str	r3, [sp, #0]
 800d9bc:	2300      	movs	r3, #0
 800d9be:	2202      	movs	r2, #2
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7ff fc13 	bl	800d1ec <sx126x_hal_write>
 800d9c6:	4603      	mov	r3, r0
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3710      	adds	r7, #16
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af02      	add	r7, sp, #8
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	460b      	mov	r3, r1
 800d9da:	70fb      	strb	r3, [r7, #3]
 800d9dc:	4613      	mov	r3, r2
 800d9de:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 800d9e0:	4b0c      	ldr	r3, [pc, #48]	; (800da14 <sx126x_set_tx_params+0x44>)
 800d9e2:	881b      	ldrh	r3, [r3, #0]
 800d9e4:	81bb      	strh	r3, [r7, #12]
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 800d9ea:	238e      	movs	r3, #142	; 0x8e
 800d9ec:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 800d9ee:	78fb      	ldrb	r3, [r7, #3]
 800d9f0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 800d9f2:	78bb      	ldrb	r3, [r7, #2]
 800d9f4:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800d9f6:	f107 010c 	add.w	r1, r7, #12
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	9300      	str	r3, [sp, #0]
 800d9fe:	2300      	movs	r3, #0
 800da00:	2203      	movs	r2, #3
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7ff fbf2 	bl	800d1ec <sx126x_hal_write>
 800da08:	4603      	mov	r3, r0
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	08018540 	.word	0x08018540

0800da18 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b086      	sub	sp, #24
 800da1c:	af02      	add	r7, sp, #8
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800da22:	2303      	movs	r3, #3
 800da24:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 800da26:	2300      	movs	r3, #0
 800da28:	60bb      	str	r3, [r7, #8]
 800da2a:	2300      	movs	r3, #0
 800da2c:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 800da2e:	238b      	movs	r3, #139	; 0x8b
 800da30:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	785b      	ldrb	r3, [r3, #1]
 800da3c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	789b      	ldrb	r3, [r3, #2]
 800da42:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	78db      	ldrb	r3, [r3, #3]
 800da48:	f003 0301 	and.w	r3, r3, #1
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800da50:	f107 0108 	add.w	r1, r7, #8
 800da54:	2300      	movs	r3, #0
 800da56:	9300      	str	r3, [sp, #0]
 800da58:	2300      	movs	r3, #0
 800da5a:	2205      	movs	r2, #5
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f7ff fbc5 	bl	800d1ec <sx126x_hal_write>
 800da62:	4603      	mov	r3, r0
 800da64:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 800da66:	7bfb      	ldrb	r3, [r7, #15]
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b088      	sub	sp, #32
 800da74:	af02      	add	r7, sp, #8
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800da7a:	2303      	movs	r3, #3
 800da7c:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 800da7e:	2300      	movs	r3, #0
 800da80:	613b      	str	r3, [r7, #16]
 800da82:	f107 0314 	add.w	r3, r7, #20
 800da86:	2100      	movs	r1, #0
 800da88:	460a      	mov	r2, r1
 800da8a:	801a      	strh	r2, [r3, #0]
 800da8c:	460a      	mov	r2, r1
 800da8e:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 800da90:	238c      	movs	r3, #140	; 0x8c
 800da92:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	881b      	ldrh	r3, [r3, #0]
 800da98:	0a1b      	lsrs	r3, r3, #8
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	881b      	ldrh	r3, [r3, #0]
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	789b      	ldrb	r3, [r3, #2]
 800daac:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	78db      	ldrb	r3, [r3, #3]
 800dab2:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	791b      	ldrb	r3, [r3, #4]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d001      	beq.n	800dac0 <sx126x_set_lora_pkt_params+0x50>
 800dabc:	2301      	movs	r3, #1
 800dabe:	e000      	b.n	800dac2 <sx126x_set_lora_pkt_params+0x52>
 800dac0:	2300      	movs	r3, #0
 800dac2:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	795b      	ldrb	r3, [r3, #5]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d001      	beq.n	800dad0 <sx126x_set_lora_pkt_params+0x60>
 800dacc:	2301      	movs	r3, #1
 800dace:	e000      	b.n	800dad2 <sx126x_set_lora_pkt_params+0x62>
 800dad0:	2300      	movs	r3, #0
 800dad2:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800dad4:	f107 0110 	add.w	r1, r7, #16
 800dad8:	2300      	movs	r3, #0
 800dada:	9300      	str	r3, [sp, #0]
 800dadc:	2300      	movs	r3, #0
 800dade:	2207      	movs	r2, #7
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f7ff fb83 	bl	800d1ec <sx126x_hal_write>
 800dae6:	4603      	mov	r3, r0
 800dae8:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800daea:	7dfb      	ldrb	r3, [r7, #23]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d127      	bne.n	800db40 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 800daf0:	2300      	movs	r3, #0
 800daf2:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800daf4:	f107 020f 	add.w	r2, r7, #15
 800daf8:	2301      	movs	r3, #1
 800dafa:	f240 7136 	movw	r1, #1846	; 0x736
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f7ff fe64 	bl	800d7cc <sx126x_read_register>
 800db04:	4603      	mov	r3, r0
 800db06:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800db08:	7dfb      	ldrb	r3, [r7, #23]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d118      	bne.n	800db40 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	795b      	ldrb	r3, [r3, #5]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d005      	beq.n	800db22 <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800db16:	7bfb      	ldrb	r3, [r7, #15]
 800db18:	f023 0304 	bic.w	r3, r3, #4
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	73fb      	strb	r3, [r7, #15]
 800db20:	e004      	b.n	800db2c <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800db22:	7bfb      	ldrb	r3, [r7, #15]
 800db24:	f043 0304 	orr.w	r3, r3, #4
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800db2c:	f107 020f 	add.w	r2, r7, #15
 800db30:	2301      	movs	r3, #1
 800db32:	f240 7136 	movw	r1, #1846	; 0x736
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f7ff fe1e 	bl	800d778 <sx126x_write_register>
 800db3c:	4603      	mov	r3, r0
 800db3e:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800db40:	7dfb      	ldrb	r3, [r7, #23]
}
 800db42:	4618      	mov	r0, r3
 800db44:	3718      	adds	r7, #24
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
	...

0800db4c <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b086      	sub	sp, #24
 800db50:	af02      	add	r7, sp, #8
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	460b      	mov	r3, r1
 800db56:	70fb      	strb	r3, [r7, #3]
 800db58:	4613      	mov	r3, r2
 800db5a:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 800db5c:	4b0c      	ldr	r3, [pc, #48]	; (800db90 <sx126x_set_buffer_base_address+0x44>)
 800db5e:	881b      	ldrh	r3, [r3, #0]
 800db60:	81bb      	strh	r3, [r7, #12]
 800db62:	2300      	movs	r3, #0
 800db64:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 800db66:	238f      	movs	r3, #143	; 0x8f
 800db68:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 800db6a:	78fb      	ldrb	r3, [r7, #3]
 800db6c:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 800db6e:	78bb      	ldrb	r3, [r7, #2]
 800db70:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800db72:	f107 010c 	add.w	r1, r7, #12
 800db76:	2300      	movs	r3, #0
 800db78:	9300      	str	r3, [sp, #0]
 800db7a:	2300      	movs	r3, #0
 800db7c:	2203      	movs	r2, #3
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f7ff fb34 	bl	800d1ec <sx126x_hal_write>
 800db84:	4603      	mov	r3, r0
}
 800db86:	4618      	mov	r0, r3
 800db88:	3710      	adds	r7, #16
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	08018540 	.word	0x08018540

0800db94 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4a0f      	ldr	r2, [pc, #60]	; (800dbdc <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800dba0:	fba2 2303 	umull	r2, r3, r2, r3
 800dba4:	0b1b      	lsrs	r3, r3, #12
 800dba6:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f643 5209 	movw	r2, #15625	; 0x3d09
 800dbae:	fb02 f303 	mul.w	r3, r2, r3
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	1ad3      	subs	r3, r2, r3
 800dbb6:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	039b      	lsls	r3, r3, #14
 800dbc0:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800dbc4:	3304      	adds	r3, #4
 800dbc6:	4905      	ldr	r1, [pc, #20]	; (800dbdc <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800dbc8:	fba1 1303 	umull	r1, r3, r1, r3
 800dbcc:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800dbce:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3714      	adds	r7, #20
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr
 800dbdc:	431bde83 	.word	0x431bde83

0800dbe0 <__NVIC_SetPriority>:
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b083      	sub	sp, #12
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	6039      	str	r1, [r7, #0]
 800dbea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dbec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	db0a      	blt.n	800dc0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	490c      	ldr	r1, [pc, #48]	; (800dc2c <__NVIC_SetPriority+0x4c>)
 800dbfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbfe:	0112      	lsls	r2, r2, #4
 800dc00:	b2d2      	uxtb	r2, r2
 800dc02:	440b      	add	r3, r1
 800dc04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dc08:	e00a      	b.n	800dc20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	b2da      	uxtb	r2, r3
 800dc0e:	4908      	ldr	r1, [pc, #32]	; (800dc30 <__NVIC_SetPriority+0x50>)
 800dc10:	79fb      	ldrb	r3, [r7, #7]
 800dc12:	f003 030f 	and.w	r3, r3, #15
 800dc16:	3b04      	subs	r3, #4
 800dc18:	0112      	lsls	r2, r2, #4
 800dc1a:	b2d2      	uxtb	r2, r2
 800dc1c:	440b      	add	r3, r1
 800dc1e:	761a      	strb	r2, [r3, #24]
}
 800dc20:	bf00      	nop
 800dc22:	370c      	adds	r7, #12
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr
 800dc2c:	e000e100 	.word	0xe000e100
 800dc30:	e000ed00 	.word	0xe000ed00

0800dc34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dc34:	b580      	push	{r7, lr}
 800dc36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dc38:	4b05      	ldr	r3, [pc, #20]	; (800dc50 <SysTick_Handler+0x1c>)
 800dc3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dc3c:	f001 fdba 	bl	800f7b4 <xTaskGetSchedulerState>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d001      	beq.n	800dc4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dc46:	f002 fb9f 	bl	8010388 <xPortSysTickHandler>
  }
}
 800dc4a:	bf00      	nop
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	e000e010 	.word	0xe000e010

0800dc54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dc54:	b580      	push	{r7, lr}
 800dc56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dc58:	2100      	movs	r1, #0
 800dc5a:	f06f 0004 	mvn.w	r0, #4
 800dc5e:	f7ff ffbf 	bl	800dbe0 <__NVIC_SetPriority>
#endif
}
 800dc62:	bf00      	nop
 800dc64:	bd80      	pop	{r7, pc}
	...

0800dc68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc6e:	f3ef 8305 	mrs	r3, IPSR
 800dc72:	603b      	str	r3, [r7, #0]
  return(result);
 800dc74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d003      	beq.n	800dc82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dc7a:	f06f 0305 	mvn.w	r3, #5
 800dc7e:	607b      	str	r3, [r7, #4]
 800dc80:	e00c      	b.n	800dc9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dc82:	4b0a      	ldr	r3, [pc, #40]	; (800dcac <osKernelInitialize+0x44>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d105      	bne.n	800dc96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dc8a:	4b08      	ldr	r3, [pc, #32]	; (800dcac <osKernelInitialize+0x44>)
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dc90:	2300      	movs	r3, #0
 800dc92:	607b      	str	r3, [r7, #4]
 800dc94:	e002      	b.n	800dc9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dc96:	f04f 33ff 	mov.w	r3, #4294967295
 800dc9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc9c:	687b      	ldr	r3, [r7, #4]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	370c      	adds	r7, #12
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr
 800dcaa:	bf00      	nop
 800dcac:	200005dc 	.word	0x200005dc

0800dcb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcb6:	f3ef 8305 	mrs	r3, IPSR
 800dcba:	603b      	str	r3, [r7, #0]
  return(result);
 800dcbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d003      	beq.n	800dcca <osKernelStart+0x1a>
    stat = osErrorISR;
 800dcc2:	f06f 0305 	mvn.w	r3, #5
 800dcc6:	607b      	str	r3, [r7, #4]
 800dcc8:	e010      	b.n	800dcec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dcca:	4b0b      	ldr	r3, [pc, #44]	; (800dcf8 <osKernelStart+0x48>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d109      	bne.n	800dce6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dcd2:	f7ff ffbf 	bl	800dc54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dcd6:	4b08      	ldr	r3, [pc, #32]	; (800dcf8 <osKernelStart+0x48>)
 800dcd8:	2202      	movs	r2, #2
 800dcda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dcdc:	f001 f8fe 	bl	800eedc <vTaskStartScheduler>
      stat = osOK;
 800dce0:	2300      	movs	r3, #0
 800dce2:	607b      	str	r3, [r7, #4]
 800dce4:	e002      	b.n	800dcec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dce6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dcec:	687b      	ldr	r3, [r7, #4]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3708      	adds	r7, #8
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	200005dc 	.word	0x200005dc

0800dcfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b08e      	sub	sp, #56	; 0x38
 800dd00:	af04      	add	r7, sp, #16
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd0c:	f3ef 8305 	mrs	r3, IPSR
 800dd10:	617b      	str	r3, [r7, #20]
  return(result);
 800dd12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d17e      	bne.n	800de16 <osThreadNew+0x11a>
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d07b      	beq.n	800de16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dd1e:	2380      	movs	r3, #128	; 0x80
 800dd20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dd22:	2318      	movs	r3, #24
 800dd24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dd26:	2300      	movs	r3, #0
 800dd28:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dd2a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d045      	beq.n	800ddc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d002      	beq.n	800dd44 <osThreadNew+0x48>
        name = attr->name;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	699b      	ldr	r3, [r3, #24]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d002      	beq.n	800dd52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	699b      	ldr	r3, [r3, #24]
 800dd50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d008      	beq.n	800dd6a <osThreadNew+0x6e>
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	2b38      	cmp	r3, #56	; 0x38
 800dd5c:	d805      	bhi.n	800dd6a <osThreadNew+0x6e>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	f003 0301 	and.w	r3, r3, #1
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d001      	beq.n	800dd6e <osThreadNew+0x72>
        return (NULL);
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	e054      	b.n	800de18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	695b      	ldr	r3, [r3, #20]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d003      	beq.n	800dd7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	695b      	ldr	r3, [r3, #20]
 800dd7a:	089b      	lsrs	r3, r3, #2
 800dd7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d00e      	beq.n	800dda4 <osThreadNew+0xa8>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	2bbb      	cmp	r3, #187	; 0xbb
 800dd8c:	d90a      	bls.n	800dda4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d006      	beq.n	800dda4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	695b      	ldr	r3, [r3, #20]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d002      	beq.n	800dda4 <osThreadNew+0xa8>
        mem = 1;
 800dd9e:	2301      	movs	r3, #1
 800dda0:	61bb      	str	r3, [r7, #24]
 800dda2:	e010      	b.n	800ddc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d10c      	bne.n	800ddc6 <osThreadNew+0xca>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	68db      	ldr	r3, [r3, #12]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d108      	bne.n	800ddc6 <osThreadNew+0xca>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	691b      	ldr	r3, [r3, #16]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d104      	bne.n	800ddc6 <osThreadNew+0xca>
          mem = 0;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	61bb      	str	r3, [r7, #24]
 800ddc0:	e001      	b.n	800ddc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ddc6:	69bb      	ldr	r3, [r7, #24]
 800ddc8:	2b01      	cmp	r3, #1
 800ddca:	d110      	bne.n	800ddee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ddd4:	9202      	str	r2, [sp, #8]
 800ddd6:	9301      	str	r3, [sp, #4]
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	9300      	str	r3, [sp, #0]
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	6a3a      	ldr	r2, [r7, #32]
 800dde0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dde2:	68f8      	ldr	r0, [r7, #12]
 800dde4:	f000 fe1c 	bl	800ea20 <xTaskCreateStatic>
 800dde8:	4603      	mov	r3, r0
 800ddea:	613b      	str	r3, [r7, #16]
 800ddec:	e013      	b.n	800de16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d110      	bne.n	800de16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ddf4:	6a3b      	ldr	r3, [r7, #32]
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	f107 0310 	add.w	r3, r7, #16
 800ddfc:	9301      	str	r3, [sp, #4]
 800ddfe:	69fb      	ldr	r3, [r7, #28]
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f000 fe67 	bl	800eada <xTaskCreate>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d001      	beq.n	800de16 <osThreadNew+0x11a>
            hTask = NULL;
 800de12:	2300      	movs	r3, #0
 800de14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800de16:	693b      	ldr	r3, [r7, #16]
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3728      	adds	r7, #40	; 0x28
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800de26:	f001 fcb5 	bl	800f794 <xTaskGetCurrentTaskHandle>
 800de2a:	6078      	str	r0, [r7, #4]

  return (id);
 800de2c:	687b      	ldr	r3, [r7, #4]
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3708      	adds	r7, #8
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800de36:	b580      	push	{r7, lr}
 800de38:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800de3a:	2000      	movs	r0, #0
 800de3c:	f000 ffa8 	bl	800ed90 <vTaskDelete>
#endif
  for (;;);
 800de40:	e7fe      	b.n	800de40 <osThreadExit+0xa>

0800de42 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800de42:	b580      	push	{r7, lr}
 800de44:	b084      	sub	sp, #16
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de4a:	f3ef 8305 	mrs	r3, IPSR
 800de4e:	60bb      	str	r3, [r7, #8]
  return(result);
 800de50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de52:	2b00      	cmp	r3, #0
 800de54:	d003      	beq.n	800de5e <osDelay+0x1c>
    stat = osErrorISR;
 800de56:	f06f 0305 	mvn.w	r3, #5
 800de5a:	60fb      	str	r3, [r7, #12]
 800de5c:	e007      	b.n	800de6e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800de5e:	2300      	movs	r3, #0
 800de60:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d002      	beq.n	800de6e <osDelay+0x2c>
      vTaskDelay(ticks);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f001 f803 	bl	800ee74 <vTaskDelay>
    }
  }

  return (stat);
 800de6e:	68fb      	ldr	r3, [r7, #12]
}
 800de70:	4618      	mov	r0, r3
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800de78:	b480      	push	{r7}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	4a07      	ldr	r2, [pc, #28]	; (800dea4 <vApplicationGetIdleTaskMemory+0x2c>)
 800de88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	4a06      	ldr	r2, [pc, #24]	; (800dea8 <vApplicationGetIdleTaskMemory+0x30>)
 800de8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2280      	movs	r2, #128	; 0x80
 800de94:	601a      	str	r2, [r3, #0]
}
 800de96:	bf00      	nop
 800de98:	3714      	adds	r7, #20
 800de9a:	46bd      	mov	sp, r7
 800de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea0:	4770      	bx	lr
 800dea2:	bf00      	nop
 800dea4:	200005e0 	.word	0x200005e0
 800dea8:	2000069c 	.word	0x2000069c

0800deac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800deac:	b480      	push	{r7}
 800deae:	b085      	sub	sp, #20
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	4a07      	ldr	r2, [pc, #28]	; (800ded8 <vApplicationGetTimerTaskMemory+0x2c>)
 800debc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	4a06      	ldr	r2, [pc, #24]	; (800dedc <vApplicationGetTimerTaskMemory+0x30>)
 800dec2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800deca:	601a      	str	r2, [r3, #0]
}
 800decc:	bf00      	nop
 800dece:	3714      	adds	r7, #20
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr
 800ded8:	2000089c 	.word	0x2000089c
 800dedc:	20000958 	.word	0x20000958

0800dee0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f103 0208 	add.w	r2, r3, #8
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f04f 32ff 	mov.w	r2, #4294967295
 800def8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f103 0208 	add.w	r2, r3, #8
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f103 0208 	add.w	r2, r3, #8
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2200      	movs	r2, #0
 800df12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800df14:	bf00      	nop
 800df16:	370c      	adds	r7, #12
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2200      	movs	r2, #0
 800df2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800df2e:	bf00      	nop
 800df30:	370c      	adds	r7, #12
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr

0800df3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df3a:	b480      	push	{r7}
 800df3c:	b085      	sub	sp, #20
 800df3e:	af00      	add	r7, sp, #0
 800df40:	6078      	str	r0, [r7, #4]
 800df42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	68fa      	ldr	r2, [r7, #12]
 800df4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	689a      	ldr	r2, [r3, #8]
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	689b      	ldr	r3, [r3, #8]
 800df5c:	683a      	ldr	r2, [r7, #0]
 800df5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	683a      	ldr	r2, [r7, #0]
 800df64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	687a      	ldr	r2, [r7, #4]
 800df6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	1c5a      	adds	r2, r3, #1
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	601a      	str	r2, [r3, #0]
}
 800df76:	bf00      	nop
 800df78:	3714      	adds	r7, #20
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr

0800df82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df82:	b480      	push	{r7}
 800df84:	b085      	sub	sp, #20
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
 800df8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df98:	d103      	bne.n	800dfa2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	691b      	ldr	r3, [r3, #16]
 800df9e:	60fb      	str	r3, [r7, #12]
 800dfa0:	e00c      	b.n	800dfbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	3308      	adds	r3, #8
 800dfa6:	60fb      	str	r3, [r7, #12]
 800dfa8:	e002      	b.n	800dfb0 <vListInsert+0x2e>
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	60fb      	str	r3, [r7, #12]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	68ba      	ldr	r2, [r7, #8]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d2f6      	bcs.n	800dfaa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	685a      	ldr	r2, [r3, #4]
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	683a      	ldr	r2, [r7, #0]
 800dfca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	68fa      	ldr	r2, [r7, #12]
 800dfd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	683a      	ldr	r2, [r7, #0]
 800dfd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	1c5a      	adds	r2, r3, #1
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	601a      	str	r2, [r3, #0]
}
 800dfe8:	bf00      	nop
 800dfea:	3714      	adds	r7, #20
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dff4:	b480      	push	{r7}
 800dff6:	b085      	sub	sp, #20
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	691b      	ldr	r3, [r3, #16]
 800e000:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	687a      	ldr	r2, [r7, #4]
 800e008:	6892      	ldr	r2, [r2, #8]
 800e00a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	6852      	ldr	r2, [r2, #4]
 800e014:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d103      	bne.n	800e028 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	689a      	ldr	r2, [r3, #8]
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2200      	movs	r2, #0
 800e02c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	1e5a      	subs	r2, r3, #1
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3714      	adds	r7, #20
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b084      	sub	sp, #16
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d10a      	bne.n	800e072 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e060:	f383 8811 	msr	BASEPRI, r3
 800e064:	f3bf 8f6f 	isb	sy
 800e068:	f3bf 8f4f 	dsb	sy
 800e06c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e06e:	bf00      	nop
 800e070:	e7fe      	b.n	800e070 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e072:	f002 f8f7 	bl	8010264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681a      	ldr	r2, [r3, #0]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e07e:	68f9      	ldr	r1, [r7, #12]
 800e080:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e082:	fb01 f303 	mul.w	r3, r1, r3
 800e086:	441a      	add	r2, r3
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2200      	movs	r2, #0
 800e090:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	68f9      	ldr	r1, [r7, #12]
 800e0a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e0a8:	fb01 f303 	mul.w	r3, r1, r3
 800e0ac:	441a      	add	r2, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	22ff      	movs	r2, #255	; 0xff
 800e0b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	22ff      	movs	r2, #255	; 0xff
 800e0be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d114      	bne.n	800e0f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	691b      	ldr	r3, [r3, #16]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d01a      	beq.n	800e106 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	3310      	adds	r3, #16
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f001 f99b 	bl	800f410 <xTaskRemoveFromEventList>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d012      	beq.n	800e106 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e0e0:	4b0c      	ldr	r3, [pc, #48]	; (800e114 <xQueueGenericReset+0xcc>)
 800e0e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0e6:	601a      	str	r2, [r3, #0]
 800e0e8:	f3bf 8f4f 	dsb	sy
 800e0ec:	f3bf 8f6f 	isb	sy
 800e0f0:	e009      	b.n	800e106 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	3310      	adds	r3, #16
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7ff fef2 	bl	800dee0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	3324      	adds	r3, #36	; 0x24
 800e100:	4618      	mov	r0, r3
 800e102:	f7ff feed 	bl	800dee0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e106:	f002 f8dd 	bl	80102c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e10a:	2301      	movs	r3, #1
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3710      	adds	r7, #16
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	e000ed04 	.word	0xe000ed04

0800e118 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b08e      	sub	sp, #56	; 0x38
 800e11c:	af02      	add	r7, sp, #8
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	607a      	str	r2, [r7, #4]
 800e124:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d10a      	bne.n	800e142 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e130:	f383 8811 	msr	BASEPRI, r3
 800e134:	f3bf 8f6f 	isb	sy
 800e138:	f3bf 8f4f 	dsb	sy
 800e13c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e13e:	bf00      	nop
 800e140:	e7fe      	b.n	800e140 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d10a      	bne.n	800e15e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14c:	f383 8811 	msr	BASEPRI, r3
 800e150:	f3bf 8f6f 	isb	sy
 800e154:	f3bf 8f4f 	dsb	sy
 800e158:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e15a:	bf00      	nop
 800e15c:	e7fe      	b.n	800e15c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d002      	beq.n	800e16a <xQueueGenericCreateStatic+0x52>
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d001      	beq.n	800e16e <xQueueGenericCreateStatic+0x56>
 800e16a:	2301      	movs	r3, #1
 800e16c:	e000      	b.n	800e170 <xQueueGenericCreateStatic+0x58>
 800e16e:	2300      	movs	r3, #0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d10a      	bne.n	800e18a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e178:	f383 8811 	msr	BASEPRI, r3
 800e17c:	f3bf 8f6f 	isb	sy
 800e180:	f3bf 8f4f 	dsb	sy
 800e184:	623b      	str	r3, [r7, #32]
}
 800e186:	bf00      	nop
 800e188:	e7fe      	b.n	800e188 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d102      	bne.n	800e196 <xQueueGenericCreateStatic+0x7e>
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d101      	bne.n	800e19a <xQueueGenericCreateStatic+0x82>
 800e196:	2301      	movs	r3, #1
 800e198:	e000      	b.n	800e19c <xQueueGenericCreateStatic+0x84>
 800e19a:	2300      	movs	r3, #0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d10a      	bne.n	800e1b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a4:	f383 8811 	msr	BASEPRI, r3
 800e1a8:	f3bf 8f6f 	isb	sy
 800e1ac:	f3bf 8f4f 	dsb	sy
 800e1b0:	61fb      	str	r3, [r7, #28]
}
 800e1b2:	bf00      	nop
 800e1b4:	e7fe      	b.n	800e1b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e1b6:	2350      	movs	r3, #80	; 0x50
 800e1b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	2b50      	cmp	r3, #80	; 0x50
 800e1be:	d00a      	beq.n	800e1d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c4:	f383 8811 	msr	BASEPRI, r3
 800e1c8:	f3bf 8f6f 	isb	sy
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	61bb      	str	r3, [r7, #24]
}
 800e1d2:	bf00      	nop
 800e1d4:	e7fe      	b.n	800e1d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e1d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00d      	beq.n	800e1fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e1ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f0:	9300      	str	r3, [sp, #0]
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	68b9      	ldr	r1, [r7, #8]
 800e1f8:	68f8      	ldr	r0, [r7, #12]
 800e1fa:	f000 f805 	bl	800e208 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e200:	4618      	mov	r0, r3
 800e202:	3730      	adds	r7, #48	; 0x30
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b084      	sub	sp, #16
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	607a      	str	r2, [r7, #4]
 800e214:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d103      	bne.n	800e224 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e21c:	69bb      	ldr	r3, [r7, #24]
 800e21e:	69ba      	ldr	r2, [r7, #24]
 800e220:	601a      	str	r2, [r3, #0]
 800e222:	e002      	b.n	800e22a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	68fa      	ldr	r2, [r7, #12]
 800e22e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e230:	69bb      	ldr	r3, [r7, #24]
 800e232:	68ba      	ldr	r2, [r7, #8]
 800e234:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e236:	2101      	movs	r1, #1
 800e238:	69b8      	ldr	r0, [r7, #24]
 800e23a:	f7ff ff05 	bl	800e048 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	78fa      	ldrb	r2, [r7, #3]
 800e242:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e246:	bf00      	nop
 800e248:	3710      	adds	r7, #16
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
	...

0800e250 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b08e      	sub	sp, #56	; 0x38
 800e254:	af00      	add	r7, sp, #0
 800e256:	60f8      	str	r0, [r7, #12]
 800e258:	60b9      	str	r1, [r7, #8]
 800e25a:	607a      	str	r2, [r7, #4]
 800e25c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e25e:	2300      	movs	r3, #0
 800e260:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d10a      	bne.n	800e282 <xQueueGenericSend+0x32>
	__asm volatile
 800e26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e270:	f383 8811 	msr	BASEPRI, r3
 800e274:	f3bf 8f6f 	isb	sy
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e27e:	bf00      	nop
 800e280:	e7fe      	b.n	800e280 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d103      	bne.n	800e290 <xQueueGenericSend+0x40>
 800e288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d101      	bne.n	800e294 <xQueueGenericSend+0x44>
 800e290:	2301      	movs	r3, #1
 800e292:	e000      	b.n	800e296 <xQueueGenericSend+0x46>
 800e294:	2300      	movs	r3, #0
 800e296:	2b00      	cmp	r3, #0
 800e298:	d10a      	bne.n	800e2b0 <xQueueGenericSend+0x60>
	__asm volatile
 800e29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e2ac:	bf00      	nop
 800e2ae:	e7fe      	b.n	800e2ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	2b02      	cmp	r3, #2
 800e2b4:	d103      	bne.n	800e2be <xQueueGenericSend+0x6e>
 800e2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2ba:	2b01      	cmp	r3, #1
 800e2bc:	d101      	bne.n	800e2c2 <xQueueGenericSend+0x72>
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e000      	b.n	800e2c4 <xQueueGenericSend+0x74>
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10a      	bne.n	800e2de <xQueueGenericSend+0x8e>
	__asm volatile
 800e2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2cc:	f383 8811 	msr	BASEPRI, r3
 800e2d0:	f3bf 8f6f 	isb	sy
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	623b      	str	r3, [r7, #32]
}
 800e2da:	bf00      	nop
 800e2dc:	e7fe      	b.n	800e2dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2de:	f001 fa69 	bl	800f7b4 <xTaskGetSchedulerState>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d102      	bne.n	800e2ee <xQueueGenericSend+0x9e>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d101      	bne.n	800e2f2 <xQueueGenericSend+0xa2>
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e000      	b.n	800e2f4 <xQueueGenericSend+0xa4>
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d10a      	bne.n	800e30e <xQueueGenericSend+0xbe>
	__asm volatile
 800e2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2fc:	f383 8811 	msr	BASEPRI, r3
 800e300:	f3bf 8f6f 	isb	sy
 800e304:	f3bf 8f4f 	dsb	sy
 800e308:	61fb      	str	r3, [r7, #28]
}
 800e30a:	bf00      	nop
 800e30c:	e7fe      	b.n	800e30c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e30e:	f001 ffa9 	bl	8010264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d302      	bcc.n	800e324 <xQueueGenericSend+0xd4>
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	2b02      	cmp	r3, #2
 800e322:	d129      	bne.n	800e378 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e324:	683a      	ldr	r2, [r7, #0]
 800e326:	68b9      	ldr	r1, [r7, #8]
 800e328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e32a:	f000 fa0b 	bl	800e744 <prvCopyDataToQueue>
 800e32e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e334:	2b00      	cmp	r3, #0
 800e336:	d010      	beq.n	800e35a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33a:	3324      	adds	r3, #36	; 0x24
 800e33c:	4618      	mov	r0, r3
 800e33e:	f001 f867 	bl	800f410 <xTaskRemoveFromEventList>
 800e342:	4603      	mov	r3, r0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d013      	beq.n	800e370 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e348:	4b3f      	ldr	r3, [pc, #252]	; (800e448 <xQueueGenericSend+0x1f8>)
 800e34a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e34e:	601a      	str	r2, [r3, #0]
 800e350:	f3bf 8f4f 	dsb	sy
 800e354:	f3bf 8f6f 	isb	sy
 800e358:	e00a      	b.n	800e370 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d007      	beq.n	800e370 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e360:	4b39      	ldr	r3, [pc, #228]	; (800e448 <xQueueGenericSend+0x1f8>)
 800e362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e366:	601a      	str	r2, [r3, #0]
 800e368:	f3bf 8f4f 	dsb	sy
 800e36c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e370:	f001 ffa8 	bl	80102c4 <vPortExitCritical>
				return pdPASS;
 800e374:	2301      	movs	r3, #1
 800e376:	e063      	b.n	800e440 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d103      	bne.n	800e386 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e37e:	f001 ffa1 	bl	80102c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e382:	2300      	movs	r3, #0
 800e384:	e05c      	b.n	800e440 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d106      	bne.n	800e39a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e38c:	f107 0314 	add.w	r3, r7, #20
 800e390:	4618      	mov	r0, r3
 800e392:	f001 f8a1 	bl	800f4d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e396:	2301      	movs	r3, #1
 800e398:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e39a:	f001 ff93 	bl	80102c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e39e:	f000 fe0d 	bl	800efbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e3a2:	f001 ff5f 	bl	8010264 <vPortEnterCritical>
 800e3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3ac:	b25b      	sxtb	r3, r3
 800e3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b2:	d103      	bne.n	800e3bc <xQueueGenericSend+0x16c>
 800e3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3c2:	b25b      	sxtb	r3, r3
 800e3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c8:	d103      	bne.n	800e3d2 <xQueueGenericSend+0x182>
 800e3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3d2:	f001 ff77 	bl	80102c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3d6:	1d3a      	adds	r2, r7, #4
 800e3d8:	f107 0314 	add.w	r3, r7, #20
 800e3dc:	4611      	mov	r1, r2
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f001 f890 	bl	800f504 <xTaskCheckForTimeOut>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d124      	bne.n	800e434 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e3ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3ec:	f000 faa2 	bl	800e934 <prvIsQueueFull>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d018      	beq.n	800e428 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f8:	3310      	adds	r3, #16
 800e3fa:	687a      	ldr	r2, [r7, #4]
 800e3fc:	4611      	mov	r1, r2
 800e3fe:	4618      	mov	r0, r3
 800e400:	f000 ffb6 	bl	800f370 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e406:	f000 fa2d 	bl	800e864 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e40a:	f000 fde5 	bl	800efd8 <xTaskResumeAll>
 800e40e:	4603      	mov	r3, r0
 800e410:	2b00      	cmp	r3, #0
 800e412:	f47f af7c 	bne.w	800e30e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e416:	4b0c      	ldr	r3, [pc, #48]	; (800e448 <xQueueGenericSend+0x1f8>)
 800e418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e41c:	601a      	str	r2, [r3, #0]
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	e772      	b.n	800e30e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e42a:	f000 fa1b 	bl	800e864 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e42e:	f000 fdd3 	bl	800efd8 <xTaskResumeAll>
 800e432:	e76c      	b.n	800e30e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e436:	f000 fa15 	bl	800e864 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e43a:	f000 fdcd 	bl	800efd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e43e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e440:	4618      	mov	r0, r3
 800e442:	3738      	adds	r7, #56	; 0x38
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	e000ed04 	.word	0xe000ed04

0800e44c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b090      	sub	sp, #64	; 0x40
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
 800e458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e460:	2b00      	cmp	r3, #0
 800e462:	d10a      	bne.n	800e47a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e468:	f383 8811 	msr	BASEPRI, r3
 800e46c:	f3bf 8f6f 	isb	sy
 800e470:	f3bf 8f4f 	dsb	sy
 800e474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e476:	bf00      	nop
 800e478:	e7fe      	b.n	800e478 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d103      	bne.n	800e488 <xQueueGenericSendFromISR+0x3c>
 800e480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e484:	2b00      	cmp	r3, #0
 800e486:	d101      	bne.n	800e48c <xQueueGenericSendFromISR+0x40>
 800e488:	2301      	movs	r3, #1
 800e48a:	e000      	b.n	800e48e <xQueueGenericSendFromISR+0x42>
 800e48c:	2300      	movs	r3, #0
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d10a      	bne.n	800e4a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e496:	f383 8811 	msr	BASEPRI, r3
 800e49a:	f3bf 8f6f 	isb	sy
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e4a4:	bf00      	nop
 800e4a6:	e7fe      	b.n	800e4a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	2b02      	cmp	r3, #2
 800e4ac:	d103      	bne.n	800e4b6 <xQueueGenericSendFromISR+0x6a>
 800e4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4b2:	2b01      	cmp	r3, #1
 800e4b4:	d101      	bne.n	800e4ba <xQueueGenericSendFromISR+0x6e>
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e000      	b.n	800e4bc <xQueueGenericSendFromISR+0x70>
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d10a      	bne.n	800e4d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c4:	f383 8811 	msr	BASEPRI, r3
 800e4c8:	f3bf 8f6f 	isb	sy
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	623b      	str	r3, [r7, #32]
}
 800e4d2:	bf00      	nop
 800e4d4:	e7fe      	b.n	800e4d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4d6:	f001 ffa7 	bl	8010428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e4da:	f3ef 8211 	mrs	r2, BASEPRI
 800e4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e2:	f383 8811 	msr	BASEPRI, r3
 800e4e6:	f3bf 8f6f 	isb	sy
 800e4ea:	f3bf 8f4f 	dsb	sy
 800e4ee:	61fa      	str	r2, [r7, #28]
 800e4f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e4f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e4f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d302      	bcc.n	800e508 <xQueueGenericSendFromISR+0xbc>
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	2b02      	cmp	r3, #2
 800e506:	d12f      	bne.n	800e568 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e516:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e518:	683a      	ldr	r2, [r7, #0]
 800e51a:	68b9      	ldr	r1, [r7, #8]
 800e51c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e51e:	f000 f911 	bl	800e744 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e522:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e52a:	d112      	bne.n	800e552 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e530:	2b00      	cmp	r3, #0
 800e532:	d016      	beq.n	800e562 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e536:	3324      	adds	r3, #36	; 0x24
 800e538:	4618      	mov	r0, r3
 800e53a:	f000 ff69 	bl	800f410 <xTaskRemoveFromEventList>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d00e      	beq.n	800e562 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00b      	beq.n	800e562 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2201      	movs	r2, #1
 800e54e:	601a      	str	r2, [r3, #0]
 800e550:	e007      	b.n	800e562 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e552:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e556:	3301      	adds	r3, #1
 800e558:	b2db      	uxtb	r3, r3
 800e55a:	b25a      	sxtb	r2, r3
 800e55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e562:	2301      	movs	r3, #1
 800e564:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e566:	e001      	b.n	800e56c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e568:	2300      	movs	r3, #0
 800e56a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e56e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e576:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3740      	adds	r7, #64	; 0x40
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
	...

0800e584 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b08c      	sub	sp, #48	; 0x30
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e590:	2300      	movs	r3, #0
 800e592:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d10a      	bne.n	800e5b4 <xQueueReceive+0x30>
	__asm volatile
 800e59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a2:	f383 8811 	msr	BASEPRI, r3
 800e5a6:	f3bf 8f6f 	isb	sy
 800e5aa:	f3bf 8f4f 	dsb	sy
 800e5ae:	623b      	str	r3, [r7, #32]
}
 800e5b0:	bf00      	nop
 800e5b2:	e7fe      	b.n	800e5b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d103      	bne.n	800e5c2 <xQueueReceive+0x3e>
 800e5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d101      	bne.n	800e5c6 <xQueueReceive+0x42>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e000      	b.n	800e5c8 <xQueueReceive+0x44>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d10a      	bne.n	800e5e2 <xQueueReceive+0x5e>
	__asm volatile
 800e5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d0:	f383 8811 	msr	BASEPRI, r3
 800e5d4:	f3bf 8f6f 	isb	sy
 800e5d8:	f3bf 8f4f 	dsb	sy
 800e5dc:	61fb      	str	r3, [r7, #28]
}
 800e5de:	bf00      	nop
 800e5e0:	e7fe      	b.n	800e5e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5e2:	f001 f8e7 	bl	800f7b4 <xTaskGetSchedulerState>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d102      	bne.n	800e5f2 <xQueueReceive+0x6e>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d101      	bne.n	800e5f6 <xQueueReceive+0x72>
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	e000      	b.n	800e5f8 <xQueueReceive+0x74>
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d10a      	bne.n	800e612 <xQueueReceive+0x8e>
	__asm volatile
 800e5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e600:	f383 8811 	msr	BASEPRI, r3
 800e604:	f3bf 8f6f 	isb	sy
 800e608:	f3bf 8f4f 	dsb	sy
 800e60c:	61bb      	str	r3, [r7, #24]
}
 800e60e:	bf00      	nop
 800e610:	e7fe      	b.n	800e610 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e612:	f001 fe27 	bl	8010264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d01f      	beq.n	800e662 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e622:	68b9      	ldr	r1, [r7, #8]
 800e624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e626:	f000 f8f7 	bl	800e818 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62c:	1e5a      	subs	r2, r3, #1
 800e62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e630:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e634:	691b      	ldr	r3, [r3, #16]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d00f      	beq.n	800e65a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63c:	3310      	adds	r3, #16
 800e63e:	4618      	mov	r0, r3
 800e640:	f000 fee6 	bl	800f410 <xTaskRemoveFromEventList>
 800e644:	4603      	mov	r3, r0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d007      	beq.n	800e65a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e64a:	4b3d      	ldr	r3, [pc, #244]	; (800e740 <xQueueReceive+0x1bc>)
 800e64c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e650:	601a      	str	r2, [r3, #0]
 800e652:	f3bf 8f4f 	dsb	sy
 800e656:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e65a:	f001 fe33 	bl	80102c4 <vPortExitCritical>
				return pdPASS;
 800e65e:	2301      	movs	r3, #1
 800e660:	e069      	b.n	800e736 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d103      	bne.n	800e670 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e668:	f001 fe2c 	bl	80102c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e66c:	2300      	movs	r3, #0
 800e66e:	e062      	b.n	800e736 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e672:	2b00      	cmp	r3, #0
 800e674:	d106      	bne.n	800e684 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e676:	f107 0310 	add.w	r3, r7, #16
 800e67a:	4618      	mov	r0, r3
 800e67c:	f000 ff2c 	bl	800f4d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e680:	2301      	movs	r3, #1
 800e682:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e684:	f001 fe1e 	bl	80102c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e688:	f000 fc98 	bl	800efbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e68c:	f001 fdea 	bl	8010264 <vPortEnterCritical>
 800e690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e692:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e696:	b25b      	sxtb	r3, r3
 800e698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e69c:	d103      	bne.n	800e6a6 <xQueueReceive+0x122>
 800e69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6ac:	b25b      	sxtb	r3, r3
 800e6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b2:	d103      	bne.n	800e6bc <xQueueReceive+0x138>
 800e6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6bc:	f001 fe02 	bl	80102c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e6c0:	1d3a      	adds	r2, r7, #4
 800e6c2:	f107 0310 	add.w	r3, r7, #16
 800e6c6:	4611      	mov	r1, r2
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f000 ff1b 	bl	800f504 <xTaskCheckForTimeOut>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d123      	bne.n	800e71c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e6d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6d6:	f000 f917 	bl	800e908 <prvIsQueueEmpty>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d017      	beq.n	800e710 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e2:	3324      	adds	r3, #36	; 0x24
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	4611      	mov	r1, r2
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f000 fe41 	bl	800f370 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e6ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6f0:	f000 f8b8 	bl	800e864 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e6f4:	f000 fc70 	bl	800efd8 <xTaskResumeAll>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d189      	bne.n	800e612 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e6fe:	4b10      	ldr	r3, [pc, #64]	; (800e740 <xQueueReceive+0x1bc>)
 800e700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e704:	601a      	str	r2, [r3, #0]
 800e706:	f3bf 8f4f 	dsb	sy
 800e70a:	f3bf 8f6f 	isb	sy
 800e70e:	e780      	b.n	800e612 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e712:	f000 f8a7 	bl	800e864 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e716:	f000 fc5f 	bl	800efd8 <xTaskResumeAll>
 800e71a:	e77a      	b.n	800e612 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e71c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e71e:	f000 f8a1 	bl	800e864 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e722:	f000 fc59 	bl	800efd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e728:	f000 f8ee 	bl	800e908 <prvIsQueueEmpty>
 800e72c:	4603      	mov	r3, r0
 800e72e:	2b00      	cmp	r3, #0
 800e730:	f43f af6f 	beq.w	800e612 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e734:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e736:	4618      	mov	r0, r3
 800e738:	3730      	adds	r7, #48	; 0x30
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop
 800e740:	e000ed04 	.word	0xe000ed04

0800e744 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b086      	sub	sp, #24
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e750:	2300      	movs	r3, #0
 800e752:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e758:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d10d      	bne.n	800e77e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d14d      	bne.n	800e806 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	689b      	ldr	r3, [r3, #8]
 800e76e:	4618      	mov	r0, r3
 800e770:	f001 f83e 	bl	800f7f0 <xTaskPriorityDisinherit>
 800e774:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2200      	movs	r2, #0
 800e77a:	609a      	str	r2, [r3, #8]
 800e77c:	e043      	b.n	800e806 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d119      	bne.n	800e7b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6858      	ldr	r0, [r3, #4]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e78c:	461a      	mov	r2, r3
 800e78e:	68b9      	ldr	r1, [r7, #8]
 800e790:	f002 fafc 	bl	8010d8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	685a      	ldr	r2, [r3, #4]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e79c:	441a      	add	r2, r3
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	685a      	ldr	r2, [r3, #4]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	689b      	ldr	r3, [r3, #8]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d32b      	bcc.n	800e806 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	605a      	str	r2, [r3, #4]
 800e7b6:	e026      	b.n	800e806 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	68d8      	ldr	r0, [r3, #12]
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	68b9      	ldr	r1, [r7, #8]
 800e7c4:	f002 fae2 	bl	8010d8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	68da      	ldr	r2, [r3, #12]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d0:	425b      	negs	r3, r3
 800e7d2:	441a      	add	r2, r3
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	68da      	ldr	r2, [r3, #12]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d207      	bcs.n	800e7f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	689a      	ldr	r2, [r3, #8]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ec:	425b      	negs	r3, r3
 800e7ee:	441a      	add	r2, r3
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2b02      	cmp	r3, #2
 800e7f8:	d105      	bne.n	800e806 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d002      	beq.n	800e806 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	3b01      	subs	r3, #1
 800e804:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	1c5a      	adds	r2, r3, #1
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e80e:	697b      	ldr	r3, [r7, #20]
}
 800e810:	4618      	mov	r0, r3
 800e812:	3718      	adds	r7, #24
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e826:	2b00      	cmp	r3, #0
 800e828:	d018      	beq.n	800e85c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	68da      	ldr	r2, [r3, #12]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e832:	441a      	add	r2, r3
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	68da      	ldr	r2, [r3, #12]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	689b      	ldr	r3, [r3, #8]
 800e840:	429a      	cmp	r2, r3
 800e842:	d303      	bcc.n	800e84c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	68d9      	ldr	r1, [r3, #12]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e854:	461a      	mov	r2, r3
 800e856:	6838      	ldr	r0, [r7, #0]
 800e858:	f002 fa98 	bl	8010d8c <memcpy>
	}
}
 800e85c:	bf00      	nop
 800e85e:	3708      	adds	r7, #8
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e86c:	f001 fcfa 	bl	8010264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e876:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e878:	e011      	b.n	800e89e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d012      	beq.n	800e8a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	3324      	adds	r3, #36	; 0x24
 800e886:	4618      	mov	r0, r3
 800e888:	f000 fdc2 	bl	800f410 <xTaskRemoveFromEventList>
 800e88c:	4603      	mov	r3, r0
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d001      	beq.n	800e896 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e892:	f000 fe99 	bl	800f5c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e896:	7bfb      	ldrb	r3, [r7, #15]
 800e898:	3b01      	subs	r3, #1
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e89e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	dce9      	bgt.n	800e87a <prvUnlockQueue+0x16>
 800e8a6:	e000      	b.n	800e8aa <prvUnlockQueue+0x46>
					break;
 800e8a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	22ff      	movs	r2, #255	; 0xff
 800e8ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e8b2:	f001 fd07 	bl	80102c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e8b6:	f001 fcd5 	bl	8010264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e8c2:	e011      	b.n	800e8e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	691b      	ldr	r3, [r3, #16]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d012      	beq.n	800e8f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	3310      	adds	r3, #16
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f000 fd9d 	bl	800f410 <xTaskRemoveFromEventList>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d001      	beq.n	800e8e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e8dc:	f000 fe74 	bl	800f5c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e8e0:	7bbb      	ldrb	r3, [r7, #14]
 800e8e2:	3b01      	subs	r3, #1
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e8e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	dce9      	bgt.n	800e8c4 <prvUnlockQueue+0x60>
 800e8f0:	e000      	b.n	800e8f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e8f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	22ff      	movs	r2, #255	; 0xff
 800e8f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e8fc:	f001 fce2 	bl	80102c4 <vPortExitCritical>
}
 800e900:	bf00      	nop
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e910:	f001 fca8 	bl	8010264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d102      	bne.n	800e922 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e91c:	2301      	movs	r3, #1
 800e91e:	60fb      	str	r3, [r7, #12]
 800e920:	e001      	b.n	800e926 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e922:	2300      	movs	r3, #0
 800e924:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e926:	f001 fccd 	bl	80102c4 <vPortExitCritical>

	return xReturn;
 800e92a:	68fb      	ldr	r3, [r7, #12]
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3710      	adds	r7, #16
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e93c:	f001 fc92 	bl	8010264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e948:	429a      	cmp	r2, r3
 800e94a:	d102      	bne.n	800e952 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e94c:	2301      	movs	r3, #1
 800e94e:	60fb      	str	r3, [r7, #12]
 800e950:	e001      	b.n	800e956 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e952:	2300      	movs	r3, #0
 800e954:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e956:	f001 fcb5 	bl	80102c4 <vPortExitCritical>

	return xReturn;
 800e95a:	68fb      	ldr	r3, [r7, #12]
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3710      	adds	r7, #16
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e964:	b480      	push	{r7}
 800e966:	b085      	sub	sp, #20
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e96e:	2300      	movs	r3, #0
 800e970:	60fb      	str	r3, [r7, #12]
 800e972:	e014      	b.n	800e99e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e974:	4a0f      	ldr	r2, [pc, #60]	; (800e9b4 <vQueueAddToRegistry+0x50>)
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d10b      	bne.n	800e998 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e980:	490c      	ldr	r1, [pc, #48]	; (800e9b4 <vQueueAddToRegistry+0x50>)
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	683a      	ldr	r2, [r7, #0]
 800e986:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e98a:	4a0a      	ldr	r2, [pc, #40]	; (800e9b4 <vQueueAddToRegistry+0x50>)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	00db      	lsls	r3, r3, #3
 800e990:	4413      	add	r3, r2
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e996:	e006      	b.n	800e9a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	3301      	adds	r3, #1
 800e99c:	60fb      	str	r3, [r7, #12]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2b07      	cmp	r3, #7
 800e9a2:	d9e7      	bls.n	800e974 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e9a4:	bf00      	nop
 800e9a6:	bf00      	nop
 800e9a8:	3714      	adds	r7, #20
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop
 800e9b4:	20006144 	.word	0x20006144

0800e9b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b086      	sub	sp, #24
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e9c8:	f001 fc4c 	bl	8010264 <vPortEnterCritical>
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9d2:	b25b      	sxtb	r3, r3
 800e9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d8:	d103      	bne.n	800e9e2 <vQueueWaitForMessageRestricted+0x2a>
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9e8:	b25b      	sxtb	r3, r3
 800e9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ee:	d103      	bne.n	800e9f8 <vQueueWaitForMessageRestricted+0x40>
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9f8:	f001 fc64 	bl	80102c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d106      	bne.n	800ea12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	3324      	adds	r3, #36	; 0x24
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	68b9      	ldr	r1, [r7, #8]
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f000 fcd3 	bl	800f3b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ea12:	6978      	ldr	r0, [r7, #20]
 800ea14:	f7ff ff26 	bl	800e864 <prvUnlockQueue>
	}
 800ea18:	bf00      	nop
 800ea1a:	3718      	adds	r7, #24
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b08e      	sub	sp, #56	; 0x38
 800ea24:	af04      	add	r7, sp, #16
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	607a      	str	r2, [r7, #4]
 800ea2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ea2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d10a      	bne.n	800ea4a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ea34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea38:	f383 8811 	msr	BASEPRI, r3
 800ea3c:	f3bf 8f6f 	isb	sy
 800ea40:	f3bf 8f4f 	dsb	sy
 800ea44:	623b      	str	r3, [r7, #32]
}
 800ea46:	bf00      	nop
 800ea48:	e7fe      	b.n	800ea48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ea4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d10a      	bne.n	800ea66 <xTaskCreateStatic+0x46>
	__asm volatile
 800ea50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea54:	f383 8811 	msr	BASEPRI, r3
 800ea58:	f3bf 8f6f 	isb	sy
 800ea5c:	f3bf 8f4f 	dsb	sy
 800ea60:	61fb      	str	r3, [r7, #28]
}
 800ea62:	bf00      	nop
 800ea64:	e7fe      	b.n	800ea64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ea66:	23bc      	movs	r3, #188	; 0xbc
 800ea68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	2bbc      	cmp	r3, #188	; 0xbc
 800ea6e:	d00a      	beq.n	800ea86 <xTaskCreateStatic+0x66>
	__asm volatile
 800ea70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea74:	f383 8811 	msr	BASEPRI, r3
 800ea78:	f3bf 8f6f 	isb	sy
 800ea7c:	f3bf 8f4f 	dsb	sy
 800ea80:	61bb      	str	r3, [r7, #24]
}
 800ea82:	bf00      	nop
 800ea84:	e7fe      	b.n	800ea84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ea86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ea88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d01e      	beq.n	800eacc <xTaskCreateStatic+0xac>
 800ea8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d01b      	beq.n	800eacc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ea98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ea9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa0:	2202      	movs	r2, #2
 800eaa2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	9303      	str	r3, [sp, #12]
 800eaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaac:	9302      	str	r3, [sp, #8]
 800eaae:	f107 0314 	add.w	r3, r7, #20
 800eab2:	9301      	str	r3, [sp, #4]
 800eab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab6:	9300      	str	r3, [sp, #0]
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	68b9      	ldr	r1, [r7, #8]
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f000 f850 	bl	800eb64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eac6:	f000 f8f3 	bl	800ecb0 <prvAddNewTaskToReadyList>
 800eaca:	e001      	b.n	800ead0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800eacc:	2300      	movs	r3, #0
 800eace:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ead0:	697b      	ldr	r3, [r7, #20]
	}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3728      	adds	r7, #40	; 0x28
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eada:	b580      	push	{r7, lr}
 800eadc:	b08c      	sub	sp, #48	; 0x30
 800eade:	af04      	add	r7, sp, #16
 800eae0:	60f8      	str	r0, [r7, #12]
 800eae2:	60b9      	str	r1, [r7, #8]
 800eae4:	603b      	str	r3, [r7, #0]
 800eae6:	4613      	mov	r3, r2
 800eae8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eaea:	88fb      	ldrh	r3, [r7, #6]
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f001 fcda 	bl	80104a8 <pvPortMalloc>
 800eaf4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d00e      	beq.n	800eb1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eafc:	20bc      	movs	r0, #188	; 0xbc
 800eafe:	f001 fcd3 	bl	80104a8 <pvPortMalloc>
 800eb02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d003      	beq.n	800eb12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	697a      	ldr	r2, [r7, #20]
 800eb0e:	631a      	str	r2, [r3, #48]	; 0x30
 800eb10:	e005      	b.n	800eb1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eb12:	6978      	ldr	r0, [r7, #20]
 800eb14:	f001 fd94 	bl	8010640 <vPortFree>
 800eb18:	e001      	b.n	800eb1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eb1e:	69fb      	ldr	r3, [r7, #28]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d017      	beq.n	800eb54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	2200      	movs	r2, #0
 800eb28:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eb2c:	88fa      	ldrh	r2, [r7, #6]
 800eb2e:	2300      	movs	r3, #0
 800eb30:	9303      	str	r3, [sp, #12]
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	9302      	str	r3, [sp, #8]
 800eb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb38:	9301      	str	r3, [sp, #4]
 800eb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb3c:	9300      	str	r3, [sp, #0]
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	68b9      	ldr	r1, [r7, #8]
 800eb42:	68f8      	ldr	r0, [r7, #12]
 800eb44:	f000 f80e 	bl	800eb64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb48:	69f8      	ldr	r0, [r7, #28]
 800eb4a:	f000 f8b1 	bl	800ecb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	61bb      	str	r3, [r7, #24]
 800eb52:	e002      	b.n	800eb5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eb54:	f04f 33ff 	mov.w	r3, #4294967295
 800eb58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eb5a:	69bb      	ldr	r3, [r7, #24]
	}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3720      	adds	r7, #32
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b088      	sub	sp, #32
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	607a      	str	r2, [r7, #4]
 800eb70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800eb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	009b      	lsls	r3, r3, #2
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	21a5      	movs	r1, #165	; 0xa5
 800eb7e:	f002 f92d 	bl	8010ddc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eb8c:	3b01      	subs	r3, #1
 800eb8e:	009b      	lsls	r3, r3, #2
 800eb90:	4413      	add	r3, r2
 800eb92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eb94:	69bb      	ldr	r3, [r7, #24]
 800eb96:	f023 0307 	bic.w	r3, r3, #7
 800eb9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eb9c:	69bb      	ldr	r3, [r7, #24]
 800eb9e:	f003 0307 	and.w	r3, r3, #7
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00a      	beq.n	800ebbc <prvInitialiseNewTask+0x58>
	__asm volatile
 800eba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebaa:	f383 8811 	msr	BASEPRI, r3
 800ebae:	f3bf 8f6f 	isb	sy
 800ebb2:	f3bf 8f4f 	dsb	sy
 800ebb6:	617b      	str	r3, [r7, #20]
}
 800ebb8:	bf00      	nop
 800ebba:	e7fe      	b.n	800ebba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d01f      	beq.n	800ec02 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	61fb      	str	r3, [r7, #28]
 800ebc6:	e012      	b.n	800ebee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ebc8:	68ba      	ldr	r2, [r7, #8]
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	4413      	add	r3, r2
 800ebce:	7819      	ldrb	r1, [r3, #0]
 800ebd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	3334      	adds	r3, #52	; 0x34
 800ebd8:	460a      	mov	r2, r1
 800ebda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ebdc:	68ba      	ldr	r2, [r7, #8]
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	781b      	ldrb	r3, [r3, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d006      	beq.n	800ebf6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ebe8:	69fb      	ldr	r3, [r7, #28]
 800ebea:	3301      	adds	r3, #1
 800ebec:	61fb      	str	r3, [r7, #28]
 800ebee:	69fb      	ldr	r3, [r7, #28]
 800ebf0:	2b0f      	cmp	r3, #15
 800ebf2:	d9e9      	bls.n	800ebc8 <prvInitialiseNewTask+0x64>
 800ebf4:	e000      	b.n	800ebf8 <prvInitialiseNewTask+0x94>
			{
				break;
 800ebf6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ebf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ec00:	e003      	b.n	800ec0a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ec02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec04:	2200      	movs	r2, #0
 800ec06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ec0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0c:	2b37      	cmp	r3, #55	; 0x37
 800ec0e:	d901      	bls.n	800ec14 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ec10:	2337      	movs	r3, #55	; 0x37
 800ec12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ec14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ec1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ec20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec22:	2200      	movs	r2, #0
 800ec24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ec26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec28:	3304      	adds	r3, #4
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7ff f978 	bl	800df20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ec30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec32:	3318      	adds	r3, #24
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7ff f973 	bl	800df20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ec4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ec50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec52:	2200      	movs	r2, #0
 800ec54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ec58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ec60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec62:	3354      	adds	r3, #84	; 0x54
 800ec64:	2260      	movs	r2, #96	; 0x60
 800ec66:	2100      	movs	r1, #0
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f002 f8b7 	bl	8010ddc <memset>
 800ec6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec70:	4a0c      	ldr	r2, [pc, #48]	; (800eca4 <prvInitialiseNewTask+0x140>)
 800ec72:	659a      	str	r2, [r3, #88]	; 0x58
 800ec74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec76:	4a0c      	ldr	r2, [pc, #48]	; (800eca8 <prvInitialiseNewTask+0x144>)
 800ec78:	65da      	str	r2, [r3, #92]	; 0x5c
 800ec7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7c:	4a0b      	ldr	r2, [pc, #44]	; (800ecac <prvInitialiseNewTask+0x148>)
 800ec7e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ec80:	683a      	ldr	r2, [r7, #0]
 800ec82:	68f9      	ldr	r1, [r7, #12]
 800ec84:	69b8      	ldr	r0, [r7, #24]
 800ec86:	f001 f9c3 	bl	8010010 <pxPortInitialiseStack>
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ec90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d002      	beq.n	800ec9c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ec96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec9c:	bf00      	nop
 800ec9e:	3720      	adds	r7, #32
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	080186f8 	.word	0x080186f8
 800eca8:	08018718 	.word	0x08018718
 800ecac:	080186d8 	.word	0x080186d8

0800ecb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ecb8:	f001 fad4 	bl	8010264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ecbc:	4b2d      	ldr	r3, [pc, #180]	; (800ed74 <prvAddNewTaskToReadyList+0xc4>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	4a2c      	ldr	r2, [pc, #176]	; (800ed74 <prvAddNewTaskToReadyList+0xc4>)
 800ecc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ecc6:	4b2c      	ldr	r3, [pc, #176]	; (800ed78 <prvAddNewTaskToReadyList+0xc8>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d109      	bne.n	800ece2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ecce:	4a2a      	ldr	r2, [pc, #168]	; (800ed78 <prvAddNewTaskToReadyList+0xc8>)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ecd4:	4b27      	ldr	r3, [pc, #156]	; (800ed74 <prvAddNewTaskToReadyList+0xc4>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	d110      	bne.n	800ecfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ecdc:	f000 fc98 	bl	800f610 <prvInitialiseTaskLists>
 800ece0:	e00d      	b.n	800ecfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ece2:	4b26      	ldr	r3, [pc, #152]	; (800ed7c <prvAddNewTaskToReadyList+0xcc>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d109      	bne.n	800ecfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ecea:	4b23      	ldr	r3, [pc, #140]	; (800ed78 <prvAddNewTaskToReadyList+0xc8>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d802      	bhi.n	800ecfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ecf8:	4a1f      	ldr	r2, [pc, #124]	; (800ed78 <prvAddNewTaskToReadyList+0xc8>)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ecfe:	4b20      	ldr	r3, [pc, #128]	; (800ed80 <prvAddNewTaskToReadyList+0xd0>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	3301      	adds	r3, #1
 800ed04:	4a1e      	ldr	r2, [pc, #120]	; (800ed80 <prvAddNewTaskToReadyList+0xd0>)
 800ed06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ed08:	4b1d      	ldr	r3, [pc, #116]	; (800ed80 <prvAddNewTaskToReadyList+0xd0>)
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed14:	4b1b      	ldr	r3, [pc, #108]	; (800ed84 <prvAddNewTaskToReadyList+0xd4>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d903      	bls.n	800ed24 <prvAddNewTaskToReadyList+0x74>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed20:	4a18      	ldr	r2, [pc, #96]	; (800ed84 <prvAddNewTaskToReadyList+0xd4>)
 800ed22:	6013      	str	r3, [r2, #0]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed28:	4613      	mov	r3, r2
 800ed2a:	009b      	lsls	r3, r3, #2
 800ed2c:	4413      	add	r3, r2
 800ed2e:	009b      	lsls	r3, r3, #2
 800ed30:	4a15      	ldr	r2, [pc, #84]	; (800ed88 <prvAddNewTaskToReadyList+0xd8>)
 800ed32:	441a      	add	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	3304      	adds	r3, #4
 800ed38:	4619      	mov	r1, r3
 800ed3a:	4610      	mov	r0, r2
 800ed3c:	f7ff f8fd 	bl	800df3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ed40:	f001 fac0 	bl	80102c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ed44:	4b0d      	ldr	r3, [pc, #52]	; (800ed7c <prvAddNewTaskToReadyList+0xcc>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00e      	beq.n	800ed6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ed4c:	4b0a      	ldr	r3, [pc, #40]	; (800ed78 <prvAddNewTaskToReadyList+0xc8>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d207      	bcs.n	800ed6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ed5a:	4b0c      	ldr	r3, [pc, #48]	; (800ed8c <prvAddNewTaskToReadyList+0xdc>)
 800ed5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed60:	601a      	str	r2, [r3, #0]
 800ed62:	f3bf 8f4f 	dsb	sy
 800ed66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed6a:	bf00      	nop
 800ed6c:	3708      	adds	r7, #8
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	2000122c 	.word	0x2000122c
 800ed78:	20000d58 	.word	0x20000d58
 800ed7c:	20001238 	.word	0x20001238
 800ed80:	20001248 	.word	0x20001248
 800ed84:	20001234 	.word	0x20001234
 800ed88:	20000d5c 	.word	0x20000d5c
 800ed8c:	e000ed04 	.word	0xe000ed04

0800ed90 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ed98:	f001 fa64 	bl	8010264 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d102      	bne.n	800eda8 <vTaskDelete+0x18>
 800eda2:	4b2c      	ldr	r3, [pc, #176]	; (800ee54 <vTaskDelete+0xc4>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	e000      	b.n	800edaa <vTaskDelete+0x1a>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	3304      	adds	r3, #4
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7ff f91f 	bl	800dff4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d004      	beq.n	800edc8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	3318      	adds	r3, #24
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7ff f916 	bl	800dff4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800edc8:	4b23      	ldr	r3, [pc, #140]	; (800ee58 <vTaskDelete+0xc8>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	3301      	adds	r3, #1
 800edce:	4a22      	ldr	r2, [pc, #136]	; (800ee58 <vTaskDelete+0xc8>)
 800edd0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800edd2:	4b20      	ldr	r3, [pc, #128]	; (800ee54 <vTaskDelete+0xc4>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	68fa      	ldr	r2, [r7, #12]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d10b      	bne.n	800edf4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	3304      	adds	r3, #4
 800ede0:	4619      	mov	r1, r3
 800ede2:	481e      	ldr	r0, [pc, #120]	; (800ee5c <vTaskDelete+0xcc>)
 800ede4:	f7ff f8a9 	bl	800df3a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ede8:	4b1d      	ldr	r3, [pc, #116]	; (800ee60 <vTaskDelete+0xd0>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	3301      	adds	r3, #1
 800edee:	4a1c      	ldr	r2, [pc, #112]	; (800ee60 <vTaskDelete+0xd0>)
 800edf0:	6013      	str	r3, [r2, #0]
 800edf2:	e009      	b.n	800ee08 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800edf4:	4b1b      	ldr	r3, [pc, #108]	; (800ee64 <vTaskDelete+0xd4>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	3b01      	subs	r3, #1
 800edfa:	4a1a      	ldr	r2, [pc, #104]	; (800ee64 <vTaskDelete+0xd4>)
 800edfc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800edfe:	68f8      	ldr	r0, [r7, #12]
 800ee00:	f000 fc74 	bl	800f6ec <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ee04:	f000 fca6 	bl	800f754 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ee08:	f001 fa5c 	bl	80102c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ee0c:	4b16      	ldr	r3, [pc, #88]	; (800ee68 <vTaskDelete+0xd8>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d01b      	beq.n	800ee4c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800ee14:	4b0f      	ldr	r3, [pc, #60]	; (800ee54 <vTaskDelete+0xc4>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d116      	bne.n	800ee4c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ee1e:	4b13      	ldr	r3, [pc, #76]	; (800ee6c <vTaskDelete+0xdc>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00a      	beq.n	800ee3c <vTaskDelete+0xac>
	__asm volatile
 800ee26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2a:	f383 8811 	msr	BASEPRI, r3
 800ee2e:	f3bf 8f6f 	isb	sy
 800ee32:	f3bf 8f4f 	dsb	sy
 800ee36:	60bb      	str	r3, [r7, #8]
}
 800ee38:	bf00      	nop
 800ee3a:	e7fe      	b.n	800ee3a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800ee3c:	4b0c      	ldr	r3, [pc, #48]	; (800ee70 <vTaskDelete+0xe0>)
 800ee3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee42:	601a      	str	r2, [r3, #0]
 800ee44:	f3bf 8f4f 	dsb	sy
 800ee48:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ee4c:	bf00      	nop
 800ee4e:	3710      	adds	r7, #16
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	20000d58 	.word	0x20000d58
 800ee58:	20001248 	.word	0x20001248
 800ee5c:	20001200 	.word	0x20001200
 800ee60:	20001214 	.word	0x20001214
 800ee64:	2000122c 	.word	0x2000122c
 800ee68:	20001238 	.word	0x20001238
 800ee6c:	20001254 	.word	0x20001254
 800ee70:	e000ed04 	.word	0xe000ed04

0800ee74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d017      	beq.n	800eeb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ee86:	4b13      	ldr	r3, [pc, #76]	; (800eed4 <vTaskDelay+0x60>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00a      	beq.n	800eea4 <vTaskDelay+0x30>
	__asm volatile
 800ee8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee92:	f383 8811 	msr	BASEPRI, r3
 800ee96:	f3bf 8f6f 	isb	sy
 800ee9a:	f3bf 8f4f 	dsb	sy
 800ee9e:	60bb      	str	r3, [r7, #8]
}
 800eea0:	bf00      	nop
 800eea2:	e7fe      	b.n	800eea2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eea4:	f000 f88a 	bl	800efbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eea8:	2100      	movs	r1, #0
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 fd0e 	bl	800f8cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eeb0:	f000 f892 	bl	800efd8 <xTaskResumeAll>
 800eeb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d107      	bne.n	800eecc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eebc:	4b06      	ldr	r3, [pc, #24]	; (800eed8 <vTaskDelay+0x64>)
 800eebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eec2:	601a      	str	r2, [r3, #0]
 800eec4:	f3bf 8f4f 	dsb	sy
 800eec8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eecc:	bf00      	nop
 800eece:	3710      	adds	r7, #16
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}
 800eed4:	20001254 	.word	0x20001254
 800eed8:	e000ed04 	.word	0xe000ed04

0800eedc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b08a      	sub	sp, #40	; 0x28
 800eee0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eee2:	2300      	movs	r3, #0
 800eee4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eee6:	2300      	movs	r3, #0
 800eee8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eeea:	463a      	mov	r2, r7
 800eeec:	1d39      	adds	r1, r7, #4
 800eeee:	f107 0308 	add.w	r3, r7, #8
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7fe ffc0 	bl	800de78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eef8:	6839      	ldr	r1, [r7, #0]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	68ba      	ldr	r2, [r7, #8]
 800eefe:	9202      	str	r2, [sp, #8]
 800ef00:	9301      	str	r3, [sp, #4]
 800ef02:	2300      	movs	r3, #0
 800ef04:	9300      	str	r3, [sp, #0]
 800ef06:	2300      	movs	r3, #0
 800ef08:	460a      	mov	r2, r1
 800ef0a:	4924      	ldr	r1, [pc, #144]	; (800ef9c <vTaskStartScheduler+0xc0>)
 800ef0c:	4824      	ldr	r0, [pc, #144]	; (800efa0 <vTaskStartScheduler+0xc4>)
 800ef0e:	f7ff fd87 	bl	800ea20 <xTaskCreateStatic>
 800ef12:	4603      	mov	r3, r0
 800ef14:	4a23      	ldr	r2, [pc, #140]	; (800efa4 <vTaskStartScheduler+0xc8>)
 800ef16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ef18:	4b22      	ldr	r3, [pc, #136]	; (800efa4 <vTaskStartScheduler+0xc8>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d002      	beq.n	800ef26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ef20:	2301      	movs	r3, #1
 800ef22:	617b      	str	r3, [r7, #20]
 800ef24:	e001      	b.n	800ef2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ef26:	2300      	movs	r3, #0
 800ef28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d102      	bne.n	800ef36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ef30:	f000 fd20 	bl	800f974 <xTimerCreateTimerTask>
 800ef34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	2b01      	cmp	r3, #1
 800ef3a:	d11b      	bne.n	800ef74 <vTaskStartScheduler+0x98>
	__asm volatile
 800ef3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef40:	f383 8811 	msr	BASEPRI, r3
 800ef44:	f3bf 8f6f 	isb	sy
 800ef48:	f3bf 8f4f 	dsb	sy
 800ef4c:	613b      	str	r3, [r7, #16]
}
 800ef4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ef50:	4b15      	ldr	r3, [pc, #84]	; (800efa8 <vTaskStartScheduler+0xcc>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	3354      	adds	r3, #84	; 0x54
 800ef56:	4a15      	ldr	r2, [pc, #84]	; (800efac <vTaskStartScheduler+0xd0>)
 800ef58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ef5a:	4b15      	ldr	r3, [pc, #84]	; (800efb0 <vTaskStartScheduler+0xd4>)
 800ef5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ef62:	4b14      	ldr	r3, [pc, #80]	; (800efb4 <vTaskStartScheduler+0xd8>)
 800ef64:	2201      	movs	r2, #1
 800ef66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ef68:	4b13      	ldr	r3, [pc, #76]	; (800efb8 <vTaskStartScheduler+0xdc>)
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ef6e:	f001 f8d7 	bl	8010120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ef72:	e00e      	b.n	800ef92 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef7a:	d10a      	bne.n	800ef92 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ef7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef80:	f383 8811 	msr	BASEPRI, r3
 800ef84:	f3bf 8f6f 	isb	sy
 800ef88:	f3bf 8f4f 	dsb	sy
 800ef8c:	60fb      	str	r3, [r7, #12]
}
 800ef8e:	bf00      	nop
 800ef90:	e7fe      	b.n	800ef90 <vTaskStartScheduler+0xb4>
}
 800ef92:	bf00      	nop
 800ef94:	3718      	adds	r7, #24
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	08018544 	.word	0x08018544
 800efa0:	0800f5e1 	.word	0x0800f5e1
 800efa4:	20001250 	.word	0x20001250
 800efa8:	20000d58 	.word	0x20000d58
 800efac:	20000040 	.word	0x20000040
 800efb0:	2000124c 	.word	0x2000124c
 800efb4:	20001238 	.word	0x20001238
 800efb8:	20001230 	.word	0x20001230

0800efbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800efbc:	b480      	push	{r7}
 800efbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800efc0:	4b04      	ldr	r3, [pc, #16]	; (800efd4 <vTaskSuspendAll+0x18>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	3301      	adds	r3, #1
 800efc6:	4a03      	ldr	r2, [pc, #12]	; (800efd4 <vTaskSuspendAll+0x18>)
 800efc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800efca:	bf00      	nop
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr
 800efd4:	20001254 	.word	0x20001254

0800efd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800efde:	2300      	movs	r3, #0
 800efe0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800efe2:	2300      	movs	r3, #0
 800efe4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800efe6:	4b42      	ldr	r3, [pc, #264]	; (800f0f0 <xTaskResumeAll+0x118>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d10a      	bne.n	800f004 <xTaskResumeAll+0x2c>
	__asm volatile
 800efee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff2:	f383 8811 	msr	BASEPRI, r3
 800eff6:	f3bf 8f6f 	isb	sy
 800effa:	f3bf 8f4f 	dsb	sy
 800effe:	603b      	str	r3, [r7, #0]
}
 800f000:	bf00      	nop
 800f002:	e7fe      	b.n	800f002 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f004:	f001 f92e 	bl	8010264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f008:	4b39      	ldr	r3, [pc, #228]	; (800f0f0 <xTaskResumeAll+0x118>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	3b01      	subs	r3, #1
 800f00e:	4a38      	ldr	r2, [pc, #224]	; (800f0f0 <xTaskResumeAll+0x118>)
 800f010:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f012:	4b37      	ldr	r3, [pc, #220]	; (800f0f0 <xTaskResumeAll+0x118>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d162      	bne.n	800f0e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f01a:	4b36      	ldr	r3, [pc, #216]	; (800f0f4 <xTaskResumeAll+0x11c>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d05e      	beq.n	800f0e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f022:	e02f      	b.n	800f084 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f024:	4b34      	ldr	r3, [pc, #208]	; (800f0f8 <xTaskResumeAll+0x120>)
 800f026:	68db      	ldr	r3, [r3, #12]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	3318      	adds	r3, #24
 800f030:	4618      	mov	r0, r3
 800f032:	f7fe ffdf 	bl	800dff4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	3304      	adds	r3, #4
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7fe ffda 	bl	800dff4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f044:	4b2d      	ldr	r3, [pc, #180]	; (800f0fc <xTaskResumeAll+0x124>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d903      	bls.n	800f054 <xTaskResumeAll+0x7c>
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f050:	4a2a      	ldr	r2, [pc, #168]	; (800f0fc <xTaskResumeAll+0x124>)
 800f052:	6013      	str	r3, [r2, #0]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f058:	4613      	mov	r3, r2
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	4413      	add	r3, r2
 800f05e:	009b      	lsls	r3, r3, #2
 800f060:	4a27      	ldr	r2, [pc, #156]	; (800f100 <xTaskResumeAll+0x128>)
 800f062:	441a      	add	r2, r3
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	3304      	adds	r3, #4
 800f068:	4619      	mov	r1, r3
 800f06a:	4610      	mov	r0, r2
 800f06c:	f7fe ff65 	bl	800df3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f074:	4b23      	ldr	r3, [pc, #140]	; (800f104 <xTaskResumeAll+0x12c>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07a:	429a      	cmp	r2, r3
 800f07c:	d302      	bcc.n	800f084 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f07e:	4b22      	ldr	r3, [pc, #136]	; (800f108 <xTaskResumeAll+0x130>)
 800f080:	2201      	movs	r2, #1
 800f082:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f084:	4b1c      	ldr	r3, [pc, #112]	; (800f0f8 <xTaskResumeAll+0x120>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d1cb      	bne.n	800f024 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d001      	beq.n	800f096 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f092:	f000 fb5f 	bl	800f754 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f096:	4b1d      	ldr	r3, [pc, #116]	; (800f10c <xTaskResumeAll+0x134>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d010      	beq.n	800f0c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f0a2:	f000 f847 	bl	800f134 <xTaskIncrementTick>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d002      	beq.n	800f0b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f0ac:	4b16      	ldr	r3, [pc, #88]	; (800f108 <xTaskResumeAll+0x130>)
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	3b01      	subs	r3, #1
 800f0b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d1f1      	bne.n	800f0a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f0be:	4b13      	ldr	r3, [pc, #76]	; (800f10c <xTaskResumeAll+0x134>)
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f0c4:	4b10      	ldr	r3, [pc, #64]	; (800f108 <xTaskResumeAll+0x130>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d009      	beq.n	800f0e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f0d0:	4b0f      	ldr	r3, [pc, #60]	; (800f110 <xTaskResumeAll+0x138>)
 800f0d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0d6:	601a      	str	r2, [r3, #0]
 800f0d8:	f3bf 8f4f 	dsb	sy
 800f0dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0e0:	f001 f8f0 	bl	80102c4 <vPortExitCritical>

	return xAlreadyYielded;
 800f0e4:	68bb      	ldr	r3, [r7, #8]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3710      	adds	r7, #16
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	20001254 	.word	0x20001254
 800f0f4:	2000122c 	.word	0x2000122c
 800f0f8:	200011ec 	.word	0x200011ec
 800f0fc:	20001234 	.word	0x20001234
 800f100:	20000d5c 	.word	0x20000d5c
 800f104:	20000d58 	.word	0x20000d58
 800f108:	20001240 	.word	0x20001240
 800f10c:	2000123c 	.word	0x2000123c
 800f110:	e000ed04 	.word	0xe000ed04

0800f114 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f114:	b480      	push	{r7}
 800f116:	b083      	sub	sp, #12
 800f118:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f11a:	4b05      	ldr	r3, [pc, #20]	; (800f130 <xTaskGetTickCount+0x1c>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f120:	687b      	ldr	r3, [r7, #4]
}
 800f122:	4618      	mov	r0, r3
 800f124:	370c      	adds	r7, #12
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr
 800f12e:	bf00      	nop
 800f130:	20001230 	.word	0x20001230

0800f134 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b086      	sub	sp, #24
 800f138:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f13a:	2300      	movs	r3, #0
 800f13c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f13e:	4b4f      	ldr	r3, [pc, #316]	; (800f27c <xTaskIncrementTick+0x148>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	f040 808f 	bne.w	800f266 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f148:	4b4d      	ldr	r3, [pc, #308]	; (800f280 <xTaskIncrementTick+0x14c>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	3301      	adds	r3, #1
 800f14e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f150:	4a4b      	ldr	r2, [pc, #300]	; (800f280 <xTaskIncrementTick+0x14c>)
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d120      	bne.n	800f19e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f15c:	4b49      	ldr	r3, [pc, #292]	; (800f284 <xTaskIncrementTick+0x150>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d00a      	beq.n	800f17c <xTaskIncrementTick+0x48>
	__asm volatile
 800f166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f16a:	f383 8811 	msr	BASEPRI, r3
 800f16e:	f3bf 8f6f 	isb	sy
 800f172:	f3bf 8f4f 	dsb	sy
 800f176:	603b      	str	r3, [r7, #0]
}
 800f178:	bf00      	nop
 800f17a:	e7fe      	b.n	800f17a <xTaskIncrementTick+0x46>
 800f17c:	4b41      	ldr	r3, [pc, #260]	; (800f284 <xTaskIncrementTick+0x150>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	60fb      	str	r3, [r7, #12]
 800f182:	4b41      	ldr	r3, [pc, #260]	; (800f288 <xTaskIncrementTick+0x154>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	4a3f      	ldr	r2, [pc, #252]	; (800f284 <xTaskIncrementTick+0x150>)
 800f188:	6013      	str	r3, [r2, #0]
 800f18a:	4a3f      	ldr	r2, [pc, #252]	; (800f288 <xTaskIncrementTick+0x154>)
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	6013      	str	r3, [r2, #0]
 800f190:	4b3e      	ldr	r3, [pc, #248]	; (800f28c <xTaskIncrementTick+0x158>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	3301      	adds	r3, #1
 800f196:	4a3d      	ldr	r2, [pc, #244]	; (800f28c <xTaskIncrementTick+0x158>)
 800f198:	6013      	str	r3, [r2, #0]
 800f19a:	f000 fadb 	bl	800f754 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f19e:	4b3c      	ldr	r3, [pc, #240]	; (800f290 <xTaskIncrementTick+0x15c>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	693a      	ldr	r2, [r7, #16]
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d349      	bcc.n	800f23c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1a8:	4b36      	ldr	r3, [pc, #216]	; (800f284 <xTaskIncrementTick+0x150>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d104      	bne.n	800f1bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1b2:	4b37      	ldr	r3, [pc, #220]	; (800f290 <xTaskIncrementTick+0x15c>)
 800f1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f1b8:	601a      	str	r2, [r3, #0]
					break;
 800f1ba:	e03f      	b.n	800f23c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1bc:	4b31      	ldr	r3, [pc, #196]	; (800f284 <xTaskIncrementTick+0x150>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	68db      	ldr	r3, [r3, #12]
 800f1c2:	68db      	ldr	r3, [r3, #12]
 800f1c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f1cc:	693a      	ldr	r2, [r7, #16]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d203      	bcs.n	800f1dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f1d4:	4a2e      	ldr	r2, [pc, #184]	; (800f290 <xTaskIncrementTick+0x15c>)
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f1da:	e02f      	b.n	800f23c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	3304      	adds	r3, #4
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7fe ff07 	bl	800dff4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d004      	beq.n	800f1f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	3318      	adds	r3, #24
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fe fefe 	bl	800dff4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1fc:	4b25      	ldr	r3, [pc, #148]	; (800f294 <xTaskIncrementTick+0x160>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	429a      	cmp	r2, r3
 800f202:	d903      	bls.n	800f20c <xTaskIncrementTick+0xd8>
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f208:	4a22      	ldr	r2, [pc, #136]	; (800f294 <xTaskIncrementTick+0x160>)
 800f20a:	6013      	str	r3, [r2, #0]
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f210:	4613      	mov	r3, r2
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	4413      	add	r3, r2
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	4a1f      	ldr	r2, [pc, #124]	; (800f298 <xTaskIncrementTick+0x164>)
 800f21a:	441a      	add	r2, r3
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	3304      	adds	r3, #4
 800f220:	4619      	mov	r1, r3
 800f222:	4610      	mov	r0, r2
 800f224:	f7fe fe89 	bl	800df3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f22c:	4b1b      	ldr	r3, [pc, #108]	; (800f29c <xTaskIncrementTick+0x168>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f232:	429a      	cmp	r2, r3
 800f234:	d3b8      	bcc.n	800f1a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f236:	2301      	movs	r3, #1
 800f238:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f23a:	e7b5      	b.n	800f1a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f23c:	4b17      	ldr	r3, [pc, #92]	; (800f29c <xTaskIncrementTick+0x168>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f242:	4915      	ldr	r1, [pc, #84]	; (800f298 <xTaskIncrementTick+0x164>)
 800f244:	4613      	mov	r3, r2
 800f246:	009b      	lsls	r3, r3, #2
 800f248:	4413      	add	r3, r2
 800f24a:	009b      	lsls	r3, r3, #2
 800f24c:	440b      	add	r3, r1
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2b01      	cmp	r3, #1
 800f252:	d901      	bls.n	800f258 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f254:	2301      	movs	r3, #1
 800f256:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f258:	4b11      	ldr	r3, [pc, #68]	; (800f2a0 <xTaskIncrementTick+0x16c>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d007      	beq.n	800f270 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f260:	2301      	movs	r3, #1
 800f262:	617b      	str	r3, [r7, #20]
 800f264:	e004      	b.n	800f270 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f266:	4b0f      	ldr	r3, [pc, #60]	; (800f2a4 <xTaskIncrementTick+0x170>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	3301      	adds	r3, #1
 800f26c:	4a0d      	ldr	r2, [pc, #52]	; (800f2a4 <xTaskIncrementTick+0x170>)
 800f26e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f270:	697b      	ldr	r3, [r7, #20]
}
 800f272:	4618      	mov	r0, r3
 800f274:	3718      	adds	r7, #24
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	20001254 	.word	0x20001254
 800f280:	20001230 	.word	0x20001230
 800f284:	200011e4 	.word	0x200011e4
 800f288:	200011e8 	.word	0x200011e8
 800f28c:	20001244 	.word	0x20001244
 800f290:	2000124c 	.word	0x2000124c
 800f294:	20001234 	.word	0x20001234
 800f298:	20000d5c 	.word	0x20000d5c
 800f29c:	20000d58 	.word	0x20000d58
 800f2a0:	20001240 	.word	0x20001240
 800f2a4:	2000123c 	.word	0x2000123c

0800f2a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b085      	sub	sp, #20
 800f2ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f2ae:	4b2a      	ldr	r3, [pc, #168]	; (800f358 <vTaskSwitchContext+0xb0>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d003      	beq.n	800f2be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f2b6:	4b29      	ldr	r3, [pc, #164]	; (800f35c <vTaskSwitchContext+0xb4>)
 800f2b8:	2201      	movs	r2, #1
 800f2ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f2bc:	e046      	b.n	800f34c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f2be:	4b27      	ldr	r3, [pc, #156]	; (800f35c <vTaskSwitchContext+0xb4>)
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2c4:	4b26      	ldr	r3, [pc, #152]	; (800f360 <vTaskSwitchContext+0xb8>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	60fb      	str	r3, [r7, #12]
 800f2ca:	e010      	b.n	800f2ee <vTaskSwitchContext+0x46>
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d10a      	bne.n	800f2e8 <vTaskSwitchContext+0x40>
	__asm volatile
 800f2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d6:	f383 8811 	msr	BASEPRI, r3
 800f2da:	f3bf 8f6f 	isb	sy
 800f2de:	f3bf 8f4f 	dsb	sy
 800f2e2:	607b      	str	r3, [r7, #4]
}
 800f2e4:	bf00      	nop
 800f2e6:	e7fe      	b.n	800f2e6 <vTaskSwitchContext+0x3e>
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	3b01      	subs	r3, #1
 800f2ec:	60fb      	str	r3, [r7, #12]
 800f2ee:	491d      	ldr	r1, [pc, #116]	; (800f364 <vTaskSwitchContext+0xbc>)
 800f2f0:	68fa      	ldr	r2, [r7, #12]
 800f2f2:	4613      	mov	r3, r2
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	4413      	add	r3, r2
 800f2f8:	009b      	lsls	r3, r3, #2
 800f2fa:	440b      	add	r3, r1
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d0e4      	beq.n	800f2cc <vTaskSwitchContext+0x24>
 800f302:	68fa      	ldr	r2, [r7, #12]
 800f304:	4613      	mov	r3, r2
 800f306:	009b      	lsls	r3, r3, #2
 800f308:	4413      	add	r3, r2
 800f30a:	009b      	lsls	r3, r3, #2
 800f30c:	4a15      	ldr	r2, [pc, #84]	; (800f364 <vTaskSwitchContext+0xbc>)
 800f30e:	4413      	add	r3, r2
 800f310:	60bb      	str	r3, [r7, #8]
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	685a      	ldr	r2, [r3, #4]
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	605a      	str	r2, [r3, #4]
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	685a      	ldr	r2, [r3, #4]
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	3308      	adds	r3, #8
 800f324:	429a      	cmp	r2, r3
 800f326:	d104      	bne.n	800f332 <vTaskSwitchContext+0x8a>
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	685a      	ldr	r2, [r3, #4]
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	605a      	str	r2, [r3, #4]
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	4a0b      	ldr	r2, [pc, #44]	; (800f368 <vTaskSwitchContext+0xc0>)
 800f33a:	6013      	str	r3, [r2, #0]
 800f33c:	4a08      	ldr	r2, [pc, #32]	; (800f360 <vTaskSwitchContext+0xb8>)
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f342:	4b09      	ldr	r3, [pc, #36]	; (800f368 <vTaskSwitchContext+0xc0>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	3354      	adds	r3, #84	; 0x54
 800f348:	4a08      	ldr	r2, [pc, #32]	; (800f36c <vTaskSwitchContext+0xc4>)
 800f34a:	6013      	str	r3, [r2, #0]
}
 800f34c:	bf00      	nop
 800f34e:	3714      	adds	r7, #20
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr
 800f358:	20001254 	.word	0x20001254
 800f35c:	20001240 	.word	0x20001240
 800f360:	20001234 	.word	0x20001234
 800f364:	20000d5c 	.word	0x20000d5c
 800f368:	20000d58 	.word	0x20000d58
 800f36c:	20000040 	.word	0x20000040

0800f370 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d10a      	bne.n	800f396 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f384:	f383 8811 	msr	BASEPRI, r3
 800f388:	f3bf 8f6f 	isb	sy
 800f38c:	f3bf 8f4f 	dsb	sy
 800f390:	60fb      	str	r3, [r7, #12]
}
 800f392:	bf00      	nop
 800f394:	e7fe      	b.n	800f394 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f396:	4b07      	ldr	r3, [pc, #28]	; (800f3b4 <vTaskPlaceOnEventList+0x44>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	3318      	adds	r3, #24
 800f39c:	4619      	mov	r1, r3
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7fe fdef 	bl	800df82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f3a4:	2101      	movs	r1, #1
 800f3a6:	6838      	ldr	r0, [r7, #0]
 800f3a8:	f000 fa90 	bl	800f8cc <prvAddCurrentTaskToDelayedList>
}
 800f3ac:	bf00      	nop
 800f3ae:	3710      	adds	r7, #16
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	20000d58 	.word	0x20000d58

0800f3b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b086      	sub	sp, #24
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d10a      	bne.n	800f3e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ce:	f383 8811 	msr	BASEPRI, r3
 800f3d2:	f3bf 8f6f 	isb	sy
 800f3d6:	f3bf 8f4f 	dsb	sy
 800f3da:	617b      	str	r3, [r7, #20]
}
 800f3dc:	bf00      	nop
 800f3de:	e7fe      	b.n	800f3de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3e0:	4b0a      	ldr	r3, [pc, #40]	; (800f40c <vTaskPlaceOnEventListRestricted+0x54>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	3318      	adds	r3, #24
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	68f8      	ldr	r0, [r7, #12]
 800f3ea:	f7fe fda6 	bl	800df3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d002      	beq.n	800f3fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f3fa:	6879      	ldr	r1, [r7, #4]
 800f3fc:	68b8      	ldr	r0, [r7, #8]
 800f3fe:	f000 fa65 	bl	800f8cc <prvAddCurrentTaskToDelayedList>
	}
 800f402:	bf00      	nop
 800f404:	3718      	adds	r7, #24
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	20000d58 	.word	0x20000d58

0800f410 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b086      	sub	sp, #24
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d10a      	bne.n	800f43c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f42a:	f383 8811 	msr	BASEPRI, r3
 800f42e:	f3bf 8f6f 	isb	sy
 800f432:	f3bf 8f4f 	dsb	sy
 800f436:	60fb      	str	r3, [r7, #12]
}
 800f438:	bf00      	nop
 800f43a:	e7fe      	b.n	800f43a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	3318      	adds	r3, #24
 800f440:	4618      	mov	r0, r3
 800f442:	f7fe fdd7 	bl	800dff4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f446:	4b1e      	ldr	r3, [pc, #120]	; (800f4c0 <xTaskRemoveFromEventList+0xb0>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d11d      	bne.n	800f48a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	3304      	adds	r3, #4
 800f452:	4618      	mov	r0, r3
 800f454:	f7fe fdce 	bl	800dff4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f45c:	4b19      	ldr	r3, [pc, #100]	; (800f4c4 <xTaskRemoveFromEventList+0xb4>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	429a      	cmp	r2, r3
 800f462:	d903      	bls.n	800f46c <xTaskRemoveFromEventList+0x5c>
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f468:	4a16      	ldr	r2, [pc, #88]	; (800f4c4 <xTaskRemoveFromEventList+0xb4>)
 800f46a:	6013      	str	r3, [r2, #0]
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f470:	4613      	mov	r3, r2
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	4413      	add	r3, r2
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	4a13      	ldr	r2, [pc, #76]	; (800f4c8 <xTaskRemoveFromEventList+0xb8>)
 800f47a:	441a      	add	r2, r3
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	3304      	adds	r3, #4
 800f480:	4619      	mov	r1, r3
 800f482:	4610      	mov	r0, r2
 800f484:	f7fe fd59 	bl	800df3a <vListInsertEnd>
 800f488:	e005      	b.n	800f496 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	3318      	adds	r3, #24
 800f48e:	4619      	mov	r1, r3
 800f490:	480e      	ldr	r0, [pc, #56]	; (800f4cc <xTaskRemoveFromEventList+0xbc>)
 800f492:	f7fe fd52 	bl	800df3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f49a:	4b0d      	ldr	r3, [pc, #52]	; (800f4d0 <xTaskRemoveFromEventList+0xc0>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d905      	bls.n	800f4b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f4a8:	4b0a      	ldr	r3, [pc, #40]	; (800f4d4 <xTaskRemoveFromEventList+0xc4>)
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	601a      	str	r2, [r3, #0]
 800f4ae:	e001      	b.n	800f4b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f4b4:	697b      	ldr	r3, [r7, #20]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3718      	adds	r7, #24
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	20001254 	.word	0x20001254
 800f4c4:	20001234 	.word	0x20001234
 800f4c8:	20000d5c 	.word	0x20000d5c
 800f4cc:	200011ec 	.word	0x200011ec
 800f4d0:	20000d58 	.word	0x20000d58
 800f4d4:	20001240 	.word	0x20001240

0800f4d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f4e0:	4b06      	ldr	r3, [pc, #24]	; (800f4fc <vTaskInternalSetTimeOutState+0x24>)
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f4e8:	4b05      	ldr	r3, [pc, #20]	; (800f500 <vTaskInternalSetTimeOutState+0x28>)
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	605a      	str	r2, [r3, #4]
}
 800f4f0:	bf00      	nop
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr
 800f4fc:	20001244 	.word	0x20001244
 800f500:	20001230 	.word	0x20001230

0800f504 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b088      	sub	sp, #32
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d10a      	bne.n	800f52a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f518:	f383 8811 	msr	BASEPRI, r3
 800f51c:	f3bf 8f6f 	isb	sy
 800f520:	f3bf 8f4f 	dsb	sy
 800f524:	613b      	str	r3, [r7, #16]
}
 800f526:	bf00      	nop
 800f528:	e7fe      	b.n	800f528 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d10a      	bne.n	800f546 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f534:	f383 8811 	msr	BASEPRI, r3
 800f538:	f3bf 8f6f 	isb	sy
 800f53c:	f3bf 8f4f 	dsb	sy
 800f540:	60fb      	str	r3, [r7, #12]
}
 800f542:	bf00      	nop
 800f544:	e7fe      	b.n	800f544 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f546:	f000 fe8d 	bl	8010264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f54a:	4b1d      	ldr	r3, [pc, #116]	; (800f5c0 <xTaskCheckForTimeOut+0xbc>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	69ba      	ldr	r2, [r7, #24]
 800f556:	1ad3      	subs	r3, r2, r3
 800f558:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f562:	d102      	bne.n	800f56a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f564:	2300      	movs	r3, #0
 800f566:	61fb      	str	r3, [r7, #28]
 800f568:	e023      	b.n	800f5b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681a      	ldr	r2, [r3, #0]
 800f56e:	4b15      	ldr	r3, [pc, #84]	; (800f5c4 <xTaskCheckForTimeOut+0xc0>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	429a      	cmp	r2, r3
 800f574:	d007      	beq.n	800f586 <xTaskCheckForTimeOut+0x82>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	685b      	ldr	r3, [r3, #4]
 800f57a:	69ba      	ldr	r2, [r7, #24]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d302      	bcc.n	800f586 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f580:	2301      	movs	r3, #1
 800f582:	61fb      	str	r3, [r7, #28]
 800f584:	e015      	b.n	800f5b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	697a      	ldr	r2, [r7, #20]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d20b      	bcs.n	800f5a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	1ad2      	subs	r2, r2, r3
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f7ff ff9b 	bl	800f4d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	61fb      	str	r3, [r7, #28]
 800f5a6:	e004      	b.n	800f5b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f5b2:	f000 fe87 	bl	80102c4 <vPortExitCritical>

	return xReturn;
 800f5b6:	69fb      	ldr	r3, [r7, #28]
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3720      	adds	r7, #32
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	20001230 	.word	0x20001230
 800f5c4:	20001244 	.word	0x20001244

0800f5c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f5cc:	4b03      	ldr	r3, [pc, #12]	; (800f5dc <vTaskMissedYield+0x14>)
 800f5ce:	2201      	movs	r2, #1
 800f5d0:	601a      	str	r2, [r3, #0]
}
 800f5d2:	bf00      	nop
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5da:	4770      	bx	lr
 800f5dc:	20001240 	.word	0x20001240

0800f5e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f5e8:	f000 f852 	bl	800f690 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f5ec:	4b06      	ldr	r3, [pc, #24]	; (800f608 <prvIdleTask+0x28>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d9f9      	bls.n	800f5e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f5f4:	4b05      	ldr	r3, [pc, #20]	; (800f60c <prvIdleTask+0x2c>)
 800f5f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5fa:	601a      	str	r2, [r3, #0]
 800f5fc:	f3bf 8f4f 	dsb	sy
 800f600:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f604:	e7f0      	b.n	800f5e8 <prvIdleTask+0x8>
 800f606:	bf00      	nop
 800f608:	20000d5c 	.word	0x20000d5c
 800f60c:	e000ed04 	.word	0xe000ed04

0800f610 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f616:	2300      	movs	r3, #0
 800f618:	607b      	str	r3, [r7, #4]
 800f61a:	e00c      	b.n	800f636 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f61c:	687a      	ldr	r2, [r7, #4]
 800f61e:	4613      	mov	r3, r2
 800f620:	009b      	lsls	r3, r3, #2
 800f622:	4413      	add	r3, r2
 800f624:	009b      	lsls	r3, r3, #2
 800f626:	4a12      	ldr	r2, [pc, #72]	; (800f670 <prvInitialiseTaskLists+0x60>)
 800f628:	4413      	add	r3, r2
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7fe fc58 	bl	800dee0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	3301      	adds	r3, #1
 800f634:	607b      	str	r3, [r7, #4]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2b37      	cmp	r3, #55	; 0x37
 800f63a:	d9ef      	bls.n	800f61c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f63c:	480d      	ldr	r0, [pc, #52]	; (800f674 <prvInitialiseTaskLists+0x64>)
 800f63e:	f7fe fc4f 	bl	800dee0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f642:	480d      	ldr	r0, [pc, #52]	; (800f678 <prvInitialiseTaskLists+0x68>)
 800f644:	f7fe fc4c 	bl	800dee0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f648:	480c      	ldr	r0, [pc, #48]	; (800f67c <prvInitialiseTaskLists+0x6c>)
 800f64a:	f7fe fc49 	bl	800dee0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f64e:	480c      	ldr	r0, [pc, #48]	; (800f680 <prvInitialiseTaskLists+0x70>)
 800f650:	f7fe fc46 	bl	800dee0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f654:	480b      	ldr	r0, [pc, #44]	; (800f684 <prvInitialiseTaskLists+0x74>)
 800f656:	f7fe fc43 	bl	800dee0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f65a:	4b0b      	ldr	r3, [pc, #44]	; (800f688 <prvInitialiseTaskLists+0x78>)
 800f65c:	4a05      	ldr	r2, [pc, #20]	; (800f674 <prvInitialiseTaskLists+0x64>)
 800f65e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f660:	4b0a      	ldr	r3, [pc, #40]	; (800f68c <prvInitialiseTaskLists+0x7c>)
 800f662:	4a05      	ldr	r2, [pc, #20]	; (800f678 <prvInitialiseTaskLists+0x68>)
 800f664:	601a      	str	r2, [r3, #0]
}
 800f666:	bf00      	nop
 800f668:	3708      	adds	r7, #8
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	20000d5c 	.word	0x20000d5c
 800f674:	200011bc 	.word	0x200011bc
 800f678:	200011d0 	.word	0x200011d0
 800f67c:	200011ec 	.word	0x200011ec
 800f680:	20001200 	.word	0x20001200
 800f684:	20001218 	.word	0x20001218
 800f688:	200011e4 	.word	0x200011e4
 800f68c:	200011e8 	.word	0x200011e8

0800f690 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f696:	e019      	b.n	800f6cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f698:	f000 fde4 	bl	8010264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f69c:	4b10      	ldr	r3, [pc, #64]	; (800f6e0 <prvCheckTasksWaitingTermination+0x50>)
 800f69e:	68db      	ldr	r3, [r3, #12]
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	3304      	adds	r3, #4
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7fe fca3 	bl	800dff4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f6ae:	4b0d      	ldr	r3, [pc, #52]	; (800f6e4 <prvCheckTasksWaitingTermination+0x54>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	3b01      	subs	r3, #1
 800f6b4:	4a0b      	ldr	r2, [pc, #44]	; (800f6e4 <prvCheckTasksWaitingTermination+0x54>)
 800f6b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f6b8:	4b0b      	ldr	r3, [pc, #44]	; (800f6e8 <prvCheckTasksWaitingTermination+0x58>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	4a0a      	ldr	r2, [pc, #40]	; (800f6e8 <prvCheckTasksWaitingTermination+0x58>)
 800f6c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f6c2:	f000 fdff 	bl	80102c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f000 f810 	bl	800f6ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6cc:	4b06      	ldr	r3, [pc, #24]	; (800f6e8 <prvCheckTasksWaitingTermination+0x58>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d1e1      	bne.n	800f698 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f6d4:	bf00      	nop
 800f6d6:	bf00      	nop
 800f6d8:	3708      	adds	r7, #8
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	20001200 	.word	0x20001200
 800f6e4:	2000122c 	.word	0x2000122c
 800f6e8:	20001214 	.word	0x20001214

0800f6ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	3354      	adds	r3, #84	; 0x54
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f002 fdb5 	bl	8012268 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f704:	2b00      	cmp	r3, #0
 800f706:	d108      	bne.n	800f71a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f70c:	4618      	mov	r0, r3
 800f70e:	f000 ff97 	bl	8010640 <vPortFree>
				vPortFree( pxTCB );
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 ff94 	bl	8010640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f718:	e018      	b.n	800f74c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f720:	2b01      	cmp	r3, #1
 800f722:	d103      	bne.n	800f72c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f000 ff8b 	bl	8010640 <vPortFree>
	}
 800f72a:	e00f      	b.n	800f74c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f732:	2b02      	cmp	r3, #2
 800f734:	d00a      	beq.n	800f74c <prvDeleteTCB+0x60>
	__asm volatile
 800f736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f73a:	f383 8811 	msr	BASEPRI, r3
 800f73e:	f3bf 8f6f 	isb	sy
 800f742:	f3bf 8f4f 	dsb	sy
 800f746:	60fb      	str	r3, [r7, #12]
}
 800f748:	bf00      	nop
 800f74a:	e7fe      	b.n	800f74a <prvDeleteTCB+0x5e>
	}
 800f74c:	bf00      	nop
 800f74e:	3710      	adds	r7, #16
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f754:	b480      	push	{r7}
 800f756:	b083      	sub	sp, #12
 800f758:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f75a:	4b0c      	ldr	r3, [pc, #48]	; (800f78c <prvResetNextTaskUnblockTime+0x38>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d104      	bne.n	800f76e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f764:	4b0a      	ldr	r3, [pc, #40]	; (800f790 <prvResetNextTaskUnblockTime+0x3c>)
 800f766:	f04f 32ff 	mov.w	r2, #4294967295
 800f76a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f76c:	e008      	b.n	800f780 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f76e:	4b07      	ldr	r3, [pc, #28]	; (800f78c <prvResetNextTaskUnblockTime+0x38>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	68db      	ldr	r3, [r3, #12]
 800f776:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	4a04      	ldr	r2, [pc, #16]	; (800f790 <prvResetNextTaskUnblockTime+0x3c>)
 800f77e:	6013      	str	r3, [r2, #0]
}
 800f780:	bf00      	nop
 800f782:	370c      	adds	r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr
 800f78c:	200011e4 	.word	0x200011e4
 800f790:	2000124c 	.word	0x2000124c

0800f794 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f794:	b480      	push	{r7}
 800f796:	b083      	sub	sp, #12
 800f798:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f79a:	4b05      	ldr	r3, [pc, #20]	; (800f7b0 <xTaskGetCurrentTaskHandle+0x1c>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f7a0:	687b      	ldr	r3, [r7, #4]
	}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	370c      	adds	r7, #12
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop
 800f7b0:	20000d58 	.word	0x20000d58

0800f7b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f7ba:	4b0b      	ldr	r3, [pc, #44]	; (800f7e8 <xTaskGetSchedulerState+0x34>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d102      	bne.n	800f7c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	607b      	str	r3, [r7, #4]
 800f7c6:	e008      	b.n	800f7da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7c8:	4b08      	ldr	r3, [pc, #32]	; (800f7ec <xTaskGetSchedulerState+0x38>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d102      	bne.n	800f7d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f7d0:	2302      	movs	r3, #2
 800f7d2:	607b      	str	r3, [r7, #4]
 800f7d4:	e001      	b.n	800f7da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f7da:	687b      	ldr	r3, [r7, #4]
	}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	370c      	adds	r7, #12
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr
 800f7e8:	20001238 	.word	0x20001238
 800f7ec:	20001254 	.word	0x20001254

0800f7f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b086      	sub	sp, #24
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d056      	beq.n	800f8b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f806:	4b2e      	ldr	r3, [pc, #184]	; (800f8c0 <xTaskPriorityDisinherit+0xd0>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	693a      	ldr	r2, [r7, #16]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d00a      	beq.n	800f826 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f814:	f383 8811 	msr	BASEPRI, r3
 800f818:	f3bf 8f6f 	isb	sy
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	60fb      	str	r3, [r7, #12]
}
 800f822:	bf00      	nop
 800f824:	e7fe      	b.n	800f824 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d10a      	bne.n	800f844 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f832:	f383 8811 	msr	BASEPRI, r3
 800f836:	f3bf 8f6f 	isb	sy
 800f83a:	f3bf 8f4f 	dsb	sy
 800f83e:	60bb      	str	r3, [r7, #8]
}
 800f840:	bf00      	nop
 800f842:	e7fe      	b.n	800f842 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f848:	1e5a      	subs	r2, r3, #1
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f856:	429a      	cmp	r2, r3
 800f858:	d02c      	beq.n	800f8b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d128      	bne.n	800f8b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	3304      	adds	r3, #4
 800f866:	4618      	mov	r0, r3
 800f868:	f7fe fbc4 	bl	800dff4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f878:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f884:	4b0f      	ldr	r3, [pc, #60]	; (800f8c4 <xTaskPriorityDisinherit+0xd4>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d903      	bls.n	800f894 <xTaskPriorityDisinherit+0xa4>
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f890:	4a0c      	ldr	r2, [pc, #48]	; (800f8c4 <xTaskPriorityDisinherit+0xd4>)
 800f892:	6013      	str	r3, [r2, #0]
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f898:	4613      	mov	r3, r2
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	4413      	add	r3, r2
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	4a09      	ldr	r2, [pc, #36]	; (800f8c8 <xTaskPriorityDisinherit+0xd8>)
 800f8a2:	441a      	add	r2, r3
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	3304      	adds	r3, #4
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	4610      	mov	r0, r2
 800f8ac:	f7fe fb45 	bl	800df3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f8b4:	697b      	ldr	r3, [r7, #20]
	}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3718      	adds	r7, #24
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	20000d58 	.word	0x20000d58
 800f8c4:	20001234 	.word	0x20001234
 800f8c8:	20000d5c 	.word	0x20000d5c

0800f8cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b084      	sub	sp, #16
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
 800f8d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f8d6:	4b21      	ldr	r3, [pc, #132]	; (800f95c <prvAddCurrentTaskToDelayedList+0x90>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8dc:	4b20      	ldr	r3, [pc, #128]	; (800f960 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	3304      	adds	r3, #4
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fe fb86 	bl	800dff4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8ee:	d10a      	bne.n	800f906 <prvAddCurrentTaskToDelayedList+0x3a>
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d007      	beq.n	800f906 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8f6:	4b1a      	ldr	r3, [pc, #104]	; (800f960 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	3304      	adds	r3, #4
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	4819      	ldr	r0, [pc, #100]	; (800f964 <prvAddCurrentTaskToDelayedList+0x98>)
 800f900:	f7fe fb1b 	bl	800df3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f904:	e026      	b.n	800f954 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f906:	68fa      	ldr	r2, [r7, #12]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	4413      	add	r3, r2
 800f90c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f90e:	4b14      	ldr	r3, [pc, #80]	; (800f960 <prvAddCurrentTaskToDelayedList+0x94>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	68ba      	ldr	r2, [r7, #8]
 800f914:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f916:	68ba      	ldr	r2, [r7, #8]
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d209      	bcs.n	800f932 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f91e:	4b12      	ldr	r3, [pc, #72]	; (800f968 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f920:	681a      	ldr	r2, [r3, #0]
 800f922:	4b0f      	ldr	r3, [pc, #60]	; (800f960 <prvAddCurrentTaskToDelayedList+0x94>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	3304      	adds	r3, #4
 800f928:	4619      	mov	r1, r3
 800f92a:	4610      	mov	r0, r2
 800f92c:	f7fe fb29 	bl	800df82 <vListInsert>
}
 800f930:	e010      	b.n	800f954 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f932:	4b0e      	ldr	r3, [pc, #56]	; (800f96c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	4b0a      	ldr	r3, [pc, #40]	; (800f960 <prvAddCurrentTaskToDelayedList+0x94>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	3304      	adds	r3, #4
 800f93c:	4619      	mov	r1, r3
 800f93e:	4610      	mov	r0, r2
 800f940:	f7fe fb1f 	bl	800df82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f944:	4b0a      	ldr	r3, [pc, #40]	; (800f970 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	68ba      	ldr	r2, [r7, #8]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d202      	bcs.n	800f954 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f94e:	4a08      	ldr	r2, [pc, #32]	; (800f970 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	6013      	str	r3, [r2, #0]
}
 800f954:	bf00      	nop
 800f956:	3710      	adds	r7, #16
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}
 800f95c:	20001230 	.word	0x20001230
 800f960:	20000d58 	.word	0x20000d58
 800f964:	20001218 	.word	0x20001218
 800f968:	200011e8 	.word	0x200011e8
 800f96c:	200011e4 	.word	0x200011e4
 800f970:	2000124c 	.word	0x2000124c

0800f974 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b08a      	sub	sp, #40	; 0x28
 800f978:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f97a:	2300      	movs	r3, #0
 800f97c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f97e:	f000 fb07 	bl	800ff90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f982:	4b1c      	ldr	r3, [pc, #112]	; (800f9f4 <xTimerCreateTimerTask+0x80>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d021      	beq.n	800f9ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f98a:	2300      	movs	r3, #0
 800f98c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f98e:	2300      	movs	r3, #0
 800f990:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f992:	1d3a      	adds	r2, r7, #4
 800f994:	f107 0108 	add.w	r1, r7, #8
 800f998:	f107 030c 	add.w	r3, r7, #12
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7fe fa85 	bl	800deac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f9a2:	6879      	ldr	r1, [r7, #4]
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	68fa      	ldr	r2, [r7, #12]
 800f9a8:	9202      	str	r2, [sp, #8]
 800f9aa:	9301      	str	r3, [sp, #4]
 800f9ac:	2302      	movs	r3, #2
 800f9ae:	9300      	str	r3, [sp, #0]
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	460a      	mov	r2, r1
 800f9b4:	4910      	ldr	r1, [pc, #64]	; (800f9f8 <xTimerCreateTimerTask+0x84>)
 800f9b6:	4811      	ldr	r0, [pc, #68]	; (800f9fc <xTimerCreateTimerTask+0x88>)
 800f9b8:	f7ff f832 	bl	800ea20 <xTaskCreateStatic>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	4a10      	ldr	r2, [pc, #64]	; (800fa00 <xTimerCreateTimerTask+0x8c>)
 800f9c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f9c2:	4b0f      	ldr	r3, [pc, #60]	; (800fa00 <xTimerCreateTimerTask+0x8c>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d001      	beq.n	800f9ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d10a      	bne.n	800f9ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d8:	f383 8811 	msr	BASEPRI, r3
 800f9dc:	f3bf 8f6f 	isb	sy
 800f9e0:	f3bf 8f4f 	dsb	sy
 800f9e4:	613b      	str	r3, [r7, #16]
}
 800f9e6:	bf00      	nop
 800f9e8:	e7fe      	b.n	800f9e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f9ea:	697b      	ldr	r3, [r7, #20]
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3718      	adds	r7, #24
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}
 800f9f4:	20001288 	.word	0x20001288
 800f9f8:	0801854c 	.word	0x0801854c
 800f9fc:	0800fb39 	.word	0x0800fb39
 800fa00:	2000128c 	.word	0x2000128c

0800fa04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b08a      	sub	sp, #40	; 0x28
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	60f8      	str	r0, [r7, #12]
 800fa0c:	60b9      	str	r1, [r7, #8]
 800fa0e:	607a      	str	r2, [r7, #4]
 800fa10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fa12:	2300      	movs	r3, #0
 800fa14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d10a      	bne.n	800fa32 <xTimerGenericCommand+0x2e>
	__asm volatile
 800fa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa20:	f383 8811 	msr	BASEPRI, r3
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	623b      	str	r3, [r7, #32]
}
 800fa2e:	bf00      	nop
 800fa30:	e7fe      	b.n	800fa30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fa32:	4b1a      	ldr	r3, [pc, #104]	; (800fa9c <xTimerGenericCommand+0x98>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d02a      	beq.n	800fa90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	2b05      	cmp	r3, #5
 800fa4a:	dc18      	bgt.n	800fa7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fa4c:	f7ff feb2 	bl	800f7b4 <xTaskGetSchedulerState>
 800fa50:	4603      	mov	r3, r0
 800fa52:	2b02      	cmp	r3, #2
 800fa54:	d109      	bne.n	800fa6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fa56:	4b11      	ldr	r3, [pc, #68]	; (800fa9c <xTimerGenericCommand+0x98>)
 800fa58:	6818      	ldr	r0, [r3, #0]
 800fa5a:	f107 0110 	add.w	r1, r7, #16
 800fa5e:	2300      	movs	r3, #0
 800fa60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa62:	f7fe fbf5 	bl	800e250 <xQueueGenericSend>
 800fa66:	6278      	str	r0, [r7, #36]	; 0x24
 800fa68:	e012      	b.n	800fa90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fa6a:	4b0c      	ldr	r3, [pc, #48]	; (800fa9c <xTimerGenericCommand+0x98>)
 800fa6c:	6818      	ldr	r0, [r3, #0]
 800fa6e:	f107 0110 	add.w	r1, r7, #16
 800fa72:	2300      	movs	r3, #0
 800fa74:	2200      	movs	r2, #0
 800fa76:	f7fe fbeb 	bl	800e250 <xQueueGenericSend>
 800fa7a:	6278      	str	r0, [r7, #36]	; 0x24
 800fa7c:	e008      	b.n	800fa90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fa7e:	4b07      	ldr	r3, [pc, #28]	; (800fa9c <xTimerGenericCommand+0x98>)
 800fa80:	6818      	ldr	r0, [r3, #0]
 800fa82:	f107 0110 	add.w	r1, r7, #16
 800fa86:	2300      	movs	r3, #0
 800fa88:	683a      	ldr	r2, [r7, #0]
 800fa8a:	f7fe fcdf 	bl	800e44c <xQueueGenericSendFromISR>
 800fa8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3728      	adds	r7, #40	; 0x28
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	20001288 	.word	0x20001288

0800faa0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b088      	sub	sp, #32
 800faa4:	af02      	add	r7, sp, #8
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faaa:	4b22      	ldr	r3, [pc, #136]	; (800fb34 <prvProcessExpiredTimer+0x94>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	68db      	ldr	r3, [r3, #12]
 800fab0:	68db      	ldr	r3, [r3, #12]
 800fab2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	3304      	adds	r3, #4
 800fab8:	4618      	mov	r0, r3
 800faba:	f7fe fa9b 	bl	800dff4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fac4:	f003 0304 	and.w	r3, r3, #4
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d022      	beq.n	800fb12 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	699a      	ldr	r2, [r3, #24]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	18d1      	adds	r1, r2, r3
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	683a      	ldr	r2, [r7, #0]
 800fad8:	6978      	ldr	r0, [r7, #20]
 800fada:	f000 f8d1 	bl	800fc80 <prvInsertTimerInActiveList>
 800fade:	4603      	mov	r3, r0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d01f      	beq.n	800fb24 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fae4:	2300      	movs	r3, #0
 800fae6:	9300      	str	r3, [sp, #0]
 800fae8:	2300      	movs	r3, #0
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	2100      	movs	r1, #0
 800faee:	6978      	ldr	r0, [r7, #20]
 800faf0:	f7ff ff88 	bl	800fa04 <xTimerGenericCommand>
 800faf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d113      	bne.n	800fb24 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb00:	f383 8811 	msr	BASEPRI, r3
 800fb04:	f3bf 8f6f 	isb	sy
 800fb08:	f3bf 8f4f 	dsb	sy
 800fb0c:	60fb      	str	r3, [r7, #12]
}
 800fb0e:	bf00      	nop
 800fb10:	e7fe      	b.n	800fb10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb18:	f023 0301 	bic.w	r3, r3, #1
 800fb1c:	b2da      	uxtb	r2, r3
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	6a1b      	ldr	r3, [r3, #32]
 800fb28:	6978      	ldr	r0, [r7, #20]
 800fb2a:	4798      	blx	r3
}
 800fb2c:	bf00      	nop
 800fb2e:	3718      	adds	r7, #24
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	20001280 	.word	0x20001280

0800fb38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b084      	sub	sp, #16
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb40:	f107 0308 	add.w	r3, r7, #8
 800fb44:	4618      	mov	r0, r3
 800fb46:	f000 f857 	bl	800fbf8 <prvGetNextExpireTime>
 800fb4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	4619      	mov	r1, r3
 800fb50:	68f8      	ldr	r0, [r7, #12]
 800fb52:	f000 f803 	bl	800fb5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fb56:	f000 f8d5 	bl	800fd04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb5a:	e7f1      	b.n	800fb40 <prvTimerTask+0x8>

0800fb5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fb66:	f7ff fa29 	bl	800efbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb6a:	f107 0308 	add.w	r3, r7, #8
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f000 f866 	bl	800fc40 <prvSampleTimeNow>
 800fb74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d130      	bne.n	800fbde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d10a      	bne.n	800fb98 <prvProcessTimerOrBlockTask+0x3c>
 800fb82:	687a      	ldr	r2, [r7, #4]
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d806      	bhi.n	800fb98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fb8a:	f7ff fa25 	bl	800efd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fb8e:	68f9      	ldr	r1, [r7, #12]
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f7ff ff85 	bl	800faa0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fb96:	e024      	b.n	800fbe2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d008      	beq.n	800fbb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fb9e:	4b13      	ldr	r3, [pc, #76]	; (800fbec <prvProcessTimerOrBlockTask+0x90>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d101      	bne.n	800fbac <prvProcessTimerOrBlockTask+0x50>
 800fba8:	2301      	movs	r3, #1
 800fbaa:	e000      	b.n	800fbae <prvProcessTimerOrBlockTask+0x52>
 800fbac:	2300      	movs	r3, #0
 800fbae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fbb0:	4b0f      	ldr	r3, [pc, #60]	; (800fbf0 <prvProcessTimerOrBlockTask+0x94>)
 800fbb2:	6818      	ldr	r0, [r3, #0]
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	1ad3      	subs	r3, r2, r3
 800fbba:	683a      	ldr	r2, [r7, #0]
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	f7fe fefb 	bl	800e9b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fbc2:	f7ff fa09 	bl	800efd8 <xTaskResumeAll>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d10a      	bne.n	800fbe2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fbcc:	4b09      	ldr	r3, [pc, #36]	; (800fbf4 <prvProcessTimerOrBlockTask+0x98>)
 800fbce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbd2:	601a      	str	r2, [r3, #0]
 800fbd4:	f3bf 8f4f 	dsb	sy
 800fbd8:	f3bf 8f6f 	isb	sy
}
 800fbdc:	e001      	b.n	800fbe2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fbde:	f7ff f9fb 	bl	800efd8 <xTaskResumeAll>
}
 800fbe2:	bf00      	nop
 800fbe4:	3710      	adds	r7, #16
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	20001284 	.word	0x20001284
 800fbf0:	20001288 	.word	0x20001288
 800fbf4:	e000ed04 	.word	0xe000ed04

0800fbf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b085      	sub	sp, #20
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fc00:	4b0e      	ldr	r3, [pc, #56]	; (800fc3c <prvGetNextExpireTime+0x44>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d101      	bne.n	800fc0e <prvGetNextExpireTime+0x16>
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	e000      	b.n	800fc10 <prvGetNextExpireTime+0x18>
 800fc0e:	2200      	movs	r2, #0
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d105      	bne.n	800fc28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc1c:	4b07      	ldr	r3, [pc, #28]	; (800fc3c <prvGetNextExpireTime+0x44>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	60fb      	str	r3, [r7, #12]
 800fc26:	e001      	b.n	800fc2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3714      	adds	r7, #20
 800fc32:	46bd      	mov	sp, r7
 800fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc38:	4770      	bx	lr
 800fc3a:	bf00      	nop
 800fc3c:	20001280 	.word	0x20001280

0800fc40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b084      	sub	sp, #16
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fc48:	f7ff fa64 	bl	800f114 <xTaskGetTickCount>
 800fc4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fc4e:	4b0b      	ldr	r3, [pc, #44]	; (800fc7c <prvSampleTimeNow+0x3c>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	68fa      	ldr	r2, [r7, #12]
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d205      	bcs.n	800fc64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fc58:	f000 f936 	bl	800fec8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2201      	movs	r2, #1
 800fc60:	601a      	str	r2, [r3, #0]
 800fc62:	e002      	b.n	800fc6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2200      	movs	r2, #0
 800fc68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fc6a:	4a04      	ldr	r2, [pc, #16]	; (800fc7c <prvSampleTimeNow+0x3c>)
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fc70:	68fb      	ldr	r3, [r7, #12]
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	3710      	adds	r7, #16
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
 800fc7a:	bf00      	nop
 800fc7c:	20001290 	.word	0x20001290

0800fc80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b086      	sub	sp, #24
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]
 800fc8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	68ba      	ldr	r2, [r7, #8]
 800fc96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	68fa      	ldr	r2, [r7, #12]
 800fc9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fc9e:	68ba      	ldr	r2, [r7, #8]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d812      	bhi.n	800fccc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fca6:	687a      	ldr	r2, [r7, #4]
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	1ad2      	subs	r2, r2, r3
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	699b      	ldr	r3, [r3, #24]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d302      	bcc.n	800fcba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	617b      	str	r3, [r7, #20]
 800fcb8:	e01b      	b.n	800fcf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fcba:	4b10      	ldr	r3, [pc, #64]	; (800fcfc <prvInsertTimerInActiveList+0x7c>)
 800fcbc:	681a      	ldr	r2, [r3, #0]
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	3304      	adds	r3, #4
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	4610      	mov	r0, r2
 800fcc6:	f7fe f95c 	bl	800df82 <vListInsert>
 800fcca:	e012      	b.n	800fcf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d206      	bcs.n	800fce2 <prvInsertTimerInActiveList+0x62>
 800fcd4:	68ba      	ldr	r2, [r7, #8]
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d302      	bcc.n	800fce2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fcdc:	2301      	movs	r3, #1
 800fcde:	617b      	str	r3, [r7, #20]
 800fce0:	e007      	b.n	800fcf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fce2:	4b07      	ldr	r3, [pc, #28]	; (800fd00 <prvInsertTimerInActiveList+0x80>)
 800fce4:	681a      	ldr	r2, [r3, #0]
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	3304      	adds	r3, #4
 800fcea:	4619      	mov	r1, r3
 800fcec:	4610      	mov	r0, r2
 800fcee:	f7fe f948 	bl	800df82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fcf2:	697b      	ldr	r3, [r7, #20]
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3718      	adds	r7, #24
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	20001284 	.word	0x20001284
 800fd00:	20001280 	.word	0x20001280

0800fd04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b08e      	sub	sp, #56	; 0x38
 800fd08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd0a:	e0ca      	b.n	800fea2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	da18      	bge.n	800fd44 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fd12:	1d3b      	adds	r3, r7, #4
 800fd14:	3304      	adds	r3, #4
 800fd16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d10a      	bne.n	800fd34 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd22:	f383 8811 	msr	BASEPRI, r3
 800fd26:	f3bf 8f6f 	isb	sy
 800fd2a:	f3bf 8f4f 	dsb	sy
 800fd2e:	61fb      	str	r3, [r7, #28]
}
 800fd30:	bf00      	nop
 800fd32:	e7fe      	b.n	800fd32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd3a:	6850      	ldr	r0, [r2, #4]
 800fd3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd3e:	6892      	ldr	r2, [r2, #8]
 800fd40:	4611      	mov	r1, r2
 800fd42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f2c0 80aa 	blt.w	800fea0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd52:	695b      	ldr	r3, [r3, #20]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d004      	beq.n	800fd62 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5a:	3304      	adds	r3, #4
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7fe f949 	bl	800dff4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd62:	463b      	mov	r3, r7
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7ff ff6b 	bl	800fc40 <prvSampleTimeNow>
 800fd6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2b09      	cmp	r3, #9
 800fd70:	f200 8097 	bhi.w	800fea2 <prvProcessReceivedCommands+0x19e>
 800fd74:	a201      	add	r2, pc, #4	; (adr r2, 800fd7c <prvProcessReceivedCommands+0x78>)
 800fd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd7a:	bf00      	nop
 800fd7c:	0800fda5 	.word	0x0800fda5
 800fd80:	0800fda5 	.word	0x0800fda5
 800fd84:	0800fda5 	.word	0x0800fda5
 800fd88:	0800fe19 	.word	0x0800fe19
 800fd8c:	0800fe2d 	.word	0x0800fe2d
 800fd90:	0800fe77 	.word	0x0800fe77
 800fd94:	0800fda5 	.word	0x0800fda5
 800fd98:	0800fda5 	.word	0x0800fda5
 800fd9c:	0800fe19 	.word	0x0800fe19
 800fda0:	0800fe2d 	.word	0x0800fe2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdaa:	f043 0301 	orr.w	r3, r3, #1
 800fdae:	b2da      	uxtb	r2, r3
 800fdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fdb6:	68ba      	ldr	r2, [r7, #8]
 800fdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdba:	699b      	ldr	r3, [r3, #24]
 800fdbc:	18d1      	adds	r1, r2, r3
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdc4:	f7ff ff5c 	bl	800fc80 <prvInsertTimerInActiveList>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d069      	beq.n	800fea2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd0:	6a1b      	ldr	r3, [r3, #32]
 800fdd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fddc:	f003 0304 	and.w	r3, r3, #4
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d05e      	beq.n	800fea2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fde4:	68ba      	ldr	r2, [r7, #8]
 800fde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde8:	699b      	ldr	r3, [r3, #24]
 800fdea:	441a      	add	r2, r3
 800fdec:	2300      	movs	r3, #0
 800fdee:	9300      	str	r3, [sp, #0]
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	2100      	movs	r1, #0
 800fdf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdf6:	f7ff fe05 	bl	800fa04 <xTimerGenericCommand>
 800fdfa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fdfc:	6a3b      	ldr	r3, [r7, #32]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d14f      	bne.n	800fea2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fe02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe06:	f383 8811 	msr	BASEPRI, r3
 800fe0a:	f3bf 8f6f 	isb	sy
 800fe0e:	f3bf 8f4f 	dsb	sy
 800fe12:	61bb      	str	r3, [r7, #24]
}
 800fe14:	bf00      	nop
 800fe16:	e7fe      	b.n	800fe16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe1e:	f023 0301 	bic.w	r3, r3, #1
 800fe22:	b2da      	uxtb	r2, r3
 800fe24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fe2a:	e03a      	b.n	800fea2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe32:	f043 0301 	orr.w	r3, r3, #1
 800fe36:	b2da      	uxtb	r2, r3
 800fe38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fe3e:	68ba      	ldr	r2, [r7, #8]
 800fe40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fe44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe46:	699b      	ldr	r3, [r3, #24]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d10a      	bne.n	800fe62 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fe4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe50:	f383 8811 	msr	BASEPRI, r3
 800fe54:	f3bf 8f6f 	isb	sy
 800fe58:	f3bf 8f4f 	dsb	sy
 800fe5c:	617b      	str	r3, [r7, #20]
}
 800fe5e:	bf00      	nop
 800fe60:	e7fe      	b.n	800fe60 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fe62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe64:	699a      	ldr	r2, [r3, #24]
 800fe66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe68:	18d1      	adds	r1, r2, r3
 800fe6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe70:	f7ff ff06 	bl	800fc80 <prvInsertTimerInActiveList>
					break;
 800fe74:	e015      	b.n	800fea2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fe76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe7c:	f003 0302 	and.w	r3, r3, #2
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d103      	bne.n	800fe8c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fe84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe86:	f000 fbdb 	bl	8010640 <vPortFree>
 800fe8a:	e00a      	b.n	800fea2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe92:	f023 0301 	bic.w	r3, r3, #1
 800fe96:	b2da      	uxtb	r2, r3
 800fe98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fe9e:	e000      	b.n	800fea2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fea0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fea2:	4b08      	ldr	r3, [pc, #32]	; (800fec4 <prvProcessReceivedCommands+0x1c0>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	1d39      	adds	r1, r7, #4
 800fea8:	2200      	movs	r2, #0
 800feaa:	4618      	mov	r0, r3
 800feac:	f7fe fb6a 	bl	800e584 <xQueueReceive>
 800feb0:	4603      	mov	r3, r0
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	f47f af2a 	bne.w	800fd0c <prvProcessReceivedCommands+0x8>
	}
}
 800feb8:	bf00      	nop
 800feba:	bf00      	nop
 800febc:	3730      	adds	r7, #48	; 0x30
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
 800fec2:	bf00      	nop
 800fec4:	20001288 	.word	0x20001288

0800fec8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b088      	sub	sp, #32
 800fecc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fece:	e048      	b.n	800ff62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fed0:	4b2d      	ldr	r3, [pc, #180]	; (800ff88 <prvSwitchTimerLists+0xc0>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	68db      	ldr	r3, [r3, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feda:	4b2b      	ldr	r3, [pc, #172]	; (800ff88 <prvSwitchTimerLists+0xc0>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	68db      	ldr	r3, [r3, #12]
 800fee0:	68db      	ldr	r3, [r3, #12]
 800fee2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	3304      	adds	r3, #4
 800fee8:	4618      	mov	r0, r3
 800feea:	f7fe f883 	bl	800dff4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	6a1b      	ldr	r3, [r3, #32]
 800fef2:	68f8      	ldr	r0, [r7, #12]
 800fef4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fefc:	f003 0304 	and.w	r3, r3, #4
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d02e      	beq.n	800ff62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	699b      	ldr	r3, [r3, #24]
 800ff08:	693a      	ldr	r2, [r7, #16]
 800ff0a:	4413      	add	r3, r2
 800ff0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ff0e:	68ba      	ldr	r2, [r7, #8]
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d90e      	bls.n	800ff34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	68ba      	ldr	r2, [r7, #8]
 800ff1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	68fa      	ldr	r2, [r7, #12]
 800ff20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ff22:	4b19      	ldr	r3, [pc, #100]	; (800ff88 <prvSwitchTimerLists+0xc0>)
 800ff24:	681a      	ldr	r2, [r3, #0]
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	3304      	adds	r3, #4
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	4610      	mov	r0, r2
 800ff2e:	f7fe f828 	bl	800df82 <vListInsert>
 800ff32:	e016      	b.n	800ff62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff34:	2300      	movs	r3, #0
 800ff36:	9300      	str	r3, [sp, #0]
 800ff38:	2300      	movs	r3, #0
 800ff3a:	693a      	ldr	r2, [r7, #16]
 800ff3c:	2100      	movs	r1, #0
 800ff3e:	68f8      	ldr	r0, [r7, #12]
 800ff40:	f7ff fd60 	bl	800fa04 <xTimerGenericCommand>
 800ff44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d10a      	bne.n	800ff62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ff4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff50:	f383 8811 	msr	BASEPRI, r3
 800ff54:	f3bf 8f6f 	isb	sy
 800ff58:	f3bf 8f4f 	dsb	sy
 800ff5c:	603b      	str	r3, [r7, #0]
}
 800ff5e:	bf00      	nop
 800ff60:	e7fe      	b.n	800ff60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff62:	4b09      	ldr	r3, [pc, #36]	; (800ff88 <prvSwitchTimerLists+0xc0>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d1b1      	bne.n	800fed0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ff6c:	4b06      	ldr	r3, [pc, #24]	; (800ff88 <prvSwitchTimerLists+0xc0>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ff72:	4b06      	ldr	r3, [pc, #24]	; (800ff8c <prvSwitchTimerLists+0xc4>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	4a04      	ldr	r2, [pc, #16]	; (800ff88 <prvSwitchTimerLists+0xc0>)
 800ff78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ff7a:	4a04      	ldr	r2, [pc, #16]	; (800ff8c <prvSwitchTimerLists+0xc4>)
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	6013      	str	r3, [r2, #0]
}
 800ff80:	bf00      	nop
 800ff82:	3718      	adds	r7, #24
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	20001280 	.word	0x20001280
 800ff8c:	20001284 	.word	0x20001284

0800ff90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ff96:	f000 f965 	bl	8010264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ff9a:	4b15      	ldr	r3, [pc, #84]	; (800fff0 <prvCheckForValidListAndQueue+0x60>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d120      	bne.n	800ffe4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ffa2:	4814      	ldr	r0, [pc, #80]	; (800fff4 <prvCheckForValidListAndQueue+0x64>)
 800ffa4:	f7fd ff9c 	bl	800dee0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ffa8:	4813      	ldr	r0, [pc, #76]	; (800fff8 <prvCheckForValidListAndQueue+0x68>)
 800ffaa:	f7fd ff99 	bl	800dee0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ffae:	4b13      	ldr	r3, [pc, #76]	; (800fffc <prvCheckForValidListAndQueue+0x6c>)
 800ffb0:	4a10      	ldr	r2, [pc, #64]	; (800fff4 <prvCheckForValidListAndQueue+0x64>)
 800ffb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ffb4:	4b12      	ldr	r3, [pc, #72]	; (8010000 <prvCheckForValidListAndQueue+0x70>)
 800ffb6:	4a10      	ldr	r2, [pc, #64]	; (800fff8 <prvCheckForValidListAndQueue+0x68>)
 800ffb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ffba:	2300      	movs	r3, #0
 800ffbc:	9300      	str	r3, [sp, #0]
 800ffbe:	4b11      	ldr	r3, [pc, #68]	; (8010004 <prvCheckForValidListAndQueue+0x74>)
 800ffc0:	4a11      	ldr	r2, [pc, #68]	; (8010008 <prvCheckForValidListAndQueue+0x78>)
 800ffc2:	2110      	movs	r1, #16
 800ffc4:	200a      	movs	r0, #10
 800ffc6:	f7fe f8a7 	bl	800e118 <xQueueGenericCreateStatic>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	4a08      	ldr	r2, [pc, #32]	; (800fff0 <prvCheckForValidListAndQueue+0x60>)
 800ffce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ffd0:	4b07      	ldr	r3, [pc, #28]	; (800fff0 <prvCheckForValidListAndQueue+0x60>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d005      	beq.n	800ffe4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ffd8:	4b05      	ldr	r3, [pc, #20]	; (800fff0 <prvCheckForValidListAndQueue+0x60>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	490b      	ldr	r1, [pc, #44]	; (801000c <prvCheckForValidListAndQueue+0x7c>)
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7fe fcc0 	bl	800e964 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ffe4:	f000 f96e 	bl	80102c4 <vPortExitCritical>
}
 800ffe8:	bf00      	nop
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	20001288 	.word	0x20001288
 800fff4:	20001258 	.word	0x20001258
 800fff8:	2000126c 	.word	0x2000126c
 800fffc:	20001280 	.word	0x20001280
 8010000:	20001284 	.word	0x20001284
 8010004:	20001334 	.word	0x20001334
 8010008:	20001294 	.word	0x20001294
 801000c:	08018554 	.word	0x08018554

08010010 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010010:	b480      	push	{r7}
 8010012:	b085      	sub	sp, #20
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	3b04      	subs	r3, #4
 8010020:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010028:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	3b04      	subs	r3, #4
 801002e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	f023 0201 	bic.w	r2, r3, #1
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	3b04      	subs	r3, #4
 801003e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010040:	4a0c      	ldr	r2, [pc, #48]	; (8010074 <pxPortInitialiseStack+0x64>)
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	3b14      	subs	r3, #20
 801004a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801004c:	687a      	ldr	r2, [r7, #4]
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	3b04      	subs	r3, #4
 8010056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	f06f 0202 	mvn.w	r2, #2
 801005e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	3b20      	subs	r3, #32
 8010064:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010066:	68fb      	ldr	r3, [r7, #12]
}
 8010068:	4618      	mov	r0, r3
 801006a:	3714      	adds	r7, #20
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr
 8010074:	08010079 	.word	0x08010079

08010078 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010078:	b480      	push	{r7}
 801007a:	b085      	sub	sp, #20
 801007c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801007e:	2300      	movs	r3, #0
 8010080:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010082:	4b12      	ldr	r3, [pc, #72]	; (80100cc <prvTaskExitError+0x54>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	f1b3 3fff 	cmp.w	r3, #4294967295
 801008a:	d00a      	beq.n	80100a2 <prvTaskExitError+0x2a>
	__asm volatile
 801008c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010090:	f383 8811 	msr	BASEPRI, r3
 8010094:	f3bf 8f6f 	isb	sy
 8010098:	f3bf 8f4f 	dsb	sy
 801009c:	60fb      	str	r3, [r7, #12]
}
 801009e:	bf00      	nop
 80100a0:	e7fe      	b.n	80100a0 <prvTaskExitError+0x28>
	__asm volatile
 80100a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a6:	f383 8811 	msr	BASEPRI, r3
 80100aa:	f3bf 8f6f 	isb	sy
 80100ae:	f3bf 8f4f 	dsb	sy
 80100b2:	60bb      	str	r3, [r7, #8]
}
 80100b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80100b6:	bf00      	nop
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d0fc      	beq.n	80100b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80100be:	bf00      	nop
 80100c0:	bf00      	nop
 80100c2:	3714      	adds	r7, #20
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr
 80100cc:	20000038 	.word	0x20000038

080100d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80100d0:	4b07      	ldr	r3, [pc, #28]	; (80100f0 <pxCurrentTCBConst2>)
 80100d2:	6819      	ldr	r1, [r3, #0]
 80100d4:	6808      	ldr	r0, [r1, #0]
 80100d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100da:	f380 8809 	msr	PSP, r0
 80100de:	f3bf 8f6f 	isb	sy
 80100e2:	f04f 0000 	mov.w	r0, #0
 80100e6:	f380 8811 	msr	BASEPRI, r0
 80100ea:	4770      	bx	lr
 80100ec:	f3af 8000 	nop.w

080100f0 <pxCurrentTCBConst2>:
 80100f0:	20000d58 	.word	0x20000d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80100f4:	bf00      	nop
 80100f6:	bf00      	nop

080100f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80100f8:	4808      	ldr	r0, [pc, #32]	; (801011c <prvPortStartFirstTask+0x24>)
 80100fa:	6800      	ldr	r0, [r0, #0]
 80100fc:	6800      	ldr	r0, [r0, #0]
 80100fe:	f380 8808 	msr	MSP, r0
 8010102:	f04f 0000 	mov.w	r0, #0
 8010106:	f380 8814 	msr	CONTROL, r0
 801010a:	b662      	cpsie	i
 801010c:	b661      	cpsie	f
 801010e:	f3bf 8f4f 	dsb	sy
 8010112:	f3bf 8f6f 	isb	sy
 8010116:	df00      	svc	0
 8010118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801011a:	bf00      	nop
 801011c:	e000ed08 	.word	0xe000ed08

08010120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b086      	sub	sp, #24
 8010124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010126:	4b46      	ldr	r3, [pc, #280]	; (8010240 <xPortStartScheduler+0x120>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	4a46      	ldr	r2, [pc, #280]	; (8010244 <xPortStartScheduler+0x124>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d10a      	bne.n	8010146 <xPortStartScheduler+0x26>
	__asm volatile
 8010130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010134:	f383 8811 	msr	BASEPRI, r3
 8010138:	f3bf 8f6f 	isb	sy
 801013c:	f3bf 8f4f 	dsb	sy
 8010140:	613b      	str	r3, [r7, #16]
}
 8010142:	bf00      	nop
 8010144:	e7fe      	b.n	8010144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010146:	4b3e      	ldr	r3, [pc, #248]	; (8010240 <xPortStartScheduler+0x120>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	4a3f      	ldr	r2, [pc, #252]	; (8010248 <xPortStartScheduler+0x128>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d10a      	bne.n	8010166 <xPortStartScheduler+0x46>
	__asm volatile
 8010150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010154:	f383 8811 	msr	BASEPRI, r3
 8010158:	f3bf 8f6f 	isb	sy
 801015c:	f3bf 8f4f 	dsb	sy
 8010160:	60fb      	str	r3, [r7, #12]
}
 8010162:	bf00      	nop
 8010164:	e7fe      	b.n	8010164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010166:	4b39      	ldr	r3, [pc, #228]	; (801024c <xPortStartScheduler+0x12c>)
 8010168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	b2db      	uxtb	r3, r3
 8010170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	22ff      	movs	r2, #255	; 0xff
 8010176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	b2db      	uxtb	r3, r3
 801017e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010180:	78fb      	ldrb	r3, [r7, #3]
 8010182:	b2db      	uxtb	r3, r3
 8010184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010188:	b2da      	uxtb	r2, r3
 801018a:	4b31      	ldr	r3, [pc, #196]	; (8010250 <xPortStartScheduler+0x130>)
 801018c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801018e:	4b31      	ldr	r3, [pc, #196]	; (8010254 <xPortStartScheduler+0x134>)
 8010190:	2207      	movs	r2, #7
 8010192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010194:	e009      	b.n	80101aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010196:	4b2f      	ldr	r3, [pc, #188]	; (8010254 <xPortStartScheduler+0x134>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	3b01      	subs	r3, #1
 801019c:	4a2d      	ldr	r2, [pc, #180]	; (8010254 <xPortStartScheduler+0x134>)
 801019e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80101a0:	78fb      	ldrb	r3, [r7, #3]
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	005b      	lsls	r3, r3, #1
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101aa:	78fb      	ldrb	r3, [r7, #3]
 80101ac:	b2db      	uxtb	r3, r3
 80101ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101b2:	2b80      	cmp	r3, #128	; 0x80
 80101b4:	d0ef      	beq.n	8010196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80101b6:	4b27      	ldr	r3, [pc, #156]	; (8010254 <xPortStartScheduler+0x134>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	f1c3 0307 	rsb	r3, r3, #7
 80101be:	2b04      	cmp	r3, #4
 80101c0:	d00a      	beq.n	80101d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80101c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c6:	f383 8811 	msr	BASEPRI, r3
 80101ca:	f3bf 8f6f 	isb	sy
 80101ce:	f3bf 8f4f 	dsb	sy
 80101d2:	60bb      	str	r3, [r7, #8]
}
 80101d4:	bf00      	nop
 80101d6:	e7fe      	b.n	80101d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80101d8:	4b1e      	ldr	r3, [pc, #120]	; (8010254 <xPortStartScheduler+0x134>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	021b      	lsls	r3, r3, #8
 80101de:	4a1d      	ldr	r2, [pc, #116]	; (8010254 <xPortStartScheduler+0x134>)
 80101e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80101e2:	4b1c      	ldr	r3, [pc, #112]	; (8010254 <xPortStartScheduler+0x134>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80101ea:	4a1a      	ldr	r2, [pc, #104]	; (8010254 <xPortStartScheduler+0x134>)
 80101ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	b2da      	uxtb	r2, r3
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80101f6:	4b18      	ldr	r3, [pc, #96]	; (8010258 <xPortStartScheduler+0x138>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	4a17      	ldr	r2, [pc, #92]	; (8010258 <xPortStartScheduler+0x138>)
 80101fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010202:	4b15      	ldr	r3, [pc, #84]	; (8010258 <xPortStartScheduler+0x138>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4a14      	ldr	r2, [pc, #80]	; (8010258 <xPortStartScheduler+0x138>)
 8010208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801020c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801020e:	f000 f8dd 	bl	80103cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010212:	4b12      	ldr	r3, [pc, #72]	; (801025c <xPortStartScheduler+0x13c>)
 8010214:	2200      	movs	r2, #0
 8010216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010218:	f000 f8fc 	bl	8010414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801021c:	4b10      	ldr	r3, [pc, #64]	; (8010260 <xPortStartScheduler+0x140>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	4a0f      	ldr	r2, [pc, #60]	; (8010260 <xPortStartScheduler+0x140>)
 8010222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010228:	f7ff ff66 	bl	80100f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801022c:	f7ff f83c 	bl	800f2a8 <vTaskSwitchContext>
	prvTaskExitError();
 8010230:	f7ff ff22 	bl	8010078 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010234:	2300      	movs	r3, #0
}
 8010236:	4618      	mov	r0, r3
 8010238:	3718      	adds	r7, #24
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
 801023e:	bf00      	nop
 8010240:	e000ed00 	.word	0xe000ed00
 8010244:	410fc271 	.word	0x410fc271
 8010248:	410fc270 	.word	0x410fc270
 801024c:	e000e400 	.word	0xe000e400
 8010250:	20001384 	.word	0x20001384
 8010254:	20001388 	.word	0x20001388
 8010258:	e000ed20 	.word	0xe000ed20
 801025c:	20000038 	.word	0x20000038
 8010260:	e000ef34 	.word	0xe000ef34

08010264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010264:	b480      	push	{r7}
 8010266:	b083      	sub	sp, #12
 8010268:	af00      	add	r7, sp, #0
	__asm volatile
 801026a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801026e:	f383 8811 	msr	BASEPRI, r3
 8010272:	f3bf 8f6f 	isb	sy
 8010276:	f3bf 8f4f 	dsb	sy
 801027a:	607b      	str	r3, [r7, #4]
}
 801027c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801027e:	4b0f      	ldr	r3, [pc, #60]	; (80102bc <vPortEnterCritical+0x58>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	3301      	adds	r3, #1
 8010284:	4a0d      	ldr	r2, [pc, #52]	; (80102bc <vPortEnterCritical+0x58>)
 8010286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010288:	4b0c      	ldr	r3, [pc, #48]	; (80102bc <vPortEnterCritical+0x58>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	2b01      	cmp	r3, #1
 801028e:	d10f      	bne.n	80102b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010290:	4b0b      	ldr	r3, [pc, #44]	; (80102c0 <vPortEnterCritical+0x5c>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	b2db      	uxtb	r3, r3
 8010296:	2b00      	cmp	r3, #0
 8010298:	d00a      	beq.n	80102b0 <vPortEnterCritical+0x4c>
	__asm volatile
 801029a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801029e:	f383 8811 	msr	BASEPRI, r3
 80102a2:	f3bf 8f6f 	isb	sy
 80102a6:	f3bf 8f4f 	dsb	sy
 80102aa:	603b      	str	r3, [r7, #0]
}
 80102ac:	bf00      	nop
 80102ae:	e7fe      	b.n	80102ae <vPortEnterCritical+0x4a>
	}
}
 80102b0:	bf00      	nop
 80102b2:	370c      	adds	r7, #12
 80102b4:	46bd      	mov	sp, r7
 80102b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ba:	4770      	bx	lr
 80102bc:	20000038 	.word	0x20000038
 80102c0:	e000ed04 	.word	0xe000ed04

080102c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80102c4:	b480      	push	{r7}
 80102c6:	b083      	sub	sp, #12
 80102c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80102ca:	4b12      	ldr	r3, [pc, #72]	; (8010314 <vPortExitCritical+0x50>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d10a      	bne.n	80102e8 <vPortExitCritical+0x24>
	__asm volatile
 80102d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d6:	f383 8811 	msr	BASEPRI, r3
 80102da:	f3bf 8f6f 	isb	sy
 80102de:	f3bf 8f4f 	dsb	sy
 80102e2:	607b      	str	r3, [r7, #4]
}
 80102e4:	bf00      	nop
 80102e6:	e7fe      	b.n	80102e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80102e8:	4b0a      	ldr	r3, [pc, #40]	; (8010314 <vPortExitCritical+0x50>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	3b01      	subs	r3, #1
 80102ee:	4a09      	ldr	r2, [pc, #36]	; (8010314 <vPortExitCritical+0x50>)
 80102f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80102f2:	4b08      	ldr	r3, [pc, #32]	; (8010314 <vPortExitCritical+0x50>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d105      	bne.n	8010306 <vPortExitCritical+0x42>
 80102fa:	2300      	movs	r3, #0
 80102fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	f383 8811 	msr	BASEPRI, r3
}
 8010304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010306:	bf00      	nop
 8010308:	370c      	adds	r7, #12
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr
 8010312:	bf00      	nop
 8010314:	20000038 	.word	0x20000038
	...

08010320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010320:	f3ef 8009 	mrs	r0, PSP
 8010324:	f3bf 8f6f 	isb	sy
 8010328:	4b15      	ldr	r3, [pc, #84]	; (8010380 <pxCurrentTCBConst>)
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	f01e 0f10 	tst.w	lr, #16
 8010330:	bf08      	it	eq
 8010332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801033a:	6010      	str	r0, [r2, #0]
 801033c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010344:	f380 8811 	msr	BASEPRI, r0
 8010348:	f3bf 8f4f 	dsb	sy
 801034c:	f3bf 8f6f 	isb	sy
 8010350:	f7fe ffaa 	bl	800f2a8 <vTaskSwitchContext>
 8010354:	f04f 0000 	mov.w	r0, #0
 8010358:	f380 8811 	msr	BASEPRI, r0
 801035c:	bc09      	pop	{r0, r3}
 801035e:	6819      	ldr	r1, [r3, #0]
 8010360:	6808      	ldr	r0, [r1, #0]
 8010362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010366:	f01e 0f10 	tst.w	lr, #16
 801036a:	bf08      	it	eq
 801036c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010370:	f380 8809 	msr	PSP, r0
 8010374:	f3bf 8f6f 	isb	sy
 8010378:	4770      	bx	lr
 801037a:	bf00      	nop
 801037c:	f3af 8000 	nop.w

08010380 <pxCurrentTCBConst>:
 8010380:	20000d58 	.word	0x20000d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010384:	bf00      	nop
 8010386:	bf00      	nop

08010388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
	__asm volatile
 801038e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010392:	f383 8811 	msr	BASEPRI, r3
 8010396:	f3bf 8f6f 	isb	sy
 801039a:	f3bf 8f4f 	dsb	sy
 801039e:	607b      	str	r3, [r7, #4]
}
 80103a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80103a2:	f7fe fec7 	bl	800f134 <xTaskIncrementTick>
 80103a6:	4603      	mov	r3, r0
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d003      	beq.n	80103b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80103ac:	4b06      	ldr	r3, [pc, #24]	; (80103c8 <xPortSysTickHandler+0x40>)
 80103ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103b2:	601a      	str	r2, [r3, #0]
 80103b4:	2300      	movs	r3, #0
 80103b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	f383 8811 	msr	BASEPRI, r3
}
 80103be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80103c0:	bf00      	nop
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	e000ed04 	.word	0xe000ed04

080103cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80103cc:	b480      	push	{r7}
 80103ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80103d0:	4b0b      	ldr	r3, [pc, #44]	; (8010400 <vPortSetupTimerInterrupt+0x34>)
 80103d2:	2200      	movs	r2, #0
 80103d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80103d6:	4b0b      	ldr	r3, [pc, #44]	; (8010404 <vPortSetupTimerInterrupt+0x38>)
 80103d8:	2200      	movs	r2, #0
 80103da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80103dc:	4b0a      	ldr	r3, [pc, #40]	; (8010408 <vPortSetupTimerInterrupt+0x3c>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	4a0a      	ldr	r2, [pc, #40]	; (801040c <vPortSetupTimerInterrupt+0x40>)
 80103e2:	fba2 2303 	umull	r2, r3, r2, r3
 80103e6:	099b      	lsrs	r3, r3, #6
 80103e8:	4a09      	ldr	r2, [pc, #36]	; (8010410 <vPortSetupTimerInterrupt+0x44>)
 80103ea:	3b01      	subs	r3, #1
 80103ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80103ee:	4b04      	ldr	r3, [pc, #16]	; (8010400 <vPortSetupTimerInterrupt+0x34>)
 80103f0:	2207      	movs	r2, #7
 80103f2:	601a      	str	r2, [r3, #0]
}
 80103f4:	bf00      	nop
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop
 8010400:	e000e010 	.word	0xe000e010
 8010404:	e000e018 	.word	0xe000e018
 8010408:	20000004 	.word	0x20000004
 801040c:	10624dd3 	.word	0x10624dd3
 8010410:	e000e014 	.word	0xe000e014

08010414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010424 <vPortEnableVFP+0x10>
 8010418:	6801      	ldr	r1, [r0, #0]
 801041a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801041e:	6001      	str	r1, [r0, #0]
 8010420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010422:	bf00      	nop
 8010424:	e000ed88 	.word	0xe000ed88

08010428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010428:	b480      	push	{r7}
 801042a:	b085      	sub	sp, #20
 801042c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801042e:	f3ef 8305 	mrs	r3, IPSR
 8010432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	2b0f      	cmp	r3, #15
 8010438:	d914      	bls.n	8010464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801043a:	4a17      	ldr	r2, [pc, #92]	; (8010498 <vPortValidateInterruptPriority+0x70>)
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	4413      	add	r3, r2
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010444:	4b15      	ldr	r3, [pc, #84]	; (801049c <vPortValidateInterruptPriority+0x74>)
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	7afa      	ldrb	r2, [r7, #11]
 801044a:	429a      	cmp	r2, r3
 801044c:	d20a      	bcs.n	8010464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801044e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010452:	f383 8811 	msr	BASEPRI, r3
 8010456:	f3bf 8f6f 	isb	sy
 801045a:	f3bf 8f4f 	dsb	sy
 801045e:	607b      	str	r3, [r7, #4]
}
 8010460:	bf00      	nop
 8010462:	e7fe      	b.n	8010462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010464:	4b0e      	ldr	r3, [pc, #56]	; (80104a0 <vPortValidateInterruptPriority+0x78>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801046c:	4b0d      	ldr	r3, [pc, #52]	; (80104a4 <vPortValidateInterruptPriority+0x7c>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	429a      	cmp	r2, r3
 8010472:	d90a      	bls.n	801048a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010478:	f383 8811 	msr	BASEPRI, r3
 801047c:	f3bf 8f6f 	isb	sy
 8010480:	f3bf 8f4f 	dsb	sy
 8010484:	603b      	str	r3, [r7, #0]
}
 8010486:	bf00      	nop
 8010488:	e7fe      	b.n	8010488 <vPortValidateInterruptPriority+0x60>
	}
 801048a:	bf00      	nop
 801048c:	3714      	adds	r7, #20
 801048e:	46bd      	mov	sp, r7
 8010490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010494:	4770      	bx	lr
 8010496:	bf00      	nop
 8010498:	e000e3f0 	.word	0xe000e3f0
 801049c:	20001384 	.word	0x20001384
 80104a0:	e000ed0c 	.word	0xe000ed0c
 80104a4:	20001388 	.word	0x20001388

080104a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b08a      	sub	sp, #40	; 0x28
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80104b0:	2300      	movs	r3, #0
 80104b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80104b4:	f7fe fd82 	bl	800efbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80104b8:	4b5b      	ldr	r3, [pc, #364]	; (8010628 <pvPortMalloc+0x180>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d101      	bne.n	80104c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80104c0:	f000 f920 	bl	8010704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80104c4:	4b59      	ldr	r3, [pc, #356]	; (801062c <pvPortMalloc+0x184>)
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	4013      	ands	r3, r2
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	f040 8093 	bne.w	80105f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d01d      	beq.n	8010514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80104d8:	2208      	movs	r2, #8
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	4413      	add	r3, r2
 80104de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f003 0307 	and.w	r3, r3, #7
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d014      	beq.n	8010514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f023 0307 	bic.w	r3, r3, #7
 80104f0:	3308      	adds	r3, #8
 80104f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f003 0307 	and.w	r3, r3, #7
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d00a      	beq.n	8010514 <pvPortMalloc+0x6c>
	__asm volatile
 80104fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010502:	f383 8811 	msr	BASEPRI, r3
 8010506:	f3bf 8f6f 	isb	sy
 801050a:	f3bf 8f4f 	dsb	sy
 801050e:	617b      	str	r3, [r7, #20]
}
 8010510:	bf00      	nop
 8010512:	e7fe      	b.n	8010512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d06e      	beq.n	80105f8 <pvPortMalloc+0x150>
 801051a:	4b45      	ldr	r3, [pc, #276]	; (8010630 <pvPortMalloc+0x188>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	429a      	cmp	r2, r3
 8010522:	d869      	bhi.n	80105f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010524:	4b43      	ldr	r3, [pc, #268]	; (8010634 <pvPortMalloc+0x18c>)
 8010526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010528:	4b42      	ldr	r3, [pc, #264]	; (8010634 <pvPortMalloc+0x18c>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801052e:	e004      	b.n	801053a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801053a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	429a      	cmp	r2, r3
 8010542:	d903      	bls.n	801054c <pvPortMalloc+0xa4>
 8010544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d1f1      	bne.n	8010530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801054c:	4b36      	ldr	r3, [pc, #216]	; (8010628 <pvPortMalloc+0x180>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010552:	429a      	cmp	r2, r3
 8010554:	d050      	beq.n	80105f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010556:	6a3b      	ldr	r3, [r7, #32]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	2208      	movs	r2, #8
 801055c:	4413      	add	r3, r2
 801055e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	6a3b      	ldr	r3, [r7, #32]
 8010566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056a:	685a      	ldr	r2, [r3, #4]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	1ad2      	subs	r2, r2, r3
 8010570:	2308      	movs	r3, #8
 8010572:	005b      	lsls	r3, r3, #1
 8010574:	429a      	cmp	r2, r3
 8010576:	d91f      	bls.n	80105b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	4413      	add	r3, r2
 801057e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010580:	69bb      	ldr	r3, [r7, #24]
 8010582:	f003 0307 	and.w	r3, r3, #7
 8010586:	2b00      	cmp	r3, #0
 8010588:	d00a      	beq.n	80105a0 <pvPortMalloc+0xf8>
	__asm volatile
 801058a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801058e:	f383 8811 	msr	BASEPRI, r3
 8010592:	f3bf 8f6f 	isb	sy
 8010596:	f3bf 8f4f 	dsb	sy
 801059a:	613b      	str	r3, [r7, #16]
}
 801059c:	bf00      	nop
 801059e:	e7fe      	b.n	801059e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80105a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a2:	685a      	ldr	r2, [r3, #4]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	1ad2      	subs	r2, r2, r3
 80105a8:	69bb      	ldr	r3, [r7, #24]
 80105aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80105ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ae:	687a      	ldr	r2, [r7, #4]
 80105b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80105b2:	69b8      	ldr	r0, [r7, #24]
 80105b4:	f000 f908 	bl	80107c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80105b8:	4b1d      	ldr	r3, [pc, #116]	; (8010630 <pvPortMalloc+0x188>)
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105be:	685b      	ldr	r3, [r3, #4]
 80105c0:	1ad3      	subs	r3, r2, r3
 80105c2:	4a1b      	ldr	r2, [pc, #108]	; (8010630 <pvPortMalloc+0x188>)
 80105c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80105c6:	4b1a      	ldr	r3, [pc, #104]	; (8010630 <pvPortMalloc+0x188>)
 80105c8:	681a      	ldr	r2, [r3, #0]
 80105ca:	4b1b      	ldr	r3, [pc, #108]	; (8010638 <pvPortMalloc+0x190>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d203      	bcs.n	80105da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80105d2:	4b17      	ldr	r3, [pc, #92]	; (8010630 <pvPortMalloc+0x188>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	4a18      	ldr	r2, [pc, #96]	; (8010638 <pvPortMalloc+0x190>)
 80105d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80105da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105dc:	685a      	ldr	r2, [r3, #4]
 80105de:	4b13      	ldr	r3, [pc, #76]	; (801062c <pvPortMalloc+0x184>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	431a      	orrs	r2, r3
 80105e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80105e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ea:	2200      	movs	r2, #0
 80105ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80105ee:	4b13      	ldr	r3, [pc, #76]	; (801063c <pvPortMalloc+0x194>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	3301      	adds	r3, #1
 80105f4:	4a11      	ldr	r2, [pc, #68]	; (801063c <pvPortMalloc+0x194>)
 80105f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80105f8:	f7fe fcee 	bl	800efd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80105fc:	69fb      	ldr	r3, [r7, #28]
 80105fe:	f003 0307 	and.w	r3, r3, #7
 8010602:	2b00      	cmp	r3, #0
 8010604:	d00a      	beq.n	801061c <pvPortMalloc+0x174>
	__asm volatile
 8010606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801060a:	f383 8811 	msr	BASEPRI, r3
 801060e:	f3bf 8f6f 	isb	sy
 8010612:	f3bf 8f4f 	dsb	sy
 8010616:	60fb      	str	r3, [r7, #12]
}
 8010618:	bf00      	nop
 801061a:	e7fe      	b.n	801061a <pvPortMalloc+0x172>
	return pvReturn;
 801061c:	69fb      	ldr	r3, [r7, #28]
}
 801061e:	4618      	mov	r0, r3
 8010620:	3728      	adds	r7, #40	; 0x28
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
 8010626:	bf00      	nop
 8010628:	200059e4 	.word	0x200059e4
 801062c:	200059f8 	.word	0x200059f8
 8010630:	200059e8 	.word	0x200059e8
 8010634:	200059dc 	.word	0x200059dc
 8010638:	200059ec 	.word	0x200059ec
 801063c:	200059f0 	.word	0x200059f0

08010640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b086      	sub	sp, #24
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d04d      	beq.n	80106ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010652:	2308      	movs	r3, #8
 8010654:	425b      	negs	r3, r3
 8010656:	697a      	ldr	r2, [r7, #20]
 8010658:	4413      	add	r3, r2
 801065a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801065c:	697b      	ldr	r3, [r7, #20]
 801065e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	685a      	ldr	r2, [r3, #4]
 8010664:	4b24      	ldr	r3, [pc, #144]	; (80106f8 <vPortFree+0xb8>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	4013      	ands	r3, r2
 801066a:	2b00      	cmp	r3, #0
 801066c:	d10a      	bne.n	8010684 <vPortFree+0x44>
	__asm volatile
 801066e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010672:	f383 8811 	msr	BASEPRI, r3
 8010676:	f3bf 8f6f 	isb	sy
 801067a:	f3bf 8f4f 	dsb	sy
 801067e:	60fb      	str	r3, [r7, #12]
}
 8010680:	bf00      	nop
 8010682:	e7fe      	b.n	8010682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d00a      	beq.n	80106a2 <vPortFree+0x62>
	__asm volatile
 801068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010690:	f383 8811 	msr	BASEPRI, r3
 8010694:	f3bf 8f6f 	isb	sy
 8010698:	f3bf 8f4f 	dsb	sy
 801069c:	60bb      	str	r3, [r7, #8]
}
 801069e:	bf00      	nop
 80106a0:	e7fe      	b.n	80106a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	685a      	ldr	r2, [r3, #4]
 80106a6:	4b14      	ldr	r3, [pc, #80]	; (80106f8 <vPortFree+0xb8>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	4013      	ands	r3, r2
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d01e      	beq.n	80106ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d11a      	bne.n	80106ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80106b8:	693b      	ldr	r3, [r7, #16]
 80106ba:	685a      	ldr	r2, [r3, #4]
 80106bc:	4b0e      	ldr	r3, [pc, #56]	; (80106f8 <vPortFree+0xb8>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	43db      	mvns	r3, r3
 80106c2:	401a      	ands	r2, r3
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80106c8:	f7fe fc78 	bl	800efbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	685a      	ldr	r2, [r3, #4]
 80106d0:	4b0a      	ldr	r3, [pc, #40]	; (80106fc <vPortFree+0xbc>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	4413      	add	r3, r2
 80106d6:	4a09      	ldr	r2, [pc, #36]	; (80106fc <vPortFree+0xbc>)
 80106d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80106da:	6938      	ldr	r0, [r7, #16]
 80106dc:	f000 f874 	bl	80107c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80106e0:	4b07      	ldr	r3, [pc, #28]	; (8010700 <vPortFree+0xc0>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	3301      	adds	r3, #1
 80106e6:	4a06      	ldr	r2, [pc, #24]	; (8010700 <vPortFree+0xc0>)
 80106e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80106ea:	f7fe fc75 	bl	800efd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80106ee:	bf00      	nop
 80106f0:	3718      	adds	r7, #24
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop
 80106f8:	200059f8 	.word	0x200059f8
 80106fc:	200059e8 	.word	0x200059e8
 8010700:	200059f4 	.word	0x200059f4

08010704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010704:	b480      	push	{r7}
 8010706:	b085      	sub	sp, #20
 8010708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801070a:	f244 6350 	movw	r3, #18000	; 0x4650
 801070e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010710:	4b27      	ldr	r3, [pc, #156]	; (80107b0 <prvHeapInit+0xac>)
 8010712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f003 0307 	and.w	r3, r3, #7
 801071a:	2b00      	cmp	r3, #0
 801071c:	d00c      	beq.n	8010738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	3307      	adds	r3, #7
 8010722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	f023 0307 	bic.w	r3, r3, #7
 801072a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801072c:	68ba      	ldr	r2, [r7, #8]
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	1ad3      	subs	r3, r2, r3
 8010732:	4a1f      	ldr	r2, [pc, #124]	; (80107b0 <prvHeapInit+0xac>)
 8010734:	4413      	add	r3, r2
 8010736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801073c:	4a1d      	ldr	r2, [pc, #116]	; (80107b4 <prvHeapInit+0xb0>)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010742:	4b1c      	ldr	r3, [pc, #112]	; (80107b4 <prvHeapInit+0xb0>)
 8010744:	2200      	movs	r2, #0
 8010746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	68ba      	ldr	r2, [r7, #8]
 801074c:	4413      	add	r3, r2
 801074e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010750:	2208      	movs	r2, #8
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	1a9b      	subs	r3, r3, r2
 8010756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	f023 0307 	bic.w	r3, r3, #7
 801075e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	4a15      	ldr	r2, [pc, #84]	; (80107b8 <prvHeapInit+0xb4>)
 8010764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010766:	4b14      	ldr	r3, [pc, #80]	; (80107b8 <prvHeapInit+0xb4>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	2200      	movs	r2, #0
 801076c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801076e:	4b12      	ldr	r3, [pc, #72]	; (80107b8 <prvHeapInit+0xb4>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	2200      	movs	r2, #0
 8010774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	68fa      	ldr	r2, [r7, #12]
 801077e:	1ad2      	subs	r2, r2, r3
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010784:	4b0c      	ldr	r3, [pc, #48]	; (80107b8 <prvHeapInit+0xb4>)
 8010786:	681a      	ldr	r2, [r3, #0]
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	685b      	ldr	r3, [r3, #4]
 8010790:	4a0a      	ldr	r2, [pc, #40]	; (80107bc <prvHeapInit+0xb8>)
 8010792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	4a09      	ldr	r2, [pc, #36]	; (80107c0 <prvHeapInit+0xbc>)
 801079a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801079c:	4b09      	ldr	r3, [pc, #36]	; (80107c4 <prvHeapInit+0xc0>)
 801079e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80107a2:	601a      	str	r2, [r3, #0]
}
 80107a4:	bf00      	nop
 80107a6:	3714      	adds	r7, #20
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	4770      	bx	lr
 80107b0:	2000138c 	.word	0x2000138c
 80107b4:	200059dc 	.word	0x200059dc
 80107b8:	200059e4 	.word	0x200059e4
 80107bc:	200059ec 	.word	0x200059ec
 80107c0:	200059e8 	.word	0x200059e8
 80107c4:	200059f8 	.word	0x200059f8

080107c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80107c8:	b480      	push	{r7}
 80107ca:	b085      	sub	sp, #20
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80107d0:	4b28      	ldr	r3, [pc, #160]	; (8010874 <prvInsertBlockIntoFreeList+0xac>)
 80107d2:	60fb      	str	r3, [r7, #12]
 80107d4:	e002      	b.n	80107dc <prvInsertBlockIntoFreeList+0x14>
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	60fb      	str	r3, [r7, #12]
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	687a      	ldr	r2, [r7, #4]
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d8f7      	bhi.n	80107d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	685b      	ldr	r3, [r3, #4]
 80107ee:	68ba      	ldr	r2, [r7, #8]
 80107f0:	4413      	add	r3, r2
 80107f2:	687a      	ldr	r2, [r7, #4]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d108      	bne.n	801080a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	685a      	ldr	r2, [r3, #4]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	685b      	ldr	r3, [r3, #4]
 8010800:	441a      	add	r2, r3
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	685b      	ldr	r3, [r3, #4]
 8010812:	68ba      	ldr	r2, [r7, #8]
 8010814:	441a      	add	r2, r3
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	429a      	cmp	r2, r3
 801081c:	d118      	bne.n	8010850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	681a      	ldr	r2, [r3, #0]
 8010822:	4b15      	ldr	r3, [pc, #84]	; (8010878 <prvInsertBlockIntoFreeList+0xb0>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	429a      	cmp	r2, r3
 8010828:	d00d      	beq.n	8010846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	685a      	ldr	r2, [r3, #4]
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	685b      	ldr	r3, [r3, #4]
 8010834:	441a      	add	r2, r3
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	601a      	str	r2, [r3, #0]
 8010844:	e008      	b.n	8010858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010846:	4b0c      	ldr	r3, [pc, #48]	; (8010878 <prvInsertBlockIntoFreeList+0xb0>)
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	601a      	str	r2, [r3, #0]
 801084e:	e003      	b.n	8010858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	681a      	ldr	r2, [r3, #0]
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010858:	68fa      	ldr	r2, [r7, #12]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	429a      	cmp	r2, r3
 801085e:	d002      	beq.n	8010866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	687a      	ldr	r2, [r7, #4]
 8010864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010866:	bf00      	nop
 8010868:	3714      	adds	r7, #20
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr
 8010872:	bf00      	nop
 8010874:	200059dc 	.word	0x200059dc
 8010878:	200059e4 	.word	0x200059e4

0801087c <_Znwj>:
 801087c:	2801      	cmp	r0, #1
 801087e:	bf38      	it	cc
 8010880:	2001      	movcc	r0, #1
 8010882:	b510      	push	{r4, lr}
 8010884:	4604      	mov	r4, r0
 8010886:	4620      	mov	r0, r4
 8010888:	f000 fa70 	bl	8010d6c <malloc>
 801088c:	b930      	cbnz	r0, 801089c <_Znwj+0x20>
 801088e:	f000 f81b 	bl	80108c8 <_ZSt15get_new_handlerv>
 8010892:	b908      	cbnz	r0, 8010898 <_Znwj+0x1c>
 8010894:	f000 f820 	bl	80108d8 <abort>
 8010898:	4780      	blx	r0
 801089a:	e7f4      	b.n	8010886 <_Znwj+0xa>
 801089c:	bd10      	pop	{r4, pc}

0801089e <__cxa_pure_virtual>:
 801089e:	b508      	push	{r3, lr}
 80108a0:	f000 f80c 	bl	80108bc <_ZSt9terminatev>

080108a4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80108a4:	b508      	push	{r3, lr}
 80108a6:	4780      	blx	r0
 80108a8:	f000 f816 	bl	80108d8 <abort>

080108ac <_ZSt13get_terminatev>:
 80108ac:	4b02      	ldr	r3, [pc, #8]	; (80108b8 <_ZSt13get_terminatev+0xc>)
 80108ae:	6818      	ldr	r0, [r3, #0]
 80108b0:	f3bf 8f5b 	dmb	ish
 80108b4:	4770      	bx	lr
 80108b6:	bf00      	nop
 80108b8:	2000003c 	.word	0x2000003c

080108bc <_ZSt9terminatev>:
 80108bc:	b508      	push	{r3, lr}
 80108be:	f7ff fff5 	bl	80108ac <_ZSt13get_terminatev>
 80108c2:	f7ff ffef 	bl	80108a4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080108c8 <_ZSt15get_new_handlerv>:
 80108c8:	4b02      	ldr	r3, [pc, #8]	; (80108d4 <_ZSt15get_new_handlerv+0xc>)
 80108ca:	6818      	ldr	r0, [r3, #0]
 80108cc:	f3bf 8f5b 	dmb	ish
 80108d0:	4770      	bx	lr
 80108d2:	bf00      	nop
 80108d4:	200059fc 	.word	0x200059fc

080108d8 <abort>:
 80108d8:	b508      	push	{r3, lr}
 80108da:	2006      	movs	r0, #6
 80108dc:	f001 fd5e 	bl	801239c <raise>
 80108e0:	2001      	movs	r0, #1
 80108e2:	f7f2 fbe7 	bl	80030b4 <_exit>
	...

080108e8 <__errno>:
 80108e8:	4b01      	ldr	r3, [pc, #4]	; (80108f0 <__errno+0x8>)
 80108ea:	6818      	ldr	r0, [r3, #0]
 80108ec:	4770      	bx	lr
 80108ee:	bf00      	nop
 80108f0:	20000040 	.word	0x20000040

080108f4 <std>:
 80108f4:	2300      	movs	r3, #0
 80108f6:	b510      	push	{r4, lr}
 80108f8:	4604      	mov	r4, r0
 80108fa:	e9c0 3300 	strd	r3, r3, [r0]
 80108fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010902:	6083      	str	r3, [r0, #8]
 8010904:	8181      	strh	r1, [r0, #12]
 8010906:	6643      	str	r3, [r0, #100]	; 0x64
 8010908:	81c2      	strh	r2, [r0, #14]
 801090a:	6183      	str	r3, [r0, #24]
 801090c:	4619      	mov	r1, r3
 801090e:	2208      	movs	r2, #8
 8010910:	305c      	adds	r0, #92	; 0x5c
 8010912:	f000 fa63 	bl	8010ddc <memset>
 8010916:	4b05      	ldr	r3, [pc, #20]	; (801092c <std+0x38>)
 8010918:	6263      	str	r3, [r4, #36]	; 0x24
 801091a:	4b05      	ldr	r3, [pc, #20]	; (8010930 <std+0x3c>)
 801091c:	62a3      	str	r3, [r4, #40]	; 0x28
 801091e:	4b05      	ldr	r3, [pc, #20]	; (8010934 <std+0x40>)
 8010920:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010922:	4b05      	ldr	r3, [pc, #20]	; (8010938 <std+0x44>)
 8010924:	6224      	str	r4, [r4, #32]
 8010926:	6323      	str	r3, [r4, #48]	; 0x30
 8010928:	bd10      	pop	{r4, pc}
 801092a:	bf00      	nop
 801092c:	0801246d 	.word	0x0801246d
 8010930:	08012493 	.word	0x08012493
 8010934:	080124cb 	.word	0x080124cb
 8010938:	080124ef 	.word	0x080124ef

0801093c <_cleanup_r>:
 801093c:	4901      	ldr	r1, [pc, #4]	; (8010944 <_cleanup_r+0x8>)
 801093e:	f000 b8af 	b.w	8010aa0 <_fwalk_reent>
 8010942:	bf00      	nop
 8010944:	08014835 	.word	0x08014835

08010948 <__sfmoreglue>:
 8010948:	b570      	push	{r4, r5, r6, lr}
 801094a:	1e4a      	subs	r2, r1, #1
 801094c:	2568      	movs	r5, #104	; 0x68
 801094e:	4355      	muls	r5, r2
 8010950:	460e      	mov	r6, r1
 8010952:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010956:	f000 fd17 	bl	8011388 <_malloc_r>
 801095a:	4604      	mov	r4, r0
 801095c:	b140      	cbz	r0, 8010970 <__sfmoreglue+0x28>
 801095e:	2100      	movs	r1, #0
 8010960:	e9c0 1600 	strd	r1, r6, [r0]
 8010964:	300c      	adds	r0, #12
 8010966:	60a0      	str	r0, [r4, #8]
 8010968:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801096c:	f000 fa36 	bl	8010ddc <memset>
 8010970:	4620      	mov	r0, r4
 8010972:	bd70      	pop	{r4, r5, r6, pc}

08010974 <__sfp_lock_acquire>:
 8010974:	4801      	ldr	r0, [pc, #4]	; (801097c <__sfp_lock_acquire+0x8>)
 8010976:	f000 b9f5 	b.w	8010d64 <__retarget_lock_acquire_recursive>
 801097a:	bf00      	nop
 801097c:	2000618c 	.word	0x2000618c

08010980 <__sfp_lock_release>:
 8010980:	4801      	ldr	r0, [pc, #4]	; (8010988 <__sfp_lock_release+0x8>)
 8010982:	f000 b9f1 	b.w	8010d68 <__retarget_lock_release_recursive>
 8010986:	bf00      	nop
 8010988:	2000618c 	.word	0x2000618c

0801098c <__sinit_lock_acquire>:
 801098c:	4801      	ldr	r0, [pc, #4]	; (8010994 <__sinit_lock_acquire+0x8>)
 801098e:	f000 b9e9 	b.w	8010d64 <__retarget_lock_acquire_recursive>
 8010992:	bf00      	nop
 8010994:	20006187 	.word	0x20006187

08010998 <__sinit_lock_release>:
 8010998:	4801      	ldr	r0, [pc, #4]	; (80109a0 <__sinit_lock_release+0x8>)
 801099a:	f000 b9e5 	b.w	8010d68 <__retarget_lock_release_recursive>
 801099e:	bf00      	nop
 80109a0:	20006187 	.word	0x20006187

080109a4 <__sinit>:
 80109a4:	b510      	push	{r4, lr}
 80109a6:	4604      	mov	r4, r0
 80109a8:	f7ff fff0 	bl	801098c <__sinit_lock_acquire>
 80109ac:	69a3      	ldr	r3, [r4, #24]
 80109ae:	b11b      	cbz	r3, 80109b8 <__sinit+0x14>
 80109b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109b4:	f7ff bff0 	b.w	8010998 <__sinit_lock_release>
 80109b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80109bc:	6523      	str	r3, [r4, #80]	; 0x50
 80109be:	4b13      	ldr	r3, [pc, #76]	; (8010a0c <__sinit+0x68>)
 80109c0:	4a13      	ldr	r2, [pc, #76]	; (8010a10 <__sinit+0x6c>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80109c6:	42a3      	cmp	r3, r4
 80109c8:	bf04      	itt	eq
 80109ca:	2301      	moveq	r3, #1
 80109cc:	61a3      	streq	r3, [r4, #24]
 80109ce:	4620      	mov	r0, r4
 80109d0:	f000 f820 	bl	8010a14 <__sfp>
 80109d4:	6060      	str	r0, [r4, #4]
 80109d6:	4620      	mov	r0, r4
 80109d8:	f000 f81c 	bl	8010a14 <__sfp>
 80109dc:	60a0      	str	r0, [r4, #8]
 80109de:	4620      	mov	r0, r4
 80109e0:	f000 f818 	bl	8010a14 <__sfp>
 80109e4:	2200      	movs	r2, #0
 80109e6:	60e0      	str	r0, [r4, #12]
 80109e8:	2104      	movs	r1, #4
 80109ea:	6860      	ldr	r0, [r4, #4]
 80109ec:	f7ff ff82 	bl	80108f4 <std>
 80109f0:	68a0      	ldr	r0, [r4, #8]
 80109f2:	2201      	movs	r2, #1
 80109f4:	2109      	movs	r1, #9
 80109f6:	f7ff ff7d 	bl	80108f4 <std>
 80109fa:	68e0      	ldr	r0, [r4, #12]
 80109fc:	2202      	movs	r2, #2
 80109fe:	2112      	movs	r1, #18
 8010a00:	f7ff ff78 	bl	80108f4 <std>
 8010a04:	2301      	movs	r3, #1
 8010a06:	61a3      	str	r3, [r4, #24]
 8010a08:	e7d2      	b.n	80109b0 <__sinit+0xc>
 8010a0a:	bf00      	nop
 8010a0c:	08018738 	.word	0x08018738
 8010a10:	0801093d 	.word	0x0801093d

08010a14 <__sfp>:
 8010a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a16:	4607      	mov	r7, r0
 8010a18:	f7ff ffac 	bl	8010974 <__sfp_lock_acquire>
 8010a1c:	4b1e      	ldr	r3, [pc, #120]	; (8010a98 <__sfp+0x84>)
 8010a1e:	681e      	ldr	r6, [r3, #0]
 8010a20:	69b3      	ldr	r3, [r6, #24]
 8010a22:	b913      	cbnz	r3, 8010a2a <__sfp+0x16>
 8010a24:	4630      	mov	r0, r6
 8010a26:	f7ff ffbd 	bl	80109a4 <__sinit>
 8010a2a:	3648      	adds	r6, #72	; 0x48
 8010a2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010a30:	3b01      	subs	r3, #1
 8010a32:	d503      	bpl.n	8010a3c <__sfp+0x28>
 8010a34:	6833      	ldr	r3, [r6, #0]
 8010a36:	b30b      	cbz	r3, 8010a7c <__sfp+0x68>
 8010a38:	6836      	ldr	r6, [r6, #0]
 8010a3a:	e7f7      	b.n	8010a2c <__sfp+0x18>
 8010a3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010a40:	b9d5      	cbnz	r5, 8010a78 <__sfp+0x64>
 8010a42:	4b16      	ldr	r3, [pc, #88]	; (8010a9c <__sfp+0x88>)
 8010a44:	60e3      	str	r3, [r4, #12]
 8010a46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010a4a:	6665      	str	r5, [r4, #100]	; 0x64
 8010a4c:	f000 f988 	bl	8010d60 <__retarget_lock_init_recursive>
 8010a50:	f7ff ff96 	bl	8010980 <__sfp_lock_release>
 8010a54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010a58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010a5c:	6025      	str	r5, [r4, #0]
 8010a5e:	61a5      	str	r5, [r4, #24]
 8010a60:	2208      	movs	r2, #8
 8010a62:	4629      	mov	r1, r5
 8010a64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010a68:	f000 f9b8 	bl	8010ddc <memset>
 8010a6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010a70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010a74:	4620      	mov	r0, r4
 8010a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a78:	3468      	adds	r4, #104	; 0x68
 8010a7a:	e7d9      	b.n	8010a30 <__sfp+0x1c>
 8010a7c:	2104      	movs	r1, #4
 8010a7e:	4638      	mov	r0, r7
 8010a80:	f7ff ff62 	bl	8010948 <__sfmoreglue>
 8010a84:	4604      	mov	r4, r0
 8010a86:	6030      	str	r0, [r6, #0]
 8010a88:	2800      	cmp	r0, #0
 8010a8a:	d1d5      	bne.n	8010a38 <__sfp+0x24>
 8010a8c:	f7ff ff78 	bl	8010980 <__sfp_lock_release>
 8010a90:	230c      	movs	r3, #12
 8010a92:	603b      	str	r3, [r7, #0]
 8010a94:	e7ee      	b.n	8010a74 <__sfp+0x60>
 8010a96:	bf00      	nop
 8010a98:	08018738 	.word	0x08018738
 8010a9c:	ffff0001 	.word	0xffff0001

08010aa0 <_fwalk_reent>:
 8010aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010aa4:	4606      	mov	r6, r0
 8010aa6:	4688      	mov	r8, r1
 8010aa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010aac:	2700      	movs	r7, #0
 8010aae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010ab2:	f1b9 0901 	subs.w	r9, r9, #1
 8010ab6:	d505      	bpl.n	8010ac4 <_fwalk_reent+0x24>
 8010ab8:	6824      	ldr	r4, [r4, #0]
 8010aba:	2c00      	cmp	r4, #0
 8010abc:	d1f7      	bne.n	8010aae <_fwalk_reent+0xe>
 8010abe:	4638      	mov	r0, r7
 8010ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ac4:	89ab      	ldrh	r3, [r5, #12]
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d907      	bls.n	8010ada <_fwalk_reent+0x3a>
 8010aca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ace:	3301      	adds	r3, #1
 8010ad0:	d003      	beq.n	8010ada <_fwalk_reent+0x3a>
 8010ad2:	4629      	mov	r1, r5
 8010ad4:	4630      	mov	r0, r6
 8010ad6:	47c0      	blx	r8
 8010ad8:	4307      	orrs	r7, r0
 8010ada:	3568      	adds	r5, #104	; 0x68
 8010adc:	e7e9      	b.n	8010ab2 <_fwalk_reent+0x12>
	...

08010ae0 <__libc_init_array>:
 8010ae0:	b570      	push	{r4, r5, r6, lr}
 8010ae2:	4d0d      	ldr	r5, [pc, #52]	; (8010b18 <__libc_init_array+0x38>)
 8010ae4:	4c0d      	ldr	r4, [pc, #52]	; (8010b1c <__libc_init_array+0x3c>)
 8010ae6:	1b64      	subs	r4, r4, r5
 8010ae8:	10a4      	asrs	r4, r4, #2
 8010aea:	2600      	movs	r6, #0
 8010aec:	42a6      	cmp	r6, r4
 8010aee:	d109      	bne.n	8010b04 <__libc_init_array+0x24>
 8010af0:	4d0b      	ldr	r5, [pc, #44]	; (8010b20 <__libc_init_array+0x40>)
 8010af2:	4c0c      	ldr	r4, [pc, #48]	; (8010b24 <__libc_init_array+0x44>)
 8010af4:	f005 ff80 	bl	80169f8 <_init>
 8010af8:	1b64      	subs	r4, r4, r5
 8010afa:	10a4      	asrs	r4, r4, #2
 8010afc:	2600      	movs	r6, #0
 8010afe:	42a6      	cmp	r6, r4
 8010b00:	d105      	bne.n	8010b0e <__libc_init_array+0x2e>
 8010b02:	bd70      	pop	{r4, r5, r6, pc}
 8010b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b08:	4798      	blx	r3
 8010b0a:	3601      	adds	r6, #1
 8010b0c:	e7ee      	b.n	8010aec <__libc_init_array+0xc>
 8010b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b12:	4798      	blx	r3
 8010b14:	3601      	adds	r6, #1
 8010b16:	e7f2      	b.n	8010afe <__libc_init_array+0x1e>
 8010b18:	08018d08 	.word	0x08018d08
 8010b1c:	08018d08 	.word	0x08018d08
 8010b20:	08018d08 	.word	0x08018d08
 8010b24:	08018d10 	.word	0x08018d10

08010b28 <isxdigit>:
 8010b28:	4b02      	ldr	r3, [pc, #8]	; (8010b34 <isxdigit+0xc>)
 8010b2a:	4418      	add	r0, r3
 8010b2c:	7840      	ldrb	r0, [r0, #1]
 8010b2e:	f000 0044 	and.w	r0, r0, #68	; 0x44
 8010b32:	4770      	bx	lr
 8010b34:	08018978 	.word	0x08018978

08010b38 <localtime>:
 8010b38:	b538      	push	{r3, r4, r5, lr}
 8010b3a:	4b0b      	ldr	r3, [pc, #44]	; (8010b68 <localtime+0x30>)
 8010b3c:	681d      	ldr	r5, [r3, #0]
 8010b3e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8010b40:	4604      	mov	r4, r0
 8010b42:	b953      	cbnz	r3, 8010b5a <localtime+0x22>
 8010b44:	2024      	movs	r0, #36	; 0x24
 8010b46:	f000 f911 	bl	8010d6c <malloc>
 8010b4a:	4602      	mov	r2, r0
 8010b4c:	63e8      	str	r0, [r5, #60]	; 0x3c
 8010b4e:	b920      	cbnz	r0, 8010b5a <localtime+0x22>
 8010b50:	4b06      	ldr	r3, [pc, #24]	; (8010b6c <localtime+0x34>)
 8010b52:	4807      	ldr	r0, [pc, #28]	; (8010b70 <localtime+0x38>)
 8010b54:	2132      	movs	r1, #50	; 0x32
 8010b56:	f002 ff2d 	bl	80139b4 <__assert_func>
 8010b5a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b62:	f000 b807 	b.w	8010b74 <localtime_r>
 8010b66:	bf00      	nop
 8010b68:	20000040 	.word	0x20000040
 8010b6c:	0801873c 	.word	0x0801873c
 8010b70:	08018753 	.word	0x08018753

08010b74 <localtime_r>:
 8010b74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010b78:	4607      	mov	r7, r0
 8010b7a:	9101      	str	r1, [sp, #4]
 8010b7c:	f004 fa5a 	bl	8015034 <__gettzinfo>
 8010b80:	9901      	ldr	r1, [sp, #4]
 8010b82:	4680      	mov	r8, r0
 8010b84:	4638      	mov	r0, r7
 8010b86:	f004 fa59 	bl	801503c <gmtime_r>
 8010b8a:	6943      	ldr	r3, [r0, #20]
 8010b8c:	079a      	lsls	r2, r3, #30
 8010b8e:	4604      	mov	r4, r0
 8010b90:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8010b94:	d105      	bne.n	8010ba2 <localtime_r+0x2e>
 8010b96:	2264      	movs	r2, #100	; 0x64
 8010b98:	fb96 f3f2 	sdiv	r3, r6, r2
 8010b9c:	fb02 6313 	mls	r3, r2, r3, r6
 8010ba0:	bb7b      	cbnz	r3, 8010c02 <localtime_r+0x8e>
 8010ba2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8010ba6:	fb96 f5f3 	sdiv	r5, r6, r3
 8010baa:	fb03 6515 	mls	r5, r3, r5, r6
 8010bae:	fab5 f585 	clz	r5, r5
 8010bb2:	096d      	lsrs	r5, r5, #5
 8010bb4:	4b68      	ldr	r3, [pc, #416]	; (8010d58 <localtime_r+0x1e4>)
 8010bb6:	2230      	movs	r2, #48	; 0x30
 8010bb8:	fb02 3505 	mla	r5, r2, r5, r3
 8010bbc:	f002 fc9a 	bl	80134f4 <__tz_lock>
 8010bc0:	f002 fca4 	bl	801350c <_tzset_unlocked>
 8010bc4:	4b65      	ldr	r3, [pc, #404]	; (8010d5c <localtime_r+0x1e8>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	b353      	cbz	r3, 8010c20 <localtime_r+0xac>
 8010bca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010bce:	42b3      	cmp	r3, r6
 8010bd0:	d119      	bne.n	8010c06 <localtime_r+0x92>
 8010bd2:	f8d8 1000 	ldr.w	r1, [r8]
 8010bd6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8010bda:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8010bde:	b9d1      	cbnz	r1, 8010c16 <localtime_r+0xa2>
 8010be0:	4296      	cmp	r6, r2
 8010be2:	eb77 0303 	sbcs.w	r3, r7, r3
 8010be6:	da23      	bge.n	8010c30 <localtime_r+0xbc>
 8010be8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8010bec:	4296      	cmp	r6, r2
 8010bee:	eb77 0303 	sbcs.w	r3, r7, r3
 8010bf2:	bfb4      	ite	lt
 8010bf4:	2301      	movlt	r3, #1
 8010bf6:	2300      	movge	r3, #0
 8010bf8:	6223      	str	r3, [r4, #32]
 8010bfa:	db1b      	blt.n	8010c34 <localtime_r+0xc0>
 8010bfc:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8010c00:	e01a      	b.n	8010c38 <localtime_r+0xc4>
 8010c02:	2501      	movs	r5, #1
 8010c04:	e7d6      	b.n	8010bb4 <localtime_r+0x40>
 8010c06:	4630      	mov	r0, r6
 8010c08:	f002 fbcc 	bl	80133a4 <__tzcalc_limits>
 8010c0c:	2800      	cmp	r0, #0
 8010c0e:	d1e0      	bne.n	8010bd2 <localtime_r+0x5e>
 8010c10:	f04f 33ff 	mov.w	r3, #4294967295
 8010c14:	e004      	b.n	8010c20 <localtime_r+0xac>
 8010c16:	4296      	cmp	r6, r2
 8010c18:	eb77 0303 	sbcs.w	r3, r7, r3
 8010c1c:	da02      	bge.n	8010c24 <localtime_r+0xb0>
 8010c1e:	2300      	movs	r3, #0
 8010c20:	6223      	str	r3, [r4, #32]
 8010c22:	e7eb      	b.n	8010bfc <localtime_r+0x88>
 8010c24:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8010c28:	4296      	cmp	r6, r2
 8010c2a:	eb77 0303 	sbcs.w	r3, r7, r3
 8010c2e:	daf6      	bge.n	8010c1e <localtime_r+0xaa>
 8010c30:	2301      	movs	r3, #1
 8010c32:	6223      	str	r3, [r4, #32]
 8010c34:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8010c38:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8010c3c:	203c      	movs	r0, #60	; 0x3c
 8010c3e:	fb91 f6f3 	sdiv	r6, r1, r3
 8010c42:	fb03 1316 	mls	r3, r3, r6, r1
 8010c46:	6861      	ldr	r1, [r4, #4]
 8010c48:	fb93 f2f0 	sdiv	r2, r3, r0
 8010c4c:	fb00 3012 	mls	r0, r0, r2, r3
 8010c50:	6823      	ldr	r3, [r4, #0]
 8010c52:	1a89      	subs	r1, r1, r2
 8010c54:	68a2      	ldr	r2, [r4, #8]
 8010c56:	6061      	str	r1, [r4, #4]
 8010c58:	1a1b      	subs	r3, r3, r0
 8010c5a:	1b92      	subs	r2, r2, r6
 8010c5c:	2b3b      	cmp	r3, #59	; 0x3b
 8010c5e:	6023      	str	r3, [r4, #0]
 8010c60:	60a2      	str	r2, [r4, #8]
 8010c62:	dd35      	ble.n	8010cd0 <localtime_r+0x15c>
 8010c64:	3101      	adds	r1, #1
 8010c66:	6061      	str	r1, [r4, #4]
 8010c68:	3b3c      	subs	r3, #60	; 0x3c
 8010c6a:	6023      	str	r3, [r4, #0]
 8010c6c:	6863      	ldr	r3, [r4, #4]
 8010c6e:	2b3b      	cmp	r3, #59	; 0x3b
 8010c70:	dd34      	ble.n	8010cdc <localtime_r+0x168>
 8010c72:	3201      	adds	r2, #1
 8010c74:	60a2      	str	r2, [r4, #8]
 8010c76:	3b3c      	subs	r3, #60	; 0x3c
 8010c78:	6063      	str	r3, [r4, #4]
 8010c7a:	68a3      	ldr	r3, [r4, #8]
 8010c7c:	2b17      	cmp	r3, #23
 8010c7e:	dd33      	ble.n	8010ce8 <localtime_r+0x174>
 8010c80:	69e2      	ldr	r2, [r4, #28]
 8010c82:	3201      	adds	r2, #1
 8010c84:	61e2      	str	r2, [r4, #28]
 8010c86:	69a2      	ldr	r2, [r4, #24]
 8010c88:	3201      	adds	r2, #1
 8010c8a:	2a06      	cmp	r2, #6
 8010c8c:	bfc8      	it	gt
 8010c8e:	2200      	movgt	r2, #0
 8010c90:	61a2      	str	r2, [r4, #24]
 8010c92:	68e2      	ldr	r2, [r4, #12]
 8010c94:	3b18      	subs	r3, #24
 8010c96:	3201      	adds	r2, #1
 8010c98:	60a3      	str	r3, [r4, #8]
 8010c9a:	6923      	ldr	r3, [r4, #16]
 8010c9c:	60e2      	str	r2, [r4, #12]
 8010c9e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8010ca2:	428a      	cmp	r2, r1
 8010ca4:	dd0e      	ble.n	8010cc4 <localtime_r+0x150>
 8010ca6:	2b0b      	cmp	r3, #11
 8010ca8:	eba2 0201 	sub.w	r2, r2, r1
 8010cac:	60e2      	str	r2, [r4, #12]
 8010cae:	f103 0201 	add.w	r2, r3, #1
 8010cb2:	bf09      	itett	eq
 8010cb4:	6963      	ldreq	r3, [r4, #20]
 8010cb6:	6122      	strne	r2, [r4, #16]
 8010cb8:	2200      	moveq	r2, #0
 8010cba:	3301      	addeq	r3, #1
 8010cbc:	bf02      	ittt	eq
 8010cbe:	6122      	streq	r2, [r4, #16]
 8010cc0:	6163      	streq	r3, [r4, #20]
 8010cc2:	61e2      	streq	r2, [r4, #28]
 8010cc4:	f002 fc1c 	bl	8013500 <__tz_unlock>
 8010cc8:	4620      	mov	r0, r4
 8010cca:	b002      	add	sp, #8
 8010ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	dacb      	bge.n	8010c6c <localtime_r+0xf8>
 8010cd4:	3901      	subs	r1, #1
 8010cd6:	6061      	str	r1, [r4, #4]
 8010cd8:	333c      	adds	r3, #60	; 0x3c
 8010cda:	e7c6      	b.n	8010c6a <localtime_r+0xf6>
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	dacc      	bge.n	8010c7a <localtime_r+0x106>
 8010ce0:	3a01      	subs	r2, #1
 8010ce2:	60a2      	str	r2, [r4, #8]
 8010ce4:	333c      	adds	r3, #60	; 0x3c
 8010ce6:	e7c7      	b.n	8010c78 <localtime_r+0x104>
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	daeb      	bge.n	8010cc4 <localtime_r+0x150>
 8010cec:	69e2      	ldr	r2, [r4, #28]
 8010cee:	3a01      	subs	r2, #1
 8010cf0:	61e2      	str	r2, [r4, #28]
 8010cf2:	69a2      	ldr	r2, [r4, #24]
 8010cf4:	3a01      	subs	r2, #1
 8010cf6:	bf48      	it	mi
 8010cf8:	2206      	movmi	r2, #6
 8010cfa:	61a2      	str	r2, [r4, #24]
 8010cfc:	68e2      	ldr	r2, [r4, #12]
 8010cfe:	3318      	adds	r3, #24
 8010d00:	3a01      	subs	r2, #1
 8010d02:	60e2      	str	r2, [r4, #12]
 8010d04:	60a3      	str	r3, [r4, #8]
 8010d06:	2a00      	cmp	r2, #0
 8010d08:	d1dc      	bne.n	8010cc4 <localtime_r+0x150>
 8010d0a:	6923      	ldr	r3, [r4, #16]
 8010d0c:	3b01      	subs	r3, #1
 8010d0e:	d405      	bmi.n	8010d1c <localtime_r+0x1a8>
 8010d10:	6123      	str	r3, [r4, #16]
 8010d12:	6923      	ldr	r3, [r4, #16]
 8010d14:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8010d18:	60e3      	str	r3, [r4, #12]
 8010d1a:	e7d3      	b.n	8010cc4 <localtime_r+0x150>
 8010d1c:	230b      	movs	r3, #11
 8010d1e:	6123      	str	r3, [r4, #16]
 8010d20:	6963      	ldr	r3, [r4, #20]
 8010d22:	1e5a      	subs	r2, r3, #1
 8010d24:	6162      	str	r2, [r4, #20]
 8010d26:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8010d2a:	0793      	lsls	r3, r2, #30
 8010d2c:	d105      	bne.n	8010d3a <localtime_r+0x1c6>
 8010d2e:	2164      	movs	r1, #100	; 0x64
 8010d30:	fb92 f3f1 	sdiv	r3, r2, r1
 8010d34:	fb01 2313 	mls	r3, r1, r3, r2
 8010d38:	b963      	cbnz	r3, 8010d54 <localtime_r+0x1e0>
 8010d3a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8010d3e:	fb92 f3f1 	sdiv	r3, r2, r1
 8010d42:	fb01 2313 	mls	r3, r1, r3, r2
 8010d46:	fab3 f383 	clz	r3, r3
 8010d4a:	095b      	lsrs	r3, r3, #5
 8010d4c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8010d50:	61e3      	str	r3, [r4, #28]
 8010d52:	e7de      	b.n	8010d12 <localtime_r+0x19e>
 8010d54:	2301      	movs	r3, #1
 8010d56:	e7f9      	b.n	8010d4c <localtime_r+0x1d8>
 8010d58:	08018814 	.word	0x08018814
 8010d5c:	20005a24 	.word	0x20005a24

08010d60 <__retarget_lock_init_recursive>:
 8010d60:	4770      	bx	lr

08010d62 <__retarget_lock_acquire>:
 8010d62:	4770      	bx	lr

08010d64 <__retarget_lock_acquire_recursive>:
 8010d64:	4770      	bx	lr

08010d66 <__retarget_lock_release>:
 8010d66:	4770      	bx	lr

08010d68 <__retarget_lock_release_recursive>:
 8010d68:	4770      	bx	lr
	...

08010d6c <malloc>:
 8010d6c:	4b02      	ldr	r3, [pc, #8]	; (8010d78 <malloc+0xc>)
 8010d6e:	4601      	mov	r1, r0
 8010d70:	6818      	ldr	r0, [r3, #0]
 8010d72:	f000 bb09 	b.w	8011388 <_malloc_r>
 8010d76:	bf00      	nop
 8010d78:	20000040 	.word	0x20000040

08010d7c <free>:
 8010d7c:	4b02      	ldr	r3, [pc, #8]	; (8010d88 <free+0xc>)
 8010d7e:	4601      	mov	r1, r0
 8010d80:	6818      	ldr	r0, [r3, #0]
 8010d82:	f000 bab1 	b.w	80112e8 <_free_r>
 8010d86:	bf00      	nop
 8010d88:	20000040 	.word	0x20000040

08010d8c <memcpy>:
 8010d8c:	440a      	add	r2, r1
 8010d8e:	4291      	cmp	r1, r2
 8010d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d94:	d100      	bne.n	8010d98 <memcpy+0xc>
 8010d96:	4770      	bx	lr
 8010d98:	b510      	push	{r4, lr}
 8010d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010da2:	4291      	cmp	r1, r2
 8010da4:	d1f9      	bne.n	8010d9a <memcpy+0xe>
 8010da6:	bd10      	pop	{r4, pc}

08010da8 <memmove>:
 8010da8:	4288      	cmp	r0, r1
 8010daa:	b510      	push	{r4, lr}
 8010dac:	eb01 0402 	add.w	r4, r1, r2
 8010db0:	d902      	bls.n	8010db8 <memmove+0x10>
 8010db2:	4284      	cmp	r4, r0
 8010db4:	4623      	mov	r3, r4
 8010db6:	d807      	bhi.n	8010dc8 <memmove+0x20>
 8010db8:	1e43      	subs	r3, r0, #1
 8010dba:	42a1      	cmp	r1, r4
 8010dbc:	d008      	beq.n	8010dd0 <memmove+0x28>
 8010dbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010dc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010dc6:	e7f8      	b.n	8010dba <memmove+0x12>
 8010dc8:	4402      	add	r2, r0
 8010dca:	4601      	mov	r1, r0
 8010dcc:	428a      	cmp	r2, r1
 8010dce:	d100      	bne.n	8010dd2 <memmove+0x2a>
 8010dd0:	bd10      	pop	{r4, pc}
 8010dd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010dd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010dda:	e7f7      	b.n	8010dcc <memmove+0x24>

08010ddc <memset>:
 8010ddc:	4402      	add	r2, r0
 8010dde:	4603      	mov	r3, r0
 8010de0:	4293      	cmp	r3, r2
 8010de2:	d100      	bne.n	8010de6 <memset+0xa>
 8010de4:	4770      	bx	lr
 8010de6:	f803 1b01 	strb.w	r1, [r3], #1
 8010dea:	e7f9      	b.n	8010de0 <memset+0x4>

08010dec <validate_structure>:
 8010dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010dee:	6801      	ldr	r1, [r0, #0]
 8010df0:	293b      	cmp	r1, #59	; 0x3b
 8010df2:	4604      	mov	r4, r0
 8010df4:	d911      	bls.n	8010e1a <validate_structure+0x2e>
 8010df6:	223c      	movs	r2, #60	; 0x3c
 8010df8:	4668      	mov	r0, sp
 8010dfa:	f002 fe09 	bl	8013a10 <div>
 8010dfe:	9a01      	ldr	r2, [sp, #4]
 8010e00:	6863      	ldr	r3, [r4, #4]
 8010e02:	9900      	ldr	r1, [sp, #0]
 8010e04:	2a00      	cmp	r2, #0
 8010e06:	440b      	add	r3, r1
 8010e08:	6063      	str	r3, [r4, #4]
 8010e0a:	bfbb      	ittet	lt
 8010e0c:	323c      	addlt	r2, #60	; 0x3c
 8010e0e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010e12:	6022      	strge	r2, [r4, #0]
 8010e14:	6022      	strlt	r2, [r4, #0]
 8010e16:	bfb8      	it	lt
 8010e18:	6063      	strlt	r3, [r4, #4]
 8010e1a:	6861      	ldr	r1, [r4, #4]
 8010e1c:	293b      	cmp	r1, #59	; 0x3b
 8010e1e:	d911      	bls.n	8010e44 <validate_structure+0x58>
 8010e20:	223c      	movs	r2, #60	; 0x3c
 8010e22:	4668      	mov	r0, sp
 8010e24:	f002 fdf4 	bl	8013a10 <div>
 8010e28:	9a01      	ldr	r2, [sp, #4]
 8010e2a:	68a3      	ldr	r3, [r4, #8]
 8010e2c:	9900      	ldr	r1, [sp, #0]
 8010e2e:	2a00      	cmp	r2, #0
 8010e30:	440b      	add	r3, r1
 8010e32:	60a3      	str	r3, [r4, #8]
 8010e34:	bfbb      	ittet	lt
 8010e36:	323c      	addlt	r2, #60	; 0x3c
 8010e38:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010e3c:	6062      	strge	r2, [r4, #4]
 8010e3e:	6062      	strlt	r2, [r4, #4]
 8010e40:	bfb8      	it	lt
 8010e42:	60a3      	strlt	r3, [r4, #8]
 8010e44:	68a1      	ldr	r1, [r4, #8]
 8010e46:	2917      	cmp	r1, #23
 8010e48:	d911      	bls.n	8010e6e <validate_structure+0x82>
 8010e4a:	2218      	movs	r2, #24
 8010e4c:	4668      	mov	r0, sp
 8010e4e:	f002 fddf 	bl	8013a10 <div>
 8010e52:	9a01      	ldr	r2, [sp, #4]
 8010e54:	68e3      	ldr	r3, [r4, #12]
 8010e56:	9900      	ldr	r1, [sp, #0]
 8010e58:	2a00      	cmp	r2, #0
 8010e5a:	440b      	add	r3, r1
 8010e5c:	60e3      	str	r3, [r4, #12]
 8010e5e:	bfbb      	ittet	lt
 8010e60:	3218      	addlt	r2, #24
 8010e62:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010e66:	60a2      	strge	r2, [r4, #8]
 8010e68:	60a2      	strlt	r2, [r4, #8]
 8010e6a:	bfb8      	it	lt
 8010e6c:	60e3      	strlt	r3, [r4, #12]
 8010e6e:	6921      	ldr	r1, [r4, #16]
 8010e70:	290b      	cmp	r1, #11
 8010e72:	d911      	bls.n	8010e98 <validate_structure+0xac>
 8010e74:	220c      	movs	r2, #12
 8010e76:	4668      	mov	r0, sp
 8010e78:	f002 fdca 	bl	8013a10 <div>
 8010e7c:	9a01      	ldr	r2, [sp, #4]
 8010e7e:	6963      	ldr	r3, [r4, #20]
 8010e80:	9900      	ldr	r1, [sp, #0]
 8010e82:	2a00      	cmp	r2, #0
 8010e84:	440b      	add	r3, r1
 8010e86:	6163      	str	r3, [r4, #20]
 8010e88:	bfbb      	ittet	lt
 8010e8a:	320c      	addlt	r2, #12
 8010e8c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010e90:	6122      	strge	r2, [r4, #16]
 8010e92:	6122      	strlt	r2, [r4, #16]
 8010e94:	bfb8      	it	lt
 8010e96:	6163      	strlt	r3, [r4, #20]
 8010e98:	6963      	ldr	r3, [r4, #20]
 8010e9a:	0799      	lsls	r1, r3, #30
 8010e9c:	d120      	bne.n	8010ee0 <validate_structure+0xf4>
 8010e9e:	2164      	movs	r1, #100	; 0x64
 8010ea0:	fb93 f2f1 	sdiv	r2, r3, r1
 8010ea4:	fb01 3212 	mls	r2, r1, r2, r3
 8010ea8:	b9e2      	cbnz	r2, 8010ee4 <validate_structure+0xf8>
 8010eaa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8010eae:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8010eb2:	fb93 f2f1 	sdiv	r2, r3, r1
 8010eb6:	fb01 3312 	mls	r3, r1, r2, r3
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	bf14      	ite	ne
 8010ebe:	231c      	movne	r3, #28
 8010ec0:	231d      	moveq	r3, #29
 8010ec2:	68e2      	ldr	r2, [r4, #12]
 8010ec4:	2a00      	cmp	r2, #0
 8010ec6:	dc0f      	bgt.n	8010ee8 <validate_structure+0xfc>
 8010ec8:	4f33      	ldr	r7, [pc, #204]	; (8010f98 <validate_structure+0x1ac>)
 8010eca:	260b      	movs	r6, #11
 8010ecc:	2064      	movs	r0, #100	; 0x64
 8010ece:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8010ed2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8010ed6:	f1bc 0f00 	cmp.w	ip, #0
 8010eda:	dd31      	ble.n	8010f40 <validate_structure+0x154>
 8010edc:	b003      	add	sp, #12
 8010ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ee0:	231c      	movs	r3, #28
 8010ee2:	e7ee      	b.n	8010ec2 <validate_structure+0xd6>
 8010ee4:	231d      	movs	r3, #29
 8010ee6:	e7ec      	b.n	8010ec2 <validate_structure+0xd6>
 8010ee8:	4f2b      	ldr	r7, [pc, #172]	; (8010f98 <validate_structure+0x1ac>)
 8010eea:	f04f 0c00 	mov.w	ip, #0
 8010eee:	2564      	movs	r5, #100	; 0x64
 8010ef0:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8010ef4:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8010ef8:	2a01      	cmp	r2, #1
 8010efa:	bf14      	ite	ne
 8010efc:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 8010f00:	4618      	moveq	r0, r3
 8010f02:	4281      	cmp	r1, r0
 8010f04:	ddea      	ble.n	8010edc <validate_structure+0xf0>
 8010f06:	3201      	adds	r2, #1
 8010f08:	1a09      	subs	r1, r1, r0
 8010f0a:	2a0c      	cmp	r2, #12
 8010f0c:	60e1      	str	r1, [r4, #12]
 8010f0e:	6122      	str	r2, [r4, #16]
 8010f10:	d1f0      	bne.n	8010ef4 <validate_structure+0x108>
 8010f12:	6963      	ldr	r3, [r4, #20]
 8010f14:	1c5a      	adds	r2, r3, #1
 8010f16:	0791      	lsls	r1, r2, #30
 8010f18:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8010f1c:	d137      	bne.n	8010f8e <validate_structure+0x1a2>
 8010f1e:	fb92 f1f5 	sdiv	r1, r2, r5
 8010f22:	fb05 2211 	mls	r2, r5, r1, r2
 8010f26:	2a00      	cmp	r2, #0
 8010f28:	d133      	bne.n	8010f92 <validate_structure+0x1a6>
 8010f2a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8010f2e:	fb93 f2f6 	sdiv	r2, r3, r6
 8010f32:	fb06 3312 	mls	r3, r6, r2, r3
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	bf14      	ite	ne
 8010f3a:	231c      	movne	r3, #28
 8010f3c:	231d      	moveq	r3, #29
 8010f3e:	e7d9      	b.n	8010ef4 <validate_structure+0x108>
 8010f40:	6921      	ldr	r1, [r4, #16]
 8010f42:	3901      	subs	r1, #1
 8010f44:	6121      	str	r1, [r4, #16]
 8010f46:	3101      	adds	r1, #1
 8010f48:	d114      	bne.n	8010f74 <validate_structure+0x188>
 8010f4a:	6963      	ldr	r3, [r4, #20]
 8010f4c:	1e59      	subs	r1, r3, #1
 8010f4e:	078a      	lsls	r2, r1, #30
 8010f50:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8010f54:	d117      	bne.n	8010f86 <validate_structure+0x19a>
 8010f56:	fb91 f2f0 	sdiv	r2, r1, r0
 8010f5a:	fb00 1112 	mls	r1, r0, r2, r1
 8010f5e:	b9a1      	cbnz	r1, 8010f8a <validate_structure+0x19e>
 8010f60:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8010f64:	fb93 f2f5 	sdiv	r2, r3, r5
 8010f68:	fb05 3312 	mls	r3, r5, r2, r3
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	bf14      	ite	ne
 8010f70:	231c      	movne	r3, #28
 8010f72:	231d      	moveq	r3, #29
 8010f74:	6922      	ldr	r2, [r4, #16]
 8010f76:	2a01      	cmp	r2, #1
 8010f78:	bf14      	ite	ne
 8010f7a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8010f7e:	461a      	moveq	r2, r3
 8010f80:	4462      	add	r2, ip
 8010f82:	60e2      	str	r2, [r4, #12]
 8010f84:	e7a5      	b.n	8010ed2 <validate_structure+0xe6>
 8010f86:	231c      	movs	r3, #28
 8010f88:	e7f4      	b.n	8010f74 <validate_structure+0x188>
 8010f8a:	231d      	movs	r3, #29
 8010f8c:	e7f2      	b.n	8010f74 <validate_structure+0x188>
 8010f8e:	231c      	movs	r3, #28
 8010f90:	e7b0      	b.n	8010ef4 <validate_structure+0x108>
 8010f92:	231d      	movs	r3, #29
 8010f94:	e7ae      	b.n	8010ef4 <validate_structure+0x108>
 8010f96:	bf00      	nop
 8010f98:	080187b4 	.word	0x080187b4

08010f9c <mktime>:
 8010f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa0:	b08b      	sub	sp, #44	; 0x2c
 8010fa2:	4605      	mov	r5, r0
 8010fa4:	f004 f846 	bl	8015034 <__gettzinfo>
 8010fa8:	4607      	mov	r7, r0
 8010faa:	4628      	mov	r0, r5
 8010fac:	f7ff ff1e 	bl	8010dec <validate_structure>
 8010fb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010fb4:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8010fb8:	68a8      	ldr	r0, [r5, #8]
 8010fba:	696e      	ldr	r6, [r5, #20]
 8010fbc:	fb0a 2303 	mla	r3, sl, r3, r2
 8010fc0:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 8010fc4:	fb0a 3a00 	mla	sl, sl, r0, r3
 8010fc8:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 8010fcc:	4ac3      	ldr	r2, [pc, #780]	; (80112dc <mktime+0x340>)
 8010fce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010fd2:	3c01      	subs	r4, #1
 8010fd4:	2b01      	cmp	r3, #1
 8010fd6:	4414      	add	r4, r2
 8010fd8:	dd11      	ble.n	8010ffe <mktime+0x62>
 8010fda:	07b1      	lsls	r1, r6, #30
 8010fdc:	d10f      	bne.n	8010ffe <mktime+0x62>
 8010fde:	2264      	movs	r2, #100	; 0x64
 8010fe0:	fb96 f3f2 	sdiv	r3, r6, r2
 8010fe4:	fb02 6313 	mls	r3, r2, r3, r6
 8010fe8:	b943      	cbnz	r3, 8010ffc <mktime+0x60>
 8010fea:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8010fee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010ff2:	fb91 f3f2 	sdiv	r3, r1, r2
 8010ff6:	fb02 1313 	mls	r3, r2, r3, r1
 8010ffa:	b903      	cbnz	r3, 8010ffe <mktime+0x62>
 8010ffc:	3401      	adds	r4, #1
 8010ffe:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8011002:	3310      	adds	r3, #16
 8011004:	f644 6220 	movw	r2, #20000	; 0x4e20
 8011008:	4293      	cmp	r3, r2
 801100a:	61ec      	str	r4, [r5, #28]
 801100c:	f200 8161 	bhi.w	80112d2 <mktime+0x336>
 8011010:	2e46      	cmp	r6, #70	; 0x46
 8011012:	dd77      	ble.n	8011104 <mktime+0x168>
 8011014:	2346      	movs	r3, #70	; 0x46
 8011016:	f240 1e6d 	movw	lr, #365	; 0x16d
 801101a:	2164      	movs	r1, #100	; 0x64
 801101c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8011020:	079a      	lsls	r2, r3, #30
 8011022:	d169      	bne.n	80110f8 <mktime+0x15c>
 8011024:	fb93 f2f1 	sdiv	r2, r3, r1
 8011028:	fb01 3212 	mls	r2, r1, r2, r3
 801102c:	2a00      	cmp	r2, #0
 801102e:	d166      	bne.n	80110fe <mktime+0x162>
 8011030:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8011034:	fb9c f2f0 	sdiv	r2, ip, r0
 8011038:	fb00 c212 	mls	r2, r0, r2, ip
 801103c:	2a00      	cmp	r2, #0
 801103e:	bf14      	ite	ne
 8011040:	4672      	movne	r2, lr
 8011042:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8011046:	3301      	adds	r3, #1
 8011048:	429e      	cmp	r6, r3
 801104a:	4414      	add	r4, r2
 801104c:	d1e8      	bne.n	8011020 <mktime+0x84>
 801104e:	4ba4      	ldr	r3, [pc, #656]	; (80112e0 <mktime+0x344>)
 8011050:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8011054:	fbc3 ab04 	smlal	sl, fp, r3, r4
 8011058:	f002 fa4c 	bl	80134f4 <__tz_lock>
 801105c:	f002 fa56 	bl	801350c <_tzset_unlocked>
 8011060:	4ba0      	ldr	r3, [pc, #640]	; (80112e4 <mktime+0x348>)
 8011062:	f8d3 9000 	ldr.w	r9, [r3]
 8011066:	f1b9 0f00 	cmp.w	r9, #0
 801106a:	d03f      	beq.n	80110ec <mktime+0x150>
 801106c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8011070:	6968      	ldr	r0, [r5, #20]
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f1b9 0f01 	cmp.w	r9, #1
 8011078:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801107c:	46c8      	mov	r8, r9
 801107e:	bfa8      	it	ge
 8011080:	f04f 0801 	movge.w	r8, #1
 8011084:	4283      	cmp	r3, r0
 8011086:	d17f      	bne.n	8011188 <mktime+0x1ec>
 8011088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801108a:	4619      	mov	r1, r3
 801108c:	17da      	asrs	r2, r3, #31
 801108e:	e9cd 1200 	strd	r1, r2, [sp]
 8011092:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8011096:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801109a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801109e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110a0:	1a80      	subs	r0, r0, r2
 80110a2:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 80110a6:	4582      	cmp	sl, r0
 80110a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80110ac:	eb7b 0101 	sbcs.w	r1, fp, r1
 80110b0:	da71      	bge.n	8011196 <mktime+0x1fa>
 80110b2:	9800      	ldr	r0, [sp, #0]
 80110b4:	6a39      	ldr	r1, [r7, #32]
 80110b6:	1a09      	subs	r1, r1, r0
 80110b8:	9104      	str	r1, [sp, #16]
 80110ba:	9801      	ldr	r0, [sp, #4]
 80110bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110be:	eb61 0100 	sbc.w	r1, r1, r0
 80110c2:	9105      	str	r1, [sp, #20]
 80110c4:	6839      	ldr	r1, [r7, #0]
 80110c6:	2900      	cmp	r1, #0
 80110c8:	d075      	beq.n	80111b6 <mktime+0x21a>
 80110ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80110ce:	4582      	cmp	sl, r0
 80110d0:	eb7b 0101 	sbcs.w	r1, fp, r1
 80110d4:	db05      	blt.n	80110e2 <mktime+0x146>
 80110d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80110da:	4582      	cmp	sl, r0
 80110dc:	eb7b 0101 	sbcs.w	r1, fp, r1
 80110e0:	db6f      	blt.n	80111c2 <mktime+0x226>
 80110e2:	f1b9 0f00 	cmp.w	r9, #0
 80110e6:	f04f 0900 	mov.w	r9, #0
 80110ea:	da6f      	bge.n	80111cc <mktime+0x230>
 80110ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ee:	eb1a 0a03 	adds.w	sl, sl, r3
 80110f2:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80110f6:	e0ae      	b.n	8011256 <mktime+0x2ba>
 80110f8:	f240 126d 	movw	r2, #365	; 0x16d
 80110fc:	e7a3      	b.n	8011046 <mktime+0xaa>
 80110fe:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8011102:	e7a0      	b.n	8011046 <mktime+0xaa>
 8011104:	d0a3      	beq.n	801104e <mktime+0xb2>
 8011106:	2345      	movs	r3, #69	; 0x45
 8011108:	f240 1e6d 	movw	lr, #365	; 0x16d
 801110c:	2164      	movs	r1, #100	; 0x64
 801110e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8011112:	e012      	b.n	801113a <mktime+0x19e>
 8011114:	bb62      	cbnz	r2, 8011170 <mktime+0x1d4>
 8011116:	fb93 f2f1 	sdiv	r2, r3, r1
 801111a:	fb01 3212 	mls	r2, r1, r2, r3
 801111e:	bb52      	cbnz	r2, 8011176 <mktime+0x1da>
 8011120:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8011124:	fb9c f2f0 	sdiv	r2, ip, r0
 8011128:	fb00 c212 	mls	r2, r0, r2, ip
 801112c:	2a00      	cmp	r2, #0
 801112e:	bf14      	ite	ne
 8011130:	4672      	movne	r2, lr
 8011132:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8011136:	1aa4      	subs	r4, r4, r2
 8011138:	3b01      	subs	r3, #1
 801113a:	429e      	cmp	r6, r3
 801113c:	f003 0203 	and.w	r2, r3, #3
 8011140:	dbe8      	blt.n	8011114 <mktime+0x178>
 8011142:	b9da      	cbnz	r2, 801117c <mktime+0x1e0>
 8011144:	2264      	movs	r2, #100	; 0x64
 8011146:	fb96 f3f2 	sdiv	r3, r6, r2
 801114a:	fb02 6313 	mls	r3, r2, r3, r6
 801114e:	b9c3      	cbnz	r3, 8011182 <mktime+0x1e6>
 8011150:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8011154:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011158:	fb91 f3f2 	sdiv	r3, r1, r2
 801115c:	fb02 1313 	mls	r3, r2, r3, r1
 8011160:	2b00      	cmp	r3, #0
 8011162:	f240 136d 	movw	r3, #365	; 0x16d
 8011166:	bf08      	it	eq
 8011168:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801116c:	1ae4      	subs	r4, r4, r3
 801116e:	e76e      	b.n	801104e <mktime+0xb2>
 8011170:	f240 126d 	movw	r2, #365	; 0x16d
 8011174:	e7df      	b.n	8011136 <mktime+0x19a>
 8011176:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801117a:	e7dc      	b.n	8011136 <mktime+0x19a>
 801117c:	f240 136d 	movw	r3, #365	; 0x16d
 8011180:	e7f4      	b.n	801116c <mktime+0x1d0>
 8011182:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8011186:	e7f1      	b.n	801116c <mktime+0x1d0>
 8011188:	f002 f90c 	bl	80133a4 <__tzcalc_limits>
 801118c:	2800      	cmp	r0, #0
 801118e:	f47f af7b 	bne.w	8011088 <mktime+0xec>
 8011192:	46c1      	mov	r9, r8
 8011194:	e054      	b.n	8011240 <mktime+0x2a4>
 8011196:	9800      	ldr	r0, [sp, #0]
 8011198:	9902      	ldr	r1, [sp, #8]
 801119a:	1a09      	subs	r1, r1, r0
 801119c:	9108      	str	r1, [sp, #32]
 801119e:	9801      	ldr	r0, [sp, #4]
 80111a0:	9903      	ldr	r1, [sp, #12]
 80111a2:	eb61 0100 	sbc.w	r1, r1, r0
 80111a6:	9109      	str	r1, [sp, #36]	; 0x24
 80111a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80111ac:	4582      	cmp	sl, r0
 80111ae:	eb7b 0101 	sbcs.w	r1, fp, r1
 80111b2:	dbee      	blt.n	8011192 <mktime+0x1f6>
 80111b4:	e77d      	b.n	80110b2 <mktime+0x116>
 80111b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80111ba:	4582      	cmp	sl, r0
 80111bc:	eb7b 0101 	sbcs.w	r1, fp, r1
 80111c0:	db89      	blt.n	80110d6 <mktime+0x13a>
 80111c2:	f1b9 0f00 	cmp.w	r9, #0
 80111c6:	db3f      	blt.n	8011248 <mktime+0x2ac>
 80111c8:	f04f 0901 	mov.w	r9, #1
 80111cc:	ea88 0809 	eor.w	r8, r8, r9
 80111d0:	f1b8 0f01 	cmp.w	r8, #1
 80111d4:	d134      	bne.n	8011240 <mktime+0x2a4>
 80111d6:	f1b9 0f00 	cmp.w	r9, #0
 80111da:	d04f      	beq.n	801127c <mktime+0x2e0>
 80111dc:	1ad3      	subs	r3, r2, r3
 80111de:	682a      	ldr	r2, [r5, #0]
 80111e0:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80111e4:	441a      	add	r2, r3
 80111e6:	eb1a 0a03 	adds.w	sl, sl, r3
 80111ea:	602a      	str	r2, [r5, #0]
 80111ec:	4628      	mov	r0, r5
 80111ee:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80111f2:	f7ff fdfb 	bl	8010dec <validate_structure>
 80111f6:	68ea      	ldr	r2, [r5, #12]
 80111f8:	ebb2 0208 	subs.w	r2, r2, r8
 80111fc:	d020      	beq.n	8011240 <mktime+0x2a4>
 80111fe:	2a01      	cmp	r2, #1
 8011200:	dc3e      	bgt.n	8011280 <mktime+0x2e4>
 8011202:	1c90      	adds	r0, r2, #2
 8011204:	bfd8      	it	le
 8011206:	2201      	movle	r2, #1
 8011208:	69eb      	ldr	r3, [r5, #28]
 801120a:	18d3      	adds	r3, r2, r3
 801120c:	4414      	add	r4, r2
 801120e:	d540      	bpl.n	8011292 <mktime+0x2f6>
 8011210:	1e72      	subs	r2, r6, #1
 8011212:	0791      	lsls	r1, r2, #30
 8011214:	d137      	bne.n	8011286 <mktime+0x2ea>
 8011216:	2164      	movs	r1, #100	; 0x64
 8011218:	fb92 f3f1 	sdiv	r3, r2, r1
 801121c:	fb01 2313 	mls	r3, r1, r3, r2
 8011220:	bba3      	cbnz	r3, 801128c <mktime+0x2f0>
 8011222:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8011226:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801122a:	fb96 f3f2 	sdiv	r3, r6, r2
 801122e:	fb02 6613 	mls	r6, r2, r3, r6
 8011232:	2e00      	cmp	r6, #0
 8011234:	f240 136d 	movw	r3, #365	; 0x16d
 8011238:	bf18      	it	ne
 801123a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801123e:	61eb      	str	r3, [r5, #28]
 8011240:	f1b9 0f01 	cmp.w	r9, #1
 8011244:	f47f af52 	bne.w	80110ec <mktime+0x150>
 8011248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801124a:	eb1a 0a03 	adds.w	sl, sl, r3
 801124e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8011252:	f04f 0901 	mov.w	r9, #1
 8011256:	f002 f953 	bl	8013500 <__tz_unlock>
 801125a:	3404      	adds	r4, #4
 801125c:	2307      	movs	r3, #7
 801125e:	fb94 f3f3 	sdiv	r3, r4, r3
 8011262:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8011266:	1ae4      	subs	r4, r4, r3
 8011268:	bf48      	it	mi
 801126a:	3407      	addmi	r4, #7
 801126c:	f8c5 9020 	str.w	r9, [r5, #32]
 8011270:	61ac      	str	r4, [r5, #24]
 8011272:	4650      	mov	r0, sl
 8011274:	4659      	mov	r1, fp
 8011276:	b00b      	add	sp, #44	; 0x2c
 8011278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801127c:	1a9b      	subs	r3, r3, r2
 801127e:	e7ae      	b.n	80111de <mktime+0x242>
 8011280:	f04f 32ff 	mov.w	r2, #4294967295
 8011284:	e7c0      	b.n	8011208 <mktime+0x26c>
 8011286:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801128a:	e7d8      	b.n	801123e <mktime+0x2a2>
 801128c:	f240 136d 	movw	r3, #365	; 0x16d
 8011290:	e7d5      	b.n	801123e <mktime+0x2a2>
 8011292:	07b2      	lsls	r2, r6, #30
 8011294:	d117      	bne.n	80112c6 <mktime+0x32a>
 8011296:	2164      	movs	r1, #100	; 0x64
 8011298:	fb96 f2f1 	sdiv	r2, r6, r1
 801129c:	fb01 6212 	mls	r2, r1, r2, r6
 80112a0:	b9a2      	cbnz	r2, 80112cc <mktime+0x330>
 80112a2:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80112a6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80112aa:	fb96 f2f1 	sdiv	r2, r6, r1
 80112ae:	fb01 6612 	mls	r6, r1, r2, r6
 80112b2:	2e00      	cmp	r6, #0
 80112b4:	f240 126d 	movw	r2, #365	; 0x16d
 80112b8:	bf08      	it	eq
 80112ba:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80112be:	4293      	cmp	r3, r2
 80112c0:	bfa8      	it	ge
 80112c2:	1a9b      	subge	r3, r3, r2
 80112c4:	e7bb      	b.n	801123e <mktime+0x2a2>
 80112c6:	f240 126d 	movw	r2, #365	; 0x16d
 80112ca:	e7f8      	b.n	80112be <mktime+0x322>
 80112cc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80112d0:	e7f5      	b.n	80112be <mktime+0x322>
 80112d2:	f04f 3aff 	mov.w	sl, #4294967295
 80112d6:	f04f 3bff 	mov.w	fp, #4294967295
 80112da:	e7ca      	b.n	8011272 <mktime+0x2d6>
 80112dc:	080187e4 	.word	0x080187e4
 80112e0:	00015180 	.word	0x00015180
 80112e4:	20005a24 	.word	0x20005a24

080112e8 <_free_r>:
 80112e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112ea:	2900      	cmp	r1, #0
 80112ec:	d048      	beq.n	8011380 <_free_r+0x98>
 80112ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112f2:	9001      	str	r0, [sp, #4]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	f1a1 0404 	sub.w	r4, r1, #4
 80112fa:	bfb8      	it	lt
 80112fc:	18e4      	addlt	r4, r4, r3
 80112fe:	f003 ffd9 	bl	80152b4 <__malloc_lock>
 8011302:	4a20      	ldr	r2, [pc, #128]	; (8011384 <_free_r+0x9c>)
 8011304:	9801      	ldr	r0, [sp, #4]
 8011306:	6813      	ldr	r3, [r2, #0]
 8011308:	4615      	mov	r5, r2
 801130a:	b933      	cbnz	r3, 801131a <_free_r+0x32>
 801130c:	6063      	str	r3, [r4, #4]
 801130e:	6014      	str	r4, [r2, #0]
 8011310:	b003      	add	sp, #12
 8011312:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011316:	f003 bfd3 	b.w	80152c0 <__malloc_unlock>
 801131a:	42a3      	cmp	r3, r4
 801131c:	d90b      	bls.n	8011336 <_free_r+0x4e>
 801131e:	6821      	ldr	r1, [r4, #0]
 8011320:	1862      	adds	r2, r4, r1
 8011322:	4293      	cmp	r3, r2
 8011324:	bf04      	itt	eq
 8011326:	681a      	ldreq	r2, [r3, #0]
 8011328:	685b      	ldreq	r3, [r3, #4]
 801132a:	6063      	str	r3, [r4, #4]
 801132c:	bf04      	itt	eq
 801132e:	1852      	addeq	r2, r2, r1
 8011330:	6022      	streq	r2, [r4, #0]
 8011332:	602c      	str	r4, [r5, #0]
 8011334:	e7ec      	b.n	8011310 <_free_r+0x28>
 8011336:	461a      	mov	r2, r3
 8011338:	685b      	ldr	r3, [r3, #4]
 801133a:	b10b      	cbz	r3, 8011340 <_free_r+0x58>
 801133c:	42a3      	cmp	r3, r4
 801133e:	d9fa      	bls.n	8011336 <_free_r+0x4e>
 8011340:	6811      	ldr	r1, [r2, #0]
 8011342:	1855      	adds	r5, r2, r1
 8011344:	42a5      	cmp	r5, r4
 8011346:	d10b      	bne.n	8011360 <_free_r+0x78>
 8011348:	6824      	ldr	r4, [r4, #0]
 801134a:	4421      	add	r1, r4
 801134c:	1854      	adds	r4, r2, r1
 801134e:	42a3      	cmp	r3, r4
 8011350:	6011      	str	r1, [r2, #0]
 8011352:	d1dd      	bne.n	8011310 <_free_r+0x28>
 8011354:	681c      	ldr	r4, [r3, #0]
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	6053      	str	r3, [r2, #4]
 801135a:	4421      	add	r1, r4
 801135c:	6011      	str	r1, [r2, #0]
 801135e:	e7d7      	b.n	8011310 <_free_r+0x28>
 8011360:	d902      	bls.n	8011368 <_free_r+0x80>
 8011362:	230c      	movs	r3, #12
 8011364:	6003      	str	r3, [r0, #0]
 8011366:	e7d3      	b.n	8011310 <_free_r+0x28>
 8011368:	6825      	ldr	r5, [r4, #0]
 801136a:	1961      	adds	r1, r4, r5
 801136c:	428b      	cmp	r3, r1
 801136e:	bf04      	itt	eq
 8011370:	6819      	ldreq	r1, [r3, #0]
 8011372:	685b      	ldreq	r3, [r3, #4]
 8011374:	6063      	str	r3, [r4, #4]
 8011376:	bf04      	itt	eq
 8011378:	1949      	addeq	r1, r1, r5
 801137a:	6021      	streq	r1, [r4, #0]
 801137c:	6054      	str	r4, [r2, #4]
 801137e:	e7c7      	b.n	8011310 <_free_r+0x28>
 8011380:	b003      	add	sp, #12
 8011382:	bd30      	pop	{r4, r5, pc}
 8011384:	20005a00 	.word	0x20005a00

08011388 <_malloc_r>:
 8011388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801138a:	1ccd      	adds	r5, r1, #3
 801138c:	f025 0503 	bic.w	r5, r5, #3
 8011390:	3508      	adds	r5, #8
 8011392:	2d0c      	cmp	r5, #12
 8011394:	bf38      	it	cc
 8011396:	250c      	movcc	r5, #12
 8011398:	2d00      	cmp	r5, #0
 801139a:	4606      	mov	r6, r0
 801139c:	db01      	blt.n	80113a2 <_malloc_r+0x1a>
 801139e:	42a9      	cmp	r1, r5
 80113a0:	d903      	bls.n	80113aa <_malloc_r+0x22>
 80113a2:	230c      	movs	r3, #12
 80113a4:	6033      	str	r3, [r6, #0]
 80113a6:	2000      	movs	r0, #0
 80113a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113aa:	f003 ff83 	bl	80152b4 <__malloc_lock>
 80113ae:	4921      	ldr	r1, [pc, #132]	; (8011434 <_malloc_r+0xac>)
 80113b0:	680a      	ldr	r2, [r1, #0]
 80113b2:	4614      	mov	r4, r2
 80113b4:	b99c      	cbnz	r4, 80113de <_malloc_r+0x56>
 80113b6:	4f20      	ldr	r7, [pc, #128]	; (8011438 <_malloc_r+0xb0>)
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	b923      	cbnz	r3, 80113c6 <_malloc_r+0x3e>
 80113bc:	4621      	mov	r1, r4
 80113be:	4630      	mov	r0, r6
 80113c0:	f000 ffae 	bl	8012320 <_sbrk_r>
 80113c4:	6038      	str	r0, [r7, #0]
 80113c6:	4629      	mov	r1, r5
 80113c8:	4630      	mov	r0, r6
 80113ca:	f000 ffa9 	bl	8012320 <_sbrk_r>
 80113ce:	1c43      	adds	r3, r0, #1
 80113d0:	d123      	bne.n	801141a <_malloc_r+0x92>
 80113d2:	230c      	movs	r3, #12
 80113d4:	6033      	str	r3, [r6, #0]
 80113d6:	4630      	mov	r0, r6
 80113d8:	f003 ff72 	bl	80152c0 <__malloc_unlock>
 80113dc:	e7e3      	b.n	80113a6 <_malloc_r+0x1e>
 80113de:	6823      	ldr	r3, [r4, #0]
 80113e0:	1b5b      	subs	r3, r3, r5
 80113e2:	d417      	bmi.n	8011414 <_malloc_r+0x8c>
 80113e4:	2b0b      	cmp	r3, #11
 80113e6:	d903      	bls.n	80113f0 <_malloc_r+0x68>
 80113e8:	6023      	str	r3, [r4, #0]
 80113ea:	441c      	add	r4, r3
 80113ec:	6025      	str	r5, [r4, #0]
 80113ee:	e004      	b.n	80113fa <_malloc_r+0x72>
 80113f0:	6863      	ldr	r3, [r4, #4]
 80113f2:	42a2      	cmp	r2, r4
 80113f4:	bf0c      	ite	eq
 80113f6:	600b      	streq	r3, [r1, #0]
 80113f8:	6053      	strne	r3, [r2, #4]
 80113fa:	4630      	mov	r0, r6
 80113fc:	f003 ff60 	bl	80152c0 <__malloc_unlock>
 8011400:	f104 000b 	add.w	r0, r4, #11
 8011404:	1d23      	adds	r3, r4, #4
 8011406:	f020 0007 	bic.w	r0, r0, #7
 801140a:	1ac2      	subs	r2, r0, r3
 801140c:	d0cc      	beq.n	80113a8 <_malloc_r+0x20>
 801140e:	1a1b      	subs	r3, r3, r0
 8011410:	50a3      	str	r3, [r4, r2]
 8011412:	e7c9      	b.n	80113a8 <_malloc_r+0x20>
 8011414:	4622      	mov	r2, r4
 8011416:	6864      	ldr	r4, [r4, #4]
 8011418:	e7cc      	b.n	80113b4 <_malloc_r+0x2c>
 801141a:	1cc4      	adds	r4, r0, #3
 801141c:	f024 0403 	bic.w	r4, r4, #3
 8011420:	42a0      	cmp	r0, r4
 8011422:	d0e3      	beq.n	80113ec <_malloc_r+0x64>
 8011424:	1a21      	subs	r1, r4, r0
 8011426:	4630      	mov	r0, r6
 8011428:	f000 ff7a 	bl	8012320 <_sbrk_r>
 801142c:	3001      	adds	r0, #1
 801142e:	d1dd      	bne.n	80113ec <_malloc_r+0x64>
 8011430:	e7cf      	b.n	80113d2 <_malloc_r+0x4a>
 8011432:	bf00      	nop
 8011434:	20005a00 	.word	0x20005a00
 8011438:	20005a04 	.word	0x20005a04

0801143c <__cvt>:
 801143c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011440:	ec55 4b10 	vmov	r4, r5, d0
 8011444:	2d00      	cmp	r5, #0
 8011446:	460e      	mov	r6, r1
 8011448:	4619      	mov	r1, r3
 801144a:	462b      	mov	r3, r5
 801144c:	bfbb      	ittet	lt
 801144e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011452:	461d      	movlt	r5, r3
 8011454:	2300      	movge	r3, #0
 8011456:	232d      	movlt	r3, #45	; 0x2d
 8011458:	700b      	strb	r3, [r1, #0]
 801145a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801145c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011460:	4691      	mov	r9, r2
 8011462:	f023 0820 	bic.w	r8, r3, #32
 8011466:	bfbc      	itt	lt
 8011468:	4622      	movlt	r2, r4
 801146a:	4614      	movlt	r4, r2
 801146c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011470:	d005      	beq.n	801147e <__cvt+0x42>
 8011472:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011476:	d100      	bne.n	801147a <__cvt+0x3e>
 8011478:	3601      	adds	r6, #1
 801147a:	2102      	movs	r1, #2
 801147c:	e000      	b.n	8011480 <__cvt+0x44>
 801147e:	2103      	movs	r1, #3
 8011480:	ab03      	add	r3, sp, #12
 8011482:	9301      	str	r3, [sp, #4]
 8011484:	ab02      	add	r3, sp, #8
 8011486:	9300      	str	r3, [sp, #0]
 8011488:	ec45 4b10 	vmov	d0, r4, r5
 801148c:	4653      	mov	r3, sl
 801148e:	4632      	mov	r2, r6
 8011490:	f002 fb5e 	bl	8013b50 <_dtoa_r>
 8011494:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011498:	4607      	mov	r7, r0
 801149a:	d102      	bne.n	80114a2 <__cvt+0x66>
 801149c:	f019 0f01 	tst.w	r9, #1
 80114a0:	d022      	beq.n	80114e8 <__cvt+0xac>
 80114a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80114a6:	eb07 0906 	add.w	r9, r7, r6
 80114aa:	d110      	bne.n	80114ce <__cvt+0x92>
 80114ac:	783b      	ldrb	r3, [r7, #0]
 80114ae:	2b30      	cmp	r3, #48	; 0x30
 80114b0:	d10a      	bne.n	80114c8 <__cvt+0x8c>
 80114b2:	2200      	movs	r2, #0
 80114b4:	2300      	movs	r3, #0
 80114b6:	4620      	mov	r0, r4
 80114b8:	4629      	mov	r1, r5
 80114ba:	f7ef fb25 	bl	8000b08 <__aeabi_dcmpeq>
 80114be:	b918      	cbnz	r0, 80114c8 <__cvt+0x8c>
 80114c0:	f1c6 0601 	rsb	r6, r6, #1
 80114c4:	f8ca 6000 	str.w	r6, [sl]
 80114c8:	f8da 3000 	ldr.w	r3, [sl]
 80114cc:	4499      	add	r9, r3
 80114ce:	2200      	movs	r2, #0
 80114d0:	2300      	movs	r3, #0
 80114d2:	4620      	mov	r0, r4
 80114d4:	4629      	mov	r1, r5
 80114d6:	f7ef fb17 	bl	8000b08 <__aeabi_dcmpeq>
 80114da:	b108      	cbz	r0, 80114e0 <__cvt+0xa4>
 80114dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80114e0:	2230      	movs	r2, #48	; 0x30
 80114e2:	9b03      	ldr	r3, [sp, #12]
 80114e4:	454b      	cmp	r3, r9
 80114e6:	d307      	bcc.n	80114f8 <__cvt+0xbc>
 80114e8:	9b03      	ldr	r3, [sp, #12]
 80114ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80114ec:	1bdb      	subs	r3, r3, r7
 80114ee:	4638      	mov	r0, r7
 80114f0:	6013      	str	r3, [r2, #0]
 80114f2:	b004      	add	sp, #16
 80114f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114f8:	1c59      	adds	r1, r3, #1
 80114fa:	9103      	str	r1, [sp, #12]
 80114fc:	701a      	strb	r2, [r3, #0]
 80114fe:	e7f0      	b.n	80114e2 <__cvt+0xa6>

08011500 <__exponent>:
 8011500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011502:	4603      	mov	r3, r0
 8011504:	2900      	cmp	r1, #0
 8011506:	bfb8      	it	lt
 8011508:	4249      	neglt	r1, r1
 801150a:	f803 2b02 	strb.w	r2, [r3], #2
 801150e:	bfb4      	ite	lt
 8011510:	222d      	movlt	r2, #45	; 0x2d
 8011512:	222b      	movge	r2, #43	; 0x2b
 8011514:	2909      	cmp	r1, #9
 8011516:	7042      	strb	r2, [r0, #1]
 8011518:	dd2a      	ble.n	8011570 <__exponent+0x70>
 801151a:	f10d 0407 	add.w	r4, sp, #7
 801151e:	46a4      	mov	ip, r4
 8011520:	270a      	movs	r7, #10
 8011522:	46a6      	mov	lr, r4
 8011524:	460a      	mov	r2, r1
 8011526:	fb91 f6f7 	sdiv	r6, r1, r7
 801152a:	fb07 1516 	mls	r5, r7, r6, r1
 801152e:	3530      	adds	r5, #48	; 0x30
 8011530:	2a63      	cmp	r2, #99	; 0x63
 8011532:	f104 34ff 	add.w	r4, r4, #4294967295
 8011536:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801153a:	4631      	mov	r1, r6
 801153c:	dcf1      	bgt.n	8011522 <__exponent+0x22>
 801153e:	3130      	adds	r1, #48	; 0x30
 8011540:	f1ae 0502 	sub.w	r5, lr, #2
 8011544:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011548:	1c44      	adds	r4, r0, #1
 801154a:	4629      	mov	r1, r5
 801154c:	4561      	cmp	r1, ip
 801154e:	d30a      	bcc.n	8011566 <__exponent+0x66>
 8011550:	f10d 0209 	add.w	r2, sp, #9
 8011554:	eba2 020e 	sub.w	r2, r2, lr
 8011558:	4565      	cmp	r5, ip
 801155a:	bf88      	it	hi
 801155c:	2200      	movhi	r2, #0
 801155e:	4413      	add	r3, r2
 8011560:	1a18      	subs	r0, r3, r0
 8011562:	b003      	add	sp, #12
 8011564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011566:	f811 2b01 	ldrb.w	r2, [r1], #1
 801156a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801156e:	e7ed      	b.n	801154c <__exponent+0x4c>
 8011570:	2330      	movs	r3, #48	; 0x30
 8011572:	3130      	adds	r1, #48	; 0x30
 8011574:	7083      	strb	r3, [r0, #2]
 8011576:	70c1      	strb	r1, [r0, #3]
 8011578:	1d03      	adds	r3, r0, #4
 801157a:	e7f1      	b.n	8011560 <__exponent+0x60>

0801157c <_printf_float>:
 801157c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011580:	ed2d 8b02 	vpush	{d8}
 8011584:	b08d      	sub	sp, #52	; 0x34
 8011586:	460c      	mov	r4, r1
 8011588:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801158c:	4616      	mov	r6, r2
 801158e:	461f      	mov	r7, r3
 8011590:	4605      	mov	r5, r0
 8011592:	f003 fe03 	bl	801519c <_localeconv_r>
 8011596:	f8d0 a000 	ldr.w	sl, [r0]
 801159a:	4650      	mov	r0, sl
 801159c:	f7ee fe32 	bl	8000204 <strlen>
 80115a0:	2300      	movs	r3, #0
 80115a2:	930a      	str	r3, [sp, #40]	; 0x28
 80115a4:	6823      	ldr	r3, [r4, #0]
 80115a6:	9305      	str	r3, [sp, #20]
 80115a8:	f8d8 3000 	ldr.w	r3, [r8]
 80115ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80115b0:	3307      	adds	r3, #7
 80115b2:	f023 0307 	bic.w	r3, r3, #7
 80115b6:	f103 0208 	add.w	r2, r3, #8
 80115ba:	f8c8 2000 	str.w	r2, [r8]
 80115be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80115c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80115ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80115ce:	9307      	str	r3, [sp, #28]
 80115d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80115d4:	ee08 0a10 	vmov	s16, r0
 80115d8:	4b9f      	ldr	r3, [pc, #636]	; (8011858 <_printf_float+0x2dc>)
 80115da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80115de:	f04f 32ff 	mov.w	r2, #4294967295
 80115e2:	f7ef fac3 	bl	8000b6c <__aeabi_dcmpun>
 80115e6:	bb88      	cbnz	r0, 801164c <_printf_float+0xd0>
 80115e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80115ec:	4b9a      	ldr	r3, [pc, #616]	; (8011858 <_printf_float+0x2dc>)
 80115ee:	f04f 32ff 	mov.w	r2, #4294967295
 80115f2:	f7ef fa9d 	bl	8000b30 <__aeabi_dcmple>
 80115f6:	bb48      	cbnz	r0, 801164c <_printf_float+0xd0>
 80115f8:	2200      	movs	r2, #0
 80115fa:	2300      	movs	r3, #0
 80115fc:	4640      	mov	r0, r8
 80115fe:	4649      	mov	r1, r9
 8011600:	f7ef fa8c 	bl	8000b1c <__aeabi_dcmplt>
 8011604:	b110      	cbz	r0, 801160c <_printf_float+0x90>
 8011606:	232d      	movs	r3, #45	; 0x2d
 8011608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801160c:	4b93      	ldr	r3, [pc, #588]	; (801185c <_printf_float+0x2e0>)
 801160e:	4894      	ldr	r0, [pc, #592]	; (8011860 <_printf_float+0x2e4>)
 8011610:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011614:	bf94      	ite	ls
 8011616:	4698      	movls	r8, r3
 8011618:	4680      	movhi	r8, r0
 801161a:	2303      	movs	r3, #3
 801161c:	6123      	str	r3, [r4, #16]
 801161e:	9b05      	ldr	r3, [sp, #20]
 8011620:	f023 0204 	bic.w	r2, r3, #4
 8011624:	6022      	str	r2, [r4, #0]
 8011626:	f04f 0900 	mov.w	r9, #0
 801162a:	9700      	str	r7, [sp, #0]
 801162c:	4633      	mov	r3, r6
 801162e:	aa0b      	add	r2, sp, #44	; 0x2c
 8011630:	4621      	mov	r1, r4
 8011632:	4628      	mov	r0, r5
 8011634:	f000 f9d8 	bl	80119e8 <_printf_common>
 8011638:	3001      	adds	r0, #1
 801163a:	f040 8090 	bne.w	801175e <_printf_float+0x1e2>
 801163e:	f04f 30ff 	mov.w	r0, #4294967295
 8011642:	b00d      	add	sp, #52	; 0x34
 8011644:	ecbd 8b02 	vpop	{d8}
 8011648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801164c:	4642      	mov	r2, r8
 801164e:	464b      	mov	r3, r9
 8011650:	4640      	mov	r0, r8
 8011652:	4649      	mov	r1, r9
 8011654:	f7ef fa8a 	bl	8000b6c <__aeabi_dcmpun>
 8011658:	b140      	cbz	r0, 801166c <_printf_float+0xf0>
 801165a:	464b      	mov	r3, r9
 801165c:	2b00      	cmp	r3, #0
 801165e:	bfbc      	itt	lt
 8011660:	232d      	movlt	r3, #45	; 0x2d
 8011662:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011666:	487f      	ldr	r0, [pc, #508]	; (8011864 <_printf_float+0x2e8>)
 8011668:	4b7f      	ldr	r3, [pc, #508]	; (8011868 <_printf_float+0x2ec>)
 801166a:	e7d1      	b.n	8011610 <_printf_float+0x94>
 801166c:	6863      	ldr	r3, [r4, #4]
 801166e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011672:	9206      	str	r2, [sp, #24]
 8011674:	1c5a      	adds	r2, r3, #1
 8011676:	d13f      	bne.n	80116f8 <_printf_float+0x17c>
 8011678:	2306      	movs	r3, #6
 801167a:	6063      	str	r3, [r4, #4]
 801167c:	9b05      	ldr	r3, [sp, #20]
 801167e:	6861      	ldr	r1, [r4, #4]
 8011680:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011684:	2300      	movs	r3, #0
 8011686:	9303      	str	r3, [sp, #12]
 8011688:	ab0a      	add	r3, sp, #40	; 0x28
 801168a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801168e:	ab09      	add	r3, sp, #36	; 0x24
 8011690:	ec49 8b10 	vmov	d0, r8, r9
 8011694:	9300      	str	r3, [sp, #0]
 8011696:	6022      	str	r2, [r4, #0]
 8011698:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801169c:	4628      	mov	r0, r5
 801169e:	f7ff fecd 	bl	801143c <__cvt>
 80116a2:	9b06      	ldr	r3, [sp, #24]
 80116a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116a6:	2b47      	cmp	r3, #71	; 0x47
 80116a8:	4680      	mov	r8, r0
 80116aa:	d108      	bne.n	80116be <_printf_float+0x142>
 80116ac:	1cc8      	adds	r0, r1, #3
 80116ae:	db02      	blt.n	80116b6 <_printf_float+0x13a>
 80116b0:	6863      	ldr	r3, [r4, #4]
 80116b2:	4299      	cmp	r1, r3
 80116b4:	dd41      	ble.n	801173a <_printf_float+0x1be>
 80116b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80116ba:	fa5f fb8b 	uxtb.w	fp, fp
 80116be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80116c2:	d820      	bhi.n	8011706 <_printf_float+0x18a>
 80116c4:	3901      	subs	r1, #1
 80116c6:	465a      	mov	r2, fp
 80116c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80116cc:	9109      	str	r1, [sp, #36]	; 0x24
 80116ce:	f7ff ff17 	bl	8011500 <__exponent>
 80116d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80116d4:	1813      	adds	r3, r2, r0
 80116d6:	2a01      	cmp	r2, #1
 80116d8:	4681      	mov	r9, r0
 80116da:	6123      	str	r3, [r4, #16]
 80116dc:	dc02      	bgt.n	80116e4 <_printf_float+0x168>
 80116de:	6822      	ldr	r2, [r4, #0]
 80116e0:	07d2      	lsls	r2, r2, #31
 80116e2:	d501      	bpl.n	80116e8 <_printf_float+0x16c>
 80116e4:	3301      	adds	r3, #1
 80116e6:	6123      	str	r3, [r4, #16]
 80116e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d09c      	beq.n	801162a <_printf_float+0xae>
 80116f0:	232d      	movs	r3, #45	; 0x2d
 80116f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116f6:	e798      	b.n	801162a <_printf_float+0xae>
 80116f8:	9a06      	ldr	r2, [sp, #24]
 80116fa:	2a47      	cmp	r2, #71	; 0x47
 80116fc:	d1be      	bne.n	801167c <_printf_float+0x100>
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d1bc      	bne.n	801167c <_printf_float+0x100>
 8011702:	2301      	movs	r3, #1
 8011704:	e7b9      	b.n	801167a <_printf_float+0xfe>
 8011706:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801170a:	d118      	bne.n	801173e <_printf_float+0x1c2>
 801170c:	2900      	cmp	r1, #0
 801170e:	6863      	ldr	r3, [r4, #4]
 8011710:	dd0b      	ble.n	801172a <_printf_float+0x1ae>
 8011712:	6121      	str	r1, [r4, #16]
 8011714:	b913      	cbnz	r3, 801171c <_printf_float+0x1a0>
 8011716:	6822      	ldr	r2, [r4, #0]
 8011718:	07d0      	lsls	r0, r2, #31
 801171a:	d502      	bpl.n	8011722 <_printf_float+0x1a6>
 801171c:	3301      	adds	r3, #1
 801171e:	440b      	add	r3, r1
 8011720:	6123      	str	r3, [r4, #16]
 8011722:	65a1      	str	r1, [r4, #88]	; 0x58
 8011724:	f04f 0900 	mov.w	r9, #0
 8011728:	e7de      	b.n	80116e8 <_printf_float+0x16c>
 801172a:	b913      	cbnz	r3, 8011732 <_printf_float+0x1b6>
 801172c:	6822      	ldr	r2, [r4, #0]
 801172e:	07d2      	lsls	r2, r2, #31
 8011730:	d501      	bpl.n	8011736 <_printf_float+0x1ba>
 8011732:	3302      	adds	r3, #2
 8011734:	e7f4      	b.n	8011720 <_printf_float+0x1a4>
 8011736:	2301      	movs	r3, #1
 8011738:	e7f2      	b.n	8011720 <_printf_float+0x1a4>
 801173a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801173e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011740:	4299      	cmp	r1, r3
 8011742:	db05      	blt.n	8011750 <_printf_float+0x1d4>
 8011744:	6823      	ldr	r3, [r4, #0]
 8011746:	6121      	str	r1, [r4, #16]
 8011748:	07d8      	lsls	r0, r3, #31
 801174a:	d5ea      	bpl.n	8011722 <_printf_float+0x1a6>
 801174c:	1c4b      	adds	r3, r1, #1
 801174e:	e7e7      	b.n	8011720 <_printf_float+0x1a4>
 8011750:	2900      	cmp	r1, #0
 8011752:	bfd4      	ite	le
 8011754:	f1c1 0202 	rsble	r2, r1, #2
 8011758:	2201      	movgt	r2, #1
 801175a:	4413      	add	r3, r2
 801175c:	e7e0      	b.n	8011720 <_printf_float+0x1a4>
 801175e:	6823      	ldr	r3, [r4, #0]
 8011760:	055a      	lsls	r2, r3, #21
 8011762:	d407      	bmi.n	8011774 <_printf_float+0x1f8>
 8011764:	6923      	ldr	r3, [r4, #16]
 8011766:	4642      	mov	r2, r8
 8011768:	4631      	mov	r1, r6
 801176a:	4628      	mov	r0, r5
 801176c:	47b8      	blx	r7
 801176e:	3001      	adds	r0, #1
 8011770:	d12c      	bne.n	80117cc <_printf_float+0x250>
 8011772:	e764      	b.n	801163e <_printf_float+0xc2>
 8011774:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011778:	f240 80e0 	bls.w	801193c <_printf_float+0x3c0>
 801177c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011780:	2200      	movs	r2, #0
 8011782:	2300      	movs	r3, #0
 8011784:	f7ef f9c0 	bl	8000b08 <__aeabi_dcmpeq>
 8011788:	2800      	cmp	r0, #0
 801178a:	d034      	beq.n	80117f6 <_printf_float+0x27a>
 801178c:	4a37      	ldr	r2, [pc, #220]	; (801186c <_printf_float+0x2f0>)
 801178e:	2301      	movs	r3, #1
 8011790:	4631      	mov	r1, r6
 8011792:	4628      	mov	r0, r5
 8011794:	47b8      	blx	r7
 8011796:	3001      	adds	r0, #1
 8011798:	f43f af51 	beq.w	801163e <_printf_float+0xc2>
 801179c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80117a0:	429a      	cmp	r2, r3
 80117a2:	db02      	blt.n	80117aa <_printf_float+0x22e>
 80117a4:	6823      	ldr	r3, [r4, #0]
 80117a6:	07d8      	lsls	r0, r3, #31
 80117a8:	d510      	bpl.n	80117cc <_printf_float+0x250>
 80117aa:	ee18 3a10 	vmov	r3, s16
 80117ae:	4652      	mov	r2, sl
 80117b0:	4631      	mov	r1, r6
 80117b2:	4628      	mov	r0, r5
 80117b4:	47b8      	blx	r7
 80117b6:	3001      	adds	r0, #1
 80117b8:	f43f af41 	beq.w	801163e <_printf_float+0xc2>
 80117bc:	f04f 0800 	mov.w	r8, #0
 80117c0:	f104 091a 	add.w	r9, r4, #26
 80117c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117c6:	3b01      	subs	r3, #1
 80117c8:	4543      	cmp	r3, r8
 80117ca:	dc09      	bgt.n	80117e0 <_printf_float+0x264>
 80117cc:	6823      	ldr	r3, [r4, #0]
 80117ce:	079b      	lsls	r3, r3, #30
 80117d0:	f100 8105 	bmi.w	80119de <_printf_float+0x462>
 80117d4:	68e0      	ldr	r0, [r4, #12]
 80117d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117d8:	4298      	cmp	r0, r3
 80117da:	bfb8      	it	lt
 80117dc:	4618      	movlt	r0, r3
 80117de:	e730      	b.n	8011642 <_printf_float+0xc6>
 80117e0:	2301      	movs	r3, #1
 80117e2:	464a      	mov	r2, r9
 80117e4:	4631      	mov	r1, r6
 80117e6:	4628      	mov	r0, r5
 80117e8:	47b8      	blx	r7
 80117ea:	3001      	adds	r0, #1
 80117ec:	f43f af27 	beq.w	801163e <_printf_float+0xc2>
 80117f0:	f108 0801 	add.w	r8, r8, #1
 80117f4:	e7e6      	b.n	80117c4 <_printf_float+0x248>
 80117f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	dc39      	bgt.n	8011870 <_printf_float+0x2f4>
 80117fc:	4a1b      	ldr	r2, [pc, #108]	; (801186c <_printf_float+0x2f0>)
 80117fe:	2301      	movs	r3, #1
 8011800:	4631      	mov	r1, r6
 8011802:	4628      	mov	r0, r5
 8011804:	47b8      	blx	r7
 8011806:	3001      	adds	r0, #1
 8011808:	f43f af19 	beq.w	801163e <_printf_float+0xc2>
 801180c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011810:	4313      	orrs	r3, r2
 8011812:	d102      	bne.n	801181a <_printf_float+0x29e>
 8011814:	6823      	ldr	r3, [r4, #0]
 8011816:	07d9      	lsls	r1, r3, #31
 8011818:	d5d8      	bpl.n	80117cc <_printf_float+0x250>
 801181a:	ee18 3a10 	vmov	r3, s16
 801181e:	4652      	mov	r2, sl
 8011820:	4631      	mov	r1, r6
 8011822:	4628      	mov	r0, r5
 8011824:	47b8      	blx	r7
 8011826:	3001      	adds	r0, #1
 8011828:	f43f af09 	beq.w	801163e <_printf_float+0xc2>
 801182c:	f04f 0900 	mov.w	r9, #0
 8011830:	f104 0a1a 	add.w	sl, r4, #26
 8011834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011836:	425b      	negs	r3, r3
 8011838:	454b      	cmp	r3, r9
 801183a:	dc01      	bgt.n	8011840 <_printf_float+0x2c4>
 801183c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801183e:	e792      	b.n	8011766 <_printf_float+0x1ea>
 8011840:	2301      	movs	r3, #1
 8011842:	4652      	mov	r2, sl
 8011844:	4631      	mov	r1, r6
 8011846:	4628      	mov	r0, r5
 8011848:	47b8      	blx	r7
 801184a:	3001      	adds	r0, #1
 801184c:	f43f aef7 	beq.w	801163e <_printf_float+0xc2>
 8011850:	f109 0901 	add.w	r9, r9, #1
 8011854:	e7ee      	b.n	8011834 <_printf_float+0x2b8>
 8011856:	bf00      	nop
 8011858:	7fefffff 	.word	0x7fefffff
 801185c:	08018874 	.word	0x08018874
 8011860:	08018878 	.word	0x08018878
 8011864:	08018880 	.word	0x08018880
 8011868:	0801887c 	.word	0x0801887c
 801186c:	08018ce9 	.word	0x08018ce9
 8011870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011872:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011874:	429a      	cmp	r2, r3
 8011876:	bfa8      	it	ge
 8011878:	461a      	movge	r2, r3
 801187a:	2a00      	cmp	r2, #0
 801187c:	4691      	mov	r9, r2
 801187e:	dc37      	bgt.n	80118f0 <_printf_float+0x374>
 8011880:	f04f 0b00 	mov.w	fp, #0
 8011884:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011888:	f104 021a 	add.w	r2, r4, #26
 801188c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801188e:	9305      	str	r3, [sp, #20]
 8011890:	eba3 0309 	sub.w	r3, r3, r9
 8011894:	455b      	cmp	r3, fp
 8011896:	dc33      	bgt.n	8011900 <_printf_float+0x384>
 8011898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801189c:	429a      	cmp	r2, r3
 801189e:	db3b      	blt.n	8011918 <_printf_float+0x39c>
 80118a0:	6823      	ldr	r3, [r4, #0]
 80118a2:	07da      	lsls	r2, r3, #31
 80118a4:	d438      	bmi.n	8011918 <_printf_float+0x39c>
 80118a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118a8:	9b05      	ldr	r3, [sp, #20]
 80118aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118ac:	1ad3      	subs	r3, r2, r3
 80118ae:	eba2 0901 	sub.w	r9, r2, r1
 80118b2:	4599      	cmp	r9, r3
 80118b4:	bfa8      	it	ge
 80118b6:	4699      	movge	r9, r3
 80118b8:	f1b9 0f00 	cmp.w	r9, #0
 80118bc:	dc35      	bgt.n	801192a <_printf_float+0x3ae>
 80118be:	f04f 0800 	mov.w	r8, #0
 80118c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80118c6:	f104 0a1a 	add.w	sl, r4, #26
 80118ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80118ce:	1a9b      	subs	r3, r3, r2
 80118d0:	eba3 0309 	sub.w	r3, r3, r9
 80118d4:	4543      	cmp	r3, r8
 80118d6:	f77f af79 	ble.w	80117cc <_printf_float+0x250>
 80118da:	2301      	movs	r3, #1
 80118dc:	4652      	mov	r2, sl
 80118de:	4631      	mov	r1, r6
 80118e0:	4628      	mov	r0, r5
 80118e2:	47b8      	blx	r7
 80118e4:	3001      	adds	r0, #1
 80118e6:	f43f aeaa 	beq.w	801163e <_printf_float+0xc2>
 80118ea:	f108 0801 	add.w	r8, r8, #1
 80118ee:	e7ec      	b.n	80118ca <_printf_float+0x34e>
 80118f0:	4613      	mov	r3, r2
 80118f2:	4631      	mov	r1, r6
 80118f4:	4642      	mov	r2, r8
 80118f6:	4628      	mov	r0, r5
 80118f8:	47b8      	blx	r7
 80118fa:	3001      	adds	r0, #1
 80118fc:	d1c0      	bne.n	8011880 <_printf_float+0x304>
 80118fe:	e69e      	b.n	801163e <_printf_float+0xc2>
 8011900:	2301      	movs	r3, #1
 8011902:	4631      	mov	r1, r6
 8011904:	4628      	mov	r0, r5
 8011906:	9205      	str	r2, [sp, #20]
 8011908:	47b8      	blx	r7
 801190a:	3001      	adds	r0, #1
 801190c:	f43f ae97 	beq.w	801163e <_printf_float+0xc2>
 8011910:	9a05      	ldr	r2, [sp, #20]
 8011912:	f10b 0b01 	add.w	fp, fp, #1
 8011916:	e7b9      	b.n	801188c <_printf_float+0x310>
 8011918:	ee18 3a10 	vmov	r3, s16
 801191c:	4652      	mov	r2, sl
 801191e:	4631      	mov	r1, r6
 8011920:	4628      	mov	r0, r5
 8011922:	47b8      	blx	r7
 8011924:	3001      	adds	r0, #1
 8011926:	d1be      	bne.n	80118a6 <_printf_float+0x32a>
 8011928:	e689      	b.n	801163e <_printf_float+0xc2>
 801192a:	9a05      	ldr	r2, [sp, #20]
 801192c:	464b      	mov	r3, r9
 801192e:	4442      	add	r2, r8
 8011930:	4631      	mov	r1, r6
 8011932:	4628      	mov	r0, r5
 8011934:	47b8      	blx	r7
 8011936:	3001      	adds	r0, #1
 8011938:	d1c1      	bne.n	80118be <_printf_float+0x342>
 801193a:	e680      	b.n	801163e <_printf_float+0xc2>
 801193c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801193e:	2a01      	cmp	r2, #1
 8011940:	dc01      	bgt.n	8011946 <_printf_float+0x3ca>
 8011942:	07db      	lsls	r3, r3, #31
 8011944:	d538      	bpl.n	80119b8 <_printf_float+0x43c>
 8011946:	2301      	movs	r3, #1
 8011948:	4642      	mov	r2, r8
 801194a:	4631      	mov	r1, r6
 801194c:	4628      	mov	r0, r5
 801194e:	47b8      	blx	r7
 8011950:	3001      	adds	r0, #1
 8011952:	f43f ae74 	beq.w	801163e <_printf_float+0xc2>
 8011956:	ee18 3a10 	vmov	r3, s16
 801195a:	4652      	mov	r2, sl
 801195c:	4631      	mov	r1, r6
 801195e:	4628      	mov	r0, r5
 8011960:	47b8      	blx	r7
 8011962:	3001      	adds	r0, #1
 8011964:	f43f ae6b 	beq.w	801163e <_printf_float+0xc2>
 8011968:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801196c:	2200      	movs	r2, #0
 801196e:	2300      	movs	r3, #0
 8011970:	f7ef f8ca 	bl	8000b08 <__aeabi_dcmpeq>
 8011974:	b9d8      	cbnz	r0, 80119ae <_printf_float+0x432>
 8011976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011978:	f108 0201 	add.w	r2, r8, #1
 801197c:	3b01      	subs	r3, #1
 801197e:	4631      	mov	r1, r6
 8011980:	4628      	mov	r0, r5
 8011982:	47b8      	blx	r7
 8011984:	3001      	adds	r0, #1
 8011986:	d10e      	bne.n	80119a6 <_printf_float+0x42a>
 8011988:	e659      	b.n	801163e <_printf_float+0xc2>
 801198a:	2301      	movs	r3, #1
 801198c:	4652      	mov	r2, sl
 801198e:	4631      	mov	r1, r6
 8011990:	4628      	mov	r0, r5
 8011992:	47b8      	blx	r7
 8011994:	3001      	adds	r0, #1
 8011996:	f43f ae52 	beq.w	801163e <_printf_float+0xc2>
 801199a:	f108 0801 	add.w	r8, r8, #1
 801199e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119a0:	3b01      	subs	r3, #1
 80119a2:	4543      	cmp	r3, r8
 80119a4:	dcf1      	bgt.n	801198a <_printf_float+0x40e>
 80119a6:	464b      	mov	r3, r9
 80119a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80119ac:	e6dc      	b.n	8011768 <_printf_float+0x1ec>
 80119ae:	f04f 0800 	mov.w	r8, #0
 80119b2:	f104 0a1a 	add.w	sl, r4, #26
 80119b6:	e7f2      	b.n	801199e <_printf_float+0x422>
 80119b8:	2301      	movs	r3, #1
 80119ba:	4642      	mov	r2, r8
 80119bc:	e7df      	b.n	801197e <_printf_float+0x402>
 80119be:	2301      	movs	r3, #1
 80119c0:	464a      	mov	r2, r9
 80119c2:	4631      	mov	r1, r6
 80119c4:	4628      	mov	r0, r5
 80119c6:	47b8      	blx	r7
 80119c8:	3001      	adds	r0, #1
 80119ca:	f43f ae38 	beq.w	801163e <_printf_float+0xc2>
 80119ce:	f108 0801 	add.w	r8, r8, #1
 80119d2:	68e3      	ldr	r3, [r4, #12]
 80119d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80119d6:	1a5b      	subs	r3, r3, r1
 80119d8:	4543      	cmp	r3, r8
 80119da:	dcf0      	bgt.n	80119be <_printf_float+0x442>
 80119dc:	e6fa      	b.n	80117d4 <_printf_float+0x258>
 80119de:	f04f 0800 	mov.w	r8, #0
 80119e2:	f104 0919 	add.w	r9, r4, #25
 80119e6:	e7f4      	b.n	80119d2 <_printf_float+0x456>

080119e8 <_printf_common>:
 80119e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119ec:	4616      	mov	r6, r2
 80119ee:	4699      	mov	r9, r3
 80119f0:	688a      	ldr	r2, [r1, #8]
 80119f2:	690b      	ldr	r3, [r1, #16]
 80119f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80119f8:	4293      	cmp	r3, r2
 80119fa:	bfb8      	it	lt
 80119fc:	4613      	movlt	r3, r2
 80119fe:	6033      	str	r3, [r6, #0]
 8011a00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011a04:	4607      	mov	r7, r0
 8011a06:	460c      	mov	r4, r1
 8011a08:	b10a      	cbz	r2, 8011a0e <_printf_common+0x26>
 8011a0a:	3301      	adds	r3, #1
 8011a0c:	6033      	str	r3, [r6, #0]
 8011a0e:	6823      	ldr	r3, [r4, #0]
 8011a10:	0699      	lsls	r1, r3, #26
 8011a12:	bf42      	ittt	mi
 8011a14:	6833      	ldrmi	r3, [r6, #0]
 8011a16:	3302      	addmi	r3, #2
 8011a18:	6033      	strmi	r3, [r6, #0]
 8011a1a:	6825      	ldr	r5, [r4, #0]
 8011a1c:	f015 0506 	ands.w	r5, r5, #6
 8011a20:	d106      	bne.n	8011a30 <_printf_common+0x48>
 8011a22:	f104 0a19 	add.w	sl, r4, #25
 8011a26:	68e3      	ldr	r3, [r4, #12]
 8011a28:	6832      	ldr	r2, [r6, #0]
 8011a2a:	1a9b      	subs	r3, r3, r2
 8011a2c:	42ab      	cmp	r3, r5
 8011a2e:	dc26      	bgt.n	8011a7e <_printf_common+0x96>
 8011a30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011a34:	1e13      	subs	r3, r2, #0
 8011a36:	6822      	ldr	r2, [r4, #0]
 8011a38:	bf18      	it	ne
 8011a3a:	2301      	movne	r3, #1
 8011a3c:	0692      	lsls	r2, r2, #26
 8011a3e:	d42b      	bmi.n	8011a98 <_printf_common+0xb0>
 8011a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011a44:	4649      	mov	r1, r9
 8011a46:	4638      	mov	r0, r7
 8011a48:	47c0      	blx	r8
 8011a4a:	3001      	adds	r0, #1
 8011a4c:	d01e      	beq.n	8011a8c <_printf_common+0xa4>
 8011a4e:	6823      	ldr	r3, [r4, #0]
 8011a50:	68e5      	ldr	r5, [r4, #12]
 8011a52:	6832      	ldr	r2, [r6, #0]
 8011a54:	f003 0306 	and.w	r3, r3, #6
 8011a58:	2b04      	cmp	r3, #4
 8011a5a:	bf08      	it	eq
 8011a5c:	1aad      	subeq	r5, r5, r2
 8011a5e:	68a3      	ldr	r3, [r4, #8]
 8011a60:	6922      	ldr	r2, [r4, #16]
 8011a62:	bf0c      	ite	eq
 8011a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011a68:	2500      	movne	r5, #0
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	bfc4      	itt	gt
 8011a6e:	1a9b      	subgt	r3, r3, r2
 8011a70:	18ed      	addgt	r5, r5, r3
 8011a72:	2600      	movs	r6, #0
 8011a74:	341a      	adds	r4, #26
 8011a76:	42b5      	cmp	r5, r6
 8011a78:	d11a      	bne.n	8011ab0 <_printf_common+0xc8>
 8011a7a:	2000      	movs	r0, #0
 8011a7c:	e008      	b.n	8011a90 <_printf_common+0xa8>
 8011a7e:	2301      	movs	r3, #1
 8011a80:	4652      	mov	r2, sl
 8011a82:	4649      	mov	r1, r9
 8011a84:	4638      	mov	r0, r7
 8011a86:	47c0      	blx	r8
 8011a88:	3001      	adds	r0, #1
 8011a8a:	d103      	bne.n	8011a94 <_printf_common+0xac>
 8011a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a94:	3501      	adds	r5, #1
 8011a96:	e7c6      	b.n	8011a26 <_printf_common+0x3e>
 8011a98:	18e1      	adds	r1, r4, r3
 8011a9a:	1c5a      	adds	r2, r3, #1
 8011a9c:	2030      	movs	r0, #48	; 0x30
 8011a9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011aa2:	4422      	add	r2, r4
 8011aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011aa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011aac:	3302      	adds	r3, #2
 8011aae:	e7c7      	b.n	8011a40 <_printf_common+0x58>
 8011ab0:	2301      	movs	r3, #1
 8011ab2:	4622      	mov	r2, r4
 8011ab4:	4649      	mov	r1, r9
 8011ab6:	4638      	mov	r0, r7
 8011ab8:	47c0      	blx	r8
 8011aba:	3001      	adds	r0, #1
 8011abc:	d0e6      	beq.n	8011a8c <_printf_common+0xa4>
 8011abe:	3601      	adds	r6, #1
 8011ac0:	e7d9      	b.n	8011a76 <_printf_common+0x8e>
	...

08011ac4 <_printf_i>:
 8011ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ac8:	460c      	mov	r4, r1
 8011aca:	4691      	mov	r9, r2
 8011acc:	7e27      	ldrb	r7, [r4, #24]
 8011ace:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011ad0:	2f78      	cmp	r7, #120	; 0x78
 8011ad2:	4680      	mov	r8, r0
 8011ad4:	469a      	mov	sl, r3
 8011ad6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ada:	d807      	bhi.n	8011aec <_printf_i+0x28>
 8011adc:	2f62      	cmp	r7, #98	; 0x62
 8011ade:	d80a      	bhi.n	8011af6 <_printf_i+0x32>
 8011ae0:	2f00      	cmp	r7, #0
 8011ae2:	f000 80d8 	beq.w	8011c96 <_printf_i+0x1d2>
 8011ae6:	2f58      	cmp	r7, #88	; 0x58
 8011ae8:	f000 80a3 	beq.w	8011c32 <_printf_i+0x16e>
 8011aec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011af4:	e03a      	b.n	8011b6c <_printf_i+0xa8>
 8011af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011afa:	2b15      	cmp	r3, #21
 8011afc:	d8f6      	bhi.n	8011aec <_printf_i+0x28>
 8011afe:	a001      	add	r0, pc, #4	; (adr r0, 8011b04 <_printf_i+0x40>)
 8011b00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011b04:	08011b5d 	.word	0x08011b5d
 8011b08:	08011b71 	.word	0x08011b71
 8011b0c:	08011aed 	.word	0x08011aed
 8011b10:	08011aed 	.word	0x08011aed
 8011b14:	08011aed 	.word	0x08011aed
 8011b18:	08011aed 	.word	0x08011aed
 8011b1c:	08011b71 	.word	0x08011b71
 8011b20:	08011aed 	.word	0x08011aed
 8011b24:	08011aed 	.word	0x08011aed
 8011b28:	08011aed 	.word	0x08011aed
 8011b2c:	08011aed 	.word	0x08011aed
 8011b30:	08011c7d 	.word	0x08011c7d
 8011b34:	08011ba1 	.word	0x08011ba1
 8011b38:	08011c5f 	.word	0x08011c5f
 8011b3c:	08011aed 	.word	0x08011aed
 8011b40:	08011aed 	.word	0x08011aed
 8011b44:	08011c9f 	.word	0x08011c9f
 8011b48:	08011aed 	.word	0x08011aed
 8011b4c:	08011ba1 	.word	0x08011ba1
 8011b50:	08011aed 	.word	0x08011aed
 8011b54:	08011aed 	.word	0x08011aed
 8011b58:	08011c67 	.word	0x08011c67
 8011b5c:	680b      	ldr	r3, [r1, #0]
 8011b5e:	1d1a      	adds	r2, r3, #4
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	600a      	str	r2, [r1, #0]
 8011b64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	e0a3      	b.n	8011cb8 <_printf_i+0x1f4>
 8011b70:	6825      	ldr	r5, [r4, #0]
 8011b72:	6808      	ldr	r0, [r1, #0]
 8011b74:	062e      	lsls	r6, r5, #24
 8011b76:	f100 0304 	add.w	r3, r0, #4
 8011b7a:	d50a      	bpl.n	8011b92 <_printf_i+0xce>
 8011b7c:	6805      	ldr	r5, [r0, #0]
 8011b7e:	600b      	str	r3, [r1, #0]
 8011b80:	2d00      	cmp	r5, #0
 8011b82:	da03      	bge.n	8011b8c <_printf_i+0xc8>
 8011b84:	232d      	movs	r3, #45	; 0x2d
 8011b86:	426d      	negs	r5, r5
 8011b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b8c:	485e      	ldr	r0, [pc, #376]	; (8011d08 <_printf_i+0x244>)
 8011b8e:	230a      	movs	r3, #10
 8011b90:	e019      	b.n	8011bc6 <_printf_i+0x102>
 8011b92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011b96:	6805      	ldr	r5, [r0, #0]
 8011b98:	600b      	str	r3, [r1, #0]
 8011b9a:	bf18      	it	ne
 8011b9c:	b22d      	sxthne	r5, r5
 8011b9e:	e7ef      	b.n	8011b80 <_printf_i+0xbc>
 8011ba0:	680b      	ldr	r3, [r1, #0]
 8011ba2:	6825      	ldr	r5, [r4, #0]
 8011ba4:	1d18      	adds	r0, r3, #4
 8011ba6:	6008      	str	r0, [r1, #0]
 8011ba8:	0628      	lsls	r0, r5, #24
 8011baa:	d501      	bpl.n	8011bb0 <_printf_i+0xec>
 8011bac:	681d      	ldr	r5, [r3, #0]
 8011bae:	e002      	b.n	8011bb6 <_printf_i+0xf2>
 8011bb0:	0669      	lsls	r1, r5, #25
 8011bb2:	d5fb      	bpl.n	8011bac <_printf_i+0xe8>
 8011bb4:	881d      	ldrh	r5, [r3, #0]
 8011bb6:	4854      	ldr	r0, [pc, #336]	; (8011d08 <_printf_i+0x244>)
 8011bb8:	2f6f      	cmp	r7, #111	; 0x6f
 8011bba:	bf0c      	ite	eq
 8011bbc:	2308      	moveq	r3, #8
 8011bbe:	230a      	movne	r3, #10
 8011bc0:	2100      	movs	r1, #0
 8011bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011bc6:	6866      	ldr	r6, [r4, #4]
 8011bc8:	60a6      	str	r6, [r4, #8]
 8011bca:	2e00      	cmp	r6, #0
 8011bcc:	bfa2      	ittt	ge
 8011bce:	6821      	ldrge	r1, [r4, #0]
 8011bd0:	f021 0104 	bicge.w	r1, r1, #4
 8011bd4:	6021      	strge	r1, [r4, #0]
 8011bd6:	b90d      	cbnz	r5, 8011bdc <_printf_i+0x118>
 8011bd8:	2e00      	cmp	r6, #0
 8011bda:	d04d      	beq.n	8011c78 <_printf_i+0x1b4>
 8011bdc:	4616      	mov	r6, r2
 8011bde:	fbb5 f1f3 	udiv	r1, r5, r3
 8011be2:	fb03 5711 	mls	r7, r3, r1, r5
 8011be6:	5dc7      	ldrb	r7, [r0, r7]
 8011be8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011bec:	462f      	mov	r7, r5
 8011bee:	42bb      	cmp	r3, r7
 8011bf0:	460d      	mov	r5, r1
 8011bf2:	d9f4      	bls.n	8011bde <_printf_i+0x11a>
 8011bf4:	2b08      	cmp	r3, #8
 8011bf6:	d10b      	bne.n	8011c10 <_printf_i+0x14c>
 8011bf8:	6823      	ldr	r3, [r4, #0]
 8011bfa:	07df      	lsls	r7, r3, #31
 8011bfc:	d508      	bpl.n	8011c10 <_printf_i+0x14c>
 8011bfe:	6923      	ldr	r3, [r4, #16]
 8011c00:	6861      	ldr	r1, [r4, #4]
 8011c02:	4299      	cmp	r1, r3
 8011c04:	bfde      	ittt	le
 8011c06:	2330      	movle	r3, #48	; 0x30
 8011c08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011c0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011c10:	1b92      	subs	r2, r2, r6
 8011c12:	6122      	str	r2, [r4, #16]
 8011c14:	f8cd a000 	str.w	sl, [sp]
 8011c18:	464b      	mov	r3, r9
 8011c1a:	aa03      	add	r2, sp, #12
 8011c1c:	4621      	mov	r1, r4
 8011c1e:	4640      	mov	r0, r8
 8011c20:	f7ff fee2 	bl	80119e8 <_printf_common>
 8011c24:	3001      	adds	r0, #1
 8011c26:	d14c      	bne.n	8011cc2 <_printf_i+0x1fe>
 8011c28:	f04f 30ff 	mov.w	r0, #4294967295
 8011c2c:	b004      	add	sp, #16
 8011c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c32:	4835      	ldr	r0, [pc, #212]	; (8011d08 <_printf_i+0x244>)
 8011c34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011c38:	6823      	ldr	r3, [r4, #0]
 8011c3a:	680e      	ldr	r6, [r1, #0]
 8011c3c:	061f      	lsls	r7, r3, #24
 8011c3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8011c42:	600e      	str	r6, [r1, #0]
 8011c44:	d514      	bpl.n	8011c70 <_printf_i+0x1ac>
 8011c46:	07d9      	lsls	r1, r3, #31
 8011c48:	bf44      	itt	mi
 8011c4a:	f043 0320 	orrmi.w	r3, r3, #32
 8011c4e:	6023      	strmi	r3, [r4, #0]
 8011c50:	b91d      	cbnz	r5, 8011c5a <_printf_i+0x196>
 8011c52:	6823      	ldr	r3, [r4, #0]
 8011c54:	f023 0320 	bic.w	r3, r3, #32
 8011c58:	6023      	str	r3, [r4, #0]
 8011c5a:	2310      	movs	r3, #16
 8011c5c:	e7b0      	b.n	8011bc0 <_printf_i+0xfc>
 8011c5e:	6823      	ldr	r3, [r4, #0]
 8011c60:	f043 0320 	orr.w	r3, r3, #32
 8011c64:	6023      	str	r3, [r4, #0]
 8011c66:	2378      	movs	r3, #120	; 0x78
 8011c68:	4828      	ldr	r0, [pc, #160]	; (8011d0c <_printf_i+0x248>)
 8011c6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c6e:	e7e3      	b.n	8011c38 <_printf_i+0x174>
 8011c70:	065e      	lsls	r6, r3, #25
 8011c72:	bf48      	it	mi
 8011c74:	b2ad      	uxthmi	r5, r5
 8011c76:	e7e6      	b.n	8011c46 <_printf_i+0x182>
 8011c78:	4616      	mov	r6, r2
 8011c7a:	e7bb      	b.n	8011bf4 <_printf_i+0x130>
 8011c7c:	680b      	ldr	r3, [r1, #0]
 8011c7e:	6826      	ldr	r6, [r4, #0]
 8011c80:	6960      	ldr	r0, [r4, #20]
 8011c82:	1d1d      	adds	r5, r3, #4
 8011c84:	600d      	str	r5, [r1, #0]
 8011c86:	0635      	lsls	r5, r6, #24
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	d501      	bpl.n	8011c90 <_printf_i+0x1cc>
 8011c8c:	6018      	str	r0, [r3, #0]
 8011c8e:	e002      	b.n	8011c96 <_printf_i+0x1d2>
 8011c90:	0671      	lsls	r1, r6, #25
 8011c92:	d5fb      	bpl.n	8011c8c <_printf_i+0x1c8>
 8011c94:	8018      	strh	r0, [r3, #0]
 8011c96:	2300      	movs	r3, #0
 8011c98:	6123      	str	r3, [r4, #16]
 8011c9a:	4616      	mov	r6, r2
 8011c9c:	e7ba      	b.n	8011c14 <_printf_i+0x150>
 8011c9e:	680b      	ldr	r3, [r1, #0]
 8011ca0:	1d1a      	adds	r2, r3, #4
 8011ca2:	600a      	str	r2, [r1, #0]
 8011ca4:	681e      	ldr	r6, [r3, #0]
 8011ca6:	6862      	ldr	r2, [r4, #4]
 8011ca8:	2100      	movs	r1, #0
 8011caa:	4630      	mov	r0, r6
 8011cac:	f7ee fab8 	bl	8000220 <memchr>
 8011cb0:	b108      	cbz	r0, 8011cb6 <_printf_i+0x1f2>
 8011cb2:	1b80      	subs	r0, r0, r6
 8011cb4:	6060      	str	r0, [r4, #4]
 8011cb6:	6863      	ldr	r3, [r4, #4]
 8011cb8:	6123      	str	r3, [r4, #16]
 8011cba:	2300      	movs	r3, #0
 8011cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011cc0:	e7a8      	b.n	8011c14 <_printf_i+0x150>
 8011cc2:	6923      	ldr	r3, [r4, #16]
 8011cc4:	4632      	mov	r2, r6
 8011cc6:	4649      	mov	r1, r9
 8011cc8:	4640      	mov	r0, r8
 8011cca:	47d0      	blx	sl
 8011ccc:	3001      	adds	r0, #1
 8011cce:	d0ab      	beq.n	8011c28 <_printf_i+0x164>
 8011cd0:	6823      	ldr	r3, [r4, #0]
 8011cd2:	079b      	lsls	r3, r3, #30
 8011cd4:	d413      	bmi.n	8011cfe <_printf_i+0x23a>
 8011cd6:	68e0      	ldr	r0, [r4, #12]
 8011cd8:	9b03      	ldr	r3, [sp, #12]
 8011cda:	4298      	cmp	r0, r3
 8011cdc:	bfb8      	it	lt
 8011cde:	4618      	movlt	r0, r3
 8011ce0:	e7a4      	b.n	8011c2c <_printf_i+0x168>
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	4632      	mov	r2, r6
 8011ce6:	4649      	mov	r1, r9
 8011ce8:	4640      	mov	r0, r8
 8011cea:	47d0      	blx	sl
 8011cec:	3001      	adds	r0, #1
 8011cee:	d09b      	beq.n	8011c28 <_printf_i+0x164>
 8011cf0:	3501      	adds	r5, #1
 8011cf2:	68e3      	ldr	r3, [r4, #12]
 8011cf4:	9903      	ldr	r1, [sp, #12]
 8011cf6:	1a5b      	subs	r3, r3, r1
 8011cf8:	42ab      	cmp	r3, r5
 8011cfa:	dcf2      	bgt.n	8011ce2 <_printf_i+0x21e>
 8011cfc:	e7eb      	b.n	8011cd6 <_printf_i+0x212>
 8011cfe:	2500      	movs	r5, #0
 8011d00:	f104 0619 	add.w	r6, r4, #25
 8011d04:	e7f5      	b.n	8011cf2 <_printf_i+0x22e>
 8011d06:	bf00      	nop
 8011d08:	08018884 	.word	0x08018884
 8011d0c:	08018895 	.word	0x08018895

08011d10 <_scanf_float>:
 8011d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d14:	b087      	sub	sp, #28
 8011d16:	4617      	mov	r7, r2
 8011d18:	9303      	str	r3, [sp, #12]
 8011d1a:	688b      	ldr	r3, [r1, #8]
 8011d1c:	1e5a      	subs	r2, r3, #1
 8011d1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011d22:	bf83      	ittte	hi
 8011d24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011d28:	195b      	addhi	r3, r3, r5
 8011d2a:	9302      	strhi	r3, [sp, #8]
 8011d2c:	2300      	movls	r3, #0
 8011d2e:	bf86      	itte	hi
 8011d30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011d34:	608b      	strhi	r3, [r1, #8]
 8011d36:	9302      	strls	r3, [sp, #8]
 8011d38:	680b      	ldr	r3, [r1, #0]
 8011d3a:	468b      	mov	fp, r1
 8011d3c:	2500      	movs	r5, #0
 8011d3e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011d42:	f84b 3b1c 	str.w	r3, [fp], #28
 8011d46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011d4a:	4680      	mov	r8, r0
 8011d4c:	460c      	mov	r4, r1
 8011d4e:	465e      	mov	r6, fp
 8011d50:	46aa      	mov	sl, r5
 8011d52:	46a9      	mov	r9, r5
 8011d54:	9501      	str	r5, [sp, #4]
 8011d56:	68a2      	ldr	r2, [r4, #8]
 8011d58:	b152      	cbz	r2, 8011d70 <_scanf_float+0x60>
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	781b      	ldrb	r3, [r3, #0]
 8011d5e:	2b4e      	cmp	r3, #78	; 0x4e
 8011d60:	d864      	bhi.n	8011e2c <_scanf_float+0x11c>
 8011d62:	2b40      	cmp	r3, #64	; 0x40
 8011d64:	d83c      	bhi.n	8011de0 <_scanf_float+0xd0>
 8011d66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011d6a:	b2c8      	uxtb	r0, r1
 8011d6c:	280e      	cmp	r0, #14
 8011d6e:	d93a      	bls.n	8011de6 <_scanf_float+0xd6>
 8011d70:	f1b9 0f00 	cmp.w	r9, #0
 8011d74:	d003      	beq.n	8011d7e <_scanf_float+0x6e>
 8011d76:	6823      	ldr	r3, [r4, #0]
 8011d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011d7c:	6023      	str	r3, [r4, #0]
 8011d7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d82:	f1ba 0f01 	cmp.w	sl, #1
 8011d86:	f200 8113 	bhi.w	8011fb0 <_scanf_float+0x2a0>
 8011d8a:	455e      	cmp	r6, fp
 8011d8c:	f200 8105 	bhi.w	8011f9a <_scanf_float+0x28a>
 8011d90:	2501      	movs	r5, #1
 8011d92:	4628      	mov	r0, r5
 8011d94:	b007      	add	sp, #28
 8011d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011d9e:	2a0d      	cmp	r2, #13
 8011da0:	d8e6      	bhi.n	8011d70 <_scanf_float+0x60>
 8011da2:	a101      	add	r1, pc, #4	; (adr r1, 8011da8 <_scanf_float+0x98>)
 8011da4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011da8:	08011ee7 	.word	0x08011ee7
 8011dac:	08011d71 	.word	0x08011d71
 8011db0:	08011d71 	.word	0x08011d71
 8011db4:	08011d71 	.word	0x08011d71
 8011db8:	08011f47 	.word	0x08011f47
 8011dbc:	08011f1f 	.word	0x08011f1f
 8011dc0:	08011d71 	.word	0x08011d71
 8011dc4:	08011d71 	.word	0x08011d71
 8011dc8:	08011ef5 	.word	0x08011ef5
 8011dcc:	08011d71 	.word	0x08011d71
 8011dd0:	08011d71 	.word	0x08011d71
 8011dd4:	08011d71 	.word	0x08011d71
 8011dd8:	08011d71 	.word	0x08011d71
 8011ddc:	08011ead 	.word	0x08011ead
 8011de0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011de4:	e7db      	b.n	8011d9e <_scanf_float+0x8e>
 8011de6:	290e      	cmp	r1, #14
 8011de8:	d8c2      	bhi.n	8011d70 <_scanf_float+0x60>
 8011dea:	a001      	add	r0, pc, #4	; (adr r0, 8011df0 <_scanf_float+0xe0>)
 8011dec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011df0:	08011e9f 	.word	0x08011e9f
 8011df4:	08011d71 	.word	0x08011d71
 8011df8:	08011e9f 	.word	0x08011e9f
 8011dfc:	08011f33 	.word	0x08011f33
 8011e00:	08011d71 	.word	0x08011d71
 8011e04:	08011e4d 	.word	0x08011e4d
 8011e08:	08011e89 	.word	0x08011e89
 8011e0c:	08011e89 	.word	0x08011e89
 8011e10:	08011e89 	.word	0x08011e89
 8011e14:	08011e89 	.word	0x08011e89
 8011e18:	08011e89 	.word	0x08011e89
 8011e1c:	08011e89 	.word	0x08011e89
 8011e20:	08011e89 	.word	0x08011e89
 8011e24:	08011e89 	.word	0x08011e89
 8011e28:	08011e89 	.word	0x08011e89
 8011e2c:	2b6e      	cmp	r3, #110	; 0x6e
 8011e2e:	d809      	bhi.n	8011e44 <_scanf_float+0x134>
 8011e30:	2b60      	cmp	r3, #96	; 0x60
 8011e32:	d8b2      	bhi.n	8011d9a <_scanf_float+0x8a>
 8011e34:	2b54      	cmp	r3, #84	; 0x54
 8011e36:	d077      	beq.n	8011f28 <_scanf_float+0x218>
 8011e38:	2b59      	cmp	r3, #89	; 0x59
 8011e3a:	d199      	bne.n	8011d70 <_scanf_float+0x60>
 8011e3c:	2d07      	cmp	r5, #7
 8011e3e:	d197      	bne.n	8011d70 <_scanf_float+0x60>
 8011e40:	2508      	movs	r5, #8
 8011e42:	e029      	b.n	8011e98 <_scanf_float+0x188>
 8011e44:	2b74      	cmp	r3, #116	; 0x74
 8011e46:	d06f      	beq.n	8011f28 <_scanf_float+0x218>
 8011e48:	2b79      	cmp	r3, #121	; 0x79
 8011e4a:	e7f6      	b.n	8011e3a <_scanf_float+0x12a>
 8011e4c:	6821      	ldr	r1, [r4, #0]
 8011e4e:	05c8      	lsls	r0, r1, #23
 8011e50:	d51a      	bpl.n	8011e88 <_scanf_float+0x178>
 8011e52:	9b02      	ldr	r3, [sp, #8]
 8011e54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011e58:	6021      	str	r1, [r4, #0]
 8011e5a:	f109 0901 	add.w	r9, r9, #1
 8011e5e:	b11b      	cbz	r3, 8011e68 <_scanf_float+0x158>
 8011e60:	3b01      	subs	r3, #1
 8011e62:	3201      	adds	r2, #1
 8011e64:	9302      	str	r3, [sp, #8]
 8011e66:	60a2      	str	r2, [r4, #8]
 8011e68:	68a3      	ldr	r3, [r4, #8]
 8011e6a:	3b01      	subs	r3, #1
 8011e6c:	60a3      	str	r3, [r4, #8]
 8011e6e:	6923      	ldr	r3, [r4, #16]
 8011e70:	3301      	adds	r3, #1
 8011e72:	6123      	str	r3, [r4, #16]
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	3b01      	subs	r3, #1
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	607b      	str	r3, [r7, #4]
 8011e7c:	f340 8084 	ble.w	8011f88 <_scanf_float+0x278>
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	3301      	adds	r3, #1
 8011e84:	603b      	str	r3, [r7, #0]
 8011e86:	e766      	b.n	8011d56 <_scanf_float+0x46>
 8011e88:	eb1a 0f05 	cmn.w	sl, r5
 8011e8c:	f47f af70 	bne.w	8011d70 <_scanf_float+0x60>
 8011e90:	6822      	ldr	r2, [r4, #0]
 8011e92:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011e96:	6022      	str	r2, [r4, #0]
 8011e98:	f806 3b01 	strb.w	r3, [r6], #1
 8011e9c:	e7e4      	b.n	8011e68 <_scanf_float+0x158>
 8011e9e:	6822      	ldr	r2, [r4, #0]
 8011ea0:	0610      	lsls	r0, r2, #24
 8011ea2:	f57f af65 	bpl.w	8011d70 <_scanf_float+0x60>
 8011ea6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011eaa:	e7f4      	b.n	8011e96 <_scanf_float+0x186>
 8011eac:	f1ba 0f00 	cmp.w	sl, #0
 8011eb0:	d10e      	bne.n	8011ed0 <_scanf_float+0x1c0>
 8011eb2:	f1b9 0f00 	cmp.w	r9, #0
 8011eb6:	d10e      	bne.n	8011ed6 <_scanf_float+0x1c6>
 8011eb8:	6822      	ldr	r2, [r4, #0]
 8011eba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011ebe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011ec2:	d108      	bne.n	8011ed6 <_scanf_float+0x1c6>
 8011ec4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011ec8:	6022      	str	r2, [r4, #0]
 8011eca:	f04f 0a01 	mov.w	sl, #1
 8011ece:	e7e3      	b.n	8011e98 <_scanf_float+0x188>
 8011ed0:	f1ba 0f02 	cmp.w	sl, #2
 8011ed4:	d055      	beq.n	8011f82 <_scanf_float+0x272>
 8011ed6:	2d01      	cmp	r5, #1
 8011ed8:	d002      	beq.n	8011ee0 <_scanf_float+0x1d0>
 8011eda:	2d04      	cmp	r5, #4
 8011edc:	f47f af48 	bne.w	8011d70 <_scanf_float+0x60>
 8011ee0:	3501      	adds	r5, #1
 8011ee2:	b2ed      	uxtb	r5, r5
 8011ee4:	e7d8      	b.n	8011e98 <_scanf_float+0x188>
 8011ee6:	f1ba 0f01 	cmp.w	sl, #1
 8011eea:	f47f af41 	bne.w	8011d70 <_scanf_float+0x60>
 8011eee:	f04f 0a02 	mov.w	sl, #2
 8011ef2:	e7d1      	b.n	8011e98 <_scanf_float+0x188>
 8011ef4:	b97d      	cbnz	r5, 8011f16 <_scanf_float+0x206>
 8011ef6:	f1b9 0f00 	cmp.w	r9, #0
 8011efa:	f47f af3c 	bne.w	8011d76 <_scanf_float+0x66>
 8011efe:	6822      	ldr	r2, [r4, #0]
 8011f00:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011f04:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011f08:	f47f af39 	bne.w	8011d7e <_scanf_float+0x6e>
 8011f0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011f10:	6022      	str	r2, [r4, #0]
 8011f12:	2501      	movs	r5, #1
 8011f14:	e7c0      	b.n	8011e98 <_scanf_float+0x188>
 8011f16:	2d03      	cmp	r5, #3
 8011f18:	d0e2      	beq.n	8011ee0 <_scanf_float+0x1d0>
 8011f1a:	2d05      	cmp	r5, #5
 8011f1c:	e7de      	b.n	8011edc <_scanf_float+0x1cc>
 8011f1e:	2d02      	cmp	r5, #2
 8011f20:	f47f af26 	bne.w	8011d70 <_scanf_float+0x60>
 8011f24:	2503      	movs	r5, #3
 8011f26:	e7b7      	b.n	8011e98 <_scanf_float+0x188>
 8011f28:	2d06      	cmp	r5, #6
 8011f2a:	f47f af21 	bne.w	8011d70 <_scanf_float+0x60>
 8011f2e:	2507      	movs	r5, #7
 8011f30:	e7b2      	b.n	8011e98 <_scanf_float+0x188>
 8011f32:	6822      	ldr	r2, [r4, #0]
 8011f34:	0591      	lsls	r1, r2, #22
 8011f36:	f57f af1b 	bpl.w	8011d70 <_scanf_float+0x60>
 8011f3a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011f3e:	6022      	str	r2, [r4, #0]
 8011f40:	f8cd 9004 	str.w	r9, [sp, #4]
 8011f44:	e7a8      	b.n	8011e98 <_scanf_float+0x188>
 8011f46:	6822      	ldr	r2, [r4, #0]
 8011f48:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011f4c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011f50:	d006      	beq.n	8011f60 <_scanf_float+0x250>
 8011f52:	0550      	lsls	r0, r2, #21
 8011f54:	f57f af0c 	bpl.w	8011d70 <_scanf_float+0x60>
 8011f58:	f1b9 0f00 	cmp.w	r9, #0
 8011f5c:	f43f af0f 	beq.w	8011d7e <_scanf_float+0x6e>
 8011f60:	0591      	lsls	r1, r2, #22
 8011f62:	bf58      	it	pl
 8011f64:	9901      	ldrpl	r1, [sp, #4]
 8011f66:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011f6a:	bf58      	it	pl
 8011f6c:	eba9 0101 	subpl.w	r1, r9, r1
 8011f70:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011f74:	bf58      	it	pl
 8011f76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011f7a:	6022      	str	r2, [r4, #0]
 8011f7c:	f04f 0900 	mov.w	r9, #0
 8011f80:	e78a      	b.n	8011e98 <_scanf_float+0x188>
 8011f82:	f04f 0a03 	mov.w	sl, #3
 8011f86:	e787      	b.n	8011e98 <_scanf_float+0x188>
 8011f88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011f8c:	4639      	mov	r1, r7
 8011f8e:	4640      	mov	r0, r8
 8011f90:	4798      	blx	r3
 8011f92:	2800      	cmp	r0, #0
 8011f94:	f43f aedf 	beq.w	8011d56 <_scanf_float+0x46>
 8011f98:	e6ea      	b.n	8011d70 <_scanf_float+0x60>
 8011f9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011f9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011fa2:	463a      	mov	r2, r7
 8011fa4:	4640      	mov	r0, r8
 8011fa6:	4798      	blx	r3
 8011fa8:	6923      	ldr	r3, [r4, #16]
 8011faa:	3b01      	subs	r3, #1
 8011fac:	6123      	str	r3, [r4, #16]
 8011fae:	e6ec      	b.n	8011d8a <_scanf_float+0x7a>
 8011fb0:	1e6b      	subs	r3, r5, #1
 8011fb2:	2b06      	cmp	r3, #6
 8011fb4:	d825      	bhi.n	8012002 <_scanf_float+0x2f2>
 8011fb6:	2d02      	cmp	r5, #2
 8011fb8:	d836      	bhi.n	8012028 <_scanf_float+0x318>
 8011fba:	455e      	cmp	r6, fp
 8011fbc:	f67f aee8 	bls.w	8011d90 <_scanf_float+0x80>
 8011fc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011fc4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011fc8:	463a      	mov	r2, r7
 8011fca:	4640      	mov	r0, r8
 8011fcc:	4798      	blx	r3
 8011fce:	6923      	ldr	r3, [r4, #16]
 8011fd0:	3b01      	subs	r3, #1
 8011fd2:	6123      	str	r3, [r4, #16]
 8011fd4:	e7f1      	b.n	8011fba <_scanf_float+0x2aa>
 8011fd6:	9802      	ldr	r0, [sp, #8]
 8011fd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011fdc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011fe0:	9002      	str	r0, [sp, #8]
 8011fe2:	463a      	mov	r2, r7
 8011fe4:	4640      	mov	r0, r8
 8011fe6:	4798      	blx	r3
 8011fe8:	6923      	ldr	r3, [r4, #16]
 8011fea:	3b01      	subs	r3, #1
 8011fec:	6123      	str	r3, [r4, #16]
 8011fee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011ff2:	fa5f fa8a 	uxtb.w	sl, sl
 8011ff6:	f1ba 0f02 	cmp.w	sl, #2
 8011ffa:	d1ec      	bne.n	8011fd6 <_scanf_float+0x2c6>
 8011ffc:	3d03      	subs	r5, #3
 8011ffe:	b2ed      	uxtb	r5, r5
 8012000:	1b76      	subs	r6, r6, r5
 8012002:	6823      	ldr	r3, [r4, #0]
 8012004:	05da      	lsls	r2, r3, #23
 8012006:	d52f      	bpl.n	8012068 <_scanf_float+0x358>
 8012008:	055b      	lsls	r3, r3, #21
 801200a:	d510      	bpl.n	801202e <_scanf_float+0x31e>
 801200c:	455e      	cmp	r6, fp
 801200e:	f67f aebf 	bls.w	8011d90 <_scanf_float+0x80>
 8012012:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012016:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801201a:	463a      	mov	r2, r7
 801201c:	4640      	mov	r0, r8
 801201e:	4798      	blx	r3
 8012020:	6923      	ldr	r3, [r4, #16]
 8012022:	3b01      	subs	r3, #1
 8012024:	6123      	str	r3, [r4, #16]
 8012026:	e7f1      	b.n	801200c <_scanf_float+0x2fc>
 8012028:	46aa      	mov	sl, r5
 801202a:	9602      	str	r6, [sp, #8]
 801202c:	e7df      	b.n	8011fee <_scanf_float+0x2de>
 801202e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012032:	6923      	ldr	r3, [r4, #16]
 8012034:	2965      	cmp	r1, #101	; 0x65
 8012036:	f103 33ff 	add.w	r3, r3, #4294967295
 801203a:	f106 35ff 	add.w	r5, r6, #4294967295
 801203e:	6123      	str	r3, [r4, #16]
 8012040:	d00c      	beq.n	801205c <_scanf_float+0x34c>
 8012042:	2945      	cmp	r1, #69	; 0x45
 8012044:	d00a      	beq.n	801205c <_scanf_float+0x34c>
 8012046:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801204a:	463a      	mov	r2, r7
 801204c:	4640      	mov	r0, r8
 801204e:	4798      	blx	r3
 8012050:	6923      	ldr	r3, [r4, #16]
 8012052:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012056:	3b01      	subs	r3, #1
 8012058:	1eb5      	subs	r5, r6, #2
 801205a:	6123      	str	r3, [r4, #16]
 801205c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012060:	463a      	mov	r2, r7
 8012062:	4640      	mov	r0, r8
 8012064:	4798      	blx	r3
 8012066:	462e      	mov	r6, r5
 8012068:	6825      	ldr	r5, [r4, #0]
 801206a:	f015 0510 	ands.w	r5, r5, #16
 801206e:	d158      	bne.n	8012122 <_scanf_float+0x412>
 8012070:	7035      	strb	r5, [r6, #0]
 8012072:	6823      	ldr	r3, [r4, #0]
 8012074:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801207c:	d11c      	bne.n	80120b8 <_scanf_float+0x3a8>
 801207e:	9b01      	ldr	r3, [sp, #4]
 8012080:	454b      	cmp	r3, r9
 8012082:	eba3 0209 	sub.w	r2, r3, r9
 8012086:	d124      	bne.n	80120d2 <_scanf_float+0x3c2>
 8012088:	2200      	movs	r2, #0
 801208a:	4659      	mov	r1, fp
 801208c:	4640      	mov	r0, r8
 801208e:	f001 f875 	bl	801317c <_strtod_r>
 8012092:	9b03      	ldr	r3, [sp, #12]
 8012094:	6821      	ldr	r1, [r4, #0]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	f011 0f02 	tst.w	r1, #2
 801209c:	ec57 6b10 	vmov	r6, r7, d0
 80120a0:	f103 0204 	add.w	r2, r3, #4
 80120a4:	d020      	beq.n	80120e8 <_scanf_float+0x3d8>
 80120a6:	9903      	ldr	r1, [sp, #12]
 80120a8:	600a      	str	r2, [r1, #0]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	e9c3 6700 	strd	r6, r7, [r3]
 80120b0:	68e3      	ldr	r3, [r4, #12]
 80120b2:	3301      	adds	r3, #1
 80120b4:	60e3      	str	r3, [r4, #12]
 80120b6:	e66c      	b.n	8011d92 <_scanf_float+0x82>
 80120b8:	9b04      	ldr	r3, [sp, #16]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d0e4      	beq.n	8012088 <_scanf_float+0x378>
 80120be:	9905      	ldr	r1, [sp, #20]
 80120c0:	230a      	movs	r3, #10
 80120c2:	462a      	mov	r2, r5
 80120c4:	3101      	adds	r1, #1
 80120c6:	4640      	mov	r0, r8
 80120c8:	f001 f8e2 	bl	8013290 <_strtol_r>
 80120cc:	9b04      	ldr	r3, [sp, #16]
 80120ce:	9e05      	ldr	r6, [sp, #20]
 80120d0:	1ac2      	subs	r2, r0, r3
 80120d2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80120d6:	429e      	cmp	r6, r3
 80120d8:	bf28      	it	cs
 80120da:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80120de:	4912      	ldr	r1, [pc, #72]	; (8012128 <_scanf_float+0x418>)
 80120e0:	4630      	mov	r0, r6
 80120e2:	f000 f977 	bl	80123d4 <siprintf>
 80120e6:	e7cf      	b.n	8012088 <_scanf_float+0x378>
 80120e8:	f011 0f04 	tst.w	r1, #4
 80120ec:	9903      	ldr	r1, [sp, #12]
 80120ee:	600a      	str	r2, [r1, #0]
 80120f0:	d1db      	bne.n	80120aa <_scanf_float+0x39a>
 80120f2:	f8d3 8000 	ldr.w	r8, [r3]
 80120f6:	ee10 2a10 	vmov	r2, s0
 80120fa:	ee10 0a10 	vmov	r0, s0
 80120fe:	463b      	mov	r3, r7
 8012100:	4639      	mov	r1, r7
 8012102:	f7ee fd33 	bl	8000b6c <__aeabi_dcmpun>
 8012106:	b128      	cbz	r0, 8012114 <_scanf_float+0x404>
 8012108:	4808      	ldr	r0, [pc, #32]	; (801212c <_scanf_float+0x41c>)
 801210a:	f000 f919 	bl	8012340 <nanf>
 801210e:	ed88 0a00 	vstr	s0, [r8]
 8012112:	e7cd      	b.n	80120b0 <_scanf_float+0x3a0>
 8012114:	4630      	mov	r0, r6
 8012116:	4639      	mov	r1, r7
 8012118:	f7ee fd86 	bl	8000c28 <__aeabi_d2f>
 801211c:	f8c8 0000 	str.w	r0, [r8]
 8012120:	e7c6      	b.n	80120b0 <_scanf_float+0x3a0>
 8012122:	2500      	movs	r5, #0
 8012124:	e635      	b.n	8011d92 <_scanf_float+0x82>
 8012126:	bf00      	nop
 8012128:	080188a6 	.word	0x080188a6
 801212c:	08018977 	.word	0x08018977

08012130 <iprintf>:
 8012130:	b40f      	push	{r0, r1, r2, r3}
 8012132:	4b0a      	ldr	r3, [pc, #40]	; (801215c <iprintf+0x2c>)
 8012134:	b513      	push	{r0, r1, r4, lr}
 8012136:	681c      	ldr	r4, [r3, #0]
 8012138:	b124      	cbz	r4, 8012144 <iprintf+0x14>
 801213a:	69a3      	ldr	r3, [r4, #24]
 801213c:	b913      	cbnz	r3, 8012144 <iprintf+0x14>
 801213e:	4620      	mov	r0, r4
 8012140:	f7fe fc30 	bl	80109a4 <__sinit>
 8012144:	ab05      	add	r3, sp, #20
 8012146:	9a04      	ldr	r2, [sp, #16]
 8012148:	68a1      	ldr	r1, [r4, #8]
 801214a:	9301      	str	r3, [sp, #4]
 801214c:	4620      	mov	r0, r4
 801214e:	f004 f905 	bl	801635c <_vfiprintf_r>
 8012152:	b002      	add	sp, #8
 8012154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012158:	b004      	add	sp, #16
 801215a:	4770      	bx	lr
 801215c:	20000040 	.word	0x20000040

08012160 <_puts_r>:
 8012160:	b570      	push	{r4, r5, r6, lr}
 8012162:	460e      	mov	r6, r1
 8012164:	4605      	mov	r5, r0
 8012166:	b118      	cbz	r0, 8012170 <_puts_r+0x10>
 8012168:	6983      	ldr	r3, [r0, #24]
 801216a:	b90b      	cbnz	r3, 8012170 <_puts_r+0x10>
 801216c:	f7fe fc1a 	bl	80109a4 <__sinit>
 8012170:	69ab      	ldr	r3, [r5, #24]
 8012172:	68ac      	ldr	r4, [r5, #8]
 8012174:	b913      	cbnz	r3, 801217c <_puts_r+0x1c>
 8012176:	4628      	mov	r0, r5
 8012178:	f7fe fc14 	bl	80109a4 <__sinit>
 801217c:	4b2c      	ldr	r3, [pc, #176]	; (8012230 <_puts_r+0xd0>)
 801217e:	429c      	cmp	r4, r3
 8012180:	d120      	bne.n	80121c4 <_puts_r+0x64>
 8012182:	686c      	ldr	r4, [r5, #4]
 8012184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012186:	07db      	lsls	r3, r3, #31
 8012188:	d405      	bmi.n	8012196 <_puts_r+0x36>
 801218a:	89a3      	ldrh	r3, [r4, #12]
 801218c:	0598      	lsls	r0, r3, #22
 801218e:	d402      	bmi.n	8012196 <_puts_r+0x36>
 8012190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012192:	f7fe fde7 	bl	8010d64 <__retarget_lock_acquire_recursive>
 8012196:	89a3      	ldrh	r3, [r4, #12]
 8012198:	0719      	lsls	r1, r3, #28
 801219a:	d51d      	bpl.n	80121d8 <_puts_r+0x78>
 801219c:	6923      	ldr	r3, [r4, #16]
 801219e:	b1db      	cbz	r3, 80121d8 <_puts_r+0x78>
 80121a0:	3e01      	subs	r6, #1
 80121a2:	68a3      	ldr	r3, [r4, #8]
 80121a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80121a8:	3b01      	subs	r3, #1
 80121aa:	60a3      	str	r3, [r4, #8]
 80121ac:	bb39      	cbnz	r1, 80121fe <_puts_r+0x9e>
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	da38      	bge.n	8012224 <_puts_r+0xc4>
 80121b2:	4622      	mov	r2, r4
 80121b4:	210a      	movs	r1, #10
 80121b6:	4628      	mov	r0, r5
 80121b8:	f001 fb2a 	bl	8013810 <__swbuf_r>
 80121bc:	3001      	adds	r0, #1
 80121be:	d011      	beq.n	80121e4 <_puts_r+0x84>
 80121c0:	250a      	movs	r5, #10
 80121c2:	e011      	b.n	80121e8 <_puts_r+0x88>
 80121c4:	4b1b      	ldr	r3, [pc, #108]	; (8012234 <_puts_r+0xd4>)
 80121c6:	429c      	cmp	r4, r3
 80121c8:	d101      	bne.n	80121ce <_puts_r+0x6e>
 80121ca:	68ac      	ldr	r4, [r5, #8]
 80121cc:	e7da      	b.n	8012184 <_puts_r+0x24>
 80121ce:	4b1a      	ldr	r3, [pc, #104]	; (8012238 <_puts_r+0xd8>)
 80121d0:	429c      	cmp	r4, r3
 80121d2:	bf08      	it	eq
 80121d4:	68ec      	ldreq	r4, [r5, #12]
 80121d6:	e7d5      	b.n	8012184 <_puts_r+0x24>
 80121d8:	4621      	mov	r1, r4
 80121da:	4628      	mov	r0, r5
 80121dc:	f001 fb7c 	bl	80138d8 <__swsetup_r>
 80121e0:	2800      	cmp	r0, #0
 80121e2:	d0dd      	beq.n	80121a0 <_puts_r+0x40>
 80121e4:	f04f 35ff 	mov.w	r5, #4294967295
 80121e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80121ea:	07da      	lsls	r2, r3, #31
 80121ec:	d405      	bmi.n	80121fa <_puts_r+0x9a>
 80121ee:	89a3      	ldrh	r3, [r4, #12]
 80121f0:	059b      	lsls	r3, r3, #22
 80121f2:	d402      	bmi.n	80121fa <_puts_r+0x9a>
 80121f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121f6:	f7fe fdb7 	bl	8010d68 <__retarget_lock_release_recursive>
 80121fa:	4628      	mov	r0, r5
 80121fc:	bd70      	pop	{r4, r5, r6, pc}
 80121fe:	2b00      	cmp	r3, #0
 8012200:	da04      	bge.n	801220c <_puts_r+0xac>
 8012202:	69a2      	ldr	r2, [r4, #24]
 8012204:	429a      	cmp	r2, r3
 8012206:	dc06      	bgt.n	8012216 <_puts_r+0xb6>
 8012208:	290a      	cmp	r1, #10
 801220a:	d004      	beq.n	8012216 <_puts_r+0xb6>
 801220c:	6823      	ldr	r3, [r4, #0]
 801220e:	1c5a      	adds	r2, r3, #1
 8012210:	6022      	str	r2, [r4, #0]
 8012212:	7019      	strb	r1, [r3, #0]
 8012214:	e7c5      	b.n	80121a2 <_puts_r+0x42>
 8012216:	4622      	mov	r2, r4
 8012218:	4628      	mov	r0, r5
 801221a:	f001 faf9 	bl	8013810 <__swbuf_r>
 801221e:	3001      	adds	r0, #1
 8012220:	d1bf      	bne.n	80121a2 <_puts_r+0x42>
 8012222:	e7df      	b.n	80121e4 <_puts_r+0x84>
 8012224:	6823      	ldr	r3, [r4, #0]
 8012226:	250a      	movs	r5, #10
 8012228:	1c5a      	adds	r2, r3, #1
 801222a:	6022      	str	r2, [r4, #0]
 801222c:	701d      	strb	r5, [r3, #0]
 801222e:	e7db      	b.n	80121e8 <_puts_r+0x88>
 8012230:	080186f8 	.word	0x080186f8
 8012234:	08018718 	.word	0x08018718
 8012238:	080186d8 	.word	0x080186d8

0801223c <puts>:
 801223c:	4b02      	ldr	r3, [pc, #8]	; (8012248 <puts+0xc>)
 801223e:	4601      	mov	r1, r0
 8012240:	6818      	ldr	r0, [r3, #0]
 8012242:	f7ff bf8d 	b.w	8012160 <_puts_r>
 8012246:	bf00      	nop
 8012248:	20000040 	.word	0x20000040

0801224c <cleanup_glue>:
 801224c:	b538      	push	{r3, r4, r5, lr}
 801224e:	460c      	mov	r4, r1
 8012250:	6809      	ldr	r1, [r1, #0]
 8012252:	4605      	mov	r5, r0
 8012254:	b109      	cbz	r1, 801225a <cleanup_glue+0xe>
 8012256:	f7ff fff9 	bl	801224c <cleanup_glue>
 801225a:	4621      	mov	r1, r4
 801225c:	4628      	mov	r0, r5
 801225e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012262:	f7ff b841 	b.w	80112e8 <_free_r>
	...

08012268 <_reclaim_reent>:
 8012268:	4b2c      	ldr	r3, [pc, #176]	; (801231c <_reclaim_reent+0xb4>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	4283      	cmp	r3, r0
 801226e:	b570      	push	{r4, r5, r6, lr}
 8012270:	4604      	mov	r4, r0
 8012272:	d051      	beq.n	8012318 <_reclaim_reent+0xb0>
 8012274:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012276:	b143      	cbz	r3, 801228a <_reclaim_reent+0x22>
 8012278:	68db      	ldr	r3, [r3, #12]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d14a      	bne.n	8012314 <_reclaim_reent+0xac>
 801227e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012280:	6819      	ldr	r1, [r3, #0]
 8012282:	b111      	cbz	r1, 801228a <_reclaim_reent+0x22>
 8012284:	4620      	mov	r0, r4
 8012286:	f7ff f82f 	bl	80112e8 <_free_r>
 801228a:	6961      	ldr	r1, [r4, #20]
 801228c:	b111      	cbz	r1, 8012294 <_reclaim_reent+0x2c>
 801228e:	4620      	mov	r0, r4
 8012290:	f7ff f82a 	bl	80112e8 <_free_r>
 8012294:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012296:	b111      	cbz	r1, 801229e <_reclaim_reent+0x36>
 8012298:	4620      	mov	r0, r4
 801229a:	f7ff f825 	bl	80112e8 <_free_r>
 801229e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80122a0:	b111      	cbz	r1, 80122a8 <_reclaim_reent+0x40>
 80122a2:	4620      	mov	r0, r4
 80122a4:	f7ff f820 	bl	80112e8 <_free_r>
 80122a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80122aa:	b111      	cbz	r1, 80122b2 <_reclaim_reent+0x4a>
 80122ac:	4620      	mov	r0, r4
 80122ae:	f7ff f81b 	bl	80112e8 <_free_r>
 80122b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80122b4:	b111      	cbz	r1, 80122bc <_reclaim_reent+0x54>
 80122b6:	4620      	mov	r0, r4
 80122b8:	f7ff f816 	bl	80112e8 <_free_r>
 80122bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80122be:	b111      	cbz	r1, 80122c6 <_reclaim_reent+0x5e>
 80122c0:	4620      	mov	r0, r4
 80122c2:	f7ff f811 	bl	80112e8 <_free_r>
 80122c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80122c8:	b111      	cbz	r1, 80122d0 <_reclaim_reent+0x68>
 80122ca:	4620      	mov	r0, r4
 80122cc:	f7ff f80c 	bl	80112e8 <_free_r>
 80122d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122d2:	b111      	cbz	r1, 80122da <_reclaim_reent+0x72>
 80122d4:	4620      	mov	r0, r4
 80122d6:	f7ff f807 	bl	80112e8 <_free_r>
 80122da:	69a3      	ldr	r3, [r4, #24]
 80122dc:	b1e3      	cbz	r3, 8012318 <_reclaim_reent+0xb0>
 80122de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80122e0:	4620      	mov	r0, r4
 80122e2:	4798      	blx	r3
 80122e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80122e6:	b1b9      	cbz	r1, 8012318 <_reclaim_reent+0xb0>
 80122e8:	4620      	mov	r0, r4
 80122ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122ee:	f7ff bfad 	b.w	801224c <cleanup_glue>
 80122f2:	5949      	ldr	r1, [r1, r5]
 80122f4:	b941      	cbnz	r1, 8012308 <_reclaim_reent+0xa0>
 80122f6:	3504      	adds	r5, #4
 80122f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122fa:	2d80      	cmp	r5, #128	; 0x80
 80122fc:	68d9      	ldr	r1, [r3, #12]
 80122fe:	d1f8      	bne.n	80122f2 <_reclaim_reent+0x8a>
 8012300:	4620      	mov	r0, r4
 8012302:	f7fe fff1 	bl	80112e8 <_free_r>
 8012306:	e7ba      	b.n	801227e <_reclaim_reent+0x16>
 8012308:	680e      	ldr	r6, [r1, #0]
 801230a:	4620      	mov	r0, r4
 801230c:	f7fe ffec 	bl	80112e8 <_free_r>
 8012310:	4631      	mov	r1, r6
 8012312:	e7ef      	b.n	80122f4 <_reclaim_reent+0x8c>
 8012314:	2500      	movs	r5, #0
 8012316:	e7ef      	b.n	80122f8 <_reclaim_reent+0x90>
 8012318:	bd70      	pop	{r4, r5, r6, pc}
 801231a:	bf00      	nop
 801231c:	20000040 	.word	0x20000040

08012320 <_sbrk_r>:
 8012320:	b538      	push	{r3, r4, r5, lr}
 8012322:	4d06      	ldr	r5, [pc, #24]	; (801233c <_sbrk_r+0x1c>)
 8012324:	2300      	movs	r3, #0
 8012326:	4604      	mov	r4, r0
 8012328:	4608      	mov	r0, r1
 801232a:	602b      	str	r3, [r5, #0]
 801232c:	f7f0 ff3a 	bl	80031a4 <_sbrk>
 8012330:	1c43      	adds	r3, r0, #1
 8012332:	d102      	bne.n	801233a <_sbrk_r+0x1a>
 8012334:	682b      	ldr	r3, [r5, #0]
 8012336:	b103      	cbz	r3, 801233a <_sbrk_r+0x1a>
 8012338:	6023      	str	r3, [r4, #0]
 801233a:	bd38      	pop	{r3, r4, r5, pc}
 801233c:	20006190 	.word	0x20006190

08012340 <nanf>:
 8012340:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012348 <nanf+0x8>
 8012344:	4770      	bx	lr
 8012346:	bf00      	nop
 8012348:	7fc00000 	.word	0x7fc00000

0801234c <_raise_r>:
 801234c:	291f      	cmp	r1, #31
 801234e:	b538      	push	{r3, r4, r5, lr}
 8012350:	4604      	mov	r4, r0
 8012352:	460d      	mov	r5, r1
 8012354:	d904      	bls.n	8012360 <_raise_r+0x14>
 8012356:	2316      	movs	r3, #22
 8012358:	6003      	str	r3, [r0, #0]
 801235a:	f04f 30ff 	mov.w	r0, #4294967295
 801235e:	bd38      	pop	{r3, r4, r5, pc}
 8012360:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012362:	b112      	cbz	r2, 801236a <_raise_r+0x1e>
 8012364:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012368:	b94b      	cbnz	r3, 801237e <_raise_r+0x32>
 801236a:	4620      	mov	r0, r4
 801236c:	f000 f830 	bl	80123d0 <_getpid_r>
 8012370:	462a      	mov	r2, r5
 8012372:	4601      	mov	r1, r0
 8012374:	4620      	mov	r0, r4
 8012376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801237a:	f000 b817 	b.w	80123ac <_kill_r>
 801237e:	2b01      	cmp	r3, #1
 8012380:	d00a      	beq.n	8012398 <_raise_r+0x4c>
 8012382:	1c59      	adds	r1, r3, #1
 8012384:	d103      	bne.n	801238e <_raise_r+0x42>
 8012386:	2316      	movs	r3, #22
 8012388:	6003      	str	r3, [r0, #0]
 801238a:	2001      	movs	r0, #1
 801238c:	e7e7      	b.n	801235e <_raise_r+0x12>
 801238e:	2400      	movs	r4, #0
 8012390:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012394:	4628      	mov	r0, r5
 8012396:	4798      	blx	r3
 8012398:	2000      	movs	r0, #0
 801239a:	e7e0      	b.n	801235e <_raise_r+0x12>

0801239c <raise>:
 801239c:	4b02      	ldr	r3, [pc, #8]	; (80123a8 <raise+0xc>)
 801239e:	4601      	mov	r1, r0
 80123a0:	6818      	ldr	r0, [r3, #0]
 80123a2:	f7ff bfd3 	b.w	801234c <_raise_r>
 80123a6:	bf00      	nop
 80123a8:	20000040 	.word	0x20000040

080123ac <_kill_r>:
 80123ac:	b538      	push	{r3, r4, r5, lr}
 80123ae:	4d07      	ldr	r5, [pc, #28]	; (80123cc <_kill_r+0x20>)
 80123b0:	2300      	movs	r3, #0
 80123b2:	4604      	mov	r4, r0
 80123b4:	4608      	mov	r0, r1
 80123b6:	4611      	mov	r1, r2
 80123b8:	602b      	str	r3, [r5, #0]
 80123ba:	f7f0 fe6b 	bl	8003094 <_kill>
 80123be:	1c43      	adds	r3, r0, #1
 80123c0:	d102      	bne.n	80123c8 <_kill_r+0x1c>
 80123c2:	682b      	ldr	r3, [r5, #0]
 80123c4:	b103      	cbz	r3, 80123c8 <_kill_r+0x1c>
 80123c6:	6023      	str	r3, [r4, #0]
 80123c8:	bd38      	pop	{r3, r4, r5, pc}
 80123ca:	bf00      	nop
 80123cc:	20006190 	.word	0x20006190

080123d0 <_getpid_r>:
 80123d0:	f7f0 be58 	b.w	8003084 <_getpid>

080123d4 <siprintf>:
 80123d4:	b40e      	push	{r1, r2, r3}
 80123d6:	b500      	push	{lr}
 80123d8:	b09c      	sub	sp, #112	; 0x70
 80123da:	ab1d      	add	r3, sp, #116	; 0x74
 80123dc:	9002      	str	r0, [sp, #8]
 80123de:	9006      	str	r0, [sp, #24]
 80123e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80123e4:	4809      	ldr	r0, [pc, #36]	; (801240c <siprintf+0x38>)
 80123e6:	9107      	str	r1, [sp, #28]
 80123e8:	9104      	str	r1, [sp, #16]
 80123ea:	4909      	ldr	r1, [pc, #36]	; (8012410 <siprintf+0x3c>)
 80123ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80123f0:	9105      	str	r1, [sp, #20]
 80123f2:	6800      	ldr	r0, [r0, #0]
 80123f4:	9301      	str	r3, [sp, #4]
 80123f6:	a902      	add	r1, sp, #8
 80123f8:	f003 fcb4 	bl	8015d64 <_svfiprintf_r>
 80123fc:	9b02      	ldr	r3, [sp, #8]
 80123fe:	2200      	movs	r2, #0
 8012400:	701a      	strb	r2, [r3, #0]
 8012402:	b01c      	add	sp, #112	; 0x70
 8012404:	f85d eb04 	ldr.w	lr, [sp], #4
 8012408:	b003      	add	sp, #12
 801240a:	4770      	bx	lr
 801240c:	20000040 	.word	0x20000040
 8012410:	ffff0208 	.word	0xffff0208

08012414 <siscanf>:
 8012414:	b40e      	push	{r1, r2, r3}
 8012416:	b510      	push	{r4, lr}
 8012418:	b09f      	sub	sp, #124	; 0x7c
 801241a:	ac21      	add	r4, sp, #132	; 0x84
 801241c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8012420:	f854 2b04 	ldr.w	r2, [r4], #4
 8012424:	9201      	str	r2, [sp, #4]
 8012426:	f8ad 101c 	strh.w	r1, [sp, #28]
 801242a:	9004      	str	r0, [sp, #16]
 801242c:	9008      	str	r0, [sp, #32]
 801242e:	f7ed fee9 	bl	8000204 <strlen>
 8012432:	4b0c      	ldr	r3, [pc, #48]	; (8012464 <siscanf+0x50>)
 8012434:	9005      	str	r0, [sp, #20]
 8012436:	9009      	str	r0, [sp, #36]	; 0x24
 8012438:	930d      	str	r3, [sp, #52]	; 0x34
 801243a:	480b      	ldr	r0, [pc, #44]	; (8012468 <siscanf+0x54>)
 801243c:	9a01      	ldr	r2, [sp, #4]
 801243e:	6800      	ldr	r0, [r0, #0]
 8012440:	9403      	str	r4, [sp, #12]
 8012442:	2300      	movs	r3, #0
 8012444:	9311      	str	r3, [sp, #68]	; 0x44
 8012446:	9316      	str	r3, [sp, #88]	; 0x58
 8012448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801244c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012450:	a904      	add	r1, sp, #16
 8012452:	4623      	mov	r3, r4
 8012454:	f003 fde0 	bl	8016018 <__ssvfiscanf_r>
 8012458:	b01f      	add	sp, #124	; 0x7c
 801245a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801245e:	b003      	add	sp, #12
 8012460:	4770      	bx	lr
 8012462:	bf00      	nop
 8012464:	0801248f 	.word	0x0801248f
 8012468:	20000040 	.word	0x20000040

0801246c <__sread>:
 801246c:	b510      	push	{r4, lr}
 801246e:	460c      	mov	r4, r1
 8012470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012474:	f004 f9ee 	bl	8016854 <_read_r>
 8012478:	2800      	cmp	r0, #0
 801247a:	bfab      	itete	ge
 801247c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801247e:	89a3      	ldrhlt	r3, [r4, #12]
 8012480:	181b      	addge	r3, r3, r0
 8012482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012486:	bfac      	ite	ge
 8012488:	6563      	strge	r3, [r4, #84]	; 0x54
 801248a:	81a3      	strhlt	r3, [r4, #12]
 801248c:	bd10      	pop	{r4, pc}

0801248e <__seofread>:
 801248e:	2000      	movs	r0, #0
 8012490:	4770      	bx	lr

08012492 <__swrite>:
 8012492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012496:	461f      	mov	r7, r3
 8012498:	898b      	ldrh	r3, [r1, #12]
 801249a:	05db      	lsls	r3, r3, #23
 801249c:	4605      	mov	r5, r0
 801249e:	460c      	mov	r4, r1
 80124a0:	4616      	mov	r6, r2
 80124a2:	d505      	bpl.n	80124b0 <__swrite+0x1e>
 80124a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124a8:	2302      	movs	r3, #2
 80124aa:	2200      	movs	r2, #0
 80124ac:	f002 fe7a 	bl	80151a4 <_lseek_r>
 80124b0:	89a3      	ldrh	r3, [r4, #12]
 80124b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80124ba:	81a3      	strh	r3, [r4, #12]
 80124bc:	4632      	mov	r2, r6
 80124be:	463b      	mov	r3, r7
 80124c0:	4628      	mov	r0, r5
 80124c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124c6:	f001 b9f5 	b.w	80138b4 <_write_r>

080124ca <__sseek>:
 80124ca:	b510      	push	{r4, lr}
 80124cc:	460c      	mov	r4, r1
 80124ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124d2:	f002 fe67 	bl	80151a4 <_lseek_r>
 80124d6:	1c43      	adds	r3, r0, #1
 80124d8:	89a3      	ldrh	r3, [r4, #12]
 80124da:	bf15      	itete	ne
 80124dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80124de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80124e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80124e6:	81a3      	strheq	r3, [r4, #12]
 80124e8:	bf18      	it	ne
 80124ea:	81a3      	strhne	r3, [r4, #12]
 80124ec:	bd10      	pop	{r4, pc}

080124ee <__sclose>:
 80124ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124f2:	f001 ba7d 	b.w	80139f0 <_close_r>

080124f6 <strcpy>:
 80124f6:	4603      	mov	r3, r0
 80124f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124fc:	f803 2b01 	strb.w	r2, [r3], #1
 8012500:	2a00      	cmp	r2, #0
 8012502:	d1f9      	bne.n	80124f8 <strcpy+0x2>
 8012504:	4770      	bx	lr

08012506 <strncmp>:
 8012506:	b510      	push	{r4, lr}
 8012508:	b16a      	cbz	r2, 8012526 <strncmp+0x20>
 801250a:	3901      	subs	r1, #1
 801250c:	1884      	adds	r4, r0, r2
 801250e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012512:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012516:	4293      	cmp	r3, r2
 8012518:	d103      	bne.n	8012522 <strncmp+0x1c>
 801251a:	42a0      	cmp	r0, r4
 801251c:	d001      	beq.n	8012522 <strncmp+0x1c>
 801251e:	2b00      	cmp	r3, #0
 8012520:	d1f5      	bne.n	801250e <strncmp+0x8>
 8012522:	1a98      	subs	r0, r3, r2
 8012524:	bd10      	pop	{r4, pc}
 8012526:	4610      	mov	r0, r2
 8012528:	e7fc      	b.n	8012524 <strncmp+0x1e>

0801252a <sulp>:
 801252a:	b570      	push	{r4, r5, r6, lr}
 801252c:	4604      	mov	r4, r0
 801252e:	460d      	mov	r5, r1
 8012530:	ec45 4b10 	vmov	d0, r4, r5
 8012534:	4616      	mov	r6, r2
 8012536:	f003 fa35 	bl	80159a4 <__ulp>
 801253a:	ec51 0b10 	vmov	r0, r1, d0
 801253e:	b17e      	cbz	r6, 8012560 <sulp+0x36>
 8012540:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012544:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012548:	2b00      	cmp	r3, #0
 801254a:	dd09      	ble.n	8012560 <sulp+0x36>
 801254c:	051b      	lsls	r3, r3, #20
 801254e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012552:	2400      	movs	r4, #0
 8012554:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012558:	4622      	mov	r2, r4
 801255a:	462b      	mov	r3, r5
 801255c:	f7ee f86c 	bl	8000638 <__aeabi_dmul>
 8012560:	bd70      	pop	{r4, r5, r6, pc}
 8012562:	0000      	movs	r0, r0
 8012564:	0000      	movs	r0, r0
	...

08012568 <_strtod_l>:
 8012568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801256c:	b0a3      	sub	sp, #140	; 0x8c
 801256e:	461f      	mov	r7, r3
 8012570:	2300      	movs	r3, #0
 8012572:	931e      	str	r3, [sp, #120]	; 0x78
 8012574:	4ba4      	ldr	r3, [pc, #656]	; (8012808 <_strtod_l+0x2a0>)
 8012576:	9219      	str	r2, [sp, #100]	; 0x64
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	9307      	str	r3, [sp, #28]
 801257c:	4604      	mov	r4, r0
 801257e:	4618      	mov	r0, r3
 8012580:	4688      	mov	r8, r1
 8012582:	f7ed fe3f 	bl	8000204 <strlen>
 8012586:	f04f 0a00 	mov.w	sl, #0
 801258a:	4605      	mov	r5, r0
 801258c:	f04f 0b00 	mov.w	fp, #0
 8012590:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012596:	781a      	ldrb	r2, [r3, #0]
 8012598:	2a2b      	cmp	r2, #43	; 0x2b
 801259a:	d04c      	beq.n	8012636 <_strtod_l+0xce>
 801259c:	d839      	bhi.n	8012612 <_strtod_l+0xaa>
 801259e:	2a0d      	cmp	r2, #13
 80125a0:	d832      	bhi.n	8012608 <_strtod_l+0xa0>
 80125a2:	2a08      	cmp	r2, #8
 80125a4:	d832      	bhi.n	801260c <_strtod_l+0xa4>
 80125a6:	2a00      	cmp	r2, #0
 80125a8:	d03c      	beq.n	8012624 <_strtod_l+0xbc>
 80125aa:	2300      	movs	r3, #0
 80125ac:	930e      	str	r3, [sp, #56]	; 0x38
 80125ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80125b0:	7833      	ldrb	r3, [r6, #0]
 80125b2:	2b30      	cmp	r3, #48	; 0x30
 80125b4:	f040 80b4 	bne.w	8012720 <_strtod_l+0x1b8>
 80125b8:	7873      	ldrb	r3, [r6, #1]
 80125ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80125be:	2b58      	cmp	r3, #88	; 0x58
 80125c0:	d16c      	bne.n	801269c <_strtod_l+0x134>
 80125c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80125c4:	9301      	str	r3, [sp, #4]
 80125c6:	ab1e      	add	r3, sp, #120	; 0x78
 80125c8:	9702      	str	r7, [sp, #8]
 80125ca:	9300      	str	r3, [sp, #0]
 80125cc:	4a8f      	ldr	r2, [pc, #572]	; (801280c <_strtod_l+0x2a4>)
 80125ce:	ab1f      	add	r3, sp, #124	; 0x7c
 80125d0:	a91d      	add	r1, sp, #116	; 0x74
 80125d2:	4620      	mov	r0, r4
 80125d4:	f002 f9e4 	bl	80149a0 <__gethex>
 80125d8:	f010 0707 	ands.w	r7, r0, #7
 80125dc:	4605      	mov	r5, r0
 80125de:	d005      	beq.n	80125ec <_strtod_l+0x84>
 80125e0:	2f06      	cmp	r7, #6
 80125e2:	d12a      	bne.n	801263a <_strtod_l+0xd2>
 80125e4:	3601      	adds	r6, #1
 80125e6:	2300      	movs	r3, #0
 80125e8:	961d      	str	r6, [sp, #116]	; 0x74
 80125ea:	930e      	str	r3, [sp, #56]	; 0x38
 80125ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	f040 8596 	bne.w	8013120 <_strtod_l+0xbb8>
 80125f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80125f6:	b1db      	cbz	r3, 8012630 <_strtod_l+0xc8>
 80125f8:	4652      	mov	r2, sl
 80125fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80125fe:	ec43 2b10 	vmov	d0, r2, r3
 8012602:	b023      	add	sp, #140	; 0x8c
 8012604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012608:	2a20      	cmp	r2, #32
 801260a:	d1ce      	bne.n	80125aa <_strtod_l+0x42>
 801260c:	3301      	adds	r3, #1
 801260e:	931d      	str	r3, [sp, #116]	; 0x74
 8012610:	e7c0      	b.n	8012594 <_strtod_l+0x2c>
 8012612:	2a2d      	cmp	r2, #45	; 0x2d
 8012614:	d1c9      	bne.n	80125aa <_strtod_l+0x42>
 8012616:	2201      	movs	r2, #1
 8012618:	920e      	str	r2, [sp, #56]	; 0x38
 801261a:	1c5a      	adds	r2, r3, #1
 801261c:	921d      	str	r2, [sp, #116]	; 0x74
 801261e:	785b      	ldrb	r3, [r3, #1]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d1c4      	bne.n	80125ae <_strtod_l+0x46>
 8012624:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012626:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801262a:	2b00      	cmp	r3, #0
 801262c:	f040 8576 	bne.w	801311c <_strtod_l+0xbb4>
 8012630:	4652      	mov	r2, sl
 8012632:	465b      	mov	r3, fp
 8012634:	e7e3      	b.n	80125fe <_strtod_l+0x96>
 8012636:	2200      	movs	r2, #0
 8012638:	e7ee      	b.n	8012618 <_strtod_l+0xb0>
 801263a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801263c:	b13a      	cbz	r2, 801264e <_strtod_l+0xe6>
 801263e:	2135      	movs	r1, #53	; 0x35
 8012640:	a820      	add	r0, sp, #128	; 0x80
 8012642:	f003 faba 	bl	8015bba <__copybits>
 8012646:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012648:	4620      	mov	r0, r4
 801264a:	f002 fe7f 	bl	801534c <_Bfree>
 801264e:	3f01      	subs	r7, #1
 8012650:	2f05      	cmp	r7, #5
 8012652:	d807      	bhi.n	8012664 <_strtod_l+0xfc>
 8012654:	e8df f007 	tbb	[pc, r7]
 8012658:	1d180b0e 	.word	0x1d180b0e
 801265c:	030e      	.short	0x030e
 801265e:	f04f 0b00 	mov.w	fp, #0
 8012662:	46da      	mov	sl, fp
 8012664:	0728      	lsls	r0, r5, #28
 8012666:	d5c1      	bpl.n	80125ec <_strtod_l+0x84>
 8012668:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801266c:	e7be      	b.n	80125ec <_strtod_l+0x84>
 801266e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8012672:	e7f7      	b.n	8012664 <_strtod_l+0xfc>
 8012674:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8012678:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801267a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801267e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012682:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012686:	e7ed      	b.n	8012664 <_strtod_l+0xfc>
 8012688:	f8df b184 	ldr.w	fp, [pc, #388]	; 8012810 <_strtod_l+0x2a8>
 801268c:	f04f 0a00 	mov.w	sl, #0
 8012690:	e7e8      	b.n	8012664 <_strtod_l+0xfc>
 8012692:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012696:	f04f 3aff 	mov.w	sl, #4294967295
 801269a:	e7e3      	b.n	8012664 <_strtod_l+0xfc>
 801269c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801269e:	1c5a      	adds	r2, r3, #1
 80126a0:	921d      	str	r2, [sp, #116]	; 0x74
 80126a2:	785b      	ldrb	r3, [r3, #1]
 80126a4:	2b30      	cmp	r3, #48	; 0x30
 80126a6:	d0f9      	beq.n	801269c <_strtod_l+0x134>
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d09f      	beq.n	80125ec <_strtod_l+0x84>
 80126ac:	2301      	movs	r3, #1
 80126ae:	f04f 0900 	mov.w	r9, #0
 80126b2:	9304      	str	r3, [sp, #16]
 80126b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80126b6:	930a      	str	r3, [sp, #40]	; 0x28
 80126b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80126bc:	464f      	mov	r7, r9
 80126be:	220a      	movs	r2, #10
 80126c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80126c2:	7806      	ldrb	r6, [r0, #0]
 80126c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80126c8:	b2d9      	uxtb	r1, r3
 80126ca:	2909      	cmp	r1, #9
 80126cc:	d92a      	bls.n	8012724 <_strtod_l+0x1bc>
 80126ce:	9907      	ldr	r1, [sp, #28]
 80126d0:	462a      	mov	r2, r5
 80126d2:	f7ff ff18 	bl	8012506 <strncmp>
 80126d6:	b398      	cbz	r0, 8012740 <_strtod_l+0x1d8>
 80126d8:	2000      	movs	r0, #0
 80126da:	4633      	mov	r3, r6
 80126dc:	463d      	mov	r5, r7
 80126de:	9007      	str	r0, [sp, #28]
 80126e0:	4602      	mov	r2, r0
 80126e2:	2b65      	cmp	r3, #101	; 0x65
 80126e4:	d001      	beq.n	80126ea <_strtod_l+0x182>
 80126e6:	2b45      	cmp	r3, #69	; 0x45
 80126e8:	d118      	bne.n	801271c <_strtod_l+0x1b4>
 80126ea:	b91d      	cbnz	r5, 80126f4 <_strtod_l+0x18c>
 80126ec:	9b04      	ldr	r3, [sp, #16]
 80126ee:	4303      	orrs	r3, r0
 80126f0:	d098      	beq.n	8012624 <_strtod_l+0xbc>
 80126f2:	2500      	movs	r5, #0
 80126f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80126f8:	f108 0301 	add.w	r3, r8, #1
 80126fc:	931d      	str	r3, [sp, #116]	; 0x74
 80126fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012702:	2b2b      	cmp	r3, #43	; 0x2b
 8012704:	d075      	beq.n	80127f2 <_strtod_l+0x28a>
 8012706:	2b2d      	cmp	r3, #45	; 0x2d
 8012708:	d07b      	beq.n	8012802 <_strtod_l+0x29a>
 801270a:	f04f 0c00 	mov.w	ip, #0
 801270e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012712:	2909      	cmp	r1, #9
 8012714:	f240 8082 	bls.w	801281c <_strtod_l+0x2b4>
 8012718:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801271c:	2600      	movs	r6, #0
 801271e:	e09d      	b.n	801285c <_strtod_l+0x2f4>
 8012720:	2300      	movs	r3, #0
 8012722:	e7c4      	b.n	80126ae <_strtod_l+0x146>
 8012724:	2f08      	cmp	r7, #8
 8012726:	bfd8      	it	le
 8012728:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801272a:	f100 0001 	add.w	r0, r0, #1
 801272e:	bfda      	itte	le
 8012730:	fb02 3301 	mlale	r3, r2, r1, r3
 8012734:	9309      	strle	r3, [sp, #36]	; 0x24
 8012736:	fb02 3909 	mlagt	r9, r2, r9, r3
 801273a:	3701      	adds	r7, #1
 801273c:	901d      	str	r0, [sp, #116]	; 0x74
 801273e:	e7bf      	b.n	80126c0 <_strtod_l+0x158>
 8012740:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012742:	195a      	adds	r2, r3, r5
 8012744:	921d      	str	r2, [sp, #116]	; 0x74
 8012746:	5d5b      	ldrb	r3, [r3, r5]
 8012748:	2f00      	cmp	r7, #0
 801274a:	d037      	beq.n	80127bc <_strtod_l+0x254>
 801274c:	9007      	str	r0, [sp, #28]
 801274e:	463d      	mov	r5, r7
 8012750:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012754:	2a09      	cmp	r2, #9
 8012756:	d912      	bls.n	801277e <_strtod_l+0x216>
 8012758:	2201      	movs	r2, #1
 801275a:	e7c2      	b.n	80126e2 <_strtod_l+0x17a>
 801275c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801275e:	1c5a      	adds	r2, r3, #1
 8012760:	921d      	str	r2, [sp, #116]	; 0x74
 8012762:	785b      	ldrb	r3, [r3, #1]
 8012764:	3001      	adds	r0, #1
 8012766:	2b30      	cmp	r3, #48	; 0x30
 8012768:	d0f8      	beq.n	801275c <_strtod_l+0x1f4>
 801276a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801276e:	2a08      	cmp	r2, #8
 8012770:	f200 84db 	bhi.w	801312a <_strtod_l+0xbc2>
 8012774:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012776:	9007      	str	r0, [sp, #28]
 8012778:	2000      	movs	r0, #0
 801277a:	920a      	str	r2, [sp, #40]	; 0x28
 801277c:	4605      	mov	r5, r0
 801277e:	3b30      	subs	r3, #48	; 0x30
 8012780:	f100 0201 	add.w	r2, r0, #1
 8012784:	d014      	beq.n	80127b0 <_strtod_l+0x248>
 8012786:	9907      	ldr	r1, [sp, #28]
 8012788:	4411      	add	r1, r2
 801278a:	9107      	str	r1, [sp, #28]
 801278c:	462a      	mov	r2, r5
 801278e:	eb00 0e05 	add.w	lr, r0, r5
 8012792:	210a      	movs	r1, #10
 8012794:	4572      	cmp	r2, lr
 8012796:	d113      	bne.n	80127c0 <_strtod_l+0x258>
 8012798:	182a      	adds	r2, r5, r0
 801279a:	2a08      	cmp	r2, #8
 801279c:	f105 0501 	add.w	r5, r5, #1
 80127a0:	4405      	add	r5, r0
 80127a2:	dc1c      	bgt.n	80127de <_strtod_l+0x276>
 80127a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80127a6:	220a      	movs	r2, #10
 80127a8:	fb02 3301 	mla	r3, r2, r1, r3
 80127ac:	9309      	str	r3, [sp, #36]	; 0x24
 80127ae:	2200      	movs	r2, #0
 80127b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80127b2:	1c59      	adds	r1, r3, #1
 80127b4:	911d      	str	r1, [sp, #116]	; 0x74
 80127b6:	785b      	ldrb	r3, [r3, #1]
 80127b8:	4610      	mov	r0, r2
 80127ba:	e7c9      	b.n	8012750 <_strtod_l+0x1e8>
 80127bc:	4638      	mov	r0, r7
 80127be:	e7d2      	b.n	8012766 <_strtod_l+0x1fe>
 80127c0:	2a08      	cmp	r2, #8
 80127c2:	dc04      	bgt.n	80127ce <_strtod_l+0x266>
 80127c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80127c6:	434e      	muls	r6, r1
 80127c8:	9609      	str	r6, [sp, #36]	; 0x24
 80127ca:	3201      	adds	r2, #1
 80127cc:	e7e2      	b.n	8012794 <_strtod_l+0x22c>
 80127ce:	f102 0c01 	add.w	ip, r2, #1
 80127d2:	f1bc 0f10 	cmp.w	ip, #16
 80127d6:	bfd8      	it	le
 80127d8:	fb01 f909 	mulle.w	r9, r1, r9
 80127dc:	e7f5      	b.n	80127ca <_strtod_l+0x262>
 80127de:	2d10      	cmp	r5, #16
 80127e0:	bfdc      	itt	le
 80127e2:	220a      	movle	r2, #10
 80127e4:	fb02 3909 	mlale	r9, r2, r9, r3
 80127e8:	e7e1      	b.n	80127ae <_strtod_l+0x246>
 80127ea:	2300      	movs	r3, #0
 80127ec:	9307      	str	r3, [sp, #28]
 80127ee:	2201      	movs	r2, #1
 80127f0:	e77c      	b.n	80126ec <_strtod_l+0x184>
 80127f2:	f04f 0c00 	mov.w	ip, #0
 80127f6:	f108 0302 	add.w	r3, r8, #2
 80127fa:	931d      	str	r3, [sp, #116]	; 0x74
 80127fc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012800:	e785      	b.n	801270e <_strtod_l+0x1a6>
 8012802:	f04f 0c01 	mov.w	ip, #1
 8012806:	e7f6      	b.n	80127f6 <_strtod_l+0x28e>
 8012808:	08018b60 	.word	0x08018b60
 801280c:	080188ac 	.word	0x080188ac
 8012810:	7ff00000 	.word	0x7ff00000
 8012814:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012816:	1c59      	adds	r1, r3, #1
 8012818:	911d      	str	r1, [sp, #116]	; 0x74
 801281a:	785b      	ldrb	r3, [r3, #1]
 801281c:	2b30      	cmp	r3, #48	; 0x30
 801281e:	d0f9      	beq.n	8012814 <_strtod_l+0x2ac>
 8012820:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8012824:	2908      	cmp	r1, #8
 8012826:	f63f af79 	bhi.w	801271c <_strtod_l+0x1b4>
 801282a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801282e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012830:	9308      	str	r3, [sp, #32]
 8012832:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012834:	1c59      	adds	r1, r3, #1
 8012836:	911d      	str	r1, [sp, #116]	; 0x74
 8012838:	785b      	ldrb	r3, [r3, #1]
 801283a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801283e:	2e09      	cmp	r6, #9
 8012840:	d937      	bls.n	80128b2 <_strtod_l+0x34a>
 8012842:	9e08      	ldr	r6, [sp, #32]
 8012844:	1b89      	subs	r1, r1, r6
 8012846:	2908      	cmp	r1, #8
 8012848:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801284c:	dc02      	bgt.n	8012854 <_strtod_l+0x2ec>
 801284e:	4576      	cmp	r6, lr
 8012850:	bfa8      	it	ge
 8012852:	4676      	movge	r6, lr
 8012854:	f1bc 0f00 	cmp.w	ip, #0
 8012858:	d000      	beq.n	801285c <_strtod_l+0x2f4>
 801285a:	4276      	negs	r6, r6
 801285c:	2d00      	cmp	r5, #0
 801285e:	d14f      	bne.n	8012900 <_strtod_l+0x398>
 8012860:	9904      	ldr	r1, [sp, #16]
 8012862:	4301      	orrs	r1, r0
 8012864:	f47f aec2 	bne.w	80125ec <_strtod_l+0x84>
 8012868:	2a00      	cmp	r2, #0
 801286a:	f47f aedb 	bne.w	8012624 <_strtod_l+0xbc>
 801286e:	2b69      	cmp	r3, #105	; 0x69
 8012870:	d027      	beq.n	80128c2 <_strtod_l+0x35a>
 8012872:	dc24      	bgt.n	80128be <_strtod_l+0x356>
 8012874:	2b49      	cmp	r3, #73	; 0x49
 8012876:	d024      	beq.n	80128c2 <_strtod_l+0x35a>
 8012878:	2b4e      	cmp	r3, #78	; 0x4e
 801287a:	f47f aed3 	bne.w	8012624 <_strtod_l+0xbc>
 801287e:	499e      	ldr	r1, [pc, #632]	; (8012af8 <_strtod_l+0x590>)
 8012880:	a81d      	add	r0, sp, #116	; 0x74
 8012882:	f002 fae5 	bl	8014e50 <__match>
 8012886:	2800      	cmp	r0, #0
 8012888:	f43f aecc 	beq.w	8012624 <_strtod_l+0xbc>
 801288c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801288e:	781b      	ldrb	r3, [r3, #0]
 8012890:	2b28      	cmp	r3, #40	; 0x28
 8012892:	d12d      	bne.n	80128f0 <_strtod_l+0x388>
 8012894:	4999      	ldr	r1, [pc, #612]	; (8012afc <_strtod_l+0x594>)
 8012896:	aa20      	add	r2, sp, #128	; 0x80
 8012898:	a81d      	add	r0, sp, #116	; 0x74
 801289a:	f002 faed 	bl	8014e78 <__hexnan>
 801289e:	2805      	cmp	r0, #5
 80128a0:	d126      	bne.n	80128f0 <_strtod_l+0x388>
 80128a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128a4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80128a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80128ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80128b0:	e69c      	b.n	80125ec <_strtod_l+0x84>
 80128b2:	210a      	movs	r1, #10
 80128b4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80128b8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80128bc:	e7b9      	b.n	8012832 <_strtod_l+0x2ca>
 80128be:	2b6e      	cmp	r3, #110	; 0x6e
 80128c0:	e7db      	b.n	801287a <_strtod_l+0x312>
 80128c2:	498f      	ldr	r1, [pc, #572]	; (8012b00 <_strtod_l+0x598>)
 80128c4:	a81d      	add	r0, sp, #116	; 0x74
 80128c6:	f002 fac3 	bl	8014e50 <__match>
 80128ca:	2800      	cmp	r0, #0
 80128cc:	f43f aeaa 	beq.w	8012624 <_strtod_l+0xbc>
 80128d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80128d2:	498c      	ldr	r1, [pc, #560]	; (8012b04 <_strtod_l+0x59c>)
 80128d4:	3b01      	subs	r3, #1
 80128d6:	a81d      	add	r0, sp, #116	; 0x74
 80128d8:	931d      	str	r3, [sp, #116]	; 0x74
 80128da:	f002 fab9 	bl	8014e50 <__match>
 80128de:	b910      	cbnz	r0, 80128e6 <_strtod_l+0x37e>
 80128e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80128e2:	3301      	adds	r3, #1
 80128e4:	931d      	str	r3, [sp, #116]	; 0x74
 80128e6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8012b14 <_strtod_l+0x5ac>
 80128ea:	f04f 0a00 	mov.w	sl, #0
 80128ee:	e67d      	b.n	80125ec <_strtod_l+0x84>
 80128f0:	4885      	ldr	r0, [pc, #532]	; (8012b08 <_strtod_l+0x5a0>)
 80128f2:	f003 ffc1 	bl	8016878 <nan>
 80128f6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80128fa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80128fe:	e675      	b.n	80125ec <_strtod_l+0x84>
 8012900:	9b07      	ldr	r3, [sp, #28]
 8012902:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012904:	1af3      	subs	r3, r6, r3
 8012906:	2f00      	cmp	r7, #0
 8012908:	bf08      	it	eq
 801290a:	462f      	moveq	r7, r5
 801290c:	2d10      	cmp	r5, #16
 801290e:	9308      	str	r3, [sp, #32]
 8012910:	46a8      	mov	r8, r5
 8012912:	bfa8      	it	ge
 8012914:	f04f 0810 	movge.w	r8, #16
 8012918:	f7ed fe14 	bl	8000544 <__aeabi_ui2d>
 801291c:	2d09      	cmp	r5, #9
 801291e:	4682      	mov	sl, r0
 8012920:	468b      	mov	fp, r1
 8012922:	dd13      	ble.n	801294c <_strtod_l+0x3e4>
 8012924:	4b79      	ldr	r3, [pc, #484]	; (8012b0c <_strtod_l+0x5a4>)
 8012926:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801292a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801292e:	f7ed fe83 	bl	8000638 <__aeabi_dmul>
 8012932:	4682      	mov	sl, r0
 8012934:	4648      	mov	r0, r9
 8012936:	468b      	mov	fp, r1
 8012938:	f7ed fe04 	bl	8000544 <__aeabi_ui2d>
 801293c:	4602      	mov	r2, r0
 801293e:	460b      	mov	r3, r1
 8012940:	4650      	mov	r0, sl
 8012942:	4659      	mov	r1, fp
 8012944:	f7ed fcc2 	bl	80002cc <__adddf3>
 8012948:	4682      	mov	sl, r0
 801294a:	468b      	mov	fp, r1
 801294c:	2d0f      	cmp	r5, #15
 801294e:	dc38      	bgt.n	80129c2 <_strtod_l+0x45a>
 8012950:	9b08      	ldr	r3, [sp, #32]
 8012952:	2b00      	cmp	r3, #0
 8012954:	f43f ae4a 	beq.w	80125ec <_strtod_l+0x84>
 8012958:	dd24      	ble.n	80129a4 <_strtod_l+0x43c>
 801295a:	2b16      	cmp	r3, #22
 801295c:	dc0b      	bgt.n	8012976 <_strtod_l+0x40e>
 801295e:	4d6b      	ldr	r5, [pc, #428]	; (8012b0c <_strtod_l+0x5a4>)
 8012960:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8012964:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012968:	4652      	mov	r2, sl
 801296a:	465b      	mov	r3, fp
 801296c:	f7ed fe64 	bl	8000638 <__aeabi_dmul>
 8012970:	4682      	mov	sl, r0
 8012972:	468b      	mov	fp, r1
 8012974:	e63a      	b.n	80125ec <_strtod_l+0x84>
 8012976:	9a08      	ldr	r2, [sp, #32]
 8012978:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801297c:	4293      	cmp	r3, r2
 801297e:	db20      	blt.n	80129c2 <_strtod_l+0x45a>
 8012980:	4c62      	ldr	r4, [pc, #392]	; (8012b0c <_strtod_l+0x5a4>)
 8012982:	f1c5 050f 	rsb	r5, r5, #15
 8012986:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801298a:	4652      	mov	r2, sl
 801298c:	465b      	mov	r3, fp
 801298e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012992:	f7ed fe51 	bl	8000638 <__aeabi_dmul>
 8012996:	9b08      	ldr	r3, [sp, #32]
 8012998:	1b5d      	subs	r5, r3, r5
 801299a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801299e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80129a2:	e7e3      	b.n	801296c <_strtod_l+0x404>
 80129a4:	9b08      	ldr	r3, [sp, #32]
 80129a6:	3316      	adds	r3, #22
 80129a8:	db0b      	blt.n	80129c2 <_strtod_l+0x45a>
 80129aa:	9b07      	ldr	r3, [sp, #28]
 80129ac:	4a57      	ldr	r2, [pc, #348]	; (8012b0c <_strtod_l+0x5a4>)
 80129ae:	1b9e      	subs	r6, r3, r6
 80129b0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80129b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80129b8:	4650      	mov	r0, sl
 80129ba:	4659      	mov	r1, fp
 80129bc:	f7ed ff66 	bl	800088c <__aeabi_ddiv>
 80129c0:	e7d6      	b.n	8012970 <_strtod_l+0x408>
 80129c2:	9b08      	ldr	r3, [sp, #32]
 80129c4:	eba5 0808 	sub.w	r8, r5, r8
 80129c8:	4498      	add	r8, r3
 80129ca:	f1b8 0f00 	cmp.w	r8, #0
 80129ce:	dd71      	ble.n	8012ab4 <_strtod_l+0x54c>
 80129d0:	f018 030f 	ands.w	r3, r8, #15
 80129d4:	d00a      	beq.n	80129ec <_strtod_l+0x484>
 80129d6:	494d      	ldr	r1, [pc, #308]	; (8012b0c <_strtod_l+0x5a4>)
 80129d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80129dc:	4652      	mov	r2, sl
 80129de:	465b      	mov	r3, fp
 80129e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129e4:	f7ed fe28 	bl	8000638 <__aeabi_dmul>
 80129e8:	4682      	mov	sl, r0
 80129ea:	468b      	mov	fp, r1
 80129ec:	f038 080f 	bics.w	r8, r8, #15
 80129f0:	d04d      	beq.n	8012a8e <_strtod_l+0x526>
 80129f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80129f6:	dd22      	ble.n	8012a3e <_strtod_l+0x4d6>
 80129f8:	2500      	movs	r5, #0
 80129fa:	462e      	mov	r6, r5
 80129fc:	9509      	str	r5, [sp, #36]	; 0x24
 80129fe:	9507      	str	r5, [sp, #28]
 8012a00:	2322      	movs	r3, #34	; 0x22
 8012a02:	f8df b110 	ldr.w	fp, [pc, #272]	; 8012b14 <_strtod_l+0x5ac>
 8012a06:	6023      	str	r3, [r4, #0]
 8012a08:	f04f 0a00 	mov.w	sl, #0
 8012a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	f43f adec 	beq.w	80125ec <_strtod_l+0x84>
 8012a14:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012a16:	4620      	mov	r0, r4
 8012a18:	f002 fc98 	bl	801534c <_Bfree>
 8012a1c:	9907      	ldr	r1, [sp, #28]
 8012a1e:	4620      	mov	r0, r4
 8012a20:	f002 fc94 	bl	801534c <_Bfree>
 8012a24:	4631      	mov	r1, r6
 8012a26:	4620      	mov	r0, r4
 8012a28:	f002 fc90 	bl	801534c <_Bfree>
 8012a2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012a2e:	4620      	mov	r0, r4
 8012a30:	f002 fc8c 	bl	801534c <_Bfree>
 8012a34:	4629      	mov	r1, r5
 8012a36:	4620      	mov	r0, r4
 8012a38:	f002 fc88 	bl	801534c <_Bfree>
 8012a3c:	e5d6      	b.n	80125ec <_strtod_l+0x84>
 8012a3e:	2300      	movs	r3, #0
 8012a40:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012a44:	4650      	mov	r0, sl
 8012a46:	4659      	mov	r1, fp
 8012a48:	4699      	mov	r9, r3
 8012a4a:	f1b8 0f01 	cmp.w	r8, #1
 8012a4e:	dc21      	bgt.n	8012a94 <_strtod_l+0x52c>
 8012a50:	b10b      	cbz	r3, 8012a56 <_strtod_l+0x4ee>
 8012a52:	4682      	mov	sl, r0
 8012a54:	468b      	mov	fp, r1
 8012a56:	4b2e      	ldr	r3, [pc, #184]	; (8012b10 <_strtod_l+0x5a8>)
 8012a58:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012a5c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8012a60:	4652      	mov	r2, sl
 8012a62:	465b      	mov	r3, fp
 8012a64:	e9d9 0100 	ldrd	r0, r1, [r9]
 8012a68:	f7ed fde6 	bl	8000638 <__aeabi_dmul>
 8012a6c:	4b29      	ldr	r3, [pc, #164]	; (8012b14 <_strtod_l+0x5ac>)
 8012a6e:	460a      	mov	r2, r1
 8012a70:	400b      	ands	r3, r1
 8012a72:	4929      	ldr	r1, [pc, #164]	; (8012b18 <_strtod_l+0x5b0>)
 8012a74:	428b      	cmp	r3, r1
 8012a76:	4682      	mov	sl, r0
 8012a78:	d8be      	bhi.n	80129f8 <_strtod_l+0x490>
 8012a7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012a7e:	428b      	cmp	r3, r1
 8012a80:	bf86      	itte	hi
 8012a82:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8012b1c <_strtod_l+0x5b4>
 8012a86:	f04f 3aff 	movhi.w	sl, #4294967295
 8012a8a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012a8e:	2300      	movs	r3, #0
 8012a90:	9304      	str	r3, [sp, #16]
 8012a92:	e081      	b.n	8012b98 <_strtod_l+0x630>
 8012a94:	f018 0f01 	tst.w	r8, #1
 8012a98:	d007      	beq.n	8012aaa <_strtod_l+0x542>
 8012a9a:	4b1d      	ldr	r3, [pc, #116]	; (8012b10 <_strtod_l+0x5a8>)
 8012a9c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8012aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa4:	f7ed fdc8 	bl	8000638 <__aeabi_dmul>
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	f109 0901 	add.w	r9, r9, #1
 8012aae:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012ab2:	e7ca      	b.n	8012a4a <_strtod_l+0x4e2>
 8012ab4:	d0eb      	beq.n	8012a8e <_strtod_l+0x526>
 8012ab6:	f1c8 0800 	rsb	r8, r8, #0
 8012aba:	f018 020f 	ands.w	r2, r8, #15
 8012abe:	d00a      	beq.n	8012ad6 <_strtod_l+0x56e>
 8012ac0:	4b12      	ldr	r3, [pc, #72]	; (8012b0c <_strtod_l+0x5a4>)
 8012ac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012ac6:	4650      	mov	r0, sl
 8012ac8:	4659      	mov	r1, fp
 8012aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ace:	f7ed fedd 	bl	800088c <__aeabi_ddiv>
 8012ad2:	4682      	mov	sl, r0
 8012ad4:	468b      	mov	fp, r1
 8012ad6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012ada:	d0d8      	beq.n	8012a8e <_strtod_l+0x526>
 8012adc:	f1b8 0f1f 	cmp.w	r8, #31
 8012ae0:	dd1e      	ble.n	8012b20 <_strtod_l+0x5b8>
 8012ae2:	2500      	movs	r5, #0
 8012ae4:	462e      	mov	r6, r5
 8012ae6:	9509      	str	r5, [sp, #36]	; 0x24
 8012ae8:	9507      	str	r5, [sp, #28]
 8012aea:	2322      	movs	r3, #34	; 0x22
 8012aec:	f04f 0a00 	mov.w	sl, #0
 8012af0:	f04f 0b00 	mov.w	fp, #0
 8012af4:	6023      	str	r3, [r4, #0]
 8012af6:	e789      	b.n	8012a0c <_strtod_l+0x4a4>
 8012af8:	08018881 	.word	0x08018881
 8012afc:	080188c0 	.word	0x080188c0
 8012b00:	08018879 	.word	0x08018879
 8012b04:	08018a7c 	.word	0x08018a7c
 8012b08:	08018977 	.word	0x08018977
 8012b0c:	08018c00 	.word	0x08018c00
 8012b10:	08018bd8 	.word	0x08018bd8
 8012b14:	7ff00000 	.word	0x7ff00000
 8012b18:	7ca00000 	.word	0x7ca00000
 8012b1c:	7fefffff 	.word	0x7fefffff
 8012b20:	f018 0310 	ands.w	r3, r8, #16
 8012b24:	bf18      	it	ne
 8012b26:	236a      	movne	r3, #106	; 0x6a
 8012b28:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8012ee0 <_strtod_l+0x978>
 8012b2c:	9304      	str	r3, [sp, #16]
 8012b2e:	4650      	mov	r0, sl
 8012b30:	4659      	mov	r1, fp
 8012b32:	2300      	movs	r3, #0
 8012b34:	f018 0f01 	tst.w	r8, #1
 8012b38:	d004      	beq.n	8012b44 <_strtod_l+0x5dc>
 8012b3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012b3e:	f7ed fd7b 	bl	8000638 <__aeabi_dmul>
 8012b42:	2301      	movs	r3, #1
 8012b44:	ea5f 0868 	movs.w	r8, r8, asr #1
 8012b48:	f109 0908 	add.w	r9, r9, #8
 8012b4c:	d1f2      	bne.n	8012b34 <_strtod_l+0x5cc>
 8012b4e:	b10b      	cbz	r3, 8012b54 <_strtod_l+0x5ec>
 8012b50:	4682      	mov	sl, r0
 8012b52:	468b      	mov	fp, r1
 8012b54:	9b04      	ldr	r3, [sp, #16]
 8012b56:	b1bb      	cbz	r3, 8012b88 <_strtod_l+0x620>
 8012b58:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8012b5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	4659      	mov	r1, fp
 8012b64:	dd10      	ble.n	8012b88 <_strtod_l+0x620>
 8012b66:	2b1f      	cmp	r3, #31
 8012b68:	f340 8128 	ble.w	8012dbc <_strtod_l+0x854>
 8012b6c:	2b34      	cmp	r3, #52	; 0x34
 8012b6e:	bfde      	ittt	le
 8012b70:	3b20      	suble	r3, #32
 8012b72:	f04f 32ff 	movle.w	r2, #4294967295
 8012b76:	fa02 f303 	lslle.w	r3, r2, r3
 8012b7a:	f04f 0a00 	mov.w	sl, #0
 8012b7e:	bfcc      	ite	gt
 8012b80:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012b84:	ea03 0b01 	andle.w	fp, r3, r1
 8012b88:	2200      	movs	r2, #0
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	4650      	mov	r0, sl
 8012b8e:	4659      	mov	r1, fp
 8012b90:	f7ed ffba 	bl	8000b08 <__aeabi_dcmpeq>
 8012b94:	2800      	cmp	r0, #0
 8012b96:	d1a4      	bne.n	8012ae2 <_strtod_l+0x57a>
 8012b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b9a:	9300      	str	r3, [sp, #0]
 8012b9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012b9e:	462b      	mov	r3, r5
 8012ba0:	463a      	mov	r2, r7
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	f002 fc3e 	bl	8015424 <__s2b>
 8012ba8:	9009      	str	r0, [sp, #36]	; 0x24
 8012baa:	2800      	cmp	r0, #0
 8012bac:	f43f af24 	beq.w	80129f8 <_strtod_l+0x490>
 8012bb0:	9b07      	ldr	r3, [sp, #28]
 8012bb2:	1b9e      	subs	r6, r3, r6
 8012bb4:	9b08      	ldr	r3, [sp, #32]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	bfb4      	ite	lt
 8012bba:	4633      	movlt	r3, r6
 8012bbc:	2300      	movge	r3, #0
 8012bbe:	9310      	str	r3, [sp, #64]	; 0x40
 8012bc0:	9b08      	ldr	r3, [sp, #32]
 8012bc2:	2500      	movs	r5, #0
 8012bc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012bc8:	9318      	str	r3, [sp, #96]	; 0x60
 8012bca:	462e      	mov	r6, r5
 8012bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bce:	4620      	mov	r0, r4
 8012bd0:	6859      	ldr	r1, [r3, #4]
 8012bd2:	f002 fb7b 	bl	80152cc <_Balloc>
 8012bd6:	9007      	str	r0, [sp, #28]
 8012bd8:	2800      	cmp	r0, #0
 8012bda:	f43f af11 	beq.w	8012a00 <_strtod_l+0x498>
 8012bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012be0:	691a      	ldr	r2, [r3, #16]
 8012be2:	3202      	adds	r2, #2
 8012be4:	f103 010c 	add.w	r1, r3, #12
 8012be8:	0092      	lsls	r2, r2, #2
 8012bea:	300c      	adds	r0, #12
 8012bec:	f7fe f8ce 	bl	8010d8c <memcpy>
 8012bf0:	ec4b ab10 	vmov	d0, sl, fp
 8012bf4:	aa20      	add	r2, sp, #128	; 0x80
 8012bf6:	a91f      	add	r1, sp, #124	; 0x7c
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8012bfe:	f002 ff4d 	bl	8015a9c <__d2b>
 8012c02:	901e      	str	r0, [sp, #120]	; 0x78
 8012c04:	2800      	cmp	r0, #0
 8012c06:	f43f aefb 	beq.w	8012a00 <_strtod_l+0x498>
 8012c0a:	2101      	movs	r1, #1
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	f002 fca3 	bl	8015558 <__i2b>
 8012c12:	4606      	mov	r6, r0
 8012c14:	2800      	cmp	r0, #0
 8012c16:	f43f aef3 	beq.w	8012a00 <_strtod_l+0x498>
 8012c1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012c1c:	9904      	ldr	r1, [sp, #16]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	bfab      	itete	ge
 8012c22:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8012c24:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8012c26:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8012c28:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8012c2c:	bfac      	ite	ge
 8012c2e:	eb03 0902 	addge.w	r9, r3, r2
 8012c32:	1ad7      	sublt	r7, r2, r3
 8012c34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012c36:	eba3 0801 	sub.w	r8, r3, r1
 8012c3a:	4490      	add	r8, r2
 8012c3c:	4ba3      	ldr	r3, [pc, #652]	; (8012ecc <_strtod_l+0x964>)
 8012c3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8012c42:	4598      	cmp	r8, r3
 8012c44:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012c48:	f280 80cc 	bge.w	8012de4 <_strtod_l+0x87c>
 8012c4c:	eba3 0308 	sub.w	r3, r3, r8
 8012c50:	2b1f      	cmp	r3, #31
 8012c52:	eba2 0203 	sub.w	r2, r2, r3
 8012c56:	f04f 0101 	mov.w	r1, #1
 8012c5a:	f300 80b6 	bgt.w	8012dca <_strtod_l+0x862>
 8012c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8012c62:	9311      	str	r3, [sp, #68]	; 0x44
 8012c64:	2300      	movs	r3, #0
 8012c66:	930c      	str	r3, [sp, #48]	; 0x30
 8012c68:	eb09 0802 	add.w	r8, r9, r2
 8012c6c:	9b04      	ldr	r3, [sp, #16]
 8012c6e:	45c1      	cmp	r9, r8
 8012c70:	4417      	add	r7, r2
 8012c72:	441f      	add	r7, r3
 8012c74:	464b      	mov	r3, r9
 8012c76:	bfa8      	it	ge
 8012c78:	4643      	movge	r3, r8
 8012c7a:	42bb      	cmp	r3, r7
 8012c7c:	bfa8      	it	ge
 8012c7e:	463b      	movge	r3, r7
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	bfc2      	ittt	gt
 8012c84:	eba8 0803 	subgt.w	r8, r8, r3
 8012c88:	1aff      	subgt	r7, r7, r3
 8012c8a:	eba9 0903 	subgt.w	r9, r9, r3
 8012c8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	dd17      	ble.n	8012cc4 <_strtod_l+0x75c>
 8012c94:	4631      	mov	r1, r6
 8012c96:	461a      	mov	r2, r3
 8012c98:	4620      	mov	r0, r4
 8012c9a:	f002 fd19 	bl	80156d0 <__pow5mult>
 8012c9e:	4606      	mov	r6, r0
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	f43f aead 	beq.w	8012a00 <_strtod_l+0x498>
 8012ca6:	4601      	mov	r1, r0
 8012ca8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012caa:	4620      	mov	r0, r4
 8012cac:	f002 fc6a 	bl	8015584 <__multiply>
 8012cb0:	900f      	str	r0, [sp, #60]	; 0x3c
 8012cb2:	2800      	cmp	r0, #0
 8012cb4:	f43f aea4 	beq.w	8012a00 <_strtod_l+0x498>
 8012cb8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012cba:	4620      	mov	r0, r4
 8012cbc:	f002 fb46 	bl	801534c <_Bfree>
 8012cc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012cc2:	931e      	str	r3, [sp, #120]	; 0x78
 8012cc4:	f1b8 0f00 	cmp.w	r8, #0
 8012cc8:	f300 8091 	bgt.w	8012dee <_strtod_l+0x886>
 8012ccc:	9b08      	ldr	r3, [sp, #32]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	dd08      	ble.n	8012ce4 <_strtod_l+0x77c>
 8012cd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012cd4:	9907      	ldr	r1, [sp, #28]
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f002 fcfa 	bl	80156d0 <__pow5mult>
 8012cdc:	9007      	str	r0, [sp, #28]
 8012cde:	2800      	cmp	r0, #0
 8012ce0:	f43f ae8e 	beq.w	8012a00 <_strtod_l+0x498>
 8012ce4:	2f00      	cmp	r7, #0
 8012ce6:	dd08      	ble.n	8012cfa <_strtod_l+0x792>
 8012ce8:	9907      	ldr	r1, [sp, #28]
 8012cea:	463a      	mov	r2, r7
 8012cec:	4620      	mov	r0, r4
 8012cee:	f002 fd49 	bl	8015784 <__lshift>
 8012cf2:	9007      	str	r0, [sp, #28]
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	f43f ae83 	beq.w	8012a00 <_strtod_l+0x498>
 8012cfa:	f1b9 0f00 	cmp.w	r9, #0
 8012cfe:	dd08      	ble.n	8012d12 <_strtod_l+0x7aa>
 8012d00:	4631      	mov	r1, r6
 8012d02:	464a      	mov	r2, r9
 8012d04:	4620      	mov	r0, r4
 8012d06:	f002 fd3d 	bl	8015784 <__lshift>
 8012d0a:	4606      	mov	r6, r0
 8012d0c:	2800      	cmp	r0, #0
 8012d0e:	f43f ae77 	beq.w	8012a00 <_strtod_l+0x498>
 8012d12:	9a07      	ldr	r2, [sp, #28]
 8012d14:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012d16:	4620      	mov	r0, r4
 8012d18:	f002 fdbc 	bl	8015894 <__mdiff>
 8012d1c:	4605      	mov	r5, r0
 8012d1e:	2800      	cmp	r0, #0
 8012d20:	f43f ae6e 	beq.w	8012a00 <_strtod_l+0x498>
 8012d24:	68c3      	ldr	r3, [r0, #12]
 8012d26:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d28:	2300      	movs	r3, #0
 8012d2a:	60c3      	str	r3, [r0, #12]
 8012d2c:	4631      	mov	r1, r6
 8012d2e:	f002 fd95 	bl	801585c <__mcmp>
 8012d32:	2800      	cmp	r0, #0
 8012d34:	da65      	bge.n	8012e02 <_strtod_l+0x89a>
 8012d36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d38:	ea53 030a 	orrs.w	r3, r3, sl
 8012d3c:	f040 8087 	bne.w	8012e4e <_strtod_l+0x8e6>
 8012d40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	f040 8082 	bne.w	8012e4e <_strtod_l+0x8e6>
 8012d4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012d4e:	0d1b      	lsrs	r3, r3, #20
 8012d50:	051b      	lsls	r3, r3, #20
 8012d52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012d56:	d97a      	bls.n	8012e4e <_strtod_l+0x8e6>
 8012d58:	696b      	ldr	r3, [r5, #20]
 8012d5a:	b913      	cbnz	r3, 8012d62 <_strtod_l+0x7fa>
 8012d5c:	692b      	ldr	r3, [r5, #16]
 8012d5e:	2b01      	cmp	r3, #1
 8012d60:	dd75      	ble.n	8012e4e <_strtod_l+0x8e6>
 8012d62:	4629      	mov	r1, r5
 8012d64:	2201      	movs	r2, #1
 8012d66:	4620      	mov	r0, r4
 8012d68:	f002 fd0c 	bl	8015784 <__lshift>
 8012d6c:	4631      	mov	r1, r6
 8012d6e:	4605      	mov	r5, r0
 8012d70:	f002 fd74 	bl	801585c <__mcmp>
 8012d74:	2800      	cmp	r0, #0
 8012d76:	dd6a      	ble.n	8012e4e <_strtod_l+0x8e6>
 8012d78:	9904      	ldr	r1, [sp, #16]
 8012d7a:	4a55      	ldr	r2, [pc, #340]	; (8012ed0 <_strtod_l+0x968>)
 8012d7c:	465b      	mov	r3, fp
 8012d7e:	2900      	cmp	r1, #0
 8012d80:	f000 8085 	beq.w	8012e8e <_strtod_l+0x926>
 8012d84:	ea02 010b 	and.w	r1, r2, fp
 8012d88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012d8c:	dc7f      	bgt.n	8012e8e <_strtod_l+0x926>
 8012d8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012d92:	f77f aeaa 	ble.w	8012aea <_strtod_l+0x582>
 8012d96:	4a4f      	ldr	r2, [pc, #316]	; (8012ed4 <_strtod_l+0x96c>)
 8012d98:	2300      	movs	r3, #0
 8012d9a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8012d9e:	4650      	mov	r0, sl
 8012da0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8012da4:	4659      	mov	r1, fp
 8012da6:	f7ed fc47 	bl	8000638 <__aeabi_dmul>
 8012daa:	460b      	mov	r3, r1
 8012dac:	4303      	orrs	r3, r0
 8012dae:	bf08      	it	eq
 8012db0:	2322      	moveq	r3, #34	; 0x22
 8012db2:	4682      	mov	sl, r0
 8012db4:	468b      	mov	fp, r1
 8012db6:	bf08      	it	eq
 8012db8:	6023      	streq	r3, [r4, #0]
 8012dba:	e62b      	b.n	8012a14 <_strtod_l+0x4ac>
 8012dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8012dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8012dc4:	ea03 0a0a 	and.w	sl, r3, sl
 8012dc8:	e6de      	b.n	8012b88 <_strtod_l+0x620>
 8012dca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8012dce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8012dd2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8012dd6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8012dda:	fa01 f308 	lsl.w	r3, r1, r8
 8012dde:	930c      	str	r3, [sp, #48]	; 0x30
 8012de0:	9111      	str	r1, [sp, #68]	; 0x44
 8012de2:	e741      	b.n	8012c68 <_strtod_l+0x700>
 8012de4:	2300      	movs	r3, #0
 8012de6:	930c      	str	r3, [sp, #48]	; 0x30
 8012de8:	2301      	movs	r3, #1
 8012dea:	9311      	str	r3, [sp, #68]	; 0x44
 8012dec:	e73c      	b.n	8012c68 <_strtod_l+0x700>
 8012dee:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012df0:	4642      	mov	r2, r8
 8012df2:	4620      	mov	r0, r4
 8012df4:	f002 fcc6 	bl	8015784 <__lshift>
 8012df8:	901e      	str	r0, [sp, #120]	; 0x78
 8012dfa:	2800      	cmp	r0, #0
 8012dfc:	f47f af66 	bne.w	8012ccc <_strtod_l+0x764>
 8012e00:	e5fe      	b.n	8012a00 <_strtod_l+0x498>
 8012e02:	465f      	mov	r7, fp
 8012e04:	d16e      	bne.n	8012ee4 <_strtod_l+0x97c>
 8012e06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012e08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012e0c:	b342      	cbz	r2, 8012e60 <_strtod_l+0x8f8>
 8012e0e:	4a32      	ldr	r2, [pc, #200]	; (8012ed8 <_strtod_l+0x970>)
 8012e10:	4293      	cmp	r3, r2
 8012e12:	d128      	bne.n	8012e66 <_strtod_l+0x8fe>
 8012e14:	9b04      	ldr	r3, [sp, #16]
 8012e16:	4650      	mov	r0, sl
 8012e18:	b1eb      	cbz	r3, 8012e56 <_strtod_l+0x8ee>
 8012e1a:	4a2d      	ldr	r2, [pc, #180]	; (8012ed0 <_strtod_l+0x968>)
 8012e1c:	403a      	ands	r2, r7
 8012e1e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8012e22:	f04f 31ff 	mov.w	r1, #4294967295
 8012e26:	d819      	bhi.n	8012e5c <_strtod_l+0x8f4>
 8012e28:	0d12      	lsrs	r2, r2, #20
 8012e2a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8012e32:	4298      	cmp	r0, r3
 8012e34:	d117      	bne.n	8012e66 <_strtod_l+0x8fe>
 8012e36:	4b29      	ldr	r3, [pc, #164]	; (8012edc <_strtod_l+0x974>)
 8012e38:	429f      	cmp	r7, r3
 8012e3a:	d102      	bne.n	8012e42 <_strtod_l+0x8da>
 8012e3c:	3001      	adds	r0, #1
 8012e3e:	f43f addf 	beq.w	8012a00 <_strtod_l+0x498>
 8012e42:	4b23      	ldr	r3, [pc, #140]	; (8012ed0 <_strtod_l+0x968>)
 8012e44:	403b      	ands	r3, r7
 8012e46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012e4a:	f04f 0a00 	mov.w	sl, #0
 8012e4e:	9b04      	ldr	r3, [sp, #16]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d1a0      	bne.n	8012d96 <_strtod_l+0x82e>
 8012e54:	e5de      	b.n	8012a14 <_strtod_l+0x4ac>
 8012e56:	f04f 33ff 	mov.w	r3, #4294967295
 8012e5a:	e7ea      	b.n	8012e32 <_strtod_l+0x8ca>
 8012e5c:	460b      	mov	r3, r1
 8012e5e:	e7e8      	b.n	8012e32 <_strtod_l+0x8ca>
 8012e60:	ea53 030a 	orrs.w	r3, r3, sl
 8012e64:	d088      	beq.n	8012d78 <_strtod_l+0x810>
 8012e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e68:	b1db      	cbz	r3, 8012ea2 <_strtod_l+0x93a>
 8012e6a:	423b      	tst	r3, r7
 8012e6c:	d0ef      	beq.n	8012e4e <_strtod_l+0x8e6>
 8012e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e70:	9a04      	ldr	r2, [sp, #16]
 8012e72:	4650      	mov	r0, sl
 8012e74:	4659      	mov	r1, fp
 8012e76:	b1c3      	cbz	r3, 8012eaa <_strtod_l+0x942>
 8012e78:	f7ff fb57 	bl	801252a <sulp>
 8012e7c:	4602      	mov	r2, r0
 8012e7e:	460b      	mov	r3, r1
 8012e80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012e84:	f7ed fa22 	bl	80002cc <__adddf3>
 8012e88:	4682      	mov	sl, r0
 8012e8a:	468b      	mov	fp, r1
 8012e8c:	e7df      	b.n	8012e4e <_strtod_l+0x8e6>
 8012e8e:	4013      	ands	r3, r2
 8012e90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012e94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012e98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012e9c:	f04f 3aff 	mov.w	sl, #4294967295
 8012ea0:	e7d5      	b.n	8012e4e <_strtod_l+0x8e6>
 8012ea2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012ea4:	ea13 0f0a 	tst.w	r3, sl
 8012ea8:	e7e0      	b.n	8012e6c <_strtod_l+0x904>
 8012eaa:	f7ff fb3e 	bl	801252a <sulp>
 8012eae:	4602      	mov	r2, r0
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012eb6:	f7ed fa07 	bl	80002c8 <__aeabi_dsub>
 8012eba:	2200      	movs	r2, #0
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	4682      	mov	sl, r0
 8012ec0:	468b      	mov	fp, r1
 8012ec2:	f7ed fe21 	bl	8000b08 <__aeabi_dcmpeq>
 8012ec6:	2800      	cmp	r0, #0
 8012ec8:	d0c1      	beq.n	8012e4e <_strtod_l+0x8e6>
 8012eca:	e60e      	b.n	8012aea <_strtod_l+0x582>
 8012ecc:	fffffc02 	.word	0xfffffc02
 8012ed0:	7ff00000 	.word	0x7ff00000
 8012ed4:	39500000 	.word	0x39500000
 8012ed8:	000fffff 	.word	0x000fffff
 8012edc:	7fefffff 	.word	0x7fefffff
 8012ee0:	080188d8 	.word	0x080188d8
 8012ee4:	4631      	mov	r1, r6
 8012ee6:	4628      	mov	r0, r5
 8012ee8:	f002 fe34 	bl	8015b54 <__ratio>
 8012eec:	ec59 8b10 	vmov	r8, r9, d0
 8012ef0:	ee10 0a10 	vmov	r0, s0
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012efa:	4649      	mov	r1, r9
 8012efc:	f7ed fe18 	bl	8000b30 <__aeabi_dcmple>
 8012f00:	2800      	cmp	r0, #0
 8012f02:	d07c      	beq.n	8012ffe <_strtod_l+0xa96>
 8012f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d04c      	beq.n	8012fa4 <_strtod_l+0xa3c>
 8012f0a:	4b95      	ldr	r3, [pc, #596]	; (8013160 <_strtod_l+0xbf8>)
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012f12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013160 <_strtod_l+0xbf8>
 8012f16:	f04f 0800 	mov.w	r8, #0
 8012f1a:	4b92      	ldr	r3, [pc, #584]	; (8013164 <_strtod_l+0xbfc>)
 8012f1c:	403b      	ands	r3, r7
 8012f1e:	9311      	str	r3, [sp, #68]	; 0x44
 8012f20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012f22:	4b91      	ldr	r3, [pc, #580]	; (8013168 <_strtod_l+0xc00>)
 8012f24:	429a      	cmp	r2, r3
 8012f26:	f040 80b2 	bne.w	801308e <_strtod_l+0xb26>
 8012f2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012f2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012f32:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8012f36:	ec4b ab10 	vmov	d0, sl, fp
 8012f3a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8012f3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012f42:	f002 fd2f 	bl	80159a4 <__ulp>
 8012f46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012f4a:	ec53 2b10 	vmov	r2, r3, d0
 8012f4e:	f7ed fb73 	bl	8000638 <__aeabi_dmul>
 8012f52:	4652      	mov	r2, sl
 8012f54:	465b      	mov	r3, fp
 8012f56:	f7ed f9b9 	bl	80002cc <__adddf3>
 8012f5a:	460b      	mov	r3, r1
 8012f5c:	4981      	ldr	r1, [pc, #516]	; (8013164 <_strtod_l+0xbfc>)
 8012f5e:	4a83      	ldr	r2, [pc, #524]	; (801316c <_strtod_l+0xc04>)
 8012f60:	4019      	ands	r1, r3
 8012f62:	4291      	cmp	r1, r2
 8012f64:	4682      	mov	sl, r0
 8012f66:	d95e      	bls.n	8013026 <_strtod_l+0xabe>
 8012f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f6a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012f6e:	4293      	cmp	r3, r2
 8012f70:	d103      	bne.n	8012f7a <_strtod_l+0xa12>
 8012f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f74:	3301      	adds	r3, #1
 8012f76:	f43f ad43 	beq.w	8012a00 <_strtod_l+0x498>
 8012f7a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8013178 <_strtod_l+0xc10>
 8012f7e:	f04f 3aff 	mov.w	sl, #4294967295
 8012f82:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012f84:	4620      	mov	r0, r4
 8012f86:	f002 f9e1 	bl	801534c <_Bfree>
 8012f8a:	9907      	ldr	r1, [sp, #28]
 8012f8c:	4620      	mov	r0, r4
 8012f8e:	f002 f9dd 	bl	801534c <_Bfree>
 8012f92:	4631      	mov	r1, r6
 8012f94:	4620      	mov	r0, r4
 8012f96:	f002 f9d9 	bl	801534c <_Bfree>
 8012f9a:	4629      	mov	r1, r5
 8012f9c:	4620      	mov	r0, r4
 8012f9e:	f002 f9d5 	bl	801534c <_Bfree>
 8012fa2:	e613      	b.n	8012bcc <_strtod_l+0x664>
 8012fa4:	f1ba 0f00 	cmp.w	sl, #0
 8012fa8:	d11b      	bne.n	8012fe2 <_strtod_l+0xa7a>
 8012faa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012fae:	b9f3      	cbnz	r3, 8012fee <_strtod_l+0xa86>
 8012fb0:	4b6b      	ldr	r3, [pc, #428]	; (8013160 <_strtod_l+0xbf8>)
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	4640      	mov	r0, r8
 8012fb6:	4649      	mov	r1, r9
 8012fb8:	f7ed fdb0 	bl	8000b1c <__aeabi_dcmplt>
 8012fbc:	b9d0      	cbnz	r0, 8012ff4 <_strtod_l+0xa8c>
 8012fbe:	4640      	mov	r0, r8
 8012fc0:	4649      	mov	r1, r9
 8012fc2:	4b6b      	ldr	r3, [pc, #428]	; (8013170 <_strtod_l+0xc08>)
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	f7ed fb37 	bl	8000638 <__aeabi_dmul>
 8012fca:	4680      	mov	r8, r0
 8012fcc:	4689      	mov	r9, r1
 8012fce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012fd2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8012fd6:	931b      	str	r3, [sp, #108]	; 0x6c
 8012fd8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8012fdc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012fe0:	e79b      	b.n	8012f1a <_strtod_l+0x9b2>
 8012fe2:	f1ba 0f01 	cmp.w	sl, #1
 8012fe6:	d102      	bne.n	8012fee <_strtod_l+0xa86>
 8012fe8:	2f00      	cmp	r7, #0
 8012fea:	f43f ad7e 	beq.w	8012aea <_strtod_l+0x582>
 8012fee:	4b61      	ldr	r3, [pc, #388]	; (8013174 <_strtod_l+0xc0c>)
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	e78c      	b.n	8012f0e <_strtod_l+0x9a6>
 8012ff4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013170 <_strtod_l+0xc08>
 8012ff8:	f04f 0800 	mov.w	r8, #0
 8012ffc:	e7e7      	b.n	8012fce <_strtod_l+0xa66>
 8012ffe:	4b5c      	ldr	r3, [pc, #368]	; (8013170 <_strtod_l+0xc08>)
 8013000:	4640      	mov	r0, r8
 8013002:	4649      	mov	r1, r9
 8013004:	2200      	movs	r2, #0
 8013006:	f7ed fb17 	bl	8000638 <__aeabi_dmul>
 801300a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801300c:	4680      	mov	r8, r0
 801300e:	4689      	mov	r9, r1
 8013010:	b933      	cbnz	r3, 8013020 <_strtod_l+0xab8>
 8013012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013016:	9012      	str	r0, [sp, #72]	; 0x48
 8013018:	9313      	str	r3, [sp, #76]	; 0x4c
 801301a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801301e:	e7dd      	b.n	8012fdc <_strtod_l+0xa74>
 8013020:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8013024:	e7f9      	b.n	801301a <_strtod_l+0xab2>
 8013026:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801302a:	9b04      	ldr	r3, [sp, #16]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d1a8      	bne.n	8012f82 <_strtod_l+0xa1a>
 8013030:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013034:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013036:	0d1b      	lsrs	r3, r3, #20
 8013038:	051b      	lsls	r3, r3, #20
 801303a:	429a      	cmp	r2, r3
 801303c:	d1a1      	bne.n	8012f82 <_strtod_l+0xa1a>
 801303e:	4640      	mov	r0, r8
 8013040:	4649      	mov	r1, r9
 8013042:	f7ed fea9 	bl	8000d98 <__aeabi_d2lz>
 8013046:	f7ed fac9 	bl	80005dc <__aeabi_l2d>
 801304a:	4602      	mov	r2, r0
 801304c:	460b      	mov	r3, r1
 801304e:	4640      	mov	r0, r8
 8013050:	4649      	mov	r1, r9
 8013052:	f7ed f939 	bl	80002c8 <__aeabi_dsub>
 8013056:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013058:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801305c:	ea43 030a 	orr.w	r3, r3, sl
 8013060:	4313      	orrs	r3, r2
 8013062:	4680      	mov	r8, r0
 8013064:	4689      	mov	r9, r1
 8013066:	d053      	beq.n	8013110 <_strtod_l+0xba8>
 8013068:	a335      	add	r3, pc, #212	; (adr r3, 8013140 <_strtod_l+0xbd8>)
 801306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801306e:	f7ed fd55 	bl	8000b1c <__aeabi_dcmplt>
 8013072:	2800      	cmp	r0, #0
 8013074:	f47f acce 	bne.w	8012a14 <_strtod_l+0x4ac>
 8013078:	a333      	add	r3, pc, #204	; (adr r3, 8013148 <_strtod_l+0xbe0>)
 801307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801307e:	4640      	mov	r0, r8
 8013080:	4649      	mov	r1, r9
 8013082:	f7ed fd69 	bl	8000b58 <__aeabi_dcmpgt>
 8013086:	2800      	cmp	r0, #0
 8013088:	f43f af7b 	beq.w	8012f82 <_strtod_l+0xa1a>
 801308c:	e4c2      	b.n	8012a14 <_strtod_l+0x4ac>
 801308e:	9b04      	ldr	r3, [sp, #16]
 8013090:	b333      	cbz	r3, 80130e0 <_strtod_l+0xb78>
 8013092:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013094:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013098:	d822      	bhi.n	80130e0 <_strtod_l+0xb78>
 801309a:	a32d      	add	r3, pc, #180	; (adr r3, 8013150 <_strtod_l+0xbe8>)
 801309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130a0:	4640      	mov	r0, r8
 80130a2:	4649      	mov	r1, r9
 80130a4:	f7ed fd44 	bl	8000b30 <__aeabi_dcmple>
 80130a8:	b1a0      	cbz	r0, 80130d4 <_strtod_l+0xb6c>
 80130aa:	4649      	mov	r1, r9
 80130ac:	4640      	mov	r0, r8
 80130ae:	f7ed fd9b 	bl	8000be8 <__aeabi_d2uiz>
 80130b2:	2801      	cmp	r0, #1
 80130b4:	bf38      	it	cc
 80130b6:	2001      	movcc	r0, #1
 80130b8:	f7ed fa44 	bl	8000544 <__aeabi_ui2d>
 80130bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80130be:	4680      	mov	r8, r0
 80130c0:	4689      	mov	r9, r1
 80130c2:	bb13      	cbnz	r3, 801310a <_strtod_l+0xba2>
 80130c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80130c8:	9014      	str	r0, [sp, #80]	; 0x50
 80130ca:	9315      	str	r3, [sp, #84]	; 0x54
 80130cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80130d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80130d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80130d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80130dc:	1a9b      	subs	r3, r3, r2
 80130de:	930d      	str	r3, [sp, #52]	; 0x34
 80130e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80130e4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80130e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80130ec:	f002 fc5a 	bl	80159a4 <__ulp>
 80130f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80130f4:	ec53 2b10 	vmov	r2, r3, d0
 80130f8:	f7ed fa9e 	bl	8000638 <__aeabi_dmul>
 80130fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013100:	f7ed f8e4 	bl	80002cc <__adddf3>
 8013104:	4682      	mov	sl, r0
 8013106:	468b      	mov	fp, r1
 8013108:	e78f      	b.n	801302a <_strtod_l+0xac2>
 801310a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801310e:	e7dd      	b.n	80130cc <_strtod_l+0xb64>
 8013110:	a311      	add	r3, pc, #68	; (adr r3, 8013158 <_strtod_l+0xbf0>)
 8013112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013116:	f7ed fd01 	bl	8000b1c <__aeabi_dcmplt>
 801311a:	e7b4      	b.n	8013086 <_strtod_l+0xb1e>
 801311c:	2300      	movs	r3, #0
 801311e:	930e      	str	r3, [sp, #56]	; 0x38
 8013120:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013122:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013124:	6013      	str	r3, [r2, #0]
 8013126:	f7ff ba65 	b.w	80125f4 <_strtod_l+0x8c>
 801312a:	2b65      	cmp	r3, #101	; 0x65
 801312c:	f43f ab5d 	beq.w	80127ea <_strtod_l+0x282>
 8013130:	2b45      	cmp	r3, #69	; 0x45
 8013132:	f43f ab5a 	beq.w	80127ea <_strtod_l+0x282>
 8013136:	2201      	movs	r2, #1
 8013138:	f7ff bb92 	b.w	8012860 <_strtod_l+0x2f8>
 801313c:	f3af 8000 	nop.w
 8013140:	94a03595 	.word	0x94a03595
 8013144:	3fdfffff 	.word	0x3fdfffff
 8013148:	35afe535 	.word	0x35afe535
 801314c:	3fe00000 	.word	0x3fe00000
 8013150:	ffc00000 	.word	0xffc00000
 8013154:	41dfffff 	.word	0x41dfffff
 8013158:	94a03595 	.word	0x94a03595
 801315c:	3fcfffff 	.word	0x3fcfffff
 8013160:	3ff00000 	.word	0x3ff00000
 8013164:	7ff00000 	.word	0x7ff00000
 8013168:	7fe00000 	.word	0x7fe00000
 801316c:	7c9fffff 	.word	0x7c9fffff
 8013170:	3fe00000 	.word	0x3fe00000
 8013174:	bff00000 	.word	0xbff00000
 8013178:	7fefffff 	.word	0x7fefffff

0801317c <_strtod_r>:
 801317c:	4b01      	ldr	r3, [pc, #4]	; (8013184 <_strtod_r+0x8>)
 801317e:	f7ff b9f3 	b.w	8012568 <_strtod_l>
 8013182:	bf00      	nop
 8013184:	2000010c 	.word	0x2000010c

08013188 <_strtol_l.isra.0>:
 8013188:	2b01      	cmp	r3, #1
 801318a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801318e:	d001      	beq.n	8013194 <_strtol_l.isra.0+0xc>
 8013190:	2b24      	cmp	r3, #36	; 0x24
 8013192:	d906      	bls.n	80131a2 <_strtol_l.isra.0+0x1a>
 8013194:	f7fd fba8 	bl	80108e8 <__errno>
 8013198:	2316      	movs	r3, #22
 801319a:	6003      	str	r3, [r0, #0]
 801319c:	2000      	movs	r0, #0
 801319e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131a2:	4f3a      	ldr	r7, [pc, #232]	; (801328c <_strtol_l.isra.0+0x104>)
 80131a4:	468e      	mov	lr, r1
 80131a6:	4676      	mov	r6, lr
 80131a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80131ac:	5de5      	ldrb	r5, [r4, r7]
 80131ae:	f015 0508 	ands.w	r5, r5, #8
 80131b2:	d1f8      	bne.n	80131a6 <_strtol_l.isra.0+0x1e>
 80131b4:	2c2d      	cmp	r4, #45	; 0x2d
 80131b6:	d134      	bne.n	8013222 <_strtol_l.isra.0+0x9a>
 80131b8:	f89e 4000 	ldrb.w	r4, [lr]
 80131bc:	f04f 0801 	mov.w	r8, #1
 80131c0:	f106 0e02 	add.w	lr, r6, #2
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d05c      	beq.n	8013282 <_strtol_l.isra.0+0xfa>
 80131c8:	2b10      	cmp	r3, #16
 80131ca:	d10c      	bne.n	80131e6 <_strtol_l.isra.0+0x5e>
 80131cc:	2c30      	cmp	r4, #48	; 0x30
 80131ce:	d10a      	bne.n	80131e6 <_strtol_l.isra.0+0x5e>
 80131d0:	f89e 4000 	ldrb.w	r4, [lr]
 80131d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80131d8:	2c58      	cmp	r4, #88	; 0x58
 80131da:	d14d      	bne.n	8013278 <_strtol_l.isra.0+0xf0>
 80131dc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80131e0:	2310      	movs	r3, #16
 80131e2:	f10e 0e02 	add.w	lr, lr, #2
 80131e6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80131ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 80131ee:	2600      	movs	r6, #0
 80131f0:	fbbc f9f3 	udiv	r9, ip, r3
 80131f4:	4635      	mov	r5, r6
 80131f6:	fb03 ca19 	mls	sl, r3, r9, ip
 80131fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80131fe:	2f09      	cmp	r7, #9
 8013200:	d818      	bhi.n	8013234 <_strtol_l.isra.0+0xac>
 8013202:	463c      	mov	r4, r7
 8013204:	42a3      	cmp	r3, r4
 8013206:	dd24      	ble.n	8013252 <_strtol_l.isra.0+0xca>
 8013208:	2e00      	cmp	r6, #0
 801320a:	db1f      	blt.n	801324c <_strtol_l.isra.0+0xc4>
 801320c:	45a9      	cmp	r9, r5
 801320e:	d31d      	bcc.n	801324c <_strtol_l.isra.0+0xc4>
 8013210:	d101      	bne.n	8013216 <_strtol_l.isra.0+0x8e>
 8013212:	45a2      	cmp	sl, r4
 8013214:	db1a      	blt.n	801324c <_strtol_l.isra.0+0xc4>
 8013216:	fb05 4503 	mla	r5, r5, r3, r4
 801321a:	2601      	movs	r6, #1
 801321c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013220:	e7eb      	b.n	80131fa <_strtol_l.isra.0+0x72>
 8013222:	2c2b      	cmp	r4, #43	; 0x2b
 8013224:	bf08      	it	eq
 8013226:	f89e 4000 	ldrbeq.w	r4, [lr]
 801322a:	46a8      	mov	r8, r5
 801322c:	bf08      	it	eq
 801322e:	f106 0e02 	addeq.w	lr, r6, #2
 8013232:	e7c7      	b.n	80131c4 <_strtol_l.isra.0+0x3c>
 8013234:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013238:	2f19      	cmp	r7, #25
 801323a:	d801      	bhi.n	8013240 <_strtol_l.isra.0+0xb8>
 801323c:	3c37      	subs	r4, #55	; 0x37
 801323e:	e7e1      	b.n	8013204 <_strtol_l.isra.0+0x7c>
 8013240:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013244:	2f19      	cmp	r7, #25
 8013246:	d804      	bhi.n	8013252 <_strtol_l.isra.0+0xca>
 8013248:	3c57      	subs	r4, #87	; 0x57
 801324a:	e7db      	b.n	8013204 <_strtol_l.isra.0+0x7c>
 801324c:	f04f 36ff 	mov.w	r6, #4294967295
 8013250:	e7e4      	b.n	801321c <_strtol_l.isra.0+0x94>
 8013252:	2e00      	cmp	r6, #0
 8013254:	da05      	bge.n	8013262 <_strtol_l.isra.0+0xda>
 8013256:	2322      	movs	r3, #34	; 0x22
 8013258:	6003      	str	r3, [r0, #0]
 801325a:	4665      	mov	r5, ip
 801325c:	b942      	cbnz	r2, 8013270 <_strtol_l.isra.0+0xe8>
 801325e:	4628      	mov	r0, r5
 8013260:	e79d      	b.n	801319e <_strtol_l.isra.0+0x16>
 8013262:	f1b8 0f00 	cmp.w	r8, #0
 8013266:	d000      	beq.n	801326a <_strtol_l.isra.0+0xe2>
 8013268:	426d      	negs	r5, r5
 801326a:	2a00      	cmp	r2, #0
 801326c:	d0f7      	beq.n	801325e <_strtol_l.isra.0+0xd6>
 801326e:	b10e      	cbz	r6, 8013274 <_strtol_l.isra.0+0xec>
 8013270:	f10e 31ff 	add.w	r1, lr, #4294967295
 8013274:	6011      	str	r1, [r2, #0]
 8013276:	e7f2      	b.n	801325e <_strtol_l.isra.0+0xd6>
 8013278:	2430      	movs	r4, #48	; 0x30
 801327a:	2b00      	cmp	r3, #0
 801327c:	d1b3      	bne.n	80131e6 <_strtol_l.isra.0+0x5e>
 801327e:	2308      	movs	r3, #8
 8013280:	e7b1      	b.n	80131e6 <_strtol_l.isra.0+0x5e>
 8013282:	2c30      	cmp	r4, #48	; 0x30
 8013284:	d0a4      	beq.n	80131d0 <_strtol_l.isra.0+0x48>
 8013286:	230a      	movs	r3, #10
 8013288:	e7ad      	b.n	80131e6 <_strtol_l.isra.0+0x5e>
 801328a:	bf00      	nop
 801328c:	08018979 	.word	0x08018979

08013290 <_strtol_r>:
 8013290:	f7ff bf7a 	b.w	8013188 <_strtol_l.isra.0>

08013294 <_strtoul_l.isra.0>:
 8013294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013298:	4e3b      	ldr	r6, [pc, #236]	; (8013388 <_strtoul_l.isra.0+0xf4>)
 801329a:	4686      	mov	lr, r0
 801329c:	468c      	mov	ip, r1
 801329e:	4660      	mov	r0, ip
 80132a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80132a4:	5da5      	ldrb	r5, [r4, r6]
 80132a6:	f015 0508 	ands.w	r5, r5, #8
 80132aa:	d1f8      	bne.n	801329e <_strtoul_l.isra.0+0xa>
 80132ac:	2c2d      	cmp	r4, #45	; 0x2d
 80132ae:	d134      	bne.n	801331a <_strtoul_l.isra.0+0x86>
 80132b0:	f89c 4000 	ldrb.w	r4, [ip]
 80132b4:	f04f 0801 	mov.w	r8, #1
 80132b8:	f100 0c02 	add.w	ip, r0, #2
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d05e      	beq.n	801337e <_strtoul_l.isra.0+0xea>
 80132c0:	2b10      	cmp	r3, #16
 80132c2:	d10c      	bne.n	80132de <_strtoul_l.isra.0+0x4a>
 80132c4:	2c30      	cmp	r4, #48	; 0x30
 80132c6:	d10a      	bne.n	80132de <_strtoul_l.isra.0+0x4a>
 80132c8:	f89c 0000 	ldrb.w	r0, [ip]
 80132cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80132d0:	2858      	cmp	r0, #88	; 0x58
 80132d2:	d14f      	bne.n	8013374 <_strtoul_l.isra.0+0xe0>
 80132d4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80132d8:	2310      	movs	r3, #16
 80132da:	f10c 0c02 	add.w	ip, ip, #2
 80132de:	f04f 37ff 	mov.w	r7, #4294967295
 80132e2:	2500      	movs	r5, #0
 80132e4:	fbb7 f7f3 	udiv	r7, r7, r3
 80132e8:	fb03 f907 	mul.w	r9, r3, r7
 80132ec:	ea6f 0909 	mvn.w	r9, r9
 80132f0:	4628      	mov	r0, r5
 80132f2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80132f6:	2e09      	cmp	r6, #9
 80132f8:	d818      	bhi.n	801332c <_strtoul_l.isra.0+0x98>
 80132fa:	4634      	mov	r4, r6
 80132fc:	42a3      	cmp	r3, r4
 80132fe:	dd24      	ble.n	801334a <_strtoul_l.isra.0+0xb6>
 8013300:	2d00      	cmp	r5, #0
 8013302:	db1f      	blt.n	8013344 <_strtoul_l.isra.0+0xb0>
 8013304:	4287      	cmp	r7, r0
 8013306:	d31d      	bcc.n	8013344 <_strtoul_l.isra.0+0xb0>
 8013308:	d101      	bne.n	801330e <_strtoul_l.isra.0+0x7a>
 801330a:	45a1      	cmp	r9, r4
 801330c:	db1a      	blt.n	8013344 <_strtoul_l.isra.0+0xb0>
 801330e:	fb00 4003 	mla	r0, r0, r3, r4
 8013312:	2501      	movs	r5, #1
 8013314:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013318:	e7eb      	b.n	80132f2 <_strtoul_l.isra.0+0x5e>
 801331a:	2c2b      	cmp	r4, #43	; 0x2b
 801331c:	bf08      	it	eq
 801331e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8013322:	46a8      	mov	r8, r5
 8013324:	bf08      	it	eq
 8013326:	f100 0c02 	addeq.w	ip, r0, #2
 801332a:	e7c7      	b.n	80132bc <_strtoul_l.isra.0+0x28>
 801332c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8013330:	2e19      	cmp	r6, #25
 8013332:	d801      	bhi.n	8013338 <_strtoul_l.isra.0+0xa4>
 8013334:	3c37      	subs	r4, #55	; 0x37
 8013336:	e7e1      	b.n	80132fc <_strtoul_l.isra.0+0x68>
 8013338:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801333c:	2e19      	cmp	r6, #25
 801333e:	d804      	bhi.n	801334a <_strtoul_l.isra.0+0xb6>
 8013340:	3c57      	subs	r4, #87	; 0x57
 8013342:	e7db      	b.n	80132fc <_strtoul_l.isra.0+0x68>
 8013344:	f04f 35ff 	mov.w	r5, #4294967295
 8013348:	e7e4      	b.n	8013314 <_strtoul_l.isra.0+0x80>
 801334a:	2d00      	cmp	r5, #0
 801334c:	da07      	bge.n	801335e <_strtoul_l.isra.0+0xca>
 801334e:	2322      	movs	r3, #34	; 0x22
 8013350:	f8ce 3000 	str.w	r3, [lr]
 8013354:	f04f 30ff 	mov.w	r0, #4294967295
 8013358:	b942      	cbnz	r2, 801336c <_strtoul_l.isra.0+0xd8>
 801335a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801335e:	f1b8 0f00 	cmp.w	r8, #0
 8013362:	d000      	beq.n	8013366 <_strtoul_l.isra.0+0xd2>
 8013364:	4240      	negs	r0, r0
 8013366:	2a00      	cmp	r2, #0
 8013368:	d0f7      	beq.n	801335a <_strtoul_l.isra.0+0xc6>
 801336a:	b10d      	cbz	r5, 8013370 <_strtoul_l.isra.0+0xdc>
 801336c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8013370:	6011      	str	r1, [r2, #0]
 8013372:	e7f2      	b.n	801335a <_strtoul_l.isra.0+0xc6>
 8013374:	2430      	movs	r4, #48	; 0x30
 8013376:	2b00      	cmp	r3, #0
 8013378:	d1b1      	bne.n	80132de <_strtoul_l.isra.0+0x4a>
 801337a:	2308      	movs	r3, #8
 801337c:	e7af      	b.n	80132de <_strtoul_l.isra.0+0x4a>
 801337e:	2c30      	cmp	r4, #48	; 0x30
 8013380:	d0a2      	beq.n	80132c8 <_strtoul_l.isra.0+0x34>
 8013382:	230a      	movs	r3, #10
 8013384:	e7ab      	b.n	80132de <_strtoul_l.isra.0+0x4a>
 8013386:	bf00      	nop
 8013388:	08018979 	.word	0x08018979

0801338c <_strtoul_r>:
 801338c:	f7ff bf82 	b.w	8013294 <_strtoul_l.isra.0>

08013390 <strtoul>:
 8013390:	4613      	mov	r3, r2
 8013392:	460a      	mov	r2, r1
 8013394:	4601      	mov	r1, r0
 8013396:	4802      	ldr	r0, [pc, #8]	; (80133a0 <strtoul+0x10>)
 8013398:	6800      	ldr	r0, [r0, #0]
 801339a:	f7ff bf7b 	b.w	8013294 <_strtoul_l.isra.0>
 801339e:	bf00      	nop
 80133a0:	20000040 	.word	0x20000040

080133a4 <__tzcalc_limits>:
 80133a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133a8:	4680      	mov	r8, r0
 80133aa:	f001 fe43 	bl	8015034 <__gettzinfo>
 80133ae:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80133b2:	4598      	cmp	r8, r3
 80133b4:	f340 8098 	ble.w	80134e8 <__tzcalc_limits+0x144>
 80133b8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80133bc:	4443      	add	r3, r8
 80133be:	109b      	asrs	r3, r3, #2
 80133c0:	f240 126d 	movw	r2, #365	; 0x16d
 80133c4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80133c8:	fb02 3505 	mla	r5, r2, r5, r3
 80133cc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80133d0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80133d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80133d8:	441d      	add	r5, r3
 80133da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80133de:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80133e2:	fb98 f7f3 	sdiv	r7, r8, r3
 80133e6:	fb03 8717 	mls	r7, r3, r7, r8
 80133ea:	4442      	add	r2, r8
 80133ec:	fab7 fc87 	clz	ip, r7
 80133f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80133f4:	f008 0303 	and.w	r3, r8, #3
 80133f8:	4415      	add	r5, r2
 80133fa:	2264      	movs	r2, #100	; 0x64
 80133fc:	f8c0 8004 	str.w	r8, [r0, #4]
 8013400:	fb98 f6f2 	sdiv	r6, r8, r2
 8013404:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8013408:	fb02 8616 	mls	r6, r2, r6, r8
 801340c:	4604      	mov	r4, r0
 801340e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8013412:	9300      	str	r3, [sp, #0]
 8013414:	f04f 0e07 	mov.w	lr, #7
 8013418:	7a22      	ldrb	r2, [r4, #8]
 801341a:	6963      	ldr	r3, [r4, #20]
 801341c:	2a4a      	cmp	r2, #74	; 0x4a
 801341e:	d128      	bne.n	8013472 <__tzcalc_limits+0xce>
 8013420:	9900      	ldr	r1, [sp, #0]
 8013422:	18ea      	adds	r2, r5, r3
 8013424:	b901      	cbnz	r1, 8013428 <__tzcalc_limits+0x84>
 8013426:	b906      	cbnz	r6, 801342a <__tzcalc_limits+0x86>
 8013428:	bb0f      	cbnz	r7, 801346e <__tzcalc_limits+0xca>
 801342a:	2b3b      	cmp	r3, #59	; 0x3b
 801342c:	bfd4      	ite	le
 801342e:	2300      	movle	r3, #0
 8013430:	2301      	movgt	r3, #1
 8013432:	4413      	add	r3, r2
 8013434:	1e5a      	subs	r2, r3, #1
 8013436:	69a3      	ldr	r3, [r4, #24]
 8013438:	492c      	ldr	r1, [pc, #176]	; (80134ec <__tzcalc_limits+0x148>)
 801343a:	fb01 3202 	mla	r2, r1, r2, r3
 801343e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013440:	4413      	add	r3, r2
 8013442:	461a      	mov	r2, r3
 8013444:	17db      	asrs	r3, r3, #31
 8013446:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801344a:	3428      	adds	r4, #40	; 0x28
 801344c:	45a3      	cmp	fp, r4
 801344e:	d1e3      	bne.n	8013418 <__tzcalc_limits+0x74>
 8013450:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8013454:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8013458:	4294      	cmp	r4, r2
 801345a:	eb75 0303 	sbcs.w	r3, r5, r3
 801345e:	bfb4      	ite	lt
 8013460:	2301      	movlt	r3, #1
 8013462:	2300      	movge	r3, #0
 8013464:	6003      	str	r3, [r0, #0]
 8013466:	2001      	movs	r0, #1
 8013468:	b003      	add	sp, #12
 801346a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801346e:	2300      	movs	r3, #0
 8013470:	e7df      	b.n	8013432 <__tzcalc_limits+0x8e>
 8013472:	2a44      	cmp	r2, #68	; 0x44
 8013474:	d101      	bne.n	801347a <__tzcalc_limits+0xd6>
 8013476:	18ea      	adds	r2, r5, r3
 8013478:	e7dd      	b.n	8013436 <__tzcalc_limits+0x92>
 801347a:	9a00      	ldr	r2, [sp, #0]
 801347c:	bb72      	cbnz	r2, 80134dc <__tzcalc_limits+0x138>
 801347e:	2e00      	cmp	r6, #0
 8013480:	bf0c      	ite	eq
 8013482:	46e0      	moveq	r8, ip
 8013484:	f04f 0801 	movne.w	r8, #1
 8013488:	4919      	ldr	r1, [pc, #100]	; (80134f0 <__tzcalc_limits+0x14c>)
 801348a:	68e2      	ldr	r2, [r4, #12]
 801348c:	9201      	str	r2, [sp, #4]
 801348e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8013492:	fb0a 1808 	mla	r8, sl, r8, r1
 8013496:	462a      	mov	r2, r5
 8013498:	f04f 0900 	mov.w	r9, #0
 801349c:	f1a8 0804 	sub.w	r8, r8, #4
 80134a0:	9901      	ldr	r1, [sp, #4]
 80134a2:	f109 0901 	add.w	r9, r9, #1
 80134a6:	4549      	cmp	r1, r9
 80134a8:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80134ac:	dc18      	bgt.n	80134e0 <__tzcalc_limits+0x13c>
 80134ae:	f102 0804 	add.w	r8, r2, #4
 80134b2:	fb98 f9fe 	sdiv	r9, r8, lr
 80134b6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80134ba:	eba8 0909 	sub.w	r9, r8, r9
 80134be:	ebb3 0909 	subs.w	r9, r3, r9
 80134c2:	6923      	ldr	r3, [r4, #16]
 80134c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80134c8:	bf48      	it	mi
 80134ca:	f109 0907 	addmi.w	r9, r9, #7
 80134ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80134d2:	444b      	add	r3, r9
 80134d4:	4553      	cmp	r3, sl
 80134d6:	da05      	bge.n	80134e4 <__tzcalc_limits+0x140>
 80134d8:	441a      	add	r2, r3
 80134da:	e7ac      	b.n	8013436 <__tzcalc_limits+0x92>
 80134dc:	46e0      	mov	r8, ip
 80134de:	e7d3      	b.n	8013488 <__tzcalc_limits+0xe4>
 80134e0:	4452      	add	r2, sl
 80134e2:	e7dd      	b.n	80134a0 <__tzcalc_limits+0xfc>
 80134e4:	3b07      	subs	r3, #7
 80134e6:	e7f5      	b.n	80134d4 <__tzcalc_limits+0x130>
 80134e8:	2000      	movs	r0, #0
 80134ea:	e7bd      	b.n	8013468 <__tzcalc_limits+0xc4>
 80134ec:	00015180 	.word	0x00015180
 80134f0:	08018814 	.word	0x08018814

080134f4 <__tz_lock>:
 80134f4:	4801      	ldr	r0, [pc, #4]	; (80134fc <__tz_lock+0x8>)
 80134f6:	f7fd bc34 	b.w	8010d62 <__retarget_lock_acquire>
 80134fa:	bf00      	nop
 80134fc:	2000618b 	.word	0x2000618b

08013500 <__tz_unlock>:
 8013500:	4801      	ldr	r0, [pc, #4]	; (8013508 <__tz_unlock+0x8>)
 8013502:	f7fd bc30 	b.w	8010d66 <__retarget_lock_release>
 8013506:	bf00      	nop
 8013508:	2000618b 	.word	0x2000618b

0801350c <_tzset_unlocked>:
 801350c:	4b01      	ldr	r3, [pc, #4]	; (8013514 <_tzset_unlocked+0x8>)
 801350e:	6818      	ldr	r0, [r3, #0]
 8013510:	f000 b802 	b.w	8013518 <_tzset_unlocked_r>
 8013514:	20000040 	.word	0x20000040

08013518 <_tzset_unlocked_r>:
 8013518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801351c:	b08d      	sub	sp, #52	; 0x34
 801351e:	4607      	mov	r7, r0
 8013520:	f001 fd88 	bl	8015034 <__gettzinfo>
 8013524:	49ae      	ldr	r1, [pc, #696]	; (80137e0 <_tzset_unlocked_r+0x2c8>)
 8013526:	4eaf      	ldr	r6, [pc, #700]	; (80137e4 <_tzset_unlocked_r+0x2cc>)
 8013528:	4605      	mov	r5, r0
 801352a:	4638      	mov	r0, r7
 801352c:	f001 fd7a 	bl	8015024 <_getenv_r>
 8013530:	4604      	mov	r4, r0
 8013532:	b970      	cbnz	r0, 8013552 <_tzset_unlocked_r+0x3a>
 8013534:	4bac      	ldr	r3, [pc, #688]	; (80137e8 <_tzset_unlocked_r+0x2d0>)
 8013536:	4aad      	ldr	r2, [pc, #692]	; (80137ec <_tzset_unlocked_r+0x2d4>)
 8013538:	6018      	str	r0, [r3, #0]
 801353a:	4bad      	ldr	r3, [pc, #692]	; (80137f0 <_tzset_unlocked_r+0x2d8>)
 801353c:	6018      	str	r0, [r3, #0]
 801353e:	4bad      	ldr	r3, [pc, #692]	; (80137f4 <_tzset_unlocked_r+0x2dc>)
 8013540:	6830      	ldr	r0, [r6, #0]
 8013542:	e9c3 2200 	strd	r2, r2, [r3]
 8013546:	f7fd fc19 	bl	8010d7c <free>
 801354a:	6034      	str	r4, [r6, #0]
 801354c:	b00d      	add	sp, #52	; 0x34
 801354e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013552:	6831      	ldr	r1, [r6, #0]
 8013554:	2900      	cmp	r1, #0
 8013556:	d15f      	bne.n	8013618 <_tzset_unlocked_r+0x100>
 8013558:	6830      	ldr	r0, [r6, #0]
 801355a:	f7fd fc0f 	bl	8010d7c <free>
 801355e:	4620      	mov	r0, r4
 8013560:	f7ec fe50 	bl	8000204 <strlen>
 8013564:	1c41      	adds	r1, r0, #1
 8013566:	4638      	mov	r0, r7
 8013568:	f7fd ff0e 	bl	8011388 <_malloc_r>
 801356c:	6030      	str	r0, [r6, #0]
 801356e:	2800      	cmp	r0, #0
 8013570:	d157      	bne.n	8013622 <_tzset_unlocked_r+0x10a>
 8013572:	7823      	ldrb	r3, [r4, #0]
 8013574:	4aa0      	ldr	r2, [pc, #640]	; (80137f8 <_tzset_unlocked_r+0x2e0>)
 8013576:	49a1      	ldr	r1, [pc, #644]	; (80137fc <_tzset_unlocked_r+0x2e4>)
 8013578:	2b3a      	cmp	r3, #58	; 0x3a
 801357a:	bf08      	it	eq
 801357c:	3401      	addeq	r4, #1
 801357e:	ae0a      	add	r6, sp, #40	; 0x28
 8013580:	4633      	mov	r3, r6
 8013582:	4620      	mov	r0, r4
 8013584:	f7fe ff46 	bl	8012414 <siscanf>
 8013588:	2800      	cmp	r0, #0
 801358a:	dddf      	ble.n	801354c <_tzset_unlocked_r+0x34>
 801358c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801358e:	18e7      	adds	r7, r4, r3
 8013590:	5ce3      	ldrb	r3, [r4, r3]
 8013592:	2b2d      	cmp	r3, #45	; 0x2d
 8013594:	d149      	bne.n	801362a <_tzset_unlocked_r+0x112>
 8013596:	3701      	adds	r7, #1
 8013598:	f04f 34ff 	mov.w	r4, #4294967295
 801359c:	f10d 0a20 	add.w	sl, sp, #32
 80135a0:	f10d 0b1e 	add.w	fp, sp, #30
 80135a4:	f04f 0800 	mov.w	r8, #0
 80135a8:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80135ac:	4994      	ldr	r1, [pc, #592]	; (8013800 <_tzset_unlocked_r+0x2e8>)
 80135ae:	9603      	str	r6, [sp, #12]
 80135b0:	f8cd b000 	str.w	fp, [sp]
 80135b4:	4633      	mov	r3, r6
 80135b6:	aa07      	add	r2, sp, #28
 80135b8:	4638      	mov	r0, r7
 80135ba:	f8ad 801e 	strh.w	r8, [sp, #30]
 80135be:	f8ad 8020 	strh.w	r8, [sp, #32]
 80135c2:	f7fe ff27 	bl	8012414 <siscanf>
 80135c6:	4540      	cmp	r0, r8
 80135c8:	ddc0      	ble.n	801354c <_tzset_unlocked_r+0x34>
 80135ca:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80135ce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80135d2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801380c <_tzset_unlocked_r+0x2f4>
 80135d6:	213c      	movs	r1, #60	; 0x3c
 80135d8:	fb01 2203 	mla	r2, r1, r3, r2
 80135dc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80135e0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80135e4:	fb01 2303 	mla	r3, r1, r3, r2
 80135e8:	435c      	muls	r4, r3
 80135ea:	62ac      	str	r4, [r5, #40]	; 0x28
 80135ec:	4c81      	ldr	r4, [pc, #516]	; (80137f4 <_tzset_unlocked_r+0x2dc>)
 80135ee:	4b82      	ldr	r3, [pc, #520]	; (80137f8 <_tzset_unlocked_r+0x2e0>)
 80135f0:	6023      	str	r3, [r4, #0]
 80135f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135f4:	4981      	ldr	r1, [pc, #516]	; (80137fc <_tzset_unlocked_r+0x2e4>)
 80135f6:	441f      	add	r7, r3
 80135f8:	464a      	mov	r2, r9
 80135fa:	4633      	mov	r3, r6
 80135fc:	4638      	mov	r0, r7
 80135fe:	f7fe ff09 	bl	8012414 <siscanf>
 8013602:	4540      	cmp	r0, r8
 8013604:	dc16      	bgt.n	8013634 <_tzset_unlocked_r+0x11c>
 8013606:	6823      	ldr	r3, [r4, #0]
 8013608:	6063      	str	r3, [r4, #4]
 801360a:	4b77      	ldr	r3, [pc, #476]	; (80137e8 <_tzset_unlocked_r+0x2d0>)
 801360c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801360e:	601a      	str	r2, [r3, #0]
 8013610:	4b77      	ldr	r3, [pc, #476]	; (80137f0 <_tzset_unlocked_r+0x2d8>)
 8013612:	f8c3 8000 	str.w	r8, [r3]
 8013616:	e799      	b.n	801354c <_tzset_unlocked_r+0x34>
 8013618:	f7ec fdea 	bl	80001f0 <strcmp>
 801361c:	2800      	cmp	r0, #0
 801361e:	d19b      	bne.n	8013558 <_tzset_unlocked_r+0x40>
 8013620:	e794      	b.n	801354c <_tzset_unlocked_r+0x34>
 8013622:	4621      	mov	r1, r4
 8013624:	f7fe ff67 	bl	80124f6 <strcpy>
 8013628:	e7a3      	b.n	8013572 <_tzset_unlocked_r+0x5a>
 801362a:	2b2b      	cmp	r3, #43	; 0x2b
 801362c:	bf08      	it	eq
 801362e:	3701      	addeq	r7, #1
 8013630:	2401      	movs	r4, #1
 8013632:	e7b3      	b.n	801359c <_tzset_unlocked_r+0x84>
 8013634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013636:	f8c4 9004 	str.w	r9, [r4, #4]
 801363a:	18fc      	adds	r4, r7, r3
 801363c:	5cfb      	ldrb	r3, [r7, r3]
 801363e:	2b2d      	cmp	r3, #45	; 0x2d
 8013640:	f040 808b 	bne.w	801375a <_tzset_unlocked_r+0x242>
 8013644:	3401      	adds	r4, #1
 8013646:	f04f 37ff 	mov.w	r7, #4294967295
 801364a:	2300      	movs	r3, #0
 801364c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013650:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013654:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013658:	930a      	str	r3, [sp, #40]	; 0x28
 801365a:	e9cd a602 	strd	sl, r6, [sp, #8]
 801365e:	e9cd b600 	strd	fp, r6, [sp]
 8013662:	4967      	ldr	r1, [pc, #412]	; (8013800 <_tzset_unlocked_r+0x2e8>)
 8013664:	4633      	mov	r3, r6
 8013666:	aa07      	add	r2, sp, #28
 8013668:	4620      	mov	r0, r4
 801366a:	f7fe fed3 	bl	8012414 <siscanf>
 801366e:	2800      	cmp	r0, #0
 8013670:	dc78      	bgt.n	8013764 <_tzset_unlocked_r+0x24c>
 8013672:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8013674:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8013678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801367a:	652f      	str	r7, [r5, #80]	; 0x50
 801367c:	441c      	add	r4, r3
 801367e:	462f      	mov	r7, r5
 8013680:	f04f 0900 	mov.w	r9, #0
 8013684:	7823      	ldrb	r3, [r4, #0]
 8013686:	2b2c      	cmp	r3, #44	; 0x2c
 8013688:	bf08      	it	eq
 801368a:	3401      	addeq	r4, #1
 801368c:	f894 8000 	ldrb.w	r8, [r4]
 8013690:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8013694:	d178      	bne.n	8013788 <_tzset_unlocked_r+0x270>
 8013696:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801369a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801369e:	ab09      	add	r3, sp, #36	; 0x24
 80136a0:	9300      	str	r3, [sp, #0]
 80136a2:	4958      	ldr	r1, [pc, #352]	; (8013804 <_tzset_unlocked_r+0x2ec>)
 80136a4:	9603      	str	r6, [sp, #12]
 80136a6:	4633      	mov	r3, r6
 80136a8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80136ac:	4620      	mov	r0, r4
 80136ae:	f7fe feb1 	bl	8012414 <siscanf>
 80136b2:	2803      	cmp	r0, #3
 80136b4:	f47f af4a 	bne.w	801354c <_tzset_unlocked_r+0x34>
 80136b8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80136bc:	1e4b      	subs	r3, r1, #1
 80136be:	2b0b      	cmp	r3, #11
 80136c0:	f63f af44 	bhi.w	801354c <_tzset_unlocked_r+0x34>
 80136c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80136c8:	1e53      	subs	r3, r2, #1
 80136ca:	2b04      	cmp	r3, #4
 80136cc:	f63f af3e 	bhi.w	801354c <_tzset_unlocked_r+0x34>
 80136d0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80136d4:	2b06      	cmp	r3, #6
 80136d6:	f63f af39 	bhi.w	801354c <_tzset_unlocked_r+0x34>
 80136da:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80136de:	f887 8008 	strb.w	r8, [r7, #8]
 80136e2:	617b      	str	r3, [r7, #20]
 80136e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136e6:	eb04 0803 	add.w	r8, r4, r3
 80136ea:	2302      	movs	r3, #2
 80136ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80136f0:	2300      	movs	r3, #0
 80136f2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80136f6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80136fa:	930a      	str	r3, [sp, #40]	; 0x28
 80136fc:	f898 3000 	ldrb.w	r3, [r8]
 8013700:	2b2f      	cmp	r3, #47	; 0x2f
 8013702:	d109      	bne.n	8013718 <_tzset_unlocked_r+0x200>
 8013704:	e9cd a602 	strd	sl, r6, [sp, #8]
 8013708:	e9cd b600 	strd	fp, r6, [sp]
 801370c:	493e      	ldr	r1, [pc, #248]	; (8013808 <_tzset_unlocked_r+0x2f0>)
 801370e:	4633      	mov	r3, r6
 8013710:	aa07      	add	r2, sp, #28
 8013712:	4640      	mov	r0, r8
 8013714:	f7fe fe7e 	bl	8012414 <siscanf>
 8013718:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801371c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8013720:	213c      	movs	r1, #60	; 0x3c
 8013722:	fb01 2203 	mla	r2, r1, r3, r2
 8013726:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801372a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801372e:	fb01 2303 	mla	r3, r1, r3, r2
 8013732:	61bb      	str	r3, [r7, #24]
 8013734:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013736:	3728      	adds	r7, #40	; 0x28
 8013738:	4444      	add	r4, r8
 801373a:	f1b9 0f00 	cmp.w	r9, #0
 801373e:	d020      	beq.n	8013782 <_tzset_unlocked_r+0x26a>
 8013740:	6868      	ldr	r0, [r5, #4]
 8013742:	f7ff fe2f 	bl	80133a4 <__tzcalc_limits>
 8013746:	4b28      	ldr	r3, [pc, #160]	; (80137e8 <_tzset_unlocked_r+0x2d0>)
 8013748:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801374a:	601a      	str	r2, [r3, #0]
 801374c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801374e:	1a9b      	subs	r3, r3, r2
 8013750:	4a27      	ldr	r2, [pc, #156]	; (80137f0 <_tzset_unlocked_r+0x2d8>)
 8013752:	bf18      	it	ne
 8013754:	2301      	movne	r3, #1
 8013756:	6013      	str	r3, [r2, #0]
 8013758:	e6f8      	b.n	801354c <_tzset_unlocked_r+0x34>
 801375a:	2b2b      	cmp	r3, #43	; 0x2b
 801375c:	bf08      	it	eq
 801375e:	3401      	addeq	r4, #1
 8013760:	2701      	movs	r7, #1
 8013762:	e772      	b.n	801364a <_tzset_unlocked_r+0x132>
 8013764:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013768:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801376c:	213c      	movs	r1, #60	; 0x3c
 801376e:	fb01 2203 	mla	r2, r1, r3, r2
 8013772:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013776:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801377a:	fb01 2303 	mla	r3, r1, r3, r2
 801377e:	435f      	muls	r7, r3
 8013780:	e77a      	b.n	8013678 <_tzset_unlocked_r+0x160>
 8013782:	f04f 0901 	mov.w	r9, #1
 8013786:	e77d      	b.n	8013684 <_tzset_unlocked_r+0x16c>
 8013788:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801378c:	bf06      	itte	eq
 801378e:	3401      	addeq	r4, #1
 8013790:	4643      	moveq	r3, r8
 8013792:	2344      	movne	r3, #68	; 0x44
 8013794:	220a      	movs	r2, #10
 8013796:	a90b      	add	r1, sp, #44	; 0x2c
 8013798:	4620      	mov	r0, r4
 801379a:	9305      	str	r3, [sp, #20]
 801379c:	f7ff fdf8 	bl	8013390 <strtoul>
 80137a0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80137a4:	9b05      	ldr	r3, [sp, #20]
 80137a6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80137aa:	45a0      	cmp	r8, r4
 80137ac:	d114      	bne.n	80137d8 <_tzset_unlocked_r+0x2c0>
 80137ae:	234d      	movs	r3, #77	; 0x4d
 80137b0:	f1b9 0f00 	cmp.w	r9, #0
 80137b4:	d107      	bne.n	80137c6 <_tzset_unlocked_r+0x2ae>
 80137b6:	722b      	strb	r3, [r5, #8]
 80137b8:	2103      	movs	r1, #3
 80137ba:	2302      	movs	r3, #2
 80137bc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80137c0:	f8c5 9014 	str.w	r9, [r5, #20]
 80137c4:	e791      	b.n	80136ea <_tzset_unlocked_r+0x1d2>
 80137c6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80137ca:	220b      	movs	r2, #11
 80137cc:	2301      	movs	r3, #1
 80137ce:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80137d2:	2300      	movs	r3, #0
 80137d4:	63eb      	str	r3, [r5, #60]	; 0x3c
 80137d6:	e788      	b.n	80136ea <_tzset_unlocked_r+0x1d2>
 80137d8:	b280      	uxth	r0, r0
 80137da:	723b      	strb	r3, [r7, #8]
 80137dc:	6178      	str	r0, [r7, #20]
 80137de:	e784      	b.n	80136ea <_tzset_unlocked_r+0x1d2>
 80137e0:	08018900 	.word	0x08018900
 80137e4:	20005a20 	.word	0x20005a20
 80137e8:	20005a28 	.word	0x20005a28
 80137ec:	08018903 	.word	0x08018903
 80137f0:	20005a24 	.word	0x20005a24
 80137f4:	200000a4 	.word	0x200000a4
 80137f8:	20005a13 	.word	0x20005a13
 80137fc:	08018907 	.word	0x08018907
 8013800:	0801892a 	.word	0x0801892a
 8013804:	08018916 	.word	0x08018916
 8013808:	08018929 	.word	0x08018929
 801380c:	20005a08 	.word	0x20005a08

08013810 <__swbuf_r>:
 8013810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013812:	460e      	mov	r6, r1
 8013814:	4614      	mov	r4, r2
 8013816:	4605      	mov	r5, r0
 8013818:	b118      	cbz	r0, 8013822 <__swbuf_r+0x12>
 801381a:	6983      	ldr	r3, [r0, #24]
 801381c:	b90b      	cbnz	r3, 8013822 <__swbuf_r+0x12>
 801381e:	f7fd f8c1 	bl	80109a4 <__sinit>
 8013822:	4b21      	ldr	r3, [pc, #132]	; (80138a8 <__swbuf_r+0x98>)
 8013824:	429c      	cmp	r4, r3
 8013826:	d12b      	bne.n	8013880 <__swbuf_r+0x70>
 8013828:	686c      	ldr	r4, [r5, #4]
 801382a:	69a3      	ldr	r3, [r4, #24]
 801382c:	60a3      	str	r3, [r4, #8]
 801382e:	89a3      	ldrh	r3, [r4, #12]
 8013830:	071a      	lsls	r2, r3, #28
 8013832:	d52f      	bpl.n	8013894 <__swbuf_r+0x84>
 8013834:	6923      	ldr	r3, [r4, #16]
 8013836:	b36b      	cbz	r3, 8013894 <__swbuf_r+0x84>
 8013838:	6923      	ldr	r3, [r4, #16]
 801383a:	6820      	ldr	r0, [r4, #0]
 801383c:	1ac0      	subs	r0, r0, r3
 801383e:	6963      	ldr	r3, [r4, #20]
 8013840:	b2f6      	uxtb	r6, r6
 8013842:	4283      	cmp	r3, r0
 8013844:	4637      	mov	r7, r6
 8013846:	dc04      	bgt.n	8013852 <__swbuf_r+0x42>
 8013848:	4621      	mov	r1, r4
 801384a:	4628      	mov	r0, r5
 801384c:	f000 fff2 	bl	8014834 <_fflush_r>
 8013850:	bb30      	cbnz	r0, 80138a0 <__swbuf_r+0x90>
 8013852:	68a3      	ldr	r3, [r4, #8]
 8013854:	3b01      	subs	r3, #1
 8013856:	60a3      	str	r3, [r4, #8]
 8013858:	6823      	ldr	r3, [r4, #0]
 801385a:	1c5a      	adds	r2, r3, #1
 801385c:	6022      	str	r2, [r4, #0]
 801385e:	701e      	strb	r6, [r3, #0]
 8013860:	6963      	ldr	r3, [r4, #20]
 8013862:	3001      	adds	r0, #1
 8013864:	4283      	cmp	r3, r0
 8013866:	d004      	beq.n	8013872 <__swbuf_r+0x62>
 8013868:	89a3      	ldrh	r3, [r4, #12]
 801386a:	07db      	lsls	r3, r3, #31
 801386c:	d506      	bpl.n	801387c <__swbuf_r+0x6c>
 801386e:	2e0a      	cmp	r6, #10
 8013870:	d104      	bne.n	801387c <__swbuf_r+0x6c>
 8013872:	4621      	mov	r1, r4
 8013874:	4628      	mov	r0, r5
 8013876:	f000 ffdd 	bl	8014834 <_fflush_r>
 801387a:	b988      	cbnz	r0, 80138a0 <__swbuf_r+0x90>
 801387c:	4638      	mov	r0, r7
 801387e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013880:	4b0a      	ldr	r3, [pc, #40]	; (80138ac <__swbuf_r+0x9c>)
 8013882:	429c      	cmp	r4, r3
 8013884:	d101      	bne.n	801388a <__swbuf_r+0x7a>
 8013886:	68ac      	ldr	r4, [r5, #8]
 8013888:	e7cf      	b.n	801382a <__swbuf_r+0x1a>
 801388a:	4b09      	ldr	r3, [pc, #36]	; (80138b0 <__swbuf_r+0xa0>)
 801388c:	429c      	cmp	r4, r3
 801388e:	bf08      	it	eq
 8013890:	68ec      	ldreq	r4, [r5, #12]
 8013892:	e7ca      	b.n	801382a <__swbuf_r+0x1a>
 8013894:	4621      	mov	r1, r4
 8013896:	4628      	mov	r0, r5
 8013898:	f000 f81e 	bl	80138d8 <__swsetup_r>
 801389c:	2800      	cmp	r0, #0
 801389e:	d0cb      	beq.n	8013838 <__swbuf_r+0x28>
 80138a0:	f04f 37ff 	mov.w	r7, #4294967295
 80138a4:	e7ea      	b.n	801387c <__swbuf_r+0x6c>
 80138a6:	bf00      	nop
 80138a8:	080186f8 	.word	0x080186f8
 80138ac:	08018718 	.word	0x08018718
 80138b0:	080186d8 	.word	0x080186d8

080138b4 <_write_r>:
 80138b4:	b538      	push	{r3, r4, r5, lr}
 80138b6:	4d07      	ldr	r5, [pc, #28]	; (80138d4 <_write_r+0x20>)
 80138b8:	4604      	mov	r4, r0
 80138ba:	4608      	mov	r0, r1
 80138bc:	4611      	mov	r1, r2
 80138be:	2200      	movs	r2, #0
 80138c0:	602a      	str	r2, [r5, #0]
 80138c2:	461a      	mov	r2, r3
 80138c4:	f7ef fc1d 	bl	8003102 <_write>
 80138c8:	1c43      	adds	r3, r0, #1
 80138ca:	d102      	bne.n	80138d2 <_write_r+0x1e>
 80138cc:	682b      	ldr	r3, [r5, #0]
 80138ce:	b103      	cbz	r3, 80138d2 <_write_r+0x1e>
 80138d0:	6023      	str	r3, [r4, #0]
 80138d2:	bd38      	pop	{r3, r4, r5, pc}
 80138d4:	20006190 	.word	0x20006190

080138d8 <__swsetup_r>:
 80138d8:	4b32      	ldr	r3, [pc, #200]	; (80139a4 <__swsetup_r+0xcc>)
 80138da:	b570      	push	{r4, r5, r6, lr}
 80138dc:	681d      	ldr	r5, [r3, #0]
 80138de:	4606      	mov	r6, r0
 80138e0:	460c      	mov	r4, r1
 80138e2:	b125      	cbz	r5, 80138ee <__swsetup_r+0x16>
 80138e4:	69ab      	ldr	r3, [r5, #24]
 80138e6:	b913      	cbnz	r3, 80138ee <__swsetup_r+0x16>
 80138e8:	4628      	mov	r0, r5
 80138ea:	f7fd f85b 	bl	80109a4 <__sinit>
 80138ee:	4b2e      	ldr	r3, [pc, #184]	; (80139a8 <__swsetup_r+0xd0>)
 80138f0:	429c      	cmp	r4, r3
 80138f2:	d10f      	bne.n	8013914 <__swsetup_r+0x3c>
 80138f4:	686c      	ldr	r4, [r5, #4]
 80138f6:	89a3      	ldrh	r3, [r4, #12]
 80138f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80138fc:	0719      	lsls	r1, r3, #28
 80138fe:	d42c      	bmi.n	801395a <__swsetup_r+0x82>
 8013900:	06dd      	lsls	r5, r3, #27
 8013902:	d411      	bmi.n	8013928 <__swsetup_r+0x50>
 8013904:	2309      	movs	r3, #9
 8013906:	6033      	str	r3, [r6, #0]
 8013908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801390c:	81a3      	strh	r3, [r4, #12]
 801390e:	f04f 30ff 	mov.w	r0, #4294967295
 8013912:	e03e      	b.n	8013992 <__swsetup_r+0xba>
 8013914:	4b25      	ldr	r3, [pc, #148]	; (80139ac <__swsetup_r+0xd4>)
 8013916:	429c      	cmp	r4, r3
 8013918:	d101      	bne.n	801391e <__swsetup_r+0x46>
 801391a:	68ac      	ldr	r4, [r5, #8]
 801391c:	e7eb      	b.n	80138f6 <__swsetup_r+0x1e>
 801391e:	4b24      	ldr	r3, [pc, #144]	; (80139b0 <__swsetup_r+0xd8>)
 8013920:	429c      	cmp	r4, r3
 8013922:	bf08      	it	eq
 8013924:	68ec      	ldreq	r4, [r5, #12]
 8013926:	e7e6      	b.n	80138f6 <__swsetup_r+0x1e>
 8013928:	0758      	lsls	r0, r3, #29
 801392a:	d512      	bpl.n	8013952 <__swsetup_r+0x7a>
 801392c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801392e:	b141      	cbz	r1, 8013942 <__swsetup_r+0x6a>
 8013930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013934:	4299      	cmp	r1, r3
 8013936:	d002      	beq.n	801393e <__swsetup_r+0x66>
 8013938:	4630      	mov	r0, r6
 801393a:	f7fd fcd5 	bl	80112e8 <_free_r>
 801393e:	2300      	movs	r3, #0
 8013940:	6363      	str	r3, [r4, #52]	; 0x34
 8013942:	89a3      	ldrh	r3, [r4, #12]
 8013944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013948:	81a3      	strh	r3, [r4, #12]
 801394a:	2300      	movs	r3, #0
 801394c:	6063      	str	r3, [r4, #4]
 801394e:	6923      	ldr	r3, [r4, #16]
 8013950:	6023      	str	r3, [r4, #0]
 8013952:	89a3      	ldrh	r3, [r4, #12]
 8013954:	f043 0308 	orr.w	r3, r3, #8
 8013958:	81a3      	strh	r3, [r4, #12]
 801395a:	6923      	ldr	r3, [r4, #16]
 801395c:	b94b      	cbnz	r3, 8013972 <__swsetup_r+0x9a>
 801395e:	89a3      	ldrh	r3, [r4, #12]
 8013960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013968:	d003      	beq.n	8013972 <__swsetup_r+0x9a>
 801396a:	4621      	mov	r1, r4
 801396c:	4630      	mov	r0, r6
 801396e:	f001 fc4f 	bl	8015210 <__smakebuf_r>
 8013972:	89a0      	ldrh	r0, [r4, #12]
 8013974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013978:	f010 0301 	ands.w	r3, r0, #1
 801397c:	d00a      	beq.n	8013994 <__swsetup_r+0xbc>
 801397e:	2300      	movs	r3, #0
 8013980:	60a3      	str	r3, [r4, #8]
 8013982:	6963      	ldr	r3, [r4, #20]
 8013984:	425b      	negs	r3, r3
 8013986:	61a3      	str	r3, [r4, #24]
 8013988:	6923      	ldr	r3, [r4, #16]
 801398a:	b943      	cbnz	r3, 801399e <__swsetup_r+0xc6>
 801398c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013990:	d1ba      	bne.n	8013908 <__swsetup_r+0x30>
 8013992:	bd70      	pop	{r4, r5, r6, pc}
 8013994:	0781      	lsls	r1, r0, #30
 8013996:	bf58      	it	pl
 8013998:	6963      	ldrpl	r3, [r4, #20]
 801399a:	60a3      	str	r3, [r4, #8]
 801399c:	e7f4      	b.n	8013988 <__swsetup_r+0xb0>
 801399e:	2000      	movs	r0, #0
 80139a0:	e7f7      	b.n	8013992 <__swsetup_r+0xba>
 80139a2:	bf00      	nop
 80139a4:	20000040 	.word	0x20000040
 80139a8:	080186f8 	.word	0x080186f8
 80139ac:	08018718 	.word	0x08018718
 80139b0:	080186d8 	.word	0x080186d8

080139b4 <__assert_func>:
 80139b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80139b6:	4614      	mov	r4, r2
 80139b8:	461a      	mov	r2, r3
 80139ba:	4b09      	ldr	r3, [pc, #36]	; (80139e0 <__assert_func+0x2c>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	4605      	mov	r5, r0
 80139c0:	68d8      	ldr	r0, [r3, #12]
 80139c2:	b14c      	cbz	r4, 80139d8 <__assert_func+0x24>
 80139c4:	4b07      	ldr	r3, [pc, #28]	; (80139e4 <__assert_func+0x30>)
 80139c6:	9100      	str	r1, [sp, #0]
 80139c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80139cc:	4906      	ldr	r1, [pc, #24]	; (80139e8 <__assert_func+0x34>)
 80139ce:	462b      	mov	r3, r5
 80139d0:	f000 ff6c 	bl	80148ac <fiprintf>
 80139d4:	f7fc ff80 	bl	80108d8 <abort>
 80139d8:	4b04      	ldr	r3, [pc, #16]	; (80139ec <__assert_func+0x38>)
 80139da:	461c      	mov	r4, r3
 80139dc:	e7f3      	b.n	80139c6 <__assert_func+0x12>
 80139de:	bf00      	nop
 80139e0:	20000040 	.word	0x20000040
 80139e4:	0801893c 	.word	0x0801893c
 80139e8:	08018949 	.word	0x08018949
 80139ec:	08018977 	.word	0x08018977

080139f0 <_close_r>:
 80139f0:	b538      	push	{r3, r4, r5, lr}
 80139f2:	4d06      	ldr	r5, [pc, #24]	; (8013a0c <_close_r+0x1c>)
 80139f4:	2300      	movs	r3, #0
 80139f6:	4604      	mov	r4, r0
 80139f8:	4608      	mov	r0, r1
 80139fa:	602b      	str	r3, [r5, #0]
 80139fc:	f7ef fb9d 	bl	800313a <_close>
 8013a00:	1c43      	adds	r3, r0, #1
 8013a02:	d102      	bne.n	8013a0a <_close_r+0x1a>
 8013a04:	682b      	ldr	r3, [r5, #0]
 8013a06:	b103      	cbz	r3, 8013a0a <_close_r+0x1a>
 8013a08:	6023      	str	r3, [r4, #0]
 8013a0a:	bd38      	pop	{r3, r4, r5, pc}
 8013a0c:	20006190 	.word	0x20006190

08013a10 <div>:
 8013a10:	2900      	cmp	r1, #0
 8013a12:	b510      	push	{r4, lr}
 8013a14:	fb91 f4f2 	sdiv	r4, r1, r2
 8013a18:	fb02 1314 	mls	r3, r2, r4, r1
 8013a1c:	db06      	blt.n	8013a2c <div+0x1c>
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	da01      	bge.n	8013a26 <div+0x16>
 8013a22:	3401      	adds	r4, #1
 8013a24:	1a9b      	subs	r3, r3, r2
 8013a26:	e9c0 4300 	strd	r4, r3, [r0]
 8013a2a:	bd10      	pop	{r4, pc}
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	bfc4      	itt	gt
 8013a30:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8013a34:	189b      	addgt	r3, r3, r2
 8013a36:	e7f6      	b.n	8013a26 <div+0x16>

08013a38 <quorem>:
 8013a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a3c:	6903      	ldr	r3, [r0, #16]
 8013a3e:	690c      	ldr	r4, [r1, #16]
 8013a40:	42a3      	cmp	r3, r4
 8013a42:	4607      	mov	r7, r0
 8013a44:	f2c0 8081 	blt.w	8013b4a <quorem+0x112>
 8013a48:	3c01      	subs	r4, #1
 8013a4a:	f101 0814 	add.w	r8, r1, #20
 8013a4e:	f100 0514 	add.w	r5, r0, #20
 8013a52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013a56:	9301      	str	r3, [sp, #4]
 8013a58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013a5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013a60:	3301      	adds	r3, #1
 8013a62:	429a      	cmp	r2, r3
 8013a64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013a68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013a6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013a70:	d331      	bcc.n	8013ad6 <quorem+0x9e>
 8013a72:	f04f 0e00 	mov.w	lr, #0
 8013a76:	4640      	mov	r0, r8
 8013a78:	46ac      	mov	ip, r5
 8013a7a:	46f2      	mov	sl, lr
 8013a7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013a80:	b293      	uxth	r3, r2
 8013a82:	fb06 e303 	mla	r3, r6, r3, lr
 8013a86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013a8a:	b29b      	uxth	r3, r3
 8013a8c:	ebaa 0303 	sub.w	r3, sl, r3
 8013a90:	0c12      	lsrs	r2, r2, #16
 8013a92:	f8dc a000 	ldr.w	sl, [ip]
 8013a96:	fb06 e202 	mla	r2, r6, r2, lr
 8013a9a:	fa13 f38a 	uxtah	r3, r3, sl
 8013a9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013aa2:	fa1f fa82 	uxth.w	sl, r2
 8013aa6:	f8dc 2000 	ldr.w	r2, [ip]
 8013aaa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013aae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ab8:	4581      	cmp	r9, r0
 8013aba:	f84c 3b04 	str.w	r3, [ip], #4
 8013abe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013ac2:	d2db      	bcs.n	8013a7c <quorem+0x44>
 8013ac4:	f855 300b 	ldr.w	r3, [r5, fp]
 8013ac8:	b92b      	cbnz	r3, 8013ad6 <quorem+0x9e>
 8013aca:	9b01      	ldr	r3, [sp, #4]
 8013acc:	3b04      	subs	r3, #4
 8013ace:	429d      	cmp	r5, r3
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	d32e      	bcc.n	8013b32 <quorem+0xfa>
 8013ad4:	613c      	str	r4, [r7, #16]
 8013ad6:	4638      	mov	r0, r7
 8013ad8:	f001 fec0 	bl	801585c <__mcmp>
 8013adc:	2800      	cmp	r0, #0
 8013ade:	db24      	blt.n	8013b2a <quorem+0xf2>
 8013ae0:	3601      	adds	r6, #1
 8013ae2:	4628      	mov	r0, r5
 8013ae4:	f04f 0c00 	mov.w	ip, #0
 8013ae8:	f858 2b04 	ldr.w	r2, [r8], #4
 8013aec:	f8d0 e000 	ldr.w	lr, [r0]
 8013af0:	b293      	uxth	r3, r2
 8013af2:	ebac 0303 	sub.w	r3, ip, r3
 8013af6:	0c12      	lsrs	r2, r2, #16
 8013af8:	fa13 f38e 	uxtah	r3, r3, lr
 8013afc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013b00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013b04:	b29b      	uxth	r3, r3
 8013b06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013b0a:	45c1      	cmp	r9, r8
 8013b0c:	f840 3b04 	str.w	r3, [r0], #4
 8013b10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013b14:	d2e8      	bcs.n	8013ae8 <quorem+0xb0>
 8013b16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013b1e:	b922      	cbnz	r2, 8013b2a <quorem+0xf2>
 8013b20:	3b04      	subs	r3, #4
 8013b22:	429d      	cmp	r5, r3
 8013b24:	461a      	mov	r2, r3
 8013b26:	d30a      	bcc.n	8013b3e <quorem+0x106>
 8013b28:	613c      	str	r4, [r7, #16]
 8013b2a:	4630      	mov	r0, r6
 8013b2c:	b003      	add	sp, #12
 8013b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b32:	6812      	ldr	r2, [r2, #0]
 8013b34:	3b04      	subs	r3, #4
 8013b36:	2a00      	cmp	r2, #0
 8013b38:	d1cc      	bne.n	8013ad4 <quorem+0x9c>
 8013b3a:	3c01      	subs	r4, #1
 8013b3c:	e7c7      	b.n	8013ace <quorem+0x96>
 8013b3e:	6812      	ldr	r2, [r2, #0]
 8013b40:	3b04      	subs	r3, #4
 8013b42:	2a00      	cmp	r2, #0
 8013b44:	d1f0      	bne.n	8013b28 <quorem+0xf0>
 8013b46:	3c01      	subs	r4, #1
 8013b48:	e7eb      	b.n	8013b22 <quorem+0xea>
 8013b4a:	2000      	movs	r0, #0
 8013b4c:	e7ee      	b.n	8013b2c <quorem+0xf4>
	...

08013b50 <_dtoa_r>:
 8013b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b54:	ed2d 8b02 	vpush	{d8}
 8013b58:	ec57 6b10 	vmov	r6, r7, d0
 8013b5c:	b095      	sub	sp, #84	; 0x54
 8013b5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013b60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013b64:	9105      	str	r1, [sp, #20]
 8013b66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013b6a:	4604      	mov	r4, r0
 8013b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8013b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b70:	b975      	cbnz	r5, 8013b90 <_dtoa_r+0x40>
 8013b72:	2010      	movs	r0, #16
 8013b74:	f7fd f8fa 	bl	8010d6c <malloc>
 8013b78:	4602      	mov	r2, r0
 8013b7a:	6260      	str	r0, [r4, #36]	; 0x24
 8013b7c:	b920      	cbnz	r0, 8013b88 <_dtoa_r+0x38>
 8013b7e:	4bb2      	ldr	r3, [pc, #712]	; (8013e48 <_dtoa_r+0x2f8>)
 8013b80:	21ea      	movs	r1, #234	; 0xea
 8013b82:	48b2      	ldr	r0, [pc, #712]	; (8013e4c <_dtoa_r+0x2fc>)
 8013b84:	f7ff ff16 	bl	80139b4 <__assert_func>
 8013b88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013b8c:	6005      	str	r5, [r0, #0]
 8013b8e:	60c5      	str	r5, [r0, #12]
 8013b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b92:	6819      	ldr	r1, [r3, #0]
 8013b94:	b151      	cbz	r1, 8013bac <_dtoa_r+0x5c>
 8013b96:	685a      	ldr	r2, [r3, #4]
 8013b98:	604a      	str	r2, [r1, #4]
 8013b9a:	2301      	movs	r3, #1
 8013b9c:	4093      	lsls	r3, r2
 8013b9e:	608b      	str	r3, [r1, #8]
 8013ba0:	4620      	mov	r0, r4
 8013ba2:	f001 fbd3 	bl	801534c <_Bfree>
 8013ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ba8:	2200      	movs	r2, #0
 8013baa:	601a      	str	r2, [r3, #0]
 8013bac:	1e3b      	subs	r3, r7, #0
 8013bae:	bfb9      	ittee	lt
 8013bb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013bb4:	9303      	strlt	r3, [sp, #12]
 8013bb6:	2300      	movge	r3, #0
 8013bb8:	f8c8 3000 	strge.w	r3, [r8]
 8013bbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013bc0:	4ba3      	ldr	r3, [pc, #652]	; (8013e50 <_dtoa_r+0x300>)
 8013bc2:	bfbc      	itt	lt
 8013bc4:	2201      	movlt	r2, #1
 8013bc6:	f8c8 2000 	strlt.w	r2, [r8]
 8013bca:	ea33 0309 	bics.w	r3, r3, r9
 8013bce:	d11b      	bne.n	8013c08 <_dtoa_r+0xb8>
 8013bd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013bd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8013bd6:	6013      	str	r3, [r2, #0]
 8013bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013bdc:	4333      	orrs	r3, r6
 8013bde:	f000 857a 	beq.w	80146d6 <_dtoa_r+0xb86>
 8013be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013be4:	b963      	cbnz	r3, 8013c00 <_dtoa_r+0xb0>
 8013be6:	4b9b      	ldr	r3, [pc, #620]	; (8013e54 <_dtoa_r+0x304>)
 8013be8:	e024      	b.n	8013c34 <_dtoa_r+0xe4>
 8013bea:	4b9b      	ldr	r3, [pc, #620]	; (8013e58 <_dtoa_r+0x308>)
 8013bec:	9300      	str	r3, [sp, #0]
 8013bee:	3308      	adds	r3, #8
 8013bf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013bf2:	6013      	str	r3, [r2, #0]
 8013bf4:	9800      	ldr	r0, [sp, #0]
 8013bf6:	b015      	add	sp, #84	; 0x54
 8013bf8:	ecbd 8b02 	vpop	{d8}
 8013bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c00:	4b94      	ldr	r3, [pc, #592]	; (8013e54 <_dtoa_r+0x304>)
 8013c02:	9300      	str	r3, [sp, #0]
 8013c04:	3303      	adds	r3, #3
 8013c06:	e7f3      	b.n	8013bf0 <_dtoa_r+0xa0>
 8013c08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	ec51 0b17 	vmov	r0, r1, d7
 8013c12:	2300      	movs	r3, #0
 8013c14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013c18:	f7ec ff76 	bl	8000b08 <__aeabi_dcmpeq>
 8013c1c:	4680      	mov	r8, r0
 8013c1e:	b158      	cbz	r0, 8013c38 <_dtoa_r+0xe8>
 8013c20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c22:	2301      	movs	r3, #1
 8013c24:	6013      	str	r3, [r2, #0]
 8013c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	f000 8551 	beq.w	80146d0 <_dtoa_r+0xb80>
 8013c2e:	488b      	ldr	r0, [pc, #556]	; (8013e5c <_dtoa_r+0x30c>)
 8013c30:	6018      	str	r0, [r3, #0]
 8013c32:	1e43      	subs	r3, r0, #1
 8013c34:	9300      	str	r3, [sp, #0]
 8013c36:	e7dd      	b.n	8013bf4 <_dtoa_r+0xa4>
 8013c38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013c3c:	aa12      	add	r2, sp, #72	; 0x48
 8013c3e:	a913      	add	r1, sp, #76	; 0x4c
 8013c40:	4620      	mov	r0, r4
 8013c42:	f001 ff2b 	bl	8015a9c <__d2b>
 8013c46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013c4a:	4683      	mov	fp, r0
 8013c4c:	2d00      	cmp	r5, #0
 8013c4e:	d07c      	beq.n	8013d4a <_dtoa_r+0x1fa>
 8013c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013c5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8013c5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013c62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013c66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013c6a:	4b7d      	ldr	r3, [pc, #500]	; (8013e60 <_dtoa_r+0x310>)
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	4630      	mov	r0, r6
 8013c70:	4639      	mov	r1, r7
 8013c72:	f7ec fb29 	bl	80002c8 <__aeabi_dsub>
 8013c76:	a36e      	add	r3, pc, #440	; (adr r3, 8013e30 <_dtoa_r+0x2e0>)
 8013c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7c:	f7ec fcdc 	bl	8000638 <__aeabi_dmul>
 8013c80:	a36d      	add	r3, pc, #436	; (adr r3, 8013e38 <_dtoa_r+0x2e8>)
 8013c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c86:	f7ec fb21 	bl	80002cc <__adddf3>
 8013c8a:	4606      	mov	r6, r0
 8013c8c:	4628      	mov	r0, r5
 8013c8e:	460f      	mov	r7, r1
 8013c90:	f7ec fc68 	bl	8000564 <__aeabi_i2d>
 8013c94:	a36a      	add	r3, pc, #424	; (adr r3, 8013e40 <_dtoa_r+0x2f0>)
 8013c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c9a:	f7ec fccd 	bl	8000638 <__aeabi_dmul>
 8013c9e:	4602      	mov	r2, r0
 8013ca0:	460b      	mov	r3, r1
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	4639      	mov	r1, r7
 8013ca6:	f7ec fb11 	bl	80002cc <__adddf3>
 8013caa:	4606      	mov	r6, r0
 8013cac:	460f      	mov	r7, r1
 8013cae:	f7ec ff73 	bl	8000b98 <__aeabi_d2iz>
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	4682      	mov	sl, r0
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	4630      	mov	r0, r6
 8013cba:	4639      	mov	r1, r7
 8013cbc:	f7ec ff2e 	bl	8000b1c <__aeabi_dcmplt>
 8013cc0:	b148      	cbz	r0, 8013cd6 <_dtoa_r+0x186>
 8013cc2:	4650      	mov	r0, sl
 8013cc4:	f7ec fc4e 	bl	8000564 <__aeabi_i2d>
 8013cc8:	4632      	mov	r2, r6
 8013cca:	463b      	mov	r3, r7
 8013ccc:	f7ec ff1c 	bl	8000b08 <__aeabi_dcmpeq>
 8013cd0:	b908      	cbnz	r0, 8013cd6 <_dtoa_r+0x186>
 8013cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013cd6:	f1ba 0f16 	cmp.w	sl, #22
 8013cda:	d854      	bhi.n	8013d86 <_dtoa_r+0x236>
 8013cdc:	4b61      	ldr	r3, [pc, #388]	; (8013e64 <_dtoa_r+0x314>)
 8013cde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013cea:	f7ec ff17 	bl	8000b1c <__aeabi_dcmplt>
 8013cee:	2800      	cmp	r0, #0
 8013cf0:	d04b      	beq.n	8013d8a <_dtoa_r+0x23a>
 8013cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	930e      	str	r3, [sp, #56]	; 0x38
 8013cfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013cfc:	1b5d      	subs	r5, r3, r5
 8013cfe:	1e6b      	subs	r3, r5, #1
 8013d00:	9304      	str	r3, [sp, #16]
 8013d02:	bf43      	ittte	mi
 8013d04:	2300      	movmi	r3, #0
 8013d06:	f1c5 0801 	rsbmi	r8, r5, #1
 8013d0a:	9304      	strmi	r3, [sp, #16]
 8013d0c:	f04f 0800 	movpl.w	r8, #0
 8013d10:	f1ba 0f00 	cmp.w	sl, #0
 8013d14:	db3b      	blt.n	8013d8e <_dtoa_r+0x23e>
 8013d16:	9b04      	ldr	r3, [sp, #16]
 8013d18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013d1c:	4453      	add	r3, sl
 8013d1e:	9304      	str	r3, [sp, #16]
 8013d20:	2300      	movs	r3, #0
 8013d22:	9306      	str	r3, [sp, #24]
 8013d24:	9b05      	ldr	r3, [sp, #20]
 8013d26:	2b09      	cmp	r3, #9
 8013d28:	d869      	bhi.n	8013dfe <_dtoa_r+0x2ae>
 8013d2a:	2b05      	cmp	r3, #5
 8013d2c:	bfc4      	itt	gt
 8013d2e:	3b04      	subgt	r3, #4
 8013d30:	9305      	strgt	r3, [sp, #20]
 8013d32:	9b05      	ldr	r3, [sp, #20]
 8013d34:	f1a3 0302 	sub.w	r3, r3, #2
 8013d38:	bfcc      	ite	gt
 8013d3a:	2500      	movgt	r5, #0
 8013d3c:	2501      	movle	r5, #1
 8013d3e:	2b03      	cmp	r3, #3
 8013d40:	d869      	bhi.n	8013e16 <_dtoa_r+0x2c6>
 8013d42:	e8df f003 	tbb	[pc, r3]
 8013d46:	4e2c      	.short	0x4e2c
 8013d48:	5a4c      	.short	0x5a4c
 8013d4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013d4e:	441d      	add	r5, r3
 8013d50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013d54:	2b20      	cmp	r3, #32
 8013d56:	bfc1      	itttt	gt
 8013d58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013d5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013d60:	fa09 f303 	lslgt.w	r3, r9, r3
 8013d64:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013d68:	bfda      	itte	le
 8013d6a:	f1c3 0320 	rsble	r3, r3, #32
 8013d6e:	fa06 f003 	lslle.w	r0, r6, r3
 8013d72:	4318      	orrgt	r0, r3
 8013d74:	f7ec fbe6 	bl	8000544 <__aeabi_ui2d>
 8013d78:	2301      	movs	r3, #1
 8013d7a:	4606      	mov	r6, r0
 8013d7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013d80:	3d01      	subs	r5, #1
 8013d82:	9310      	str	r3, [sp, #64]	; 0x40
 8013d84:	e771      	b.n	8013c6a <_dtoa_r+0x11a>
 8013d86:	2301      	movs	r3, #1
 8013d88:	e7b6      	b.n	8013cf8 <_dtoa_r+0x1a8>
 8013d8a:	900e      	str	r0, [sp, #56]	; 0x38
 8013d8c:	e7b5      	b.n	8013cfa <_dtoa_r+0x1aa>
 8013d8e:	f1ca 0300 	rsb	r3, sl, #0
 8013d92:	9306      	str	r3, [sp, #24]
 8013d94:	2300      	movs	r3, #0
 8013d96:	eba8 080a 	sub.w	r8, r8, sl
 8013d9a:	930d      	str	r3, [sp, #52]	; 0x34
 8013d9c:	e7c2      	b.n	8013d24 <_dtoa_r+0x1d4>
 8013d9e:	2300      	movs	r3, #0
 8013da0:	9308      	str	r3, [sp, #32]
 8013da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	dc39      	bgt.n	8013e1c <_dtoa_r+0x2cc>
 8013da8:	f04f 0901 	mov.w	r9, #1
 8013dac:	f8cd 9004 	str.w	r9, [sp, #4]
 8013db0:	464b      	mov	r3, r9
 8013db2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013db6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013db8:	2200      	movs	r2, #0
 8013dba:	6042      	str	r2, [r0, #4]
 8013dbc:	2204      	movs	r2, #4
 8013dbe:	f102 0614 	add.w	r6, r2, #20
 8013dc2:	429e      	cmp	r6, r3
 8013dc4:	6841      	ldr	r1, [r0, #4]
 8013dc6:	d92f      	bls.n	8013e28 <_dtoa_r+0x2d8>
 8013dc8:	4620      	mov	r0, r4
 8013dca:	f001 fa7f 	bl	80152cc <_Balloc>
 8013dce:	9000      	str	r0, [sp, #0]
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	d14b      	bne.n	8013e6c <_dtoa_r+0x31c>
 8013dd4:	4b24      	ldr	r3, [pc, #144]	; (8013e68 <_dtoa_r+0x318>)
 8013dd6:	4602      	mov	r2, r0
 8013dd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013ddc:	e6d1      	b.n	8013b82 <_dtoa_r+0x32>
 8013dde:	2301      	movs	r3, #1
 8013de0:	e7de      	b.n	8013da0 <_dtoa_r+0x250>
 8013de2:	2300      	movs	r3, #0
 8013de4:	9308      	str	r3, [sp, #32]
 8013de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013de8:	eb0a 0903 	add.w	r9, sl, r3
 8013dec:	f109 0301 	add.w	r3, r9, #1
 8013df0:	2b01      	cmp	r3, #1
 8013df2:	9301      	str	r3, [sp, #4]
 8013df4:	bfb8      	it	lt
 8013df6:	2301      	movlt	r3, #1
 8013df8:	e7dd      	b.n	8013db6 <_dtoa_r+0x266>
 8013dfa:	2301      	movs	r3, #1
 8013dfc:	e7f2      	b.n	8013de4 <_dtoa_r+0x294>
 8013dfe:	2501      	movs	r5, #1
 8013e00:	2300      	movs	r3, #0
 8013e02:	9305      	str	r3, [sp, #20]
 8013e04:	9508      	str	r5, [sp, #32]
 8013e06:	f04f 39ff 	mov.w	r9, #4294967295
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013e10:	2312      	movs	r3, #18
 8013e12:	9209      	str	r2, [sp, #36]	; 0x24
 8013e14:	e7cf      	b.n	8013db6 <_dtoa_r+0x266>
 8013e16:	2301      	movs	r3, #1
 8013e18:	9308      	str	r3, [sp, #32]
 8013e1a:	e7f4      	b.n	8013e06 <_dtoa_r+0x2b6>
 8013e1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013e20:	f8cd 9004 	str.w	r9, [sp, #4]
 8013e24:	464b      	mov	r3, r9
 8013e26:	e7c6      	b.n	8013db6 <_dtoa_r+0x266>
 8013e28:	3101      	adds	r1, #1
 8013e2a:	6041      	str	r1, [r0, #4]
 8013e2c:	0052      	lsls	r2, r2, #1
 8013e2e:	e7c6      	b.n	8013dbe <_dtoa_r+0x26e>
 8013e30:	636f4361 	.word	0x636f4361
 8013e34:	3fd287a7 	.word	0x3fd287a7
 8013e38:	8b60c8b3 	.word	0x8b60c8b3
 8013e3c:	3fc68a28 	.word	0x3fc68a28
 8013e40:	509f79fb 	.word	0x509f79fb
 8013e44:	3fd34413 	.word	0x3fd34413
 8013e48:	0801873c 	.word	0x0801873c
 8013e4c:	08018a86 	.word	0x08018a86
 8013e50:	7ff00000 	.word	0x7ff00000
 8013e54:	08018a82 	.word	0x08018a82
 8013e58:	08018a79 	.word	0x08018a79
 8013e5c:	08018cea 	.word	0x08018cea
 8013e60:	3ff80000 	.word	0x3ff80000
 8013e64:	08018c00 	.word	0x08018c00
 8013e68:	08018ae5 	.word	0x08018ae5
 8013e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e6e:	9a00      	ldr	r2, [sp, #0]
 8013e70:	601a      	str	r2, [r3, #0]
 8013e72:	9b01      	ldr	r3, [sp, #4]
 8013e74:	2b0e      	cmp	r3, #14
 8013e76:	f200 80ad 	bhi.w	8013fd4 <_dtoa_r+0x484>
 8013e7a:	2d00      	cmp	r5, #0
 8013e7c:	f000 80aa 	beq.w	8013fd4 <_dtoa_r+0x484>
 8013e80:	f1ba 0f00 	cmp.w	sl, #0
 8013e84:	dd36      	ble.n	8013ef4 <_dtoa_r+0x3a4>
 8013e86:	4ac3      	ldr	r2, [pc, #780]	; (8014194 <_dtoa_r+0x644>)
 8013e88:	f00a 030f 	and.w	r3, sl, #15
 8013e8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013e90:	ed93 7b00 	vldr	d7, [r3]
 8013e94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013e98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013e9c:	eeb0 8a47 	vmov.f32	s16, s14
 8013ea0:	eef0 8a67 	vmov.f32	s17, s15
 8013ea4:	d016      	beq.n	8013ed4 <_dtoa_r+0x384>
 8013ea6:	4bbc      	ldr	r3, [pc, #752]	; (8014198 <_dtoa_r+0x648>)
 8013ea8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013eac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013eb0:	f7ec fcec 	bl	800088c <__aeabi_ddiv>
 8013eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013eb8:	f007 070f 	and.w	r7, r7, #15
 8013ebc:	2503      	movs	r5, #3
 8013ebe:	4eb6      	ldr	r6, [pc, #728]	; (8014198 <_dtoa_r+0x648>)
 8013ec0:	b957      	cbnz	r7, 8013ed8 <_dtoa_r+0x388>
 8013ec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ec6:	ec53 2b18 	vmov	r2, r3, d8
 8013eca:	f7ec fcdf 	bl	800088c <__aeabi_ddiv>
 8013ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ed2:	e029      	b.n	8013f28 <_dtoa_r+0x3d8>
 8013ed4:	2502      	movs	r5, #2
 8013ed6:	e7f2      	b.n	8013ebe <_dtoa_r+0x36e>
 8013ed8:	07f9      	lsls	r1, r7, #31
 8013eda:	d508      	bpl.n	8013eee <_dtoa_r+0x39e>
 8013edc:	ec51 0b18 	vmov	r0, r1, d8
 8013ee0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013ee4:	f7ec fba8 	bl	8000638 <__aeabi_dmul>
 8013ee8:	ec41 0b18 	vmov	d8, r0, r1
 8013eec:	3501      	adds	r5, #1
 8013eee:	107f      	asrs	r7, r7, #1
 8013ef0:	3608      	adds	r6, #8
 8013ef2:	e7e5      	b.n	8013ec0 <_dtoa_r+0x370>
 8013ef4:	f000 80a6 	beq.w	8014044 <_dtoa_r+0x4f4>
 8013ef8:	f1ca 0600 	rsb	r6, sl, #0
 8013efc:	4ba5      	ldr	r3, [pc, #660]	; (8014194 <_dtoa_r+0x644>)
 8013efe:	4fa6      	ldr	r7, [pc, #664]	; (8014198 <_dtoa_r+0x648>)
 8013f00:	f006 020f 	and.w	r2, r6, #15
 8013f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013f10:	f7ec fb92 	bl	8000638 <__aeabi_dmul>
 8013f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f18:	1136      	asrs	r6, r6, #4
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	2502      	movs	r5, #2
 8013f1e:	2e00      	cmp	r6, #0
 8013f20:	f040 8085 	bne.w	801402e <_dtoa_r+0x4de>
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d1d2      	bne.n	8013ece <_dtoa_r+0x37e>
 8013f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	f000 808c 	beq.w	8014048 <_dtoa_r+0x4f8>
 8013f30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013f34:	4b99      	ldr	r3, [pc, #612]	; (801419c <_dtoa_r+0x64c>)
 8013f36:	2200      	movs	r2, #0
 8013f38:	4630      	mov	r0, r6
 8013f3a:	4639      	mov	r1, r7
 8013f3c:	f7ec fdee 	bl	8000b1c <__aeabi_dcmplt>
 8013f40:	2800      	cmp	r0, #0
 8013f42:	f000 8081 	beq.w	8014048 <_dtoa_r+0x4f8>
 8013f46:	9b01      	ldr	r3, [sp, #4]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d07d      	beq.n	8014048 <_dtoa_r+0x4f8>
 8013f4c:	f1b9 0f00 	cmp.w	r9, #0
 8013f50:	dd3c      	ble.n	8013fcc <_dtoa_r+0x47c>
 8013f52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013f56:	9307      	str	r3, [sp, #28]
 8013f58:	2200      	movs	r2, #0
 8013f5a:	4b91      	ldr	r3, [pc, #580]	; (80141a0 <_dtoa_r+0x650>)
 8013f5c:	4630      	mov	r0, r6
 8013f5e:	4639      	mov	r1, r7
 8013f60:	f7ec fb6a 	bl	8000638 <__aeabi_dmul>
 8013f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f68:	3501      	adds	r5, #1
 8013f6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013f6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013f72:	4628      	mov	r0, r5
 8013f74:	f7ec faf6 	bl	8000564 <__aeabi_i2d>
 8013f78:	4632      	mov	r2, r6
 8013f7a:	463b      	mov	r3, r7
 8013f7c:	f7ec fb5c 	bl	8000638 <__aeabi_dmul>
 8013f80:	4b88      	ldr	r3, [pc, #544]	; (80141a4 <_dtoa_r+0x654>)
 8013f82:	2200      	movs	r2, #0
 8013f84:	f7ec f9a2 	bl	80002cc <__adddf3>
 8013f88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f90:	9303      	str	r3, [sp, #12]
 8013f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d15c      	bne.n	8014052 <_dtoa_r+0x502>
 8013f98:	4b83      	ldr	r3, [pc, #524]	; (80141a8 <_dtoa_r+0x658>)
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	4630      	mov	r0, r6
 8013f9e:	4639      	mov	r1, r7
 8013fa0:	f7ec f992 	bl	80002c8 <__aeabi_dsub>
 8013fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013fa8:	4606      	mov	r6, r0
 8013faa:	460f      	mov	r7, r1
 8013fac:	f7ec fdd4 	bl	8000b58 <__aeabi_dcmpgt>
 8013fb0:	2800      	cmp	r0, #0
 8013fb2:	f040 8296 	bne.w	80144e2 <_dtoa_r+0x992>
 8013fb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013fba:	4630      	mov	r0, r6
 8013fbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013fc0:	4639      	mov	r1, r7
 8013fc2:	f7ec fdab 	bl	8000b1c <__aeabi_dcmplt>
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	f040 8288 	bne.w	80144dc <_dtoa_r+0x98c>
 8013fcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013fd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013fd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	f2c0 8158 	blt.w	801428c <_dtoa_r+0x73c>
 8013fdc:	f1ba 0f0e 	cmp.w	sl, #14
 8013fe0:	f300 8154 	bgt.w	801428c <_dtoa_r+0x73c>
 8013fe4:	4b6b      	ldr	r3, [pc, #428]	; (8014194 <_dtoa_r+0x644>)
 8013fe6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013fea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	f280 80e3 	bge.w	80141bc <_dtoa_r+0x66c>
 8013ff6:	9b01      	ldr	r3, [sp, #4]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	f300 80df 	bgt.w	80141bc <_dtoa_r+0x66c>
 8013ffe:	f040 826d 	bne.w	80144dc <_dtoa_r+0x98c>
 8014002:	4b69      	ldr	r3, [pc, #420]	; (80141a8 <_dtoa_r+0x658>)
 8014004:	2200      	movs	r2, #0
 8014006:	4640      	mov	r0, r8
 8014008:	4649      	mov	r1, r9
 801400a:	f7ec fb15 	bl	8000638 <__aeabi_dmul>
 801400e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014012:	f7ec fd97 	bl	8000b44 <__aeabi_dcmpge>
 8014016:	9e01      	ldr	r6, [sp, #4]
 8014018:	4637      	mov	r7, r6
 801401a:	2800      	cmp	r0, #0
 801401c:	f040 8243 	bne.w	80144a6 <_dtoa_r+0x956>
 8014020:	9d00      	ldr	r5, [sp, #0]
 8014022:	2331      	movs	r3, #49	; 0x31
 8014024:	f805 3b01 	strb.w	r3, [r5], #1
 8014028:	f10a 0a01 	add.w	sl, sl, #1
 801402c:	e23f      	b.n	80144ae <_dtoa_r+0x95e>
 801402e:	07f2      	lsls	r2, r6, #31
 8014030:	d505      	bpl.n	801403e <_dtoa_r+0x4ee>
 8014032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014036:	f7ec faff 	bl	8000638 <__aeabi_dmul>
 801403a:	3501      	adds	r5, #1
 801403c:	2301      	movs	r3, #1
 801403e:	1076      	asrs	r6, r6, #1
 8014040:	3708      	adds	r7, #8
 8014042:	e76c      	b.n	8013f1e <_dtoa_r+0x3ce>
 8014044:	2502      	movs	r5, #2
 8014046:	e76f      	b.n	8013f28 <_dtoa_r+0x3d8>
 8014048:	9b01      	ldr	r3, [sp, #4]
 801404a:	f8cd a01c 	str.w	sl, [sp, #28]
 801404e:	930c      	str	r3, [sp, #48]	; 0x30
 8014050:	e78d      	b.n	8013f6e <_dtoa_r+0x41e>
 8014052:	9900      	ldr	r1, [sp, #0]
 8014054:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014058:	4b4e      	ldr	r3, [pc, #312]	; (8014194 <_dtoa_r+0x644>)
 801405a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801405e:	4401      	add	r1, r0
 8014060:	9102      	str	r1, [sp, #8]
 8014062:	9908      	ldr	r1, [sp, #32]
 8014064:	eeb0 8a47 	vmov.f32	s16, s14
 8014068:	eef0 8a67 	vmov.f32	s17, s15
 801406c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014070:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014074:	2900      	cmp	r1, #0
 8014076:	d045      	beq.n	8014104 <_dtoa_r+0x5b4>
 8014078:	494c      	ldr	r1, [pc, #304]	; (80141ac <_dtoa_r+0x65c>)
 801407a:	2000      	movs	r0, #0
 801407c:	f7ec fc06 	bl	800088c <__aeabi_ddiv>
 8014080:	ec53 2b18 	vmov	r2, r3, d8
 8014084:	f7ec f920 	bl	80002c8 <__aeabi_dsub>
 8014088:	9d00      	ldr	r5, [sp, #0]
 801408a:	ec41 0b18 	vmov	d8, r0, r1
 801408e:	4639      	mov	r1, r7
 8014090:	4630      	mov	r0, r6
 8014092:	f7ec fd81 	bl	8000b98 <__aeabi_d2iz>
 8014096:	900c      	str	r0, [sp, #48]	; 0x30
 8014098:	f7ec fa64 	bl	8000564 <__aeabi_i2d>
 801409c:	4602      	mov	r2, r0
 801409e:	460b      	mov	r3, r1
 80140a0:	4630      	mov	r0, r6
 80140a2:	4639      	mov	r1, r7
 80140a4:	f7ec f910 	bl	80002c8 <__aeabi_dsub>
 80140a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140aa:	3330      	adds	r3, #48	; 0x30
 80140ac:	f805 3b01 	strb.w	r3, [r5], #1
 80140b0:	ec53 2b18 	vmov	r2, r3, d8
 80140b4:	4606      	mov	r6, r0
 80140b6:	460f      	mov	r7, r1
 80140b8:	f7ec fd30 	bl	8000b1c <__aeabi_dcmplt>
 80140bc:	2800      	cmp	r0, #0
 80140be:	d165      	bne.n	801418c <_dtoa_r+0x63c>
 80140c0:	4632      	mov	r2, r6
 80140c2:	463b      	mov	r3, r7
 80140c4:	4935      	ldr	r1, [pc, #212]	; (801419c <_dtoa_r+0x64c>)
 80140c6:	2000      	movs	r0, #0
 80140c8:	f7ec f8fe 	bl	80002c8 <__aeabi_dsub>
 80140cc:	ec53 2b18 	vmov	r2, r3, d8
 80140d0:	f7ec fd24 	bl	8000b1c <__aeabi_dcmplt>
 80140d4:	2800      	cmp	r0, #0
 80140d6:	f040 80b9 	bne.w	801424c <_dtoa_r+0x6fc>
 80140da:	9b02      	ldr	r3, [sp, #8]
 80140dc:	429d      	cmp	r5, r3
 80140de:	f43f af75 	beq.w	8013fcc <_dtoa_r+0x47c>
 80140e2:	4b2f      	ldr	r3, [pc, #188]	; (80141a0 <_dtoa_r+0x650>)
 80140e4:	ec51 0b18 	vmov	r0, r1, d8
 80140e8:	2200      	movs	r2, #0
 80140ea:	f7ec faa5 	bl	8000638 <__aeabi_dmul>
 80140ee:	4b2c      	ldr	r3, [pc, #176]	; (80141a0 <_dtoa_r+0x650>)
 80140f0:	ec41 0b18 	vmov	d8, r0, r1
 80140f4:	2200      	movs	r2, #0
 80140f6:	4630      	mov	r0, r6
 80140f8:	4639      	mov	r1, r7
 80140fa:	f7ec fa9d 	bl	8000638 <__aeabi_dmul>
 80140fe:	4606      	mov	r6, r0
 8014100:	460f      	mov	r7, r1
 8014102:	e7c4      	b.n	801408e <_dtoa_r+0x53e>
 8014104:	ec51 0b17 	vmov	r0, r1, d7
 8014108:	f7ec fa96 	bl	8000638 <__aeabi_dmul>
 801410c:	9b02      	ldr	r3, [sp, #8]
 801410e:	9d00      	ldr	r5, [sp, #0]
 8014110:	930c      	str	r3, [sp, #48]	; 0x30
 8014112:	ec41 0b18 	vmov	d8, r0, r1
 8014116:	4639      	mov	r1, r7
 8014118:	4630      	mov	r0, r6
 801411a:	f7ec fd3d 	bl	8000b98 <__aeabi_d2iz>
 801411e:	9011      	str	r0, [sp, #68]	; 0x44
 8014120:	f7ec fa20 	bl	8000564 <__aeabi_i2d>
 8014124:	4602      	mov	r2, r0
 8014126:	460b      	mov	r3, r1
 8014128:	4630      	mov	r0, r6
 801412a:	4639      	mov	r1, r7
 801412c:	f7ec f8cc 	bl	80002c8 <__aeabi_dsub>
 8014130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014132:	3330      	adds	r3, #48	; 0x30
 8014134:	f805 3b01 	strb.w	r3, [r5], #1
 8014138:	9b02      	ldr	r3, [sp, #8]
 801413a:	429d      	cmp	r5, r3
 801413c:	4606      	mov	r6, r0
 801413e:	460f      	mov	r7, r1
 8014140:	f04f 0200 	mov.w	r2, #0
 8014144:	d134      	bne.n	80141b0 <_dtoa_r+0x660>
 8014146:	4b19      	ldr	r3, [pc, #100]	; (80141ac <_dtoa_r+0x65c>)
 8014148:	ec51 0b18 	vmov	r0, r1, d8
 801414c:	f7ec f8be 	bl	80002cc <__adddf3>
 8014150:	4602      	mov	r2, r0
 8014152:	460b      	mov	r3, r1
 8014154:	4630      	mov	r0, r6
 8014156:	4639      	mov	r1, r7
 8014158:	f7ec fcfe 	bl	8000b58 <__aeabi_dcmpgt>
 801415c:	2800      	cmp	r0, #0
 801415e:	d175      	bne.n	801424c <_dtoa_r+0x6fc>
 8014160:	ec53 2b18 	vmov	r2, r3, d8
 8014164:	4911      	ldr	r1, [pc, #68]	; (80141ac <_dtoa_r+0x65c>)
 8014166:	2000      	movs	r0, #0
 8014168:	f7ec f8ae 	bl	80002c8 <__aeabi_dsub>
 801416c:	4602      	mov	r2, r0
 801416e:	460b      	mov	r3, r1
 8014170:	4630      	mov	r0, r6
 8014172:	4639      	mov	r1, r7
 8014174:	f7ec fcd2 	bl	8000b1c <__aeabi_dcmplt>
 8014178:	2800      	cmp	r0, #0
 801417a:	f43f af27 	beq.w	8013fcc <_dtoa_r+0x47c>
 801417e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014180:	1e6b      	subs	r3, r5, #1
 8014182:	930c      	str	r3, [sp, #48]	; 0x30
 8014184:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014188:	2b30      	cmp	r3, #48	; 0x30
 801418a:	d0f8      	beq.n	801417e <_dtoa_r+0x62e>
 801418c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014190:	e04a      	b.n	8014228 <_dtoa_r+0x6d8>
 8014192:	bf00      	nop
 8014194:	08018c00 	.word	0x08018c00
 8014198:	08018bd8 	.word	0x08018bd8
 801419c:	3ff00000 	.word	0x3ff00000
 80141a0:	40240000 	.word	0x40240000
 80141a4:	401c0000 	.word	0x401c0000
 80141a8:	40140000 	.word	0x40140000
 80141ac:	3fe00000 	.word	0x3fe00000
 80141b0:	4baf      	ldr	r3, [pc, #700]	; (8014470 <_dtoa_r+0x920>)
 80141b2:	f7ec fa41 	bl	8000638 <__aeabi_dmul>
 80141b6:	4606      	mov	r6, r0
 80141b8:	460f      	mov	r7, r1
 80141ba:	e7ac      	b.n	8014116 <_dtoa_r+0x5c6>
 80141bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80141c0:	9d00      	ldr	r5, [sp, #0]
 80141c2:	4642      	mov	r2, r8
 80141c4:	464b      	mov	r3, r9
 80141c6:	4630      	mov	r0, r6
 80141c8:	4639      	mov	r1, r7
 80141ca:	f7ec fb5f 	bl	800088c <__aeabi_ddiv>
 80141ce:	f7ec fce3 	bl	8000b98 <__aeabi_d2iz>
 80141d2:	9002      	str	r0, [sp, #8]
 80141d4:	f7ec f9c6 	bl	8000564 <__aeabi_i2d>
 80141d8:	4642      	mov	r2, r8
 80141da:	464b      	mov	r3, r9
 80141dc:	f7ec fa2c 	bl	8000638 <__aeabi_dmul>
 80141e0:	4602      	mov	r2, r0
 80141e2:	460b      	mov	r3, r1
 80141e4:	4630      	mov	r0, r6
 80141e6:	4639      	mov	r1, r7
 80141e8:	f7ec f86e 	bl	80002c8 <__aeabi_dsub>
 80141ec:	9e02      	ldr	r6, [sp, #8]
 80141ee:	9f01      	ldr	r7, [sp, #4]
 80141f0:	3630      	adds	r6, #48	; 0x30
 80141f2:	f805 6b01 	strb.w	r6, [r5], #1
 80141f6:	9e00      	ldr	r6, [sp, #0]
 80141f8:	1bae      	subs	r6, r5, r6
 80141fa:	42b7      	cmp	r7, r6
 80141fc:	4602      	mov	r2, r0
 80141fe:	460b      	mov	r3, r1
 8014200:	d137      	bne.n	8014272 <_dtoa_r+0x722>
 8014202:	f7ec f863 	bl	80002cc <__adddf3>
 8014206:	4642      	mov	r2, r8
 8014208:	464b      	mov	r3, r9
 801420a:	4606      	mov	r6, r0
 801420c:	460f      	mov	r7, r1
 801420e:	f7ec fca3 	bl	8000b58 <__aeabi_dcmpgt>
 8014212:	b9c8      	cbnz	r0, 8014248 <_dtoa_r+0x6f8>
 8014214:	4642      	mov	r2, r8
 8014216:	464b      	mov	r3, r9
 8014218:	4630      	mov	r0, r6
 801421a:	4639      	mov	r1, r7
 801421c:	f7ec fc74 	bl	8000b08 <__aeabi_dcmpeq>
 8014220:	b110      	cbz	r0, 8014228 <_dtoa_r+0x6d8>
 8014222:	9b02      	ldr	r3, [sp, #8]
 8014224:	07d9      	lsls	r1, r3, #31
 8014226:	d40f      	bmi.n	8014248 <_dtoa_r+0x6f8>
 8014228:	4620      	mov	r0, r4
 801422a:	4659      	mov	r1, fp
 801422c:	f001 f88e 	bl	801534c <_Bfree>
 8014230:	2300      	movs	r3, #0
 8014232:	702b      	strb	r3, [r5, #0]
 8014234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014236:	f10a 0001 	add.w	r0, sl, #1
 801423a:	6018      	str	r0, [r3, #0]
 801423c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801423e:	2b00      	cmp	r3, #0
 8014240:	f43f acd8 	beq.w	8013bf4 <_dtoa_r+0xa4>
 8014244:	601d      	str	r5, [r3, #0]
 8014246:	e4d5      	b.n	8013bf4 <_dtoa_r+0xa4>
 8014248:	f8cd a01c 	str.w	sl, [sp, #28]
 801424c:	462b      	mov	r3, r5
 801424e:	461d      	mov	r5, r3
 8014250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014254:	2a39      	cmp	r2, #57	; 0x39
 8014256:	d108      	bne.n	801426a <_dtoa_r+0x71a>
 8014258:	9a00      	ldr	r2, [sp, #0]
 801425a:	429a      	cmp	r2, r3
 801425c:	d1f7      	bne.n	801424e <_dtoa_r+0x6fe>
 801425e:	9a07      	ldr	r2, [sp, #28]
 8014260:	9900      	ldr	r1, [sp, #0]
 8014262:	3201      	adds	r2, #1
 8014264:	9207      	str	r2, [sp, #28]
 8014266:	2230      	movs	r2, #48	; 0x30
 8014268:	700a      	strb	r2, [r1, #0]
 801426a:	781a      	ldrb	r2, [r3, #0]
 801426c:	3201      	adds	r2, #1
 801426e:	701a      	strb	r2, [r3, #0]
 8014270:	e78c      	b.n	801418c <_dtoa_r+0x63c>
 8014272:	4b7f      	ldr	r3, [pc, #508]	; (8014470 <_dtoa_r+0x920>)
 8014274:	2200      	movs	r2, #0
 8014276:	f7ec f9df 	bl	8000638 <__aeabi_dmul>
 801427a:	2200      	movs	r2, #0
 801427c:	2300      	movs	r3, #0
 801427e:	4606      	mov	r6, r0
 8014280:	460f      	mov	r7, r1
 8014282:	f7ec fc41 	bl	8000b08 <__aeabi_dcmpeq>
 8014286:	2800      	cmp	r0, #0
 8014288:	d09b      	beq.n	80141c2 <_dtoa_r+0x672>
 801428a:	e7cd      	b.n	8014228 <_dtoa_r+0x6d8>
 801428c:	9a08      	ldr	r2, [sp, #32]
 801428e:	2a00      	cmp	r2, #0
 8014290:	f000 80c4 	beq.w	801441c <_dtoa_r+0x8cc>
 8014294:	9a05      	ldr	r2, [sp, #20]
 8014296:	2a01      	cmp	r2, #1
 8014298:	f300 80a8 	bgt.w	80143ec <_dtoa_r+0x89c>
 801429c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801429e:	2a00      	cmp	r2, #0
 80142a0:	f000 80a0 	beq.w	80143e4 <_dtoa_r+0x894>
 80142a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80142a8:	9e06      	ldr	r6, [sp, #24]
 80142aa:	4645      	mov	r5, r8
 80142ac:	9a04      	ldr	r2, [sp, #16]
 80142ae:	2101      	movs	r1, #1
 80142b0:	441a      	add	r2, r3
 80142b2:	4620      	mov	r0, r4
 80142b4:	4498      	add	r8, r3
 80142b6:	9204      	str	r2, [sp, #16]
 80142b8:	f001 f94e 	bl	8015558 <__i2b>
 80142bc:	4607      	mov	r7, r0
 80142be:	2d00      	cmp	r5, #0
 80142c0:	dd0b      	ble.n	80142da <_dtoa_r+0x78a>
 80142c2:	9b04      	ldr	r3, [sp, #16]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	dd08      	ble.n	80142da <_dtoa_r+0x78a>
 80142c8:	42ab      	cmp	r3, r5
 80142ca:	9a04      	ldr	r2, [sp, #16]
 80142cc:	bfa8      	it	ge
 80142ce:	462b      	movge	r3, r5
 80142d0:	eba8 0803 	sub.w	r8, r8, r3
 80142d4:	1aed      	subs	r5, r5, r3
 80142d6:	1ad3      	subs	r3, r2, r3
 80142d8:	9304      	str	r3, [sp, #16]
 80142da:	9b06      	ldr	r3, [sp, #24]
 80142dc:	b1fb      	cbz	r3, 801431e <_dtoa_r+0x7ce>
 80142de:	9b08      	ldr	r3, [sp, #32]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	f000 809f 	beq.w	8014424 <_dtoa_r+0x8d4>
 80142e6:	2e00      	cmp	r6, #0
 80142e8:	dd11      	ble.n	801430e <_dtoa_r+0x7be>
 80142ea:	4639      	mov	r1, r7
 80142ec:	4632      	mov	r2, r6
 80142ee:	4620      	mov	r0, r4
 80142f0:	f001 f9ee 	bl	80156d0 <__pow5mult>
 80142f4:	465a      	mov	r2, fp
 80142f6:	4601      	mov	r1, r0
 80142f8:	4607      	mov	r7, r0
 80142fa:	4620      	mov	r0, r4
 80142fc:	f001 f942 	bl	8015584 <__multiply>
 8014300:	4659      	mov	r1, fp
 8014302:	9007      	str	r0, [sp, #28]
 8014304:	4620      	mov	r0, r4
 8014306:	f001 f821 	bl	801534c <_Bfree>
 801430a:	9b07      	ldr	r3, [sp, #28]
 801430c:	469b      	mov	fp, r3
 801430e:	9b06      	ldr	r3, [sp, #24]
 8014310:	1b9a      	subs	r2, r3, r6
 8014312:	d004      	beq.n	801431e <_dtoa_r+0x7ce>
 8014314:	4659      	mov	r1, fp
 8014316:	4620      	mov	r0, r4
 8014318:	f001 f9da 	bl	80156d0 <__pow5mult>
 801431c:	4683      	mov	fp, r0
 801431e:	2101      	movs	r1, #1
 8014320:	4620      	mov	r0, r4
 8014322:	f001 f919 	bl	8015558 <__i2b>
 8014326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014328:	2b00      	cmp	r3, #0
 801432a:	4606      	mov	r6, r0
 801432c:	dd7c      	ble.n	8014428 <_dtoa_r+0x8d8>
 801432e:	461a      	mov	r2, r3
 8014330:	4601      	mov	r1, r0
 8014332:	4620      	mov	r0, r4
 8014334:	f001 f9cc 	bl	80156d0 <__pow5mult>
 8014338:	9b05      	ldr	r3, [sp, #20]
 801433a:	2b01      	cmp	r3, #1
 801433c:	4606      	mov	r6, r0
 801433e:	dd76      	ble.n	801442e <_dtoa_r+0x8de>
 8014340:	2300      	movs	r3, #0
 8014342:	9306      	str	r3, [sp, #24]
 8014344:	6933      	ldr	r3, [r6, #16]
 8014346:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801434a:	6918      	ldr	r0, [r3, #16]
 801434c:	f001 f8b4 	bl	80154b8 <__hi0bits>
 8014350:	f1c0 0020 	rsb	r0, r0, #32
 8014354:	9b04      	ldr	r3, [sp, #16]
 8014356:	4418      	add	r0, r3
 8014358:	f010 001f 	ands.w	r0, r0, #31
 801435c:	f000 8086 	beq.w	801446c <_dtoa_r+0x91c>
 8014360:	f1c0 0320 	rsb	r3, r0, #32
 8014364:	2b04      	cmp	r3, #4
 8014366:	dd7f      	ble.n	8014468 <_dtoa_r+0x918>
 8014368:	f1c0 001c 	rsb	r0, r0, #28
 801436c:	9b04      	ldr	r3, [sp, #16]
 801436e:	4403      	add	r3, r0
 8014370:	4480      	add	r8, r0
 8014372:	4405      	add	r5, r0
 8014374:	9304      	str	r3, [sp, #16]
 8014376:	f1b8 0f00 	cmp.w	r8, #0
 801437a:	dd05      	ble.n	8014388 <_dtoa_r+0x838>
 801437c:	4659      	mov	r1, fp
 801437e:	4642      	mov	r2, r8
 8014380:	4620      	mov	r0, r4
 8014382:	f001 f9ff 	bl	8015784 <__lshift>
 8014386:	4683      	mov	fp, r0
 8014388:	9b04      	ldr	r3, [sp, #16]
 801438a:	2b00      	cmp	r3, #0
 801438c:	dd05      	ble.n	801439a <_dtoa_r+0x84a>
 801438e:	4631      	mov	r1, r6
 8014390:	461a      	mov	r2, r3
 8014392:	4620      	mov	r0, r4
 8014394:	f001 f9f6 	bl	8015784 <__lshift>
 8014398:	4606      	mov	r6, r0
 801439a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801439c:	2b00      	cmp	r3, #0
 801439e:	d069      	beq.n	8014474 <_dtoa_r+0x924>
 80143a0:	4631      	mov	r1, r6
 80143a2:	4658      	mov	r0, fp
 80143a4:	f001 fa5a 	bl	801585c <__mcmp>
 80143a8:	2800      	cmp	r0, #0
 80143aa:	da63      	bge.n	8014474 <_dtoa_r+0x924>
 80143ac:	2300      	movs	r3, #0
 80143ae:	4659      	mov	r1, fp
 80143b0:	220a      	movs	r2, #10
 80143b2:	4620      	mov	r0, r4
 80143b4:	f000 ffec 	bl	8015390 <__multadd>
 80143b8:	9b08      	ldr	r3, [sp, #32]
 80143ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80143be:	4683      	mov	fp, r0
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	f000 818f 	beq.w	80146e4 <_dtoa_r+0xb94>
 80143c6:	4639      	mov	r1, r7
 80143c8:	2300      	movs	r3, #0
 80143ca:	220a      	movs	r2, #10
 80143cc:	4620      	mov	r0, r4
 80143ce:	f000 ffdf 	bl	8015390 <__multadd>
 80143d2:	f1b9 0f00 	cmp.w	r9, #0
 80143d6:	4607      	mov	r7, r0
 80143d8:	f300 808e 	bgt.w	80144f8 <_dtoa_r+0x9a8>
 80143dc:	9b05      	ldr	r3, [sp, #20]
 80143de:	2b02      	cmp	r3, #2
 80143e0:	dc50      	bgt.n	8014484 <_dtoa_r+0x934>
 80143e2:	e089      	b.n	80144f8 <_dtoa_r+0x9a8>
 80143e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80143e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80143ea:	e75d      	b.n	80142a8 <_dtoa_r+0x758>
 80143ec:	9b01      	ldr	r3, [sp, #4]
 80143ee:	1e5e      	subs	r6, r3, #1
 80143f0:	9b06      	ldr	r3, [sp, #24]
 80143f2:	42b3      	cmp	r3, r6
 80143f4:	bfbf      	itttt	lt
 80143f6:	9b06      	ldrlt	r3, [sp, #24]
 80143f8:	9606      	strlt	r6, [sp, #24]
 80143fa:	1af2      	sublt	r2, r6, r3
 80143fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80143fe:	bfb6      	itet	lt
 8014400:	189b      	addlt	r3, r3, r2
 8014402:	1b9e      	subge	r6, r3, r6
 8014404:	930d      	strlt	r3, [sp, #52]	; 0x34
 8014406:	9b01      	ldr	r3, [sp, #4]
 8014408:	bfb8      	it	lt
 801440a:	2600      	movlt	r6, #0
 801440c:	2b00      	cmp	r3, #0
 801440e:	bfb5      	itete	lt
 8014410:	eba8 0503 	sublt.w	r5, r8, r3
 8014414:	9b01      	ldrge	r3, [sp, #4]
 8014416:	2300      	movlt	r3, #0
 8014418:	4645      	movge	r5, r8
 801441a:	e747      	b.n	80142ac <_dtoa_r+0x75c>
 801441c:	9e06      	ldr	r6, [sp, #24]
 801441e:	9f08      	ldr	r7, [sp, #32]
 8014420:	4645      	mov	r5, r8
 8014422:	e74c      	b.n	80142be <_dtoa_r+0x76e>
 8014424:	9a06      	ldr	r2, [sp, #24]
 8014426:	e775      	b.n	8014314 <_dtoa_r+0x7c4>
 8014428:	9b05      	ldr	r3, [sp, #20]
 801442a:	2b01      	cmp	r3, #1
 801442c:	dc18      	bgt.n	8014460 <_dtoa_r+0x910>
 801442e:	9b02      	ldr	r3, [sp, #8]
 8014430:	b9b3      	cbnz	r3, 8014460 <_dtoa_r+0x910>
 8014432:	9b03      	ldr	r3, [sp, #12]
 8014434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014438:	b9a3      	cbnz	r3, 8014464 <_dtoa_r+0x914>
 801443a:	9b03      	ldr	r3, [sp, #12]
 801443c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014440:	0d1b      	lsrs	r3, r3, #20
 8014442:	051b      	lsls	r3, r3, #20
 8014444:	b12b      	cbz	r3, 8014452 <_dtoa_r+0x902>
 8014446:	9b04      	ldr	r3, [sp, #16]
 8014448:	3301      	adds	r3, #1
 801444a:	9304      	str	r3, [sp, #16]
 801444c:	f108 0801 	add.w	r8, r8, #1
 8014450:	2301      	movs	r3, #1
 8014452:	9306      	str	r3, [sp, #24]
 8014454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014456:	2b00      	cmp	r3, #0
 8014458:	f47f af74 	bne.w	8014344 <_dtoa_r+0x7f4>
 801445c:	2001      	movs	r0, #1
 801445e:	e779      	b.n	8014354 <_dtoa_r+0x804>
 8014460:	2300      	movs	r3, #0
 8014462:	e7f6      	b.n	8014452 <_dtoa_r+0x902>
 8014464:	9b02      	ldr	r3, [sp, #8]
 8014466:	e7f4      	b.n	8014452 <_dtoa_r+0x902>
 8014468:	d085      	beq.n	8014376 <_dtoa_r+0x826>
 801446a:	4618      	mov	r0, r3
 801446c:	301c      	adds	r0, #28
 801446e:	e77d      	b.n	801436c <_dtoa_r+0x81c>
 8014470:	40240000 	.word	0x40240000
 8014474:	9b01      	ldr	r3, [sp, #4]
 8014476:	2b00      	cmp	r3, #0
 8014478:	dc38      	bgt.n	80144ec <_dtoa_r+0x99c>
 801447a:	9b05      	ldr	r3, [sp, #20]
 801447c:	2b02      	cmp	r3, #2
 801447e:	dd35      	ble.n	80144ec <_dtoa_r+0x99c>
 8014480:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014484:	f1b9 0f00 	cmp.w	r9, #0
 8014488:	d10d      	bne.n	80144a6 <_dtoa_r+0x956>
 801448a:	4631      	mov	r1, r6
 801448c:	464b      	mov	r3, r9
 801448e:	2205      	movs	r2, #5
 8014490:	4620      	mov	r0, r4
 8014492:	f000 ff7d 	bl	8015390 <__multadd>
 8014496:	4601      	mov	r1, r0
 8014498:	4606      	mov	r6, r0
 801449a:	4658      	mov	r0, fp
 801449c:	f001 f9de 	bl	801585c <__mcmp>
 80144a0:	2800      	cmp	r0, #0
 80144a2:	f73f adbd 	bgt.w	8014020 <_dtoa_r+0x4d0>
 80144a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144a8:	9d00      	ldr	r5, [sp, #0]
 80144aa:	ea6f 0a03 	mvn.w	sl, r3
 80144ae:	f04f 0800 	mov.w	r8, #0
 80144b2:	4631      	mov	r1, r6
 80144b4:	4620      	mov	r0, r4
 80144b6:	f000 ff49 	bl	801534c <_Bfree>
 80144ba:	2f00      	cmp	r7, #0
 80144bc:	f43f aeb4 	beq.w	8014228 <_dtoa_r+0x6d8>
 80144c0:	f1b8 0f00 	cmp.w	r8, #0
 80144c4:	d005      	beq.n	80144d2 <_dtoa_r+0x982>
 80144c6:	45b8      	cmp	r8, r7
 80144c8:	d003      	beq.n	80144d2 <_dtoa_r+0x982>
 80144ca:	4641      	mov	r1, r8
 80144cc:	4620      	mov	r0, r4
 80144ce:	f000 ff3d 	bl	801534c <_Bfree>
 80144d2:	4639      	mov	r1, r7
 80144d4:	4620      	mov	r0, r4
 80144d6:	f000 ff39 	bl	801534c <_Bfree>
 80144da:	e6a5      	b.n	8014228 <_dtoa_r+0x6d8>
 80144dc:	2600      	movs	r6, #0
 80144de:	4637      	mov	r7, r6
 80144e0:	e7e1      	b.n	80144a6 <_dtoa_r+0x956>
 80144e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80144e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80144e8:	4637      	mov	r7, r6
 80144ea:	e599      	b.n	8014020 <_dtoa_r+0x4d0>
 80144ec:	9b08      	ldr	r3, [sp, #32]
 80144ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	f000 80fd 	beq.w	80146f2 <_dtoa_r+0xba2>
 80144f8:	2d00      	cmp	r5, #0
 80144fa:	dd05      	ble.n	8014508 <_dtoa_r+0x9b8>
 80144fc:	4639      	mov	r1, r7
 80144fe:	462a      	mov	r2, r5
 8014500:	4620      	mov	r0, r4
 8014502:	f001 f93f 	bl	8015784 <__lshift>
 8014506:	4607      	mov	r7, r0
 8014508:	9b06      	ldr	r3, [sp, #24]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d05c      	beq.n	80145c8 <_dtoa_r+0xa78>
 801450e:	6879      	ldr	r1, [r7, #4]
 8014510:	4620      	mov	r0, r4
 8014512:	f000 fedb 	bl	80152cc <_Balloc>
 8014516:	4605      	mov	r5, r0
 8014518:	b928      	cbnz	r0, 8014526 <_dtoa_r+0x9d6>
 801451a:	4b80      	ldr	r3, [pc, #512]	; (801471c <_dtoa_r+0xbcc>)
 801451c:	4602      	mov	r2, r0
 801451e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014522:	f7ff bb2e 	b.w	8013b82 <_dtoa_r+0x32>
 8014526:	693a      	ldr	r2, [r7, #16]
 8014528:	3202      	adds	r2, #2
 801452a:	0092      	lsls	r2, r2, #2
 801452c:	f107 010c 	add.w	r1, r7, #12
 8014530:	300c      	adds	r0, #12
 8014532:	f7fc fc2b 	bl	8010d8c <memcpy>
 8014536:	2201      	movs	r2, #1
 8014538:	4629      	mov	r1, r5
 801453a:	4620      	mov	r0, r4
 801453c:	f001 f922 	bl	8015784 <__lshift>
 8014540:	9b00      	ldr	r3, [sp, #0]
 8014542:	3301      	adds	r3, #1
 8014544:	9301      	str	r3, [sp, #4]
 8014546:	9b00      	ldr	r3, [sp, #0]
 8014548:	444b      	add	r3, r9
 801454a:	9307      	str	r3, [sp, #28]
 801454c:	9b02      	ldr	r3, [sp, #8]
 801454e:	f003 0301 	and.w	r3, r3, #1
 8014552:	46b8      	mov	r8, r7
 8014554:	9306      	str	r3, [sp, #24]
 8014556:	4607      	mov	r7, r0
 8014558:	9b01      	ldr	r3, [sp, #4]
 801455a:	4631      	mov	r1, r6
 801455c:	3b01      	subs	r3, #1
 801455e:	4658      	mov	r0, fp
 8014560:	9302      	str	r3, [sp, #8]
 8014562:	f7ff fa69 	bl	8013a38 <quorem>
 8014566:	4603      	mov	r3, r0
 8014568:	3330      	adds	r3, #48	; 0x30
 801456a:	9004      	str	r0, [sp, #16]
 801456c:	4641      	mov	r1, r8
 801456e:	4658      	mov	r0, fp
 8014570:	9308      	str	r3, [sp, #32]
 8014572:	f001 f973 	bl	801585c <__mcmp>
 8014576:	463a      	mov	r2, r7
 8014578:	4681      	mov	r9, r0
 801457a:	4631      	mov	r1, r6
 801457c:	4620      	mov	r0, r4
 801457e:	f001 f989 	bl	8015894 <__mdiff>
 8014582:	68c2      	ldr	r2, [r0, #12]
 8014584:	9b08      	ldr	r3, [sp, #32]
 8014586:	4605      	mov	r5, r0
 8014588:	bb02      	cbnz	r2, 80145cc <_dtoa_r+0xa7c>
 801458a:	4601      	mov	r1, r0
 801458c:	4658      	mov	r0, fp
 801458e:	f001 f965 	bl	801585c <__mcmp>
 8014592:	9b08      	ldr	r3, [sp, #32]
 8014594:	4602      	mov	r2, r0
 8014596:	4629      	mov	r1, r5
 8014598:	4620      	mov	r0, r4
 801459a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801459e:	f000 fed5 	bl	801534c <_Bfree>
 80145a2:	9b05      	ldr	r3, [sp, #20]
 80145a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80145a6:	9d01      	ldr	r5, [sp, #4]
 80145a8:	ea43 0102 	orr.w	r1, r3, r2
 80145ac:	9b06      	ldr	r3, [sp, #24]
 80145ae:	430b      	orrs	r3, r1
 80145b0:	9b08      	ldr	r3, [sp, #32]
 80145b2:	d10d      	bne.n	80145d0 <_dtoa_r+0xa80>
 80145b4:	2b39      	cmp	r3, #57	; 0x39
 80145b6:	d029      	beq.n	801460c <_dtoa_r+0xabc>
 80145b8:	f1b9 0f00 	cmp.w	r9, #0
 80145bc:	dd01      	ble.n	80145c2 <_dtoa_r+0xa72>
 80145be:	9b04      	ldr	r3, [sp, #16]
 80145c0:	3331      	adds	r3, #49	; 0x31
 80145c2:	9a02      	ldr	r2, [sp, #8]
 80145c4:	7013      	strb	r3, [r2, #0]
 80145c6:	e774      	b.n	80144b2 <_dtoa_r+0x962>
 80145c8:	4638      	mov	r0, r7
 80145ca:	e7b9      	b.n	8014540 <_dtoa_r+0x9f0>
 80145cc:	2201      	movs	r2, #1
 80145ce:	e7e2      	b.n	8014596 <_dtoa_r+0xa46>
 80145d0:	f1b9 0f00 	cmp.w	r9, #0
 80145d4:	db06      	blt.n	80145e4 <_dtoa_r+0xa94>
 80145d6:	9905      	ldr	r1, [sp, #20]
 80145d8:	ea41 0909 	orr.w	r9, r1, r9
 80145dc:	9906      	ldr	r1, [sp, #24]
 80145de:	ea59 0101 	orrs.w	r1, r9, r1
 80145e2:	d120      	bne.n	8014626 <_dtoa_r+0xad6>
 80145e4:	2a00      	cmp	r2, #0
 80145e6:	ddec      	ble.n	80145c2 <_dtoa_r+0xa72>
 80145e8:	4659      	mov	r1, fp
 80145ea:	2201      	movs	r2, #1
 80145ec:	4620      	mov	r0, r4
 80145ee:	9301      	str	r3, [sp, #4]
 80145f0:	f001 f8c8 	bl	8015784 <__lshift>
 80145f4:	4631      	mov	r1, r6
 80145f6:	4683      	mov	fp, r0
 80145f8:	f001 f930 	bl	801585c <__mcmp>
 80145fc:	2800      	cmp	r0, #0
 80145fe:	9b01      	ldr	r3, [sp, #4]
 8014600:	dc02      	bgt.n	8014608 <_dtoa_r+0xab8>
 8014602:	d1de      	bne.n	80145c2 <_dtoa_r+0xa72>
 8014604:	07da      	lsls	r2, r3, #31
 8014606:	d5dc      	bpl.n	80145c2 <_dtoa_r+0xa72>
 8014608:	2b39      	cmp	r3, #57	; 0x39
 801460a:	d1d8      	bne.n	80145be <_dtoa_r+0xa6e>
 801460c:	9a02      	ldr	r2, [sp, #8]
 801460e:	2339      	movs	r3, #57	; 0x39
 8014610:	7013      	strb	r3, [r2, #0]
 8014612:	462b      	mov	r3, r5
 8014614:	461d      	mov	r5, r3
 8014616:	3b01      	subs	r3, #1
 8014618:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801461c:	2a39      	cmp	r2, #57	; 0x39
 801461e:	d050      	beq.n	80146c2 <_dtoa_r+0xb72>
 8014620:	3201      	adds	r2, #1
 8014622:	701a      	strb	r2, [r3, #0]
 8014624:	e745      	b.n	80144b2 <_dtoa_r+0x962>
 8014626:	2a00      	cmp	r2, #0
 8014628:	dd03      	ble.n	8014632 <_dtoa_r+0xae2>
 801462a:	2b39      	cmp	r3, #57	; 0x39
 801462c:	d0ee      	beq.n	801460c <_dtoa_r+0xabc>
 801462e:	3301      	adds	r3, #1
 8014630:	e7c7      	b.n	80145c2 <_dtoa_r+0xa72>
 8014632:	9a01      	ldr	r2, [sp, #4]
 8014634:	9907      	ldr	r1, [sp, #28]
 8014636:	f802 3c01 	strb.w	r3, [r2, #-1]
 801463a:	428a      	cmp	r2, r1
 801463c:	d02a      	beq.n	8014694 <_dtoa_r+0xb44>
 801463e:	4659      	mov	r1, fp
 8014640:	2300      	movs	r3, #0
 8014642:	220a      	movs	r2, #10
 8014644:	4620      	mov	r0, r4
 8014646:	f000 fea3 	bl	8015390 <__multadd>
 801464a:	45b8      	cmp	r8, r7
 801464c:	4683      	mov	fp, r0
 801464e:	f04f 0300 	mov.w	r3, #0
 8014652:	f04f 020a 	mov.w	r2, #10
 8014656:	4641      	mov	r1, r8
 8014658:	4620      	mov	r0, r4
 801465a:	d107      	bne.n	801466c <_dtoa_r+0xb1c>
 801465c:	f000 fe98 	bl	8015390 <__multadd>
 8014660:	4680      	mov	r8, r0
 8014662:	4607      	mov	r7, r0
 8014664:	9b01      	ldr	r3, [sp, #4]
 8014666:	3301      	adds	r3, #1
 8014668:	9301      	str	r3, [sp, #4]
 801466a:	e775      	b.n	8014558 <_dtoa_r+0xa08>
 801466c:	f000 fe90 	bl	8015390 <__multadd>
 8014670:	4639      	mov	r1, r7
 8014672:	4680      	mov	r8, r0
 8014674:	2300      	movs	r3, #0
 8014676:	220a      	movs	r2, #10
 8014678:	4620      	mov	r0, r4
 801467a:	f000 fe89 	bl	8015390 <__multadd>
 801467e:	4607      	mov	r7, r0
 8014680:	e7f0      	b.n	8014664 <_dtoa_r+0xb14>
 8014682:	f1b9 0f00 	cmp.w	r9, #0
 8014686:	9a00      	ldr	r2, [sp, #0]
 8014688:	bfcc      	ite	gt
 801468a:	464d      	movgt	r5, r9
 801468c:	2501      	movle	r5, #1
 801468e:	4415      	add	r5, r2
 8014690:	f04f 0800 	mov.w	r8, #0
 8014694:	4659      	mov	r1, fp
 8014696:	2201      	movs	r2, #1
 8014698:	4620      	mov	r0, r4
 801469a:	9301      	str	r3, [sp, #4]
 801469c:	f001 f872 	bl	8015784 <__lshift>
 80146a0:	4631      	mov	r1, r6
 80146a2:	4683      	mov	fp, r0
 80146a4:	f001 f8da 	bl	801585c <__mcmp>
 80146a8:	2800      	cmp	r0, #0
 80146aa:	dcb2      	bgt.n	8014612 <_dtoa_r+0xac2>
 80146ac:	d102      	bne.n	80146b4 <_dtoa_r+0xb64>
 80146ae:	9b01      	ldr	r3, [sp, #4]
 80146b0:	07db      	lsls	r3, r3, #31
 80146b2:	d4ae      	bmi.n	8014612 <_dtoa_r+0xac2>
 80146b4:	462b      	mov	r3, r5
 80146b6:	461d      	mov	r5, r3
 80146b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80146bc:	2a30      	cmp	r2, #48	; 0x30
 80146be:	d0fa      	beq.n	80146b6 <_dtoa_r+0xb66>
 80146c0:	e6f7      	b.n	80144b2 <_dtoa_r+0x962>
 80146c2:	9a00      	ldr	r2, [sp, #0]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d1a5      	bne.n	8014614 <_dtoa_r+0xac4>
 80146c8:	f10a 0a01 	add.w	sl, sl, #1
 80146cc:	2331      	movs	r3, #49	; 0x31
 80146ce:	e779      	b.n	80145c4 <_dtoa_r+0xa74>
 80146d0:	4b13      	ldr	r3, [pc, #76]	; (8014720 <_dtoa_r+0xbd0>)
 80146d2:	f7ff baaf 	b.w	8013c34 <_dtoa_r+0xe4>
 80146d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146d8:	2b00      	cmp	r3, #0
 80146da:	f47f aa86 	bne.w	8013bea <_dtoa_r+0x9a>
 80146de:	4b11      	ldr	r3, [pc, #68]	; (8014724 <_dtoa_r+0xbd4>)
 80146e0:	f7ff baa8 	b.w	8013c34 <_dtoa_r+0xe4>
 80146e4:	f1b9 0f00 	cmp.w	r9, #0
 80146e8:	dc03      	bgt.n	80146f2 <_dtoa_r+0xba2>
 80146ea:	9b05      	ldr	r3, [sp, #20]
 80146ec:	2b02      	cmp	r3, #2
 80146ee:	f73f aec9 	bgt.w	8014484 <_dtoa_r+0x934>
 80146f2:	9d00      	ldr	r5, [sp, #0]
 80146f4:	4631      	mov	r1, r6
 80146f6:	4658      	mov	r0, fp
 80146f8:	f7ff f99e 	bl	8013a38 <quorem>
 80146fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014700:	f805 3b01 	strb.w	r3, [r5], #1
 8014704:	9a00      	ldr	r2, [sp, #0]
 8014706:	1aaa      	subs	r2, r5, r2
 8014708:	4591      	cmp	r9, r2
 801470a:	ddba      	ble.n	8014682 <_dtoa_r+0xb32>
 801470c:	4659      	mov	r1, fp
 801470e:	2300      	movs	r3, #0
 8014710:	220a      	movs	r2, #10
 8014712:	4620      	mov	r0, r4
 8014714:	f000 fe3c 	bl	8015390 <__multadd>
 8014718:	4683      	mov	fp, r0
 801471a:	e7eb      	b.n	80146f4 <_dtoa_r+0xba4>
 801471c:	08018ae5 	.word	0x08018ae5
 8014720:	08018ce9 	.word	0x08018ce9
 8014724:	08018a79 	.word	0x08018a79

08014728 <__sflush_r>:
 8014728:	898a      	ldrh	r2, [r1, #12]
 801472a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801472e:	4605      	mov	r5, r0
 8014730:	0710      	lsls	r0, r2, #28
 8014732:	460c      	mov	r4, r1
 8014734:	d458      	bmi.n	80147e8 <__sflush_r+0xc0>
 8014736:	684b      	ldr	r3, [r1, #4]
 8014738:	2b00      	cmp	r3, #0
 801473a:	dc05      	bgt.n	8014748 <__sflush_r+0x20>
 801473c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801473e:	2b00      	cmp	r3, #0
 8014740:	dc02      	bgt.n	8014748 <__sflush_r+0x20>
 8014742:	2000      	movs	r0, #0
 8014744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801474a:	2e00      	cmp	r6, #0
 801474c:	d0f9      	beq.n	8014742 <__sflush_r+0x1a>
 801474e:	2300      	movs	r3, #0
 8014750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014754:	682f      	ldr	r7, [r5, #0]
 8014756:	602b      	str	r3, [r5, #0]
 8014758:	d032      	beq.n	80147c0 <__sflush_r+0x98>
 801475a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801475c:	89a3      	ldrh	r3, [r4, #12]
 801475e:	075a      	lsls	r2, r3, #29
 8014760:	d505      	bpl.n	801476e <__sflush_r+0x46>
 8014762:	6863      	ldr	r3, [r4, #4]
 8014764:	1ac0      	subs	r0, r0, r3
 8014766:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014768:	b10b      	cbz	r3, 801476e <__sflush_r+0x46>
 801476a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801476c:	1ac0      	subs	r0, r0, r3
 801476e:	2300      	movs	r3, #0
 8014770:	4602      	mov	r2, r0
 8014772:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014774:	6a21      	ldr	r1, [r4, #32]
 8014776:	4628      	mov	r0, r5
 8014778:	47b0      	blx	r6
 801477a:	1c43      	adds	r3, r0, #1
 801477c:	89a3      	ldrh	r3, [r4, #12]
 801477e:	d106      	bne.n	801478e <__sflush_r+0x66>
 8014780:	6829      	ldr	r1, [r5, #0]
 8014782:	291d      	cmp	r1, #29
 8014784:	d82c      	bhi.n	80147e0 <__sflush_r+0xb8>
 8014786:	4a2a      	ldr	r2, [pc, #168]	; (8014830 <__sflush_r+0x108>)
 8014788:	40ca      	lsrs	r2, r1
 801478a:	07d6      	lsls	r6, r2, #31
 801478c:	d528      	bpl.n	80147e0 <__sflush_r+0xb8>
 801478e:	2200      	movs	r2, #0
 8014790:	6062      	str	r2, [r4, #4]
 8014792:	04d9      	lsls	r1, r3, #19
 8014794:	6922      	ldr	r2, [r4, #16]
 8014796:	6022      	str	r2, [r4, #0]
 8014798:	d504      	bpl.n	80147a4 <__sflush_r+0x7c>
 801479a:	1c42      	adds	r2, r0, #1
 801479c:	d101      	bne.n	80147a2 <__sflush_r+0x7a>
 801479e:	682b      	ldr	r3, [r5, #0]
 80147a0:	b903      	cbnz	r3, 80147a4 <__sflush_r+0x7c>
 80147a2:	6560      	str	r0, [r4, #84]	; 0x54
 80147a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80147a6:	602f      	str	r7, [r5, #0]
 80147a8:	2900      	cmp	r1, #0
 80147aa:	d0ca      	beq.n	8014742 <__sflush_r+0x1a>
 80147ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80147b0:	4299      	cmp	r1, r3
 80147b2:	d002      	beq.n	80147ba <__sflush_r+0x92>
 80147b4:	4628      	mov	r0, r5
 80147b6:	f7fc fd97 	bl	80112e8 <_free_r>
 80147ba:	2000      	movs	r0, #0
 80147bc:	6360      	str	r0, [r4, #52]	; 0x34
 80147be:	e7c1      	b.n	8014744 <__sflush_r+0x1c>
 80147c0:	6a21      	ldr	r1, [r4, #32]
 80147c2:	2301      	movs	r3, #1
 80147c4:	4628      	mov	r0, r5
 80147c6:	47b0      	blx	r6
 80147c8:	1c41      	adds	r1, r0, #1
 80147ca:	d1c7      	bne.n	801475c <__sflush_r+0x34>
 80147cc:	682b      	ldr	r3, [r5, #0]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d0c4      	beq.n	801475c <__sflush_r+0x34>
 80147d2:	2b1d      	cmp	r3, #29
 80147d4:	d001      	beq.n	80147da <__sflush_r+0xb2>
 80147d6:	2b16      	cmp	r3, #22
 80147d8:	d101      	bne.n	80147de <__sflush_r+0xb6>
 80147da:	602f      	str	r7, [r5, #0]
 80147dc:	e7b1      	b.n	8014742 <__sflush_r+0x1a>
 80147de:	89a3      	ldrh	r3, [r4, #12]
 80147e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147e4:	81a3      	strh	r3, [r4, #12]
 80147e6:	e7ad      	b.n	8014744 <__sflush_r+0x1c>
 80147e8:	690f      	ldr	r7, [r1, #16]
 80147ea:	2f00      	cmp	r7, #0
 80147ec:	d0a9      	beq.n	8014742 <__sflush_r+0x1a>
 80147ee:	0793      	lsls	r3, r2, #30
 80147f0:	680e      	ldr	r6, [r1, #0]
 80147f2:	bf08      	it	eq
 80147f4:	694b      	ldreq	r3, [r1, #20]
 80147f6:	600f      	str	r7, [r1, #0]
 80147f8:	bf18      	it	ne
 80147fa:	2300      	movne	r3, #0
 80147fc:	eba6 0807 	sub.w	r8, r6, r7
 8014800:	608b      	str	r3, [r1, #8]
 8014802:	f1b8 0f00 	cmp.w	r8, #0
 8014806:	dd9c      	ble.n	8014742 <__sflush_r+0x1a>
 8014808:	6a21      	ldr	r1, [r4, #32]
 801480a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801480c:	4643      	mov	r3, r8
 801480e:	463a      	mov	r2, r7
 8014810:	4628      	mov	r0, r5
 8014812:	47b0      	blx	r6
 8014814:	2800      	cmp	r0, #0
 8014816:	dc06      	bgt.n	8014826 <__sflush_r+0xfe>
 8014818:	89a3      	ldrh	r3, [r4, #12]
 801481a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801481e:	81a3      	strh	r3, [r4, #12]
 8014820:	f04f 30ff 	mov.w	r0, #4294967295
 8014824:	e78e      	b.n	8014744 <__sflush_r+0x1c>
 8014826:	4407      	add	r7, r0
 8014828:	eba8 0800 	sub.w	r8, r8, r0
 801482c:	e7e9      	b.n	8014802 <__sflush_r+0xda>
 801482e:	bf00      	nop
 8014830:	20400001 	.word	0x20400001

08014834 <_fflush_r>:
 8014834:	b538      	push	{r3, r4, r5, lr}
 8014836:	690b      	ldr	r3, [r1, #16]
 8014838:	4605      	mov	r5, r0
 801483a:	460c      	mov	r4, r1
 801483c:	b913      	cbnz	r3, 8014844 <_fflush_r+0x10>
 801483e:	2500      	movs	r5, #0
 8014840:	4628      	mov	r0, r5
 8014842:	bd38      	pop	{r3, r4, r5, pc}
 8014844:	b118      	cbz	r0, 801484e <_fflush_r+0x1a>
 8014846:	6983      	ldr	r3, [r0, #24]
 8014848:	b90b      	cbnz	r3, 801484e <_fflush_r+0x1a>
 801484a:	f7fc f8ab 	bl	80109a4 <__sinit>
 801484e:	4b14      	ldr	r3, [pc, #80]	; (80148a0 <_fflush_r+0x6c>)
 8014850:	429c      	cmp	r4, r3
 8014852:	d11b      	bne.n	801488c <_fflush_r+0x58>
 8014854:	686c      	ldr	r4, [r5, #4]
 8014856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d0ef      	beq.n	801483e <_fflush_r+0xa>
 801485e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014860:	07d0      	lsls	r0, r2, #31
 8014862:	d404      	bmi.n	801486e <_fflush_r+0x3a>
 8014864:	0599      	lsls	r1, r3, #22
 8014866:	d402      	bmi.n	801486e <_fflush_r+0x3a>
 8014868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801486a:	f7fc fa7b 	bl	8010d64 <__retarget_lock_acquire_recursive>
 801486e:	4628      	mov	r0, r5
 8014870:	4621      	mov	r1, r4
 8014872:	f7ff ff59 	bl	8014728 <__sflush_r>
 8014876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014878:	07da      	lsls	r2, r3, #31
 801487a:	4605      	mov	r5, r0
 801487c:	d4e0      	bmi.n	8014840 <_fflush_r+0xc>
 801487e:	89a3      	ldrh	r3, [r4, #12]
 8014880:	059b      	lsls	r3, r3, #22
 8014882:	d4dd      	bmi.n	8014840 <_fflush_r+0xc>
 8014884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014886:	f7fc fa6f 	bl	8010d68 <__retarget_lock_release_recursive>
 801488a:	e7d9      	b.n	8014840 <_fflush_r+0xc>
 801488c:	4b05      	ldr	r3, [pc, #20]	; (80148a4 <_fflush_r+0x70>)
 801488e:	429c      	cmp	r4, r3
 8014890:	d101      	bne.n	8014896 <_fflush_r+0x62>
 8014892:	68ac      	ldr	r4, [r5, #8]
 8014894:	e7df      	b.n	8014856 <_fflush_r+0x22>
 8014896:	4b04      	ldr	r3, [pc, #16]	; (80148a8 <_fflush_r+0x74>)
 8014898:	429c      	cmp	r4, r3
 801489a:	bf08      	it	eq
 801489c:	68ec      	ldreq	r4, [r5, #12]
 801489e:	e7da      	b.n	8014856 <_fflush_r+0x22>
 80148a0:	080186f8 	.word	0x080186f8
 80148a4:	08018718 	.word	0x08018718
 80148a8:	080186d8 	.word	0x080186d8

080148ac <fiprintf>:
 80148ac:	b40e      	push	{r1, r2, r3}
 80148ae:	b503      	push	{r0, r1, lr}
 80148b0:	4601      	mov	r1, r0
 80148b2:	ab03      	add	r3, sp, #12
 80148b4:	4805      	ldr	r0, [pc, #20]	; (80148cc <fiprintf+0x20>)
 80148b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80148ba:	6800      	ldr	r0, [r0, #0]
 80148bc:	9301      	str	r3, [sp, #4]
 80148be:	f001 fd4d 	bl	801635c <_vfiprintf_r>
 80148c2:	b002      	add	sp, #8
 80148c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80148c8:	b003      	add	sp, #12
 80148ca:	4770      	bx	lr
 80148cc:	20000040 	.word	0x20000040

080148d0 <rshift>:
 80148d0:	6903      	ldr	r3, [r0, #16]
 80148d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80148d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80148de:	f100 0414 	add.w	r4, r0, #20
 80148e2:	dd45      	ble.n	8014970 <rshift+0xa0>
 80148e4:	f011 011f 	ands.w	r1, r1, #31
 80148e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80148ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80148f0:	d10c      	bne.n	801490c <rshift+0x3c>
 80148f2:	f100 0710 	add.w	r7, r0, #16
 80148f6:	4629      	mov	r1, r5
 80148f8:	42b1      	cmp	r1, r6
 80148fa:	d334      	bcc.n	8014966 <rshift+0x96>
 80148fc:	1a9b      	subs	r3, r3, r2
 80148fe:	009b      	lsls	r3, r3, #2
 8014900:	1eea      	subs	r2, r5, #3
 8014902:	4296      	cmp	r6, r2
 8014904:	bf38      	it	cc
 8014906:	2300      	movcc	r3, #0
 8014908:	4423      	add	r3, r4
 801490a:	e015      	b.n	8014938 <rshift+0x68>
 801490c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014910:	f1c1 0820 	rsb	r8, r1, #32
 8014914:	40cf      	lsrs	r7, r1
 8014916:	f105 0e04 	add.w	lr, r5, #4
 801491a:	46a1      	mov	r9, r4
 801491c:	4576      	cmp	r6, lr
 801491e:	46f4      	mov	ip, lr
 8014920:	d815      	bhi.n	801494e <rshift+0x7e>
 8014922:	1a9b      	subs	r3, r3, r2
 8014924:	009a      	lsls	r2, r3, #2
 8014926:	3a04      	subs	r2, #4
 8014928:	3501      	adds	r5, #1
 801492a:	42ae      	cmp	r6, r5
 801492c:	bf38      	it	cc
 801492e:	2200      	movcc	r2, #0
 8014930:	18a3      	adds	r3, r4, r2
 8014932:	50a7      	str	r7, [r4, r2]
 8014934:	b107      	cbz	r7, 8014938 <rshift+0x68>
 8014936:	3304      	adds	r3, #4
 8014938:	1b1a      	subs	r2, r3, r4
 801493a:	42a3      	cmp	r3, r4
 801493c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014940:	bf08      	it	eq
 8014942:	2300      	moveq	r3, #0
 8014944:	6102      	str	r2, [r0, #16]
 8014946:	bf08      	it	eq
 8014948:	6143      	streq	r3, [r0, #20]
 801494a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801494e:	f8dc c000 	ldr.w	ip, [ip]
 8014952:	fa0c fc08 	lsl.w	ip, ip, r8
 8014956:	ea4c 0707 	orr.w	r7, ip, r7
 801495a:	f849 7b04 	str.w	r7, [r9], #4
 801495e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014962:	40cf      	lsrs	r7, r1
 8014964:	e7da      	b.n	801491c <rshift+0x4c>
 8014966:	f851 cb04 	ldr.w	ip, [r1], #4
 801496a:	f847 cf04 	str.w	ip, [r7, #4]!
 801496e:	e7c3      	b.n	80148f8 <rshift+0x28>
 8014970:	4623      	mov	r3, r4
 8014972:	e7e1      	b.n	8014938 <rshift+0x68>

08014974 <__hexdig_fun>:
 8014974:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014978:	2b09      	cmp	r3, #9
 801497a:	d802      	bhi.n	8014982 <__hexdig_fun+0xe>
 801497c:	3820      	subs	r0, #32
 801497e:	b2c0      	uxtb	r0, r0
 8014980:	4770      	bx	lr
 8014982:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014986:	2b05      	cmp	r3, #5
 8014988:	d801      	bhi.n	801498e <__hexdig_fun+0x1a>
 801498a:	3847      	subs	r0, #71	; 0x47
 801498c:	e7f7      	b.n	801497e <__hexdig_fun+0xa>
 801498e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014992:	2b05      	cmp	r3, #5
 8014994:	d801      	bhi.n	801499a <__hexdig_fun+0x26>
 8014996:	3827      	subs	r0, #39	; 0x27
 8014998:	e7f1      	b.n	801497e <__hexdig_fun+0xa>
 801499a:	2000      	movs	r0, #0
 801499c:	4770      	bx	lr
	...

080149a0 <__gethex>:
 80149a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149a4:	ed2d 8b02 	vpush	{d8}
 80149a8:	b089      	sub	sp, #36	; 0x24
 80149aa:	ee08 0a10 	vmov	s16, r0
 80149ae:	9304      	str	r3, [sp, #16]
 80149b0:	4bbc      	ldr	r3, [pc, #752]	; (8014ca4 <__gethex+0x304>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	9301      	str	r3, [sp, #4]
 80149b6:	4618      	mov	r0, r3
 80149b8:	468b      	mov	fp, r1
 80149ba:	4690      	mov	r8, r2
 80149bc:	f7eb fc22 	bl	8000204 <strlen>
 80149c0:	9b01      	ldr	r3, [sp, #4]
 80149c2:	f8db 2000 	ldr.w	r2, [fp]
 80149c6:	4403      	add	r3, r0
 80149c8:	4682      	mov	sl, r0
 80149ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80149ce:	9305      	str	r3, [sp, #20]
 80149d0:	1c93      	adds	r3, r2, #2
 80149d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80149d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80149da:	32fe      	adds	r2, #254	; 0xfe
 80149dc:	18d1      	adds	r1, r2, r3
 80149de:	461f      	mov	r7, r3
 80149e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80149e4:	9100      	str	r1, [sp, #0]
 80149e6:	2830      	cmp	r0, #48	; 0x30
 80149e8:	d0f8      	beq.n	80149dc <__gethex+0x3c>
 80149ea:	f7ff ffc3 	bl	8014974 <__hexdig_fun>
 80149ee:	4604      	mov	r4, r0
 80149f0:	2800      	cmp	r0, #0
 80149f2:	d13a      	bne.n	8014a6a <__gethex+0xca>
 80149f4:	9901      	ldr	r1, [sp, #4]
 80149f6:	4652      	mov	r2, sl
 80149f8:	4638      	mov	r0, r7
 80149fa:	f7fd fd84 	bl	8012506 <strncmp>
 80149fe:	4605      	mov	r5, r0
 8014a00:	2800      	cmp	r0, #0
 8014a02:	d168      	bne.n	8014ad6 <__gethex+0x136>
 8014a04:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014a08:	eb07 060a 	add.w	r6, r7, sl
 8014a0c:	f7ff ffb2 	bl	8014974 <__hexdig_fun>
 8014a10:	2800      	cmp	r0, #0
 8014a12:	d062      	beq.n	8014ada <__gethex+0x13a>
 8014a14:	4633      	mov	r3, r6
 8014a16:	7818      	ldrb	r0, [r3, #0]
 8014a18:	2830      	cmp	r0, #48	; 0x30
 8014a1a:	461f      	mov	r7, r3
 8014a1c:	f103 0301 	add.w	r3, r3, #1
 8014a20:	d0f9      	beq.n	8014a16 <__gethex+0x76>
 8014a22:	f7ff ffa7 	bl	8014974 <__hexdig_fun>
 8014a26:	2301      	movs	r3, #1
 8014a28:	fab0 f480 	clz	r4, r0
 8014a2c:	0964      	lsrs	r4, r4, #5
 8014a2e:	4635      	mov	r5, r6
 8014a30:	9300      	str	r3, [sp, #0]
 8014a32:	463a      	mov	r2, r7
 8014a34:	4616      	mov	r6, r2
 8014a36:	3201      	adds	r2, #1
 8014a38:	7830      	ldrb	r0, [r6, #0]
 8014a3a:	f7ff ff9b 	bl	8014974 <__hexdig_fun>
 8014a3e:	2800      	cmp	r0, #0
 8014a40:	d1f8      	bne.n	8014a34 <__gethex+0x94>
 8014a42:	9901      	ldr	r1, [sp, #4]
 8014a44:	4652      	mov	r2, sl
 8014a46:	4630      	mov	r0, r6
 8014a48:	f7fd fd5d 	bl	8012506 <strncmp>
 8014a4c:	b980      	cbnz	r0, 8014a70 <__gethex+0xd0>
 8014a4e:	b94d      	cbnz	r5, 8014a64 <__gethex+0xc4>
 8014a50:	eb06 050a 	add.w	r5, r6, sl
 8014a54:	462a      	mov	r2, r5
 8014a56:	4616      	mov	r6, r2
 8014a58:	3201      	adds	r2, #1
 8014a5a:	7830      	ldrb	r0, [r6, #0]
 8014a5c:	f7ff ff8a 	bl	8014974 <__hexdig_fun>
 8014a60:	2800      	cmp	r0, #0
 8014a62:	d1f8      	bne.n	8014a56 <__gethex+0xb6>
 8014a64:	1bad      	subs	r5, r5, r6
 8014a66:	00ad      	lsls	r5, r5, #2
 8014a68:	e004      	b.n	8014a74 <__gethex+0xd4>
 8014a6a:	2400      	movs	r4, #0
 8014a6c:	4625      	mov	r5, r4
 8014a6e:	e7e0      	b.n	8014a32 <__gethex+0x92>
 8014a70:	2d00      	cmp	r5, #0
 8014a72:	d1f7      	bne.n	8014a64 <__gethex+0xc4>
 8014a74:	7833      	ldrb	r3, [r6, #0]
 8014a76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014a7a:	2b50      	cmp	r3, #80	; 0x50
 8014a7c:	d13b      	bne.n	8014af6 <__gethex+0x156>
 8014a7e:	7873      	ldrb	r3, [r6, #1]
 8014a80:	2b2b      	cmp	r3, #43	; 0x2b
 8014a82:	d02c      	beq.n	8014ade <__gethex+0x13e>
 8014a84:	2b2d      	cmp	r3, #45	; 0x2d
 8014a86:	d02e      	beq.n	8014ae6 <__gethex+0x146>
 8014a88:	1c71      	adds	r1, r6, #1
 8014a8a:	f04f 0900 	mov.w	r9, #0
 8014a8e:	7808      	ldrb	r0, [r1, #0]
 8014a90:	f7ff ff70 	bl	8014974 <__hexdig_fun>
 8014a94:	1e43      	subs	r3, r0, #1
 8014a96:	b2db      	uxtb	r3, r3
 8014a98:	2b18      	cmp	r3, #24
 8014a9a:	d82c      	bhi.n	8014af6 <__gethex+0x156>
 8014a9c:	f1a0 0210 	sub.w	r2, r0, #16
 8014aa0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014aa4:	f7ff ff66 	bl	8014974 <__hexdig_fun>
 8014aa8:	1e43      	subs	r3, r0, #1
 8014aaa:	b2db      	uxtb	r3, r3
 8014aac:	2b18      	cmp	r3, #24
 8014aae:	d91d      	bls.n	8014aec <__gethex+0x14c>
 8014ab0:	f1b9 0f00 	cmp.w	r9, #0
 8014ab4:	d000      	beq.n	8014ab8 <__gethex+0x118>
 8014ab6:	4252      	negs	r2, r2
 8014ab8:	4415      	add	r5, r2
 8014aba:	f8cb 1000 	str.w	r1, [fp]
 8014abe:	b1e4      	cbz	r4, 8014afa <__gethex+0x15a>
 8014ac0:	9b00      	ldr	r3, [sp, #0]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	bf14      	ite	ne
 8014ac6:	2700      	movne	r7, #0
 8014ac8:	2706      	moveq	r7, #6
 8014aca:	4638      	mov	r0, r7
 8014acc:	b009      	add	sp, #36	; 0x24
 8014ace:	ecbd 8b02 	vpop	{d8}
 8014ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ad6:	463e      	mov	r6, r7
 8014ad8:	4625      	mov	r5, r4
 8014ada:	2401      	movs	r4, #1
 8014adc:	e7ca      	b.n	8014a74 <__gethex+0xd4>
 8014ade:	f04f 0900 	mov.w	r9, #0
 8014ae2:	1cb1      	adds	r1, r6, #2
 8014ae4:	e7d3      	b.n	8014a8e <__gethex+0xee>
 8014ae6:	f04f 0901 	mov.w	r9, #1
 8014aea:	e7fa      	b.n	8014ae2 <__gethex+0x142>
 8014aec:	230a      	movs	r3, #10
 8014aee:	fb03 0202 	mla	r2, r3, r2, r0
 8014af2:	3a10      	subs	r2, #16
 8014af4:	e7d4      	b.n	8014aa0 <__gethex+0x100>
 8014af6:	4631      	mov	r1, r6
 8014af8:	e7df      	b.n	8014aba <__gethex+0x11a>
 8014afa:	1bf3      	subs	r3, r6, r7
 8014afc:	3b01      	subs	r3, #1
 8014afe:	4621      	mov	r1, r4
 8014b00:	2b07      	cmp	r3, #7
 8014b02:	dc0b      	bgt.n	8014b1c <__gethex+0x17c>
 8014b04:	ee18 0a10 	vmov	r0, s16
 8014b08:	f000 fbe0 	bl	80152cc <_Balloc>
 8014b0c:	4604      	mov	r4, r0
 8014b0e:	b940      	cbnz	r0, 8014b22 <__gethex+0x182>
 8014b10:	4b65      	ldr	r3, [pc, #404]	; (8014ca8 <__gethex+0x308>)
 8014b12:	4602      	mov	r2, r0
 8014b14:	21de      	movs	r1, #222	; 0xde
 8014b16:	4865      	ldr	r0, [pc, #404]	; (8014cac <__gethex+0x30c>)
 8014b18:	f7fe ff4c 	bl	80139b4 <__assert_func>
 8014b1c:	3101      	adds	r1, #1
 8014b1e:	105b      	asrs	r3, r3, #1
 8014b20:	e7ee      	b.n	8014b00 <__gethex+0x160>
 8014b22:	f100 0914 	add.w	r9, r0, #20
 8014b26:	f04f 0b00 	mov.w	fp, #0
 8014b2a:	f1ca 0301 	rsb	r3, sl, #1
 8014b2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014b32:	f8cd b000 	str.w	fp, [sp]
 8014b36:	9306      	str	r3, [sp, #24]
 8014b38:	42b7      	cmp	r7, r6
 8014b3a:	d340      	bcc.n	8014bbe <__gethex+0x21e>
 8014b3c:	9802      	ldr	r0, [sp, #8]
 8014b3e:	9b00      	ldr	r3, [sp, #0]
 8014b40:	f840 3b04 	str.w	r3, [r0], #4
 8014b44:	eba0 0009 	sub.w	r0, r0, r9
 8014b48:	1080      	asrs	r0, r0, #2
 8014b4a:	0146      	lsls	r6, r0, #5
 8014b4c:	6120      	str	r0, [r4, #16]
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f000 fcb2 	bl	80154b8 <__hi0bits>
 8014b54:	1a30      	subs	r0, r6, r0
 8014b56:	f8d8 6000 	ldr.w	r6, [r8]
 8014b5a:	42b0      	cmp	r0, r6
 8014b5c:	dd63      	ble.n	8014c26 <__gethex+0x286>
 8014b5e:	1b87      	subs	r7, r0, r6
 8014b60:	4639      	mov	r1, r7
 8014b62:	4620      	mov	r0, r4
 8014b64:	f001 f84c 	bl	8015c00 <__any_on>
 8014b68:	4682      	mov	sl, r0
 8014b6a:	b1a8      	cbz	r0, 8014b98 <__gethex+0x1f8>
 8014b6c:	1e7b      	subs	r3, r7, #1
 8014b6e:	1159      	asrs	r1, r3, #5
 8014b70:	f003 021f 	and.w	r2, r3, #31
 8014b74:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014b78:	f04f 0a01 	mov.w	sl, #1
 8014b7c:	fa0a f202 	lsl.w	r2, sl, r2
 8014b80:	420a      	tst	r2, r1
 8014b82:	d009      	beq.n	8014b98 <__gethex+0x1f8>
 8014b84:	4553      	cmp	r3, sl
 8014b86:	dd05      	ble.n	8014b94 <__gethex+0x1f4>
 8014b88:	1eb9      	subs	r1, r7, #2
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	f001 f838 	bl	8015c00 <__any_on>
 8014b90:	2800      	cmp	r0, #0
 8014b92:	d145      	bne.n	8014c20 <__gethex+0x280>
 8014b94:	f04f 0a02 	mov.w	sl, #2
 8014b98:	4639      	mov	r1, r7
 8014b9a:	4620      	mov	r0, r4
 8014b9c:	f7ff fe98 	bl	80148d0 <rshift>
 8014ba0:	443d      	add	r5, r7
 8014ba2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014ba6:	42ab      	cmp	r3, r5
 8014ba8:	da4c      	bge.n	8014c44 <__gethex+0x2a4>
 8014baa:	ee18 0a10 	vmov	r0, s16
 8014bae:	4621      	mov	r1, r4
 8014bb0:	f000 fbcc 	bl	801534c <_Bfree>
 8014bb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	6013      	str	r3, [r2, #0]
 8014bba:	27a3      	movs	r7, #163	; 0xa3
 8014bbc:	e785      	b.n	8014aca <__gethex+0x12a>
 8014bbe:	1e73      	subs	r3, r6, #1
 8014bc0:	9a05      	ldr	r2, [sp, #20]
 8014bc2:	9303      	str	r3, [sp, #12]
 8014bc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014bc8:	4293      	cmp	r3, r2
 8014bca:	d019      	beq.n	8014c00 <__gethex+0x260>
 8014bcc:	f1bb 0f20 	cmp.w	fp, #32
 8014bd0:	d107      	bne.n	8014be2 <__gethex+0x242>
 8014bd2:	9b02      	ldr	r3, [sp, #8]
 8014bd4:	9a00      	ldr	r2, [sp, #0]
 8014bd6:	f843 2b04 	str.w	r2, [r3], #4
 8014bda:	9302      	str	r3, [sp, #8]
 8014bdc:	2300      	movs	r3, #0
 8014bde:	9300      	str	r3, [sp, #0]
 8014be0:	469b      	mov	fp, r3
 8014be2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014be6:	f7ff fec5 	bl	8014974 <__hexdig_fun>
 8014bea:	9b00      	ldr	r3, [sp, #0]
 8014bec:	f000 000f 	and.w	r0, r0, #15
 8014bf0:	fa00 f00b 	lsl.w	r0, r0, fp
 8014bf4:	4303      	orrs	r3, r0
 8014bf6:	9300      	str	r3, [sp, #0]
 8014bf8:	f10b 0b04 	add.w	fp, fp, #4
 8014bfc:	9b03      	ldr	r3, [sp, #12]
 8014bfe:	e00d      	b.n	8014c1c <__gethex+0x27c>
 8014c00:	9b03      	ldr	r3, [sp, #12]
 8014c02:	9a06      	ldr	r2, [sp, #24]
 8014c04:	4413      	add	r3, r2
 8014c06:	42bb      	cmp	r3, r7
 8014c08:	d3e0      	bcc.n	8014bcc <__gethex+0x22c>
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	9901      	ldr	r1, [sp, #4]
 8014c0e:	9307      	str	r3, [sp, #28]
 8014c10:	4652      	mov	r2, sl
 8014c12:	f7fd fc78 	bl	8012506 <strncmp>
 8014c16:	9b07      	ldr	r3, [sp, #28]
 8014c18:	2800      	cmp	r0, #0
 8014c1a:	d1d7      	bne.n	8014bcc <__gethex+0x22c>
 8014c1c:	461e      	mov	r6, r3
 8014c1e:	e78b      	b.n	8014b38 <__gethex+0x198>
 8014c20:	f04f 0a03 	mov.w	sl, #3
 8014c24:	e7b8      	b.n	8014b98 <__gethex+0x1f8>
 8014c26:	da0a      	bge.n	8014c3e <__gethex+0x29e>
 8014c28:	1a37      	subs	r7, r6, r0
 8014c2a:	4621      	mov	r1, r4
 8014c2c:	ee18 0a10 	vmov	r0, s16
 8014c30:	463a      	mov	r2, r7
 8014c32:	f000 fda7 	bl	8015784 <__lshift>
 8014c36:	1bed      	subs	r5, r5, r7
 8014c38:	4604      	mov	r4, r0
 8014c3a:	f100 0914 	add.w	r9, r0, #20
 8014c3e:	f04f 0a00 	mov.w	sl, #0
 8014c42:	e7ae      	b.n	8014ba2 <__gethex+0x202>
 8014c44:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014c48:	42a8      	cmp	r0, r5
 8014c4a:	dd72      	ble.n	8014d32 <__gethex+0x392>
 8014c4c:	1b45      	subs	r5, r0, r5
 8014c4e:	42ae      	cmp	r6, r5
 8014c50:	dc36      	bgt.n	8014cc0 <__gethex+0x320>
 8014c52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014c56:	2b02      	cmp	r3, #2
 8014c58:	d02a      	beq.n	8014cb0 <__gethex+0x310>
 8014c5a:	2b03      	cmp	r3, #3
 8014c5c:	d02c      	beq.n	8014cb8 <__gethex+0x318>
 8014c5e:	2b01      	cmp	r3, #1
 8014c60:	d115      	bne.n	8014c8e <__gethex+0x2ee>
 8014c62:	42ae      	cmp	r6, r5
 8014c64:	d113      	bne.n	8014c8e <__gethex+0x2ee>
 8014c66:	2e01      	cmp	r6, #1
 8014c68:	d10b      	bne.n	8014c82 <__gethex+0x2e2>
 8014c6a:	9a04      	ldr	r2, [sp, #16]
 8014c6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c70:	6013      	str	r3, [r2, #0]
 8014c72:	2301      	movs	r3, #1
 8014c74:	6123      	str	r3, [r4, #16]
 8014c76:	f8c9 3000 	str.w	r3, [r9]
 8014c7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014c7c:	2762      	movs	r7, #98	; 0x62
 8014c7e:	601c      	str	r4, [r3, #0]
 8014c80:	e723      	b.n	8014aca <__gethex+0x12a>
 8014c82:	1e71      	subs	r1, r6, #1
 8014c84:	4620      	mov	r0, r4
 8014c86:	f000 ffbb 	bl	8015c00 <__any_on>
 8014c8a:	2800      	cmp	r0, #0
 8014c8c:	d1ed      	bne.n	8014c6a <__gethex+0x2ca>
 8014c8e:	ee18 0a10 	vmov	r0, s16
 8014c92:	4621      	mov	r1, r4
 8014c94:	f000 fb5a 	bl	801534c <_Bfree>
 8014c98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	6013      	str	r3, [r2, #0]
 8014c9e:	2750      	movs	r7, #80	; 0x50
 8014ca0:	e713      	b.n	8014aca <__gethex+0x12a>
 8014ca2:	bf00      	nop
 8014ca4:	08018b60 	.word	0x08018b60
 8014ca8:	08018ae5 	.word	0x08018ae5
 8014cac:	08018af6 	.word	0x08018af6
 8014cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d1eb      	bne.n	8014c8e <__gethex+0x2ee>
 8014cb6:	e7d8      	b.n	8014c6a <__gethex+0x2ca>
 8014cb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d1d5      	bne.n	8014c6a <__gethex+0x2ca>
 8014cbe:	e7e6      	b.n	8014c8e <__gethex+0x2ee>
 8014cc0:	1e6f      	subs	r7, r5, #1
 8014cc2:	f1ba 0f00 	cmp.w	sl, #0
 8014cc6:	d131      	bne.n	8014d2c <__gethex+0x38c>
 8014cc8:	b127      	cbz	r7, 8014cd4 <__gethex+0x334>
 8014cca:	4639      	mov	r1, r7
 8014ccc:	4620      	mov	r0, r4
 8014cce:	f000 ff97 	bl	8015c00 <__any_on>
 8014cd2:	4682      	mov	sl, r0
 8014cd4:	117b      	asrs	r3, r7, #5
 8014cd6:	2101      	movs	r1, #1
 8014cd8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014cdc:	f007 071f 	and.w	r7, r7, #31
 8014ce0:	fa01 f707 	lsl.w	r7, r1, r7
 8014ce4:	421f      	tst	r7, r3
 8014ce6:	4629      	mov	r1, r5
 8014ce8:	4620      	mov	r0, r4
 8014cea:	bf18      	it	ne
 8014cec:	f04a 0a02 	orrne.w	sl, sl, #2
 8014cf0:	1b76      	subs	r6, r6, r5
 8014cf2:	f7ff fded 	bl	80148d0 <rshift>
 8014cf6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014cfa:	2702      	movs	r7, #2
 8014cfc:	f1ba 0f00 	cmp.w	sl, #0
 8014d00:	d048      	beq.n	8014d94 <__gethex+0x3f4>
 8014d02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014d06:	2b02      	cmp	r3, #2
 8014d08:	d015      	beq.n	8014d36 <__gethex+0x396>
 8014d0a:	2b03      	cmp	r3, #3
 8014d0c:	d017      	beq.n	8014d3e <__gethex+0x39e>
 8014d0e:	2b01      	cmp	r3, #1
 8014d10:	d109      	bne.n	8014d26 <__gethex+0x386>
 8014d12:	f01a 0f02 	tst.w	sl, #2
 8014d16:	d006      	beq.n	8014d26 <__gethex+0x386>
 8014d18:	f8d9 0000 	ldr.w	r0, [r9]
 8014d1c:	ea4a 0a00 	orr.w	sl, sl, r0
 8014d20:	f01a 0f01 	tst.w	sl, #1
 8014d24:	d10e      	bne.n	8014d44 <__gethex+0x3a4>
 8014d26:	f047 0710 	orr.w	r7, r7, #16
 8014d2a:	e033      	b.n	8014d94 <__gethex+0x3f4>
 8014d2c:	f04f 0a01 	mov.w	sl, #1
 8014d30:	e7d0      	b.n	8014cd4 <__gethex+0x334>
 8014d32:	2701      	movs	r7, #1
 8014d34:	e7e2      	b.n	8014cfc <__gethex+0x35c>
 8014d36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d38:	f1c3 0301 	rsb	r3, r3, #1
 8014d3c:	9315      	str	r3, [sp, #84]	; 0x54
 8014d3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d0f0      	beq.n	8014d26 <__gethex+0x386>
 8014d44:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014d48:	f104 0314 	add.w	r3, r4, #20
 8014d4c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014d50:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014d54:	f04f 0c00 	mov.w	ip, #0
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d5e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014d62:	d01c      	beq.n	8014d9e <__gethex+0x3fe>
 8014d64:	3201      	adds	r2, #1
 8014d66:	6002      	str	r2, [r0, #0]
 8014d68:	2f02      	cmp	r7, #2
 8014d6a:	f104 0314 	add.w	r3, r4, #20
 8014d6e:	d13f      	bne.n	8014df0 <__gethex+0x450>
 8014d70:	f8d8 2000 	ldr.w	r2, [r8]
 8014d74:	3a01      	subs	r2, #1
 8014d76:	42b2      	cmp	r2, r6
 8014d78:	d10a      	bne.n	8014d90 <__gethex+0x3f0>
 8014d7a:	1171      	asrs	r1, r6, #5
 8014d7c:	2201      	movs	r2, #1
 8014d7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014d82:	f006 061f 	and.w	r6, r6, #31
 8014d86:	fa02 f606 	lsl.w	r6, r2, r6
 8014d8a:	421e      	tst	r6, r3
 8014d8c:	bf18      	it	ne
 8014d8e:	4617      	movne	r7, r2
 8014d90:	f047 0720 	orr.w	r7, r7, #32
 8014d94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d96:	601c      	str	r4, [r3, #0]
 8014d98:	9b04      	ldr	r3, [sp, #16]
 8014d9a:	601d      	str	r5, [r3, #0]
 8014d9c:	e695      	b.n	8014aca <__gethex+0x12a>
 8014d9e:	4299      	cmp	r1, r3
 8014da0:	f843 cc04 	str.w	ip, [r3, #-4]
 8014da4:	d8d8      	bhi.n	8014d58 <__gethex+0x3b8>
 8014da6:	68a3      	ldr	r3, [r4, #8]
 8014da8:	459b      	cmp	fp, r3
 8014daa:	db19      	blt.n	8014de0 <__gethex+0x440>
 8014dac:	6861      	ldr	r1, [r4, #4]
 8014dae:	ee18 0a10 	vmov	r0, s16
 8014db2:	3101      	adds	r1, #1
 8014db4:	f000 fa8a 	bl	80152cc <_Balloc>
 8014db8:	4681      	mov	r9, r0
 8014dba:	b918      	cbnz	r0, 8014dc4 <__gethex+0x424>
 8014dbc:	4b1a      	ldr	r3, [pc, #104]	; (8014e28 <__gethex+0x488>)
 8014dbe:	4602      	mov	r2, r0
 8014dc0:	2184      	movs	r1, #132	; 0x84
 8014dc2:	e6a8      	b.n	8014b16 <__gethex+0x176>
 8014dc4:	6922      	ldr	r2, [r4, #16]
 8014dc6:	3202      	adds	r2, #2
 8014dc8:	f104 010c 	add.w	r1, r4, #12
 8014dcc:	0092      	lsls	r2, r2, #2
 8014dce:	300c      	adds	r0, #12
 8014dd0:	f7fb ffdc 	bl	8010d8c <memcpy>
 8014dd4:	4621      	mov	r1, r4
 8014dd6:	ee18 0a10 	vmov	r0, s16
 8014dda:	f000 fab7 	bl	801534c <_Bfree>
 8014dde:	464c      	mov	r4, r9
 8014de0:	6923      	ldr	r3, [r4, #16]
 8014de2:	1c5a      	adds	r2, r3, #1
 8014de4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014de8:	6122      	str	r2, [r4, #16]
 8014dea:	2201      	movs	r2, #1
 8014dec:	615a      	str	r2, [r3, #20]
 8014dee:	e7bb      	b.n	8014d68 <__gethex+0x3c8>
 8014df0:	6922      	ldr	r2, [r4, #16]
 8014df2:	455a      	cmp	r2, fp
 8014df4:	dd0b      	ble.n	8014e0e <__gethex+0x46e>
 8014df6:	2101      	movs	r1, #1
 8014df8:	4620      	mov	r0, r4
 8014dfa:	f7ff fd69 	bl	80148d0 <rshift>
 8014dfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014e02:	3501      	adds	r5, #1
 8014e04:	42ab      	cmp	r3, r5
 8014e06:	f6ff aed0 	blt.w	8014baa <__gethex+0x20a>
 8014e0a:	2701      	movs	r7, #1
 8014e0c:	e7c0      	b.n	8014d90 <__gethex+0x3f0>
 8014e0e:	f016 061f 	ands.w	r6, r6, #31
 8014e12:	d0fa      	beq.n	8014e0a <__gethex+0x46a>
 8014e14:	449a      	add	sl, r3
 8014e16:	f1c6 0620 	rsb	r6, r6, #32
 8014e1a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014e1e:	f000 fb4b 	bl	80154b8 <__hi0bits>
 8014e22:	42b0      	cmp	r0, r6
 8014e24:	dbe7      	blt.n	8014df6 <__gethex+0x456>
 8014e26:	e7f0      	b.n	8014e0a <__gethex+0x46a>
 8014e28:	08018ae5 	.word	0x08018ae5

08014e2c <L_shift>:
 8014e2c:	f1c2 0208 	rsb	r2, r2, #8
 8014e30:	0092      	lsls	r2, r2, #2
 8014e32:	b570      	push	{r4, r5, r6, lr}
 8014e34:	f1c2 0620 	rsb	r6, r2, #32
 8014e38:	6843      	ldr	r3, [r0, #4]
 8014e3a:	6804      	ldr	r4, [r0, #0]
 8014e3c:	fa03 f506 	lsl.w	r5, r3, r6
 8014e40:	432c      	orrs	r4, r5
 8014e42:	40d3      	lsrs	r3, r2
 8014e44:	6004      	str	r4, [r0, #0]
 8014e46:	f840 3f04 	str.w	r3, [r0, #4]!
 8014e4a:	4288      	cmp	r0, r1
 8014e4c:	d3f4      	bcc.n	8014e38 <L_shift+0xc>
 8014e4e:	bd70      	pop	{r4, r5, r6, pc}

08014e50 <__match>:
 8014e50:	b530      	push	{r4, r5, lr}
 8014e52:	6803      	ldr	r3, [r0, #0]
 8014e54:	3301      	adds	r3, #1
 8014e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e5a:	b914      	cbnz	r4, 8014e62 <__match+0x12>
 8014e5c:	6003      	str	r3, [r0, #0]
 8014e5e:	2001      	movs	r0, #1
 8014e60:	bd30      	pop	{r4, r5, pc}
 8014e62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014e6a:	2d19      	cmp	r5, #25
 8014e6c:	bf98      	it	ls
 8014e6e:	3220      	addls	r2, #32
 8014e70:	42a2      	cmp	r2, r4
 8014e72:	d0f0      	beq.n	8014e56 <__match+0x6>
 8014e74:	2000      	movs	r0, #0
 8014e76:	e7f3      	b.n	8014e60 <__match+0x10>

08014e78 <__hexnan>:
 8014e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e7c:	680b      	ldr	r3, [r1, #0]
 8014e7e:	6801      	ldr	r1, [r0, #0]
 8014e80:	115e      	asrs	r6, r3, #5
 8014e82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014e86:	f013 031f 	ands.w	r3, r3, #31
 8014e8a:	b087      	sub	sp, #28
 8014e8c:	bf18      	it	ne
 8014e8e:	3604      	addne	r6, #4
 8014e90:	2500      	movs	r5, #0
 8014e92:	1f37      	subs	r7, r6, #4
 8014e94:	4682      	mov	sl, r0
 8014e96:	4690      	mov	r8, r2
 8014e98:	9301      	str	r3, [sp, #4]
 8014e9a:	f846 5c04 	str.w	r5, [r6, #-4]
 8014e9e:	46b9      	mov	r9, r7
 8014ea0:	463c      	mov	r4, r7
 8014ea2:	9502      	str	r5, [sp, #8]
 8014ea4:	46ab      	mov	fp, r5
 8014ea6:	784a      	ldrb	r2, [r1, #1]
 8014ea8:	1c4b      	adds	r3, r1, #1
 8014eaa:	9303      	str	r3, [sp, #12]
 8014eac:	b342      	cbz	r2, 8014f00 <__hexnan+0x88>
 8014eae:	4610      	mov	r0, r2
 8014eb0:	9105      	str	r1, [sp, #20]
 8014eb2:	9204      	str	r2, [sp, #16]
 8014eb4:	f7ff fd5e 	bl	8014974 <__hexdig_fun>
 8014eb8:	2800      	cmp	r0, #0
 8014eba:	d14f      	bne.n	8014f5c <__hexnan+0xe4>
 8014ebc:	9a04      	ldr	r2, [sp, #16]
 8014ebe:	9905      	ldr	r1, [sp, #20]
 8014ec0:	2a20      	cmp	r2, #32
 8014ec2:	d818      	bhi.n	8014ef6 <__hexnan+0x7e>
 8014ec4:	9b02      	ldr	r3, [sp, #8]
 8014ec6:	459b      	cmp	fp, r3
 8014ec8:	dd13      	ble.n	8014ef2 <__hexnan+0x7a>
 8014eca:	454c      	cmp	r4, r9
 8014ecc:	d206      	bcs.n	8014edc <__hexnan+0x64>
 8014ece:	2d07      	cmp	r5, #7
 8014ed0:	dc04      	bgt.n	8014edc <__hexnan+0x64>
 8014ed2:	462a      	mov	r2, r5
 8014ed4:	4649      	mov	r1, r9
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	f7ff ffa8 	bl	8014e2c <L_shift>
 8014edc:	4544      	cmp	r4, r8
 8014ede:	d950      	bls.n	8014f82 <__hexnan+0x10a>
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	f1a4 0904 	sub.w	r9, r4, #4
 8014ee6:	f844 3c04 	str.w	r3, [r4, #-4]
 8014eea:	f8cd b008 	str.w	fp, [sp, #8]
 8014eee:	464c      	mov	r4, r9
 8014ef0:	461d      	mov	r5, r3
 8014ef2:	9903      	ldr	r1, [sp, #12]
 8014ef4:	e7d7      	b.n	8014ea6 <__hexnan+0x2e>
 8014ef6:	2a29      	cmp	r2, #41	; 0x29
 8014ef8:	d156      	bne.n	8014fa8 <__hexnan+0x130>
 8014efa:	3102      	adds	r1, #2
 8014efc:	f8ca 1000 	str.w	r1, [sl]
 8014f00:	f1bb 0f00 	cmp.w	fp, #0
 8014f04:	d050      	beq.n	8014fa8 <__hexnan+0x130>
 8014f06:	454c      	cmp	r4, r9
 8014f08:	d206      	bcs.n	8014f18 <__hexnan+0xa0>
 8014f0a:	2d07      	cmp	r5, #7
 8014f0c:	dc04      	bgt.n	8014f18 <__hexnan+0xa0>
 8014f0e:	462a      	mov	r2, r5
 8014f10:	4649      	mov	r1, r9
 8014f12:	4620      	mov	r0, r4
 8014f14:	f7ff ff8a 	bl	8014e2c <L_shift>
 8014f18:	4544      	cmp	r4, r8
 8014f1a:	d934      	bls.n	8014f86 <__hexnan+0x10e>
 8014f1c:	f1a8 0204 	sub.w	r2, r8, #4
 8014f20:	4623      	mov	r3, r4
 8014f22:	f853 1b04 	ldr.w	r1, [r3], #4
 8014f26:	f842 1f04 	str.w	r1, [r2, #4]!
 8014f2a:	429f      	cmp	r7, r3
 8014f2c:	d2f9      	bcs.n	8014f22 <__hexnan+0xaa>
 8014f2e:	1b3b      	subs	r3, r7, r4
 8014f30:	f023 0303 	bic.w	r3, r3, #3
 8014f34:	3304      	adds	r3, #4
 8014f36:	3401      	adds	r4, #1
 8014f38:	3e03      	subs	r6, #3
 8014f3a:	42b4      	cmp	r4, r6
 8014f3c:	bf88      	it	hi
 8014f3e:	2304      	movhi	r3, #4
 8014f40:	4443      	add	r3, r8
 8014f42:	2200      	movs	r2, #0
 8014f44:	f843 2b04 	str.w	r2, [r3], #4
 8014f48:	429f      	cmp	r7, r3
 8014f4a:	d2fb      	bcs.n	8014f44 <__hexnan+0xcc>
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	b91b      	cbnz	r3, 8014f58 <__hexnan+0xe0>
 8014f50:	4547      	cmp	r7, r8
 8014f52:	d127      	bne.n	8014fa4 <__hexnan+0x12c>
 8014f54:	2301      	movs	r3, #1
 8014f56:	603b      	str	r3, [r7, #0]
 8014f58:	2005      	movs	r0, #5
 8014f5a:	e026      	b.n	8014faa <__hexnan+0x132>
 8014f5c:	3501      	adds	r5, #1
 8014f5e:	2d08      	cmp	r5, #8
 8014f60:	f10b 0b01 	add.w	fp, fp, #1
 8014f64:	dd06      	ble.n	8014f74 <__hexnan+0xfc>
 8014f66:	4544      	cmp	r4, r8
 8014f68:	d9c3      	bls.n	8014ef2 <__hexnan+0x7a>
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	f844 3c04 	str.w	r3, [r4, #-4]
 8014f70:	2501      	movs	r5, #1
 8014f72:	3c04      	subs	r4, #4
 8014f74:	6822      	ldr	r2, [r4, #0]
 8014f76:	f000 000f 	and.w	r0, r0, #15
 8014f7a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014f7e:	6022      	str	r2, [r4, #0]
 8014f80:	e7b7      	b.n	8014ef2 <__hexnan+0x7a>
 8014f82:	2508      	movs	r5, #8
 8014f84:	e7b5      	b.n	8014ef2 <__hexnan+0x7a>
 8014f86:	9b01      	ldr	r3, [sp, #4]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d0df      	beq.n	8014f4c <__hexnan+0xd4>
 8014f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8014f90:	f1c3 0320 	rsb	r3, r3, #32
 8014f94:	fa22 f303 	lsr.w	r3, r2, r3
 8014f98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014f9c:	401a      	ands	r2, r3
 8014f9e:	f846 2c04 	str.w	r2, [r6, #-4]
 8014fa2:	e7d3      	b.n	8014f4c <__hexnan+0xd4>
 8014fa4:	3f04      	subs	r7, #4
 8014fa6:	e7d1      	b.n	8014f4c <__hexnan+0xd4>
 8014fa8:	2004      	movs	r0, #4
 8014faa:	b007      	add	sp, #28
 8014fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014fb0 <_findenv_r>:
 8014fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fb4:	4607      	mov	r7, r0
 8014fb6:	4689      	mov	r9, r1
 8014fb8:	4616      	mov	r6, r2
 8014fba:	f001 fce7 	bl	801698c <__env_lock>
 8014fbe:	4b18      	ldr	r3, [pc, #96]	; (8015020 <_findenv_r+0x70>)
 8014fc0:	681c      	ldr	r4, [r3, #0]
 8014fc2:	469a      	mov	sl, r3
 8014fc4:	b134      	cbz	r4, 8014fd4 <_findenv_r+0x24>
 8014fc6:	464b      	mov	r3, r9
 8014fc8:	4698      	mov	r8, r3
 8014fca:	f813 1b01 	ldrb.w	r1, [r3], #1
 8014fce:	b139      	cbz	r1, 8014fe0 <_findenv_r+0x30>
 8014fd0:	293d      	cmp	r1, #61	; 0x3d
 8014fd2:	d1f9      	bne.n	8014fc8 <_findenv_r+0x18>
 8014fd4:	4638      	mov	r0, r7
 8014fd6:	f001 fcdf 	bl	8016998 <__env_unlock>
 8014fda:	2000      	movs	r0, #0
 8014fdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fe0:	eba8 0809 	sub.w	r8, r8, r9
 8014fe4:	46a3      	mov	fp, r4
 8014fe6:	f854 0b04 	ldr.w	r0, [r4], #4
 8014fea:	2800      	cmp	r0, #0
 8014fec:	d0f2      	beq.n	8014fd4 <_findenv_r+0x24>
 8014fee:	4642      	mov	r2, r8
 8014ff0:	4649      	mov	r1, r9
 8014ff2:	f7fd fa88 	bl	8012506 <strncmp>
 8014ff6:	2800      	cmp	r0, #0
 8014ff8:	d1f4      	bne.n	8014fe4 <_findenv_r+0x34>
 8014ffa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014ffe:	eb03 0508 	add.w	r5, r3, r8
 8015002:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015006:	2b3d      	cmp	r3, #61	; 0x3d
 8015008:	d1ec      	bne.n	8014fe4 <_findenv_r+0x34>
 801500a:	f8da 3000 	ldr.w	r3, [sl]
 801500e:	ebab 0303 	sub.w	r3, fp, r3
 8015012:	109b      	asrs	r3, r3, #2
 8015014:	4638      	mov	r0, r7
 8015016:	6033      	str	r3, [r6, #0]
 8015018:	f001 fcbe 	bl	8016998 <__env_unlock>
 801501c:	1c68      	adds	r0, r5, #1
 801501e:	e7dd      	b.n	8014fdc <_findenv_r+0x2c>
 8015020:	20000000 	.word	0x20000000

08015024 <_getenv_r>:
 8015024:	b507      	push	{r0, r1, r2, lr}
 8015026:	aa01      	add	r2, sp, #4
 8015028:	f7ff ffc2 	bl	8014fb0 <_findenv_r>
 801502c:	b003      	add	sp, #12
 801502e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015034 <__gettzinfo>:
 8015034:	4800      	ldr	r0, [pc, #0]	; (8015038 <__gettzinfo+0x4>)
 8015036:	4770      	bx	lr
 8015038:	200000b0 	.word	0x200000b0

0801503c <gmtime_r>:
 801503c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015040:	e9d0 6700 	ldrd	r6, r7, [r0]
 8015044:	460c      	mov	r4, r1
 8015046:	4a51      	ldr	r2, [pc, #324]	; (801518c <gmtime_r+0x150>)
 8015048:	2300      	movs	r3, #0
 801504a:	4630      	mov	r0, r6
 801504c:	4639      	mov	r1, r7
 801504e:	f7eb fe3b 	bl	8000cc8 <__aeabi_ldivmod>
 8015052:	4639      	mov	r1, r7
 8015054:	4605      	mov	r5, r0
 8015056:	4a4d      	ldr	r2, [pc, #308]	; (801518c <gmtime_r+0x150>)
 8015058:	4630      	mov	r0, r6
 801505a:	2300      	movs	r3, #0
 801505c:	f7eb fe34 	bl	8000cc8 <__aeabi_ldivmod>
 8015060:	2a00      	cmp	r2, #0
 8015062:	bfbc      	itt	lt
 8015064:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8015068:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801506c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015070:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8015074:	fbb2 f3f1 	udiv	r3, r2, r1
 8015078:	fb01 2213 	mls	r2, r1, r3, r2
 801507c:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8015080:	bfac      	ite	ge
 8015082:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8015086:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801508a:	60a3      	str	r3, [r4, #8]
 801508c:	fbb2 f3f1 	udiv	r3, r2, r1
 8015090:	fb01 2213 	mls	r2, r1, r3, r2
 8015094:	6063      	str	r3, [r4, #4]
 8015096:	6022      	str	r2, [r4, #0]
 8015098:	1cc3      	adds	r3, r0, #3
 801509a:	2207      	movs	r2, #7
 801509c:	fb93 f2f2 	sdiv	r2, r3, r2
 80150a0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80150a4:	1a9b      	subs	r3, r3, r2
 80150a6:	bf48      	it	mi
 80150a8:	3307      	addmi	r3, #7
 80150aa:	2800      	cmp	r0, #0
 80150ac:	61a3      	str	r3, [r4, #24]
 80150ae:	bfb8      	it	lt
 80150b0:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80150b4:	4936      	ldr	r1, [pc, #216]	; (8015190 <gmtime_r+0x154>)
 80150b6:	bfae      	itee	ge
 80150b8:	fb90 f1f1 	sdivge	r1, r0, r1
 80150bc:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80150c0:	fb93 f1f1 	sdivlt	r1, r3, r1
 80150c4:	4b33      	ldr	r3, [pc, #204]	; (8015194 <gmtime_r+0x158>)
 80150c6:	fb03 0001 	mla	r0, r3, r1, r0
 80150ca:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80150ce:	fbb0 f2f2 	udiv	r2, r0, r2
 80150d2:	4402      	add	r2, r0
 80150d4:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80150d8:	fbb0 f3fc 	udiv	r3, r0, ip
 80150dc:	1ad2      	subs	r2, r2, r3
 80150de:	f240 176d 	movw	r7, #365	; 0x16d
 80150e2:	4b2d      	ldr	r3, [pc, #180]	; (8015198 <gmtime_r+0x15c>)
 80150e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80150e8:	2664      	movs	r6, #100	; 0x64
 80150ea:	1ad3      	subs	r3, r2, r3
 80150ec:	fbb3 f5f7 	udiv	r5, r3, r7
 80150f0:	fbb3 f3fc 	udiv	r3, r3, ip
 80150f4:	fbb5 f2f6 	udiv	r2, r5, r6
 80150f8:	1ad3      	subs	r3, r2, r3
 80150fa:	4403      	add	r3, r0
 80150fc:	fb07 3315 	mls	r3, r7, r5, r3
 8015100:	2099      	movs	r0, #153	; 0x99
 8015102:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8015106:	f10c 0c02 	add.w	ip, ip, #2
 801510a:	f103 0e01 	add.w	lr, r3, #1
 801510e:	fbbc f7f0 	udiv	r7, ip, r0
 8015112:	4378      	muls	r0, r7
 8015114:	3002      	adds	r0, #2
 8015116:	f04f 0805 	mov.w	r8, #5
 801511a:	fbb0 f0f8 	udiv	r0, r0, r8
 801511e:	ebae 0000 	sub.w	r0, lr, r0
 8015122:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8015126:	45f4      	cmp	ip, lr
 8015128:	bf94      	ite	ls
 801512a:	f04f 0c02 	movls.w	ip, #2
 801512e:	f06f 0c09 	mvnhi.w	ip, #9
 8015132:	4467      	add	r7, ip
 8015134:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8015138:	fb0c 5101 	mla	r1, ip, r1, r5
 801513c:	2f01      	cmp	r7, #1
 801513e:	bf98      	it	ls
 8015140:	3101      	addls	r1, #1
 8015142:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8015146:	d30c      	bcc.n	8015162 <gmtime_r+0x126>
 8015148:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801514c:	61e3      	str	r3, [r4, #28]
 801514e:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8015152:	2300      	movs	r3, #0
 8015154:	60e0      	str	r0, [r4, #12]
 8015156:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801515a:	6223      	str	r3, [r4, #32]
 801515c:	4620      	mov	r0, r4
 801515e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015162:	f015 0f03 	tst.w	r5, #3
 8015166:	d102      	bne.n	801516e <gmtime_r+0x132>
 8015168:	fb06 5212 	mls	r2, r6, r2, r5
 801516c:	b95a      	cbnz	r2, 8015186 <gmtime_r+0x14a>
 801516e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8015172:	fbb5 f2f6 	udiv	r2, r5, r6
 8015176:	fb06 5212 	mls	r2, r6, r2, r5
 801517a:	fab2 f282 	clz	r2, r2
 801517e:	0952      	lsrs	r2, r2, #5
 8015180:	333b      	adds	r3, #59	; 0x3b
 8015182:	4413      	add	r3, r2
 8015184:	e7e2      	b.n	801514c <gmtime_r+0x110>
 8015186:	2201      	movs	r2, #1
 8015188:	e7fa      	b.n	8015180 <gmtime_r+0x144>
 801518a:	bf00      	nop
 801518c:	00015180 	.word	0x00015180
 8015190:	00023ab1 	.word	0x00023ab1
 8015194:	fffdc54f 	.word	0xfffdc54f
 8015198:	00023ab0 	.word	0x00023ab0

0801519c <_localeconv_r>:
 801519c:	4800      	ldr	r0, [pc, #0]	; (80151a0 <_localeconv_r+0x4>)
 801519e:	4770      	bx	lr
 80151a0:	200001fc 	.word	0x200001fc

080151a4 <_lseek_r>:
 80151a4:	b538      	push	{r3, r4, r5, lr}
 80151a6:	4d07      	ldr	r5, [pc, #28]	; (80151c4 <_lseek_r+0x20>)
 80151a8:	4604      	mov	r4, r0
 80151aa:	4608      	mov	r0, r1
 80151ac:	4611      	mov	r1, r2
 80151ae:	2200      	movs	r2, #0
 80151b0:	602a      	str	r2, [r5, #0]
 80151b2:	461a      	mov	r2, r3
 80151b4:	f7ed ffe8 	bl	8003188 <_lseek>
 80151b8:	1c43      	adds	r3, r0, #1
 80151ba:	d102      	bne.n	80151c2 <_lseek_r+0x1e>
 80151bc:	682b      	ldr	r3, [r5, #0]
 80151be:	b103      	cbz	r3, 80151c2 <_lseek_r+0x1e>
 80151c0:	6023      	str	r3, [r4, #0]
 80151c2:	bd38      	pop	{r3, r4, r5, pc}
 80151c4:	20006190 	.word	0x20006190

080151c8 <__swhatbuf_r>:
 80151c8:	b570      	push	{r4, r5, r6, lr}
 80151ca:	460e      	mov	r6, r1
 80151cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151d0:	2900      	cmp	r1, #0
 80151d2:	b096      	sub	sp, #88	; 0x58
 80151d4:	4614      	mov	r4, r2
 80151d6:	461d      	mov	r5, r3
 80151d8:	da07      	bge.n	80151ea <__swhatbuf_r+0x22>
 80151da:	2300      	movs	r3, #0
 80151dc:	602b      	str	r3, [r5, #0]
 80151de:	89b3      	ldrh	r3, [r6, #12]
 80151e0:	061a      	lsls	r2, r3, #24
 80151e2:	d410      	bmi.n	8015206 <__swhatbuf_r+0x3e>
 80151e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80151e8:	e00e      	b.n	8015208 <__swhatbuf_r+0x40>
 80151ea:	466a      	mov	r2, sp
 80151ec:	f001 fbda 	bl	80169a4 <_fstat_r>
 80151f0:	2800      	cmp	r0, #0
 80151f2:	dbf2      	blt.n	80151da <__swhatbuf_r+0x12>
 80151f4:	9a01      	ldr	r2, [sp, #4]
 80151f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80151fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80151fe:	425a      	negs	r2, r3
 8015200:	415a      	adcs	r2, r3
 8015202:	602a      	str	r2, [r5, #0]
 8015204:	e7ee      	b.n	80151e4 <__swhatbuf_r+0x1c>
 8015206:	2340      	movs	r3, #64	; 0x40
 8015208:	2000      	movs	r0, #0
 801520a:	6023      	str	r3, [r4, #0]
 801520c:	b016      	add	sp, #88	; 0x58
 801520e:	bd70      	pop	{r4, r5, r6, pc}

08015210 <__smakebuf_r>:
 8015210:	898b      	ldrh	r3, [r1, #12]
 8015212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015214:	079d      	lsls	r5, r3, #30
 8015216:	4606      	mov	r6, r0
 8015218:	460c      	mov	r4, r1
 801521a:	d507      	bpl.n	801522c <__smakebuf_r+0x1c>
 801521c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015220:	6023      	str	r3, [r4, #0]
 8015222:	6123      	str	r3, [r4, #16]
 8015224:	2301      	movs	r3, #1
 8015226:	6163      	str	r3, [r4, #20]
 8015228:	b002      	add	sp, #8
 801522a:	bd70      	pop	{r4, r5, r6, pc}
 801522c:	ab01      	add	r3, sp, #4
 801522e:	466a      	mov	r2, sp
 8015230:	f7ff ffca 	bl	80151c8 <__swhatbuf_r>
 8015234:	9900      	ldr	r1, [sp, #0]
 8015236:	4605      	mov	r5, r0
 8015238:	4630      	mov	r0, r6
 801523a:	f7fc f8a5 	bl	8011388 <_malloc_r>
 801523e:	b948      	cbnz	r0, 8015254 <__smakebuf_r+0x44>
 8015240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015244:	059a      	lsls	r2, r3, #22
 8015246:	d4ef      	bmi.n	8015228 <__smakebuf_r+0x18>
 8015248:	f023 0303 	bic.w	r3, r3, #3
 801524c:	f043 0302 	orr.w	r3, r3, #2
 8015250:	81a3      	strh	r3, [r4, #12]
 8015252:	e7e3      	b.n	801521c <__smakebuf_r+0xc>
 8015254:	4b0d      	ldr	r3, [pc, #52]	; (801528c <__smakebuf_r+0x7c>)
 8015256:	62b3      	str	r3, [r6, #40]	; 0x28
 8015258:	89a3      	ldrh	r3, [r4, #12]
 801525a:	6020      	str	r0, [r4, #0]
 801525c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015260:	81a3      	strh	r3, [r4, #12]
 8015262:	9b00      	ldr	r3, [sp, #0]
 8015264:	6163      	str	r3, [r4, #20]
 8015266:	9b01      	ldr	r3, [sp, #4]
 8015268:	6120      	str	r0, [r4, #16]
 801526a:	b15b      	cbz	r3, 8015284 <__smakebuf_r+0x74>
 801526c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015270:	4630      	mov	r0, r6
 8015272:	f001 fba9 	bl	80169c8 <_isatty_r>
 8015276:	b128      	cbz	r0, 8015284 <__smakebuf_r+0x74>
 8015278:	89a3      	ldrh	r3, [r4, #12]
 801527a:	f023 0303 	bic.w	r3, r3, #3
 801527e:	f043 0301 	orr.w	r3, r3, #1
 8015282:	81a3      	strh	r3, [r4, #12]
 8015284:	89a0      	ldrh	r0, [r4, #12]
 8015286:	4305      	orrs	r5, r0
 8015288:	81a5      	strh	r5, [r4, #12]
 801528a:	e7cd      	b.n	8015228 <__smakebuf_r+0x18>
 801528c:	0801093d 	.word	0x0801093d

08015290 <__ascii_mbtowc>:
 8015290:	b082      	sub	sp, #8
 8015292:	b901      	cbnz	r1, 8015296 <__ascii_mbtowc+0x6>
 8015294:	a901      	add	r1, sp, #4
 8015296:	b142      	cbz	r2, 80152aa <__ascii_mbtowc+0x1a>
 8015298:	b14b      	cbz	r3, 80152ae <__ascii_mbtowc+0x1e>
 801529a:	7813      	ldrb	r3, [r2, #0]
 801529c:	600b      	str	r3, [r1, #0]
 801529e:	7812      	ldrb	r2, [r2, #0]
 80152a0:	1e10      	subs	r0, r2, #0
 80152a2:	bf18      	it	ne
 80152a4:	2001      	movne	r0, #1
 80152a6:	b002      	add	sp, #8
 80152a8:	4770      	bx	lr
 80152aa:	4610      	mov	r0, r2
 80152ac:	e7fb      	b.n	80152a6 <__ascii_mbtowc+0x16>
 80152ae:	f06f 0001 	mvn.w	r0, #1
 80152b2:	e7f8      	b.n	80152a6 <__ascii_mbtowc+0x16>

080152b4 <__malloc_lock>:
 80152b4:	4801      	ldr	r0, [pc, #4]	; (80152bc <__malloc_lock+0x8>)
 80152b6:	f7fb bd55 	b.w	8010d64 <__retarget_lock_acquire_recursive>
 80152ba:	bf00      	nop
 80152bc:	20006188 	.word	0x20006188

080152c0 <__malloc_unlock>:
 80152c0:	4801      	ldr	r0, [pc, #4]	; (80152c8 <__malloc_unlock+0x8>)
 80152c2:	f7fb bd51 	b.w	8010d68 <__retarget_lock_release_recursive>
 80152c6:	bf00      	nop
 80152c8:	20006188 	.word	0x20006188

080152cc <_Balloc>:
 80152cc:	b570      	push	{r4, r5, r6, lr}
 80152ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80152d0:	4604      	mov	r4, r0
 80152d2:	460d      	mov	r5, r1
 80152d4:	b976      	cbnz	r6, 80152f4 <_Balloc+0x28>
 80152d6:	2010      	movs	r0, #16
 80152d8:	f7fb fd48 	bl	8010d6c <malloc>
 80152dc:	4602      	mov	r2, r0
 80152de:	6260      	str	r0, [r4, #36]	; 0x24
 80152e0:	b920      	cbnz	r0, 80152ec <_Balloc+0x20>
 80152e2:	4b18      	ldr	r3, [pc, #96]	; (8015344 <_Balloc+0x78>)
 80152e4:	4818      	ldr	r0, [pc, #96]	; (8015348 <_Balloc+0x7c>)
 80152e6:	2166      	movs	r1, #102	; 0x66
 80152e8:	f7fe fb64 	bl	80139b4 <__assert_func>
 80152ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80152f0:	6006      	str	r6, [r0, #0]
 80152f2:	60c6      	str	r6, [r0, #12]
 80152f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80152f6:	68f3      	ldr	r3, [r6, #12]
 80152f8:	b183      	cbz	r3, 801531c <_Balloc+0x50>
 80152fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152fc:	68db      	ldr	r3, [r3, #12]
 80152fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015302:	b9b8      	cbnz	r0, 8015334 <_Balloc+0x68>
 8015304:	2101      	movs	r1, #1
 8015306:	fa01 f605 	lsl.w	r6, r1, r5
 801530a:	1d72      	adds	r2, r6, #5
 801530c:	0092      	lsls	r2, r2, #2
 801530e:	4620      	mov	r0, r4
 8015310:	f000 fc97 	bl	8015c42 <_calloc_r>
 8015314:	b160      	cbz	r0, 8015330 <_Balloc+0x64>
 8015316:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801531a:	e00e      	b.n	801533a <_Balloc+0x6e>
 801531c:	2221      	movs	r2, #33	; 0x21
 801531e:	2104      	movs	r1, #4
 8015320:	4620      	mov	r0, r4
 8015322:	f000 fc8e 	bl	8015c42 <_calloc_r>
 8015326:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015328:	60f0      	str	r0, [r6, #12]
 801532a:	68db      	ldr	r3, [r3, #12]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d1e4      	bne.n	80152fa <_Balloc+0x2e>
 8015330:	2000      	movs	r0, #0
 8015332:	bd70      	pop	{r4, r5, r6, pc}
 8015334:	6802      	ldr	r2, [r0, #0]
 8015336:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801533a:	2300      	movs	r3, #0
 801533c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015340:	e7f7      	b.n	8015332 <_Balloc+0x66>
 8015342:	bf00      	nop
 8015344:	0801873c 	.word	0x0801873c
 8015348:	08018b74 	.word	0x08018b74

0801534c <_Bfree>:
 801534c:	b570      	push	{r4, r5, r6, lr}
 801534e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015350:	4605      	mov	r5, r0
 8015352:	460c      	mov	r4, r1
 8015354:	b976      	cbnz	r6, 8015374 <_Bfree+0x28>
 8015356:	2010      	movs	r0, #16
 8015358:	f7fb fd08 	bl	8010d6c <malloc>
 801535c:	4602      	mov	r2, r0
 801535e:	6268      	str	r0, [r5, #36]	; 0x24
 8015360:	b920      	cbnz	r0, 801536c <_Bfree+0x20>
 8015362:	4b09      	ldr	r3, [pc, #36]	; (8015388 <_Bfree+0x3c>)
 8015364:	4809      	ldr	r0, [pc, #36]	; (801538c <_Bfree+0x40>)
 8015366:	218a      	movs	r1, #138	; 0x8a
 8015368:	f7fe fb24 	bl	80139b4 <__assert_func>
 801536c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015370:	6006      	str	r6, [r0, #0]
 8015372:	60c6      	str	r6, [r0, #12]
 8015374:	b13c      	cbz	r4, 8015386 <_Bfree+0x3a>
 8015376:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015378:	6862      	ldr	r2, [r4, #4]
 801537a:	68db      	ldr	r3, [r3, #12]
 801537c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015380:	6021      	str	r1, [r4, #0]
 8015382:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015386:	bd70      	pop	{r4, r5, r6, pc}
 8015388:	0801873c 	.word	0x0801873c
 801538c:	08018b74 	.word	0x08018b74

08015390 <__multadd>:
 8015390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015394:	690e      	ldr	r6, [r1, #16]
 8015396:	4607      	mov	r7, r0
 8015398:	4698      	mov	r8, r3
 801539a:	460c      	mov	r4, r1
 801539c:	f101 0014 	add.w	r0, r1, #20
 80153a0:	2300      	movs	r3, #0
 80153a2:	6805      	ldr	r5, [r0, #0]
 80153a4:	b2a9      	uxth	r1, r5
 80153a6:	fb02 8101 	mla	r1, r2, r1, r8
 80153aa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80153ae:	0c2d      	lsrs	r5, r5, #16
 80153b0:	fb02 c505 	mla	r5, r2, r5, ip
 80153b4:	b289      	uxth	r1, r1
 80153b6:	3301      	adds	r3, #1
 80153b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80153bc:	429e      	cmp	r6, r3
 80153be:	f840 1b04 	str.w	r1, [r0], #4
 80153c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80153c6:	dcec      	bgt.n	80153a2 <__multadd+0x12>
 80153c8:	f1b8 0f00 	cmp.w	r8, #0
 80153cc:	d022      	beq.n	8015414 <__multadd+0x84>
 80153ce:	68a3      	ldr	r3, [r4, #8]
 80153d0:	42b3      	cmp	r3, r6
 80153d2:	dc19      	bgt.n	8015408 <__multadd+0x78>
 80153d4:	6861      	ldr	r1, [r4, #4]
 80153d6:	4638      	mov	r0, r7
 80153d8:	3101      	adds	r1, #1
 80153da:	f7ff ff77 	bl	80152cc <_Balloc>
 80153de:	4605      	mov	r5, r0
 80153e0:	b928      	cbnz	r0, 80153ee <__multadd+0x5e>
 80153e2:	4602      	mov	r2, r0
 80153e4:	4b0d      	ldr	r3, [pc, #52]	; (801541c <__multadd+0x8c>)
 80153e6:	480e      	ldr	r0, [pc, #56]	; (8015420 <__multadd+0x90>)
 80153e8:	21b5      	movs	r1, #181	; 0xb5
 80153ea:	f7fe fae3 	bl	80139b4 <__assert_func>
 80153ee:	6922      	ldr	r2, [r4, #16]
 80153f0:	3202      	adds	r2, #2
 80153f2:	f104 010c 	add.w	r1, r4, #12
 80153f6:	0092      	lsls	r2, r2, #2
 80153f8:	300c      	adds	r0, #12
 80153fa:	f7fb fcc7 	bl	8010d8c <memcpy>
 80153fe:	4621      	mov	r1, r4
 8015400:	4638      	mov	r0, r7
 8015402:	f7ff ffa3 	bl	801534c <_Bfree>
 8015406:	462c      	mov	r4, r5
 8015408:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801540c:	3601      	adds	r6, #1
 801540e:	f8c3 8014 	str.w	r8, [r3, #20]
 8015412:	6126      	str	r6, [r4, #16]
 8015414:	4620      	mov	r0, r4
 8015416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801541a:	bf00      	nop
 801541c:	08018ae5 	.word	0x08018ae5
 8015420:	08018b74 	.word	0x08018b74

08015424 <__s2b>:
 8015424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015428:	460c      	mov	r4, r1
 801542a:	4615      	mov	r5, r2
 801542c:	461f      	mov	r7, r3
 801542e:	2209      	movs	r2, #9
 8015430:	3308      	adds	r3, #8
 8015432:	4606      	mov	r6, r0
 8015434:	fb93 f3f2 	sdiv	r3, r3, r2
 8015438:	2100      	movs	r1, #0
 801543a:	2201      	movs	r2, #1
 801543c:	429a      	cmp	r2, r3
 801543e:	db09      	blt.n	8015454 <__s2b+0x30>
 8015440:	4630      	mov	r0, r6
 8015442:	f7ff ff43 	bl	80152cc <_Balloc>
 8015446:	b940      	cbnz	r0, 801545a <__s2b+0x36>
 8015448:	4602      	mov	r2, r0
 801544a:	4b19      	ldr	r3, [pc, #100]	; (80154b0 <__s2b+0x8c>)
 801544c:	4819      	ldr	r0, [pc, #100]	; (80154b4 <__s2b+0x90>)
 801544e:	21ce      	movs	r1, #206	; 0xce
 8015450:	f7fe fab0 	bl	80139b4 <__assert_func>
 8015454:	0052      	lsls	r2, r2, #1
 8015456:	3101      	adds	r1, #1
 8015458:	e7f0      	b.n	801543c <__s2b+0x18>
 801545a:	9b08      	ldr	r3, [sp, #32]
 801545c:	6143      	str	r3, [r0, #20]
 801545e:	2d09      	cmp	r5, #9
 8015460:	f04f 0301 	mov.w	r3, #1
 8015464:	6103      	str	r3, [r0, #16]
 8015466:	dd16      	ble.n	8015496 <__s2b+0x72>
 8015468:	f104 0909 	add.w	r9, r4, #9
 801546c:	46c8      	mov	r8, r9
 801546e:	442c      	add	r4, r5
 8015470:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015474:	4601      	mov	r1, r0
 8015476:	3b30      	subs	r3, #48	; 0x30
 8015478:	220a      	movs	r2, #10
 801547a:	4630      	mov	r0, r6
 801547c:	f7ff ff88 	bl	8015390 <__multadd>
 8015480:	45a0      	cmp	r8, r4
 8015482:	d1f5      	bne.n	8015470 <__s2b+0x4c>
 8015484:	f1a5 0408 	sub.w	r4, r5, #8
 8015488:	444c      	add	r4, r9
 801548a:	1b2d      	subs	r5, r5, r4
 801548c:	1963      	adds	r3, r4, r5
 801548e:	42bb      	cmp	r3, r7
 8015490:	db04      	blt.n	801549c <__s2b+0x78>
 8015492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015496:	340a      	adds	r4, #10
 8015498:	2509      	movs	r5, #9
 801549a:	e7f6      	b.n	801548a <__s2b+0x66>
 801549c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80154a0:	4601      	mov	r1, r0
 80154a2:	3b30      	subs	r3, #48	; 0x30
 80154a4:	220a      	movs	r2, #10
 80154a6:	4630      	mov	r0, r6
 80154a8:	f7ff ff72 	bl	8015390 <__multadd>
 80154ac:	e7ee      	b.n	801548c <__s2b+0x68>
 80154ae:	bf00      	nop
 80154b0:	08018ae5 	.word	0x08018ae5
 80154b4:	08018b74 	.word	0x08018b74

080154b8 <__hi0bits>:
 80154b8:	0c03      	lsrs	r3, r0, #16
 80154ba:	041b      	lsls	r3, r3, #16
 80154bc:	b9d3      	cbnz	r3, 80154f4 <__hi0bits+0x3c>
 80154be:	0400      	lsls	r0, r0, #16
 80154c0:	2310      	movs	r3, #16
 80154c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80154c6:	bf04      	itt	eq
 80154c8:	0200      	lsleq	r0, r0, #8
 80154ca:	3308      	addeq	r3, #8
 80154cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80154d0:	bf04      	itt	eq
 80154d2:	0100      	lsleq	r0, r0, #4
 80154d4:	3304      	addeq	r3, #4
 80154d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80154da:	bf04      	itt	eq
 80154dc:	0080      	lsleq	r0, r0, #2
 80154de:	3302      	addeq	r3, #2
 80154e0:	2800      	cmp	r0, #0
 80154e2:	db05      	blt.n	80154f0 <__hi0bits+0x38>
 80154e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80154e8:	f103 0301 	add.w	r3, r3, #1
 80154ec:	bf08      	it	eq
 80154ee:	2320      	moveq	r3, #32
 80154f0:	4618      	mov	r0, r3
 80154f2:	4770      	bx	lr
 80154f4:	2300      	movs	r3, #0
 80154f6:	e7e4      	b.n	80154c2 <__hi0bits+0xa>

080154f8 <__lo0bits>:
 80154f8:	6803      	ldr	r3, [r0, #0]
 80154fa:	f013 0207 	ands.w	r2, r3, #7
 80154fe:	4601      	mov	r1, r0
 8015500:	d00b      	beq.n	801551a <__lo0bits+0x22>
 8015502:	07da      	lsls	r2, r3, #31
 8015504:	d424      	bmi.n	8015550 <__lo0bits+0x58>
 8015506:	0798      	lsls	r0, r3, #30
 8015508:	bf49      	itett	mi
 801550a:	085b      	lsrmi	r3, r3, #1
 801550c:	089b      	lsrpl	r3, r3, #2
 801550e:	2001      	movmi	r0, #1
 8015510:	600b      	strmi	r3, [r1, #0]
 8015512:	bf5c      	itt	pl
 8015514:	600b      	strpl	r3, [r1, #0]
 8015516:	2002      	movpl	r0, #2
 8015518:	4770      	bx	lr
 801551a:	b298      	uxth	r0, r3
 801551c:	b9b0      	cbnz	r0, 801554c <__lo0bits+0x54>
 801551e:	0c1b      	lsrs	r3, r3, #16
 8015520:	2010      	movs	r0, #16
 8015522:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015526:	bf04      	itt	eq
 8015528:	0a1b      	lsreq	r3, r3, #8
 801552a:	3008      	addeq	r0, #8
 801552c:	071a      	lsls	r2, r3, #28
 801552e:	bf04      	itt	eq
 8015530:	091b      	lsreq	r3, r3, #4
 8015532:	3004      	addeq	r0, #4
 8015534:	079a      	lsls	r2, r3, #30
 8015536:	bf04      	itt	eq
 8015538:	089b      	lsreq	r3, r3, #2
 801553a:	3002      	addeq	r0, #2
 801553c:	07da      	lsls	r2, r3, #31
 801553e:	d403      	bmi.n	8015548 <__lo0bits+0x50>
 8015540:	085b      	lsrs	r3, r3, #1
 8015542:	f100 0001 	add.w	r0, r0, #1
 8015546:	d005      	beq.n	8015554 <__lo0bits+0x5c>
 8015548:	600b      	str	r3, [r1, #0]
 801554a:	4770      	bx	lr
 801554c:	4610      	mov	r0, r2
 801554e:	e7e8      	b.n	8015522 <__lo0bits+0x2a>
 8015550:	2000      	movs	r0, #0
 8015552:	4770      	bx	lr
 8015554:	2020      	movs	r0, #32
 8015556:	4770      	bx	lr

08015558 <__i2b>:
 8015558:	b510      	push	{r4, lr}
 801555a:	460c      	mov	r4, r1
 801555c:	2101      	movs	r1, #1
 801555e:	f7ff feb5 	bl	80152cc <_Balloc>
 8015562:	4602      	mov	r2, r0
 8015564:	b928      	cbnz	r0, 8015572 <__i2b+0x1a>
 8015566:	4b05      	ldr	r3, [pc, #20]	; (801557c <__i2b+0x24>)
 8015568:	4805      	ldr	r0, [pc, #20]	; (8015580 <__i2b+0x28>)
 801556a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801556e:	f7fe fa21 	bl	80139b4 <__assert_func>
 8015572:	2301      	movs	r3, #1
 8015574:	6144      	str	r4, [r0, #20]
 8015576:	6103      	str	r3, [r0, #16]
 8015578:	bd10      	pop	{r4, pc}
 801557a:	bf00      	nop
 801557c:	08018ae5 	.word	0x08018ae5
 8015580:	08018b74 	.word	0x08018b74

08015584 <__multiply>:
 8015584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015588:	4614      	mov	r4, r2
 801558a:	690a      	ldr	r2, [r1, #16]
 801558c:	6923      	ldr	r3, [r4, #16]
 801558e:	429a      	cmp	r2, r3
 8015590:	bfb8      	it	lt
 8015592:	460b      	movlt	r3, r1
 8015594:	460d      	mov	r5, r1
 8015596:	bfbc      	itt	lt
 8015598:	4625      	movlt	r5, r4
 801559a:	461c      	movlt	r4, r3
 801559c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80155a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80155a4:	68ab      	ldr	r3, [r5, #8]
 80155a6:	6869      	ldr	r1, [r5, #4]
 80155a8:	eb0a 0709 	add.w	r7, sl, r9
 80155ac:	42bb      	cmp	r3, r7
 80155ae:	b085      	sub	sp, #20
 80155b0:	bfb8      	it	lt
 80155b2:	3101      	addlt	r1, #1
 80155b4:	f7ff fe8a 	bl	80152cc <_Balloc>
 80155b8:	b930      	cbnz	r0, 80155c8 <__multiply+0x44>
 80155ba:	4602      	mov	r2, r0
 80155bc:	4b42      	ldr	r3, [pc, #264]	; (80156c8 <__multiply+0x144>)
 80155be:	4843      	ldr	r0, [pc, #268]	; (80156cc <__multiply+0x148>)
 80155c0:	f240 115d 	movw	r1, #349	; 0x15d
 80155c4:	f7fe f9f6 	bl	80139b4 <__assert_func>
 80155c8:	f100 0614 	add.w	r6, r0, #20
 80155cc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80155d0:	4633      	mov	r3, r6
 80155d2:	2200      	movs	r2, #0
 80155d4:	4543      	cmp	r3, r8
 80155d6:	d31e      	bcc.n	8015616 <__multiply+0x92>
 80155d8:	f105 0c14 	add.w	ip, r5, #20
 80155dc:	f104 0314 	add.w	r3, r4, #20
 80155e0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80155e4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80155e8:	9202      	str	r2, [sp, #8]
 80155ea:	ebac 0205 	sub.w	r2, ip, r5
 80155ee:	3a15      	subs	r2, #21
 80155f0:	f022 0203 	bic.w	r2, r2, #3
 80155f4:	3204      	adds	r2, #4
 80155f6:	f105 0115 	add.w	r1, r5, #21
 80155fa:	458c      	cmp	ip, r1
 80155fc:	bf38      	it	cc
 80155fe:	2204      	movcc	r2, #4
 8015600:	9201      	str	r2, [sp, #4]
 8015602:	9a02      	ldr	r2, [sp, #8]
 8015604:	9303      	str	r3, [sp, #12]
 8015606:	429a      	cmp	r2, r3
 8015608:	d808      	bhi.n	801561c <__multiply+0x98>
 801560a:	2f00      	cmp	r7, #0
 801560c:	dc55      	bgt.n	80156ba <__multiply+0x136>
 801560e:	6107      	str	r7, [r0, #16]
 8015610:	b005      	add	sp, #20
 8015612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015616:	f843 2b04 	str.w	r2, [r3], #4
 801561a:	e7db      	b.n	80155d4 <__multiply+0x50>
 801561c:	f8b3 a000 	ldrh.w	sl, [r3]
 8015620:	f1ba 0f00 	cmp.w	sl, #0
 8015624:	d020      	beq.n	8015668 <__multiply+0xe4>
 8015626:	f105 0e14 	add.w	lr, r5, #20
 801562a:	46b1      	mov	r9, r6
 801562c:	2200      	movs	r2, #0
 801562e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8015632:	f8d9 b000 	ldr.w	fp, [r9]
 8015636:	b2a1      	uxth	r1, r4
 8015638:	fa1f fb8b 	uxth.w	fp, fp
 801563c:	fb0a b101 	mla	r1, sl, r1, fp
 8015640:	4411      	add	r1, r2
 8015642:	f8d9 2000 	ldr.w	r2, [r9]
 8015646:	0c24      	lsrs	r4, r4, #16
 8015648:	0c12      	lsrs	r2, r2, #16
 801564a:	fb0a 2404 	mla	r4, sl, r4, r2
 801564e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8015652:	b289      	uxth	r1, r1
 8015654:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015658:	45f4      	cmp	ip, lr
 801565a:	f849 1b04 	str.w	r1, [r9], #4
 801565e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8015662:	d8e4      	bhi.n	801562e <__multiply+0xaa>
 8015664:	9901      	ldr	r1, [sp, #4]
 8015666:	5072      	str	r2, [r6, r1]
 8015668:	9a03      	ldr	r2, [sp, #12]
 801566a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801566e:	3304      	adds	r3, #4
 8015670:	f1b9 0f00 	cmp.w	r9, #0
 8015674:	d01f      	beq.n	80156b6 <__multiply+0x132>
 8015676:	6834      	ldr	r4, [r6, #0]
 8015678:	f105 0114 	add.w	r1, r5, #20
 801567c:	46b6      	mov	lr, r6
 801567e:	f04f 0a00 	mov.w	sl, #0
 8015682:	880a      	ldrh	r2, [r1, #0]
 8015684:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015688:	fb09 b202 	mla	r2, r9, r2, fp
 801568c:	4492      	add	sl, r2
 801568e:	b2a4      	uxth	r4, r4
 8015690:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015694:	f84e 4b04 	str.w	r4, [lr], #4
 8015698:	f851 4b04 	ldr.w	r4, [r1], #4
 801569c:	f8be 2000 	ldrh.w	r2, [lr]
 80156a0:	0c24      	lsrs	r4, r4, #16
 80156a2:	fb09 2404 	mla	r4, r9, r4, r2
 80156a6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80156aa:	458c      	cmp	ip, r1
 80156ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80156b0:	d8e7      	bhi.n	8015682 <__multiply+0xfe>
 80156b2:	9a01      	ldr	r2, [sp, #4]
 80156b4:	50b4      	str	r4, [r6, r2]
 80156b6:	3604      	adds	r6, #4
 80156b8:	e7a3      	b.n	8015602 <__multiply+0x7e>
 80156ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d1a5      	bne.n	801560e <__multiply+0x8a>
 80156c2:	3f01      	subs	r7, #1
 80156c4:	e7a1      	b.n	801560a <__multiply+0x86>
 80156c6:	bf00      	nop
 80156c8:	08018ae5 	.word	0x08018ae5
 80156cc:	08018b74 	.word	0x08018b74

080156d0 <__pow5mult>:
 80156d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156d4:	4615      	mov	r5, r2
 80156d6:	f012 0203 	ands.w	r2, r2, #3
 80156da:	4606      	mov	r6, r0
 80156dc:	460f      	mov	r7, r1
 80156de:	d007      	beq.n	80156f0 <__pow5mult+0x20>
 80156e0:	4c25      	ldr	r4, [pc, #148]	; (8015778 <__pow5mult+0xa8>)
 80156e2:	3a01      	subs	r2, #1
 80156e4:	2300      	movs	r3, #0
 80156e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80156ea:	f7ff fe51 	bl	8015390 <__multadd>
 80156ee:	4607      	mov	r7, r0
 80156f0:	10ad      	asrs	r5, r5, #2
 80156f2:	d03d      	beq.n	8015770 <__pow5mult+0xa0>
 80156f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80156f6:	b97c      	cbnz	r4, 8015718 <__pow5mult+0x48>
 80156f8:	2010      	movs	r0, #16
 80156fa:	f7fb fb37 	bl	8010d6c <malloc>
 80156fe:	4602      	mov	r2, r0
 8015700:	6270      	str	r0, [r6, #36]	; 0x24
 8015702:	b928      	cbnz	r0, 8015710 <__pow5mult+0x40>
 8015704:	4b1d      	ldr	r3, [pc, #116]	; (801577c <__pow5mult+0xac>)
 8015706:	481e      	ldr	r0, [pc, #120]	; (8015780 <__pow5mult+0xb0>)
 8015708:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801570c:	f7fe f952 	bl	80139b4 <__assert_func>
 8015710:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015714:	6004      	str	r4, [r0, #0]
 8015716:	60c4      	str	r4, [r0, #12]
 8015718:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801571c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015720:	b94c      	cbnz	r4, 8015736 <__pow5mult+0x66>
 8015722:	f240 2171 	movw	r1, #625	; 0x271
 8015726:	4630      	mov	r0, r6
 8015728:	f7ff ff16 	bl	8015558 <__i2b>
 801572c:	2300      	movs	r3, #0
 801572e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015732:	4604      	mov	r4, r0
 8015734:	6003      	str	r3, [r0, #0]
 8015736:	f04f 0900 	mov.w	r9, #0
 801573a:	07eb      	lsls	r3, r5, #31
 801573c:	d50a      	bpl.n	8015754 <__pow5mult+0x84>
 801573e:	4639      	mov	r1, r7
 8015740:	4622      	mov	r2, r4
 8015742:	4630      	mov	r0, r6
 8015744:	f7ff ff1e 	bl	8015584 <__multiply>
 8015748:	4639      	mov	r1, r7
 801574a:	4680      	mov	r8, r0
 801574c:	4630      	mov	r0, r6
 801574e:	f7ff fdfd 	bl	801534c <_Bfree>
 8015752:	4647      	mov	r7, r8
 8015754:	106d      	asrs	r5, r5, #1
 8015756:	d00b      	beq.n	8015770 <__pow5mult+0xa0>
 8015758:	6820      	ldr	r0, [r4, #0]
 801575a:	b938      	cbnz	r0, 801576c <__pow5mult+0x9c>
 801575c:	4622      	mov	r2, r4
 801575e:	4621      	mov	r1, r4
 8015760:	4630      	mov	r0, r6
 8015762:	f7ff ff0f 	bl	8015584 <__multiply>
 8015766:	6020      	str	r0, [r4, #0]
 8015768:	f8c0 9000 	str.w	r9, [r0]
 801576c:	4604      	mov	r4, r0
 801576e:	e7e4      	b.n	801573a <__pow5mult+0x6a>
 8015770:	4638      	mov	r0, r7
 8015772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015776:	bf00      	nop
 8015778:	08018cc8 	.word	0x08018cc8
 801577c:	0801873c 	.word	0x0801873c
 8015780:	08018b74 	.word	0x08018b74

08015784 <__lshift>:
 8015784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015788:	460c      	mov	r4, r1
 801578a:	6849      	ldr	r1, [r1, #4]
 801578c:	6923      	ldr	r3, [r4, #16]
 801578e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015792:	68a3      	ldr	r3, [r4, #8]
 8015794:	4607      	mov	r7, r0
 8015796:	4691      	mov	r9, r2
 8015798:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801579c:	f108 0601 	add.w	r6, r8, #1
 80157a0:	42b3      	cmp	r3, r6
 80157a2:	db0b      	blt.n	80157bc <__lshift+0x38>
 80157a4:	4638      	mov	r0, r7
 80157a6:	f7ff fd91 	bl	80152cc <_Balloc>
 80157aa:	4605      	mov	r5, r0
 80157ac:	b948      	cbnz	r0, 80157c2 <__lshift+0x3e>
 80157ae:	4602      	mov	r2, r0
 80157b0:	4b28      	ldr	r3, [pc, #160]	; (8015854 <__lshift+0xd0>)
 80157b2:	4829      	ldr	r0, [pc, #164]	; (8015858 <__lshift+0xd4>)
 80157b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80157b8:	f7fe f8fc 	bl	80139b4 <__assert_func>
 80157bc:	3101      	adds	r1, #1
 80157be:	005b      	lsls	r3, r3, #1
 80157c0:	e7ee      	b.n	80157a0 <__lshift+0x1c>
 80157c2:	2300      	movs	r3, #0
 80157c4:	f100 0114 	add.w	r1, r0, #20
 80157c8:	f100 0210 	add.w	r2, r0, #16
 80157cc:	4618      	mov	r0, r3
 80157ce:	4553      	cmp	r3, sl
 80157d0:	db33      	blt.n	801583a <__lshift+0xb6>
 80157d2:	6920      	ldr	r0, [r4, #16]
 80157d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80157d8:	f104 0314 	add.w	r3, r4, #20
 80157dc:	f019 091f 	ands.w	r9, r9, #31
 80157e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80157e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80157e8:	d02b      	beq.n	8015842 <__lshift+0xbe>
 80157ea:	f1c9 0e20 	rsb	lr, r9, #32
 80157ee:	468a      	mov	sl, r1
 80157f0:	2200      	movs	r2, #0
 80157f2:	6818      	ldr	r0, [r3, #0]
 80157f4:	fa00 f009 	lsl.w	r0, r0, r9
 80157f8:	4302      	orrs	r2, r0
 80157fa:	f84a 2b04 	str.w	r2, [sl], #4
 80157fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8015802:	459c      	cmp	ip, r3
 8015804:	fa22 f20e 	lsr.w	r2, r2, lr
 8015808:	d8f3      	bhi.n	80157f2 <__lshift+0x6e>
 801580a:	ebac 0304 	sub.w	r3, ip, r4
 801580e:	3b15      	subs	r3, #21
 8015810:	f023 0303 	bic.w	r3, r3, #3
 8015814:	3304      	adds	r3, #4
 8015816:	f104 0015 	add.w	r0, r4, #21
 801581a:	4584      	cmp	ip, r0
 801581c:	bf38      	it	cc
 801581e:	2304      	movcc	r3, #4
 8015820:	50ca      	str	r2, [r1, r3]
 8015822:	b10a      	cbz	r2, 8015828 <__lshift+0xa4>
 8015824:	f108 0602 	add.w	r6, r8, #2
 8015828:	3e01      	subs	r6, #1
 801582a:	4638      	mov	r0, r7
 801582c:	612e      	str	r6, [r5, #16]
 801582e:	4621      	mov	r1, r4
 8015830:	f7ff fd8c 	bl	801534c <_Bfree>
 8015834:	4628      	mov	r0, r5
 8015836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801583a:	f842 0f04 	str.w	r0, [r2, #4]!
 801583e:	3301      	adds	r3, #1
 8015840:	e7c5      	b.n	80157ce <__lshift+0x4a>
 8015842:	3904      	subs	r1, #4
 8015844:	f853 2b04 	ldr.w	r2, [r3], #4
 8015848:	f841 2f04 	str.w	r2, [r1, #4]!
 801584c:	459c      	cmp	ip, r3
 801584e:	d8f9      	bhi.n	8015844 <__lshift+0xc0>
 8015850:	e7ea      	b.n	8015828 <__lshift+0xa4>
 8015852:	bf00      	nop
 8015854:	08018ae5 	.word	0x08018ae5
 8015858:	08018b74 	.word	0x08018b74

0801585c <__mcmp>:
 801585c:	b530      	push	{r4, r5, lr}
 801585e:	6902      	ldr	r2, [r0, #16]
 8015860:	690c      	ldr	r4, [r1, #16]
 8015862:	1b12      	subs	r2, r2, r4
 8015864:	d10e      	bne.n	8015884 <__mcmp+0x28>
 8015866:	f100 0314 	add.w	r3, r0, #20
 801586a:	3114      	adds	r1, #20
 801586c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015870:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015874:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015878:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801587c:	42a5      	cmp	r5, r4
 801587e:	d003      	beq.n	8015888 <__mcmp+0x2c>
 8015880:	d305      	bcc.n	801588e <__mcmp+0x32>
 8015882:	2201      	movs	r2, #1
 8015884:	4610      	mov	r0, r2
 8015886:	bd30      	pop	{r4, r5, pc}
 8015888:	4283      	cmp	r3, r0
 801588a:	d3f3      	bcc.n	8015874 <__mcmp+0x18>
 801588c:	e7fa      	b.n	8015884 <__mcmp+0x28>
 801588e:	f04f 32ff 	mov.w	r2, #4294967295
 8015892:	e7f7      	b.n	8015884 <__mcmp+0x28>

08015894 <__mdiff>:
 8015894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015898:	460c      	mov	r4, r1
 801589a:	4606      	mov	r6, r0
 801589c:	4611      	mov	r1, r2
 801589e:	4620      	mov	r0, r4
 80158a0:	4617      	mov	r7, r2
 80158a2:	f7ff ffdb 	bl	801585c <__mcmp>
 80158a6:	1e05      	subs	r5, r0, #0
 80158a8:	d110      	bne.n	80158cc <__mdiff+0x38>
 80158aa:	4629      	mov	r1, r5
 80158ac:	4630      	mov	r0, r6
 80158ae:	f7ff fd0d 	bl	80152cc <_Balloc>
 80158b2:	b930      	cbnz	r0, 80158c2 <__mdiff+0x2e>
 80158b4:	4b39      	ldr	r3, [pc, #228]	; (801599c <__mdiff+0x108>)
 80158b6:	4602      	mov	r2, r0
 80158b8:	f240 2132 	movw	r1, #562	; 0x232
 80158bc:	4838      	ldr	r0, [pc, #224]	; (80159a0 <__mdiff+0x10c>)
 80158be:	f7fe f879 	bl	80139b4 <__assert_func>
 80158c2:	2301      	movs	r3, #1
 80158c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80158c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158cc:	bfa4      	itt	ge
 80158ce:	463b      	movge	r3, r7
 80158d0:	4627      	movge	r7, r4
 80158d2:	4630      	mov	r0, r6
 80158d4:	6879      	ldr	r1, [r7, #4]
 80158d6:	bfa6      	itte	ge
 80158d8:	461c      	movge	r4, r3
 80158da:	2500      	movge	r5, #0
 80158dc:	2501      	movlt	r5, #1
 80158de:	f7ff fcf5 	bl	80152cc <_Balloc>
 80158e2:	b920      	cbnz	r0, 80158ee <__mdiff+0x5a>
 80158e4:	4b2d      	ldr	r3, [pc, #180]	; (801599c <__mdiff+0x108>)
 80158e6:	4602      	mov	r2, r0
 80158e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80158ec:	e7e6      	b.n	80158bc <__mdiff+0x28>
 80158ee:	693e      	ldr	r6, [r7, #16]
 80158f0:	60c5      	str	r5, [r0, #12]
 80158f2:	6925      	ldr	r5, [r4, #16]
 80158f4:	f107 0114 	add.w	r1, r7, #20
 80158f8:	f104 0914 	add.w	r9, r4, #20
 80158fc:	f100 0e14 	add.w	lr, r0, #20
 8015900:	f107 0210 	add.w	r2, r7, #16
 8015904:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015908:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801590c:	46f2      	mov	sl, lr
 801590e:	2700      	movs	r7, #0
 8015910:	f859 3b04 	ldr.w	r3, [r9], #4
 8015914:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015918:	fa1f f883 	uxth.w	r8, r3
 801591c:	fa17 f78b 	uxtah	r7, r7, fp
 8015920:	0c1b      	lsrs	r3, r3, #16
 8015922:	eba7 0808 	sub.w	r8, r7, r8
 8015926:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801592a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801592e:	fa1f f888 	uxth.w	r8, r8
 8015932:	141f      	asrs	r7, r3, #16
 8015934:	454d      	cmp	r5, r9
 8015936:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801593a:	f84a 3b04 	str.w	r3, [sl], #4
 801593e:	d8e7      	bhi.n	8015910 <__mdiff+0x7c>
 8015940:	1b2b      	subs	r3, r5, r4
 8015942:	3b15      	subs	r3, #21
 8015944:	f023 0303 	bic.w	r3, r3, #3
 8015948:	3304      	adds	r3, #4
 801594a:	3415      	adds	r4, #21
 801594c:	42a5      	cmp	r5, r4
 801594e:	bf38      	it	cc
 8015950:	2304      	movcc	r3, #4
 8015952:	4419      	add	r1, r3
 8015954:	4473      	add	r3, lr
 8015956:	469e      	mov	lr, r3
 8015958:	460d      	mov	r5, r1
 801595a:	4565      	cmp	r5, ip
 801595c:	d30e      	bcc.n	801597c <__mdiff+0xe8>
 801595e:	f10c 0203 	add.w	r2, ip, #3
 8015962:	1a52      	subs	r2, r2, r1
 8015964:	f022 0203 	bic.w	r2, r2, #3
 8015968:	3903      	subs	r1, #3
 801596a:	458c      	cmp	ip, r1
 801596c:	bf38      	it	cc
 801596e:	2200      	movcc	r2, #0
 8015970:	441a      	add	r2, r3
 8015972:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015976:	b17b      	cbz	r3, 8015998 <__mdiff+0x104>
 8015978:	6106      	str	r6, [r0, #16]
 801597a:	e7a5      	b.n	80158c8 <__mdiff+0x34>
 801597c:	f855 8b04 	ldr.w	r8, [r5], #4
 8015980:	fa17 f488 	uxtah	r4, r7, r8
 8015984:	1422      	asrs	r2, r4, #16
 8015986:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801598a:	b2a4      	uxth	r4, r4
 801598c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015990:	f84e 4b04 	str.w	r4, [lr], #4
 8015994:	1417      	asrs	r7, r2, #16
 8015996:	e7e0      	b.n	801595a <__mdiff+0xc6>
 8015998:	3e01      	subs	r6, #1
 801599a:	e7ea      	b.n	8015972 <__mdiff+0xde>
 801599c:	08018ae5 	.word	0x08018ae5
 80159a0:	08018b74 	.word	0x08018b74

080159a4 <__ulp>:
 80159a4:	b082      	sub	sp, #8
 80159a6:	ed8d 0b00 	vstr	d0, [sp]
 80159aa:	9b01      	ldr	r3, [sp, #4]
 80159ac:	4912      	ldr	r1, [pc, #72]	; (80159f8 <__ulp+0x54>)
 80159ae:	4019      	ands	r1, r3
 80159b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80159b4:	2900      	cmp	r1, #0
 80159b6:	dd05      	ble.n	80159c4 <__ulp+0x20>
 80159b8:	2200      	movs	r2, #0
 80159ba:	460b      	mov	r3, r1
 80159bc:	ec43 2b10 	vmov	d0, r2, r3
 80159c0:	b002      	add	sp, #8
 80159c2:	4770      	bx	lr
 80159c4:	4249      	negs	r1, r1
 80159c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80159ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 80159ce:	f04f 0200 	mov.w	r2, #0
 80159d2:	f04f 0300 	mov.w	r3, #0
 80159d6:	da04      	bge.n	80159e2 <__ulp+0x3e>
 80159d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80159dc:	fa41 f300 	asr.w	r3, r1, r0
 80159e0:	e7ec      	b.n	80159bc <__ulp+0x18>
 80159e2:	f1a0 0114 	sub.w	r1, r0, #20
 80159e6:	291e      	cmp	r1, #30
 80159e8:	bfda      	itte	le
 80159ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80159ee:	fa20 f101 	lsrle.w	r1, r0, r1
 80159f2:	2101      	movgt	r1, #1
 80159f4:	460a      	mov	r2, r1
 80159f6:	e7e1      	b.n	80159bc <__ulp+0x18>
 80159f8:	7ff00000 	.word	0x7ff00000

080159fc <__b2d>:
 80159fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159fe:	6905      	ldr	r5, [r0, #16]
 8015a00:	f100 0714 	add.w	r7, r0, #20
 8015a04:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015a08:	1f2e      	subs	r6, r5, #4
 8015a0a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015a0e:	4620      	mov	r0, r4
 8015a10:	f7ff fd52 	bl	80154b8 <__hi0bits>
 8015a14:	f1c0 0320 	rsb	r3, r0, #32
 8015a18:	280a      	cmp	r0, #10
 8015a1a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015a98 <__b2d+0x9c>
 8015a1e:	600b      	str	r3, [r1, #0]
 8015a20:	dc14      	bgt.n	8015a4c <__b2d+0x50>
 8015a22:	f1c0 0e0b 	rsb	lr, r0, #11
 8015a26:	fa24 f10e 	lsr.w	r1, r4, lr
 8015a2a:	42b7      	cmp	r7, r6
 8015a2c:	ea41 030c 	orr.w	r3, r1, ip
 8015a30:	bf34      	ite	cc
 8015a32:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015a36:	2100      	movcs	r1, #0
 8015a38:	3015      	adds	r0, #21
 8015a3a:	fa04 f000 	lsl.w	r0, r4, r0
 8015a3e:	fa21 f10e 	lsr.w	r1, r1, lr
 8015a42:	ea40 0201 	orr.w	r2, r0, r1
 8015a46:	ec43 2b10 	vmov	d0, r2, r3
 8015a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a4c:	42b7      	cmp	r7, r6
 8015a4e:	bf3a      	itte	cc
 8015a50:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015a54:	f1a5 0608 	subcc.w	r6, r5, #8
 8015a58:	2100      	movcs	r1, #0
 8015a5a:	380b      	subs	r0, #11
 8015a5c:	d017      	beq.n	8015a8e <__b2d+0x92>
 8015a5e:	f1c0 0c20 	rsb	ip, r0, #32
 8015a62:	fa04 f500 	lsl.w	r5, r4, r0
 8015a66:	42be      	cmp	r6, r7
 8015a68:	fa21 f40c 	lsr.w	r4, r1, ip
 8015a6c:	ea45 0504 	orr.w	r5, r5, r4
 8015a70:	bf8c      	ite	hi
 8015a72:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015a76:	2400      	movls	r4, #0
 8015a78:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015a7c:	fa01 f000 	lsl.w	r0, r1, r0
 8015a80:	fa24 f40c 	lsr.w	r4, r4, ip
 8015a84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015a88:	ea40 0204 	orr.w	r2, r0, r4
 8015a8c:	e7db      	b.n	8015a46 <__b2d+0x4a>
 8015a8e:	ea44 030c 	orr.w	r3, r4, ip
 8015a92:	460a      	mov	r2, r1
 8015a94:	e7d7      	b.n	8015a46 <__b2d+0x4a>
 8015a96:	bf00      	nop
 8015a98:	3ff00000 	.word	0x3ff00000

08015a9c <__d2b>:
 8015a9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015aa0:	4689      	mov	r9, r1
 8015aa2:	2101      	movs	r1, #1
 8015aa4:	ec57 6b10 	vmov	r6, r7, d0
 8015aa8:	4690      	mov	r8, r2
 8015aaa:	f7ff fc0f 	bl	80152cc <_Balloc>
 8015aae:	4604      	mov	r4, r0
 8015ab0:	b930      	cbnz	r0, 8015ac0 <__d2b+0x24>
 8015ab2:	4602      	mov	r2, r0
 8015ab4:	4b25      	ldr	r3, [pc, #148]	; (8015b4c <__d2b+0xb0>)
 8015ab6:	4826      	ldr	r0, [pc, #152]	; (8015b50 <__d2b+0xb4>)
 8015ab8:	f240 310a 	movw	r1, #778	; 0x30a
 8015abc:	f7fd ff7a 	bl	80139b4 <__assert_func>
 8015ac0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015ac4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015ac8:	bb35      	cbnz	r5, 8015b18 <__d2b+0x7c>
 8015aca:	2e00      	cmp	r6, #0
 8015acc:	9301      	str	r3, [sp, #4]
 8015ace:	d028      	beq.n	8015b22 <__d2b+0x86>
 8015ad0:	4668      	mov	r0, sp
 8015ad2:	9600      	str	r6, [sp, #0]
 8015ad4:	f7ff fd10 	bl	80154f8 <__lo0bits>
 8015ad8:	9900      	ldr	r1, [sp, #0]
 8015ada:	b300      	cbz	r0, 8015b1e <__d2b+0x82>
 8015adc:	9a01      	ldr	r2, [sp, #4]
 8015ade:	f1c0 0320 	rsb	r3, r0, #32
 8015ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8015ae6:	430b      	orrs	r3, r1
 8015ae8:	40c2      	lsrs	r2, r0
 8015aea:	6163      	str	r3, [r4, #20]
 8015aec:	9201      	str	r2, [sp, #4]
 8015aee:	9b01      	ldr	r3, [sp, #4]
 8015af0:	61a3      	str	r3, [r4, #24]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	bf14      	ite	ne
 8015af6:	2202      	movne	r2, #2
 8015af8:	2201      	moveq	r2, #1
 8015afa:	6122      	str	r2, [r4, #16]
 8015afc:	b1d5      	cbz	r5, 8015b34 <__d2b+0x98>
 8015afe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015b02:	4405      	add	r5, r0
 8015b04:	f8c9 5000 	str.w	r5, [r9]
 8015b08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015b0c:	f8c8 0000 	str.w	r0, [r8]
 8015b10:	4620      	mov	r0, r4
 8015b12:	b003      	add	sp, #12
 8015b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015b1c:	e7d5      	b.n	8015aca <__d2b+0x2e>
 8015b1e:	6161      	str	r1, [r4, #20]
 8015b20:	e7e5      	b.n	8015aee <__d2b+0x52>
 8015b22:	a801      	add	r0, sp, #4
 8015b24:	f7ff fce8 	bl	80154f8 <__lo0bits>
 8015b28:	9b01      	ldr	r3, [sp, #4]
 8015b2a:	6163      	str	r3, [r4, #20]
 8015b2c:	2201      	movs	r2, #1
 8015b2e:	6122      	str	r2, [r4, #16]
 8015b30:	3020      	adds	r0, #32
 8015b32:	e7e3      	b.n	8015afc <__d2b+0x60>
 8015b34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015b38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015b3c:	f8c9 0000 	str.w	r0, [r9]
 8015b40:	6918      	ldr	r0, [r3, #16]
 8015b42:	f7ff fcb9 	bl	80154b8 <__hi0bits>
 8015b46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015b4a:	e7df      	b.n	8015b0c <__d2b+0x70>
 8015b4c:	08018ae5 	.word	0x08018ae5
 8015b50:	08018b74 	.word	0x08018b74

08015b54 <__ratio>:
 8015b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b58:	4688      	mov	r8, r1
 8015b5a:	4669      	mov	r1, sp
 8015b5c:	4681      	mov	r9, r0
 8015b5e:	f7ff ff4d 	bl	80159fc <__b2d>
 8015b62:	a901      	add	r1, sp, #4
 8015b64:	4640      	mov	r0, r8
 8015b66:	ec55 4b10 	vmov	r4, r5, d0
 8015b6a:	f7ff ff47 	bl	80159fc <__b2d>
 8015b6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015b72:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015b76:	eba3 0c02 	sub.w	ip, r3, r2
 8015b7a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015b7e:	1a9b      	subs	r3, r3, r2
 8015b80:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015b84:	ec51 0b10 	vmov	r0, r1, d0
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	bfd6      	itet	le
 8015b8c:	460a      	movle	r2, r1
 8015b8e:	462a      	movgt	r2, r5
 8015b90:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015b94:	468b      	mov	fp, r1
 8015b96:	462f      	mov	r7, r5
 8015b98:	bfd4      	ite	le
 8015b9a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015b9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015ba2:	4620      	mov	r0, r4
 8015ba4:	ee10 2a10 	vmov	r2, s0
 8015ba8:	465b      	mov	r3, fp
 8015baa:	4639      	mov	r1, r7
 8015bac:	f7ea fe6e 	bl	800088c <__aeabi_ddiv>
 8015bb0:	ec41 0b10 	vmov	d0, r0, r1
 8015bb4:	b003      	add	sp, #12
 8015bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015bba <__copybits>:
 8015bba:	3901      	subs	r1, #1
 8015bbc:	b570      	push	{r4, r5, r6, lr}
 8015bbe:	1149      	asrs	r1, r1, #5
 8015bc0:	6914      	ldr	r4, [r2, #16]
 8015bc2:	3101      	adds	r1, #1
 8015bc4:	f102 0314 	add.w	r3, r2, #20
 8015bc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015bcc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015bd0:	1f05      	subs	r5, r0, #4
 8015bd2:	42a3      	cmp	r3, r4
 8015bd4:	d30c      	bcc.n	8015bf0 <__copybits+0x36>
 8015bd6:	1aa3      	subs	r3, r4, r2
 8015bd8:	3b11      	subs	r3, #17
 8015bda:	f023 0303 	bic.w	r3, r3, #3
 8015bde:	3211      	adds	r2, #17
 8015be0:	42a2      	cmp	r2, r4
 8015be2:	bf88      	it	hi
 8015be4:	2300      	movhi	r3, #0
 8015be6:	4418      	add	r0, r3
 8015be8:	2300      	movs	r3, #0
 8015bea:	4288      	cmp	r0, r1
 8015bec:	d305      	bcc.n	8015bfa <__copybits+0x40>
 8015bee:	bd70      	pop	{r4, r5, r6, pc}
 8015bf0:	f853 6b04 	ldr.w	r6, [r3], #4
 8015bf4:	f845 6f04 	str.w	r6, [r5, #4]!
 8015bf8:	e7eb      	b.n	8015bd2 <__copybits+0x18>
 8015bfa:	f840 3b04 	str.w	r3, [r0], #4
 8015bfe:	e7f4      	b.n	8015bea <__copybits+0x30>

08015c00 <__any_on>:
 8015c00:	f100 0214 	add.w	r2, r0, #20
 8015c04:	6900      	ldr	r0, [r0, #16]
 8015c06:	114b      	asrs	r3, r1, #5
 8015c08:	4298      	cmp	r0, r3
 8015c0a:	b510      	push	{r4, lr}
 8015c0c:	db11      	blt.n	8015c32 <__any_on+0x32>
 8015c0e:	dd0a      	ble.n	8015c26 <__any_on+0x26>
 8015c10:	f011 011f 	ands.w	r1, r1, #31
 8015c14:	d007      	beq.n	8015c26 <__any_on+0x26>
 8015c16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015c1a:	fa24 f001 	lsr.w	r0, r4, r1
 8015c1e:	fa00 f101 	lsl.w	r1, r0, r1
 8015c22:	428c      	cmp	r4, r1
 8015c24:	d10b      	bne.n	8015c3e <__any_on+0x3e>
 8015c26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015c2a:	4293      	cmp	r3, r2
 8015c2c:	d803      	bhi.n	8015c36 <__any_on+0x36>
 8015c2e:	2000      	movs	r0, #0
 8015c30:	bd10      	pop	{r4, pc}
 8015c32:	4603      	mov	r3, r0
 8015c34:	e7f7      	b.n	8015c26 <__any_on+0x26>
 8015c36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015c3a:	2900      	cmp	r1, #0
 8015c3c:	d0f5      	beq.n	8015c2a <__any_on+0x2a>
 8015c3e:	2001      	movs	r0, #1
 8015c40:	e7f6      	b.n	8015c30 <__any_on+0x30>

08015c42 <_calloc_r>:
 8015c42:	b513      	push	{r0, r1, r4, lr}
 8015c44:	434a      	muls	r2, r1
 8015c46:	4611      	mov	r1, r2
 8015c48:	9201      	str	r2, [sp, #4]
 8015c4a:	f7fb fb9d 	bl	8011388 <_malloc_r>
 8015c4e:	4604      	mov	r4, r0
 8015c50:	b118      	cbz	r0, 8015c5a <_calloc_r+0x18>
 8015c52:	9a01      	ldr	r2, [sp, #4]
 8015c54:	2100      	movs	r1, #0
 8015c56:	f7fb f8c1 	bl	8010ddc <memset>
 8015c5a:	4620      	mov	r0, r4
 8015c5c:	b002      	add	sp, #8
 8015c5e:	bd10      	pop	{r4, pc}

08015c60 <_realloc_r>:
 8015c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c62:	4607      	mov	r7, r0
 8015c64:	4614      	mov	r4, r2
 8015c66:	460e      	mov	r6, r1
 8015c68:	b921      	cbnz	r1, 8015c74 <_realloc_r+0x14>
 8015c6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015c6e:	4611      	mov	r1, r2
 8015c70:	f7fb bb8a 	b.w	8011388 <_malloc_r>
 8015c74:	b922      	cbnz	r2, 8015c80 <_realloc_r+0x20>
 8015c76:	f7fb fb37 	bl	80112e8 <_free_r>
 8015c7a:	4625      	mov	r5, r4
 8015c7c:	4628      	mov	r0, r5
 8015c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c80:	f000 feb2 	bl	80169e8 <_malloc_usable_size_r>
 8015c84:	42a0      	cmp	r0, r4
 8015c86:	d20f      	bcs.n	8015ca8 <_realloc_r+0x48>
 8015c88:	4621      	mov	r1, r4
 8015c8a:	4638      	mov	r0, r7
 8015c8c:	f7fb fb7c 	bl	8011388 <_malloc_r>
 8015c90:	4605      	mov	r5, r0
 8015c92:	2800      	cmp	r0, #0
 8015c94:	d0f2      	beq.n	8015c7c <_realloc_r+0x1c>
 8015c96:	4631      	mov	r1, r6
 8015c98:	4622      	mov	r2, r4
 8015c9a:	f7fb f877 	bl	8010d8c <memcpy>
 8015c9e:	4631      	mov	r1, r6
 8015ca0:	4638      	mov	r0, r7
 8015ca2:	f7fb fb21 	bl	80112e8 <_free_r>
 8015ca6:	e7e9      	b.n	8015c7c <_realloc_r+0x1c>
 8015ca8:	4635      	mov	r5, r6
 8015caa:	e7e7      	b.n	8015c7c <_realloc_r+0x1c>

08015cac <__ssputs_r>:
 8015cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cb0:	688e      	ldr	r6, [r1, #8]
 8015cb2:	429e      	cmp	r6, r3
 8015cb4:	4682      	mov	sl, r0
 8015cb6:	460c      	mov	r4, r1
 8015cb8:	4690      	mov	r8, r2
 8015cba:	461f      	mov	r7, r3
 8015cbc:	d838      	bhi.n	8015d30 <__ssputs_r+0x84>
 8015cbe:	898a      	ldrh	r2, [r1, #12]
 8015cc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015cc4:	d032      	beq.n	8015d2c <__ssputs_r+0x80>
 8015cc6:	6825      	ldr	r5, [r4, #0]
 8015cc8:	6909      	ldr	r1, [r1, #16]
 8015cca:	eba5 0901 	sub.w	r9, r5, r1
 8015cce:	6965      	ldr	r5, [r4, #20]
 8015cd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015cd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015cd8:	3301      	adds	r3, #1
 8015cda:	444b      	add	r3, r9
 8015cdc:	106d      	asrs	r5, r5, #1
 8015cde:	429d      	cmp	r5, r3
 8015ce0:	bf38      	it	cc
 8015ce2:	461d      	movcc	r5, r3
 8015ce4:	0553      	lsls	r3, r2, #21
 8015ce6:	d531      	bpl.n	8015d4c <__ssputs_r+0xa0>
 8015ce8:	4629      	mov	r1, r5
 8015cea:	f7fb fb4d 	bl	8011388 <_malloc_r>
 8015cee:	4606      	mov	r6, r0
 8015cf0:	b950      	cbnz	r0, 8015d08 <__ssputs_r+0x5c>
 8015cf2:	230c      	movs	r3, #12
 8015cf4:	f8ca 3000 	str.w	r3, [sl]
 8015cf8:	89a3      	ldrh	r3, [r4, #12]
 8015cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015cfe:	81a3      	strh	r3, [r4, #12]
 8015d00:	f04f 30ff 	mov.w	r0, #4294967295
 8015d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d08:	6921      	ldr	r1, [r4, #16]
 8015d0a:	464a      	mov	r2, r9
 8015d0c:	f7fb f83e 	bl	8010d8c <memcpy>
 8015d10:	89a3      	ldrh	r3, [r4, #12]
 8015d12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d1a:	81a3      	strh	r3, [r4, #12]
 8015d1c:	6126      	str	r6, [r4, #16]
 8015d1e:	6165      	str	r5, [r4, #20]
 8015d20:	444e      	add	r6, r9
 8015d22:	eba5 0509 	sub.w	r5, r5, r9
 8015d26:	6026      	str	r6, [r4, #0]
 8015d28:	60a5      	str	r5, [r4, #8]
 8015d2a:	463e      	mov	r6, r7
 8015d2c:	42be      	cmp	r6, r7
 8015d2e:	d900      	bls.n	8015d32 <__ssputs_r+0x86>
 8015d30:	463e      	mov	r6, r7
 8015d32:	4632      	mov	r2, r6
 8015d34:	6820      	ldr	r0, [r4, #0]
 8015d36:	4641      	mov	r1, r8
 8015d38:	f7fb f836 	bl	8010da8 <memmove>
 8015d3c:	68a3      	ldr	r3, [r4, #8]
 8015d3e:	6822      	ldr	r2, [r4, #0]
 8015d40:	1b9b      	subs	r3, r3, r6
 8015d42:	4432      	add	r2, r6
 8015d44:	60a3      	str	r3, [r4, #8]
 8015d46:	6022      	str	r2, [r4, #0]
 8015d48:	2000      	movs	r0, #0
 8015d4a:	e7db      	b.n	8015d04 <__ssputs_r+0x58>
 8015d4c:	462a      	mov	r2, r5
 8015d4e:	f7ff ff87 	bl	8015c60 <_realloc_r>
 8015d52:	4606      	mov	r6, r0
 8015d54:	2800      	cmp	r0, #0
 8015d56:	d1e1      	bne.n	8015d1c <__ssputs_r+0x70>
 8015d58:	6921      	ldr	r1, [r4, #16]
 8015d5a:	4650      	mov	r0, sl
 8015d5c:	f7fb fac4 	bl	80112e8 <_free_r>
 8015d60:	e7c7      	b.n	8015cf2 <__ssputs_r+0x46>
	...

08015d64 <_svfiprintf_r>:
 8015d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d68:	4698      	mov	r8, r3
 8015d6a:	898b      	ldrh	r3, [r1, #12]
 8015d6c:	061b      	lsls	r3, r3, #24
 8015d6e:	b09d      	sub	sp, #116	; 0x74
 8015d70:	4607      	mov	r7, r0
 8015d72:	460d      	mov	r5, r1
 8015d74:	4614      	mov	r4, r2
 8015d76:	d50e      	bpl.n	8015d96 <_svfiprintf_r+0x32>
 8015d78:	690b      	ldr	r3, [r1, #16]
 8015d7a:	b963      	cbnz	r3, 8015d96 <_svfiprintf_r+0x32>
 8015d7c:	2140      	movs	r1, #64	; 0x40
 8015d7e:	f7fb fb03 	bl	8011388 <_malloc_r>
 8015d82:	6028      	str	r0, [r5, #0]
 8015d84:	6128      	str	r0, [r5, #16]
 8015d86:	b920      	cbnz	r0, 8015d92 <_svfiprintf_r+0x2e>
 8015d88:	230c      	movs	r3, #12
 8015d8a:	603b      	str	r3, [r7, #0]
 8015d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8015d90:	e0d1      	b.n	8015f36 <_svfiprintf_r+0x1d2>
 8015d92:	2340      	movs	r3, #64	; 0x40
 8015d94:	616b      	str	r3, [r5, #20]
 8015d96:	2300      	movs	r3, #0
 8015d98:	9309      	str	r3, [sp, #36]	; 0x24
 8015d9a:	2320      	movs	r3, #32
 8015d9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015da0:	f8cd 800c 	str.w	r8, [sp, #12]
 8015da4:	2330      	movs	r3, #48	; 0x30
 8015da6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015f50 <_svfiprintf_r+0x1ec>
 8015daa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015dae:	f04f 0901 	mov.w	r9, #1
 8015db2:	4623      	mov	r3, r4
 8015db4:	469a      	mov	sl, r3
 8015db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015dba:	b10a      	cbz	r2, 8015dc0 <_svfiprintf_r+0x5c>
 8015dbc:	2a25      	cmp	r2, #37	; 0x25
 8015dbe:	d1f9      	bne.n	8015db4 <_svfiprintf_r+0x50>
 8015dc0:	ebba 0b04 	subs.w	fp, sl, r4
 8015dc4:	d00b      	beq.n	8015dde <_svfiprintf_r+0x7a>
 8015dc6:	465b      	mov	r3, fp
 8015dc8:	4622      	mov	r2, r4
 8015dca:	4629      	mov	r1, r5
 8015dcc:	4638      	mov	r0, r7
 8015dce:	f7ff ff6d 	bl	8015cac <__ssputs_r>
 8015dd2:	3001      	adds	r0, #1
 8015dd4:	f000 80aa 	beq.w	8015f2c <_svfiprintf_r+0x1c8>
 8015dd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015dda:	445a      	add	r2, fp
 8015ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8015dde:	f89a 3000 	ldrb.w	r3, [sl]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	f000 80a2 	beq.w	8015f2c <_svfiprintf_r+0x1c8>
 8015de8:	2300      	movs	r3, #0
 8015dea:	f04f 32ff 	mov.w	r2, #4294967295
 8015dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015df2:	f10a 0a01 	add.w	sl, sl, #1
 8015df6:	9304      	str	r3, [sp, #16]
 8015df8:	9307      	str	r3, [sp, #28]
 8015dfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015dfe:	931a      	str	r3, [sp, #104]	; 0x68
 8015e00:	4654      	mov	r4, sl
 8015e02:	2205      	movs	r2, #5
 8015e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e08:	4851      	ldr	r0, [pc, #324]	; (8015f50 <_svfiprintf_r+0x1ec>)
 8015e0a:	f7ea fa09 	bl	8000220 <memchr>
 8015e0e:	9a04      	ldr	r2, [sp, #16]
 8015e10:	b9d8      	cbnz	r0, 8015e4a <_svfiprintf_r+0xe6>
 8015e12:	06d0      	lsls	r0, r2, #27
 8015e14:	bf44      	itt	mi
 8015e16:	2320      	movmi	r3, #32
 8015e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e1c:	0711      	lsls	r1, r2, #28
 8015e1e:	bf44      	itt	mi
 8015e20:	232b      	movmi	r3, #43	; 0x2b
 8015e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e26:	f89a 3000 	ldrb.w	r3, [sl]
 8015e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8015e2c:	d015      	beq.n	8015e5a <_svfiprintf_r+0xf6>
 8015e2e:	9a07      	ldr	r2, [sp, #28]
 8015e30:	4654      	mov	r4, sl
 8015e32:	2000      	movs	r0, #0
 8015e34:	f04f 0c0a 	mov.w	ip, #10
 8015e38:	4621      	mov	r1, r4
 8015e3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e3e:	3b30      	subs	r3, #48	; 0x30
 8015e40:	2b09      	cmp	r3, #9
 8015e42:	d94e      	bls.n	8015ee2 <_svfiprintf_r+0x17e>
 8015e44:	b1b0      	cbz	r0, 8015e74 <_svfiprintf_r+0x110>
 8015e46:	9207      	str	r2, [sp, #28]
 8015e48:	e014      	b.n	8015e74 <_svfiprintf_r+0x110>
 8015e4a:	eba0 0308 	sub.w	r3, r0, r8
 8015e4e:	fa09 f303 	lsl.w	r3, r9, r3
 8015e52:	4313      	orrs	r3, r2
 8015e54:	9304      	str	r3, [sp, #16]
 8015e56:	46a2      	mov	sl, r4
 8015e58:	e7d2      	b.n	8015e00 <_svfiprintf_r+0x9c>
 8015e5a:	9b03      	ldr	r3, [sp, #12]
 8015e5c:	1d19      	adds	r1, r3, #4
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	9103      	str	r1, [sp, #12]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	bfbb      	ittet	lt
 8015e66:	425b      	neglt	r3, r3
 8015e68:	f042 0202 	orrlt.w	r2, r2, #2
 8015e6c:	9307      	strge	r3, [sp, #28]
 8015e6e:	9307      	strlt	r3, [sp, #28]
 8015e70:	bfb8      	it	lt
 8015e72:	9204      	strlt	r2, [sp, #16]
 8015e74:	7823      	ldrb	r3, [r4, #0]
 8015e76:	2b2e      	cmp	r3, #46	; 0x2e
 8015e78:	d10c      	bne.n	8015e94 <_svfiprintf_r+0x130>
 8015e7a:	7863      	ldrb	r3, [r4, #1]
 8015e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8015e7e:	d135      	bne.n	8015eec <_svfiprintf_r+0x188>
 8015e80:	9b03      	ldr	r3, [sp, #12]
 8015e82:	1d1a      	adds	r2, r3, #4
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	9203      	str	r2, [sp, #12]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	bfb8      	it	lt
 8015e8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8015e90:	3402      	adds	r4, #2
 8015e92:	9305      	str	r3, [sp, #20]
 8015e94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015f60 <_svfiprintf_r+0x1fc>
 8015e98:	7821      	ldrb	r1, [r4, #0]
 8015e9a:	2203      	movs	r2, #3
 8015e9c:	4650      	mov	r0, sl
 8015e9e:	f7ea f9bf 	bl	8000220 <memchr>
 8015ea2:	b140      	cbz	r0, 8015eb6 <_svfiprintf_r+0x152>
 8015ea4:	2340      	movs	r3, #64	; 0x40
 8015ea6:	eba0 000a 	sub.w	r0, r0, sl
 8015eaa:	fa03 f000 	lsl.w	r0, r3, r0
 8015eae:	9b04      	ldr	r3, [sp, #16]
 8015eb0:	4303      	orrs	r3, r0
 8015eb2:	3401      	adds	r4, #1
 8015eb4:	9304      	str	r3, [sp, #16]
 8015eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015eba:	4826      	ldr	r0, [pc, #152]	; (8015f54 <_svfiprintf_r+0x1f0>)
 8015ebc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ec0:	2206      	movs	r2, #6
 8015ec2:	f7ea f9ad 	bl	8000220 <memchr>
 8015ec6:	2800      	cmp	r0, #0
 8015ec8:	d038      	beq.n	8015f3c <_svfiprintf_r+0x1d8>
 8015eca:	4b23      	ldr	r3, [pc, #140]	; (8015f58 <_svfiprintf_r+0x1f4>)
 8015ecc:	bb1b      	cbnz	r3, 8015f16 <_svfiprintf_r+0x1b2>
 8015ece:	9b03      	ldr	r3, [sp, #12]
 8015ed0:	3307      	adds	r3, #7
 8015ed2:	f023 0307 	bic.w	r3, r3, #7
 8015ed6:	3308      	adds	r3, #8
 8015ed8:	9303      	str	r3, [sp, #12]
 8015eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015edc:	4433      	add	r3, r6
 8015ede:	9309      	str	r3, [sp, #36]	; 0x24
 8015ee0:	e767      	b.n	8015db2 <_svfiprintf_r+0x4e>
 8015ee2:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ee6:	460c      	mov	r4, r1
 8015ee8:	2001      	movs	r0, #1
 8015eea:	e7a5      	b.n	8015e38 <_svfiprintf_r+0xd4>
 8015eec:	2300      	movs	r3, #0
 8015eee:	3401      	adds	r4, #1
 8015ef0:	9305      	str	r3, [sp, #20]
 8015ef2:	4619      	mov	r1, r3
 8015ef4:	f04f 0c0a 	mov.w	ip, #10
 8015ef8:	4620      	mov	r0, r4
 8015efa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015efe:	3a30      	subs	r2, #48	; 0x30
 8015f00:	2a09      	cmp	r2, #9
 8015f02:	d903      	bls.n	8015f0c <_svfiprintf_r+0x1a8>
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d0c5      	beq.n	8015e94 <_svfiprintf_r+0x130>
 8015f08:	9105      	str	r1, [sp, #20]
 8015f0a:	e7c3      	b.n	8015e94 <_svfiprintf_r+0x130>
 8015f0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f10:	4604      	mov	r4, r0
 8015f12:	2301      	movs	r3, #1
 8015f14:	e7f0      	b.n	8015ef8 <_svfiprintf_r+0x194>
 8015f16:	ab03      	add	r3, sp, #12
 8015f18:	9300      	str	r3, [sp, #0]
 8015f1a:	462a      	mov	r2, r5
 8015f1c:	4b0f      	ldr	r3, [pc, #60]	; (8015f5c <_svfiprintf_r+0x1f8>)
 8015f1e:	a904      	add	r1, sp, #16
 8015f20:	4638      	mov	r0, r7
 8015f22:	f7fb fb2b 	bl	801157c <_printf_float>
 8015f26:	1c42      	adds	r2, r0, #1
 8015f28:	4606      	mov	r6, r0
 8015f2a:	d1d6      	bne.n	8015eda <_svfiprintf_r+0x176>
 8015f2c:	89ab      	ldrh	r3, [r5, #12]
 8015f2e:	065b      	lsls	r3, r3, #25
 8015f30:	f53f af2c 	bmi.w	8015d8c <_svfiprintf_r+0x28>
 8015f34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f36:	b01d      	add	sp, #116	; 0x74
 8015f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f3c:	ab03      	add	r3, sp, #12
 8015f3e:	9300      	str	r3, [sp, #0]
 8015f40:	462a      	mov	r2, r5
 8015f42:	4b06      	ldr	r3, [pc, #24]	; (8015f5c <_svfiprintf_r+0x1f8>)
 8015f44:	a904      	add	r1, sp, #16
 8015f46:	4638      	mov	r0, r7
 8015f48:	f7fb fdbc 	bl	8011ac4 <_printf_i>
 8015f4c:	e7eb      	b.n	8015f26 <_svfiprintf_r+0x1c2>
 8015f4e:	bf00      	nop
 8015f50:	08018cd4 	.word	0x08018cd4
 8015f54:	08018cde 	.word	0x08018cde
 8015f58:	0801157d 	.word	0x0801157d
 8015f5c:	08015cad 	.word	0x08015cad
 8015f60:	08018cda 	.word	0x08018cda

08015f64 <_sungetc_r>:
 8015f64:	b538      	push	{r3, r4, r5, lr}
 8015f66:	1c4b      	adds	r3, r1, #1
 8015f68:	4614      	mov	r4, r2
 8015f6a:	d103      	bne.n	8015f74 <_sungetc_r+0x10>
 8015f6c:	f04f 35ff 	mov.w	r5, #4294967295
 8015f70:	4628      	mov	r0, r5
 8015f72:	bd38      	pop	{r3, r4, r5, pc}
 8015f74:	8993      	ldrh	r3, [r2, #12]
 8015f76:	f023 0320 	bic.w	r3, r3, #32
 8015f7a:	8193      	strh	r3, [r2, #12]
 8015f7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015f7e:	6852      	ldr	r2, [r2, #4]
 8015f80:	b2cd      	uxtb	r5, r1
 8015f82:	b18b      	cbz	r3, 8015fa8 <_sungetc_r+0x44>
 8015f84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015f86:	4293      	cmp	r3, r2
 8015f88:	dd08      	ble.n	8015f9c <_sungetc_r+0x38>
 8015f8a:	6823      	ldr	r3, [r4, #0]
 8015f8c:	1e5a      	subs	r2, r3, #1
 8015f8e:	6022      	str	r2, [r4, #0]
 8015f90:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015f94:	6863      	ldr	r3, [r4, #4]
 8015f96:	3301      	adds	r3, #1
 8015f98:	6063      	str	r3, [r4, #4]
 8015f9a:	e7e9      	b.n	8015f70 <_sungetc_r+0xc>
 8015f9c:	4621      	mov	r1, r4
 8015f9e:	f000 fcad 	bl	80168fc <__submore>
 8015fa2:	2800      	cmp	r0, #0
 8015fa4:	d0f1      	beq.n	8015f8a <_sungetc_r+0x26>
 8015fa6:	e7e1      	b.n	8015f6c <_sungetc_r+0x8>
 8015fa8:	6921      	ldr	r1, [r4, #16]
 8015faa:	6823      	ldr	r3, [r4, #0]
 8015fac:	b151      	cbz	r1, 8015fc4 <_sungetc_r+0x60>
 8015fae:	4299      	cmp	r1, r3
 8015fb0:	d208      	bcs.n	8015fc4 <_sungetc_r+0x60>
 8015fb2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015fb6:	42a9      	cmp	r1, r5
 8015fb8:	d104      	bne.n	8015fc4 <_sungetc_r+0x60>
 8015fba:	3b01      	subs	r3, #1
 8015fbc:	3201      	adds	r2, #1
 8015fbe:	6023      	str	r3, [r4, #0]
 8015fc0:	6062      	str	r2, [r4, #4]
 8015fc2:	e7d5      	b.n	8015f70 <_sungetc_r+0xc>
 8015fc4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8015fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015fcc:	6363      	str	r3, [r4, #52]	; 0x34
 8015fce:	2303      	movs	r3, #3
 8015fd0:	63a3      	str	r3, [r4, #56]	; 0x38
 8015fd2:	4623      	mov	r3, r4
 8015fd4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015fd8:	6023      	str	r3, [r4, #0]
 8015fda:	2301      	movs	r3, #1
 8015fdc:	e7dc      	b.n	8015f98 <_sungetc_r+0x34>

08015fde <__ssrefill_r>:
 8015fde:	b510      	push	{r4, lr}
 8015fe0:	460c      	mov	r4, r1
 8015fe2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015fe4:	b169      	cbz	r1, 8016002 <__ssrefill_r+0x24>
 8015fe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015fea:	4299      	cmp	r1, r3
 8015fec:	d001      	beq.n	8015ff2 <__ssrefill_r+0x14>
 8015fee:	f7fb f97b 	bl	80112e8 <_free_r>
 8015ff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015ff4:	6063      	str	r3, [r4, #4]
 8015ff6:	2000      	movs	r0, #0
 8015ff8:	6360      	str	r0, [r4, #52]	; 0x34
 8015ffa:	b113      	cbz	r3, 8016002 <__ssrefill_r+0x24>
 8015ffc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015ffe:	6023      	str	r3, [r4, #0]
 8016000:	bd10      	pop	{r4, pc}
 8016002:	6923      	ldr	r3, [r4, #16]
 8016004:	6023      	str	r3, [r4, #0]
 8016006:	2300      	movs	r3, #0
 8016008:	6063      	str	r3, [r4, #4]
 801600a:	89a3      	ldrh	r3, [r4, #12]
 801600c:	f043 0320 	orr.w	r3, r3, #32
 8016010:	81a3      	strh	r3, [r4, #12]
 8016012:	f04f 30ff 	mov.w	r0, #4294967295
 8016016:	e7f3      	b.n	8016000 <__ssrefill_r+0x22>

08016018 <__ssvfiscanf_r>:
 8016018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801601c:	460c      	mov	r4, r1
 801601e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016022:	2100      	movs	r1, #0
 8016024:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016028:	49b2      	ldr	r1, [pc, #712]	; (80162f4 <__ssvfiscanf_r+0x2dc>)
 801602a:	91a0      	str	r1, [sp, #640]	; 0x280
 801602c:	f10d 0804 	add.w	r8, sp, #4
 8016030:	49b1      	ldr	r1, [pc, #708]	; (80162f8 <__ssvfiscanf_r+0x2e0>)
 8016032:	4fb2      	ldr	r7, [pc, #712]	; (80162fc <__ssvfiscanf_r+0x2e4>)
 8016034:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8016300 <__ssvfiscanf_r+0x2e8>
 8016038:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801603c:	4606      	mov	r6, r0
 801603e:	91a1      	str	r1, [sp, #644]	; 0x284
 8016040:	9300      	str	r3, [sp, #0]
 8016042:	f892 a000 	ldrb.w	sl, [r2]
 8016046:	f1ba 0f00 	cmp.w	sl, #0
 801604a:	f000 8151 	beq.w	80162f0 <__ssvfiscanf_r+0x2d8>
 801604e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8016052:	f013 0308 	ands.w	r3, r3, #8
 8016056:	f102 0501 	add.w	r5, r2, #1
 801605a:	d019      	beq.n	8016090 <__ssvfiscanf_r+0x78>
 801605c:	6863      	ldr	r3, [r4, #4]
 801605e:	2b00      	cmp	r3, #0
 8016060:	dd0f      	ble.n	8016082 <__ssvfiscanf_r+0x6a>
 8016062:	6823      	ldr	r3, [r4, #0]
 8016064:	781a      	ldrb	r2, [r3, #0]
 8016066:	5cba      	ldrb	r2, [r7, r2]
 8016068:	0712      	lsls	r2, r2, #28
 801606a:	d401      	bmi.n	8016070 <__ssvfiscanf_r+0x58>
 801606c:	462a      	mov	r2, r5
 801606e:	e7e8      	b.n	8016042 <__ssvfiscanf_r+0x2a>
 8016070:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016072:	3201      	adds	r2, #1
 8016074:	9245      	str	r2, [sp, #276]	; 0x114
 8016076:	6862      	ldr	r2, [r4, #4]
 8016078:	3301      	adds	r3, #1
 801607a:	3a01      	subs	r2, #1
 801607c:	6062      	str	r2, [r4, #4]
 801607e:	6023      	str	r3, [r4, #0]
 8016080:	e7ec      	b.n	801605c <__ssvfiscanf_r+0x44>
 8016082:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016084:	4621      	mov	r1, r4
 8016086:	4630      	mov	r0, r6
 8016088:	4798      	blx	r3
 801608a:	2800      	cmp	r0, #0
 801608c:	d0e9      	beq.n	8016062 <__ssvfiscanf_r+0x4a>
 801608e:	e7ed      	b.n	801606c <__ssvfiscanf_r+0x54>
 8016090:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8016094:	f040 8083 	bne.w	801619e <__ssvfiscanf_r+0x186>
 8016098:	9341      	str	r3, [sp, #260]	; 0x104
 801609a:	9343      	str	r3, [sp, #268]	; 0x10c
 801609c:	7853      	ldrb	r3, [r2, #1]
 801609e:	2b2a      	cmp	r3, #42	; 0x2a
 80160a0:	bf02      	ittt	eq
 80160a2:	2310      	moveq	r3, #16
 80160a4:	1c95      	addeq	r5, r2, #2
 80160a6:	9341      	streq	r3, [sp, #260]	; 0x104
 80160a8:	220a      	movs	r2, #10
 80160aa:	46ab      	mov	fp, r5
 80160ac:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80160b0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80160b4:	2b09      	cmp	r3, #9
 80160b6:	d91d      	bls.n	80160f4 <__ssvfiscanf_r+0xdc>
 80160b8:	4891      	ldr	r0, [pc, #580]	; (8016300 <__ssvfiscanf_r+0x2e8>)
 80160ba:	2203      	movs	r2, #3
 80160bc:	f7ea f8b0 	bl	8000220 <memchr>
 80160c0:	b140      	cbz	r0, 80160d4 <__ssvfiscanf_r+0xbc>
 80160c2:	2301      	movs	r3, #1
 80160c4:	eba0 0009 	sub.w	r0, r0, r9
 80160c8:	fa03 f000 	lsl.w	r0, r3, r0
 80160cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80160ce:	4318      	orrs	r0, r3
 80160d0:	9041      	str	r0, [sp, #260]	; 0x104
 80160d2:	465d      	mov	r5, fp
 80160d4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80160d8:	2b78      	cmp	r3, #120	; 0x78
 80160da:	d806      	bhi.n	80160ea <__ssvfiscanf_r+0xd2>
 80160dc:	2b57      	cmp	r3, #87	; 0x57
 80160de:	d810      	bhi.n	8016102 <__ssvfiscanf_r+0xea>
 80160e0:	2b25      	cmp	r3, #37	; 0x25
 80160e2:	d05c      	beq.n	801619e <__ssvfiscanf_r+0x186>
 80160e4:	d856      	bhi.n	8016194 <__ssvfiscanf_r+0x17c>
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d074      	beq.n	80161d4 <__ssvfiscanf_r+0x1bc>
 80160ea:	2303      	movs	r3, #3
 80160ec:	9347      	str	r3, [sp, #284]	; 0x11c
 80160ee:	230a      	movs	r3, #10
 80160f0:	9342      	str	r3, [sp, #264]	; 0x108
 80160f2:	e081      	b.n	80161f8 <__ssvfiscanf_r+0x1e0>
 80160f4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80160f6:	fb02 1303 	mla	r3, r2, r3, r1
 80160fa:	3b30      	subs	r3, #48	; 0x30
 80160fc:	9343      	str	r3, [sp, #268]	; 0x10c
 80160fe:	465d      	mov	r5, fp
 8016100:	e7d3      	b.n	80160aa <__ssvfiscanf_r+0x92>
 8016102:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8016106:	2a20      	cmp	r2, #32
 8016108:	d8ef      	bhi.n	80160ea <__ssvfiscanf_r+0xd2>
 801610a:	a101      	add	r1, pc, #4	; (adr r1, 8016110 <__ssvfiscanf_r+0xf8>)
 801610c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016110:	080161e3 	.word	0x080161e3
 8016114:	080160eb 	.word	0x080160eb
 8016118:	080160eb 	.word	0x080160eb
 801611c:	08016241 	.word	0x08016241
 8016120:	080160eb 	.word	0x080160eb
 8016124:	080160eb 	.word	0x080160eb
 8016128:	080160eb 	.word	0x080160eb
 801612c:	080160eb 	.word	0x080160eb
 8016130:	080160eb 	.word	0x080160eb
 8016134:	080160eb 	.word	0x080160eb
 8016138:	080160eb 	.word	0x080160eb
 801613c:	08016257 	.word	0x08016257
 8016140:	0801622d 	.word	0x0801622d
 8016144:	0801619b 	.word	0x0801619b
 8016148:	0801619b 	.word	0x0801619b
 801614c:	0801619b 	.word	0x0801619b
 8016150:	080160eb 	.word	0x080160eb
 8016154:	08016231 	.word	0x08016231
 8016158:	080160eb 	.word	0x080160eb
 801615c:	080160eb 	.word	0x080160eb
 8016160:	080160eb 	.word	0x080160eb
 8016164:	080160eb 	.word	0x080160eb
 8016168:	08016267 	.word	0x08016267
 801616c:	08016239 	.word	0x08016239
 8016170:	080161db 	.word	0x080161db
 8016174:	080160eb 	.word	0x080160eb
 8016178:	080160eb 	.word	0x080160eb
 801617c:	08016263 	.word	0x08016263
 8016180:	080160eb 	.word	0x080160eb
 8016184:	0801622d 	.word	0x0801622d
 8016188:	080160eb 	.word	0x080160eb
 801618c:	080160eb 	.word	0x080160eb
 8016190:	080161e3 	.word	0x080161e3
 8016194:	3b45      	subs	r3, #69	; 0x45
 8016196:	2b02      	cmp	r3, #2
 8016198:	d8a7      	bhi.n	80160ea <__ssvfiscanf_r+0xd2>
 801619a:	2305      	movs	r3, #5
 801619c:	e02b      	b.n	80161f6 <__ssvfiscanf_r+0x1de>
 801619e:	6863      	ldr	r3, [r4, #4]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	dd0d      	ble.n	80161c0 <__ssvfiscanf_r+0x1a8>
 80161a4:	6823      	ldr	r3, [r4, #0]
 80161a6:	781a      	ldrb	r2, [r3, #0]
 80161a8:	4552      	cmp	r2, sl
 80161aa:	f040 80a1 	bne.w	80162f0 <__ssvfiscanf_r+0x2d8>
 80161ae:	3301      	adds	r3, #1
 80161b0:	6862      	ldr	r2, [r4, #4]
 80161b2:	6023      	str	r3, [r4, #0]
 80161b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80161b6:	3a01      	subs	r2, #1
 80161b8:	3301      	adds	r3, #1
 80161ba:	6062      	str	r2, [r4, #4]
 80161bc:	9345      	str	r3, [sp, #276]	; 0x114
 80161be:	e755      	b.n	801606c <__ssvfiscanf_r+0x54>
 80161c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80161c2:	4621      	mov	r1, r4
 80161c4:	4630      	mov	r0, r6
 80161c6:	4798      	blx	r3
 80161c8:	2800      	cmp	r0, #0
 80161ca:	d0eb      	beq.n	80161a4 <__ssvfiscanf_r+0x18c>
 80161cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80161ce:	2800      	cmp	r0, #0
 80161d0:	f040 8084 	bne.w	80162dc <__ssvfiscanf_r+0x2c4>
 80161d4:	f04f 30ff 	mov.w	r0, #4294967295
 80161d8:	e086      	b.n	80162e8 <__ssvfiscanf_r+0x2d0>
 80161da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80161dc:	f042 0220 	orr.w	r2, r2, #32
 80161e0:	9241      	str	r2, [sp, #260]	; 0x104
 80161e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80161e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80161e8:	9241      	str	r2, [sp, #260]	; 0x104
 80161ea:	2210      	movs	r2, #16
 80161ec:	2b6f      	cmp	r3, #111	; 0x6f
 80161ee:	9242      	str	r2, [sp, #264]	; 0x108
 80161f0:	bf34      	ite	cc
 80161f2:	2303      	movcc	r3, #3
 80161f4:	2304      	movcs	r3, #4
 80161f6:	9347      	str	r3, [sp, #284]	; 0x11c
 80161f8:	6863      	ldr	r3, [r4, #4]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	dd41      	ble.n	8016282 <__ssvfiscanf_r+0x26a>
 80161fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016200:	0659      	lsls	r1, r3, #25
 8016202:	d404      	bmi.n	801620e <__ssvfiscanf_r+0x1f6>
 8016204:	6823      	ldr	r3, [r4, #0]
 8016206:	781a      	ldrb	r2, [r3, #0]
 8016208:	5cba      	ldrb	r2, [r7, r2]
 801620a:	0712      	lsls	r2, r2, #28
 801620c:	d440      	bmi.n	8016290 <__ssvfiscanf_r+0x278>
 801620e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016210:	2b02      	cmp	r3, #2
 8016212:	dc4f      	bgt.n	80162b4 <__ssvfiscanf_r+0x29c>
 8016214:	466b      	mov	r3, sp
 8016216:	4622      	mov	r2, r4
 8016218:	a941      	add	r1, sp, #260	; 0x104
 801621a:	4630      	mov	r0, r6
 801621c:	f000 f9ce 	bl	80165bc <_scanf_chars>
 8016220:	2801      	cmp	r0, #1
 8016222:	d065      	beq.n	80162f0 <__ssvfiscanf_r+0x2d8>
 8016224:	2802      	cmp	r0, #2
 8016226:	f47f af21 	bne.w	801606c <__ssvfiscanf_r+0x54>
 801622a:	e7cf      	b.n	80161cc <__ssvfiscanf_r+0x1b4>
 801622c:	220a      	movs	r2, #10
 801622e:	e7dd      	b.n	80161ec <__ssvfiscanf_r+0x1d4>
 8016230:	2300      	movs	r3, #0
 8016232:	9342      	str	r3, [sp, #264]	; 0x108
 8016234:	2303      	movs	r3, #3
 8016236:	e7de      	b.n	80161f6 <__ssvfiscanf_r+0x1de>
 8016238:	2308      	movs	r3, #8
 801623a:	9342      	str	r3, [sp, #264]	; 0x108
 801623c:	2304      	movs	r3, #4
 801623e:	e7da      	b.n	80161f6 <__ssvfiscanf_r+0x1de>
 8016240:	4629      	mov	r1, r5
 8016242:	4640      	mov	r0, r8
 8016244:	f000 fb20 	bl	8016888 <__sccl>
 8016248:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801624a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801624e:	9341      	str	r3, [sp, #260]	; 0x104
 8016250:	4605      	mov	r5, r0
 8016252:	2301      	movs	r3, #1
 8016254:	e7cf      	b.n	80161f6 <__ssvfiscanf_r+0x1de>
 8016256:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801625c:	9341      	str	r3, [sp, #260]	; 0x104
 801625e:	2300      	movs	r3, #0
 8016260:	e7c9      	b.n	80161f6 <__ssvfiscanf_r+0x1de>
 8016262:	2302      	movs	r3, #2
 8016264:	e7c7      	b.n	80161f6 <__ssvfiscanf_r+0x1de>
 8016266:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016268:	06c3      	lsls	r3, r0, #27
 801626a:	f53f aeff 	bmi.w	801606c <__ssvfiscanf_r+0x54>
 801626e:	9b00      	ldr	r3, [sp, #0]
 8016270:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016272:	1d19      	adds	r1, r3, #4
 8016274:	9100      	str	r1, [sp, #0]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	07c0      	lsls	r0, r0, #31
 801627a:	bf4c      	ite	mi
 801627c:	801a      	strhmi	r2, [r3, #0]
 801627e:	601a      	strpl	r2, [r3, #0]
 8016280:	e6f4      	b.n	801606c <__ssvfiscanf_r+0x54>
 8016282:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016284:	4621      	mov	r1, r4
 8016286:	4630      	mov	r0, r6
 8016288:	4798      	blx	r3
 801628a:	2800      	cmp	r0, #0
 801628c:	d0b7      	beq.n	80161fe <__ssvfiscanf_r+0x1e6>
 801628e:	e79d      	b.n	80161cc <__ssvfiscanf_r+0x1b4>
 8016290:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016292:	3201      	adds	r2, #1
 8016294:	9245      	str	r2, [sp, #276]	; 0x114
 8016296:	6862      	ldr	r2, [r4, #4]
 8016298:	3a01      	subs	r2, #1
 801629a:	2a00      	cmp	r2, #0
 801629c:	6062      	str	r2, [r4, #4]
 801629e:	dd02      	ble.n	80162a6 <__ssvfiscanf_r+0x28e>
 80162a0:	3301      	adds	r3, #1
 80162a2:	6023      	str	r3, [r4, #0]
 80162a4:	e7ae      	b.n	8016204 <__ssvfiscanf_r+0x1ec>
 80162a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80162a8:	4621      	mov	r1, r4
 80162aa:	4630      	mov	r0, r6
 80162ac:	4798      	blx	r3
 80162ae:	2800      	cmp	r0, #0
 80162b0:	d0a8      	beq.n	8016204 <__ssvfiscanf_r+0x1ec>
 80162b2:	e78b      	b.n	80161cc <__ssvfiscanf_r+0x1b4>
 80162b4:	2b04      	cmp	r3, #4
 80162b6:	dc06      	bgt.n	80162c6 <__ssvfiscanf_r+0x2ae>
 80162b8:	466b      	mov	r3, sp
 80162ba:	4622      	mov	r2, r4
 80162bc:	a941      	add	r1, sp, #260	; 0x104
 80162be:	4630      	mov	r0, r6
 80162c0:	f000 f9d4 	bl	801666c <_scanf_i>
 80162c4:	e7ac      	b.n	8016220 <__ssvfiscanf_r+0x208>
 80162c6:	4b0f      	ldr	r3, [pc, #60]	; (8016304 <__ssvfiscanf_r+0x2ec>)
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	f43f aecf 	beq.w	801606c <__ssvfiscanf_r+0x54>
 80162ce:	466b      	mov	r3, sp
 80162d0:	4622      	mov	r2, r4
 80162d2:	a941      	add	r1, sp, #260	; 0x104
 80162d4:	4630      	mov	r0, r6
 80162d6:	f7fb fd1b 	bl	8011d10 <_scanf_float>
 80162da:	e7a1      	b.n	8016220 <__ssvfiscanf_r+0x208>
 80162dc:	89a3      	ldrh	r3, [r4, #12]
 80162de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80162e2:	bf18      	it	ne
 80162e4:	f04f 30ff 	movne.w	r0, #4294967295
 80162e8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80162ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162f0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80162f2:	e7f9      	b.n	80162e8 <__ssvfiscanf_r+0x2d0>
 80162f4:	08015f65 	.word	0x08015f65
 80162f8:	08015fdf 	.word	0x08015fdf
 80162fc:	08018979 	.word	0x08018979
 8016300:	08018cda 	.word	0x08018cda
 8016304:	08011d11 	.word	0x08011d11

08016308 <__sfputc_r>:
 8016308:	6893      	ldr	r3, [r2, #8]
 801630a:	3b01      	subs	r3, #1
 801630c:	2b00      	cmp	r3, #0
 801630e:	b410      	push	{r4}
 8016310:	6093      	str	r3, [r2, #8]
 8016312:	da08      	bge.n	8016326 <__sfputc_r+0x1e>
 8016314:	6994      	ldr	r4, [r2, #24]
 8016316:	42a3      	cmp	r3, r4
 8016318:	db01      	blt.n	801631e <__sfputc_r+0x16>
 801631a:	290a      	cmp	r1, #10
 801631c:	d103      	bne.n	8016326 <__sfputc_r+0x1e>
 801631e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016322:	f7fd ba75 	b.w	8013810 <__swbuf_r>
 8016326:	6813      	ldr	r3, [r2, #0]
 8016328:	1c58      	adds	r0, r3, #1
 801632a:	6010      	str	r0, [r2, #0]
 801632c:	7019      	strb	r1, [r3, #0]
 801632e:	4608      	mov	r0, r1
 8016330:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016334:	4770      	bx	lr

08016336 <__sfputs_r>:
 8016336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016338:	4606      	mov	r6, r0
 801633a:	460f      	mov	r7, r1
 801633c:	4614      	mov	r4, r2
 801633e:	18d5      	adds	r5, r2, r3
 8016340:	42ac      	cmp	r4, r5
 8016342:	d101      	bne.n	8016348 <__sfputs_r+0x12>
 8016344:	2000      	movs	r0, #0
 8016346:	e007      	b.n	8016358 <__sfputs_r+0x22>
 8016348:	f814 1b01 	ldrb.w	r1, [r4], #1
 801634c:	463a      	mov	r2, r7
 801634e:	4630      	mov	r0, r6
 8016350:	f7ff ffda 	bl	8016308 <__sfputc_r>
 8016354:	1c43      	adds	r3, r0, #1
 8016356:	d1f3      	bne.n	8016340 <__sfputs_r+0xa>
 8016358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801635c <_vfiprintf_r>:
 801635c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016360:	460d      	mov	r5, r1
 8016362:	b09d      	sub	sp, #116	; 0x74
 8016364:	4614      	mov	r4, r2
 8016366:	4698      	mov	r8, r3
 8016368:	4606      	mov	r6, r0
 801636a:	b118      	cbz	r0, 8016374 <_vfiprintf_r+0x18>
 801636c:	6983      	ldr	r3, [r0, #24]
 801636e:	b90b      	cbnz	r3, 8016374 <_vfiprintf_r+0x18>
 8016370:	f7fa fb18 	bl	80109a4 <__sinit>
 8016374:	4b89      	ldr	r3, [pc, #548]	; (801659c <_vfiprintf_r+0x240>)
 8016376:	429d      	cmp	r5, r3
 8016378:	d11b      	bne.n	80163b2 <_vfiprintf_r+0x56>
 801637a:	6875      	ldr	r5, [r6, #4]
 801637c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801637e:	07d9      	lsls	r1, r3, #31
 8016380:	d405      	bmi.n	801638e <_vfiprintf_r+0x32>
 8016382:	89ab      	ldrh	r3, [r5, #12]
 8016384:	059a      	lsls	r2, r3, #22
 8016386:	d402      	bmi.n	801638e <_vfiprintf_r+0x32>
 8016388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801638a:	f7fa fceb 	bl	8010d64 <__retarget_lock_acquire_recursive>
 801638e:	89ab      	ldrh	r3, [r5, #12]
 8016390:	071b      	lsls	r3, r3, #28
 8016392:	d501      	bpl.n	8016398 <_vfiprintf_r+0x3c>
 8016394:	692b      	ldr	r3, [r5, #16]
 8016396:	b9eb      	cbnz	r3, 80163d4 <_vfiprintf_r+0x78>
 8016398:	4629      	mov	r1, r5
 801639a:	4630      	mov	r0, r6
 801639c:	f7fd fa9c 	bl	80138d8 <__swsetup_r>
 80163a0:	b1c0      	cbz	r0, 80163d4 <_vfiprintf_r+0x78>
 80163a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80163a4:	07dc      	lsls	r4, r3, #31
 80163a6:	d50e      	bpl.n	80163c6 <_vfiprintf_r+0x6a>
 80163a8:	f04f 30ff 	mov.w	r0, #4294967295
 80163ac:	b01d      	add	sp, #116	; 0x74
 80163ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163b2:	4b7b      	ldr	r3, [pc, #492]	; (80165a0 <_vfiprintf_r+0x244>)
 80163b4:	429d      	cmp	r5, r3
 80163b6:	d101      	bne.n	80163bc <_vfiprintf_r+0x60>
 80163b8:	68b5      	ldr	r5, [r6, #8]
 80163ba:	e7df      	b.n	801637c <_vfiprintf_r+0x20>
 80163bc:	4b79      	ldr	r3, [pc, #484]	; (80165a4 <_vfiprintf_r+0x248>)
 80163be:	429d      	cmp	r5, r3
 80163c0:	bf08      	it	eq
 80163c2:	68f5      	ldreq	r5, [r6, #12]
 80163c4:	e7da      	b.n	801637c <_vfiprintf_r+0x20>
 80163c6:	89ab      	ldrh	r3, [r5, #12]
 80163c8:	0598      	lsls	r0, r3, #22
 80163ca:	d4ed      	bmi.n	80163a8 <_vfiprintf_r+0x4c>
 80163cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163ce:	f7fa fccb 	bl	8010d68 <__retarget_lock_release_recursive>
 80163d2:	e7e9      	b.n	80163a8 <_vfiprintf_r+0x4c>
 80163d4:	2300      	movs	r3, #0
 80163d6:	9309      	str	r3, [sp, #36]	; 0x24
 80163d8:	2320      	movs	r3, #32
 80163da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80163de:	f8cd 800c 	str.w	r8, [sp, #12]
 80163e2:	2330      	movs	r3, #48	; 0x30
 80163e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80165a8 <_vfiprintf_r+0x24c>
 80163e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80163ec:	f04f 0901 	mov.w	r9, #1
 80163f0:	4623      	mov	r3, r4
 80163f2:	469a      	mov	sl, r3
 80163f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163f8:	b10a      	cbz	r2, 80163fe <_vfiprintf_r+0xa2>
 80163fa:	2a25      	cmp	r2, #37	; 0x25
 80163fc:	d1f9      	bne.n	80163f2 <_vfiprintf_r+0x96>
 80163fe:	ebba 0b04 	subs.w	fp, sl, r4
 8016402:	d00b      	beq.n	801641c <_vfiprintf_r+0xc0>
 8016404:	465b      	mov	r3, fp
 8016406:	4622      	mov	r2, r4
 8016408:	4629      	mov	r1, r5
 801640a:	4630      	mov	r0, r6
 801640c:	f7ff ff93 	bl	8016336 <__sfputs_r>
 8016410:	3001      	adds	r0, #1
 8016412:	f000 80aa 	beq.w	801656a <_vfiprintf_r+0x20e>
 8016416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016418:	445a      	add	r2, fp
 801641a:	9209      	str	r2, [sp, #36]	; 0x24
 801641c:	f89a 3000 	ldrb.w	r3, [sl]
 8016420:	2b00      	cmp	r3, #0
 8016422:	f000 80a2 	beq.w	801656a <_vfiprintf_r+0x20e>
 8016426:	2300      	movs	r3, #0
 8016428:	f04f 32ff 	mov.w	r2, #4294967295
 801642c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016430:	f10a 0a01 	add.w	sl, sl, #1
 8016434:	9304      	str	r3, [sp, #16]
 8016436:	9307      	str	r3, [sp, #28]
 8016438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801643c:	931a      	str	r3, [sp, #104]	; 0x68
 801643e:	4654      	mov	r4, sl
 8016440:	2205      	movs	r2, #5
 8016442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016446:	4858      	ldr	r0, [pc, #352]	; (80165a8 <_vfiprintf_r+0x24c>)
 8016448:	f7e9 feea 	bl	8000220 <memchr>
 801644c:	9a04      	ldr	r2, [sp, #16]
 801644e:	b9d8      	cbnz	r0, 8016488 <_vfiprintf_r+0x12c>
 8016450:	06d1      	lsls	r1, r2, #27
 8016452:	bf44      	itt	mi
 8016454:	2320      	movmi	r3, #32
 8016456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801645a:	0713      	lsls	r3, r2, #28
 801645c:	bf44      	itt	mi
 801645e:	232b      	movmi	r3, #43	; 0x2b
 8016460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016464:	f89a 3000 	ldrb.w	r3, [sl]
 8016468:	2b2a      	cmp	r3, #42	; 0x2a
 801646a:	d015      	beq.n	8016498 <_vfiprintf_r+0x13c>
 801646c:	9a07      	ldr	r2, [sp, #28]
 801646e:	4654      	mov	r4, sl
 8016470:	2000      	movs	r0, #0
 8016472:	f04f 0c0a 	mov.w	ip, #10
 8016476:	4621      	mov	r1, r4
 8016478:	f811 3b01 	ldrb.w	r3, [r1], #1
 801647c:	3b30      	subs	r3, #48	; 0x30
 801647e:	2b09      	cmp	r3, #9
 8016480:	d94e      	bls.n	8016520 <_vfiprintf_r+0x1c4>
 8016482:	b1b0      	cbz	r0, 80164b2 <_vfiprintf_r+0x156>
 8016484:	9207      	str	r2, [sp, #28]
 8016486:	e014      	b.n	80164b2 <_vfiprintf_r+0x156>
 8016488:	eba0 0308 	sub.w	r3, r0, r8
 801648c:	fa09 f303 	lsl.w	r3, r9, r3
 8016490:	4313      	orrs	r3, r2
 8016492:	9304      	str	r3, [sp, #16]
 8016494:	46a2      	mov	sl, r4
 8016496:	e7d2      	b.n	801643e <_vfiprintf_r+0xe2>
 8016498:	9b03      	ldr	r3, [sp, #12]
 801649a:	1d19      	adds	r1, r3, #4
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	9103      	str	r1, [sp, #12]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	bfbb      	ittet	lt
 80164a4:	425b      	neglt	r3, r3
 80164a6:	f042 0202 	orrlt.w	r2, r2, #2
 80164aa:	9307      	strge	r3, [sp, #28]
 80164ac:	9307      	strlt	r3, [sp, #28]
 80164ae:	bfb8      	it	lt
 80164b0:	9204      	strlt	r2, [sp, #16]
 80164b2:	7823      	ldrb	r3, [r4, #0]
 80164b4:	2b2e      	cmp	r3, #46	; 0x2e
 80164b6:	d10c      	bne.n	80164d2 <_vfiprintf_r+0x176>
 80164b8:	7863      	ldrb	r3, [r4, #1]
 80164ba:	2b2a      	cmp	r3, #42	; 0x2a
 80164bc:	d135      	bne.n	801652a <_vfiprintf_r+0x1ce>
 80164be:	9b03      	ldr	r3, [sp, #12]
 80164c0:	1d1a      	adds	r2, r3, #4
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	9203      	str	r2, [sp, #12]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	bfb8      	it	lt
 80164ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80164ce:	3402      	adds	r4, #2
 80164d0:	9305      	str	r3, [sp, #20]
 80164d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80165b8 <_vfiprintf_r+0x25c>
 80164d6:	7821      	ldrb	r1, [r4, #0]
 80164d8:	2203      	movs	r2, #3
 80164da:	4650      	mov	r0, sl
 80164dc:	f7e9 fea0 	bl	8000220 <memchr>
 80164e0:	b140      	cbz	r0, 80164f4 <_vfiprintf_r+0x198>
 80164e2:	2340      	movs	r3, #64	; 0x40
 80164e4:	eba0 000a 	sub.w	r0, r0, sl
 80164e8:	fa03 f000 	lsl.w	r0, r3, r0
 80164ec:	9b04      	ldr	r3, [sp, #16]
 80164ee:	4303      	orrs	r3, r0
 80164f0:	3401      	adds	r4, #1
 80164f2:	9304      	str	r3, [sp, #16]
 80164f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164f8:	482c      	ldr	r0, [pc, #176]	; (80165ac <_vfiprintf_r+0x250>)
 80164fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80164fe:	2206      	movs	r2, #6
 8016500:	f7e9 fe8e 	bl	8000220 <memchr>
 8016504:	2800      	cmp	r0, #0
 8016506:	d03f      	beq.n	8016588 <_vfiprintf_r+0x22c>
 8016508:	4b29      	ldr	r3, [pc, #164]	; (80165b0 <_vfiprintf_r+0x254>)
 801650a:	bb1b      	cbnz	r3, 8016554 <_vfiprintf_r+0x1f8>
 801650c:	9b03      	ldr	r3, [sp, #12]
 801650e:	3307      	adds	r3, #7
 8016510:	f023 0307 	bic.w	r3, r3, #7
 8016514:	3308      	adds	r3, #8
 8016516:	9303      	str	r3, [sp, #12]
 8016518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801651a:	443b      	add	r3, r7
 801651c:	9309      	str	r3, [sp, #36]	; 0x24
 801651e:	e767      	b.n	80163f0 <_vfiprintf_r+0x94>
 8016520:	fb0c 3202 	mla	r2, ip, r2, r3
 8016524:	460c      	mov	r4, r1
 8016526:	2001      	movs	r0, #1
 8016528:	e7a5      	b.n	8016476 <_vfiprintf_r+0x11a>
 801652a:	2300      	movs	r3, #0
 801652c:	3401      	adds	r4, #1
 801652e:	9305      	str	r3, [sp, #20]
 8016530:	4619      	mov	r1, r3
 8016532:	f04f 0c0a 	mov.w	ip, #10
 8016536:	4620      	mov	r0, r4
 8016538:	f810 2b01 	ldrb.w	r2, [r0], #1
 801653c:	3a30      	subs	r2, #48	; 0x30
 801653e:	2a09      	cmp	r2, #9
 8016540:	d903      	bls.n	801654a <_vfiprintf_r+0x1ee>
 8016542:	2b00      	cmp	r3, #0
 8016544:	d0c5      	beq.n	80164d2 <_vfiprintf_r+0x176>
 8016546:	9105      	str	r1, [sp, #20]
 8016548:	e7c3      	b.n	80164d2 <_vfiprintf_r+0x176>
 801654a:	fb0c 2101 	mla	r1, ip, r1, r2
 801654e:	4604      	mov	r4, r0
 8016550:	2301      	movs	r3, #1
 8016552:	e7f0      	b.n	8016536 <_vfiprintf_r+0x1da>
 8016554:	ab03      	add	r3, sp, #12
 8016556:	9300      	str	r3, [sp, #0]
 8016558:	462a      	mov	r2, r5
 801655a:	4b16      	ldr	r3, [pc, #88]	; (80165b4 <_vfiprintf_r+0x258>)
 801655c:	a904      	add	r1, sp, #16
 801655e:	4630      	mov	r0, r6
 8016560:	f7fb f80c 	bl	801157c <_printf_float>
 8016564:	4607      	mov	r7, r0
 8016566:	1c78      	adds	r0, r7, #1
 8016568:	d1d6      	bne.n	8016518 <_vfiprintf_r+0x1bc>
 801656a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801656c:	07d9      	lsls	r1, r3, #31
 801656e:	d405      	bmi.n	801657c <_vfiprintf_r+0x220>
 8016570:	89ab      	ldrh	r3, [r5, #12]
 8016572:	059a      	lsls	r2, r3, #22
 8016574:	d402      	bmi.n	801657c <_vfiprintf_r+0x220>
 8016576:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016578:	f7fa fbf6 	bl	8010d68 <__retarget_lock_release_recursive>
 801657c:	89ab      	ldrh	r3, [r5, #12]
 801657e:	065b      	lsls	r3, r3, #25
 8016580:	f53f af12 	bmi.w	80163a8 <_vfiprintf_r+0x4c>
 8016584:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016586:	e711      	b.n	80163ac <_vfiprintf_r+0x50>
 8016588:	ab03      	add	r3, sp, #12
 801658a:	9300      	str	r3, [sp, #0]
 801658c:	462a      	mov	r2, r5
 801658e:	4b09      	ldr	r3, [pc, #36]	; (80165b4 <_vfiprintf_r+0x258>)
 8016590:	a904      	add	r1, sp, #16
 8016592:	4630      	mov	r0, r6
 8016594:	f7fb fa96 	bl	8011ac4 <_printf_i>
 8016598:	e7e4      	b.n	8016564 <_vfiprintf_r+0x208>
 801659a:	bf00      	nop
 801659c:	080186f8 	.word	0x080186f8
 80165a0:	08018718 	.word	0x08018718
 80165a4:	080186d8 	.word	0x080186d8
 80165a8:	08018cd4 	.word	0x08018cd4
 80165ac:	08018cde 	.word	0x08018cde
 80165b0:	0801157d 	.word	0x0801157d
 80165b4:	08016337 	.word	0x08016337
 80165b8:	08018cda 	.word	0x08018cda

080165bc <_scanf_chars>:
 80165bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165c0:	4615      	mov	r5, r2
 80165c2:	688a      	ldr	r2, [r1, #8]
 80165c4:	4680      	mov	r8, r0
 80165c6:	460c      	mov	r4, r1
 80165c8:	b932      	cbnz	r2, 80165d8 <_scanf_chars+0x1c>
 80165ca:	698a      	ldr	r2, [r1, #24]
 80165cc:	2a00      	cmp	r2, #0
 80165ce:	bf0c      	ite	eq
 80165d0:	2201      	moveq	r2, #1
 80165d2:	f04f 32ff 	movne.w	r2, #4294967295
 80165d6:	608a      	str	r2, [r1, #8]
 80165d8:	6822      	ldr	r2, [r4, #0]
 80165da:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8016668 <_scanf_chars+0xac>
 80165de:	06d1      	lsls	r1, r2, #27
 80165e0:	bf5f      	itttt	pl
 80165e2:	681a      	ldrpl	r2, [r3, #0]
 80165e4:	1d11      	addpl	r1, r2, #4
 80165e6:	6019      	strpl	r1, [r3, #0]
 80165e8:	6816      	ldrpl	r6, [r2, #0]
 80165ea:	2700      	movs	r7, #0
 80165ec:	69a0      	ldr	r0, [r4, #24]
 80165ee:	b188      	cbz	r0, 8016614 <_scanf_chars+0x58>
 80165f0:	2801      	cmp	r0, #1
 80165f2:	d107      	bne.n	8016604 <_scanf_chars+0x48>
 80165f4:	682b      	ldr	r3, [r5, #0]
 80165f6:	781a      	ldrb	r2, [r3, #0]
 80165f8:	6963      	ldr	r3, [r4, #20]
 80165fa:	5c9b      	ldrb	r3, [r3, r2]
 80165fc:	b953      	cbnz	r3, 8016614 <_scanf_chars+0x58>
 80165fe:	bb27      	cbnz	r7, 801664a <_scanf_chars+0x8e>
 8016600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016604:	2802      	cmp	r0, #2
 8016606:	d120      	bne.n	801664a <_scanf_chars+0x8e>
 8016608:	682b      	ldr	r3, [r5, #0]
 801660a:	781b      	ldrb	r3, [r3, #0]
 801660c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016610:	071b      	lsls	r3, r3, #28
 8016612:	d41a      	bmi.n	801664a <_scanf_chars+0x8e>
 8016614:	6823      	ldr	r3, [r4, #0]
 8016616:	06da      	lsls	r2, r3, #27
 8016618:	bf5e      	ittt	pl
 801661a:	682b      	ldrpl	r3, [r5, #0]
 801661c:	781b      	ldrbpl	r3, [r3, #0]
 801661e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016622:	682a      	ldr	r2, [r5, #0]
 8016624:	686b      	ldr	r3, [r5, #4]
 8016626:	3201      	adds	r2, #1
 8016628:	602a      	str	r2, [r5, #0]
 801662a:	68a2      	ldr	r2, [r4, #8]
 801662c:	3b01      	subs	r3, #1
 801662e:	3a01      	subs	r2, #1
 8016630:	606b      	str	r3, [r5, #4]
 8016632:	3701      	adds	r7, #1
 8016634:	60a2      	str	r2, [r4, #8]
 8016636:	b142      	cbz	r2, 801664a <_scanf_chars+0x8e>
 8016638:	2b00      	cmp	r3, #0
 801663a:	dcd7      	bgt.n	80165ec <_scanf_chars+0x30>
 801663c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016640:	4629      	mov	r1, r5
 8016642:	4640      	mov	r0, r8
 8016644:	4798      	blx	r3
 8016646:	2800      	cmp	r0, #0
 8016648:	d0d0      	beq.n	80165ec <_scanf_chars+0x30>
 801664a:	6823      	ldr	r3, [r4, #0]
 801664c:	f013 0310 	ands.w	r3, r3, #16
 8016650:	d105      	bne.n	801665e <_scanf_chars+0xa2>
 8016652:	68e2      	ldr	r2, [r4, #12]
 8016654:	3201      	adds	r2, #1
 8016656:	60e2      	str	r2, [r4, #12]
 8016658:	69a2      	ldr	r2, [r4, #24]
 801665a:	b102      	cbz	r2, 801665e <_scanf_chars+0xa2>
 801665c:	7033      	strb	r3, [r6, #0]
 801665e:	6923      	ldr	r3, [r4, #16]
 8016660:	441f      	add	r7, r3
 8016662:	6127      	str	r7, [r4, #16]
 8016664:	2000      	movs	r0, #0
 8016666:	e7cb      	b.n	8016600 <_scanf_chars+0x44>
 8016668:	08018979 	.word	0x08018979

0801666c <_scanf_i>:
 801666c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016670:	4698      	mov	r8, r3
 8016672:	4b74      	ldr	r3, [pc, #464]	; (8016844 <_scanf_i+0x1d8>)
 8016674:	460c      	mov	r4, r1
 8016676:	4682      	mov	sl, r0
 8016678:	4616      	mov	r6, r2
 801667a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801667e:	b087      	sub	sp, #28
 8016680:	ab03      	add	r3, sp, #12
 8016682:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016686:	4b70      	ldr	r3, [pc, #448]	; (8016848 <_scanf_i+0x1dc>)
 8016688:	69a1      	ldr	r1, [r4, #24]
 801668a:	4a70      	ldr	r2, [pc, #448]	; (801684c <_scanf_i+0x1e0>)
 801668c:	2903      	cmp	r1, #3
 801668e:	bf18      	it	ne
 8016690:	461a      	movne	r2, r3
 8016692:	68a3      	ldr	r3, [r4, #8]
 8016694:	9201      	str	r2, [sp, #4]
 8016696:	1e5a      	subs	r2, r3, #1
 8016698:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801669c:	bf88      	it	hi
 801669e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80166a2:	4627      	mov	r7, r4
 80166a4:	bf82      	ittt	hi
 80166a6:	eb03 0905 	addhi.w	r9, r3, r5
 80166aa:	f240 135d 	movwhi	r3, #349	; 0x15d
 80166ae:	60a3      	strhi	r3, [r4, #8]
 80166b0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80166b4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80166b8:	bf98      	it	ls
 80166ba:	f04f 0900 	movls.w	r9, #0
 80166be:	6023      	str	r3, [r4, #0]
 80166c0:	463d      	mov	r5, r7
 80166c2:	f04f 0b00 	mov.w	fp, #0
 80166c6:	6831      	ldr	r1, [r6, #0]
 80166c8:	ab03      	add	r3, sp, #12
 80166ca:	7809      	ldrb	r1, [r1, #0]
 80166cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80166d0:	2202      	movs	r2, #2
 80166d2:	f7e9 fda5 	bl	8000220 <memchr>
 80166d6:	b328      	cbz	r0, 8016724 <_scanf_i+0xb8>
 80166d8:	f1bb 0f01 	cmp.w	fp, #1
 80166dc:	d159      	bne.n	8016792 <_scanf_i+0x126>
 80166de:	6862      	ldr	r2, [r4, #4]
 80166e0:	b92a      	cbnz	r2, 80166ee <_scanf_i+0x82>
 80166e2:	6822      	ldr	r2, [r4, #0]
 80166e4:	2308      	movs	r3, #8
 80166e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80166ea:	6063      	str	r3, [r4, #4]
 80166ec:	6022      	str	r2, [r4, #0]
 80166ee:	6822      	ldr	r2, [r4, #0]
 80166f0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80166f4:	6022      	str	r2, [r4, #0]
 80166f6:	68a2      	ldr	r2, [r4, #8]
 80166f8:	1e51      	subs	r1, r2, #1
 80166fa:	60a1      	str	r1, [r4, #8]
 80166fc:	b192      	cbz	r2, 8016724 <_scanf_i+0xb8>
 80166fe:	6832      	ldr	r2, [r6, #0]
 8016700:	1c51      	adds	r1, r2, #1
 8016702:	6031      	str	r1, [r6, #0]
 8016704:	7812      	ldrb	r2, [r2, #0]
 8016706:	f805 2b01 	strb.w	r2, [r5], #1
 801670a:	6872      	ldr	r2, [r6, #4]
 801670c:	3a01      	subs	r2, #1
 801670e:	2a00      	cmp	r2, #0
 8016710:	6072      	str	r2, [r6, #4]
 8016712:	dc07      	bgt.n	8016724 <_scanf_i+0xb8>
 8016714:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016718:	4631      	mov	r1, r6
 801671a:	4650      	mov	r0, sl
 801671c:	4790      	blx	r2
 801671e:	2800      	cmp	r0, #0
 8016720:	f040 8085 	bne.w	801682e <_scanf_i+0x1c2>
 8016724:	f10b 0b01 	add.w	fp, fp, #1
 8016728:	f1bb 0f03 	cmp.w	fp, #3
 801672c:	d1cb      	bne.n	80166c6 <_scanf_i+0x5a>
 801672e:	6863      	ldr	r3, [r4, #4]
 8016730:	b90b      	cbnz	r3, 8016736 <_scanf_i+0xca>
 8016732:	230a      	movs	r3, #10
 8016734:	6063      	str	r3, [r4, #4]
 8016736:	6863      	ldr	r3, [r4, #4]
 8016738:	4945      	ldr	r1, [pc, #276]	; (8016850 <_scanf_i+0x1e4>)
 801673a:	6960      	ldr	r0, [r4, #20]
 801673c:	1ac9      	subs	r1, r1, r3
 801673e:	f000 f8a3 	bl	8016888 <__sccl>
 8016742:	f04f 0b00 	mov.w	fp, #0
 8016746:	68a3      	ldr	r3, [r4, #8]
 8016748:	6822      	ldr	r2, [r4, #0]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d03d      	beq.n	80167ca <_scanf_i+0x15e>
 801674e:	6831      	ldr	r1, [r6, #0]
 8016750:	6960      	ldr	r0, [r4, #20]
 8016752:	f891 c000 	ldrb.w	ip, [r1]
 8016756:	f810 000c 	ldrb.w	r0, [r0, ip]
 801675a:	2800      	cmp	r0, #0
 801675c:	d035      	beq.n	80167ca <_scanf_i+0x15e>
 801675e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016762:	d124      	bne.n	80167ae <_scanf_i+0x142>
 8016764:	0510      	lsls	r0, r2, #20
 8016766:	d522      	bpl.n	80167ae <_scanf_i+0x142>
 8016768:	f10b 0b01 	add.w	fp, fp, #1
 801676c:	f1b9 0f00 	cmp.w	r9, #0
 8016770:	d003      	beq.n	801677a <_scanf_i+0x10e>
 8016772:	3301      	adds	r3, #1
 8016774:	f109 39ff 	add.w	r9, r9, #4294967295
 8016778:	60a3      	str	r3, [r4, #8]
 801677a:	6873      	ldr	r3, [r6, #4]
 801677c:	3b01      	subs	r3, #1
 801677e:	2b00      	cmp	r3, #0
 8016780:	6073      	str	r3, [r6, #4]
 8016782:	dd1b      	ble.n	80167bc <_scanf_i+0x150>
 8016784:	6833      	ldr	r3, [r6, #0]
 8016786:	3301      	adds	r3, #1
 8016788:	6033      	str	r3, [r6, #0]
 801678a:	68a3      	ldr	r3, [r4, #8]
 801678c:	3b01      	subs	r3, #1
 801678e:	60a3      	str	r3, [r4, #8]
 8016790:	e7d9      	b.n	8016746 <_scanf_i+0xda>
 8016792:	f1bb 0f02 	cmp.w	fp, #2
 8016796:	d1ae      	bne.n	80166f6 <_scanf_i+0x8a>
 8016798:	6822      	ldr	r2, [r4, #0]
 801679a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801679e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80167a2:	d1bf      	bne.n	8016724 <_scanf_i+0xb8>
 80167a4:	2310      	movs	r3, #16
 80167a6:	6063      	str	r3, [r4, #4]
 80167a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80167ac:	e7a2      	b.n	80166f4 <_scanf_i+0x88>
 80167ae:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80167b2:	6022      	str	r2, [r4, #0]
 80167b4:	780b      	ldrb	r3, [r1, #0]
 80167b6:	f805 3b01 	strb.w	r3, [r5], #1
 80167ba:	e7de      	b.n	801677a <_scanf_i+0x10e>
 80167bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80167c0:	4631      	mov	r1, r6
 80167c2:	4650      	mov	r0, sl
 80167c4:	4798      	blx	r3
 80167c6:	2800      	cmp	r0, #0
 80167c8:	d0df      	beq.n	801678a <_scanf_i+0x11e>
 80167ca:	6823      	ldr	r3, [r4, #0]
 80167cc:	05d9      	lsls	r1, r3, #23
 80167ce:	d50d      	bpl.n	80167ec <_scanf_i+0x180>
 80167d0:	42bd      	cmp	r5, r7
 80167d2:	d909      	bls.n	80167e8 <_scanf_i+0x17c>
 80167d4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80167d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80167dc:	4632      	mov	r2, r6
 80167de:	4650      	mov	r0, sl
 80167e0:	4798      	blx	r3
 80167e2:	f105 39ff 	add.w	r9, r5, #4294967295
 80167e6:	464d      	mov	r5, r9
 80167e8:	42bd      	cmp	r5, r7
 80167ea:	d028      	beq.n	801683e <_scanf_i+0x1d2>
 80167ec:	6822      	ldr	r2, [r4, #0]
 80167ee:	f012 0210 	ands.w	r2, r2, #16
 80167f2:	d113      	bne.n	801681c <_scanf_i+0x1b0>
 80167f4:	702a      	strb	r2, [r5, #0]
 80167f6:	6863      	ldr	r3, [r4, #4]
 80167f8:	9e01      	ldr	r6, [sp, #4]
 80167fa:	4639      	mov	r1, r7
 80167fc:	4650      	mov	r0, sl
 80167fe:	47b0      	blx	r6
 8016800:	f8d8 3000 	ldr.w	r3, [r8]
 8016804:	6821      	ldr	r1, [r4, #0]
 8016806:	1d1a      	adds	r2, r3, #4
 8016808:	f8c8 2000 	str.w	r2, [r8]
 801680c:	f011 0f20 	tst.w	r1, #32
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	d00f      	beq.n	8016834 <_scanf_i+0x1c8>
 8016814:	6018      	str	r0, [r3, #0]
 8016816:	68e3      	ldr	r3, [r4, #12]
 8016818:	3301      	adds	r3, #1
 801681a:	60e3      	str	r3, [r4, #12]
 801681c:	1bed      	subs	r5, r5, r7
 801681e:	44ab      	add	fp, r5
 8016820:	6925      	ldr	r5, [r4, #16]
 8016822:	445d      	add	r5, fp
 8016824:	6125      	str	r5, [r4, #16]
 8016826:	2000      	movs	r0, #0
 8016828:	b007      	add	sp, #28
 801682a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801682e:	f04f 0b00 	mov.w	fp, #0
 8016832:	e7ca      	b.n	80167ca <_scanf_i+0x15e>
 8016834:	07ca      	lsls	r2, r1, #31
 8016836:	bf4c      	ite	mi
 8016838:	8018      	strhmi	r0, [r3, #0]
 801683a:	6018      	strpl	r0, [r3, #0]
 801683c:	e7eb      	b.n	8016816 <_scanf_i+0x1aa>
 801683e:	2001      	movs	r0, #1
 8016840:	e7f2      	b.n	8016828 <_scanf_i+0x1bc>
 8016842:	bf00      	nop
 8016844:	0801855c 	.word	0x0801855c
 8016848:	0801338d 	.word	0x0801338d
 801684c:	08013291 	.word	0x08013291
 8016850:	08018cfe 	.word	0x08018cfe

08016854 <_read_r>:
 8016854:	b538      	push	{r3, r4, r5, lr}
 8016856:	4d07      	ldr	r5, [pc, #28]	; (8016874 <_read_r+0x20>)
 8016858:	4604      	mov	r4, r0
 801685a:	4608      	mov	r0, r1
 801685c:	4611      	mov	r1, r2
 801685e:	2200      	movs	r2, #0
 8016860:	602a      	str	r2, [r5, #0]
 8016862:	461a      	mov	r2, r3
 8016864:	f7ec fc30 	bl	80030c8 <_read>
 8016868:	1c43      	adds	r3, r0, #1
 801686a:	d102      	bne.n	8016872 <_read_r+0x1e>
 801686c:	682b      	ldr	r3, [r5, #0]
 801686e:	b103      	cbz	r3, 8016872 <_read_r+0x1e>
 8016870:	6023      	str	r3, [r4, #0]
 8016872:	bd38      	pop	{r3, r4, r5, pc}
 8016874:	20006190 	.word	0x20006190

08016878 <nan>:
 8016878:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016880 <nan+0x8>
 801687c:	4770      	bx	lr
 801687e:	bf00      	nop
 8016880:	00000000 	.word	0x00000000
 8016884:	7ff80000 	.word	0x7ff80000

08016888 <__sccl>:
 8016888:	b570      	push	{r4, r5, r6, lr}
 801688a:	780b      	ldrb	r3, [r1, #0]
 801688c:	4604      	mov	r4, r0
 801688e:	2b5e      	cmp	r3, #94	; 0x5e
 8016890:	bf0b      	itete	eq
 8016892:	784b      	ldrbeq	r3, [r1, #1]
 8016894:	1c48      	addne	r0, r1, #1
 8016896:	1c88      	addeq	r0, r1, #2
 8016898:	2200      	movne	r2, #0
 801689a:	bf08      	it	eq
 801689c:	2201      	moveq	r2, #1
 801689e:	1e61      	subs	r1, r4, #1
 80168a0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80168a4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80168a8:	42a9      	cmp	r1, r5
 80168aa:	d1fb      	bne.n	80168a4 <__sccl+0x1c>
 80168ac:	b90b      	cbnz	r3, 80168b2 <__sccl+0x2a>
 80168ae:	3801      	subs	r0, #1
 80168b0:	bd70      	pop	{r4, r5, r6, pc}
 80168b2:	f082 0101 	eor.w	r1, r2, #1
 80168b6:	54e1      	strb	r1, [r4, r3]
 80168b8:	1c42      	adds	r2, r0, #1
 80168ba:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80168be:	2d2d      	cmp	r5, #45	; 0x2d
 80168c0:	f102 36ff 	add.w	r6, r2, #4294967295
 80168c4:	4610      	mov	r0, r2
 80168c6:	d006      	beq.n	80168d6 <__sccl+0x4e>
 80168c8:	2d5d      	cmp	r5, #93	; 0x5d
 80168ca:	d0f1      	beq.n	80168b0 <__sccl+0x28>
 80168cc:	b90d      	cbnz	r5, 80168d2 <__sccl+0x4a>
 80168ce:	4630      	mov	r0, r6
 80168d0:	e7ee      	b.n	80168b0 <__sccl+0x28>
 80168d2:	462b      	mov	r3, r5
 80168d4:	e7ef      	b.n	80168b6 <__sccl+0x2e>
 80168d6:	7816      	ldrb	r6, [r2, #0]
 80168d8:	2e5d      	cmp	r6, #93	; 0x5d
 80168da:	d0fa      	beq.n	80168d2 <__sccl+0x4a>
 80168dc:	42b3      	cmp	r3, r6
 80168de:	dcf8      	bgt.n	80168d2 <__sccl+0x4a>
 80168e0:	4618      	mov	r0, r3
 80168e2:	3001      	adds	r0, #1
 80168e4:	4286      	cmp	r6, r0
 80168e6:	5421      	strb	r1, [r4, r0]
 80168e8:	dcfb      	bgt.n	80168e2 <__sccl+0x5a>
 80168ea:	43d8      	mvns	r0, r3
 80168ec:	4430      	add	r0, r6
 80168ee:	1c5d      	adds	r5, r3, #1
 80168f0:	42b3      	cmp	r3, r6
 80168f2:	bfa8      	it	ge
 80168f4:	2000      	movge	r0, #0
 80168f6:	182b      	adds	r3, r5, r0
 80168f8:	3202      	adds	r2, #2
 80168fa:	e7de      	b.n	80168ba <__sccl+0x32>

080168fc <__submore>:
 80168fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016900:	460c      	mov	r4, r1
 8016902:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016908:	4299      	cmp	r1, r3
 801690a:	d11d      	bne.n	8016948 <__submore+0x4c>
 801690c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016910:	f7fa fd3a 	bl	8011388 <_malloc_r>
 8016914:	b918      	cbnz	r0, 801691e <__submore+0x22>
 8016916:	f04f 30ff 	mov.w	r0, #4294967295
 801691a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801691e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016922:	63a3      	str	r3, [r4, #56]	; 0x38
 8016924:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016928:	6360      	str	r0, [r4, #52]	; 0x34
 801692a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801692e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016932:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016936:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801693a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801693e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016942:	6020      	str	r0, [r4, #0]
 8016944:	2000      	movs	r0, #0
 8016946:	e7e8      	b.n	801691a <__submore+0x1e>
 8016948:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801694a:	0077      	lsls	r7, r6, #1
 801694c:	463a      	mov	r2, r7
 801694e:	f7ff f987 	bl	8015c60 <_realloc_r>
 8016952:	4605      	mov	r5, r0
 8016954:	2800      	cmp	r0, #0
 8016956:	d0de      	beq.n	8016916 <__submore+0x1a>
 8016958:	eb00 0806 	add.w	r8, r0, r6
 801695c:	4601      	mov	r1, r0
 801695e:	4632      	mov	r2, r6
 8016960:	4640      	mov	r0, r8
 8016962:	f7fa fa13 	bl	8010d8c <memcpy>
 8016966:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801696a:	f8c4 8000 	str.w	r8, [r4]
 801696e:	e7e9      	b.n	8016944 <__submore+0x48>

08016970 <__ascii_wctomb>:
 8016970:	b149      	cbz	r1, 8016986 <__ascii_wctomb+0x16>
 8016972:	2aff      	cmp	r2, #255	; 0xff
 8016974:	bf85      	ittet	hi
 8016976:	238a      	movhi	r3, #138	; 0x8a
 8016978:	6003      	strhi	r3, [r0, #0]
 801697a:	700a      	strbls	r2, [r1, #0]
 801697c:	f04f 30ff 	movhi.w	r0, #4294967295
 8016980:	bf98      	it	ls
 8016982:	2001      	movls	r0, #1
 8016984:	4770      	bx	lr
 8016986:	4608      	mov	r0, r1
 8016988:	4770      	bx	lr
	...

0801698c <__env_lock>:
 801698c:	4801      	ldr	r0, [pc, #4]	; (8016994 <__env_lock+0x8>)
 801698e:	f7fa b9e9 	b.w	8010d64 <__retarget_lock_acquire_recursive>
 8016992:	bf00      	nop
 8016994:	20006186 	.word	0x20006186

08016998 <__env_unlock>:
 8016998:	4801      	ldr	r0, [pc, #4]	; (80169a0 <__env_unlock+0x8>)
 801699a:	f7fa b9e5 	b.w	8010d68 <__retarget_lock_release_recursive>
 801699e:	bf00      	nop
 80169a0:	20006186 	.word	0x20006186

080169a4 <_fstat_r>:
 80169a4:	b538      	push	{r3, r4, r5, lr}
 80169a6:	4d07      	ldr	r5, [pc, #28]	; (80169c4 <_fstat_r+0x20>)
 80169a8:	2300      	movs	r3, #0
 80169aa:	4604      	mov	r4, r0
 80169ac:	4608      	mov	r0, r1
 80169ae:	4611      	mov	r1, r2
 80169b0:	602b      	str	r3, [r5, #0]
 80169b2:	f7ec fbce 	bl	8003152 <_fstat>
 80169b6:	1c43      	adds	r3, r0, #1
 80169b8:	d102      	bne.n	80169c0 <_fstat_r+0x1c>
 80169ba:	682b      	ldr	r3, [r5, #0]
 80169bc:	b103      	cbz	r3, 80169c0 <_fstat_r+0x1c>
 80169be:	6023      	str	r3, [r4, #0]
 80169c0:	bd38      	pop	{r3, r4, r5, pc}
 80169c2:	bf00      	nop
 80169c4:	20006190 	.word	0x20006190

080169c8 <_isatty_r>:
 80169c8:	b538      	push	{r3, r4, r5, lr}
 80169ca:	4d06      	ldr	r5, [pc, #24]	; (80169e4 <_isatty_r+0x1c>)
 80169cc:	2300      	movs	r3, #0
 80169ce:	4604      	mov	r4, r0
 80169d0:	4608      	mov	r0, r1
 80169d2:	602b      	str	r3, [r5, #0]
 80169d4:	f7ec fbcd 	bl	8003172 <_isatty>
 80169d8:	1c43      	adds	r3, r0, #1
 80169da:	d102      	bne.n	80169e2 <_isatty_r+0x1a>
 80169dc:	682b      	ldr	r3, [r5, #0]
 80169de:	b103      	cbz	r3, 80169e2 <_isatty_r+0x1a>
 80169e0:	6023      	str	r3, [r4, #0]
 80169e2:	bd38      	pop	{r3, r4, r5, pc}
 80169e4:	20006190 	.word	0x20006190

080169e8 <_malloc_usable_size_r>:
 80169e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169ec:	1f18      	subs	r0, r3, #4
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	bfbc      	itt	lt
 80169f2:	580b      	ldrlt	r3, [r1, r0]
 80169f4:	18c0      	addlt	r0, r0, r3
 80169f6:	4770      	bx	lr

080169f8 <_init>:
 80169f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169fa:	bf00      	nop
 80169fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169fe:	bc08      	pop	{r3}
 8016a00:	469e      	mov	lr, r3
 8016a02:	4770      	bx	lr

08016a04 <_fini>:
 8016a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a06:	bf00      	nop
 8016a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a0a:	bc08      	pop	{r3}
 8016a0c:	469e      	mov	lr, r3
 8016a0e:	4770      	bx	lr
