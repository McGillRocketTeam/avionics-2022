
FC_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ecdc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002368  0801ee90  0801ee90  0002ee90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080211f8  080211f8  000403ac  2**0
                  CONTENTS
  4 .ARM          00000008  080211f8  080211f8  000311f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021200  08021200  000403ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08021200  08021200  00031200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021208  08021208  00031208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003ac  20000000  0802120c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000403ac  2**0
                  CONTENTS
 10 .bss          00008bf0  200003ac  200003ac  000403ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20008f9c  20008f9c  000403ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000403ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00074e46  00000000  00000000  000403dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ad80  00000000  00000000  000b5222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000041e0  00000000  00000000  000bffa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038781  00000000  00000000  000c4188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004a086  00000000  00000000  000fc909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119902  00000000  00000000  0014698f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00260291  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00003ec0  00000000  00000000  002602e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000134a8  00000000  00000000  002641a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003ac 	.word	0x200003ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801ee74 	.word	0x0801ee74

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003b0 	.word	0x200003b0
 80001ec:	0801ee74 	.word	0x0801ee74

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f006 fe58 	bl	8007cec <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f006 ff35 	bl	8007ee0 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f00b ff28 	bl	800cef2 <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f005 ff38 	bl	8006f24 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f005 f99e 	bl	80063fc <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f00b ff11 	bl	800cef2 <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f00b ff05 	bl	800cef2 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f00b fefd 	bl	800cef2 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f019 febf 	bl	801ae88 <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4620      	mov	r0, r4
 8001128:	f00b fee3 	bl	800cef2 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f00b fedb 	bl	800cef2 <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f00b fed2 	bl	800cef2 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f005 f962 	bl	800641e <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f005 fee1 	bl	8006f24 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f005 f97e 	bl	800646a <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f004 ffed 	bl	800615c <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f004 fdc9 	bl	8005d20 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f004 fee5 	bl	8005f64 <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 fd97 	bl	8005cd4 <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 feb3 	bl	8005f18 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f00b fe98 	bl	800cef2 <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20005ef0 	.word	0x20005ef0
 80011e0:	0801ee90 	.word	0x0801ee90
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	200003d8 	.word	0x200003d8
 80011f0:	0801eea8 	.word	0x0801eea8
 80011f4:	0801eec0 	.word	0x0801eec0
 80011f8:	0801eecc 	.word	0x0801eecc
 80011fc:	0801eee0 	.word	0x0801eee0
 8001200:	0801eee8 	.word	0x0801eee8
 8001204:	0801ef00 	.word	0x0801ef00
 8001208:	200003d9 	.word	0x200003d9
 800120c:	0801ef08 	.word	0x0801ef08

08001210 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 800121e:	f107 0217 	add.w	r2, r7, #23
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f004 ffbe 	bl	80061a8 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02d      	beq.n	800128e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001232:	2206      	movs	r2, #6
 8001234:	2100      	movs	r1, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001238:	f018 fda8 	bl	8019d8c <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001240:	4618      	mov	r0, r3
 8001242:	f005 f86a 	bl	800631a <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fcf5 	bl	8005c3c <lsm6dsr_from_fs2g_to_mg>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 800125e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	1d1c      	adds	r4, r3, #4
 8001266:	4610      	mov	r0, r2
 8001268:	f004 fce8 	bl	8005c3c <lsm6dsr_from_fs2g_to_mg>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001276:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f103 0408 	add.w	r4, r3, #8
 8001280:	4610      	mov	r0, r2
 8001282:	f004 fcdb 	bl	8005c3c <lsm6dsr_from_fs2g_to_mg>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	200003c8 	.word	0x200003c8

0800129c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	1d3c      	adds	r4, r7, #4
 80012a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a8:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 ffaa 	bl	800620c <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d012      	beq.n	80012e4 <MRT_LSM6DSR_getTemperature+0x48>
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	801a      	strh	r2, [r3, #0]
		//Read temperature data
		memset(&lsm_data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4909      	ldr	r1, [pc, #36]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f004 ffb8 	bl	800623e <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 fce1 	bl	8005c9c <lsm6dsr_from_lsb_to_celsius>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	200003d6 	.word	0x200003d6

080012f0 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	1d3c      	adds	r4, r7, #4
 80012f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012fc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 80012fe:	f107 0217 	add.w	r2, r7, #23
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f004 ff67 	bl	80061da <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d02d      	beq.n	800136e <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001312:	2206      	movs	r2, #6
 8001314:	2100      	movs	r1, #0
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001318:	f018 fd38 	bl	8019d8c <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4916      	ldr	r1, [pc, #88]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001320:	4618      	mov	r0, r3
 8001322:	f004 ffaf 	bl	8006284 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fc9d 	bl	8005c6c <lsm6dsr_from_fs2000dps_to_mdps>
 8001332:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 800133e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001346:	4610      	mov	r0, r2
 8001348:	f004 fc90 	bl	8005c6c <lsm6dsr_from_fs2000dps_to_mdps>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8001350:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001356:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001360:	4610      	mov	r0, r2
 8001362:	f004 fc83 	bl	8005c6c <lsm6dsr_from_fs2000dps_to_mdps>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800136a:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	200003d0 	.word	0x200003d0

0800137c <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	2216      	movs	r2, #22
 8001398:	4948      	ldr	r1, [pc, #288]	; (80014bc <MRT_LPS22HH_Setup+0x140>)
 800139a:	f00b fdaa 	bl	800cef2 <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MRT_LPS22HH_Setup+0x144>)
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <MRT_LPS22HH_Setup+0x148>)
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f005 fdba 	bl	8006f24 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4943      	ldr	r1, [pc, #268]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 fbbc 	bl	8005b3a <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	2216      	movs	r2, #22
 80013cc:	493f      	ldr	r1, [pc, #252]	; (80014cc <MRT_LPS22HH_Setup+0x150>)
 80013ce:	f00b fd90 	bl	800cef2 <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2bb3      	cmp	r3, #179	; 0xb3
 80013d8:	d031      	beq.n	800143e <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	2208      	movs	r2, #8
 80013e4:	493a      	ldr	r1, [pc, #232]	; (80014d0 <MRT_LPS22HH_Setup+0x154>)
 80013e6:	f00b fd84 	bl	800cef2 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	2210      	movs	r2, #16
 80013f4:	4937      	ldr	r1, [pc, #220]	; (80014d4 <MRT_LPS22HH_Setup+0x158>)
 80013f6:	f00b fd7c 	bl	800cef2 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4934      	ldr	r1, [pc, #208]	; (80014d8 <MRT_LPS22HH_Setup+0x15c>)
 8001406:	4618      	mov	r0, r3
 8001408:	f019 fd3e 	bl	801ae88 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe feeb 	bl	80001f0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f107 0114 	add.w	r1, r7, #20
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	4620      	mov	r0, r4
 8001428:	f00b fd63 	bl	800cef2 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2216      	movs	r2, #22
 8001436:	4929      	ldr	r1, [pc, #164]	; (80014dc <MRT_LPS22HH_Setup+0x160>)
 8001438:	f00b fd5b 	bl	800cef2 <HAL_UART_Transmit>
		  while(1);
 800143c:	e7fe      	b.n	800143c <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	2204      	movs	r2, #4
 8001448:	4925      	ldr	r1, [pc, #148]	; (80014e0 <MRT_LPS22HH_Setup+0x164>)
 800144a:	f00b fd52 	bl	800cef2 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f004 fb81 	bl	8005b5c <lps22hh_reset_set>

	  HAL_Delay(1000);
 800145a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800145e:	f005 fd61 	bl	8006f24 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	491f      	ldr	r1, [pc, #124]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001468:	4618      	mov	r0, r3
 800146a:	f004 fb9d 	bl	8005ba8 <lps22hh_reset_get>
	  } while (lps_rst);
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f5      	bne.n	8001462 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f004 fa83 	bl	8005988 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2115      	movs	r1, #21
 8001488:	4618      	mov	r0, r3
 800148a:	f004 faa3 	bl	80059d4 <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	2218      	movs	r2, #24
 8001498:	4913      	ldr	r1, [pc, #76]	; (80014e8 <MRT_LPS22HH_Setup+0x16c>)
 800149a:	f00b fd2a 	bl	800cef2 <HAL_UART_Transmit>

	  return lps_ctx;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	461c      	mov	r4, r3
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	3734      	adds	r7, #52	; 0x34
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20005ef0 	.word	0x20005ef0
 80014bc:	0801ef20 	.word	0x0801ef20
 80014c0:	08001599 	.word	0x08001599
 80014c4:	080015d3 	.word	0x080015d3
 80014c8:	200003e2 	.word	0x200003e2
 80014cc:	0801eea8 	.word	0x0801eea8
 80014d0:	0801eec0 	.word	0x0801eec0
 80014d4:	0801eecc 	.word	0x0801eecc
 80014d8:	0801eee0 	.word	0x0801eee0
 80014dc:	0801eee8 	.word	0x0801eee8
 80014e0:	0801ef00 	.word	0x0801ef00
 80014e4:	200003e3 	.word	0x200003e3
 80014e8:	0801ef38 	.word	0x0801ef38

080014ec <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	1d3c      	adds	r4, r7, #4
 80014f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014f8:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80014fa:	f107 0214 	add.w	r2, r7, #20
 80014fe:	1d38      	adds	r0, r7, #4
 8001500:	2301      	movs	r3, #1
 8001502:	2127      	movs	r1, #39	; 0x27
 8001504:	f004 f9de 	bl	80058c4 <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001508:	7d3b      	ldrb	r3, [r7, #20]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d011      	beq.n	8001538 <MRT_LPS22HH_getPressure+0x4c>
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4908      	ldr	r1, [pc, #32]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 800151e:	4618      	mov	r0, r3
 8001520:	f004 fabf 	bl	8005aa2 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f004 f9fb 	bl	8005924 <lps22hh_from_lsb_to_hpa>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	200003dc 	.word	0x200003dc

08001544 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	1d3c      	adds	r4, r7, #4
 800154c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001550:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001552:	f107 0217 	add.w	r2, r7, #23
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fa88 	bl	8005a70 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <MRT_LPS22HH_getTemperature+0x48>
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	  memset(&lps_data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4909      	ldr	r1, [pc, #36]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001570:	4618      	mov	r0, r3
 8001572:	f004 fabf 	bl	8005af4 <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	4618      	mov	r0, r3
 800157e:	f004 f9e9 	bl	8005954 <lps22hh_from_lsb_to_celsius>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	200003e0 	.word	0x200003e0

08001598 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	72fb      	strb	r3, [r7, #11]
 80015a8:	4613      	mov	r3, r2
 80015aa:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	893b      	ldrh	r3, [r7, #8]
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	21b9      	movs	r1, #185	; 0xb9
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f006 fb92 	bl	8007cec <HAL_I2C_Mem_Write>
  return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b088      	sub	sp, #32
 80015d6:	af04      	add	r7, sp, #16
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	461a      	mov	r2, r3
 80015de:	460b      	mov	r3, r1
 80015e0:	72fb      	strb	r3, [r7, #11]
 80015e2:	4613      	mov	r3, r2
 80015e4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	893b      	ldrh	r3, [r7, #8]
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2301      	movs	r3, #1
 80015fa:	21b9      	movs	r1, #185	; 0xb9
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f006 fc6f 	bl	8007ee0 <HAL_I2C_Mem_Read>
  return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001610:	f3bf 8f4f 	dsb	sy
}
 8001614:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800161e:	4904      	ldr	r1, [pc, #16]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_SystemReset+0x28>)
 8001622:	4313      	orrs	r3, r2
 8001624:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
}
 800162a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <__NVIC_SystemReset+0x20>
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	05fa0004 	.word	0x05fa0004

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	b09d      	sub	sp, #116	; 0x74
 800163c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163e:	f005 fc2f 	bl	8006ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001642:	f000 f991 	bl	8001968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001646:	f000 fd11 	bl	800206c <MX_GPIO_Init>
  MX_ADC1_Init();
 800164a:	f000 f9f9 	bl	8001a40 <MX_ADC1_Init>
  MX_I2C1_Init();
 800164e:	f000 fa49 	bl	8001ae4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001652:	f000 fa87 	bl	8001b64 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001656:	f000 fac5 	bl	8001be4 <MX_I2C3_Init>
  MX_SPI2_Init();
 800165a:	f000 fb8f 	bl	8001d7c <MX_SPI2_Init>
  MX_SPI4_Init();
 800165e:	f000 fbc3 	bl	8001de8 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001662:	f000 fbf7 	bl	8001e54 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001666:	f000 fc2b 	bl	8001ec0 <MX_TIM2_Init>
  MX_UART8_Init();
 800166a:	f000 fc81 	bl	8001f70 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800166e:	f000 fca9 	bl	8001fc4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001672:	f000 fcd1 	bl	8002018 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001676:	f000 faf5 	bl	8001c64 <MX_RTC_Init>
  //MX_IWDG_Init(); //TODO remove
  MX_FATFS_Init();
 800167a:	f00e f945 	bl	800f908 <MX_FATFS_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2102      	movs	r1, #2
 8001682:	4890      	ldr	r0, [pc, #576]	; (80018c4 <main+0x28c>)
 8001684:	f006 f9bc 	bl	8007a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2104      	movs	r1, #4
 800168c:	488d      	ldr	r0, [pc, #564]	; (80018c4 <main+0x28c>)
 800168e:	f006 f9b7 	bl	8007a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2108      	movs	r1, #8
 8001696:	488b      	ldr	r0, [pc, #556]	; (80018c4 <main+0x28c>)
 8001698:	f006 f9b2 	bl	8007a00 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a2:	4889      	ldr	r0, [pc, #548]	; (80018c8 <main+0x290>)
 80016a4:	f006 f9ac 	bl	8007a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ae:	4886      	ldr	r0, [pc, #536]	; (80018c8 <main+0x290>)
 80016b0:	f006 f9a6 	bl	8007a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ba:	4883      	ldr	r0, [pc, #524]	; (80018c8 <main+0x290>)
 80016bc:	f006 f9a0 	bl	8007a00 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80016c0:	2201      	movs	r2, #1
 80016c2:	2102      	movs	r1, #2
 80016c4:	4880      	ldr	r0, [pc, #512]	; (80018c8 <main+0x290>)
 80016c6:	f006 f99b 	bl	8007a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d0:	487e      	ldr	r0, [pc, #504]	; (80018cc <main+0x294>)
 80016d2:	f006 f995 	bl	8007a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016dc:	487b      	ldr	r0, [pc, #492]	; (80018cc <main+0x294>)
 80016de:	f006 f98f 	bl	8007a00 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80016e2:	2200      	movs	r2, #0
 80016e4:	2104      	movs	r1, #4
 80016e6:	487a      	ldr	r0, [pc, #488]	; (80018d0 <main+0x298>)
 80016e8:	f006 f98a 	bl	8007a00 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f2:	4877      	ldr	r0, [pc, #476]	; (80018d0 <main+0x298>)
 80016f4:	f006 f984 	bl	8007a00 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fe:	4872      	ldr	r0, [pc, #456]	; (80018c8 <main+0x290>)
 8001700:	f006 f97e 	bl	8007a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	4872      	ldr	r0, [pc, #456]	; (80018d4 <main+0x29c>)
 800170a:	f006 f979 	bl	8007a00 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800170e:	2201      	movs	r2, #1
 8001710:	2140      	movs	r1, #64	; 0x40
 8001712:	4870      	ldr	r0, [pc, #448]	; (80018d4 <main+0x29c>)
 8001714:	f006 f974 	bl	8007a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001718:	2201      	movs	r2, #1
 800171a:	2120      	movs	r1, #32
 800171c:	486d      	ldr	r0, [pc, #436]	; (80018d4 <main+0x29c>)
 800171e:	f006 f96f 	bl	8007a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 8001722:	2201      	movs	r2, #1
 8001724:	2110      	movs	r1, #16
 8001726:	486b      	ldr	r0, [pc, #428]	; (80018d4 <main+0x29c>)
 8001728:	f006 f96a 	bl	8007a00 <HAL_GPIO_WritePin>
   *-Activate freeRTOS
   *-Change SysTic to any other timer (done in .ioc)
   *-Include the path to all includes folders of the drivers (for C and C++ linkers)
   */

  HAL_UART_Transmit(&DEBUG_UART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	2213      	movs	r2, #19
 8001732:	4969      	ldr	r1, [pc, #420]	; (80018d8 <main+0x2a0>)
 8001734:	4869      	ldr	r0, [pc, #420]	; (80018dc <main+0x2a4>)
 8001736:	f00b fbdc 	bl	800cef2 <HAL_UART_Transmit>

  /*
   * For external FLASH memory
   *-Put before RTOS setup because you need the external flash in its setup
   */
    MRT_SetupRTOS(DEBUG_UART,SLEEP_TIME); //Put here so we can pass the uart value to the setup
 800173a:	4e68      	ldr	r6, [pc, #416]	; (80018dc <main+0x2a4>)
 800173c:	231e      	movs	r3, #30
 800173e:	930d      	str	r3, [sp, #52]	; 0x34
 8001740:	466d      	mov	r5, sp
 8001742:	f106 0410 	add.w	r4, r6, #16
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	602b      	str	r3, [r5, #0]
 8001756:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800175a:	f004 ff2b 	bl	80065b4 <MRT_SetupRTOS>
	MRT_externalFlashSetup(&DEBUG_UART);
 800175e:	485f      	ldr	r0, [pc, #380]	; (80018dc <main+0x2a4>)
 8001760:	f002 f890 	bl	8003884 <MRT_externalFlashSetup>
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */

//TODO doesn't work on wakeup (in the thread it seems)
  char tmp_buffer[20];
  sprintf(tmp_buffer,"Prev_Sec %i\r\n",prev_sec);
 8001764:	4b5e      	ldr	r3, [pc, #376]	; (80018e0 <main+0x2a8>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	495d      	ldr	r1, [pc, #372]	; (80018e4 <main+0x2ac>)
 8001770:	4618      	mov	r0, r3
 8001772:	f019 fb89 	bl	801ae88 <siprintf>
  HAL_UART_Transmit(&DEBUG_UART,tmp_buffer,strlen(tmp_buffer),HAL_MAX_DELAY);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fd38 	bl	80001f0 <strlen>
 8001780:	4603      	mov	r3, r0
 8001782:	b29a      	uxth	r2, r3
 8001784:	f107 0114 	add.w	r1, r7, #20
 8001788:	f04f 33ff 	mov.w	r3, #4294967295
 800178c:	4853      	ldr	r0, [pc, #332]	; (80018dc <main+0x2a4>)
 800178e:	f00b fbb0 	bl	800cef2 <HAL_UART_Transmit>
  MRT_setRTC(prev_hours,prev_min,prev_sec);
 8001792:	4b55      	ldr	r3, [pc, #340]	; (80018e8 <main+0x2b0>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	4a55      	ldr	r2, [pc, #340]	; (80018ec <main+0x2b4>)
 8001798:	7811      	ldrb	r1, [r2, #0]
 800179a:	4a51      	ldr	r2, [pc, #324]	; (80018e0 <main+0x2a8>)
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f005 f862 	bl	8006868 <MRT_setRTC>
  MRT_setAlarmA(WHEN_SLEEP_TIME_HOURS, WHEN_SLEEP_TIME_MIN, WHEN_SLEEP_TIME_SEC);
 80017a4:	2215      	movs	r2, #21
 80017a6:	2100      	movs	r1, #0
 80017a8:	2000      	movs	r0, #0
 80017aa:	f005 f81f 	bl	80067ec <MRT_setAlarmA>

  /*
   * For Iridium:
   * -Set the project as c++
   */
	HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 80017ae:	2201      	movs	r2, #1
 80017b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b4:	4846      	ldr	r0, [pc, #280]	; (80018d0 <main+0x298>)
 80017b6:	f006 f923 	bl	8007a00 <HAL_GPIO_WritePin>

  /*
   * For LSM6DSR
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
  lsm_ctx = MRT_LSM6DSR_Setup(&LSM_I2C, &DEBUG_UART);
 80017ba:	4c4d      	ldr	r4, [pc, #308]	; (80018f0 <main+0x2b8>)
 80017bc:	463b      	mov	r3, r7
 80017be:	4a47      	ldr	r2, [pc, #284]	; (80018dc <main+0x2a4>)
 80017c0:	494c      	ldr	r1, [pc, #304]	; (80018f4 <main+0x2bc>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fc5c 	bl	8001080 <MRT_LSM6DSR_Setup>
 80017c8:	463b      	mov	r3, r7
 80017ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   /*
    * For LPS22HH
    *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
    */
  lps_ctx = MRT_LPS22HH_Setup(&LPS_I2C, &DEBUG_UART);
 80017d2:	4c49      	ldr	r4, [pc, #292]	; (80018f8 <main+0x2c0>)
 80017d4:	463b      	mov	r3, r7
 80017d6:	4a41      	ldr	r2, [pc, #260]	; (80018dc <main+0x2a4>)
 80017d8:	4946      	ldr	r1, [pc, #280]	; (80018f4 <main+0x2bc>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fdce 	bl	800137c <MRT_LPS22HH_Setup>
 80017e0:	463b      	mov	r3, r7
 80017e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    * For the GPS:
    * -huart6 on v4.3
    * -Set its uart to 9600
    *
    */
   GPS_init(&GPS_UART, &DEBUG_UART);
 80017ea:	493c      	ldr	r1, [pc, #240]	; (80018dc <main+0x2a4>)
 80017ec:	4843      	ldr	r0, [pc, #268]	; (80018fc <main+0x2c4>)
 80017ee:	f002 f815 	bl	800381c <GPS_init>

   /*
    * For the xtend
    * -huart3 on v4.3
    */
   HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET); //TODO is it necessary?
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017fc:	f006 f900 	bl	8007a00 <HAL_GPIO_WritePin>

   /*
    * For the SRadio
    * -SPI2 on v4.3
    */
	set_hspi(SRADIO_SPI);
 8001800:	4c3f      	ldr	r4, [pc, #252]	; (8001900 <main+0x2c8>)
 8001802:	4668      	mov	r0, sp
 8001804:	f104 0310 	add.w	r3, r4, #16
 8001808:	2248      	movs	r2, #72	; 0x48
 800180a:	4619      	mov	r1, r3
 800180c:	f018 fa96 	bl	8019d3c <memcpy>
 8001810:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001814:	f00d fb3a 	bl	800ee8c <set_hspi>
	// SPI2_SX_CS_GPIO_Port
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 8001818:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800181c:	4839      	ldr	r0, [pc, #228]	; (8001904 <main+0x2cc>)
 800181e:	f00d fadd 	bl	800eddc <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 8001822:	2108      	movs	r1, #8
 8001824:	4828      	ldr	r0, [pc, #160]	; (80018c8 <main+0x290>)
 8001826:	f00d faef 	bl	800ee08 <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 800182a:	2104      	movs	r1, #4
 800182c:	4826      	ldr	r0, [pc, #152]	; (80018c8 <main+0x290>)
 800182e:	f00d fb01 	bl	800ee34 <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 8001832:	2110      	movs	r1, #16
 8001834:	4824      	ldr	r0, [pc, #144]	; (80018c8 <main+0x290>)
 8001836:	f00d fb13 	bl	800ee60 <set_DIO1_pin>
	Tx_setup();
 800183a:	f00d fb3f 	bl	800eebc <Tx_setup>

	/*
	* For the SD card
	*
	*/
	sd_init_dynamic_filename("FC", "", filename);
 800183e:	4a32      	ldr	r2, [pc, #200]	; (8001908 <main+0x2d0>)
 8001840:	4932      	ldr	r1, [pc, #200]	; (800190c <main+0x2d4>)
 8001842:	4833      	ldr	r0, [pc, #204]	; (8001910 <main+0x2d8>)
 8001844:	f005 f906 	bl	8006a54 <sd_init_dynamic_filename>
//TODO DISABLE EXTERNAL BUTTON INTERRUPT ONCE ROCKET IS ARMED

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001848:	f013 f8fc 	bl	8014a44 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 800184c:	4a31      	ldr	r2, [pc, #196]	; (8001914 <main+0x2dc>)
 800184e:	2100      	movs	r1, #0
 8001850:	4831      	ldr	r0, [pc, #196]	; (8001918 <main+0x2e0>)
 8001852:	f013 f941 	bl	8014ad8 <osThreadNew>
 8001856:	4603      	mov	r3, r0
 8001858:	4a30      	ldr	r2, [pc, #192]	; (800191c <main+0x2e4>)
 800185a:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 800185c:	4a30      	ldr	r2, [pc, #192]	; (8001920 <main+0x2e8>)
 800185e:	2100      	movs	r1, #0
 8001860:	4830      	ldr	r0, [pc, #192]	; (8001924 <main+0x2ec>)
 8001862:	f013 f939 	bl	8014ad8 <osThreadNew>
 8001866:	4603      	mov	r3, r0
 8001868:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <main+0x2f0>)
 800186a:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 800186c:	4a2f      	ldr	r2, [pc, #188]	; (800192c <main+0x2f4>)
 800186e:	2100      	movs	r1, #0
 8001870:	482f      	ldr	r0, [pc, #188]	; (8001930 <main+0x2f8>)
 8001872:	f013 f931 	bl	8014ad8 <osThreadNew>
 8001876:	4603      	mov	r3, r0
 8001878:	4a2e      	ldr	r2, [pc, #184]	; (8001934 <main+0x2fc>)
 800187a:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 800187c:	4a2e      	ldr	r2, [pc, #184]	; (8001938 <main+0x300>)
 800187e:	2100      	movs	r1, #0
 8001880:	482e      	ldr	r0, [pc, #184]	; (800193c <main+0x304>)
 8001882:	f013 f929 	bl	8014ad8 <osThreadNew>
 8001886:	4603      	mov	r3, r0
 8001888:	4a2d      	ldr	r2, [pc, #180]	; (8001940 <main+0x308>)
 800188a:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 800188c:	4a2d      	ldr	r2, [pc, #180]	; (8001944 <main+0x30c>)
 800188e:	2100      	movs	r1, #0
 8001890:	482d      	ldr	r0, [pc, #180]	; (8001948 <main+0x310>)
 8001892:	f013 f921 	bl	8014ad8 <osThreadNew>
 8001896:	4603      	mov	r3, r0
 8001898:	4a2c      	ldr	r2, [pc, #176]	; (800194c <main+0x314>)
 800189a:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 800189c:	4a2c      	ldr	r2, [pc, #176]	; (8001950 <main+0x318>)
 800189e:	2100      	movs	r1, #0
 80018a0:	482c      	ldr	r0, [pc, #176]	; (8001954 <main+0x31c>)
 80018a2:	f013 f919 	bl	8014ad8 <osThreadNew>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a2b      	ldr	r2, [pc, #172]	; (8001958 <main+0x320>)
 80018aa:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80018ac:	4a2b      	ldr	r2, [pc, #172]	; (800195c <main+0x324>)
 80018ae:	2100      	movs	r1, #0
 80018b0:	482b      	ldr	r0, [pc, #172]	; (8001960 <main+0x328>)
 80018b2:	f013 f911 	bl	8014ad8 <osThreadNew>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a2a      	ldr	r2, [pc, #168]	; (8001964 <main+0x32c>)
 80018ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018bc:	f013 f8e6 	bl	8014a8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <main+0x288>
 80018c2:	bf00      	nop
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40021800 	.word	0x40021800
 80018cc:	40021400 	.word	0x40021400
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40020c00 	.word	0x40020c00
 80018d8:	0801efa0 	.word	0x0801efa0
 80018dc:	20005eac 	.word	0x20005eac
 80018e0:	20000416 	.word	0x20000416
 80018e4:	0801efb4 	.word	0x0801efb4
 80018e8:	20000414 	.word	0x20000414
 80018ec:	20000415 	.word	0x20000415
 80018f0:	20006a48 	.word	0x20006a48
 80018f4:	20005ef4 	.word	0x20005ef4
 80018f8:	20006a38 	.word	0x20006a38
 80018fc:	200069a0 	.word	0x200069a0
 8001900:	20005f48 	.word	0x20005f48
 8001904:	40020400 	.word	0x40020400
 8001908:	20006358 	.word	0x20006358
 800190c:	0801efc4 	.word	0x0801efc4
 8001910:	0801efc8 	.word	0x0801efc8
 8001914:	08020b0c 	.word	0x08020b0c
 8001918:	080023bd 	.word	0x080023bd
 800191c:	20006354 	.word	0x20006354
 8001920:	08020b30 	.word	0x08020b30
 8001924:	080024a1 	.word	0x080024a1
 8001928:	20006998 	.word	0x20006998
 800192c:	08020b54 	.word	0x08020b54
 8001930:	080024b1 	.word	0x080024b1
 8001934:	2000699c 	.word	0x2000699c
 8001938:	08020b78 	.word	0x08020b78
 800193c:	080027b9 	.word	0x080027b9
 8001940:	20006a34 	.word	0x20006a34
 8001944:	08020b9c 	.word	0x08020b9c
 8001948:	08002875 	.word	0x08002875
 800194c:	20006a54 	.word	0x20006a54
 8001950:	08020bc0 	.word	0x08020bc0
 8001954:	08002881 	.word	0x08002881
 8001958:	20006928 	.word	0x20006928
 800195c:	08020be4 	.word	0x08020be4
 8001960:	08002891 	.word	0x08002891
 8001964:	20006340 	.word	0x20006340

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b094      	sub	sp, #80	; 0x50
 800196c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2230      	movs	r2, #48	; 0x30
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f018 fa08 	bl	8019d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <SystemClock_Config+0xd0>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <SystemClock_Config+0xd0>)
 8001996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
 800199c:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <SystemClock_Config+0xd0>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <SystemClock_Config+0xd4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019b4:	4a21      	ldr	r2, [pc, #132]	; (8001a3c <SystemClock_Config+0xd4>)
 80019b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <SystemClock_Config+0xd4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019c8:	2309      	movs	r3, #9
 80019ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019d2:	2301      	movs	r3, #1
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d6:	2302      	movs	r3, #2
 80019d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019e0:	2308      	movs	r3, #8
 80019e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019e4:	2348      	movs	r3, #72	; 0x48
 80019e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019ec:	2303      	movs	r3, #3
 80019ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	f107 0320 	add.w	r3, r7, #32
 80019f4:	4618      	mov	r0, r3
 80019f6:	f008 fa67 	bl	8009ec8 <HAL_RCC_OscConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a00:	f000 ffc8 	bl	8002994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a04:	230f      	movs	r3, #15
 8001a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f008 fcc9 	bl	800a3b8 <HAL_RCC_ClockConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a2c:	f000 ffb2 	bl	8002994 <Error_Handler>
  }
}
 8001a30:	bf00      	nop
 8001a32:	3750      	adds	r7, #80	; 0x50
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40007000 	.word	0x40007000

08001a40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a46:	463b      	mov	r3, r7
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a54:	4a21      	ldr	r2, [pc, #132]	; (8001adc <MX_ADC1_Init+0x9c>)
 8001a56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a80:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <MX_ADC1_Init+0xa0>)
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a9e:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001aa0:	f005 fa64 	bl	8006f6c <HAL_ADC_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001aaa:	f000 ff73 	bl	8002994 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001aae:	2306      	movs	r3, #6
 8001ab0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	4619      	mov	r1, r3
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001ac0:	f005 fa98 	bl	8006ff4 <HAL_ADC_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001aca:	f000 ff63 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20006754 	.word	0x20006754
 8001adc:	40012000 	.word	0x40012000
 8001ae0:	0f000001 	.word	0x0f000001

08001ae4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001aea:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <MX_I2C1_Init+0x78>)
 8001aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001af0:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <MX_I2C1_Init+0x7c>)
 8001af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b22:	f005 ff9f 	bl	8007a64 <HAL_I2C_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b2c:	f000 ff32 	bl	8002994 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b30:	2100      	movs	r1, #0
 8001b32:	4809      	ldr	r0, [pc, #36]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b34:	f006 ff8b 	bl	8008a4e <HAL_I2CEx_ConfigAnalogFilter>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001b3e:	f000 ff29 	bl	8002994 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b42:	2100      	movs	r1, #0
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b46:	f006 ffbe 	bl	8008ac6 <HAL_I2CEx_ConfigDigitalFilter>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001b50:	f000 ff20 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	2000628c 	.word	0x2000628c
 8001b5c:	40005400 	.word	0x40005400
 8001b60:	000186a0 	.word	0x000186a0

08001b64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <MX_I2C2_Init+0x78>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b70:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <MX_I2C2_Init+0x7c>)
 8001b72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001ba2:	f005 ff5f 	bl	8007a64 <HAL_I2C_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bac:	f000 fef2 	bl	8002994 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001bb4:	f006 ff4b 	bl	8008a4e <HAL_I2CEx_ConfigAnalogFilter>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001bbe:	f000 fee9 	bl	8002994 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001bc6:	f006 ff7e 	bl	8008ac6 <HAL_I2CEx_ConfigDigitalFilter>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001bd0:	f000 fee0 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200062ec 	.word	0x200062ec
 8001bdc:	40005800 	.word	0x40005800
 8001be0:	000186a0 	.word	0x000186a0

08001be4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001bea:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <MX_I2C3_Init+0x78>)
 8001bec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001bf0:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <MX_I2C3_Init+0x7c>)
 8001bf2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c06:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c22:	f005 ff1f 	bl	8007a64 <HAL_I2C_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c2c:	f000 feb2 	bl	8002994 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c30:	2100      	movs	r1, #0
 8001c32:	4809      	ldr	r0, [pc, #36]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c34:	f006 ff0b 	bl	8008a4e <HAL_I2CEx_ConfigAnalogFilter>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c3e:	f000 fea9 	bl	8002994 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c42:	2100      	movs	r1, #0
 8001c44:	4804      	ldr	r0, [pc, #16]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c46:	f006 ff3e 	bl	8008ac6 <HAL_I2CEx_ConfigDigitalFilter>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c50:	f000 fea0 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20005ef4 	.word	0x20005ef4
 8001c5c:	40005c00 	.word	0x40005c00
 8001c60:	000186a0 	.word	0x000186a0

08001c64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b090      	sub	sp, #64	; 0x40
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2228      	movs	r2, #40	; 0x28
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f018 f881 	bl	8019d8c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <MX_RTC_Init+0x110>)
 8001c8c:	4a3a      	ldr	r2, [pc, #232]	; (8001d78 <MX_RTC_Init+0x114>)
 8001c8e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c90:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <MX_RTC_Init+0x110>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c96:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <MX_RTC_Init+0x110>)
 8001c98:	227f      	movs	r2, #127	; 0x7f
 8001c9a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c9c:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <MX_RTC_Init+0x110>)
 8001c9e:	22ff      	movs	r2, #255	; 0xff
 8001ca0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ca2:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <MX_RTC_Init+0x110>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ca8:	4b32      	ldr	r3, [pc, #200]	; (8001d74 <MX_RTC_Init+0x110>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cae:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <MX_RTC_Init+0x110>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cb4:	482f      	ldr	r0, [pc, #188]	; (8001d74 <MX_RTC_Init+0x110>)
 8001cb6:	f008 ff69 	bl	800ab8c <HAL_RTC_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001cc0:	f000 fe68 	bl	8002994 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4823      	ldr	r0, [pc, #140]	; (8001d74 <MX_RTC_Init+0x110>)
 8001ce8:	f008 ffe1 	bl	800acae <HAL_RTC_SetTime>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001cf2:	f000 fe4f 	bl	8002994 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d12:	2201      	movs	r2, #1
 8001d14:	4619      	mov	r1, r3
 8001d16:	4817      	ldr	r0, [pc, #92]	; (8001d74 <MX_RTC_Init+0x110>)
 8001d18:	f009 f8e4 	bl	800aee4 <HAL_RTC_SetDate>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001d22:	f000 fe37 	bl	8002994 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d56:	463b      	mov	r3, r7
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_RTC_Init+0x110>)
 8001d5e:	f009 f9b7 	bl	800b0d0 <HAL_RTC_SetAlarm_IT>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001d68:	f000 fe14 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	3740      	adds	r7, #64	; 0x40
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20006908 	.word	0x20006908
 8001d78:	40002800 	.word	0x40002800

08001d7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <MX_SPI2_Init+0x68>)
 8001d84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001d88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001dc8:	220a      	movs	r2, #10
 8001dca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dcc:	4804      	ldr	r0, [pc, #16]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001dce:	f009 fcaf 	bl	800b730 <HAL_SPI_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001dd8:	f000 fddc 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20005f48 	.word	0x20005f48
 8001de4:	40003800 	.word	0x40003800

08001de8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001dee:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <MX_SPI4_Init+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001df4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001df8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e18:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e34:	220a      	movs	r2, #10
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e3a:	f009 fc79 	bl	800b730 <HAL_SPI_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001e44:	f000 fda6 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200068ac 	.word	0x200068ac
 8001e50:	40013400 	.word	0x40013400

08001e54 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e5a:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <MX_SPI5_Init+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e64:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e84:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001ea0:	220a      	movs	r2, #10
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001ea6:	f009 fc43 	bl	800b730 <HAL_SPI_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001eb0:	f000 fd70 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20005fa4 	.word	0x20005fa4
 8001ebc:	40015000 	.word	0x40015000

08001ec0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec6:	f107 0320 	add.w	r3, r7, #32
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]
 8001ede:	615a      	str	r2, [r3, #20]
 8001ee0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ee2:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001ee4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f0a:	4818      	ldr	r0, [pc, #96]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f0c:	f00a fa82 	bl	800c414 <HAL_TIM_PWM_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f16:	f000 fd3d 	bl	8002994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f22:	f107 0320 	add.w	r3, r7, #32
 8001f26:	4619      	mov	r1, r3
 8001f28:	4810      	ldr	r0, [pc, #64]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f2a:	f00a ff05 	bl	800cd38 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f34:	f000 fd2e 	bl	8002994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f38:	2360      	movs	r3, #96	; 0x60
 8001f3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4807      	ldr	r0, [pc, #28]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f50:	f00a fbb8 	bl	800c6c4 <HAL_TIM_PWM_ConfigChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f5a:	f000 fd1b 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f5e:	4803      	ldr	r0, [pc, #12]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f60:	f000 ff6e 	bl	8002e40 <HAL_TIM_MspPostInit>

}
 8001f64:	bf00      	nop
 8001f66:	3728      	adds	r7, #40	; 0x28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200069ec 	.word	0x200069ec

08001f70 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <MX_UART8_Init+0x50>)
 8001f78:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f80:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f96:	220c      	movs	r2, #12
 8001f98:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001fa8:	f00a ff56 	bl	800ce58 <HAL_UART_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001fb2:	f000 fcef 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20005eac 	.word	0x20005eac
 8001fc0:	40007c00 	.word	0x40007c00

08001fc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <MX_USART3_UART_Init+0x50>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001ffc:	f00a ff2c 	bl	800ce58 <HAL_UART_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002006:	f000 fcc5 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20005ffc 	.word	0x20005ffc
 8002014:	40004800 	.word	0x40004800

08002018 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <MX_USART6_UART_Init+0x50>)
 8002020:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 8002024:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002028:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 800203e:	220c      	movs	r2, #12
 8002040:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 8002050:	f00a ff02 	bl	800ce58 <HAL_UART_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800205a:	f000 fc9b 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200069a0 	.word	0x200069a0
 8002068:	40011400 	.word	0x40011400

0800206c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08e      	sub	sp, #56	; 0x38
 8002070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
 8002086:	4bb5      	ldr	r3, [pc, #724]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4ab4      	ldr	r2, [pc, #720]	; (800235c <MX_GPIO_Init+0x2f0>)
 800208c:	f043 0310 	orr.w	r3, r3, #16
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4bb2      	ldr	r3, [pc, #712]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	623b      	str	r3, [r7, #32]
 800209c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	4bae      	ldr	r3, [pc, #696]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4aad      	ldr	r2, [pc, #692]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4bab      	ldr	r3, [pc, #684]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	4ba7      	ldr	r3, [pc, #668]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4aa6      	ldr	r2, [pc, #664]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020c4:	f043 0320 	orr.w	r3, r3, #32
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4ba4      	ldr	r3, [pc, #656]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	4ba0      	ldr	r3, [pc, #640]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a9f      	ldr	r2, [pc, #636]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b9d      	ldr	r3, [pc, #628]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b99      	ldr	r3, [pc, #612]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a98      	ldr	r2, [pc, #608]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b96      	ldr	r3, [pc, #600]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b92      	ldr	r3, [pc, #584]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a91      	ldr	r2, [pc, #580]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b8f      	ldr	r3, [pc, #572]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	4b8b      	ldr	r3, [pc, #556]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a8a      	ldr	r2, [pc, #552]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b88      	ldr	r3, [pc, #544]	; (800235c <MX_GPIO_Init+0x2f0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4b84      	ldr	r3, [pc, #528]	; (800235c <MX_GPIO_Init+0x2f0>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a83      	ldr	r2, [pc, #524]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002150:	f043 0308 	orr.w	r3, r3, #8
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b81      	ldr	r3, [pc, #516]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	f248 4184 	movw	r1, #33924	; 0x8484
 8002168:	487d      	ldr	r0, [pc, #500]	; (8002360 <MX_GPIO_Init+0x2f4>)
 800216a:	f005 fc49 	bl	8007a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8002174:	487b      	ldr	r0, [pc, #492]	; (8002364 <MX_GPIO_Init+0x2f8>)
 8002176:	f005 fc43 	bl	8007a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 800217a:	2200      	movs	r2, #0
 800217c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002180:	4879      	ldr	r0, [pc, #484]	; (8002368 <MX_GPIO_Init+0x2fc>)
 8002182:	f005 fc3d 	bl	8007a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	2108      	movs	r1, #8
 800218a:	4878      	ldr	r0, [pc, #480]	; (800236c <MX_GPIO_Init+0x300>)
 800218c:	f005 fc38 	bl	8007a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002190:	2200      	movs	r2, #0
 8002192:	f645 2126 	movw	r1, #23078	; 0x5a26
 8002196:	4876      	ldr	r0, [pc, #472]	; (8002370 <MX_GPIO_Init+0x304>)
 8002198:	f005 fc32 	bl	8007a00 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 800219c:	2200      	movs	r2, #0
 800219e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021a2:	4874      	ldr	r0, [pc, #464]	; (8002374 <MX_GPIO_Init+0x308>)
 80021a4:	f005 fc2c 	bl	8007a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80021a8:	2200      	movs	r2, #0
 80021aa:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80021ae:	4872      	ldr	r0, [pc, #456]	; (8002378 <MX_GPIO_Init+0x30c>)
 80021b0:	f005 fc26 	bl	8007a00 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80021b4:	f248 4384 	movw	r3, #33924	; 0x8484
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ba:	2301      	movs	r3, #1
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ca:	4619      	mov	r1, r3
 80021cc:	4864      	ldr	r0, [pc, #400]	; (8002360 <MX_GPIO_Init+0x2f4>)
 80021ce:	f005 fa53 	bl	8007678 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 80021d2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d8:	2301      	movs	r3, #1
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e8:	4619      	mov	r1, r3
 80021ea:	485e      	ldr	r0, [pc, #376]	; (8002364 <MX_GPIO_Init+0x2f8>)
 80021ec:	f005 fa44 	bl	8007678 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 80021f0:	2301      	movs	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80021fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002202:	4619      	mov	r1, r3
 8002204:	4858      	ldr	r0, [pc, #352]	; (8002368 <MX_GPIO_Init+0x2fc>)
 8002206:	f005 fa37 	bl	8007678 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800220a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002210:	2301      	movs	r3, #1
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002220:	4619      	mov	r1, r3
 8002222:	4851      	ldr	r0, [pc, #324]	; (8002368 <MX_GPIO_Init+0x2fc>)
 8002224:	f005 fa28 	bl	8007678 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8002228:	2308      	movs	r3, #8
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222c:	2301      	movs	r3, #1
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8002238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223c:	4619      	mov	r1, r3
 800223e:	484b      	ldr	r0, [pc, #300]	; (800236c <MX_GPIO_Init+0x300>)
 8002240:	f005 fa1a 	bl	8007678 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002244:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800224a:	2300      	movs	r3, #0
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002256:	4619      	mov	r1, r3
 8002258:	4843      	ldr	r0, [pc, #268]	; (8002368 <MX_GPIO_Init+0x2fc>)
 800225a:	f005 fa0d 	bl	8007678 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800225e:	2302      	movs	r3, #2
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002262:	2300      	movs	r3, #0
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226e:	4619      	mov	r1, r3
 8002270:	4840      	ldr	r0, [pc, #256]	; (8002374 <MX_GPIO_Init+0x308>)
 8002272:	f005 fa01 	bl	8007678 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8002276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227c:	2300      	movs	r3, #0
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002288:	4619      	mov	r1, r3
 800228a:	4836      	ldr	r0, [pc, #216]	; (8002364 <MX_GPIO_Init+0x2f8>)
 800228c:	f005 f9f4 	bl	8007678 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin SX_BUSY_Pin SX_DIO_Pin IN_EJ_Main_Cont_Pin
                           IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 8002290:	f242 4319 	movw	r3, #9241	; 0x2419
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002296:	2300      	movs	r3, #0
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800229e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a2:	4619      	mov	r1, r3
 80022a4:	4832      	ldr	r0, [pc, #200]	; (8002370 <MX_GPIO_Init+0x304>)
 80022a6:	f005 f9e7 	bl	8007678 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_RF_SW_Pin OUT_VR_PWR_Pin
                           OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80022aa:	f645 2326 	movw	r3, #23078	; 0x5a26
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c0:	4619      	mov	r1, r3
 80022c2:	482b      	ldr	r0, [pc, #172]	; (8002370 <MX_GPIO_Init+0x304>)
 80022c4:	f005 f9d8 	bl	8007678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80022c8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022da:	4619      	mov	r1, r3
 80022dc:	4820      	ldr	r0, [pc, #128]	; (8002360 <MX_GPIO_Init+0x2f4>)
 80022de:	f005 f9cb 	bl	8007678 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 80022e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e8:	2301      	movs	r3, #1
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 80022f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f8:	4619      	mov	r1, r3
 80022fa:	481e      	ldr	r0, [pc, #120]	; (8002374 <MX_GPIO_Init+0x308>)
 80022fc:	f005 f9bc 	bl	8007678 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002300:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002306:	2301      	movs	r3, #1
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230e:	2300      	movs	r3, #0
 8002310:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	4619      	mov	r1, r3
 8002318:	4817      	ldr	r0, [pc, #92]	; (8002378 <MX_GPIO_Init+0x30c>)
 800231a:	f005 f9ad 	bl	8007678 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 800231e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002330:	4619      	mov	r1, r3
 8002332:	4811      	ldr	r0, [pc, #68]	; (8002378 <MX_GPIO_Init+0x30c>)
 8002334:	f005 f9a0 	bl	8007678 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8002338:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800233e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234c:	4619      	mov	r1, r3
 800234e:	4808      	ldr	r0, [pc, #32]	; (8002370 <MX_GPIO_Init+0x304>)
 8002350:	f005 f992 	bl	8007678 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	2105      	movs	r1, #5
 8002358:	2006      	movs	r0, #6
 800235a:	e00f      	b.n	800237c <MX_GPIO_Init+0x310>
 800235c:	40023800 	.word	0x40023800
 8002360:	40021000 	.word	0x40021000
 8002364:	40021400 	.word	0x40021400
 8002368:	40020800 	.word	0x40020800
 800236c:	40020000 	.word	0x40020000
 8002370:	40021800 	.word	0x40021800
 8002374:	40020400 	.word	0x40020400
 8002378:	40020c00 	.word	0x40020c00
 800237c:	f005 f944 	bl	8007608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002380:	2006      	movs	r0, #6
 8002382:	f005 f95d 	bl	8007640 <HAL_NVIC_EnableIRQ>

}
 8002386:	bf00      	nop
 8002388:	3738      	adds	r7, #56	; 0x38
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop

08002390 <XTend_Transmit>:

/**
 * @brief   Function to transmit message to XTend
 * @param  Msg : char array (range 1-800)
 */
static void XTend_Transmit(char* Msg){
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&XTEND_UART, Msg, strlen(Msg), HAL_Delay);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7fd ff29 	bl	80001f0 <strlen>
 800239e:	4603      	mov	r3, r0
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <XTend_Transmit+0x24>)
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4804      	ldr	r0, [pc, #16]	; (80023b8 <XTend_Transmit+0x28>)
 80023a8:	f00a fda3 	bl	800cef2 <HAL_UART_Transmit>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	08006f25 	.word	0x08006f25
 80023b8:	20005ffc 	.word	0x20005ffc

080023bc <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 80023bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c0:	b088      	sub	sp, #32
 80023c2:	af06      	add	r7, sp, #24
 80023c4:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80023c6:	f015 feb1 	bl	801812c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	//osThreadExit();

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 80023ca:	f012 fc17 	bl	8014bfc <osThreadGetId>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4a27      	ldr	r2, [pc, #156]	; (8002470 <StartMemory0+0xb4>)
 80023d2:	6013      	str	r3, [r2, #0]
	  /* Infinite loop */
	  for(;;)
	  {

		  //Write data to sd and flash
		  sd_open_file(&filename);
 80023d4:	4827      	ldr	r0, [pc, #156]	; (8002474 <StartMemory0+0xb8>)
 80023d6:	f004 fbbb 	bl	8006b50 <sd_open_file>
		  sprintf((char*)writeBuf, "Data: %f, %f, %f, %f\r\n", PRESSURE, MIN, SEC, SUBSEC);
 80023da:	4b27      	ldr	r3, [pc, #156]	; (8002478 <StartMemory0+0xbc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f8c2 	bl	8000568 <__aeabi_f2d>
 80023e4:	4682      	mov	sl, r0
 80023e6:	468b      	mov	fp, r1
 80023e8:	4b24      	ldr	r3, [pc, #144]	; (800247c <StartMemory0+0xc0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f8bb 	bl	8000568 <__aeabi_f2d>
 80023f2:	4604      	mov	r4, r0
 80023f4:	460d      	mov	r5, r1
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <StartMemory0+0xc4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe f8b4 	bl	8000568 <__aeabi_f2d>
 8002400:	4680      	mov	r8, r0
 8002402:	4689      	mov	r9, r1
 8002404:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <StartMemory0+0xc8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f8ad 	bl	8000568 <__aeabi_f2d>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002416:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800241a:	e9cd 4500 	strd	r4, r5, [sp]
 800241e:	4652      	mov	r2, sl
 8002420:	465b      	mov	r3, fp
 8002422:	4919      	ldr	r1, [pc, #100]	; (8002488 <StartMemory0+0xcc>)
 8002424:	4819      	ldr	r0, [pc, #100]	; (800248c <StartMemory0+0xd0>)
 8002426:	f018 fd2f 	bl	801ae88 <siprintf>
		  sd_write(&fil, writeBuf);
 800242a:	4918      	ldr	r1, [pc, #96]	; (800248c <StartMemory0+0xd0>)
 800242c:	4818      	ldr	r0, [pc, #96]	; (8002490 <StartMemory0+0xd4>)
 800242e:	f004 fba7 	bl	8006b80 <sd_write>
		  f_close(&fil);
 8002432:	4817      	ldr	r0, [pc, #92]	; (8002490 <StartMemory0+0xd4>)
 8002434:	f011 feb6 	bl	80141a4 <f_close>

		  //Check if it's sleep time
		//if (flagA==1 && wu_flag !=1){
		  if (flagA==1){
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <StartMemory0+0xd8>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d111      	bne.n	8002464 <StartMemory0+0xa8>
			//Update iwdg_flag
			iwdg_flag = 1;
 8002440:	4b15      	ldr	r3, [pc, #84]	; (8002498 <StartMemory0+0xdc>)
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
			flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <StartMemory0+0xdc>)
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	4b14      	ldr	r3, [pc, #80]	; (800249c <StartMemory0+0xe0>)
 800244c:	709a      	strb	r2, [r3, #2]
			W25qxx_EraseSector(1);
 800244e:	2001      	movs	r0, #1
 8002450:	f001 ff1a 	bl	8004288 <W25qxx_EraseSector>
			W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002454:	2303      	movs	r3, #3
 8002456:	2200      	movs	r2, #0
 8002458:	2101      	movs	r1, #1
 800245a:	4810      	ldr	r0, [pc, #64]	; (800249c <StartMemory0+0xe0>)
 800245c:	f002 f85e 	bl	800451c <W25qxx_WriteSector>

			//Reset to deactivate IWDG
			NVIC_SystemReset();
 8002460:	f7ff f8d4 	bl	800160c <__NVIC_SystemReset>
		  }

		  //osDelay(1000/DATA_FREQ);
		  osDelay(1000/DATA_FREQ);
 8002464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002468:	f012 fbd9 	bl	8014c1e <osDelay>
	  {
 800246c:	e7b2      	b.n	80023d4 <StartMemory0+0x18>
 800246e:	bf00      	nop
 8002470:	20006044 	.word	0x20006044
 8002474:	20006358 	.word	0x20006358
 8002478:	20006348 	.word	0x20006348
 800247c:	20006c90 	.word	0x20006c90
 8002480:	20006350 	.word	0x20006350
 8002484:	20006c8c 	.word	0x20006c8c
 8002488:	0801efcc 	.word	0x0801efcc
 800248c:	2000636c 	.word	0x2000636c
 8002490:	20006a5c 	.word	0x20006a5c
 8002494:	20000648 	.word	0x20000648
 8002498:	20000413 	.word	0x20000413
 800249c:	20006040 	.word	0x20006040

080024a0 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b0c2      	sub	sp, #264	; 0x108
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEjection1 */

	osThreadExit();
 80024aa:	f012 fbb2 	bl	8014c12 <osThreadExit>
	...

080024b0 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 80024b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b4:	b0ae      	sub	sp, #184	; 0xb8
 80024b6:	af1a      	add	r7, sp, #104	; 0x68
 80024b8:	64f8      	str	r0, [r7, #76]	; 0x4c
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 80024ba:	f012 fb9f 	bl	8014bfc <osThreadGetId>
 80024be:	4603      	mov	r3, r0
 80024c0:	4aa1      	ldr	r2, [pc, #644]	; (8002748 <StartTelemetry2+0x298>)
 80024c2:	6093      	str	r3, [r2, #8]

	osDelay(1000);
 80024c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024c8:	f012 fba9 	bl	8014c1e <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  //Poll sensors data in other thread

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 80024cc:	2201      	movs	r2, #1
 80024ce:	2108      	movs	r1, #8
 80024d0:	489e      	ldr	r0, [pc, #632]	; (800274c <StartTelemetry2+0x29c>)
 80024d2:	f005 fa95 	bl	8007a00 <HAL_GPIO_WritePin>

	  //Updating data variables

	  //Need to verify these six to make sure they are in the right order

  	  ACCx = acceleration_mg[0];
 80024d6:	4b9e      	ldr	r3, [pc, #632]	; (8002750 <StartTelemetry2+0x2a0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a9e      	ldr	r2, [pc, #632]	; (8002754 <StartTelemetry2+0x2a4>)
 80024dc:	6013      	str	r3, [r2, #0]
  	  ACCy = acceleration_mg[1];
 80024de:	4b9c      	ldr	r3, [pc, #624]	; (8002750 <StartTelemetry2+0x2a0>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a9d      	ldr	r2, [pc, #628]	; (8002758 <StartTelemetry2+0x2a8>)
 80024e4:	6013      	str	r3, [r2, #0]
  	  ACCz = acceleration_mg[2];
 80024e6:	4b9a      	ldr	r3, [pc, #616]	; (8002750 <StartTelemetry2+0x2a0>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4a9c      	ldr	r2, [pc, #624]	; (800275c <StartTelemetry2+0x2ac>)
 80024ec:	6013      	str	r3, [r2, #0]
  	  GYROx = angular_rate_mdps[0];
 80024ee:	4b9c      	ldr	r3, [pc, #624]	; (8002760 <StartTelemetry2+0x2b0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a9c      	ldr	r2, [pc, #624]	; (8002764 <StartTelemetry2+0x2b4>)
 80024f4:	6013      	str	r3, [r2, #0]
  	  GYROy = angular_rate_mdps[1];
 80024f6:	4b9a      	ldr	r3, [pc, #616]	; (8002760 <StartTelemetry2+0x2b0>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4a9b      	ldr	r2, [pc, #620]	; (8002768 <StartTelemetry2+0x2b8>)
 80024fc:	6013      	str	r3, [r2, #0]
  	  GYROz = angular_rate_mdps[2];
 80024fe:	4b98      	ldr	r3, [pc, #608]	; (8002760 <StartTelemetry2+0x2b0>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	4a9a      	ldr	r2, [pc, #616]	; (800276c <StartTelemetry2+0x2bc>)
 8002504:	6013      	str	r3, [r2, #0]
  	  PRESSURE = pressure_hPa;
 8002506:	4b9a      	ldr	r3, [pc, #616]	; (8002770 <StartTelemetry2+0x2c0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a9a      	ldr	r2, [pc, #616]	; (8002774 <StartTelemetry2+0x2c4>)
 800250c:	6013      	str	r3, [r2, #0]

	  //From the GPS time value
	  MIN = ((uint8_t) time % 3600) / 60.0;
 800250e:	4b9a      	ldr	r3, [pc, #616]	; (8002778 <StartTelemetry2+0x2c8>)
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002518:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800251c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002520:	b2db      	uxtb	r3, r3
 8002522:	4a96      	ldr	r2, [pc, #600]	; (800277c <StartTelemetry2+0x2cc>)
 8002524:	fb82 1203 	smull	r1, r2, r2, r3
 8002528:	441a      	add	r2, r3
 800252a:	12d1      	asrs	r1, r2, #11
 800252c:	17da      	asrs	r2, r3, #31
 800252e:	1a8a      	subs	r2, r1, r2
 8002530:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002534:	fb01 f202 	mul.w	r2, r1, r2
 8002538:	1a9a      	subs	r2, r3, r2
 800253a:	4610      	mov	r0, r2
 800253c:	f7fe f802 	bl	8000544 <__aeabi_i2d>
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	4b8e      	ldr	r3, [pc, #568]	; (8002780 <StartTelemetry2+0x2d0>)
 8002546:	f7fe f991 	bl	800086c <__aeabi_ddiv>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f7fe fb59 	bl	8000c08 <__aeabi_d2f>
 8002556:	4603      	mov	r3, r0
 8002558:	4a8a      	ldr	r2, [pc, #552]	; (8002784 <StartTelemetry2+0x2d4>)
 800255a:	6013      	str	r3, [r2, #0]
	  sprintf(&MIN, "%.0f",MIN);
 800255c:	4b89      	ldr	r3, [pc, #548]	; (8002784 <StartTelemetry2+0x2d4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe f801 	bl	8000568 <__aeabi_f2d>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4987      	ldr	r1, [pc, #540]	; (8002788 <StartTelemetry2+0x2d8>)
 800256c:	4885      	ldr	r0, [pc, #532]	; (8002784 <StartTelemetry2+0x2d4>)
 800256e:	f018 fc8b 	bl	801ae88 <siprintf>
	  SEC = (uint8_t) time % 60;
 8002572:	4b81      	ldr	r3, [pc, #516]	; (8002778 <StartTelemetry2+0x2c8>)
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800257c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8002580:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b81      	ldr	r3, [pc, #516]	; (800278c <StartTelemetry2+0x2dc>)
 8002588:	fba3 1302 	umull	r1, r3, r3, r2
 800258c:	0959      	lsrs	r1, r3, #5
 800258e:	460b      	mov	r3, r1
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	1a5b      	subs	r3, r3, r1
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a2:	4b7b      	ldr	r3, [pc, #492]	; (8002790 <StartTelemetry2+0x2e0>)
 80025a4:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(&SEC,"%.0f",SEC);
 80025a8:	4b79      	ldr	r3, [pc, #484]	; (8002790 <StartTelemetry2+0x2e0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ffdb 	bl	8000568 <__aeabi_f2d>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4974      	ldr	r1, [pc, #464]	; (8002788 <StartTelemetry2+0x2d8>)
 80025b8:	4875      	ldr	r0, [pc, #468]	; (8002790 <StartTelemetry2+0x2e0>)
 80025ba:	f018 fc65 	bl	801ae88 <siprintf>
	  SUBSEC = time / 3600.0;
 80025be:	4b6e      	ldr	r3, [pc, #440]	; (8002778 <StartTelemetry2+0x2c8>)
 80025c0:	ed93 7a00 	vldr	s14, [r3]
 80025c4:	eddf 6a73 	vldr	s13, [pc, #460]	; 8002794 <StartTelemetry2+0x2e4>
 80025c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025cc:	4b72      	ldr	r3, [pc, #456]	; (8002798 <StartTelemetry2+0x2e8>)
 80025ce:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(&SUBSEC,"%.0f",SUBSEC);
 80025d2:	4b71      	ldr	r3, [pc, #452]	; (8002798 <StartTelemetry2+0x2e8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ffc6 	bl	8000568 <__aeabi_f2d>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4969      	ldr	r1, [pc, #420]	; (8002788 <StartTelemetry2+0x2d8>)
 80025e2:	486d      	ldr	r0, [pc, #436]	; (8002798 <StartTelemetry2+0x2e8>)
 80025e4:	f018 fc50 	bl	801ae88 <siprintf>

  	  STATE = THERMO_TEMP; //TODO not the right value
 80025e8:	4b6c      	ldr	r3, [pc, #432]	; (800279c <StartTelemetry2+0x2ec>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a6c      	ldr	r2, [pc, #432]	; (80027a0 <StartTelemetry2+0x2f0>)
 80025ee:	6013      	str	r3, [r2, #0]
  	  CONT = MRT_getContinuity();
 80025f0:	f001 fb6c 	bl	8003ccc <MRT_getContinuity>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b6a      	ldr	r3, [pc, #424]	; (80027a4 <StartTelemetry2+0x2f4>)
 80025fa:	701a      	strb	r2, [r3, #0]
	  HOUR = t.tm_hour;
	  MIN = t.tm_min;
	  SEC = t.tm_sec;
	  */

  	  memset(xtend_tx_buffer, 0, XTEND_BUFFER_SIZE);
 80025fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002600:	2100      	movs	r1, #0
 8002602:	4869      	ldr	r0, [pc, #420]	; (80027a8 <StartTelemetry2+0x2f8>)
 8002604:	f017 fbc2 	bl	8019d8c <memset>
  	  sprintf(xtend_tx_buffer,"S,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.7f,%.7f,%.1f,%.1f,%.1f,%.2f,%i,E",
 8002608:	4b52      	ldr	r3, [pc, #328]	; (8002754 <StartTelemetry2+0x2a4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd ffab 	bl	8000568 <__aeabi_f2d>
 8002612:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8002616:	4b50      	ldr	r3, [pc, #320]	; (8002758 <StartTelemetry2+0x2a8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd ffa4 	bl	8000568 <__aeabi_f2d>
 8002620:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8002624:	4b4d      	ldr	r3, [pc, #308]	; (800275c <StartTelemetry2+0x2ac>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fd ff9d 	bl	8000568 <__aeabi_f2d>
 800262e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8002632:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <StartTelemetry2+0x2b4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff96 	bl	8000568 <__aeabi_f2d>
 800263c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8002640:	4b49      	ldr	r3, [pc, #292]	; (8002768 <StartTelemetry2+0x2b8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd ff8f 	bl	8000568 <__aeabi_f2d>
 800264a:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800264e:	4b47      	ldr	r3, [pc, #284]	; (800276c <StartTelemetry2+0x2bc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fd ff88 	bl	8000568 <__aeabi_f2d>
 8002658:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800265c:	4b45      	ldr	r3, [pc, #276]	; (8002774 <StartTelemetry2+0x2c4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff81 	bl	8000568 <__aeabi_f2d>
 8002666:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800266a:	4b50      	ldr	r3, [pc, #320]	; (80027ac <StartTelemetry2+0x2fc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd ff7a 	bl	8000568 <__aeabi_f2d>
 8002674:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002678:	4b4d      	ldr	r3, [pc, #308]	; (80027b0 <StartTelemetry2+0x300>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff73 	bl	8000568 <__aeabi_f2d>
 8002682:	e9c7 0100 	strd	r0, r1, [r7]
 8002686:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <StartTelemetry2+0x2d4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff6c 	bl	8000568 <__aeabi_f2d>
 8002690:	4682      	mov	sl, r0
 8002692:	468b      	mov	fp, r1
 8002694:	4b3e      	ldr	r3, [pc, #248]	; (8002790 <StartTelemetry2+0x2e0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff65 	bl	8000568 <__aeabi_f2d>
 800269e:	4680      	mov	r8, r0
 80026a0:	4689      	mov	r9, r1
 80026a2:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <StartTelemetry2+0x2e8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd ff5e 	bl	8000568 <__aeabi_f2d>
 80026ac:	4604      	mov	r4, r0
 80026ae:	460d      	mov	r5, r1
 80026b0:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <StartTelemetry2+0x2f0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd ff57 	bl	8000568 <__aeabi_f2d>
 80026ba:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <StartTelemetry2+0x2f4>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	9318      	str	r3, [sp, #96]	; 0x60
 80026c0:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80026c4:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 80026c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80026cc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 80026d0:	ed97 7b00 	vldr	d7, [r7]
 80026d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80026d8:	ed97 7b02 	vldr	d7, [r7, #8]
 80026dc:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80026e0:	ed97 7b04 	vldr	d7, [r7, #16]
 80026e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80026e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80026ec:	ed8d 7b08 	vstr	d7, [sp, #32]
 80026f0:	ed97 7b08 	vldr	d7, [r7, #32]
 80026f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80026f8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80026fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002700:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002704:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002708:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800270c:	ed8d 7b00 	vstr	d7, [sp]
 8002710:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002714:	4927      	ldr	r1, [pc, #156]	; (80027b4 <StartTelemetry2+0x304>)
 8002716:	4824      	ldr	r0, [pc, #144]	; (80027a8 <StartTelemetry2+0x2f8>)
 8002718:	f018 fbb6 	bl	801ae88 <siprintf>
  			  	  	  	  	  	  ACCx,ACCy,ACCz,GYROx,GYROy,GYROz,PRESSURE,LATITUDE,LONGITUDE,MIN,SEC,SUBSEC,STATE,CONT);

	  //Xtend send
	  XTend_Transmit(xtend_tx_buffer);
 800271c:	4822      	ldr	r0, [pc, #136]	; (80027a8 <StartTelemetry2+0x2f8>)
 800271e:	f7ff fe37 	bl	8002390 <XTend_Transmit>

	  //SRadio send
	  TxProtocol(xtend_tx_buffer, strlen(xtend_tx_buffer));
 8002722:	4821      	ldr	r0, [pc, #132]	; (80027a8 <StartTelemetry2+0x2f8>)
 8002724:	f7fd fd64 	bl	80001f0 <strlen>
 8002728:	4603      	mov	r3, r0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	4619      	mov	r1, r3
 800272e:	481e      	ldr	r0, [pc, #120]	; (80027a8 <StartTelemetry2+0x2f8>)
 8002730:	f00c fcd8 	bl	800f0e4 <TxProtocol>
	  //TODO Can get stuck for some time (SHOULD CHANGE TIMEOUT)
	  //MRT_Static_Iridium_getTime(); //TODO doesn't cost anything
	  //MRT_Static_Iridium_sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8002734:	2200      	movs	r2, #0
 8002736:	2108      	movs	r1, #8
 8002738:	4804      	ldr	r0, [pc, #16]	; (800274c <StartTelemetry2+0x29c>)
 800273a:	f005 f961 	bl	8007a00 <HAL_GPIO_WritePin>


      osDelay(1000/SEND_FREQ);
 800273e:	2001      	movs	r0, #1
 8002740:	f012 fa6d 	bl	8014c1e <osDelay>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8002744:	e6c2      	b.n	80024cc <StartTelemetry2+0x1c>
 8002746:	bf00      	nop
 8002748:	20006044 	.word	0x20006044
 800274c:	40020800 	.word	0x40020800
 8002750:	200003ec 	.word	0x200003ec
 8002754:	20006994 	.word	0x20006994
 8002758:	200069e4 	.word	0x200069e4
 800275c:	20006368 	.word	0x20006368
 8002760:	200003f8 	.word	0x200003f8
 8002764:	2000634c 	.word	0x2000634c
 8002768:	20006344 	.word	0x20006344
 800276c:	200067a4 	.word	0x200067a4
 8002770:	200003e4 	.word	0x200003e4
 8002774:	20006348 	.word	0x20006348
 8002778:	20006990 	.word	0x20006990
 800277c:	91a2b3c5 	.word	0x91a2b3c5
 8002780:	404e0000 	.word	0x404e0000
 8002784:	20006c90 	.word	0x20006c90
 8002788:	0801efe4 	.word	0x0801efe4
 800278c:	88888889 	.word	0x88888889
 8002790:	20006350 	.word	0x20006350
 8002794:	45610000 	.word	0x45610000
 8002798:	20006c8c 	.word	0x20006c8c
 800279c:	200069e8 	.word	0x200069e8
 80027a0:	200068a8 	.word	0x200068a8
 80027a4:	20006a58 	.word	0x20006a58
 80027a8:	200067a8 	.word	0x200067a8
 80027ac:	20006904 	.word	0x20006904
 80027b0:	2000679c 	.word	0x2000679c
 80027b4:	0801efec 	.word	0x0801efec

080027b8 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//osThreadExit();

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 80027c0:	f012 fa1c 	bl	8014bfc <osThreadGetId>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4a1e      	ldr	r2, [pc, #120]	; (8002840 <StartSensors3+0x88>)
 80027c8:	60d3      	str	r3, [r2, #12]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80027ca:	2201      	movs	r2, #1
 80027cc:	2102      	movs	r1, #2
 80027ce:	481d      	ldr	r0, [pc, #116]	; (8002844 <StartSensors3+0x8c>)
 80027d0:	f005 f916 	bl	8007a00 <HAL_GPIO_WritePin>


	  //GPS
	  GPS_Poll(&LATITUDE, &LONGITUDE, &time);
 80027d4:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <StartSensors3+0x90>)
 80027d6:	491d      	ldr	r1, [pc, #116]	; (800284c <StartSensors3+0x94>)
 80027d8:	481d      	ldr	r0, [pc, #116]	; (8002850 <StartSensors3+0x98>)
 80027da:	f000 fdbd 	bl	8003358 <GPS_Poll>

  	  //LSM6DSR
  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 80027de:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <StartSensors3+0x9c>)
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <StartSensors3+0xa0>)
 80027e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80027e4:	f7fe fd14 	bl	8001210 <MRT_LSM6DSR_getAcceleration>
  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 80027e8:	4a1a      	ldr	r2, [pc, #104]	; (8002854 <StartSensors3+0x9c>)
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <StartSensors3+0xa4>)
 80027ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80027ee:	f7fe fd7f 	bl	80012f0 <MRT_LSM6DSR_getAngularRate>
	  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 80027f2:	4a18      	ldr	r2, [pc, #96]	; (8002854 <StartSensors3+0x9c>)
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <StartSensors3+0xa8>)
 80027f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80027f8:	f7fe fd50 	bl	800129c <MRT_LSM6DSR_getTemperature>

	  //LPS22HH
  	  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 80027fc:	4a19      	ldr	r2, [pc, #100]	; (8002864 <StartSensors3+0xac>)
 80027fe:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <StartSensors3+0xb0>)
 8002800:	ca07      	ldmia	r2, {r0, r1, r2}
 8002802:	f7fe fe73 	bl	80014ec <MRT_LPS22HH_getPressure>
	  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 8002806:	4a17      	ldr	r2, [pc, #92]	; (8002864 <StartSensors3+0xac>)
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <StartSensors3+0xb4>)
 800280a:	ca07      	ldmia	r2, {r0, r1, r2}
 800280c:	f7fe fe9a 	bl	8001544 <MRT_LPS22HH_getTemperature>
	  altitude_m = MRT_getAltitude(pressure_hPa); //Update altitude
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <StartSensors3+0xb0>)
 8002812:	edd3 7a00 	vldr	s15, [r3]
 8002816:	eeb0 0a67 	vmov.f32	s0, s15
 800281a:	f001 fa8d 	bl	8003d38 <MRT_getAltitude>
 800281e:	eef0 7a40 	vmov.f32	s15, s0
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <StartSensors3+0xb8>)
 8002824:	edc3 7a00 	vstr	s15, [r3]

	  //TODO Pressure tank (just use an analog sensor if you don't have it)


	  //Thermocouple
	  Max31855_Read_Temp();
 8002828:	f004 f85c 	bl	80068e4 <Max31855_Read_Temp>

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800282c:	2200      	movs	r2, #0
 800282e:	2102      	movs	r1, #2
 8002830:	4804      	ldr	r0, [pc, #16]	; (8002844 <StartSensors3+0x8c>)
 8002832:	f005 f8e5 	bl	8007a00 <HAL_GPIO_WritePin>

	  osDelay(1000/POLL_FREQ);
 8002836:	2001      	movs	r0, #1
 8002838:	f012 f9f1 	bl	8014c1e <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 800283c:	e7c5      	b.n	80027ca <StartSensors3+0x12>
 800283e:	bf00      	nop
 8002840:	20006044 	.word	0x20006044
 8002844:	40020800 	.word	0x40020800
 8002848:	20006990 	.word	0x20006990
 800284c:	2000679c 	.word	0x2000679c
 8002850:	20006904 	.word	0x20006904
 8002854:	20006a48 	.word	0x20006a48
 8002858:	200003ec 	.word	0x200003ec
 800285c:	200003f8 	.word	0x200003f8
 8002860:	20000404 	.word	0x20000404
 8002864:	20006a38 	.word	0x20006a38
 8002868:	200003e4 	.word	0x200003e4
 800286c:	200003e8 	.word	0x200003e8
 8002870:	20000408 	.word	0x20000408

08002874 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	osThreadExit();
 800287c:	f012 f9c9 	bl	8014c12 <osThreadExit>

08002880 <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b0c2      	sub	sp, #264	; 0x108
 8002884:	af00      	add	r7, sp, #0
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartPrinting */

	osThreadExit();
 800288a:	f012 f9c2 	bl	8014c12 <osThreadExit>
	...

08002890 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8002890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002892:	b0c7      	sub	sp, #284	; 0x11c
 8002894:	af04      	add	r7, sp, #16
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	6018      	str	r0, [r3, #0]

	char buffer[TX_BUF_DIM];
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 800289a:	2201      	movs	r2, #1
 800289c:	2104      	movs	r1, #4
 800289e:	482a      	ldr	r0, [pc, #168]	; (8002948 <StartWatchDog+0xb8>)
 80028a0:	f005 f8ae 	bl	8007a00 <HAL_GPIO_WritePin>
	 //HAL_IWDG_Refresh(&hiwdg);

	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80028a4:	2200      	movs	r2, #0
 80028a6:	4929      	ldr	r1, [pc, #164]	; (800294c <StartWatchDog+0xbc>)
 80028a8:	4829      	ldr	r0, [pc, #164]	; (8002950 <StartWatchDog+0xc0>)
 80028aa:	f008 fabd 	bl	800ae28 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80028ae:	2200      	movs	r2, #0
 80028b0:	4928      	ldr	r1, [pc, #160]	; (8002954 <StartWatchDog+0xc4>)
 80028b2:	4827      	ldr	r0, [pc, #156]	; (8002950 <StartWatchDog+0xc0>)
 80028b4:	f008 fbbd 	bl	800b032 <HAL_RTC_GetDate>

	 prev_hours = sTime.Hours;
 80028b8:	4b24      	ldr	r3, [pc, #144]	; (800294c <StartWatchDog+0xbc>)
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	4b26      	ldr	r3, [pc, #152]	; (8002958 <StartWatchDog+0xc8>)
 80028be:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 80028c0:	4b22      	ldr	r3, [pc, #136]	; (800294c <StartWatchDog+0xbc>)
 80028c2:	785a      	ldrb	r2, [r3, #1]
 80028c4:	4b25      	ldr	r3, [pc, #148]	; (800295c <StartWatchDog+0xcc>)
 80028c6:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 80028c8:	4b20      	ldr	r3, [pc, #128]	; (800294c <StartWatchDog+0xbc>)
 80028ca:	789a      	ldrb	r2, [r3, #2]
 80028cc:	4b24      	ldr	r3, [pc, #144]	; (8002960 <StartWatchDog+0xd0>)
 80028ce:	701a      	strb	r2, [r3, #0]



	  memset(buffer, 0, TX_BUF_DIM);
 80028d0:	f107 0308 	add.w	r3, r7, #8
 80028d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f017 fa56 	bl	8019d8c <memset>
	  sprintf(buffer, "Time: %i:%i:%i	Date: \r\n %f\r\n", prev_hours,prev_min,prev_sec, altitude_m);
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <StartWatchDog+0xc8>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	461d      	mov	r5, r3
 80028e6:	4b1d      	ldr	r3, [pc, #116]	; (800295c <StartWatchDog+0xcc>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461e      	mov	r6, r3
 80028ec:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <StartWatchDog+0xd0>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	461c      	mov	r4, r3
 80028f2:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <StartWatchDog+0xd4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fd fe36 	bl	8000568 <__aeabi_f2d>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	f107 0008 	add.w	r0, r7, #8
 8002904:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002908:	9400      	str	r4, [sp, #0]
 800290a:	4633      	mov	r3, r6
 800290c:	462a      	mov	r2, r5
 800290e:	4916      	ldr	r1, [pc, #88]	; (8002968 <StartWatchDog+0xd8>)
 8002910:	f018 faba 	bl	801ae88 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002914:	f107 0308 	add.w	r3, r7, #8
 8002918:	4618      	mov	r0, r3
 800291a:	f7fd fc69 	bl	80001f0 <strlen>
 800291e:	4603      	mov	r3, r0
 8002920:	b29a      	uxth	r2, r3
 8002922:	f107 0108 	add.w	r1, r7, #8
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	4810      	ldr	r0, [pc, #64]	; (800296c <StartWatchDog+0xdc>)
 800292c:	f00a fae1 	bl	800cef2 <HAL_UART_Transmit>


	  //Save the time
	  MRT_saveRTCTime();
 8002930:	f001 f9ba 	bl	8003ca8 <MRT_saveRTCTime>

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8002934:	2200      	movs	r2, #0
 8002936:	2104      	movs	r1, #4
 8002938:	4803      	ldr	r0, [pc, #12]	; (8002948 <StartWatchDog+0xb8>)
 800293a:	f005 f861 	bl	8007a00 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 800293e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002942:	f012 f96c 	bl	8014c1e <osDelay>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8002946:	e7a8      	b.n	800289a <StartWatchDog+0xa>
 8002948:	40020800 	.word	0x40020800
 800294c:	2000064c 	.word	0x2000064c
 8002950:	20006908 	.word	0x20006908
 8002954:	20000660 	.word	0x20000660
 8002958:	20000414 	.word	0x20000414
 800295c:	20000415 	.word	0x20000415
 8002960:	20000416 	.word	0x20000416
 8002964:	20000408 	.word	0x20000408
 8002968:	0801f034 	.word	0x0801f034
 800296c:	20005eac 	.word	0x20005eac

08002970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a04      	ldr	r2, [pc, #16]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002982:	f004 faaf 	bl	8006ee4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40001000 	.word	0x40001000

08002994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_MspInit+0x54>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	4a11      	ldr	r2, [pc, #68]	; (80029f8 <HAL_MspInit+0x54>)
 80029b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_MspInit+0x54>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_MspInit+0x54>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <HAL_MspInit+0x54>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_MspInit+0x54>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	210f      	movs	r1, #15
 80029e6:	f06f 0001 	mvn.w	r0, #1
 80029ea:	f004 fe0d 	bl	8007608 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800

080029fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <HAL_ADC_MspInit+0x7c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d127      	bne.n	8002a6e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <HAL_ADC_MspInit+0x80>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <HAL_ADC_MspInit+0x80>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_ADC_MspInit+0x80>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <HAL_ADC_MspInit+0x80>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <HAL_ADC_MspInit+0x80>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <HAL_ADC_MspInit+0x80>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8002a56:	2340      	movs	r3, #64	; 0x40
 8002a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8002a62:	f107 0314 	add.w	r3, r7, #20
 8002a66:	4619      	mov	r1, r3
 8002a68:	4805      	ldr	r0, [pc, #20]	; (8002a80 <HAL_ADC_MspInit+0x84>)
 8002a6a:	f004 fe05 	bl	8007678 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a6e:	bf00      	nop
 8002a70:	3728      	adds	r7, #40	; 0x28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40012000 	.word	0x40012000
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40020000 	.word	0x40020000

08002a84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08e      	sub	sp, #56	; 0x38
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a5c      	ldr	r2, [pc, #368]	; (8002c14 <HAL_I2C_MspInit+0x190>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d12d      	bne.n	8002b02 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
 8002aaa:	4b5b      	ldr	r3, [pc, #364]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a5a      	ldr	r2, [pc, #360]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b58      	ldr	r3, [pc, #352]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	623b      	str	r3, [r7, #32]
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ac8:	2312      	movs	r3, #18
 8002aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002acc:	2301      	movs	r3, #1
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002adc:	4619      	mov	r1, r3
 8002ade:	484f      	ldr	r0, [pc, #316]	; (8002c1c <HAL_I2C_MspInit+0x198>)
 8002ae0:	f004 fdca 	bl	8007678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
 8002ae8:	4b4b      	ldr	r3, [pc, #300]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	4a4a      	ldr	r2, [pc, #296]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002af2:	6413      	str	r3, [r2, #64]	; 0x40
 8002af4:	4b48      	ldr	r3, [pc, #288]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b00:	e083      	b.n	8002c0a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a46      	ldr	r2, [pc, #280]	; (8002c20 <HAL_I2C_MspInit+0x19c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d12d      	bne.n	8002b68 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	4a40      	ldr	r2, [pc, #256]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1c:	4b3e      	ldr	r3, [pc, #248]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2e:	2312      	movs	r3, #18
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b32:	2301      	movs	r3, #1
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b36:	2303      	movs	r3, #3
 8002b38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b42:	4619      	mov	r1, r3
 8002b44:	4835      	ldr	r0, [pc, #212]	; (8002c1c <HAL_I2C_MspInit+0x198>)
 8002b46:	f004 fd97 	bl	8007678 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a31      	ldr	r2, [pc, #196]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	697b      	ldr	r3, [r7, #20]
}
 8002b66:	e050      	b.n	8002c0a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a2d      	ldr	r2, [pc, #180]	; (8002c24 <HAL_I2C_MspInit+0x1a0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d14b      	bne.n	8002c0a <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a27      	ldr	r2, [pc, #156]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a20      	ldr	r2, [pc, #128]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002baa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bb0:	2312      	movs	r3, #18
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4818      	ldr	r0, [pc, #96]	; (8002c28 <HAL_I2C_MspInit+0x1a4>)
 8002bc8:	f004 fd56 	bl	8007678 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bd2:	2312      	movs	r3, #18
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bde:	2304      	movs	r3, #4
 8002be0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be6:	4619      	mov	r1, r3
 8002be8:	4810      	ldr	r0, [pc, #64]	; (8002c2c <HAL_I2C_MspInit+0x1a8>)
 8002bea:	f004 fd45 	bl	8007678 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a08      	ldr	r2, [pc, #32]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002bf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
}
 8002c0a:	bf00      	nop
 8002c0c:	3738      	adds	r7, #56	; 0x38
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40005400 	.word	0x40005400
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40020400 	.word	0x40020400
 8002c20:	40005800 	.word	0x40005800
 8002c24:	40005c00 	.word	0x40005c00
 8002c28:	40020800 	.word	0x40020800
 8002c2c:	40020000 	.word	0x40020000

08002c30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08e      	sub	sp, #56	; 0x38
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c38:	f107 0308 	add.w	r3, r7, #8
 8002c3c:	2230      	movs	r2, #48	; 0x30
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f017 f8a3 	bl	8019d8c <memset>
  if(hrtc->Instance==RTC)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <HAL_RTC_MspInit+0x5c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d119      	bne.n	8002c84 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c50:	2320      	movs	r3, #32
 8002c52:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f007 fdd6 	bl	800a810 <HAL_RCCEx_PeriphCLKConfig>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002c6a:	f7ff fe93 	bl	8002994 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c6e:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <HAL_RTC_MspInit+0x60>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002c74:	2200      	movs	r2, #0
 8002c76:	2105      	movs	r1, #5
 8002c78:	2029      	movs	r0, #41	; 0x29
 8002c7a:	f004 fcc5 	bl	8007608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002c7e:	2029      	movs	r0, #41	; 0x29
 8002c80:	f004 fcde 	bl	8007640 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c84:	bf00      	nop
 8002c86:	3738      	adds	r7, #56	; 0x38
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40002800 	.word	0x40002800
 8002c90:	42470e3c 	.word	0x42470e3c

08002c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08e      	sub	sp, #56	; 0x38
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a4c      	ldr	r2, [pc, #304]	; (8002de4 <HAL_SPI_MspInit+0x150>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d12d      	bne.n	8002d12 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
 8002cba:	4b4b      	ldr	r3, [pc, #300]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a4a      	ldr	r2, [pc, #296]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b48      	ldr	r3, [pc, #288]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	4b44      	ldr	r3, [pc, #272]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a43      	ldr	r2, [pc, #268]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002cee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d00:	2305      	movs	r3, #5
 8002d02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4838      	ldr	r0, [pc, #224]	; (8002dec <HAL_SPI_MspInit+0x158>)
 8002d0c:	f004 fcb4 	bl	8007678 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002d10:	e064      	b.n	8002ddc <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a36      	ldr	r2, [pc, #216]	; (8002df0 <HAL_SPI_MspInit+0x15c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d12d      	bne.n	8002d78 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	4b31      	ldr	r3, [pc, #196]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	4a30      	ldr	r2, [pc, #192]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2c:	4b2e      	ldr	r3, [pc, #184]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	4a29      	ldr	r2, [pc, #164]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d42:	f043 0310 	orr.w	r3, r3, #16
 8002d46:	6313      	str	r3, [r2, #48]	; 0x30
 8002d48:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002d54:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d62:	2303      	movs	r3, #3
 8002d64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002d66:	2305      	movs	r3, #5
 8002d68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4820      	ldr	r0, [pc, #128]	; (8002df4 <HAL_SPI_MspInit+0x160>)
 8002d72:	f004 fc81 	bl	8007678 <HAL_GPIO_Init>
}
 8002d76:	e031      	b.n	8002ddc <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1e      	ldr	r2, [pc, #120]	; (8002df8 <HAL_SPI_MspInit+0x164>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d12c      	bne.n	8002ddc <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d90:	6453      	str	r3, [r2, #68]	; 0x44
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002da8:	f043 0320 	orr.w	r3, r3, #32
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002dba:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002dcc:	2305      	movs	r3, #5
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4809      	ldr	r0, [pc, #36]	; (8002dfc <HAL_SPI_MspInit+0x168>)
 8002dd8:	f004 fc4e 	bl	8007678 <HAL_GPIO_Init>
}
 8002ddc:	bf00      	nop
 8002dde:	3738      	adds	r7, #56	; 0x38
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40003800 	.word	0x40003800
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40020400 	.word	0x40020400
 8002df0:	40013400 	.word	0x40013400
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40015000 	.word	0x40015000
 8002dfc:	40021400 	.word	0x40021400

08002e00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e10:	d10d      	bne.n	8002e2e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <HAL_TIM_PWM_MspInit+0x3c>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	4a08      	ldr	r2, [pc, #32]	; (8002e3c <HAL_TIM_PWM_MspInit+0x3c>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6413      	str	r3, [r2, #64]	; 0x40
 8002e22:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_TIM_PWM_MspInit+0x3c>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800

08002e40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	f107 030c 	add.w	r3, r7, #12
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e60:	d11d      	bne.n	8002e9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <HAL_TIM_MspPostInit+0x68>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ea8 <HAL_TIM_MspPostInit+0x68>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <HAL_TIM_MspPostInit+0x68>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002e7e:	2304      	movs	r3, #4
 8002e80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002e92:	f107 030c 	add.w	r3, r7, #12
 8002e96:	4619      	mov	r1, r3
 8002e98:	4804      	ldr	r0, [pc, #16]	; (8002eac <HAL_TIM_MspPostInit+0x6c>)
 8002e9a:	f004 fbed 	bl	8007678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e9e:	bf00      	nop
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40020000 	.word	0x40020000

08002eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08e      	sub	sp, #56	; 0x38
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a4b      	ldr	r2, [pc, #300]	; (8002ffc <HAL_UART_MspInit+0x14c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d12c      	bne.n	8002f2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
 8002ed6:	4b4a      	ldr	r3, [pc, #296]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4a49      	ldr	r2, [pc, #292]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002edc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee2:	4b47      	ldr	r3, [pc, #284]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eea:	623b      	str	r3, [r7, #32]
 8002eec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	4b43      	ldr	r3, [pc, #268]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a42      	ldr	r2, [pc, #264]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002ef8:	f043 0310 	orr.w	r3, r3, #16
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b40      	ldr	r3, [pc, #256]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	61fb      	str	r3, [r7, #28]
 8002f08:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f16:	2303      	movs	r3, #3
 8002f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f22:	4619      	mov	r1, r3
 8002f24:	4837      	ldr	r0, [pc, #220]	; (8003004 <HAL_UART_MspInit+0x154>)
 8002f26:	f004 fba7 	bl	8007678 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f2a:	e063      	b.n	8002ff4 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a35      	ldr	r2, [pc, #212]	; (8003008 <HAL_UART_MspInit+0x158>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d12d      	bne.n	8002f92 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	4b31      	ldr	r3, [pc, #196]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4a30      	ldr	r2, [pc, #192]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f44:	6413      	str	r3, [r2, #64]	; 0x40
 8002f46:	4b2e      	ldr	r3, [pc, #184]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	4a29      	ldr	r2, [pc, #164]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002f5c:	f043 0308 	orr.w	r3, r3, #8
 8002f60:	6313      	str	r3, [r2, #48]	; 0x30
 8002f62:	4b27      	ldr	r3, [pc, #156]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002f6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f74:	2302      	movs	r3, #2
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f80:	2307      	movs	r3, #7
 8002f82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4820      	ldr	r0, [pc, #128]	; (800300c <HAL_UART_MspInit+0x15c>)
 8002f8c:	f004 fb74 	bl	8007678 <HAL_GPIO_Init>
}
 8002f90:	e030      	b.n	8002ff4 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <HAL_UART_MspInit+0x160>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d12b      	bne.n	8002ff4 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	4b17      	ldr	r3, [pc, #92]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa4:	4a16      	ldr	r2, [pc, #88]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002fa6:	f043 0320 	orr.w	r3, r3, #32
 8002faa:	6453      	str	r3, [r2, #68]	; 0x44
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	4b10      	ldr	r3, [pc, #64]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	4a0f      	ldr	r2, [pc, #60]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc8:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002fd4:	23c0      	movs	r3, #192	; 0xc0
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fec:	4619      	mov	r1, r3
 8002fee:	4809      	ldr	r0, [pc, #36]	; (8003014 <HAL_UART_MspInit+0x164>)
 8002ff0:	f004 fb42 	bl	8007678 <HAL_GPIO_Init>
}
 8002ff4:	bf00      	nop
 8002ff6:	3738      	adds	r7, #56	; 0x38
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40007c00 	.word	0x40007c00
 8003000:	40023800 	.word	0x40023800
 8003004:	40021000 	.word	0x40021000
 8003008:	40004800 	.word	0x40004800
 800300c:	40020c00 	.word	0x40020c00
 8003010:	40011400 	.word	0x40011400
 8003014:	40020800 	.word	0x40020800

08003018 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08c      	sub	sp, #48	; 0x30
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003028:	2200      	movs	r2, #0
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	2036      	movs	r0, #54	; 0x36
 800302e:	f004 faeb 	bl	8007608 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003032:	2036      	movs	r0, #54	; 0x36
 8003034:	f004 fb04 	bl	8007640 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	4b1f      	ldr	r3, [pc, #124]	; (80030bc <HAL_InitTick+0xa4>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <HAL_InitTick+0xa4>)
 8003042:	f043 0310 	orr.w	r3, r3, #16
 8003046:	6413      	str	r3, [r2, #64]	; 0x40
 8003048:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <HAL_InitTick+0xa4>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003054:	f107 0210 	add.w	r2, r7, #16
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f007 fba4 	bl	800a7ac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003064:	f007 fb7a 	bl	800a75c <HAL_RCC_GetPCLK1Freq>
 8003068:	4603      	mov	r3, r0
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <HAL_InitTick+0xa8>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	0c9b      	lsrs	r3, r3, #18
 8003078:	3b01      	subs	r3, #1
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800307c:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <HAL_InitTick+0xac>)
 800307e:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <HAL_InitTick+0xb0>)
 8003080:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003082:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HAL_InitTick+0xac>)
 8003084:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003088:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800308a:	4a0e      	ldr	r2, [pc, #56]	; (80030c4 <HAL_InitTick+0xac>)
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <HAL_InitTick+0xac>)
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_InitTick+0xac>)
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800309c:	4809      	ldr	r0, [pc, #36]	; (80030c4 <HAL_InitTick+0xac>)
 800309e:	f009 f8ef 	bl	800c280 <HAL_TIM_Base_Init>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d104      	bne.n	80030b2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80030a8:	4806      	ldr	r0, [pc, #24]	; (80030c4 <HAL_InitTick+0xac>)
 80030aa:	f009 f943 	bl	800c334 <HAL_TIM_Base_Start_IT>
 80030ae:	4603      	mov	r3, r0
 80030b0:	e000      	b.n	80030b4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3730      	adds	r7, #48	; 0x30
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	431bde83 	.word	0x431bde83
 80030c4:	20006c94 	.word	0x20006c94
 80030c8:	40001000 	.word	0x40001000

080030cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030de:	e7fe      	b.n	80030de <HardFault_Handler+0x4>

080030e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030e4:	e7fe      	b.n	80030e4 <MemManage_Handler+0x4>

080030e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030e6:	b480      	push	{r7}
 80030e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ea:	e7fe      	b.n	80030ea <BusFault_Handler+0x4>

080030ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030f0:	e7fe      	b.n	80030f0 <UsageFault_Handler+0x4>

080030f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003104:	2001      	movs	r0, #1
 8003106:	f004 fc95 	bl	8007a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003114:	4802      	ldr	r0, [pc, #8]	; (8003120 <RTC_Alarm_IRQHandler+0x10>)
 8003116:	f008 f913 	bl	800b340 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20006908 	.word	0x20006908

08003124 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <TIM6_DAC_IRQHandler+0x10>)
 800312a:	f009 f9c2 	bl	800c4b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20006c94 	.word	0x20006c94

08003138 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <OTG_FS_IRQHandler+0x10>)
 800313e:	f005 fe51 	bl	8008de4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20008b84 	.word	0x20008b84

0800314c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
	return 1;
 8003150:	2301      	movs	r3, #1
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <_kill>:

int _kill(int pid, int sig)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003166:	f016 fcb5 	bl	8019ad4 <__errno>
 800316a:	4603      	mov	r3, r0
 800316c:	2216      	movs	r2, #22
 800316e:	601a      	str	r2, [r3, #0]
	return -1;
 8003170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <_exit>:

void _exit (int status)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003184:	f04f 31ff 	mov.w	r1, #4294967295
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ffe7 	bl	800315c <_kill>
	while (1) {}		/* Make sure we hang here */
 800318e:	e7fe      	b.n	800318e <_exit+0x12>

08003190 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	e00a      	b.n	80031b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031a2:	f3af 8000 	nop.w
 80031a6:	4601      	mov	r1, r0
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	60ba      	str	r2, [r7, #8]
 80031ae:	b2ca      	uxtb	r2, r1
 80031b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	3301      	adds	r3, #1
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	dbf0      	blt.n	80031a2 <_read+0x12>
	}

return len;
 80031c0:	687b      	ldr	r3, [r7, #4]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b086      	sub	sp, #24
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	e009      	b.n	80031f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	60ba      	str	r2, [r7, #8]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	3301      	adds	r3, #1
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	dbf1      	blt.n	80031dc <_write+0x12>
	}
	return len;
 80031f8:	687b      	ldr	r3, [r7, #4]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <_close>:

int _close(int file)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
	return -1;
 800320a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800322a:	605a      	str	r2, [r3, #4]
	return 0;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <_isatty>:

int _isatty(int file)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
	return 1;
 8003242:	2301      	movs	r3, #1
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
	return 0;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003274:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <_sbrk+0x5c>)
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <_sbrk+0x60>)
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <_sbrk+0x64>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <_sbrk+0x64>)
 800328a:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <_sbrk+0x68>)
 800328c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <_sbrk+0x64>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	429a      	cmp	r2, r3
 800329a:	d207      	bcs.n	80032ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800329c:	f016 fc1a 	bl	8019ad4 <__errno>
 80032a0:	4603      	mov	r3, r0
 80032a2:	220c      	movs	r2, #12
 80032a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
 80032aa:	e009      	b.n	80032c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <_sbrk+0x64>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032b2:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <_sbrk+0x64>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	4a05      	ldr	r2, [pc, #20]	; (80032d0 <_sbrk+0x64>)
 80032bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032be:	68fb      	ldr	r3, [r7, #12]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20030000 	.word	0x20030000
 80032cc:	00000400 	.word	0x00000400
 80032d0:	2000040c 	.word	0x2000040c
 80032d4:	20008fa0 	.word	0x20008fa0

080032d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <SystemInit+0x28>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	4a07      	ldr	r2, [pc, #28]	; (8003300 <SystemInit+0x28>)
 80032e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <SystemInit+0x28>)
 80032ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032f2:	609a      	str	r2, [r3, #8]
#endif
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800333c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003308:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800330a:	e003      	b.n	8003314 <LoopCopyDataInit>

0800330c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800330e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003310:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003312:	3104      	adds	r1, #4

08003314 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003314:	480b      	ldr	r0, [pc, #44]	; (8003344 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003316:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003318:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800331a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800331c:	d3f6      	bcc.n	800330c <CopyDataInit>
  ldr  r2, =_sbss
 800331e:	4a0b      	ldr	r2, [pc, #44]	; (800334c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003320:	e002      	b.n	8003328 <LoopFillZerobss>

08003322 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003322:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003324:	f842 3b04 	str.w	r3, [r2], #4

08003328 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800332a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800332c:	d3f9      	bcc.n	8003322 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800332e:	f7ff ffd3 	bl	80032d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003332:	f016 fccb 	bl	8019ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003336:	f7fe f97f 	bl	8001638 <main>
  bx  lr    
 800333a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800333c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003340:	0802120c 	.word	0x0802120c
  ldr  r0, =_sdata
 8003344:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003348:	200003ac 	.word	0x200003ac
  ldr  r2, =_sbss
 800334c:	200003ac 	.word	0x200003ac
  ldr  r3, = _ebss
 8003350:	20008f9c 	.word	0x20008f9c

08003354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003354:	e7fe      	b.n	8003354 <ADC_IRQHandler>
	...

08003358 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08c      	sub	sp, #48	; 0x30
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8003364:	2364      	movs	r3, #100	; 0x64
 8003366:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8003370:	e073      	b.n	800345a <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 8003372:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <GPS_Poll+0x118>)
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	2364      	movs	r3, #100	; 0x64
 8003378:	2201      	movs	r2, #1
 800337a:	493e      	ldr	r1, [pc, #248]	; (8003474 <GPS_Poll+0x11c>)
 800337c:	f009 fe4b 	bl	800d016 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8003380:	4b3c      	ldr	r3, [pc, #240]	; (8003474 <GPS_Poll+0x11c>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b0a      	cmp	r3, #10
 8003386:	d00f      	beq.n	80033a8 <GPS_Poll+0x50>
 8003388:	4b3b      	ldr	r3, [pc, #236]	; (8003478 <GPS_Poll+0x120>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b63      	cmp	r3, #99	; 0x63
 800338e:	d80b      	bhi.n	80033a8 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8003390:	4b39      	ldr	r3, [pc, #228]	; (8003478 <GPS_Poll+0x120>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	b2d1      	uxtb	r1, r2
 8003398:	4a37      	ldr	r2, [pc, #220]	; (8003478 <GPS_Poll+0x120>)
 800339a:	7011      	strb	r1, [r2, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	4b35      	ldr	r3, [pc, #212]	; (8003474 <GPS_Poll+0x11c>)
 80033a0:	7819      	ldrb	r1, [r3, #0]
 80033a2:	4b36      	ldr	r3, [pc, #216]	; (800347c <GPS_Poll+0x124>)
 80033a4:	5499      	strb	r1, [r3, r2]
 80033a6:	e021      	b.n	80033ec <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 80033a8:	4834      	ldr	r0, [pc, #208]	; (800347c <GPS_Poll+0x124>)
 80033aa:	f000 f86b 	bl	8003484 <GPS_validate>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 80033b4:	4831      	ldr	r0, [pc, #196]	; (800347c <GPS_Poll+0x124>)
 80033b6:	f000 f8c7 	bl	8003548 <GPS_parse>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00d      	beq.n	80033dc <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 80033c0:	4b2f      	ldr	r3, [pc, #188]	; (8003480 <GPS_Poll+0x128>)
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 80033c8:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <GPS_Poll+0x128>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 80033d0:	4b2b      	ldr	r3, [pc, #172]	; (8003480 <GPS_Poll+0x128>)
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	601a      	str	r2, [r3, #0]
					done = 1;
 80033d8:	2301      	movs	r3, #1
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80033dc:	4b26      	ldr	r3, [pc, #152]	; (8003478 <GPS_Poll+0x120>)
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80033e2:	2264      	movs	r2, #100	; 0x64
 80033e4:	2100      	movs	r1, #0
 80033e6:	4825      	ldr	r0, [pc, #148]	; (800347c <GPS_Poll+0x124>)
 80033e8:	f016 fcd0 	bl	8019d8c <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 80033ec:	2300      	movs	r3, #0
 80033ee:	623b      	str	r3, [r7, #32]
 80033f0:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <GPS_Poll+0x118>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	623b      	str	r3, [r7, #32]
 80033fa:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <GPS_Poll+0x118>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	623b      	str	r3, [r7, #32]
 8003404:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	4b19      	ldr	r3, [pc, #100]	; (8003470 <GPS_Poll+0x118>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	61fb      	str	r3, [r7, #28]
 8003414:	4b16      	ldr	r3, [pc, #88]	; (8003470 <GPS_Poll+0x118>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	4b12      	ldr	r3, [pc, #72]	; (8003470 <GPS_Poll+0x118>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <GPS_Poll+0x118>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <GPS_Poll+0x118>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	4b09      	ldr	r3, [pc, #36]	; (8003470 <GPS_Poll+0x118>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8003454:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003456:	3301      	adds	r3, #1
 8003458:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 800345a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800345c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800345e:	429a      	cmp	r2, r3
 8003460:	d202      	bcs.n	8003468 <GPS_Poll+0x110>
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	2b00      	cmp	r3, #0
 8003466:	d084      	beq.n	8003372 <GPS_Poll+0x1a>
	}
}
 8003468:	bf00      	nop
 800346a:	3730      	adds	r7, #48	; 0x30
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20005fa0 	.word	0x20005fa0
 8003474:	20000410 	.word	0x20000410
 8003478:	20000411 	.word	0x20000411
 800347c:	20006d34 	.word	0x20006d34
 8003480:	20006cdc 	.word	0x20006cdc

08003484 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b24      	cmp	r3, #36	; 0x24
 800349e:	d103      	bne.n	80034a8 <GPS_validate+0x24>
        i++;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3301      	adds	r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80034a6:	e00c      	b.n	80034c2 <GPS_validate+0x3e>
        return 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e047      	b.n	800353c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4053      	eors	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        i++;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	3301      	adds	r3, #1
 80034c0:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <GPS_validate+0x5c>
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b2a      	cmp	r3, #42	; 0x2a
 80034d8:	d002      	beq.n	80034e0 <GPS_validate+0x5c>
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b4a      	cmp	r3, #74	; 0x4a
 80034de:	dde5      	ble.n	80034ac <GPS_validate+0x28>
    }

    if(i >= 75){
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b4a      	cmp	r3, #74	; 0x4a
 80034e4:	dd01      	ble.n	80034ea <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80034e6:	2300      	movs	r3, #0
 80034e8:	e028      	b.n	800353c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b2a      	cmp	r3, #42	; 0x2a
 80034f4:	d119      	bne.n	800352a <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	3301      	adds	r3, #1
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3302      	adds	r3, #2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	4413      	add	r3, r2
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8003512:	f107 0308 	add.w	r3, r7, #8
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	490a      	ldr	r1, [pc, #40]	; (8003544 <GPS_validate+0xc0>)
 800351a:	4618      	mov	r0, r3
 800351c:	f017 fcb4 	bl	801ae88 <siprintf>
    return((checkcalcstr[0] == check[0])
 8003520:	7a3a      	ldrb	r2, [r7, #8]
 8003522:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003524:	429a      	cmp	r2, r3
 8003526:	d108      	bne.n	800353a <GPS_validate+0xb6>
 8003528:	e001      	b.n	800352e <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800352a:	2300      	movs	r3, #0
 800352c:	e006      	b.n	800353c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800352e:	7a7a      	ldrb	r2, [r7, #9]
 8003530:	7b7b      	ldrb	r3, [r7, #13]
 8003532:	429a      	cmp	r2, r3
 8003534:	d101      	bne.n	800353a <GPS_validate+0xb6>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <GPS_validate+0xb8>
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	0801f054 	.word	0x0801f054

08003548 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af08      	add	r7, sp, #32
 800354e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8003550:	2206      	movs	r2, #6
 8003552:	496d      	ldr	r1, [pc, #436]	; (8003708 <GPS_parse+0x1c0>)
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f017 fd30 	bl	801afba <strncmp>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d139      	bne.n	80035d4 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8003560:	4b6a      	ldr	r3, [pc, #424]	; (800370c <GPS_parse+0x1c4>)
 8003562:	9307      	str	r3, [sp, #28]
 8003564:	4b6a      	ldr	r3, [pc, #424]	; (8003710 <GPS_parse+0x1c8>)
 8003566:	9306      	str	r3, [sp, #24]
 8003568:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <GPS_parse+0x1cc>)
 800356a:	9305      	str	r3, [sp, #20]
 800356c:	4b6a      	ldr	r3, [pc, #424]	; (8003718 <GPS_parse+0x1d0>)
 800356e:	9304      	str	r3, [sp, #16]
 8003570:	4b6a      	ldr	r3, [pc, #424]	; (800371c <GPS_parse+0x1d4>)
 8003572:	9303      	str	r3, [sp, #12]
 8003574:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <GPS_parse+0x1d8>)
 8003576:	9302      	str	r3, [sp, #8]
 8003578:	4b6a      	ldr	r3, [pc, #424]	; (8003724 <GPS_parse+0x1dc>)
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	4b6a      	ldr	r3, [pc, #424]	; (8003728 <GPS_parse+0x1e0>)
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	4b6a      	ldr	r3, [pc, #424]	; (800372c <GPS_parse+0x1e4>)
 8003582:	4a6b      	ldr	r2, [pc, #428]	; (8003730 <GPS_parse+0x1e8>)
 8003584:	496b      	ldr	r1, [pc, #428]	; (8003734 <GPS_parse+0x1ec>)
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f017 fc9e 	bl	801aec8 <siscanf>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	f340 80b5 	ble.w	80036fe <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003594:	4b68      	ldr	r3, [pc, #416]	; (8003738 <GPS_parse+0x1f0>)
 8003596:	edd3 7a04 	vldr	s15, [r3, #16]
 800359a:	4b67      	ldr	r3, [pc, #412]	; (8003738 <GPS_parse+0x1f0>)
 800359c:	7e1b      	ldrb	r3, [r3, #24]
 800359e:	4618      	mov	r0, r3
 80035a0:	eeb0 0a67 	vmov.f32	s0, s15
 80035a4:	f000 f8ec 	bl	8003780 <GPS_nmea_to_dec>
 80035a8:	eef0 7a40 	vmov.f32	s15, s0
 80035ac:	4b62      	ldr	r3, [pc, #392]	; (8003738 <GPS_parse+0x1f0>)
 80035ae:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80035b2:	4b61      	ldr	r3, [pc, #388]	; (8003738 <GPS_parse+0x1f0>)
 80035b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80035b8:	4b5f      	ldr	r3, [pc, #380]	; (8003738 <GPS_parse+0x1f0>)
 80035ba:	7e5b      	ldrb	r3, [r3, #25]
 80035bc:	4618      	mov	r0, r3
 80035be:	eeb0 0a67 	vmov.f32	s0, s15
 80035c2:	f000 f8dd 	bl	8003780 <GPS_nmea_to_dec>
 80035c6:	eef0 7a40 	vmov.f32	s15, s0
 80035ca:	4b5b      	ldr	r3, [pc, #364]	; (8003738 <GPS_parse+0x1f0>)
 80035cc:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e095      	b.n	8003700 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 80035d4:	2206      	movs	r2, #6
 80035d6:	4959      	ldr	r1, [pc, #356]	; (800373c <GPS_parse+0x1f4>)
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f017 fcee 	bl	801afba <strncmp>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d134      	bne.n	800364e <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 80035e4:	4b56      	ldr	r3, [pc, #344]	; (8003740 <GPS_parse+0x1f8>)
 80035e6:	9305      	str	r3, [sp, #20]
 80035e8:	4b56      	ldr	r3, [pc, #344]	; (8003744 <GPS_parse+0x1fc>)
 80035ea:	9304      	str	r3, [sp, #16]
 80035ec:	4b56      	ldr	r3, [pc, #344]	; (8003748 <GPS_parse+0x200>)
 80035ee:	9303      	str	r3, [sp, #12]
 80035f0:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <GPS_parse+0x1d8>)
 80035f2:	9302      	str	r3, [sp, #8]
 80035f4:	4b4b      	ldr	r3, [pc, #300]	; (8003724 <GPS_parse+0x1dc>)
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <GPS_parse+0x1e0>)
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	4b4b      	ldr	r3, [pc, #300]	; (800372c <GPS_parse+0x1e4>)
 80035fe:	4a4c      	ldr	r2, [pc, #304]	; (8003730 <GPS_parse+0x1e8>)
 8003600:	4952      	ldr	r1, [pc, #328]	; (800374c <GPS_parse+0x204>)
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f017 fc60 	bl	801aec8 <siscanf>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	dd77      	ble.n	80036fe <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800360e:	4b4a      	ldr	r3, [pc, #296]	; (8003738 <GPS_parse+0x1f0>)
 8003610:	edd3 7a04 	vldr	s15, [r3, #16]
 8003614:	4b48      	ldr	r3, [pc, #288]	; (8003738 <GPS_parse+0x1f0>)
 8003616:	7e1b      	ldrb	r3, [r3, #24]
 8003618:	4618      	mov	r0, r3
 800361a:	eeb0 0a67 	vmov.f32	s0, s15
 800361e:	f000 f8af 	bl	8003780 <GPS_nmea_to_dec>
 8003622:	eef0 7a40 	vmov.f32	s15, s0
 8003626:	4b44      	ldr	r3, [pc, #272]	; (8003738 <GPS_parse+0x1f0>)
 8003628:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800362c:	4b42      	ldr	r3, [pc, #264]	; (8003738 <GPS_parse+0x1f0>)
 800362e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003632:	4b41      	ldr	r3, [pc, #260]	; (8003738 <GPS_parse+0x1f0>)
 8003634:	7e5b      	ldrb	r3, [r3, #25]
 8003636:	4618      	mov	r0, r3
 8003638:	eeb0 0a67 	vmov.f32	s0, s15
 800363c:	f000 f8a0 	bl	8003780 <GPS_nmea_to_dec>
 8003640:	eef0 7a40 	vmov.f32	s15, s0
 8003644:	4b3c      	ldr	r3, [pc, #240]	; (8003738 <GPS_parse+0x1f0>)
 8003646:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 800364a:	2301      	movs	r3, #1
 800364c:	e058      	b.n	8003700 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 800364e:	2206      	movs	r2, #6
 8003650:	493f      	ldr	r1, [pc, #252]	; (8003750 <GPS_parse+0x208>)
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f017 fcb1 	bl	801afba <strncmp>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d130      	bne.n	80036c0 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 800365e:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <GPS_parse+0x20c>)
 8003660:	9303      	str	r3, [sp, #12]
 8003662:	4b33      	ldr	r3, [pc, #204]	; (8003730 <GPS_parse+0x1e8>)
 8003664:	9302      	str	r3, [sp, #8]
 8003666:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <GPS_parse+0x1d8>)
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	4b2e      	ldr	r3, [pc, #184]	; (8003724 <GPS_parse+0x1dc>)
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	4b2e      	ldr	r3, [pc, #184]	; (8003728 <GPS_parse+0x1e0>)
 8003670:	4a2e      	ldr	r2, [pc, #184]	; (800372c <GPS_parse+0x1e4>)
 8003672:	4939      	ldr	r1, [pc, #228]	; (8003758 <GPS_parse+0x210>)
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f017 fc27 	bl	801aec8 <siscanf>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	dd3e      	ble.n	80036fe <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003680:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <GPS_parse+0x1f0>)
 8003682:	edd3 7a04 	vldr	s15, [r3, #16]
 8003686:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <GPS_parse+0x1f0>)
 8003688:	7e1b      	ldrb	r3, [r3, #24]
 800368a:	4618      	mov	r0, r3
 800368c:	eeb0 0a67 	vmov.f32	s0, s15
 8003690:	f000 f876 	bl	8003780 <GPS_nmea_to_dec>
 8003694:	eef0 7a40 	vmov.f32	s15, s0
 8003698:	4b27      	ldr	r3, [pc, #156]	; (8003738 <GPS_parse+0x1f0>)
 800369a:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800369e:	4b26      	ldr	r3, [pc, #152]	; (8003738 <GPS_parse+0x1f0>)
 80036a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80036a4:	4b24      	ldr	r3, [pc, #144]	; (8003738 <GPS_parse+0x1f0>)
 80036a6:	7e5b      	ldrb	r3, [r3, #25]
 80036a8:	4618      	mov	r0, r3
 80036aa:	eeb0 0a67 	vmov.f32	s0, s15
 80036ae:	f000 f867 	bl	8003780 <GPS_nmea_to_dec>
 80036b2:	eef0 7a40 	vmov.f32	s15, s0
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <GPS_parse+0x1f0>)
 80036b8:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 80036bc:	2301      	movs	r3, #1
 80036be:	e01f      	b.n	8003700 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80036c0:	2206      	movs	r2, #6
 80036c2:	4926      	ldr	r1, [pc, #152]	; (800375c <GPS_parse+0x214>)
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f017 fc78 	bl	801afba <strncmp>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d116      	bne.n	80036fe <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80036d0:	4b23      	ldr	r3, [pc, #140]	; (8003760 <GPS_parse+0x218>)
 80036d2:	9305      	str	r3, [sp, #20]
 80036d4:	4b23      	ldr	r3, [pc, #140]	; (8003764 <GPS_parse+0x21c>)
 80036d6:	9304      	str	r3, [sp, #16]
 80036d8:	4b23      	ldr	r3, [pc, #140]	; (8003768 <GPS_parse+0x220>)
 80036da:	9303      	str	r3, [sp, #12]
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <GPS_parse+0x200>)
 80036de:	9302      	str	r3, [sp, #8]
 80036e0:	4b22      	ldr	r3, [pc, #136]	; (800376c <GPS_parse+0x224>)
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	4b22      	ldr	r3, [pc, #136]	; (8003770 <GPS_parse+0x228>)
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	4b22      	ldr	r3, [pc, #136]	; (8003774 <GPS_parse+0x22c>)
 80036ea:	4a23      	ldr	r2, [pc, #140]	; (8003778 <GPS_parse+0x230>)
 80036ec:	4923      	ldr	r1, [pc, #140]	; (800377c <GPS_parse+0x234>)
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f017 fbea 	bl	801aec8 <siscanf>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	dd01      	ble.n	80036fe <GPS_parse+0x1b6>
            return 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e000      	b.n	8003700 <GPS_parse+0x1b8>
    }
    return 0;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	0801f05c 	.word	0x0801f05c
 800370c:	20006d08 	.word	0x20006d08
 8003710:	20006d04 	.word	0x20006d04
 8003714:	20006d00 	.word	0x20006d00
 8003718:	20006cfc 	.word	0x20006cfc
 800371c:	20006cf8 	.word	0x20006cf8
 8003720:	20006cf5 	.word	0x20006cf5
 8003724:	20006ce8 	.word	0x20006ce8
 8003728:	20006cf4 	.word	0x20006cf4
 800372c:	20006cec 	.word	0x20006cec
 8003730:	20006cf0 	.word	0x20006cf0
 8003734:	0801f064 	.word	0x0801f064
 8003738:	20006cdc 	.word	0x20006cdc
 800373c:	0801f08c 	.word	0x0801f08c
 8003740:	20006d14 	.word	0x20006d14
 8003744:	20006d10 	.word	0x20006d10
 8003748:	20006d0c 	.word	0x20006d0c
 800374c:	0801f094 	.word	0x0801f094
 8003750:	0801f0b4 	.word	0x0801f0b4
 8003754:	20006d18 	.word	0x20006d18
 8003758:	0801f0bc 	.word	0x0801f0bc
 800375c:	0801f0d8 	.word	0x0801f0d8
 8003760:	20006d30 	.word	0x20006d30
 8003764:	20006d2c 	.word	0x20006d2c
 8003768:	20006d29 	.word	0x20006d29
 800376c:	20006d28 	.word	0x20006d28
 8003770:	20006d24 	.word	0x20006d24
 8003774:	20006d20 	.word	0x20006d20
 8003778:	20006d1c 	.word	0x20006d1c
 800377c:	0801f0e0 	.word	0x0801f0e0

08003780 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	ed87 0a01 	vstr	s0, [r7, #4]
 800378a:	4603      	mov	r3, r0
 800378c:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 800378e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003792:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003814 <GPS_nmea_to_dec+0x94>
 8003796:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800379a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800379e:	ee17 3a90 	vmov	r3, s15
 80037a2:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2264      	movs	r2, #100	; 0x64
 80037a8:	fb02 f303 	mul.w	r3, r2, r3
 80037ac:	ee07 3a90 	vmov	s15, r3
 80037b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80037b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037bc:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80037c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80037c4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003818 <GPS_nmea_to_dec+0x98>
 80037c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037cc:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037da:	ed97 7a02 	vldr	s14, [r7, #8]
 80037de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e2:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80037e6:	78fb      	ldrb	r3, [r7, #3]
 80037e8:	2b53      	cmp	r3, #83	; 0x53
 80037ea:	d002      	beq.n	80037f2 <GPS_nmea_to_dec+0x72>
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	2b57      	cmp	r3, #87	; 0x57
 80037f0:	d105      	bne.n	80037fe <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80037f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80037f6:	eef1 7a67 	vneg.f32	s15, s15
 80037fa:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	ee07 3a90 	vmov	s15, r3
}
 8003804:	eeb0 0a67 	vmov.f32	s0, s15
 8003808:	371c      	adds	r7, #28
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	42c80000 	.word	0x42c80000
 8003818:	42700000 	.word	0x42700000

0800381c <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 8003826:	4a09      	ldr	r2, [pc, #36]	; (800384c <GPS_init+0x30>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 800382c:	4a08      	ldr	r2, [pc, #32]	; (8003850 <GPS_init+0x34>)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <GPS_init+0x34>)
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	f04f 33ff 	mov.w	r3, #4294967295
 800383a:	2210      	movs	r2, #16
 800383c:	4905      	ldr	r1, [pc, #20]	; (8003854 <GPS_init+0x38>)
 800383e:	f009 fb58 	bl	800cef2 <HAL_UART_Transmit>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20005fa0 	.word	0x20005fa0
 8003850:	20006d98 	.word	0x20006d98
 8003854:	0801f100 	.word	0x0801f100

08003858 <__NVIC_SystemReset>:
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800385c:	f3bf 8f4f 	dsb	sy
}
 8003860:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <__NVIC_SystemReset+0x24>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800386a:	4904      	ldr	r1, [pc, #16]	; (800387c <__NVIC_SystemReset+0x24>)
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <__NVIC_SystemReset+0x28>)
 800386e:	4313      	orrs	r3, r2
 8003870:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003872:	f3bf 8f4f 	dsb	sy
}
 8003876:	bf00      	nop
    __NOP();
 8003878:	bf00      	nop
 800387a:	e7fd      	b.n	8003878 <__NVIC_SystemReset+0x20>
 800387c:	e000ed00 	.word	0xe000ed00
 8003880:	05fa0004 	.word	0x05fa0004

08003884 <MRT_externalFlashSetup>:


/*
 * User functions
 */
void MRT_externalFlashSetup(UART_HandleTypeDef* uart){
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NB_OF_FLAGS; i++){
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	e007      	b.n	80038a2 <MRT_externalFlashSetup+0x1e>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8003892:	4a10      	ldr	r2, [pc, #64]	; (80038d4 <MRT_externalFlashSetup+0x50>)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3301      	adds	r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	ddf4      	ble.n	8003892 <MRT_externalFlashSetup+0xe>
	}

	if (!W25qxx_Init()) {
 80038a8:	f000 fb9c 	bl	8003fe4 <W25qxx_Init>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f083 0301 	eor.w	r3, r3, #1
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <MRT_externalFlashSetup+0x38>
		Error_Handler(); // hangs and blinks LEDF
 80038b8:	f7ff f86c 	bl	8002994 <Error_Handler>
	}
	MRT_WUProcedure(); //Needs to be called before getFlags() and after the W25xx_Init()
 80038bc:	f002 fea0 	bl	8006600 <MRT_WUProcedure>
	MRT_getFlags();
 80038c0:	f000 f86c 	bl	800399c <MRT_getFlags>
	MRT_resetInfo(uart);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f94f 	bl	8003b68 <MRT_resetInfo>
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20006d9c 	.word	0x20006d9c

080038d8 <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset from external button
		MRT_resetFromStart();
 80038e8:	f000 f804 	bl	80038f4 <MRT_resetFromStart>
	}

}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <MRT_resetFromStart>:


void MRT_resetFromStart(void){
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
	//Clear wakeup and reset flags
	W25qxx_EraseSector(1);
 80038f8:	2001      	movs	r0, #1
 80038fa:	f000 fcc5 	bl	8004288 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80038fe:	2303      	movs	r3, #3
 8003900:	2200      	movs	r2, #0
 8003902:	2101      	movs	r1, #1
 8003904:	4807      	ldr	r0, [pc, #28]	; (8003924 <MRT_resetFromStart+0x30>)
 8003906:	f000 fe09 	bl	800451c <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(2);
 800390a:	2002      	movs	r0, #2
 800390c:	f000 fcbc 	bl	8004288 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8003910:	2303      	movs	r3, #3
 8003912:	2200      	movs	r2, #0
 8003914:	2102      	movs	r1, #2
 8003916:	4804      	ldr	r0, [pc, #16]	; (8003928 <MRT_resetFromStart+0x34>)
 8003918:	f000 fe00 	bl	800451c <W25qxx_WriteSector>

	//Clear all saved data of ejection stages
	//TODO

	//Shutdown Iridium
	MRT_Static_Iridium_Shutdown();
 800391c:	f001 fa9a 	bl	8004e54 <MRT_Static_Iridium_Shutdown>

	//Reset function
	NVIC_SystemReset();
 8003920:	f7ff ff9a 	bl	8003858 <__NVIC_SystemReset>
 8003924:	20006d9c 	.word	0x20006d9c
 8003928:	20000418 	.word	0x20000418

0800392c <MRT_updateExternalFlashBuffers>:
}


void MRT_updateExternalFlashBuffers(void){
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003932:	2300      	movs	r3, #0
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	e00c      	b.n	8003952 <MRT_updateExternalFlashBuffers+0x26>
		flash_flags_buffer[i] = *flash_flags[i];
 8003938:	4a14      	ldr	r2, [pc, #80]	; (800398c <MRT_updateExternalFlashBuffers+0x60>)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003940:	7819      	ldrb	r1, [r3, #0]
 8003942:	4a13      	ldr	r2, [pc, #76]	; (8003990 <MRT_updateExternalFlashBuffers+0x64>)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	460a      	mov	r2, r1
 800394a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3301      	adds	r3, #1
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b02      	cmp	r3, #2
 8003956:	ddef      	ble.n	8003938 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < 3; i++){
 8003958:	2300      	movs	r3, #0
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	e00c      	b.n	8003978 <MRT_updateExternalFlashBuffers+0x4c>
		flash_time_buffer[i] = *flash_time[i];
 800395e:	4a0d      	ldr	r2, [pc, #52]	; (8003994 <MRT_updateExternalFlashBuffers+0x68>)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003966:	7819      	ldrb	r1, [r3, #0]
 8003968:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <MRT_updateExternalFlashBuffers+0x6c>)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	4413      	add	r3, r2
 800396e:	460a      	mov	r2, r1
 8003970:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	3301      	adds	r3, #1
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b02      	cmp	r3, #2
 800397c:	ddef      	ble.n	800395e <MRT_updateExternalFlashBuffers+0x32>
	}
}
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	20000004 	.word	0x20000004
 8003990:	20006040 	.word	0x20006040
 8003994:	20000010 	.word	0x20000010
 8003998:	200067a0 	.word	0x200067a0

0800399c <MRT_getFlags>:


void MRT_getFlags(void){
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80039a2:	2303      	movs	r3, #3
 80039a4:	2200      	movs	r2, #0
 80039a6:	2101      	movs	r1, #1
 80039a8:	4865      	ldr	r0, [pc, #404]	; (8003b40 <MRT_getFlags+0x1a4>)
 80039aa:	f000 fef5 	bl	8004798 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 80039ae:	2303      	movs	r3, #3
 80039b0:	2200      	movs	r2, #0
 80039b2:	2102      	movs	r1, #2
 80039b4:	4863      	ldr	r0, [pc, #396]	; (8003b44 <MRT_getFlags+0x1a8>)
 80039b6:	f000 feef 	bl	8004798 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 80039ba:	4b63      	ldr	r3, [pc, #396]	; (8003b48 <MRT_getFlags+0x1ac>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d10e      	bne.n	80039e0 <MRT_getFlags+0x44>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 80039c2:	4b5f      	ldr	r3, [pc, #380]	; (8003b40 <MRT_getFlags+0x1a4>)
 80039c4:	785b      	ldrb	r3, [r3, #1]
 80039c6:	3301      	adds	r3, #1
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4b5d      	ldr	r3, [pc, #372]	; (8003b40 <MRT_getFlags+0x1a4>)
 80039cc:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 80039ce:	2001      	movs	r0, #1
 80039d0:	f000 fc5a 	bl	8004288 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80039d4:	2303      	movs	r3, #3
 80039d6:	2200      	movs	r2, #0
 80039d8:	2101      	movs	r1, #1
 80039da:	4859      	ldr	r0, [pc, #356]	; (8003b40 <MRT_getFlags+0x1a4>)
 80039dc:	f000 fd9e 	bl	800451c <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80039e0:	2300      	movs	r3, #0
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	e00b      	b.n	80039fe <MRT_getFlags+0x62>
		*flash_flags[i] = flash_flags_buffer[i];
 80039e6:	4a59      	ldr	r2, [pc, #356]	; (8003b4c <MRT_getFlags+0x1b0>)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ee:	4954      	ldr	r1, [pc, #336]	; (8003b40 <MRT_getFlags+0x1a4>)
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	440a      	add	r2, r1
 80039f4:	7812      	ldrb	r2, [r2, #0]
 80039f6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3301      	adds	r3, #1
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	ddf0      	ble.n	80039e6 <MRT_getFlags+0x4a>
	}
	for (int i = 0; i < 3; i++){
 8003a04:	2300      	movs	r3, #0
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	e00b      	b.n	8003a22 <MRT_getFlags+0x86>
		*flash_time[i] = flash_time_buffer[i];
 8003a0a:	4a51      	ldr	r2, [pc, #324]	; (8003b50 <MRT_getFlags+0x1b4>)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a12:	494c      	ldr	r1, [pc, #304]	; (8003b44 <MRT_getFlags+0x1a8>)
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	440a      	add	r2, r1
 8003a18:	7812      	ldrb	r2, [r2, #0]
 8003a1a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	ddf0      	ble.n	8003a0a <MRT_getFlags+0x6e>
	}


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8003a28:	4b4a      	ldr	r3, [pc, #296]	; (8003b54 <MRT_getFlags+0x1b8>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d013      	beq.n	8003a58 <MRT_getFlags+0xbc>
 8003a30:	4b48      	ldr	r3, [pc, #288]	; (8003b54 <MRT_getFlags+0x1b8>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d00f      	beq.n	8003a58 <MRT_getFlags+0xbc>
		reset_flag = 0;
 8003a38:	4b46      	ldr	r3, [pc, #280]	; (8003b54 <MRT_getFlags+0x1b8>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003a3e:	4b45      	ldr	r3, [pc, #276]	; (8003b54 <MRT_getFlags+0x1b8>)
 8003a40:	781a      	ldrb	r2, [r3, #0]
 8003a42:	4b3f      	ldr	r3, [pc, #252]	; (8003b40 <MRT_getFlags+0x1a4>)
 8003a44:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8003a46:	2001      	movs	r0, #1
 8003a48:	f000 fc1e 	bl	8004288 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2101      	movs	r1, #1
 8003a52:	483b      	ldr	r0, [pc, #236]	; (8003b40 <MRT_getFlags+0x1a4>)
 8003a54:	f000 fd62 	bl	800451c <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8003a58:	4b3b      	ldr	r3, [pc, #236]	; (8003b48 <MRT_getFlags+0x1ac>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d017      	beq.n	8003a90 <MRT_getFlags+0xf4>
 8003a60:	4b39      	ldr	r3, [pc, #228]	; (8003b48 <MRT_getFlags+0x1ac>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d013      	beq.n	8003a90 <MRT_getFlags+0xf4>
 8003a68:	4b37      	ldr	r3, [pc, #220]	; (8003b48 <MRT_getFlags+0x1ac>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d00f      	beq.n	8003a90 <MRT_getFlags+0xf4>
		wu_flag = 0;
 8003a70:	4b35      	ldr	r3, [pc, #212]	; (8003b48 <MRT_getFlags+0x1ac>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8003a76:	4b34      	ldr	r3, [pc, #208]	; (8003b48 <MRT_getFlags+0x1ac>)
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	4b31      	ldr	r3, [pc, #196]	; (8003b40 <MRT_getFlags+0x1a4>)
 8003a7c:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f000 fc02 	bl	8004288 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a84:	2303      	movs	r3, #3
 8003a86:	2200      	movs	r2, #0
 8003a88:	2101      	movs	r1, #1
 8003a8a:	482d      	ldr	r0, [pc, #180]	; (8003b40 <MRT_getFlags+0x1a4>)
 8003a8c:	f000 fd46 	bl	800451c <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8003a90:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <MRT_getFlags+0x1bc>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d013      	beq.n	8003ac0 <MRT_getFlags+0x124>
 8003a98:	4b2f      	ldr	r3, [pc, #188]	; (8003b58 <MRT_getFlags+0x1bc>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d00f      	beq.n	8003ac0 <MRT_getFlags+0x124>
		iwdg_flag = 0;
 8003aa0:	4b2d      	ldr	r3, [pc, #180]	; (8003b58 <MRT_getFlags+0x1bc>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003aa6:	4b2c      	ldr	r3, [pc, #176]	; (8003b58 <MRT_getFlags+0x1bc>)
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <MRT_getFlags+0x1a4>)
 8003aac:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8003aae:	2001      	movs	r0, #1
 8003ab0:	f000 fbea 	bl	8004288 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2101      	movs	r1, #1
 8003aba:	4821      	ldr	r0, [pc, #132]	; (8003b40 <MRT_getFlags+0x1a4>)
 8003abc:	f000 fd2e 	bl	800451c <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8003ac0:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <MRT_getFlags+0x1c0>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b17      	cmp	r3, #23
 8003ac6:	d90f      	bls.n	8003ae8 <MRT_getFlags+0x14c>
		prev_hours = 0;
 8003ac8:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <MRT_getFlags+0x1c0>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8003ace:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <MRT_getFlags+0x1c0>)
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <MRT_getFlags+0x1a8>)
 8003ad4:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 8003ad6:	2002      	movs	r0, #2
 8003ad8:	f000 fbd6 	bl	8004288 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003adc:	2303      	movs	r3, #3
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2102      	movs	r1, #2
 8003ae2:	4818      	ldr	r0, [pc, #96]	; (8003b44 <MRT_getFlags+0x1a8>)
 8003ae4:	f000 fd1a 	bl	800451c <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	; (8003b60 <MRT_getFlags+0x1c4>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b3b      	cmp	r3, #59	; 0x3b
 8003aee:	d90f      	bls.n	8003b10 <MRT_getFlags+0x174>
		prev_min = 0;
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <MRT_getFlags+0x1c4>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 8003af6:	4b1a      	ldr	r3, [pc, #104]	; (8003b60 <MRT_getFlags+0x1c4>)
 8003af8:	781a      	ldrb	r2, [r3, #0]
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <MRT_getFlags+0x1a8>)
 8003afc:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8003afe:	2002      	movs	r0, #2
 8003b00:	f000 fbc2 	bl	8004288 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003b04:	2303      	movs	r3, #3
 8003b06:	2200      	movs	r2, #0
 8003b08:	2102      	movs	r1, #2
 8003b0a:	480e      	ldr	r0, [pc, #56]	; (8003b44 <MRT_getFlags+0x1a8>)
 8003b0c:	f000 fd06 	bl	800451c <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8003b10:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <MRT_getFlags+0x1c8>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b3b      	cmp	r3, #59	; 0x3b
 8003b16:	d90f      	bls.n	8003b38 <MRT_getFlags+0x19c>
		prev_sec = 0;
 8003b18:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <MRT_getFlags+0x1c8>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <MRT_getFlags+0x1c8>)
 8003b20:	781a      	ldrb	r2, [r3, #0]
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <MRT_getFlags+0x1a8>)
 8003b24:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8003b26:	2002      	movs	r0, #2
 8003b28:	f000 fbae 	bl	8004288 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2102      	movs	r1, #2
 8003b32:	4804      	ldr	r0, [pc, #16]	; (8003b44 <MRT_getFlags+0x1a8>)
 8003b34:	f000 fcf2 	bl	800451c <W25qxx_WriteSector>
	}
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20006040 	.word	0x20006040
 8003b44:	200067a0 	.word	0x200067a0
 8003b48:	20000649 	.word	0x20000649
 8003b4c:	20000004 	.word	0x20000004
 8003b50:	20000010 	.word	0x20000010
 8003b54:	20000412 	.word	0x20000412
 8003b58:	20000413 	.word	0x20000413
 8003b5c:	20000414 	.word	0x20000414
 8003b60:	20000415 	.word	0x20000415
 8003b64:	20000416 	.word	0x20000416

08003b68 <MRT_resetInfo>:


void MRT_resetInfo(UART_HandleTypeDef* uart){
 8003b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b6a:	b0a5      	sub	sp, #148	; 0x94
 8003b6c:	af04      	add	r7, sp, #16
 8003b6e:	6078      	str	r0, [r7, #4]

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 8003b70:	4b42      	ldr	r3, [pc, #264]	; (8003c7c <MRT_resetInfo+0x114>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	461d      	mov	r5, r3
 8003b76:	4b42      	ldr	r3, [pc, #264]	; (8003c80 <MRT_resetInfo+0x118>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	461e      	mov	r6, r3
 8003b7c:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <MRT_resetInfo+0x11c>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	4b41      	ldr	r3, [pc, #260]	; (8003c88 <MRT_resetInfo+0x120>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	4619      	mov	r1, r3
 8003b88:	4b40      	ldr	r3, [pc, #256]	; (8003c8c <MRT_resetInfo+0x124>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	461c      	mov	r4, r3
 8003b8e:	4b40      	ldr	r3, [pc, #256]	; (8003c90 <MRT_resetInfo+0x128>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	f107 001c 	add.w	r0, r7, #28
 8003b96:	9303      	str	r3, [sp, #12]
 8003b98:	9402      	str	r4, [sp, #8]
 8003b9a:	9101      	str	r1, [sp, #4]
 8003b9c:	9200      	str	r2, [sp, #0]
 8003b9e:	4633      	mov	r3, r6
 8003ba0:	462a      	mov	r2, r5
 8003ba2:	493c      	ldr	r1, [pc, #240]	; (8003c94 <MRT_resetInfo+0x12c>)
 8003ba4:	f017 f970 	bl	801ae88 <siprintf>
	  HAL_UART_Transmit(uart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8003ba8:	f107 031c 	add.w	r3, r7, #28
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fc fb1f 	bl	80001f0 <strlen>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	f107 011c 	add.w	r1, r7, #28
 8003bba:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f009 f997 	bl	800cef2 <HAL_UART_Transmit>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8003bc4:	4b2f      	ldr	r3, [pc, #188]	; (8003c84 <MRT_resetInfo+0x11c>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d11d      	bne.n	8003c08 <MRT_resetInfo+0xa0>
		  HAL_UART_Transmit(uart, "Deactivating IWDG\r\n", 19, HAL_MAX_DELAY);
 8003bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd0:	2213      	movs	r2, #19
 8003bd2:	4931      	ldr	r1, [pc, #196]	; (8003c98 <MRT_resetInfo+0x130>)
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f009 f98c 	bl	800cef2 <HAL_UART_Transmit>

		  iwdg_flag = 0; //Flip flag
 8003bda:	4b2a      	ldr	r3, [pc, #168]	; (8003c84 <MRT_resetInfo+0x11c>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003be0:	4b28      	ldr	r3, [pc, #160]	; (8003c84 <MRT_resetInfo+0x11c>)
 8003be2:	781a      	ldrb	r2, [r3, #0]
 8003be4:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <MRT_resetInfo+0x134>)
 8003be6:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 8003be8:	2001      	movs	r0, #1
 8003bea:	f000 fb4d 	bl	8004288 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003bee:	2303      	movs	r3, #3
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	4829      	ldr	r0, [pc, #164]	; (8003c9c <MRT_resetInfo+0x134>)
 8003bf6:	f000 fc91 	bl	800451c <W25qxx_WriteSector>

		  //Disable alarm A only
		  //MRT_setAlarmA(0,0,0); TODO can be removed?

		  HAL_Delay(1000);
 8003bfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bfe:	f003 f991 	bl	8006f24 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8003c02:	201e      	movs	r0, #30
 8003c04:	f002 fdaa 	bl	800675c <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 8003c08:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <MRT_resetInfo+0x118>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d016      	beq.n	8003c3e <MRT_resetInfo+0xd6>

		  char buf[20];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8003c10:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <MRT_resetInfo+0x118>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	f107 0308 	add.w	r3, r7, #8
 8003c1a:	4921      	ldr	r1, [pc, #132]	; (8003ca0 <MRT_resetInfo+0x138>)
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f017 f933 	bl	801ae88 <siprintf>
		  HAL_UART_Transmit(uart, buf, strlen(buf), HAL_MAX_DELAY);
 8003c22:	f107 0308 	add.w	r3, r7, #8
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fc fae2 	bl	80001f0 <strlen>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	f107 0108 	add.w	r1, r7, #8
 8003c34:	f04f 33ff 	mov.w	r3, #4294967295
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f009 f95a 	bl	800cef2 <HAL_UART_Transmit>
		  */
	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <MRT_resetInfo+0x114>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d116      	bne.n	8003c74 <MRT_resetInfo+0x10c>
		  HAL_UART_Transmit(uart, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 8003c46:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4a:	220e      	movs	r2, #14
 8003c4c:	4915      	ldr	r1, [pc, #84]	; (8003ca4 <MRT_resetInfo+0x13c>)
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f009 f94f 	bl	800cef2 <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 8003c54:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <MRT_resetInfo+0x114>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <MRT_resetInfo+0x114>)
 8003c5c:	781a      	ldrb	r2, [r3, #0]
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <MRT_resetInfo+0x134>)
 8003c60:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8003c62:	2001      	movs	r0, #1
 8003c64:	f000 fb10 	bl	8004288 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003c68:	2303      	movs	r3, #3
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	480b      	ldr	r0, [pc, #44]	; (8003c9c <MRT_resetInfo+0x134>)
 8003c70:	f000 fc54 	bl	800451c <W25qxx_WriteSector>
	  }
}
 8003c74:	bf00      	nop
 8003c76:	3784      	adds	r7, #132	; 0x84
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c7c:	20000412 	.word	0x20000412
 8003c80:	20000649 	.word	0x20000649
 8003c84:	20000413 	.word	0x20000413
 8003c88:	20000414 	.word	0x20000414
 8003c8c:	20000415 	.word	0x20000415
 8003c90:	20000416 	.word	0x20000416
 8003c94:	0801f144 	.word	0x0801f144
 8003c98:	0801f184 	.word	0x0801f184
 8003c9c:	20006040 	.word	0x20006040
 8003ca0:	0801f198 	.word	0x0801f198
 8003ca4:	0801f1a8 	.word	0x0801f1a8

08003ca8 <MRT_saveRTCTime>:


/*
 * Update and save the RTC time in external flash memory
 */
void MRT_saveRTCTime(void){
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
	MRT_updateExternalFlashBuffers();
 8003cac:	f7ff fe3e 	bl	800392c <MRT_updateExternalFlashBuffers>

	//Write new RTC time to flash memory
	W25qxx_EraseSector(2);
 8003cb0:	2002      	movs	r0, #2
 8003cb2:	f000 fae9 	bl	8004288 <W25qxx_EraseSector>
	W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2102      	movs	r1, #2
 8003cbc:	4802      	ldr	r0, [pc, #8]	; (8003cc8 <MRT_saveRTCTime+0x20>)
 8003cbe:	f000 fc2d 	bl	800451c <W25qxx_WriteSector>
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	200067a0 	.word	0x200067a0

08003ccc <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 8003cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cd6:	4815      	ldr	r0, [pc, #84]	; (8003d2c <MRT_getContinuity+0x60>)
 8003cd8:	f003 fe7a 	bl	80079d0 <HAL_GPIO_ReadPin>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 8003ce0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ce4:	4811      	ldr	r0, [pc, #68]	; (8003d2c <MRT_getContinuity+0x60>)
 8003ce6:	f003 fe73 	bl	80079d0 <HAL_GPIO_ReadPin>
 8003cea:	4603      	mov	r3, r0
 8003cec:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 8003cee:	2101      	movs	r1, #1
 8003cf0:	480e      	ldr	r0, [pc, #56]	; (8003d2c <MRT_getContinuity+0x60>)
 8003cf2:	f003 fe6d 	bl	80079d0 <HAL_GPIO_ReadPin>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 8003cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cfe:	480c      	ldr	r0, [pc, #48]	; (8003d30 <MRT_getContinuity+0x64>)
 8003d00:	f003 fe66 	bl	80079d0 <HAL_GPIO_ReadPin>
 8003d04:	4603      	mov	r3, r0
 8003d06:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	005a      	lsls	r2, r3, #1
 8003d0c:	79bb      	ldrb	r3, [r7, #6]
 8003d0e:	4413      	add	r3, r2
 8003d10:	005a      	lsls	r2, r3, #1
 8003d12:	797b      	ldrb	r3, [r7, #5]
 8003d14:	4413      	add	r3, r2
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	793b      	ldrb	r3, [r7, #4]
 8003d1e:	4413      	add	r3, r2
 8003d20:	70fb      	strb	r3, [r7, #3]
	return continuity;
 8003d22:	78fb      	ldrb	r3, [r7, #3]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40021800 	.word	0x40021800
 8003d30:	40021400 	.word	0x40021400
 8003d34:	00000000 	.word	0x00000000

08003d38 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,(-R*-0.0065/(go*M)))-1);
 8003d42:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d46:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003dc8 <MRT_getAltitude+0x90>
 8003d4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d4e:	ee16 0a90 	vmov	r0, s13
 8003d52:	f7fc fc09 	bl	8000568 <__aeabi_f2d>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003db8 <MRT_getAltitude+0x80>
 8003d5e:	ec43 2b10 	vmov	d0, r2, r3
 8003d62:	f014 fefb 	bl	8018b5c <pow>
 8003d66:	ec51 0b10 	vmov	r0, r1, d0
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <MRT_getAltitude+0x94>)
 8003d70:	f7fc fa9a 	bl	80002a8 <__aeabi_dsub>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	a310      	add	r3, pc, #64	; (adr r3, 8003dc0 <MRT_getAltitude+0x88>)
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	f7fc fc49 	bl	8000618 <__aeabi_dmul>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <MRT_getAltitude+0x98>)
 8003d94:	f7fc fa8a 	bl	80002ac <__adddf3>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4619      	mov	r1, r3
 8003da0:	f7fc ff32 	bl	8000c08 <__aeabi_d2f>
 8003da4:	4603      	mov	r3, r0
 8003da6:	ee07 3a90 	vmov	s15, r3
}
 8003daa:	eeb0 0a67 	vmov.f32	s0, s15
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	f3af 8000 	nop.w
 8003db8:	b537afba 	.word	0xb537afba
 8003dbc:	3fc85a8b 	.word	0x3fc85a8b
 8003dc0:	76276276 	.word	0x76276276
 8003dc4:	c0e481c2 	.word	0xc0e481c2
 8003dc8:	447d8000 	.word	0x447d8000
 8003dcc:	3ff00000 	.word	0x3ff00000
 8003dd0:	40590000 	.word	0x40590000

08003dd4 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003dde:	f107 020f 	add.w	r2, r7, #15
 8003de2:	1df9      	adds	r1, r7, #7
 8003de4:	2364      	movs	r3, #100	; 0x64
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2301      	movs	r3, #1
 8003dea:	4804      	ldr	r0, [pc, #16]	; (8003dfc <W25qxx_Spi+0x28>)
 8003dec:	f007 ff76 	bl	800bcdc <HAL_SPI_TransmitReceive>
	return ret;
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20005fa4 	.word	0x20005fa4

08003e00 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	2300      	movs	r3, #0
 8003e14:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003e16:	2200      	movs	r2, #0
 8003e18:	2140      	movs	r1, #64	; 0x40
 8003e1a:	4813      	ldr	r0, [pc, #76]	; (8003e68 <W25qxx_ReadID+0x68>)
 8003e1c:	f003 fdf0 	bl	8007a00 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003e20:	209f      	movs	r0, #159	; 0x9f
 8003e22:	f7ff ffd7 	bl	8003dd4 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e26:	20a5      	movs	r0, #165	; 0xa5
 8003e28:	f7ff ffd4 	bl	8003dd4 <W25qxx_Spi>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e30:	20a5      	movs	r0, #165	; 0xa5
 8003e32:	f7ff ffcf 	bl	8003dd4 <W25qxx_Spi>
 8003e36:	4603      	mov	r3, r0
 8003e38:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e3a:	20a5      	movs	r0, #165	; 0xa5
 8003e3c:	f7ff ffca 	bl	8003dd4 <W25qxx_Spi>
 8003e40:	4603      	mov	r3, r0
 8003e42:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003e44:	2201      	movs	r2, #1
 8003e46:	2140      	movs	r1, #64	; 0x40
 8003e48:	4807      	ldr	r0, [pc, #28]	; (8003e68 <W25qxx_ReadID+0x68>)
 8003e4a:	f003 fdd9 	bl	8007a00 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	041a      	lsls	r2, r3, #16
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	4313      	orrs	r3, r2
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40020c00 	.word	0x40020c00

08003e6c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003e72:	2200      	movs	r2, #0
 8003e74:	2140      	movs	r1, #64	; 0x40
 8003e76:	4816      	ldr	r0, [pc, #88]	; (8003ed0 <W25qxx_ReadUniqID+0x64>)
 8003e78:	f003 fdc2 	bl	8007a00 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003e7c:	204b      	movs	r0, #75	; 0x4b
 8003e7e:	f7ff ffa9 	bl	8003dd4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	71fb      	strb	r3, [r7, #7]
 8003e86:	e005      	b.n	8003e94 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e88:	20a5      	movs	r0, #165	; 0xa5
 8003e8a:	f7ff ffa3 	bl	8003dd4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	3301      	adds	r3, #1
 8003e92:	71fb      	strb	r3, [r7, #7]
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d9f6      	bls.n	8003e88 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	71bb      	strb	r3, [r7, #6]
 8003e9e:	e00b      	b.n	8003eb8 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003ea0:	79bc      	ldrb	r4, [r7, #6]
 8003ea2:	20a5      	movs	r0, #165	; 0xa5
 8003ea4:	f7ff ff96 	bl	8003dd4 <W25qxx_Spi>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <W25qxx_ReadUniqID+0x68>)
 8003eae:	4423      	add	r3, r4
 8003eb0:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003eb2:	79bb      	ldrb	r3, [r7, #6]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	71bb      	strb	r3, [r7, #6]
 8003eb8:	79bb      	ldrb	r3, [r7, #6]
 8003eba:	2b07      	cmp	r3, #7
 8003ebc:	d9f0      	bls.n	8003ea0 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	2140      	movs	r1, #64	; 0x40
 8003ec2:	4803      	ldr	r0, [pc, #12]	; (8003ed0 <W25qxx_ReadUniqID+0x64>)
 8003ec4:	f003 fd9c 	bl	8007a00 <HAL_GPIO_WritePin>
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd90      	pop	{r4, r7, pc}
 8003ed0:	40020c00 	.word	0x40020c00
 8003ed4:	20006da0 	.word	0x20006da0

08003ed8 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003edc:	2200      	movs	r2, #0
 8003ede:	2140      	movs	r1, #64	; 0x40
 8003ee0:	4807      	ldr	r0, [pc, #28]	; (8003f00 <W25qxx_WriteEnable+0x28>)
 8003ee2:	f003 fd8d 	bl	8007a00 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8003ee6:	2006      	movs	r0, #6
 8003ee8:	f7ff ff74 	bl	8003dd4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003eec:	2201      	movs	r2, #1
 8003eee:	2140      	movs	r1, #64	; 0x40
 8003ef0:	4803      	ldr	r0, [pc, #12]	; (8003f00 <W25qxx_WriteEnable+0x28>)
 8003ef2:	f003 fd85 	bl	8007a00 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003ef6:	2001      	movs	r0, #1
 8003ef8:	f010 fe91 	bl	8014c1e <osDelay>
}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40020c00 	.word	0x40020c00

08003f04 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003f12:	2200      	movs	r2, #0
 8003f14:	2140      	movs	r1, #64	; 0x40
 8003f16:	481c      	ldr	r0, [pc, #112]	; (8003f88 <W25qxx_ReadStatusRegister+0x84>)
 8003f18:	f003 fd72 	bl	8007a00 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d10c      	bne.n	8003f3c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003f22:	2005      	movs	r0, #5
 8003f24:	f7ff ff56 	bl	8003dd4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f28:	20a5      	movs	r0, #165	; 0xa5
 8003f2a:	f7ff ff53 	bl	8003dd4 <W25qxx_Spi>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003f32:	4a16      	ldr	r2, [pc, #88]	; (8003f8c <W25qxx_ReadStatusRegister+0x88>)
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003f3a:	e01b      	b.n	8003f74 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d10c      	bne.n	8003f5c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003f42:	2035      	movs	r0, #53	; 0x35
 8003f44:	f7ff ff46 	bl	8003dd4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f48:	20a5      	movs	r0, #165	; 0xa5
 8003f4a:	f7ff ff43 	bl	8003dd4 <W25qxx_Spi>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003f52:	4a0e      	ldr	r2, [pc, #56]	; (8003f8c <W25qxx_ReadStatusRegister+0x88>)
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003f5a:	e00b      	b.n	8003f74 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003f5c:	2015      	movs	r0, #21
 8003f5e:	f7ff ff39 	bl	8003dd4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f62:	20a5      	movs	r0, #165	; 0xa5
 8003f64:	f7ff ff36 	bl	8003dd4 <W25qxx_Spi>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003f6c:	4a07      	ldr	r2, [pc, #28]	; (8003f8c <W25qxx_ReadStatusRegister+0x88>)
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003f74:	2201      	movs	r2, #1
 8003f76:	2140      	movs	r1, #64	; 0x40
 8003f78:	4803      	ldr	r0, [pc, #12]	; (8003f88 <W25qxx_ReadStatusRegister+0x84>)
 8003f7a:	f003 fd41 	bl	8007a00 <HAL_GPIO_WritePin>
	return status;
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40020c00 	.word	0x40020c00
 8003f8c:	20006da0 	.word	0x20006da0

08003f90 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003f94:	2001      	movs	r0, #1
 8003f96:	f010 fe42 	bl	8014c1e <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2140      	movs	r1, #64	; 0x40
 8003f9e:	480f      	ldr	r0, [pc, #60]	; (8003fdc <W25qxx_WaitForWriteEnd+0x4c>)
 8003fa0:	f003 fd2e 	bl	8007a00 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003fa4:	2005      	movs	r0, #5
 8003fa6:	f7ff ff15 	bl	8003dd4 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003faa:	20a5      	movs	r0, #165	; 0xa5
 8003fac:	f7ff ff12 	bl	8003dd4 <W25qxx_Spi>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <W25qxx_WaitForWriteEnd+0x50>)
 8003fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003fba:	2001      	movs	r0, #1
 8003fbc:	f010 fe2f 	bl	8014c1e <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003fc0:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <W25qxx_WaitForWriteEnd+0x50>)
 8003fc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1ed      	bne.n	8003faa <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003fce:	2201      	movs	r2, #1
 8003fd0:	2140      	movs	r1, #64	; 0x40
 8003fd2:	4802      	ldr	r0, [pc, #8]	; (8003fdc <W25qxx_WaitForWriteEnd+0x4c>)
 8003fd4:	f003 fd14 	bl	8007a00 <HAL_GPIO_WritePin>
}
 8003fd8:	bf00      	nop
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40020c00 	.word	0x40020c00
 8003fe0:	20006da0 	.word	0x20006da0

08003fe4 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003fea:	4b90      	ldr	r3, [pc, #576]	; (800422c <W25qxx_Init+0x248>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003ff2:	e002      	b.n	8003ffa <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	f010 fe12 	bl	8014c1e <osDelay>
	while (HAL_GetTick() < 100)
 8003ffa:	f002 ff87 	bl	8006f0c <HAL_GetTick>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b63      	cmp	r3, #99	; 0x63
 8004002:	d9f7      	bls.n	8003ff4 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004004:	2201      	movs	r2, #1
 8004006:	2140      	movs	r1, #64	; 0x40
 8004008:	4889      	ldr	r0, [pc, #548]	; (8004230 <W25qxx_Init+0x24c>)
 800400a:	f003 fcf9 	bl	8007a00 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800400e:	2064      	movs	r0, #100	; 0x64
 8004010:	f010 fe05 	bl	8014c1e <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8004014:	4887      	ldr	r0, [pc, #540]	; (8004234 <W25qxx_Init+0x250>)
 8004016:	f016 fe6b 	bl	801acf0 <puts>
#endif
	id = W25qxx_ReadID();
 800401a:	f7ff fef1 	bl	8003e00 <W25qxx_ReadID>
 800401e:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	4885      	ldr	r0, [pc, #532]	; (8004238 <W25qxx_Init+0x254>)
 8004024:	f016 fdde 	bl	801abe4 <iprintf>
#endif
	switch (id & 0x000000FF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	3b11      	subs	r3, #17
 800402e:	2b0f      	cmp	r3, #15
 8004030:	f200 808b 	bhi.w	800414a <W25qxx_Init+0x166>
 8004034:	a201      	add	r2, pc, #4	; (adr r2, 800403c <W25qxx_Init+0x58>)
 8004036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403a:	bf00      	nop
 800403c:	08004137 	.word	0x08004137
 8004040:	08004123 	.word	0x08004123
 8004044:	0800410f 	.word	0x0800410f
 8004048:	080040fb 	.word	0x080040fb
 800404c:	080040e7 	.word	0x080040e7
 8004050:	080040d3 	.word	0x080040d3
 8004054:	080040bf 	.word	0x080040bf
 8004058:	080040a9 	.word	0x080040a9
 800405c:	08004093 	.word	0x08004093
 8004060:	0800414b 	.word	0x0800414b
 8004064:	0800414b 	.word	0x0800414b
 8004068:	0800414b 	.word	0x0800414b
 800406c:	0800414b 	.word	0x0800414b
 8004070:	0800414b 	.word	0x0800414b
 8004074:	0800414b 	.word	0x0800414b
 8004078:	0800407d 	.word	0x0800407d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 800407c:	4b6b      	ldr	r3, [pc, #428]	; (800422c <W25qxx_Init+0x248>)
 800407e:	220a      	movs	r2, #10
 8004080:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004082:	4b6a      	ldr	r3, [pc, #424]	; (800422c <W25qxx_Init+0x248>)
 8004084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004088:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 800408a:	486c      	ldr	r0, [pc, #432]	; (800423c <W25qxx_Init+0x258>)
 800408c:	f016 fe30 	bl	801acf0 <puts>
#endif
		break;
 8004090:	e064      	b.n	800415c <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004092:	4b66      	ldr	r3, [pc, #408]	; (800422c <W25qxx_Init+0x248>)
 8004094:	2209      	movs	r2, #9
 8004096:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004098:	4b64      	ldr	r3, [pc, #400]	; (800422c <W25qxx_Init+0x248>)
 800409a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800409e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 80040a0:	4867      	ldr	r0, [pc, #412]	; (8004240 <W25qxx_Init+0x25c>)
 80040a2:	f016 fe25 	bl	801acf0 <puts>
#endif
		break;
 80040a6:	e059      	b.n	800415c <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80040a8:	4b60      	ldr	r3, [pc, #384]	; (800422c <W25qxx_Init+0x248>)
 80040aa:	2208      	movs	r2, #8
 80040ac:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80040ae:	4b5f      	ldr	r3, [pc, #380]	; (800422c <W25qxx_Init+0x248>)
 80040b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040b4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 80040b6:	4863      	ldr	r0, [pc, #396]	; (8004244 <W25qxx_Init+0x260>)
 80040b8:	f016 fe1a 	bl	801acf0 <puts>
#endif
		break;
 80040bc:	e04e      	b.n	800415c <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80040be:	4b5b      	ldr	r3, [pc, #364]	; (800422c <W25qxx_Init+0x248>)
 80040c0:	2207      	movs	r2, #7
 80040c2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80040c4:	4b59      	ldr	r3, [pc, #356]	; (800422c <W25qxx_Init+0x248>)
 80040c6:	2280      	movs	r2, #128	; 0x80
 80040c8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 80040ca:	485f      	ldr	r0, [pc, #380]	; (8004248 <W25qxx_Init+0x264>)
 80040cc:	f016 fe10 	bl	801acf0 <puts>
#endif
		break;
 80040d0:	e044      	b.n	800415c <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80040d2:	4b56      	ldr	r3, [pc, #344]	; (800422c <W25qxx_Init+0x248>)
 80040d4:	2206      	movs	r2, #6
 80040d6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80040d8:	4b54      	ldr	r3, [pc, #336]	; (800422c <W25qxx_Init+0x248>)
 80040da:	2240      	movs	r2, #64	; 0x40
 80040dc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 80040de:	485b      	ldr	r0, [pc, #364]	; (800424c <W25qxx_Init+0x268>)
 80040e0:	f016 fe06 	bl	801acf0 <puts>
#endif
		break;
 80040e4:	e03a      	b.n	800415c <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80040e6:	4b51      	ldr	r3, [pc, #324]	; (800422c <W25qxx_Init+0x248>)
 80040e8:	2205      	movs	r2, #5
 80040ea:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80040ec:	4b4f      	ldr	r3, [pc, #316]	; (800422c <W25qxx_Init+0x248>)
 80040ee:	2220      	movs	r2, #32
 80040f0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 80040f2:	4857      	ldr	r0, [pc, #348]	; (8004250 <W25qxx_Init+0x26c>)
 80040f4:	f016 fdfc 	bl	801acf0 <puts>
#endif
		break;
 80040f8:	e030      	b.n	800415c <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80040fa:	4b4c      	ldr	r3, [pc, #304]	; (800422c <W25qxx_Init+0x248>)
 80040fc:	2204      	movs	r2, #4
 80040fe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004100:	4b4a      	ldr	r3, [pc, #296]	; (800422c <W25qxx_Init+0x248>)
 8004102:	2210      	movs	r2, #16
 8004104:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8004106:	4853      	ldr	r0, [pc, #332]	; (8004254 <W25qxx_Init+0x270>)
 8004108:	f016 fdf2 	bl	801acf0 <puts>
#endif
		break;
 800410c:	e026      	b.n	800415c <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800410e:	4b47      	ldr	r3, [pc, #284]	; (800422c <W25qxx_Init+0x248>)
 8004110:	2203      	movs	r2, #3
 8004112:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004114:	4b45      	ldr	r3, [pc, #276]	; (800422c <W25qxx_Init+0x248>)
 8004116:	2208      	movs	r2, #8
 8004118:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 800411a:	484f      	ldr	r0, [pc, #316]	; (8004258 <W25qxx_Init+0x274>)
 800411c:	f016 fde8 	bl	801acf0 <puts>
#endif
		break;
 8004120:	e01c      	b.n	800415c <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004122:	4b42      	ldr	r3, [pc, #264]	; (800422c <W25qxx_Init+0x248>)
 8004124:	2202      	movs	r2, #2
 8004126:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004128:	4b40      	ldr	r3, [pc, #256]	; (800422c <W25qxx_Init+0x248>)
 800412a:	2204      	movs	r2, #4
 800412c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 800412e:	484b      	ldr	r0, [pc, #300]	; (800425c <W25qxx_Init+0x278>)
 8004130:	f016 fdde 	bl	801acf0 <puts>
#endif
		break;
 8004134:	e012      	b.n	800415c <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004136:	4b3d      	ldr	r3, [pc, #244]	; (800422c <W25qxx_Init+0x248>)
 8004138:	2201      	movs	r2, #1
 800413a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800413c:	4b3b      	ldr	r3, [pc, #236]	; (800422c <W25qxx_Init+0x248>)
 800413e:	2202      	movs	r2, #2
 8004140:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8004142:	4847      	ldr	r0, [pc, #284]	; (8004260 <W25qxx_Init+0x27c>)
 8004144:	f016 fdd4 	bl	801acf0 <puts>
#endif
		break;
 8004148:	e008      	b.n	800415c <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 800414a:	4846      	ldr	r0, [pc, #280]	; (8004264 <W25qxx_Init+0x280>)
 800414c:	f016 fdd0 	bl	801acf0 <puts>
#endif
		w25qxx.Lock = 0;
 8004150:	4b36      	ldr	r3, [pc, #216]	; (800422c <W25qxx_Init+0x248>)
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004158:	2300      	movs	r3, #0
 800415a:	e063      	b.n	8004224 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 800415c:	4b33      	ldr	r3, [pc, #204]	; (800422c <W25qxx_Init+0x248>)
 800415e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004162:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004164:	4b31      	ldr	r3, [pc, #196]	; (800422c <W25qxx_Init+0x248>)
 8004166:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800416a:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800416c:	4b2f      	ldr	r3, [pc, #188]	; (800422c <W25qxx_Init+0x248>)
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	4a2e      	ldr	r2, [pc, #184]	; (800422c <W25qxx_Init+0x248>)
 8004174:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004176:	4b2d      	ldr	r3, [pc, #180]	; (800422c <W25qxx_Init+0x248>)
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	4a2c      	ldr	r2, [pc, #176]	; (800422c <W25qxx_Init+0x248>)
 800417c:	6912      	ldr	r2, [r2, #16]
 800417e:	fb02 f303 	mul.w	r3, r2, r3
 8004182:	4a2a      	ldr	r2, [pc, #168]	; (800422c <W25qxx_Init+0x248>)
 8004184:	8952      	ldrh	r2, [r2, #10]
 8004186:	fbb3 f3f2 	udiv	r3, r3, r2
 800418a:	4a28      	ldr	r2, [pc, #160]	; (800422c <W25qxx_Init+0x248>)
 800418c:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800418e:	4b27      	ldr	r3, [pc, #156]	; (800422c <W25qxx_Init+0x248>)
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	4a25      	ldr	r2, [pc, #148]	; (800422c <W25qxx_Init+0x248>)
 8004196:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004198:	4b24      	ldr	r3, [pc, #144]	; (800422c <W25qxx_Init+0x248>)
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	4a23      	ldr	r2, [pc, #140]	; (800422c <W25qxx_Init+0x248>)
 800419e:	6912      	ldr	r2, [r2, #16]
 80041a0:	fb02 f303 	mul.w	r3, r2, r3
 80041a4:	0a9b      	lsrs	r3, r3, #10
 80041a6:	4a21      	ldr	r2, [pc, #132]	; (800422c <W25qxx_Init+0x248>)
 80041a8:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80041aa:	f7ff fe5f 	bl	8003e6c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80041ae:	2001      	movs	r0, #1
 80041b0:	f7ff fea8 	bl	8003f04 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80041b4:	2002      	movs	r0, #2
 80041b6:	f7ff fea5 	bl	8003f04 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80041ba:	2003      	movs	r0, #3
 80041bc:	f7ff fea2 	bl	8003f04 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 80041c0:	4b1a      	ldr	r3, [pc, #104]	; (800422c <W25qxx_Init+0x248>)
 80041c2:	895b      	ldrh	r3, [r3, #10]
 80041c4:	4619      	mov	r1, r3
 80041c6:	4828      	ldr	r0, [pc, #160]	; (8004268 <W25qxx_Init+0x284>)
 80041c8:	f016 fd0c 	bl	801abe4 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 80041cc:	4b17      	ldr	r3, [pc, #92]	; (800422c <W25qxx_Init+0x248>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4619      	mov	r1, r3
 80041d2:	4826      	ldr	r0, [pc, #152]	; (800426c <W25qxx_Init+0x288>)
 80041d4:	f016 fd06 	bl	801abe4 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <W25qxx_Init+0x248>)
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	4619      	mov	r1, r3
 80041de:	4824      	ldr	r0, [pc, #144]	; (8004270 <W25qxx_Init+0x28c>)
 80041e0:	f016 fd00 	bl	801abe4 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <W25qxx_Init+0x248>)
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	4619      	mov	r1, r3
 80041ea:	4822      	ldr	r0, [pc, #136]	; (8004274 <W25qxx_Init+0x290>)
 80041ec:	f016 fcfa 	bl	801abe4 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 80041f0:	4b0e      	ldr	r3, [pc, #56]	; (800422c <W25qxx_Init+0x248>)
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	4619      	mov	r1, r3
 80041f6:	4820      	ldr	r0, [pc, #128]	; (8004278 <W25qxx_Init+0x294>)
 80041f8:	f016 fcf4 	bl	801abe4 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <W25qxx_Init+0x248>)
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	4619      	mov	r1, r3
 8004202:	481e      	ldr	r0, [pc, #120]	; (800427c <W25qxx_Init+0x298>)
 8004204:	f016 fcee 	bl	801abe4 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8004208:	4b08      	ldr	r3, [pc, #32]	; (800422c <W25qxx_Init+0x248>)
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	4619      	mov	r1, r3
 800420e:	481c      	ldr	r0, [pc, #112]	; (8004280 <W25qxx_Init+0x29c>)
 8004210:	f016 fce8 	bl	801abe4 <iprintf>
	printf("w25qxx Init Done\r\n");
 8004214:	481b      	ldr	r0, [pc, #108]	; (8004284 <W25qxx_Init+0x2a0>)
 8004216:	f016 fd6b 	bl	801acf0 <puts>
#endif
	w25qxx.Lock = 0;
 800421a:	4b04      	ldr	r3, [pc, #16]	; (800422c <W25qxx_Init+0x248>)
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004222:	2301      	movs	r3, #1
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20006da0 	.word	0x20006da0
 8004230:	40020c00 	.word	0x40020c00
 8004234:	0801f1b8 	.word	0x0801f1b8
 8004238:	0801f1d0 	.word	0x0801f1d0
 800423c:	0801f1e4 	.word	0x0801f1e4
 8004240:	0801f1fc 	.word	0x0801f1fc
 8004244:	0801f214 	.word	0x0801f214
 8004248:	0801f22c 	.word	0x0801f22c
 800424c:	0801f244 	.word	0x0801f244
 8004250:	0801f25c 	.word	0x0801f25c
 8004254:	0801f274 	.word	0x0801f274
 8004258:	0801f28c 	.word	0x0801f28c
 800425c:	0801f2a4 	.word	0x0801f2a4
 8004260:	0801f2bc 	.word	0x0801f2bc
 8004264:	0801f2d4 	.word	0x0801f2d4
 8004268:	0801f2e8 	.word	0x0801f2e8
 800426c:	0801f308 	.word	0x0801f308
 8004270:	0801f320 	.word	0x0801f320
 8004274:	0801f340 	.word	0x0801f340
 8004278:	0801f35c 	.word	0x0801f35c
 800427c:	0801f37c 	.word	0x0801f37c
 8004280:	0801f398 	.word	0x0801f398
 8004284:	0801f3b8 	.word	0x0801f3b8

08004288 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004290:	e002      	b.n	8004298 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004292:	2001      	movs	r0, #1
 8004294:	f010 fcc3 	bl	8014c1e <osDelay>
	while (w25qxx.Lock == 1)
 8004298:	4b2d      	ldr	r3, [pc, #180]	; (8004350 <W25qxx_EraseSector+0xc8>)
 800429a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d0f7      	beq.n	8004292 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80042a2:	4b2b      	ldr	r3, [pc, #172]	; (8004350 <W25qxx_EraseSector+0xc8>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 80042aa:	f002 fe2f 	bl	8006f0c <HAL_GetTick>
 80042ae:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4828      	ldr	r0, [pc, #160]	; (8004354 <W25qxx_EraseSector+0xcc>)
 80042b4:	f016 fc96 	bl	801abe4 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 80042b8:	f7ff fe6a 	bl	8003f90 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80042bc:	4b24      	ldr	r3, [pc, #144]	; (8004350 <W25qxx_EraseSector+0xc8>)
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80042c8:	f7ff fe06 	bl	8003ed8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80042cc:	2200      	movs	r2, #0
 80042ce:	2140      	movs	r1, #64	; 0x40
 80042d0:	4821      	ldr	r0, [pc, #132]	; (8004358 <W25qxx_EraseSector+0xd0>)
 80042d2:	f003 fb95 	bl	8007a00 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80042d6:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <W25qxx_EraseSector+0xc8>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d909      	bls.n	80042f2 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 80042de:	2021      	movs	r0, #33	; 0x21
 80042e0:	f7ff fd78 	bl	8003dd4 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	0e1b      	lsrs	r3, r3, #24
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fd72 	bl	8003dd4 <W25qxx_Spi>
 80042f0:	e002      	b.n	80042f8 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 80042f2:	2020      	movs	r0, #32
 80042f4:	f7ff fd6e 	bl	8003dd4 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	0c1b      	lsrs	r3, r3, #16
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fd68 	bl	8003dd4 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	b2db      	uxtb	r3, r3
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fd62 	bl	8003dd4 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fd5d 	bl	8003dd4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800431a:	2201      	movs	r2, #1
 800431c:	2140      	movs	r1, #64	; 0x40
 800431e:	480e      	ldr	r0, [pc, #56]	; (8004358 <W25qxx_EraseSector+0xd0>)
 8004320:	f003 fb6e 	bl	8007a00 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004324:	f7ff fe34 	bl	8003f90 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004328:	f002 fdf0 	bl	8006f0c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	4619      	mov	r1, r3
 8004334:	4809      	ldr	r0, [pc, #36]	; (800435c <W25qxx_EraseSector+0xd4>)
 8004336:	f016 fc55 	bl	801abe4 <iprintf>
#endif
	W25qxx_Delay(1);
 800433a:	2001      	movs	r0, #1
 800433c:	f010 fc6f 	bl	8014c1e <osDelay>
	w25qxx.Lock = 0;
 8004340:	4b03      	ldr	r3, [pc, #12]	; (8004350 <W25qxx_EraseSector+0xc8>)
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20006da0 	.word	0x20006da0
 8004354:	0801f410 	.word	0x0801f410
 8004358:	40020c00 	.word	0x40020c00
 800435c:	0801f434 	.word	0x0801f434

08004360 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004368:	4b07      	ldr	r3, [pc, #28]	; (8004388 <W25qxx_SectorToPage+0x28>)
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	4a05      	ldr	r2, [pc, #20]	; (8004388 <W25qxx_SectorToPage+0x28>)
 8004374:	8952      	ldrh	r2, [r2, #10]
 8004376:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800437a:	4618      	mov	r0, r3
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20006da0 	.word	0x20006da0

0800438c <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800439a:	e002      	b.n	80043a2 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 800439c:	2001      	movs	r0, #1
 800439e:	f010 fc3e 	bl	8014c1e <osDelay>
	while (w25qxx.Lock == 1)
 80043a2:	4b57      	ldr	r3, [pc, #348]	; (8004500 <W25qxx_WritePage+0x174>)
 80043a4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d0f7      	beq.n	800439c <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80043ac:	4b54      	ldr	r3, [pc, #336]	; (8004500 <W25qxx_WritePage+0x174>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	4a51      	ldr	r2, [pc, #324]	; (8004500 <W25qxx_WritePage+0x174>)
 80043bc:	8952      	ldrh	r2, [r2, #10]
 80043be:	4293      	cmp	r3, r2
 80043c0:	d802      	bhi.n	80043c8 <W25qxx_WritePage+0x3c>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d105      	bne.n	80043d4 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80043c8:	4b4d      	ldr	r3, [pc, #308]	; (8004500 <W25qxx_WritePage+0x174>)
 80043ca:	895b      	ldrh	r3, [r3, #10]
 80043cc:	461a      	mov	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	4413      	add	r3, r2
 80043da:	4a49      	ldr	r2, [pc, #292]	; (8004500 <W25qxx_WritePage+0x174>)
 80043dc:	8952      	ldrh	r2, [r2, #10]
 80043de:	4293      	cmp	r3, r2
 80043e0:	d905      	bls.n	80043ee <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80043e2:	4b47      	ldr	r3, [pc, #284]	; (8004500 <W25qxx_WritePage+0x174>)
 80043e4:	895b      	ldrh	r3, [r3, #10]
 80043e6:	461a      	mov	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	4843      	ldr	r0, [pc, #268]	; (8004504 <W25qxx_WritePage+0x178>)
 80043f6:	f016 fbf5 	bl	801abe4 <iprintf>
	W25qxx_Delay(100);
 80043fa:	2064      	movs	r0, #100	; 0x64
 80043fc:	f010 fc0f 	bl	8014c1e <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004400:	f002 fd84 	bl	8006f0c <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8004406:	f7ff fdc3 	bl	8003f90 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800440a:	f7ff fd65 	bl	8003ed8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800440e:	2200      	movs	r2, #0
 8004410:	2140      	movs	r1, #64	; 0x40
 8004412:	483d      	ldr	r0, [pc, #244]	; (8004508 <W25qxx_WritePage+0x17c>)
 8004414:	f003 faf4 	bl	8007a00 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004418:	4b39      	ldr	r3, [pc, #228]	; (8004500 <W25qxx_WritePage+0x174>)
 800441a:	895b      	ldrh	r3, [r3, #10]
 800441c:	461a      	mov	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	fb03 f302 	mul.w	r3, r3, r2
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	4413      	add	r3, r2
 8004428:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800442a:	4b35      	ldr	r3, [pc, #212]	; (8004500 <W25qxx_WritePage+0x174>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b08      	cmp	r3, #8
 8004430:	d909      	bls.n	8004446 <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 8004432:	2012      	movs	r0, #18
 8004434:	f7ff fcce 	bl	8003dd4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	0e1b      	lsrs	r3, r3, #24
 800443c:	b2db      	uxtb	r3, r3
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fcc8 	bl	8003dd4 <W25qxx_Spi>
 8004444:	e002      	b.n	800444c <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 8004446:	2002      	movs	r0, #2
 8004448:	f7ff fcc4 	bl	8003dd4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	0c1b      	lsrs	r3, r3, #16
 8004450:	b2db      	uxtb	r3, r3
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff fcbe 	bl	8003dd4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	0a1b      	lsrs	r3, r3, #8
 800445c:	b2db      	uxtb	r3, r3
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fcb8 	bl	8003dd4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fcb3 	bl	8003dd4 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	b29a      	uxth	r2, r3
 8004472:	2364      	movs	r3, #100	; 0x64
 8004474:	68f9      	ldr	r1, [r7, #12]
 8004476:	4825      	ldr	r0, [pc, #148]	; (800450c <W25qxx_WritePage+0x180>)
 8004478:	f007 f9e3 	bl	800b842 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800447c:	2201      	movs	r2, #1
 800447e:	2140      	movs	r1, #64	; 0x40
 8004480:	4821      	ldr	r0, [pc, #132]	; (8004508 <W25qxx_WritePage+0x17c>)
 8004482:	f003 fabd 	bl	8007a00 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004486:	f7ff fd83 	bl	8003f90 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 800448a:	f002 fd3f 	bl	8006f0c <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	e018      	b.n	80044ce <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d108      	bne.n	80044b8 <W25qxx_WritePage+0x12c>
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d905      	bls.n	80044b8 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 80044ac:	4818      	ldr	r0, [pc, #96]	; (8004510 <W25qxx_WritePage+0x184>)
 80044ae:	f016 fc1f 	bl	801acf0 <puts>
			W25qxx_Delay(10);
 80044b2:	200a      	movs	r0, #10
 80044b4:	f010 fbb3 	bl	8014c1e <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	4413      	add	r3, r2
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	4619      	mov	r1, r3
 80044c2:	4814      	ldr	r0, [pc, #80]	; (8004514 <W25qxx_WritePage+0x188>)
 80044c4:	f016 fb8e 	bl	801abe4 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	3301      	adds	r3, #1
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d3e2      	bcc.n	800449c <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 80044d6:	480e      	ldr	r0, [pc, #56]	; (8004510 <W25qxx_WritePage+0x184>)
 80044d8:	f016 fc0a 	bl	801acf0 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 80044dc:	6939      	ldr	r1, [r7, #16]
 80044de:	480e      	ldr	r0, [pc, #56]	; (8004518 <W25qxx_WritePage+0x18c>)
 80044e0:	f016 fb80 	bl	801abe4 <iprintf>
	W25qxx_Delay(100);
 80044e4:	2064      	movs	r0, #100	; 0x64
 80044e6:	f010 fb9a 	bl	8014c1e <osDelay>
#endif
	W25qxx_Delay(1);
 80044ea:	2001      	movs	r0, #1
 80044ec:	f010 fb97 	bl	8014c1e <osDelay>
	w25qxx.Lock = 0;
 80044f0:	4b03      	ldr	r3, [pc, #12]	; (8004500 <W25qxx_WritePage+0x174>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80044f8:	bf00      	nop
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20006da0 	.word	0x20006da0
 8004504:	0801f698 	.word	0x0801f698
 8004508:	40020c00 	.word	0x40020c00
 800450c:	20005fa4 	.word	0x20005fa4
 8004510:	0801f6d4 	.word	0x0801f6d4
 8004514:	0801f6d8 	.word	0x0801f6d8
 8004518:	0801f6e0 	.word	0x0801f6e0

0800451c <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800452a:	4b36      	ldr	r3, [pc, #216]	; (8004604 <W25qxx_WriteSector+0xe8>)
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d802      	bhi.n	800453a <W25qxx_WriteSector+0x1e>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d102      	bne.n	8004540 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800453a:	4b32      	ldr	r3, [pc, #200]	; (8004604 <W25qxx_WriteSector+0xe8>)
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	68b9      	ldr	r1, [r7, #8]
 8004546:	4830      	ldr	r0, [pc, #192]	; (8004608 <W25qxx_WriteSector+0xec>)
 8004548:	f016 fb4c 	bl	801abe4 <iprintf>
	W25qxx_Delay(100);
 800454c:	2064      	movs	r0, #100	; 0x64
 800454e:	f010 fb66 	bl	8014c1e <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004552:	4b2c      	ldr	r3, [pc, #176]	; (8004604 <W25qxx_WriteSector+0xe8>)
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	429a      	cmp	r2, r3
 800455a:	d306      	bcc.n	800456a <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 800455c:	482b      	ldr	r0, [pc, #172]	; (800460c <W25qxx_WriteSector+0xf0>)
 800455e:	f016 fbc7 	bl	801acf0 <puts>
		W25qxx_Delay(100);
 8004562:	2064      	movs	r0, #100	; 0x64
 8004564:	f010 fb5b 	bl	8014c1e <osDelay>
#endif
		return;
 8004568:	e048      	b.n	80045fc <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	441a      	add	r2, r3
 8004570:	4b24      	ldr	r3, [pc, #144]	; (8004604 <W25qxx_WriteSector+0xe8>)
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	429a      	cmp	r2, r3
 8004576:	d905      	bls.n	8004584 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004578:	4b22      	ldr	r3, [pc, #136]	; (8004604 <W25qxx_WriteSector+0xe8>)
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	e001      	b.n	8004588 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004588:	68b8      	ldr	r0, [r7, #8]
 800458a:	f7ff fee9 	bl	8004360 <W25qxx_SectorToPage>
 800458e:	4602      	mov	r2, r0
 8004590:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <W25qxx_WriteSector+0xe8>)
 8004592:	895b      	ldrh	r3, [r3, #10]
 8004594:	4619      	mov	r1, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	fbb3 f3f1 	udiv	r3, r3, r1
 800459c:	4413      	add	r3, r2
 800459e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80045a0:	4b18      	ldr	r3, [pc, #96]	; (8004604 <W25qxx_WriteSector+0xe8>)
 80045a2:	895b      	ldrh	r3, [r3, #10]
 80045a4:	461a      	mov	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80045ac:	fb02 f201 	mul.w	r2, r2, r1
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	69f9      	ldr	r1, [r7, #28]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f7ff fee6 	bl	800438c <W25qxx_WritePage>
		StartPage++;
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	3301      	adds	r3, #1
 80045c4:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <W25qxx_WriteSector+0xe8>)
 80045c8:	895b      	ldrh	r3, [r3, #10]
 80045ca:	461a      	mov	r2, r3
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	1a9a      	subs	r2, r3, r2
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	4413      	add	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <W25qxx_WriteSector+0xe8>)
 80045d8:	895b      	ldrh	r3, [r3, #10]
 80045da:	461a      	mov	r2, r3
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	dce1      	bgt.n	80045b4 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 80045f0:	4807      	ldr	r0, [pc, #28]	; (8004610 <W25qxx_WriteSector+0xf4>)
 80045f2:	f016 fb7d 	bl	801acf0 <puts>
	W25qxx_Delay(100);
 80045f6:	2064      	movs	r0, #100	; 0x64
 80045f8:	f010 fb11 	bl	8014c1e <osDelay>
#endif
}
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20006da0 	.word	0x20006da0
 8004608:	0801f704 	.word	0x0801f704
 800460c:	0801f744 	.word	0x0801f744
 8004610:	0801f764 	.word	0x0801f764

08004614 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004622:	e002      	b.n	800462a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004624:	2001      	movs	r0, #1
 8004626:	f010 fafa 	bl	8014c1e <osDelay>
	while (w25qxx.Lock == 1)
 800462a:	4b54      	ldr	r3, [pc, #336]	; (800477c <W25qxx_ReadPage+0x168>)
 800462c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004630:	2b01      	cmp	r3, #1
 8004632:	d0f7      	beq.n	8004624 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004634:	4b51      	ldr	r3, [pc, #324]	; (800477c <W25qxx_ReadPage+0x168>)
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800463c:	4b4f      	ldr	r3, [pc, #316]	; (800477c <W25qxx_ReadPage+0x168>)
 800463e:	895b      	ldrh	r3, [r3, #10]
 8004640:	461a      	mov	r2, r3
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	4293      	cmp	r3, r2
 8004646:	d802      	bhi.n	800464e <W25qxx_ReadPage+0x3a>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d102      	bne.n	8004654 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800464e:	4b4b      	ldr	r3, [pc, #300]	; (800477c <W25qxx_ReadPage+0x168>)
 8004650:	895b      	ldrh	r3, [r3, #10]
 8004652:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	4413      	add	r3, r2
 800465a:	4a48      	ldr	r2, [pc, #288]	; (800477c <W25qxx_ReadPage+0x168>)
 800465c:	8952      	ldrh	r2, [r2, #10]
 800465e:	4293      	cmp	r3, r2
 8004660:	d905      	bls.n	800466e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004662:	4b46      	ldr	r3, [pc, #280]	; (800477c <W25qxx_ReadPage+0x168>)
 8004664:	895b      	ldrh	r3, [r3, #10]
 8004666:	461a      	mov	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	4842      	ldr	r0, [pc, #264]	; (8004780 <W25qxx_ReadPage+0x16c>)
 8004676:	f016 fab5 	bl	801abe4 <iprintf>
	W25qxx_Delay(100);
 800467a:	2064      	movs	r0, #100	; 0x64
 800467c:	f010 facf 	bl	8014c1e <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004680:	f002 fc44 	bl	8006f0c <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004686:	4b3d      	ldr	r3, [pc, #244]	; (800477c <W25qxx_ReadPage+0x168>)
 8004688:	895b      	ldrh	r3, [r3, #10]
 800468a:	461a      	mov	r2, r3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	fb03 f302 	mul.w	r3, r3, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004698:	2200      	movs	r2, #0
 800469a:	2140      	movs	r1, #64	; 0x40
 800469c:	4839      	ldr	r0, [pc, #228]	; (8004784 <W25qxx_ReadPage+0x170>)
 800469e:	f003 f9af 	bl	8007a00 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80046a2:	4b36      	ldr	r3, [pc, #216]	; (800477c <W25qxx_ReadPage+0x168>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d909      	bls.n	80046be <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 80046aa:	200c      	movs	r0, #12
 80046ac:	f7ff fb92 	bl	8003dd4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	0e1b      	lsrs	r3, r3, #24
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fb8c 	bl	8003dd4 <W25qxx_Spi>
 80046bc:	e002      	b.n	80046c4 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80046be:	200b      	movs	r0, #11
 80046c0:	f7ff fb88 	bl	8003dd4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fb82 	bl	8003dd4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fb7c 	bl	8003dd4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fb77 	bl	8003dd4 <W25qxx_Spi>
	W25qxx_Spi(0);
 80046e6:	2000      	movs	r0, #0
 80046e8:	f7ff fb74 	bl	8003dd4 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	2364      	movs	r3, #100	; 0x64
 80046f2:	68f9      	ldr	r1, [r7, #12]
 80046f4:	4824      	ldr	r0, [pc, #144]	; (8004788 <W25qxx_ReadPage+0x174>)
 80046f6:	f007 f9e0 	bl	800baba <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80046fa:	2201      	movs	r2, #1
 80046fc:	2140      	movs	r1, #64	; 0x40
 80046fe:	4821      	ldr	r0, [pc, #132]	; (8004784 <W25qxx_ReadPage+0x170>)
 8004700:	f003 f97e 	bl	8007a00 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004704:	f002 fc02 	bl	8006f0c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e018      	b.n	8004748 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	2b00      	cmp	r3, #0
 800471e:	d108      	bne.n	8004732 <W25qxx_ReadPage+0x11e>
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d905      	bls.n	8004732 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8004726:	4819      	ldr	r0, [pc, #100]	; (800478c <W25qxx_ReadPage+0x178>)
 8004728:	f016 fae2 	bl	801acf0 <puts>
			W25qxx_Delay(10);
 800472c:	200a      	movs	r0, #10
 800472e:	f010 fa76 	bl	8014c1e <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	4413      	add	r3, r2
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	4619      	mov	r1, r3
 800473c:	4814      	ldr	r0, [pc, #80]	; (8004790 <W25qxx_ReadPage+0x17c>)
 800473e:	f016 fa51 	bl	801abe4 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	3301      	adds	r3, #1
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d3e2      	bcc.n	8004716 <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8004750:	480e      	ldr	r0, [pc, #56]	; (800478c <W25qxx_ReadPage+0x178>)
 8004752:	f016 facd 	bl	801acf0 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8004756:	6939      	ldr	r1, [r7, #16]
 8004758:	480e      	ldr	r0, [pc, #56]	; (8004794 <W25qxx_ReadPage+0x180>)
 800475a:	f016 fa43 	bl	801abe4 <iprintf>
	W25qxx_Delay(100);
 800475e:	2064      	movs	r0, #100	; 0x64
 8004760:	f010 fa5d 	bl	8014c1e <osDelay>
#endif
	W25qxx_Delay(1);
 8004764:	2001      	movs	r0, #1
 8004766:	f010 fa5a 	bl	8014c1e <osDelay>
	w25qxx.Lock = 0;
 800476a:	4b04      	ldr	r3, [pc, #16]	; (800477c <W25qxx_ReadPage+0x168>)
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004772:	bf00      	nop
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20006da0 	.word	0x20006da0
 8004780:	0801f8b0 	.word	0x0801f8b0
 8004784:	40020c00 	.word	0x40020c00
 8004788:	20005fa4 	.word	0x20005fa4
 800478c:	0801f6d4 	.word	0x0801f6d4
 8004790:	0801f6d8 	.word	0x0801f6d8
 8004794:	0801f8ec 	.word	0x0801f8ec

08004798 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80047a6:	4b36      	ldr	r3, [pc, #216]	; (8004880 <W25qxx_ReadSector+0xe8>)
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d802      	bhi.n	80047b6 <W25qxx_ReadSector+0x1e>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80047b6:	4b32      	ldr	r3, [pc, #200]	; (8004880 <W25qxx_ReadSector+0xe8>)
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	4830      	ldr	r0, [pc, #192]	; (8004884 <W25qxx_ReadSector+0xec>)
 80047c4:	f016 fa0e 	bl	801abe4 <iprintf>
	W25qxx_Delay(100);
 80047c8:	2064      	movs	r0, #100	; 0x64
 80047ca:	f010 fa28 	bl	8014c1e <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80047ce:	4b2c      	ldr	r3, [pc, #176]	; (8004880 <W25qxx_ReadSector+0xe8>)
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d306      	bcc.n	80047e6 <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 80047d8:	482b      	ldr	r0, [pc, #172]	; (8004888 <W25qxx_ReadSector+0xf0>)
 80047da:	f016 fa89 	bl	801acf0 <puts>
		W25qxx_Delay(100);
 80047de:	2064      	movs	r0, #100	; 0x64
 80047e0:	f010 fa1d 	bl	8014c1e <osDelay>
#endif
		return;
 80047e4:	e048      	b.n	8004878 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	441a      	add	r2, r3
 80047ec:	4b24      	ldr	r3, [pc, #144]	; (8004880 <W25qxx_ReadSector+0xe8>)
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d905      	bls.n	8004800 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80047f4:	4b22      	ldr	r3, [pc, #136]	; (8004880 <W25qxx_ReadSector+0xe8>)
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	e001      	b.n	8004804 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004804:	68b8      	ldr	r0, [r7, #8]
 8004806:	f7ff fdab 	bl	8004360 <W25qxx_SectorToPage>
 800480a:	4602      	mov	r2, r0
 800480c:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <W25qxx_ReadSector+0xe8>)
 800480e:	895b      	ldrh	r3, [r3, #10]
 8004810:	4619      	mov	r1, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	fbb3 f3f1 	udiv	r3, r3, r1
 8004818:	4413      	add	r3, r2
 800481a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800481c:	4b18      	ldr	r3, [pc, #96]	; (8004880 <W25qxx_ReadSector+0xe8>)
 800481e:	895b      	ldrh	r3, [r3, #10]
 8004820:	461a      	mov	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	fbb3 f1f2 	udiv	r1, r3, r2
 8004828:	fb02 f201 	mul.w	r2, r2, r1
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	69f9      	ldr	r1, [r7, #28]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f7ff feec 	bl	8004614 <W25qxx_ReadPage>
		StartPage++;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	3301      	adds	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004842:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <W25qxx_ReadSector+0xe8>)
 8004844:	895b      	ldrh	r3, [r3, #10]
 8004846:	461a      	mov	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	1a9a      	subs	r2, r3, r2
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	4413      	add	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <W25qxx_ReadSector+0xe8>)
 8004854:	895b      	ldrh	r3, [r3, #10]
 8004856:	461a      	mov	r2, r3
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b00      	cmp	r3, #0
 800486a:	dce1      	bgt.n	8004830 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 800486c:	4807      	ldr	r0, [pc, #28]	; (800488c <W25qxx_ReadSector+0xf4>)
 800486e:	f016 fa3f 	bl	801acf0 <puts>
	W25qxx_Delay(100);
 8004872:	2064      	movs	r0, #100	; 0x64
 8004874:	f010 f9d3 	bl	8014c1e <osDelay>
#endif
}
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20006da0 	.word	0x20006da0
 8004884:	0801f910 	.word	0x0801f910
 8004888:	0801f950 	.word	0x0801f950
 800488c:	0801f970 	.word	0x0801f970

08004890 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	4611      	mov	r1, r2
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4798      	blx	r3
 80048aa:	4603      	mov	r3, r0
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 80048de:	2309      	movs	r3, #9
 80048e0:	e028      	b.n	8004934 <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <_ZN10IridiumSBD5sleepEv+0x30>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	d101      	bne.n	80048fc <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 80048f8:	230b      	movs	r3, #11
 80048fa:	e01b      	b.n	8004934 <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f8d3 	bl	8004ab0 <_ZN10IridiumSBD13internalSleepEv>
 800490a:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f979 	bl	8004c1c <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 800492a:	2100      	movs	r1, #0
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f8d1 	bl	8004ad4 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004932:	68fb      	ldr	r3, [r7, #12]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <_ZN10IridiumSBD21enableSuperCapChargerEb>:

   return ISBD_SUCCESS;
}

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800494e:	2b00      	cmp	r3, #0
 8004950:	d004      	beq.n	800495c <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004952:	4918      	ldr	r1, [pc, #96]	; (80049b4 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f96f 	bl	8004c38 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 800495a:	e028      	b.n	80049ae <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f991 	bl	8004c84 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00b      	beq.n	8004980 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004974:	4313      	orrs	r3, r2
 8004976:	b2da      	uxtb	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800497e:	e00f      	b.n	80049a0 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004986:	b25a      	sxtb	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800498e:	b25b      	sxtb	r3, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	b25b      	sxtb	r3, r3
 8004994:	4013      	ands	r3, r2
 8004996:	b25b      	sxtb	r3, r3
 8004998:	b2da      	uxtb	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f9a6 	bl	8004cfa <_ZN10IridiumSBD11set9603pinsEh>
}
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	0801fa74 	.word	0x0801fa74

080049b8 <_ZN10IridiumSBD16enable9603NpowerEb>:
    return(false);
  }
}

void IridiumSBD::enable9603Npower(bool enable)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d004      	beq.n	80049d8 <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 80049ce:	4918      	ldr	r1, [pc, #96]	; (8004a30 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f931 	bl	8004c38 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 80049d6:	e028      	b.n	8004a2a <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f953 	bl	8004c84 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00b      	beq.n	80049fc <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 80049f0:	4313      	orrs	r3, r2
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80049fa:	e00f      	b.n	8004a1c <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004a02:	b25a      	sxtb	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004a0a:	b25b      	sxtb	r3, r3
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	b25b      	sxtb	r3, r3
 8004a10:	4013      	ands	r3, r2
 8004a12:	b25b      	sxtb	r3, r3
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f968 	bl	8004cfa <_ZN10IridiumSBD11set9603pinsEh>
}
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	0801fb0c 	.word	0x0801fb0c

08004a34 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d004      	beq.n	8004a54 <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004a4a:	4918      	ldr	r1, [pc, #96]	; (8004aac <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f8f3 	bl	8004c38 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004a52:	e028      	b.n	8004aa6 <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f915 	bl	8004c84 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004a76:	e00f      	b.n	8004a98 <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004a7e:	b25a      	sxtb	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004a86:	b25b      	sxtb	r3, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	b25b      	sxtb	r3, r3
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	b25b      	sxtb	r3, r3
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f92a 	bl	8004cfa <_ZN10IridiumSBD11set9603pinsEh>
}
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	0801fb54 	.word	0x0801fb54

08004ab0 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8004ac2:	230a      	movs	r3, #10
 8004ac4:	e000      	b.n	8004ac8 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	f083 0301 	eor.w	r3, r3, #1
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d011      	beq.n	8004b1c <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b02:	d04c      	beq.n	8004b9e <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f84e 	bl	8004bb0 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d018      	beq.n	8004b54 <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 8004b22:	4921      	ldr	r1, [pc, #132]	; (8004ba8 <_ZN10IridiumSBD5powerEb+0xd4>)
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f887 	bl	8004c38 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d004      	beq.n	8004b3e <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 8004b34:	2101      	movs	r1, #1
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f848 	bl	8004bcc <_ZN10IridiumSBD11setSleepPinEh>
 8004b3c:	e003      	b.n	8004b46 <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 8004b3e:	2101      	movs	r1, #1
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ff77 	bl	8004a34 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8004b46:	f002 f9e1 	bl	8006f0c <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8004b52:	e025      	b.n	8004ba0 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8004b54:	f002 f9da 	bl	8006f0c <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b6a:	d205      	bcs.n	8004b78 <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f002 f9d6 	bl	8006f24 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8004b78:	490c      	ldr	r1, [pc, #48]	; (8004bac <_ZN10IridiumSBD5powerEb+0xd8>)
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f85c 	bl	8004c38 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d004      	beq.n	8004b94 <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f81d 	bl	8004bcc <_ZN10IridiumSBD11setSleepPinEh>
 8004b92:	e005      	b.n	8004ba0 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 8004b94:	2100      	movs	r1, #0
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff ff4c 	bl	8004a34 <_ZN10IridiumSBD10enable9603Eb>
 8004b9c:	e000      	b.n	8004ba0 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 8004b9e:	bf00      	nop
      }
   }
}
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	0801ffe4 	.word	0x0801ffe4
 8004bac:	0801fffc 	.word	0x0801fffc

08004bb0 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8004bb8:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f83c 	bl	8004c38 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004bc0:	bf00      	nop
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	08020014 	.word	0x08020014

08004bcc <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8004bd8:	2201      	movs	r2, #1
 8004bda:	2108      	movs	r1, #8
 8004bdc:	480b      	ldr	r0, [pc, #44]	; (8004c0c <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8004bde:	f002 ff0f 	bl	8007a00 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8004be2:	490b      	ldr	r1, [pc, #44]	; (8004c10 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f827 	bl	8004c38 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d104      	bne.n	8004bfa <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8004bf0:	4908      	ldr	r1, [pc, #32]	; (8004c14 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f820 	bl	8004c38 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8004bf8:	e003      	b.n	8004c02 <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8004bfa:	4907      	ldr	r1, [pc, #28]	; (8004c18 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f81b 	bl	8004c38 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40020800 	.word	0x40020800
 8004c10:	08020040 	.word	0x08020040
 8004c14:	0802005c 	.word	0x0802005c
 8004c18:	08020064 	.word	0x08020064

08004c1c <_ZN10IridiumSBD13endSerialPortEv>:
{
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
}

void IridiumSBD::endSerialPort()
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8004c24:	4903      	ldr	r1, [pc, #12]	; (8004c34 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f806 	bl	8004c38 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	0802008c 	.word	0x0802008c

08004c38 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	60fa      	str	r2, [r7, #12]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8004c50:	7afb      	ldrb	r3, [r7, #11]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 8004c56:	7afb      	ldrb	r3, [r7, #11]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff fe2a 	bl	80048b4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8004c60:	e7f1      	b.n	8004c46 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8004c62:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 8004c64:	687c      	ldr	r4, [r7, #4]
 8004c66:	6838      	ldr	r0, [r7, #0]
 8004c68:	f7fb fac2 	bl	80001f0 <strlen>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	f04f 33ff 	mov.w	r3, #4294967295
 8004c74:	6839      	ldr	r1, [r7, #0]
 8004c76:	4620      	mov	r0, r4
 8004c78:	f008 f93b 	bl	800cef2 <HAL_UART_Transmit>
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd90      	pop	{r4, r7, pc}

08004c84 <_ZN10IridiumSBD13check9603pinsEv>:
  }
}

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f000 f9c9 	bl	8005030 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca2:	2110      	movs	r1, #16
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff fdf3 	bl	8004890 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fa08 	bl	80050c4 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	f000 f9a2 	bl	800500a <_ZN7TwoWire11requestFromEhh>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	bf0c      	ite	eq
 8004ccc:	2301      	moveq	r3, #1
 8004cce:	2300      	movne	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00d      	beq.n	8004cf2 <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4798      	blx	r3
 8004ce8:	4603      	mov	r3, r0
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	460b      	mov	r3, r1
 8004d04:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d10:	4619      	mov	r1, r3
 8004d12:	4610      	mov	r0, r2
 8004d14:	f000 f98c 	bl	8005030 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1c:	2110      	movs	r1, #16
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff fdb6 	bl	8004890 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	78f9      	ldrb	r1, [r7, #3]
 8004d32:	4610      	mov	r0, r2
 8004d34:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f9c2 	bl	80050c4 <_ZN7TwoWire15endTransmissionEv>
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:

	return HAL_OK;
}


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b08b      	sub	sp, #44	; 0x2c
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f04f 33ff 	mov.w	r3, #4294967295
 8004d56:	221d      	movs	r2, #29
 8004d58:	492f      	ldr	r1, [pc, #188]	; (8004e18 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 8004d5a:	f008 f8ca 	bl	800cef2 <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f04f 33ff 	mov.w	r3, #4294967295
 8004d64:	221d      	movs	r2, #29
 8004d66:	492d      	ldr	r1, [pc, #180]	; (8004e1c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8004d68:	f008 f8c3 	bl	800cef2 <HAL_UART_Transmit>
	int err = this->sleep();
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff fdad 	bl	80048cc <_ZN10IridiumSBD5sleepEv>
 8004d72:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d017      	beq.n	8004daa <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8004d7a:	f107 0308 	add.w	r3, r7, #8
 8004d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d80:	4927      	ldr	r1, [pc, #156]	; (8004e20 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 8004d82:	4618      	mov	r0, r3
 8004d84:	f016 f880 	bl	801ae88 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8004d88:	687c      	ldr	r4, [r7, #4]
 8004d8a:	f107 0308 	add.w	r3, r7, #8
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fb fa2e 	bl	80001f0 <strlen>
 8004d94:	4603      	mov	r3, r0
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	f107 0108 	add.w	r1, r7, #8
 8004d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004da0:	4620      	mov	r0, r4
 8004da2:	f008 f8a6 	bl	800cef2 <HAL_UART_Transmit>
		return false;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e032      	b.n	8004e10 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f04f 33ff 	mov.w	r3, #4294967295
 8004db0:	2204      	movs	r2, #4
 8004db2:	491c      	ldr	r1, [pc, #112]	; (8004e24 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8004db4:	f008 f89d 	bl	800cef2 <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f04f 33ff 	mov.w	r3, #4294967295
 8004dbe:	2218      	movs	r2, #24
 8004dc0:	4919      	ldr	r1, [pc, #100]	; (8004e28 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 8004dc2:	f008 f896 	bl	800cef2 <HAL_UART_Transmit>
	this->enable9603Npower(false);
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff fdf5 	bl	80049b8 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	4913      	ldr	r1, [pc, #76]	; (8004e24 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8004dd8:	f008 f88b 	bl	800cef2 <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f04f 33ff 	mov.w	r3, #4294967295
 8004de2:	2227      	movs	r2, #39	; 0x27
 8004de4:	4911      	ldr	r1, [pc, #68]	; (8004e2c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 8004de6:	f008 f884 	bl	800cef2 <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 8004dea:	2100      	movs	r1, #0
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff fda5 	bl	800493c <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f04f 33ff 	mov.w	r3, #4294967295
 8004df8:	2204      	movs	r2, #4
 8004dfa:	490a      	ldr	r1, [pc, #40]	; (8004e24 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8004dfc:	f008 f879 	bl	800cef2 <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f04f 33ff 	mov.w	r3, #4294967295
 8004e06:	2220      	movs	r2, #32
 8004e08:	4909      	ldr	r1, [pc, #36]	; (8004e30 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 8004e0a:	f008 f872 	bl	800cef2 <HAL_UART_Transmit>
	return true;
 8004e0e:	2301      	movs	r3, #1
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	372c      	adds	r7, #44	; 0x2c
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd90      	pop	{r4, r7, pc}
 8004e18:	08020268 	.word	0x08020268
 8004e1c:	08020288 	.word	0x08020288
 8004e20:	080202a8 	.word	0x080202a8
 8004e24:	0801fa44 	.word	0x0801fa44
 8004e28:	080202c4 	.word	0x080202c4
 8004e2c:	080202e0 	.word	0x080202e0
 8004e30:	08020308 	.word	0x08020308

08004e34 <MRT_Static_Iridium_Destructor>:
	if (E_T==NULL){
		E_T = new IridiumSBD();
	}
}

void MRT_Static_Iridium_Destructor(){
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <MRT_Static_Iridium_Destructor+0x1c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <MRT_Static_Iridium_Destructor+0x12>
		E_T = NULL;
 8004e40:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <MRT_Static_Iridium_Destructor+0x1c>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
	}
}
 8004e46:	bf00      	nop
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	2000041c 	.word	0x2000041c

08004e54 <MRT_Static_Iridium_Shutdown>:
uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart){
	MRT_Static_Iridium_Constructor();
	return E_T->MRT_Iridium_setup(huart);
}

bool MRT_Static_Iridium_Shutdown(void){
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 8004e5a:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <MRT_Static_Iridium_Shutdown+0x2c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff ff72 	bl	8004d48 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bf14      	ite	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	2300      	moveq	r3, #0
 8004e6e:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 8004e70:	f7ff ffe0 	bl	8004e34 <MRT_Static_Iridium_Destructor>
	return b;
 8004e74:	79fb      	ldrb	r3, [r7, #7]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	2000041c 	.word	0x2000041c

08004e84 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
  while (size--) {
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	1e5a      	subs	r2, r3, #1
 8004e98:	607a      	str	r2, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bf14      	ite	ne
 8004e9e:	2301      	movne	r3, #1
 8004ea0:	2300      	moveq	r3, #0
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00e      	beq.n	8004ec6 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	1c59      	adds	r1, r3, #1
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	4790      	blx	r2
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
  while (size--) {
 8004ec4:	e7e6      	b.n	8004e94 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8004ec6:	697b      	ldr	r3, [r7, #20]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	4a06      	ldr	r2, [pc, #24]	; (8004ef4 <_ZN5PrintC1Ev+0x24>)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	605a      	str	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	08020c28 	.word	0x08020c28

08004ef8 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff ffe4 	bl	8004ed0 <_ZN5PrintC1Ev>
 8004f08:	4a05      	ldr	r2, [pc, #20]	; (8004f20 <_ZN6StreamC1Ev+0x28>)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f14:	609a      	str	r2, [r3, #8]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	08020c58 	.word	0x08020c58

08004f24 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff ffe1 	bl	8004ef8 <_ZN6StreamC1Ev>
 8004f36:	4a16      	ldr	r2, [pc, #88]	; (8004f90 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3390      	adds	r3, #144	; 0x90
 8004f46:	2220      	movs	r2, #32
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f014 ff1e 	bl	8019d8c <memset>
  rxBufferIndex = 0;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	08020c38 	.word	0x08020c38

08004f94 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	4608      	mov	r0, r1
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	70fb      	strb	r3, [r7, #3]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	70bb      	strb	r3, [r7, #2]
 8004faa:	4613      	mov	r3, r2
 8004fac:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fc24 	bl	80057fc <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 8004fb4:	78bb      	ldrb	r3, [r7, #2]
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d901      	bls.n	8004fbe <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 8004fba:	2320      	movs	r3, #32
 8004fbc:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 8004fbe:	78fb      	ldrb	r3, [r7, #3]
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	b2d9      	uxtb	r1, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8004fca:	78b8      	ldrb	r0, [r7, #2]
 8004fcc:	787b      	ldrb	r3, [r7, #1]
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f9cf 	bl	8005376 <_ZN7TwoWire15i2c_master_readEhPchh>
 8004fd8:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	da02      	bge.n	8004fe6 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	73fb      	strb	r3, [r7, #15]
 8004fe4:	e001      	b.n	8004fea <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	7bfa      	ldrb	r2, [r7, #15]
 8004ff6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fbcc 	bl	8005798 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	460b      	mov	r3, r1
 8005014:	70fb      	strb	r3, [r7, #3]
 8005016:	4613      	mov	r3, r2
 8005018:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 800501a:	78ba      	ldrb	r2, [r7, #2]
 800501c:	78f9      	ldrb	r1, [r7, #3]
 800501e:	2301      	movs	r3, #1
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ffb7 	bl	8004f94 <_ZN7TwoWire11requestFromEhhh>
 8005026:	4603      	mov	r3, r0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	78fa      	ldrb	r2, [r7, #3]
 8005048:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b086      	sub	sp, #24
 800506a:	af02      	add	r7, sp, #8
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	460b      	mov	r3, r1
 8005070:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fbc2 	bl	80057fc <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	7c1b      	ldrb	r3, [r3, #16]
 800507c:	0059      	lsls	r1, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f103 0211 	add.w	r2, r3, #17
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800508a:	4618      	mov	r0, r3
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	4603      	mov	r3, r0
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fa00 	bl	8005498 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 8005098:	4603      	mov	r3, r0
 800509a:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fb6f 	bl	8005798 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 80050cc:	2101      	movs	r1, #1
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7ff ffc9 	bl	8005066 <_ZN7TwoWire15endTransmissionEh>
 80050d4:	4603      	mov	r3, r0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	460b      	mov	r3, r1
 80050e8:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01d      	beq.n	8005130 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80050fa:	2b1f      	cmp	r3, #31
 80050fc:	d901      	bls.n	8005102 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 80050fe:	2300      	movs	r3, #0
 8005100:	e028      	b.n	8005154 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005108:	4619      	mov	r1, r3
 800510a:	78fa      	ldrb	r2, [r7, #3]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	440b      	add	r3, r1
 8005110:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005118:	3301      	adds	r3, #1
 800511a:	b2da      	uxtb	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800512e:	e010      	b.n	8005152 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fb63 	bl	80057fc <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8005136:	1cfb      	adds	r3, r7, #3
 8005138:	2201      	movs	r2, #1
 800513a:	4619      	mov	r1, r3
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fa95 	bl	800566c <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fb28 	bl	8005798 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	333c      	adds	r3, #60	; 0x3c
 800514c:	4618      	mov	r0, r3
 800514e:	f003 f8ed 	bl	800832c <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8005152:	2301      	movs	r3, #1
}
 8005154:	4618      	mov	r0, r3
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800516e:	2b00      	cmp	r3, #0
 8005170:	d013      	beq.n	800519a <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	429a      	cmp	r2, r3
 800517c:	d21e      	bcs.n	80051bc <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	440a      	add	r2, r1
 800518a:	7812      	ldrb	r2, [r2, #0]
 800518c:	4611      	mov	r1, r2
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	3301      	adds	r3, #1
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	e7ed      	b.n	8005176 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 fb2e 	bl	80057fc <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	461a      	mov	r2, r3
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 fa60 	bl	800566c <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 faf3 	bl	8005798 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	333c      	adds	r3, #60	; 0x3c
 80051b6:	4618      	mov	r0, r3
 80051b8:	f003 f8b8 	bl	800832c <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 80051bc:	687b      	ldr	r3, [r7, #4]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	1ad3      	subs	r3, r2, r3
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b085      	sub	sp, #20
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  int value = -1;
 80051f6:	f04f 33ff 	mov.w	r3, #4294967295
 80051fa:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005202:	b2da      	uxtb	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	429a      	cmp	r2, r3
 800520e:	bf34      	ite	cc
 8005210:	2301      	movcc	r3, #1
 8005212:	2300      	movcs	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d012      	beq.n	8005240 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4413      	add	r3, r2
 8005228:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800522c:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	3301      	adds	r3, #1
 8005238:	b2da      	uxtb	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8005240:	68fb      	ldr	r3, [r7, #12]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  int value = -1;
 8005256:	f04f 33ff 	mov.w	r3, #4294967295
 800525a:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005262:	b2da      	uxtb	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800526a:	b2db      	uxtb	r3, r3
 800526c:	429a      	cmp	r2, r3
 800526e:	bf34      	ite	cc
 8005270:	2301      	movcc	r3, #1
 8005272:	2300      	movcs	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d009      	beq.n	800528e <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4413      	add	r3, r2
 8005288:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800528c:	60fb      	str	r3, [r7, #12]
  }

  return value;
 800528e:	68fb      	ldr	r3, [r7, #12]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052bc:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052c6:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 80052c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052cc:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052da:	bf0c      	ite	eq
 80052dc:	2301      	moveq	r3, #1
 80052de:	2300      	movne	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1e5a      	subs	r2, r3, #1
 80052ea:	60fa      	str	r2, [r7, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	bf0c      	ite	eq
 80052f0:	2301      	moveq	r3, #1
 80052f2:	2300      	movne	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0e9      	beq.n	80052ce <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e021      	b.n	8005342 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 800530a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800530e:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b01      	cmp	r3, #1
 800531c:	bf14      	ite	ne
 800531e:	2301      	movne	r3, #1
 8005320:	2300      	moveq	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00b      	beq.n	8005340 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	1e5a      	subs	r2, r3, #1
 800532c:	60fa      	str	r2, [r7, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	bf0c      	ite	eq
 8005332:	2301      	moveq	r3, #1
 8005334:	2300      	movne	r3, #0
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0e9      	beq.n	8005310 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535a:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	601a      	str	r2, [r3, #0]

    return 0;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b08a      	sub	sp, #40	; 0x28
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	461a      	mov	r2, r3
 8005382:	460b      	mov	r3, r1
 8005384:	72fb      	strb	r3, [r7, #11]
 8005386:	4613      	mov	r3, r2
 8005388:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538e:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f7ff ff8d 	bl	80052b0 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8005396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	bf14      	ite	ne
 80053aa:	2301      	movne	r3, #1
 80053ac:	2300      	moveq	r3, #0
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d008      	beq.n	80053c6 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	3b01      	subs	r3, #1
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1ed      	bne.n	800539c <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 80053c0:	f04f 33ff 	mov.w	r3, #4294967295
 80053c4:	e064      	b.n	8005490 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 80053c6:	7afb      	ldrb	r3, [r7, #11]
 80053c8:	f043 0301 	orr.w	r3, r3, #1
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80053d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	bf14      	ite	ne
 80053e8:	2301      	movne	r3, #1
 80053ea:	2300      	moveq	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d008      	beq.n	8005404 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	3b01      	subs	r3, #1
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1ed      	bne.n	80053da <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 80053fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005402:	e045      	b.n	8005490 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8005404:	2300      	movs	r3, #0
 8005406:	613b      	str	r3, [r7, #16]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 800541a:	2300      	movs	r3, #0
 800541c:	623b      	str	r3, [r7, #32]
 800541e:	7abb      	ldrb	r3, [r7, #10]
 8005420:	3b01      	subs	r3, #1
 8005422:	6a3a      	ldr	r2, [r7, #32]
 8005424:	429a      	cmp	r2, r3
 8005426:	da17      	bge.n	8005458 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8005428:	f107 0314 	add.w	r3, r7, #20
 800542c:	2200      	movs	r2, #0
 800542e:	4619      	mov	r1, r3
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 f8a4 	bl	800557e <_ZN7TwoWire20i2c_master_byte_readEPii>
 8005436:	61b8      	str	r0, [r7, #24]
        if(ret)
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 800543e:	f04f 33ff 	mov.w	r3, #4294967295
 8005442:	e025      	b.n	8005490 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8005444:	6979      	ldr	r1, [r7, #20]
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	4413      	add	r3, r2
 800544c:	b2ca      	uxtb	r2, r1
 800544e:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	3301      	adds	r3, #1
 8005454:	623b      	str	r3, [r7, #32]
 8005456:	e7e2      	b.n	800541e <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8005458:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f7ff ff74 	bl	800534e <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 8005466:	f107 0314 	add.w	r3, r7, #20
 800546a:	2201      	movs	r2, #1
 800546c:	4619      	mov	r1, r3
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 f885 	bl	800557e <_ZN7TwoWire20i2c_master_byte_readEPii>
 8005474:	61b8      	str	r0, [r7, #24]
    if(ret)
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 800547c:	f04f 33ff 	mov.w	r3, #4294967295
 8005480:	e006      	b.n	8005490 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 8005482:	6979      	ldr	r1, [r7, #20]
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	b2ca      	uxtb	r2, r1
 800548c:	701a      	strb	r2, [r3, #0]

    return length;
 800548e:	7abb      	ldrb	r3, [r7, #10]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3728      	adds	r7, #40	; 0x28
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f7ff feff 	bl	80052b0 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80054b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054b6:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	bf14      	ite	ne
 80054c6:	2301      	movne	r3, #1
 80054c8:	2300      	moveq	r3, #0
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1ed      	bne.n	80054b8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 80054dc:	2304      	movs	r3, #4
 80054de:	e04a      	b.n	8005576 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80054ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054f0:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d007      	beq.n	800551a <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3b01      	subs	r3, #1
 800550e:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1ed      	bne.n	80054f2 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8005516:	2302      	movs	r3, #2
 8005518:	e02d      	b.n	8005576 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800551a:	2300      	movs	r3, #0
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8005530:	2300      	movs	r3, #0
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	da15      	bge.n	8005568 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	4413      	add	r3, r2
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	4619      	mov	r1, r3
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f85a 	bl	8005600 <_ZN7TwoWire21i2c_master_byte_writeEi>
 800554c:	4603      	mov	r3, r0
 800554e:	2b01      	cmp	r3, #1
 8005550:	bf14      	ite	ne
 8005552:	2301      	movne	r3, #1
 8005554:	2300      	moveq	r3, #0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 800555c:	2303      	movs	r3, #3
 800555e:	e00a      	b.n	8005576 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	3301      	adds	r3, #1
 8005564:	61bb      	str	r3, [r7, #24]
 8005566:	e7e5      	b.n	8005534 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f7ff feed 	bl	800534e <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3720      	adds	r7, #32
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 800557e:	b480      	push	{r7}
 8005580:	b087      	sub	sp, #28
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558e:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d006      	beq.n	80055a4 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	e005      	b.n	80055b0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 80055b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055b4:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	bf14      	ite	ne
 80055c4:	2301      	movne	r3, #1
 80055c6:	2300      	moveq	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00c      	beq.n	80055e8 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	1e5a      	subs	r2, r3, #1
 80055d2:	617a      	str	r2, [r7, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	bf0c      	ite	eq
 80055d8:	2301      	moveq	r3, #1
 80055da:	2300      	movne	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0e9      	beq.n	80055b6 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 80055e2:	f04f 33ff 	mov.w	r3, #4294967295
 80055e6:	e005      	b.n	80055f4 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	461a      	mov	r2, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	601a      	str	r2, [r3, #0]

    return 0;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560e:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	b2db      	uxtb	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 800561a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800561e:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562a:	2b80      	cmp	r3, #128	; 0x80
 800562c:	d008      	beq.n	8005640 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8005638:	2b04      	cmp	r3, #4
 800563a:	d001      	beq.n	8005640 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8005640:	2300      	movs	r3, #0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00b      	beq.n	800565e <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	1e5a      	subs	r2, r3, #1
 800564a:	60fa      	str	r2, [r7, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	bf0c      	ite	eq
 8005650:	2301      	moveq	r3, #1
 8005652:	2300      	movne	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0e2      	beq.n	8005620 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 800565a:	2300      	movs	r3, #0
 800565c:	e000      	b.n	8005660 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 800565e:	2301      	movs	r3, #1
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 800566c:	b480      	push	{r7}
 800566e:	b089      	sub	sp, #36	; 0x24
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005680:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	dd41      	ble.n	800570c <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8005688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800568c:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005698:	2b80      	cmp	r3, #128	; 0x80
 800569a:	bf14      	ite	ne
 800569c:	2301      	movne	r3, #1
 800569e:	2300      	moveq	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d008      	beq.n	80056b8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1ed      	bne.n	800568e <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 80056b2:	f04f 33ff 	mov.w	r3, #4294967295
 80056b6:	e068      	b.n	800578a <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	60ba      	str	r2, [r7, #8]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	611a      	str	r2, [r3, #16]
        length--;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	607b      	str	r3, [r7, #4]
        size++;
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	3301      	adds	r3, #1
 80056d0:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d104      	bne.n	80056ea <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 80056ea:	2300      	movs	r3, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0c8      	beq.n	8005682 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	60ba      	str	r2, [r7, #8]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	611a      	str	r2, [r3, #16]
            length--;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3b01      	subs	r3, #1
 8005702:	607b      	str	r3, [r7, #4]
            size++;
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	3301      	adds	r3, #1
 8005708:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 800570a:	e7ba      	b.n	8005682 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 800570c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005710:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800571c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005720:	bf14      	ite	ne
 8005722:	2301      	movne	r3, #1
 8005724:	2300      	moveq	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	3b01      	subs	r3, #1
 8005730:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1ec      	bne.n	8005712 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8005738:	f04f 33ff 	mov.w	r3, #4294967295
 800573c:	e025      	b.n	800578a <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005742:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005746:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8005748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800574c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b02      	cmp	r3, #2
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d008      	beq.n	8005778 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	3b01      	subs	r3, #1
 800576a:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1ed      	bne.n	800574e <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8005772:	f04f 33ff 	mov.w	r3, #4294967295
 8005776:	e008      	b.n	800578a <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8005788:	69bb      	ldr	r3, [r7, #24]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3724      	adds	r7, #36	; 0x24
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a4:	4a12      	ldr	r2, [pc, #72]	; (80057f0 <_ZN7TwoWire15enableInterruptEv+0x58>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d106      	bne.n	80057b8 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80057aa:	2049      	movs	r0, #73	; 0x49
 80057ac:	f001 ff48 	bl	8007640 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80057b0:	2048      	movs	r0, #72	; 0x48
 80057b2:	f001 ff45 	bl	8007640 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 80057b6:	e016      	b.n	80057e6 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057bc:	4a0d      	ldr	r2, [pc, #52]	; (80057f4 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d106      	bne.n	80057d0 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80057c2:	2022      	movs	r0, #34	; 0x22
 80057c4:	f001 ff3c 	bl	8007640 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80057c8:	2021      	movs	r0, #33	; 0x21
 80057ca:	f001 ff39 	bl	8007640 <HAL_NVIC_EnableIRQ>
}
 80057ce:	e00a      	b.n	80057e6 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d4:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <_ZN7TwoWire15enableInterruptEv+0x60>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d105      	bne.n	80057e6 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80057da:	2020      	movs	r0, #32
 80057dc:	f001 ff30 	bl	8007640 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80057e0:	201f      	movs	r0, #31
 80057e2:	f001 ff2d 	bl	8007640 <HAL_NVIC_EnableIRQ>
}
 80057e6:	bf00      	nop
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40005c00 	.word	0x40005c00
 80057f4:	40005800 	.word	0x40005800
 80057f8:	40005400 	.word	0x40005400

080057fc <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005808:	4a12      	ldr	r2, [pc, #72]	; (8005854 <_ZN7TwoWire16disableInterruptEv+0x58>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d106      	bne.n	800581c <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800580e:	2049      	movs	r0, #73	; 0x49
 8005810:	f001 ff24 	bl	800765c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8005814:	2048      	movs	r0, #72	; 0x48
 8005816:	f001 ff21 	bl	800765c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800581a:	e016      	b.n	800584a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005820:	4a0d      	ldr	r2, [pc, #52]	; (8005858 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d106      	bne.n	8005834 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8005826:	2022      	movs	r0, #34	; 0x22
 8005828:	f001 ff18 	bl	800765c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800582c:	2021      	movs	r0, #33	; 0x21
 800582e:	f001 ff15 	bl	800765c <HAL_NVIC_DisableIRQ>
}
 8005832:	e00a      	b.n	800584a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005838:	4a08      	ldr	r2, [pc, #32]	; (800585c <_ZN7TwoWire16disableInterruptEv+0x60>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d105      	bne.n	800584a <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800583e:	2020      	movs	r0, #32
 8005840:	f001 ff0c 	bl	800765c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8005844:	201f      	movs	r0, #31
 8005846:	f001 ff09 	bl	800765c <HAL_NVIC_DisableIRQ>
}
 800584a:	bf00      	nop
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40005c00 	.word	0x40005c00
 8005858:	40005800 	.word	0x40005800
 800585c:	40005400 	.word	0x40005400

08005860 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d110      	bne.n	8005892 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005876:	4293      	cmp	r3, r2
 8005878:	d10b      	bne.n	8005892 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 800587a:	4908      	ldr	r1, [pc, #32]	; (800589c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800587c:	4808      	ldr	r0, [pc, #32]	; (80058a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800587e:	f7ff fb51 	bl	8004f24 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8005882:	4908      	ldr	r1, [pc, #32]	; (80058a4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005884:	4808      	ldr	r0, [pc, #32]	; (80058a8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005886:	f7ff fb4d 	bl	8004f24 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 800588a:	4908      	ldr	r1, [pc, #32]	; (80058ac <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800588c:	4808      	ldr	r0, [pc, #32]	; (80058b0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800588e:	f7ff fb49 	bl	8004f24 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40005400 	.word	0x40005400
 80058a0:	20000420 	.word	0x20000420
 80058a4:	40005800 	.word	0x40005800
 80058a8:	200004d8 	.word	0x200004d8
 80058ac:	40005c00 	.word	0x40005c00
 80058b0:	20000590 	.word	0x20000590

080058b4 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058bc:	2001      	movs	r0, #1
 80058be:	f7ff ffcf 	bl	8005860 <_Z41__static_initialization_and_destruction_0ii>
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80058c4:	b590      	push	{r4, r7, lr}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	607a      	str	r2, [r7, #4]
 80058ce:	461a      	mov	r2, r3
 80058d0:	460b      	mov	r3, r1
 80058d2:	72fb      	strb	r3, [r7, #11]
 80058d4:	4613      	mov	r3, r2
 80058d6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	685c      	ldr	r4, [r3, #4]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6898      	ldr	r0, [r3, #8]
 80058e0:	893b      	ldrh	r3, [r7, #8]
 80058e2:	7af9      	ldrb	r1, [r7, #11]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	47a0      	blx	r4
 80058e8:	6178      	str	r0, [r7, #20]

  return ret;
 80058ea:	697b      	ldr	r3, [r7, #20]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd90      	pop	{r4, r7, pc}

080058f4 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80058f4:	b590      	push	{r4, r7, lr}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	607a      	str	r2, [r7, #4]
 80058fe:	461a      	mov	r2, r3
 8005900:	460b      	mov	r3, r1
 8005902:	72fb      	strb	r3, [r7, #11]
 8005904:	4613      	mov	r3, r2
 8005906:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681c      	ldr	r4, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6898      	ldr	r0, [r3, #8]
 8005910:	893b      	ldrh	r3, [r7, #8]
 8005912:	7af9      	ldrb	r1, [r7, #11]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	47a0      	blx	r4
 8005918:	6178      	str	r0, [r7, #20]

  return ret;
 800591a:	697b      	ldr	r3, [r7, #20]
}
 800591c:	4618      	mov	r0, r3
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	bd90      	pop	{r4, r7, pc}

08005924 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005936:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005950 <lps22hh_from_lsb_to_hpa+0x2c>
 800593a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800593e:	eef0 7a66 	vmov.f32	s15, s13
}
 8005942:	eeb0 0a67 	vmov.f32	s0, s15
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	49800000 	.word	0x49800000

08005954 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	4603      	mov	r3, r0
 800595c:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 800595e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800596a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005984 <lps22hh_from_lsb_to_celsius+0x30>
 800596e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005972:	eef0 7a66 	vmov.f32	s15, s13
}
 8005976:	eeb0 0a67 	vmov.f32	s0, s15
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	42c80000 	.word	0x42c80000

08005988 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005994:	f107 0208 	add.w	r2, r7, #8
 8005998:	2301      	movs	r3, #1
 800599a:	2110      	movs	r1, #16
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff ff91 	bl	80058c4 <lps22hh_read_reg>
 80059a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10f      	bne.n	80059ca <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	7a3b      	ldrb	r3, [r7, #8]
 80059b4:	f362 0341 	bfi	r3, r2, #1, #1
 80059b8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80059ba:	f107 0208 	add.w	r2, r7, #8
 80059be:	2301      	movs	r3, #1
 80059c0:	2110      	movs	r1, #16
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff ff96 	bl	80058f4 <lps22hh_write_reg>
 80059c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059ca:	68fb      	ldr	r3, [r7, #12]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80059e0:	f107 0210 	add.w	r2, r7, #16
 80059e4:	2301      	movs	r3, #1
 80059e6:	2110      	movs	r1, #16
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff ff6b 	bl	80058c4 <lps22hh_read_reg>
 80059ee:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d107      	bne.n	8005a06 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80059f6:	f107 020c 	add.w	r2, r7, #12
 80059fa:	2301      	movs	r3, #1
 80059fc:	2111      	movs	r1, #17
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff ff60 	bl	80058c4 <lps22hh_read_reg>
 8005a04:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10f      	bne.n	8005a2c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	7c3b      	ldrb	r3, [r7, #16]
 8005a16:	f362 1306 	bfi	r3, r2, #4, #3
 8005a1a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005a1c:	f107 0210 	add.w	r2, r7, #16
 8005a20:	2301      	movs	r3, #1
 8005a22:	2110      	movs	r1, #16
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff ff65 	bl	80058f4 <lps22hh_write_reg>
 8005a2a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d119      	bne.n	8005a66 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	091b      	lsrs	r3, r3, #4
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	7b3b      	ldrb	r3, [r7, #12]
 8005a3e:	f362 0341 	bfi	r3, r2, #1, #1
 8005a42:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	08db      	lsrs	r3, r3, #3
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	7b3b      	ldrb	r3, [r7, #12]
 8005a50:	f362 0300 	bfi	r3, r2, #0, #1
 8005a54:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005a56:	f107 020c 	add.w	r2, r7, #12
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	2111      	movs	r1, #17
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff ff48 	bl	80058f4 <lps22hh_write_reg>
 8005a64:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005a66:	697b      	ldr	r3, [r7, #20]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005a7a:	f107 0208 	add.w	r2, r7, #8
 8005a7e:	2301      	movs	r3, #1
 8005a80:	2127      	movs	r1, #39	; 0x27
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff ff1e 	bl	80058c4 <lps22hh_read_reg>
 8005a88:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8005a8a:	7a3b      	ldrb	r3, [r7, #8]
 8005a8c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	701a      	strb	r2, [r3, #0]

  return ret;
 8005a98:	68fb      	ldr	r3, [r7, #12]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005aac:	f107 0208 	add.w	r2, r7, #8
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	2128      	movs	r1, #40	; 0x28
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff ff05 	bl	80058c4 <lps22hh_read_reg>
 8005aba:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005abc:	7abb      	ldrb	r3, [r7, #10]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	7a7a      	ldrb	r2, [r7, #9]
 8005acc:	441a      	add	r2, r3
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	7a3a      	ldrb	r2, [r7, #8]
 8005ada:	441a      	add	r2, r3
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	021a      	lsls	r2, r3, #8
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	601a      	str	r2, [r3, #0]

  return ret;
 8005aea:	68fb      	ldr	r3, [r7, #12]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005afe:	f107 0208 	add.w	r2, r7, #8
 8005b02:	2302      	movs	r3, #2
 8005b04:	212b      	movs	r1, #43	; 0x2b
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff fedc 	bl	80058c4 <lps22hh_read_reg>
 8005b0c:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005b0e:	7a7b      	ldrb	r3, [r7, #9]
 8005b10:	b21a      	sxth	r2, r3
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	021b      	lsls	r3, r3, #8
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	7a3b      	ldrb	r3, [r7, #8]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	4413      	add	r3, r2
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	b21a      	sxth	r2, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	801a      	strh	r2, [r3, #0]

  return ret;
 8005b30:	68fb      	ldr	r3, [r7, #12]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005b44:	2301      	movs	r3, #1
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	210f      	movs	r1, #15
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff feba 	bl	80058c4 <lps22hh_read_reg>
 8005b50:	60f8      	str	r0, [r7, #12]

  return ret;
 8005b52:	68fb      	ldr	r3, [r7, #12]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005b68:	f107 0208 	add.w	r2, r7, #8
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	2111      	movs	r1, #17
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff fea7 	bl	80058c4 <lps22hh_read_reg>
 8005b76:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10f      	bne.n	8005b9e <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8005b7e:	78fb      	ldrb	r3, [r7, #3]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	7a3b      	ldrb	r3, [r7, #8]
 8005b88:	f362 0382 	bfi	r3, r2, #2, #1
 8005b8c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005b8e:	f107 0208 	add.w	r2, r7, #8
 8005b92:	2301      	movs	r3, #1
 8005b94:	2111      	movs	r1, #17
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff feac 	bl	80058f4 <lps22hh_write_reg>
 8005b9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005bb2:	f107 0208 	add.w	r2, r7, #8
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	2111      	movs	r1, #17
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7ff fe82 	bl	80058c4 <lps22hh_read_reg>
 8005bc0:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8005bc2:	7a3b      	ldrb	r3, [r7, #8]
 8005bc4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	701a      	strb	r2, [r3, #0]

  return ret;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005bda:	b590      	push	{r4, r7, lr}
 8005bdc:	b087      	sub	sp, #28
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	461a      	mov	r2, r3
 8005be6:	460b      	mov	r3, r1
 8005be8:	72fb      	strb	r3, [r7, #11]
 8005bea:	4613      	mov	r3, r2
 8005bec:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	685c      	ldr	r4, [r3, #4]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6898      	ldr	r0, [r3, #8]
 8005bf6:	893b      	ldrh	r3, [r7, #8]
 8005bf8:	7af9      	ldrb	r1, [r7, #11]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	47a0      	blx	r4
 8005bfe:	6178      	str	r0, [r7, #20]

  return ret;
 8005c00:	697b      	ldr	r3, [r7, #20]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd90      	pop	{r4, r7, pc}

08005c0a <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005c0a:	b590      	push	{r4, r7, lr}
 8005c0c:	b087      	sub	sp, #28
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	60f8      	str	r0, [r7, #12]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	461a      	mov	r2, r3
 8005c16:	460b      	mov	r3, r1
 8005c18:	72fb      	strb	r3, [r7, #11]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681c      	ldr	r4, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6898      	ldr	r0, [r3, #8]
 8005c26:	893b      	ldrh	r3, [r7, #8]
 8005c28:	7af9      	ldrb	r1, [r7, #11]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	47a0      	blx	r4
 8005c2e:	6178      	str	r0, [r7, #20]

  return ret;
 8005c30:	697b      	ldr	r3, [r7, #20]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd90      	pop	{r4, r7, pc}
	...

08005c3c <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8005c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c4a:	ee07 3a90 	vmov	s15, r3
 8005c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c52:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005c68 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8005c56:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	3d79db23 	.word	0x3d79db23

08005c6c <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	4603      	mov	r3, r0
 8005c74:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8005c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c82:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005c98 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8005c86:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	428c0000 	.word	0x428c0000

08005c9c <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8005ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cb2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005cd0 <lsm6dsr_from_lsb_to_celsius+0x34>
 8005cb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cba:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005cbe:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8005cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	43800000 	.word	0x43800000

08005cd4 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005ce0:	f107 0208 	add.w	r2, r7, #8
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	2110      	movs	r1, #16
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff ff76 	bl	8005bda <lsm6dsr_read_reg>
 8005cee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10f      	bne.n	8005d16 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	7a3b      	ldrb	r3, [r7, #8]
 8005d00:	f362 0383 	bfi	r3, r2, #2, #2
 8005d04:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8005d06:	f107 0208 	add.w	r2, r7, #8
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	2110      	movs	r1, #16
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff ff7b 	bl	8005c0a <lsm6dsr_write_reg>
 8005d14:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005d16:	68fb      	ldr	r3, [r7, #12]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8005d2c:	78fb      	ldrb	r3, [r7, #3]
 8005d2e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005d30:	f107 030c 	add.w	r3, r7, #12
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fbb0 	bl	800649c <lsm6dsr_fsm_enable_get>
 8005d3c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f040 80c4 	bne.w	8005ece <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005d46:	7b3b      	ldrb	r3, [r7, #12]
 8005d48:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005d4e:	7b3b      	ldrb	r3, [r7, #12]
 8005d50:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d54:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005d56:	4313      	orrs	r3, r2
 8005d58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005d5a:	7b3b      	ldrb	r3, [r7, #12]
 8005d5c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005d62:	4313      	orrs	r3, r2
 8005d64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005d66:	7b3b      	ldrb	r3, [r7, #12]
 8005d68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005d6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005d72:	7b3b      	ldrb	r3, [r7, #12]
 8005d74:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005d78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005d7e:	7b3b      	ldrb	r3, [r7, #12]
 8005d80:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005d86:	4313      	orrs	r3, r2
 8005d88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005d8a:	7b3b      	ldrb	r3, [r7, #12]
 8005d8c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005d90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005d92:	4313      	orrs	r3, r2
 8005d94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005d96:	7b3b      	ldrb	r3, [r7, #12]
 8005d98:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005d9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005da2:	7b7b      	ldrb	r3, [r7, #13]
 8005da4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005da8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005daa:	4313      	orrs	r3, r2
 8005dac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005dae:	7b7b      	ldrb	r3, [r7, #13]
 8005db0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005db4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005db6:	4313      	orrs	r3, r2
 8005db8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005dba:	7b7b      	ldrb	r3, [r7, #13]
 8005dbc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005dc0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005dc6:	7b7b      	ldrb	r3, [r7, #13]
 8005dc8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005dcc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005dd2:	7b7b      	ldrb	r3, [r7, #13]
 8005dd4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005dd8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005dde:	7b7b      	ldrb	r3, [r7, #13]
 8005de0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005de4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005de6:	4313      	orrs	r3, r2
 8005de8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005dea:	7b7b      	ldrb	r3, [r7, #13]
 8005dec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005df0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005df2:	4313      	orrs	r3, r2
 8005df4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005df6:	7b7b      	ldrb	r3, [r7, #13]
 8005df8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005dfc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d163      	bne.n	8005ece <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8005e06:	f107 030b 	add.w	r3, r7, #11
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fb71 	bl	80064f4 <lsm6dsr_fsm_data_rate_get>
 8005e12:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d159      	bne.n	8005ece <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005e1a:	7afb      	ldrb	r3, [r7, #11]
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d853      	bhi.n	8005ec8 <lsm6dsr_xl_data_rate_set+0x1a8>
 8005e20:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <lsm6dsr_xl_data_rate_set+0x108>)
 8005e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e26:	bf00      	nop
 8005e28:	08005e39 	.word	0x08005e39
 8005e2c:	08005e4b 	.word	0x08005e4b
 8005e30:	08005e69 	.word	0x08005e69
 8005e34:	08005e93 	.word	0x08005e93
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d102      	bne.n	8005e44 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005e42:	e045      	b.n	8005ed0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	75fb      	strb	r3, [r7, #23]
            break;
 8005e48:	e042      	b.n	8005ed0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d102      	bne.n	8005e56 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8005e50:	2302      	movs	r3, #2
 8005e52:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005e54:	e03c      	b.n	8005ed0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d102      	bne.n	8005e62 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	75fb      	strb	r3, [r7, #23]
            break;
 8005e60:	e036      	b.n	8005ed0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005e62:	78fb      	ldrb	r3, [r7, #3]
 8005e64:	75fb      	strb	r3, [r7, #23]
            break;
 8005e66:	e033      	b.n	8005ed0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d102      	bne.n	8005e74 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005e72:	e02d      	b.n	8005ed0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d102      	bne.n	8005e80 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	75fb      	strb	r3, [r7, #23]
            break;
 8005e7e:	e027      	b.n	8005ed0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d102      	bne.n	8005e8c <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8005e86:	2303      	movs	r3, #3
 8005e88:	75fb      	strb	r3, [r7, #23]
            break;
 8005e8a:	e021      	b.n	8005ed0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005e8c:	78fb      	ldrb	r3, [r7, #3]
 8005e8e:	75fb      	strb	r3, [r7, #23]
            break;
 8005e90:	e01e      	b.n	8005ed0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d102      	bne.n	8005e9e <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005e98:	2304      	movs	r3, #4
 8005e9a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005e9c:	e018      	b.n	8005ed0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005e9e:	78fb      	ldrb	r3, [r7, #3]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d102      	bne.n	8005eaa <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	75fb      	strb	r3, [r7, #23]
            break;
 8005ea8:	e012      	b.n	8005ed0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d102      	bne.n	8005eb6 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	75fb      	strb	r3, [r7, #23]
            break;
 8005eb4:	e00c      	b.n	8005ed0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d102      	bne.n	8005ec2 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	75fb      	strb	r3, [r7, #23]
            break;
 8005ec0:	e006      	b.n	8005ed0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	75fb      	strb	r3, [r7, #23]
            break;
 8005ec6:	e003      	b.n	8005ed0 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	75fb      	strb	r3, [r7, #23]
            break;
 8005ecc:	e000      	b.n	8005ed0 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8005ece:	bf00      	nop
    }
  }

  if (ret == 0)
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d107      	bne.n	8005ee6 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005ed6:	f107 0208 	add.w	r2, r7, #8
 8005eda:	2301      	movs	r3, #1
 8005edc:	2110      	movs	r1, #16
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff fe7b 	bl	8005bda <lsm6dsr_read_reg>
 8005ee4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10f      	bne.n	8005f0c <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	7a3b      	ldrb	r3, [r7, #8]
 8005ef6:	f362 1307 	bfi	r3, r2, #4, #4
 8005efa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8005efc:	f107 0208 	add.w	r2, r7, #8
 8005f00:	2301      	movs	r3, #1
 8005f02:	2110      	movs	r1, #16
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7ff fe80 	bl	8005c0a <lsm6dsr_write_reg>
 8005f0a:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005f0c:	693b      	ldr	r3, [r7, #16]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop

08005f18 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005f24:	f107 0208 	add.w	r2, r7, #8
 8005f28:	2301      	movs	r3, #1
 8005f2a:	2111      	movs	r1, #17
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff fe54 	bl	8005bda <lsm6dsr_read_reg>
 8005f32:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10f      	bne.n	8005f5a <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	7a3b      	ldrb	r3, [r7, #8]
 8005f44:	f362 0303 	bfi	r3, r2, #0, #4
 8005f48:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005f4a:	f107 0208 	add.w	r2, r7, #8
 8005f4e:	2301      	movs	r3, #1
 8005f50:	2111      	movs	r1, #17
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff fe59 	bl	8005c0a <lsm6dsr_write_reg>
 8005f58:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005f74:	f107 030c 	add.w	r3, r7, #12
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fa8e 	bl	800649c <lsm6dsr_fsm_enable_get>
 8005f80:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f040 80c4 	bne.w	8006112 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005f8a:	7b3b      	ldrb	r3, [r7, #12]
 8005f8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005f92:	7b3b      	ldrb	r3, [r7, #12]
 8005f94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005f98:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005f9e:	7b3b      	ldrb	r3, [r7, #12]
 8005fa0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005fa4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005faa:	7b3b      	ldrb	r3, [r7, #12]
 8005fac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005fb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005fb6:	7b3b      	ldrb	r3, [r7, #12]
 8005fb8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005fbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005fc2:	7b3b      	ldrb	r3, [r7, #12]
 8005fc4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005fc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005fce:	7b3b      	ldrb	r3, [r7, #12]
 8005fd0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005fd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005fda:	7b3b      	ldrb	r3, [r7, #12]
 8005fdc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005fe0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005fe6:	7b7b      	ldrb	r3, [r7, #13]
 8005fe8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005ff2:	7b7b      	ldrb	r3, [r7, #13]
 8005ff4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005ff8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005ffe:	7b7b      	ldrb	r3, [r7, #13]
 8006000:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006004:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006006:	4313      	orrs	r3, r2
 8006008:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800600a:	7b7b      	ldrb	r3, [r7, #13]
 800600c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006010:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006012:	4313      	orrs	r3, r2
 8006014:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006016:	7b7b      	ldrb	r3, [r7, #13]
 8006018:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800601c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800601e:	4313      	orrs	r3, r2
 8006020:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006022:	7b7b      	ldrb	r3, [r7, #13]
 8006024:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006028:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800602a:	4313      	orrs	r3, r2
 800602c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800602e:	7b7b      	ldrb	r3, [r7, #13]
 8006030:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006034:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006036:	4313      	orrs	r3, r2
 8006038:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800603a:	7b7b      	ldrb	r3, [r7, #13]
 800603c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006040:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006042:	4313      	orrs	r3, r2
 8006044:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006046:	2b01      	cmp	r3, #1
 8006048:	d163      	bne.n	8006112 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800604a:	f107 030b 	add.w	r3, r7, #11
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fa4f 	bl	80064f4 <lsm6dsr_fsm_data_rate_get>
 8006056:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d159      	bne.n	8006112 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800605e:	7afb      	ldrb	r3, [r7, #11]
 8006060:	2b03      	cmp	r3, #3
 8006062:	d853      	bhi.n	800610c <lsm6dsr_gy_data_rate_set+0x1a8>
 8006064:	a201      	add	r2, pc, #4	; (adr r2, 800606c <lsm6dsr_gy_data_rate_set+0x108>)
 8006066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606a:	bf00      	nop
 800606c:	0800607d 	.word	0x0800607d
 8006070:	0800608f 	.word	0x0800608f
 8006074:	080060ad 	.word	0x080060ad
 8006078:	080060d7 	.word	0x080060d7
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d102      	bne.n	8006088 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8006082:	2301      	movs	r3, #1
 8006084:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006086:	e045      	b.n	8006114 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	75fb      	strb	r3, [r7, #23]
            break;
 800608c:	e042      	b.n	8006114 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d102      	bne.n	800609a <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006094:	2302      	movs	r3, #2
 8006096:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006098:	e03c      	b.n	8006114 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800609a:	78fb      	ldrb	r3, [r7, #3]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d102      	bne.n	80060a6 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80060a0:	2302      	movs	r3, #2
 80060a2:	75fb      	strb	r3, [r7, #23]
            break;
 80060a4:	e036      	b.n	8006114 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80060a6:	78fb      	ldrb	r3, [r7, #3]
 80060a8:	75fb      	strb	r3, [r7, #23]
            break;
 80060aa:	e033      	b.n	8006114 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d102      	bne.n	80060b8 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80060b2:	2303      	movs	r3, #3
 80060b4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80060b6:	e02d      	b.n	8006114 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d102      	bne.n	80060c4 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80060be:	2303      	movs	r3, #3
 80060c0:	75fb      	strb	r3, [r7, #23]
            break;
 80060c2:	e027      	b.n	8006114 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d102      	bne.n	80060d0 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80060ca:	2303      	movs	r3, #3
 80060cc:	75fb      	strb	r3, [r7, #23]
            break;
 80060ce:	e021      	b.n	8006114 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	75fb      	strb	r3, [r7, #23]
            break;
 80060d4:	e01e      	b.n	8006114 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d102      	bne.n	80060e2 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80060dc:	2304      	movs	r3, #4
 80060de:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80060e0:	e018      	b.n	8006114 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80060e2:	78fb      	ldrb	r3, [r7, #3]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d102      	bne.n	80060ee <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80060e8:	2304      	movs	r3, #4
 80060ea:	75fb      	strb	r3, [r7, #23]
            break;
 80060ec:	e012      	b.n	8006114 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80060ee:	78fb      	ldrb	r3, [r7, #3]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d102      	bne.n	80060fa <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80060f4:	2304      	movs	r3, #4
 80060f6:	75fb      	strb	r3, [r7, #23]
            break;
 80060f8:	e00c      	b.n	8006114 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d102      	bne.n	8006106 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006100:	2304      	movs	r3, #4
 8006102:	75fb      	strb	r3, [r7, #23]
            break;
 8006104:	e006      	b.n	8006114 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	75fb      	strb	r3, [r7, #23]
            break;
 800610a:	e003      	b.n	8006114 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	75fb      	strb	r3, [r7, #23]
            break;
 8006110:	e000      	b.n	8006114 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8006112:	bf00      	nop
    }
  }

  if (ret == 0)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d107      	bne.n	800612a <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800611a:	f107 0208 	add.w	r2, r7, #8
 800611e:	2301      	movs	r3, #1
 8006120:	2111      	movs	r1, #17
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff fd59 	bl	8005bda <lsm6dsr_read_reg>
 8006128:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10f      	bne.n	8006150 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8006130:	7dfb      	ldrb	r3, [r7, #23]
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	b2da      	uxtb	r2, r3
 8006138:	7a3b      	ldrb	r3, [r7, #8]
 800613a:	f362 1307 	bfi	r3, r2, #4, #4
 800613e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006140:	f107 0208 	add.w	r2, r7, #8
 8006144:	2301      	movs	r3, #1
 8006146:	2111      	movs	r1, #17
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7ff fd5e 	bl	8005c0a <lsm6dsr_write_reg>
 800614e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006150:	693b      	ldr	r3, [r7, #16]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop

0800615c <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006168:	f107 0208 	add.w	r2, r7, #8
 800616c:	2301      	movs	r3, #1
 800616e:	2112      	movs	r1, #18
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff fd32 	bl	8005bda <lsm6dsr_read_reg>
 8006176:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10f      	bne.n	800619e <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800617e:	78fb      	ldrb	r3, [r7, #3]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	b2da      	uxtb	r2, r3
 8006186:	7a3b      	ldrb	r3, [r7, #8]
 8006188:	f362 1386 	bfi	r3, r2, #6, #1
 800618c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800618e:	f107 0208 	add.w	r2, r7, #8
 8006192:	2301      	movs	r3, #1
 8006194:	2112      	movs	r1, #18
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fd37 	bl	8005c0a <lsm6dsr_write_reg>
 800619c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800619e:	68fb      	ldr	r3, [r7, #12]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80061b2:	f107 0208 	add.w	r2, r7, #8
 80061b6:	2301      	movs	r3, #1
 80061b8:	211e      	movs	r1, #30
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff fd0d 	bl	8005bda <lsm6dsr_read_reg>
 80061c0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80061c2:	7a3b      	ldrb	r3, [r7, #8]
 80061c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	701a      	strb	r2, [r3, #0]

  return ret;
 80061d0:	68fb      	ldr	r3, [r7, #12]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80061e4:	f107 0208 	add.w	r2, r7, #8
 80061e8:	2301      	movs	r3, #1
 80061ea:	211e      	movs	r1, #30
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff fcf4 	bl	8005bda <lsm6dsr_read_reg>
 80061f2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 80061f4:	7a3b      	ldrb	r3, [r7, #8]
 80061f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	701a      	strb	r2, [r3, #0]

  return ret;
 8006202:	68fb      	ldr	r3, [r7, #12]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006216:	f107 0208 	add.w	r2, r7, #8
 800621a:	2301      	movs	r3, #1
 800621c:	211e      	movs	r1, #30
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff fcdb 	bl	8005bda <lsm6dsr_read_reg>
 8006224:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8006226:	7a3b      	ldrb	r3, [r7, #8]
 8006228:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800622c:	b2db      	uxtb	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	701a      	strb	r2, [r3, #0]

  return ret;
 8006234:	68fb      	ldr	r3, [r7, #12]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8006248:	f107 0208 	add.w	r2, r7, #8
 800624c:	2302      	movs	r3, #2
 800624e:	2120      	movs	r1, #32
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7ff fcc2 	bl	8005bda <lsm6dsr_read_reg>
 8006256:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8006258:	7a7b      	ldrb	r3, [r7, #9]
 800625a:	b21a      	sxth	r2, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006266:	b29b      	uxth	r3, r3
 8006268:	021b      	lsls	r3, r3, #8
 800626a:	b29a      	uxth	r2, r3
 800626c:	7a3b      	ldrb	r3, [r7, #8]
 800626e:	b29b      	uxth	r3, r3
 8006270:	4413      	add	r3, r2
 8006272:	b29b      	uxth	r3, r3
 8006274:	b21a      	sxth	r2, r3
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	801a      	strh	r2, [r3, #0]

  return ret;
 800627a:	68fb      	ldr	r3, [r7, #12]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 800628e:	f107 020c 	add.w	r2, r7, #12
 8006292:	2306      	movs	r3, #6
 8006294:	2122      	movs	r1, #34	; 0x22
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff fc9f 	bl	8005bda <lsm6dsr_read_reg>
 800629c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800629e:	7b7b      	ldrb	r3, [r7, #13]
 80062a0:	b21a      	sxth	r2, r3
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	7b3b      	ldrb	r3, [r7, #12]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	4413      	add	r3, r2
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	b21a      	sxth	r2, r3
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80062c0:	7bfa      	ldrb	r2, [r7, #15]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	3302      	adds	r3, #2
 80062c6:	b212      	sxth	r2, r2
 80062c8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	3302      	adds	r3, #2
 80062ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	021b      	lsls	r3, r3, #8
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	7bbb      	ldrb	r3, [r7, #14]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	4413      	add	r3, r2
 80062de:	b29a      	uxth	r2, r3
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	3302      	adds	r3, #2
 80062e4:	b212      	sxth	r2, r2
 80062e6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80062e8:	7c7a      	ldrb	r2, [r7, #17]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	3304      	adds	r3, #4
 80062ee:	b212      	sxth	r2, r2
 80062f0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	3304      	adds	r3, #4
 80062f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	021b      	lsls	r3, r3, #8
 80062fe:	b29a      	uxth	r2, r3
 8006300:	7c3b      	ldrb	r3, [r7, #16]
 8006302:	b29b      	uxth	r3, r3
 8006304:	4413      	add	r3, r2
 8006306:	b29a      	uxth	r2, r3
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	3304      	adds	r3, #4
 800630c:	b212      	sxth	r2, r2
 800630e:	801a      	strh	r2, [r3, #0]

  return ret;
 8006310:	697b      	ldr	r3, [r7, #20]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b086      	sub	sp, #24
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8006324:	f107 020c 	add.w	r2, r7, #12
 8006328:	2306      	movs	r3, #6
 800632a:	2128      	movs	r1, #40	; 0x28
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff fc54 	bl	8005bda <lsm6dsr_read_reg>
 8006332:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006334:	7b7b      	ldrb	r3, [r7, #13]
 8006336:	b21a      	sxth	r2, r3
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006342:	b29b      	uxth	r3, r3
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	b29a      	uxth	r2, r3
 8006348:	7b3b      	ldrb	r3, [r7, #12]
 800634a:	b29b      	uxth	r3, r3
 800634c:	4413      	add	r3, r2
 800634e:	b29b      	uxth	r3, r3
 8006350:	b21a      	sxth	r2, r3
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006356:	7bfa      	ldrb	r2, [r7, #15]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	3302      	adds	r3, #2
 800635c:	b212      	sxth	r2, r2
 800635e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	3302      	adds	r3, #2
 8006364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006368:	b29b      	uxth	r3, r3
 800636a:	021b      	lsls	r3, r3, #8
 800636c:	b29a      	uxth	r2, r3
 800636e:	7bbb      	ldrb	r3, [r7, #14]
 8006370:	b29b      	uxth	r3, r3
 8006372:	4413      	add	r3, r2
 8006374:	b29a      	uxth	r2, r3
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	3302      	adds	r3, #2
 800637a:	b212      	sxth	r2, r2
 800637c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800637e:	7c7a      	ldrb	r2, [r7, #17]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	3304      	adds	r3, #4
 8006384:	b212      	sxth	r2, r2
 8006386:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	3304      	adds	r3, #4
 800638c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006390:	b29b      	uxth	r3, r3
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	b29a      	uxth	r2, r3
 8006396:	7c3b      	ldrb	r3, [r7, #16]
 8006398:	b29b      	uxth	r3, r3
 800639a:	4413      	add	r3, r2
 800639c:	b29a      	uxth	r2, r3
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	3304      	adds	r3, #4
 80063a2:	b212      	sxth	r2, r2
 80063a4:	801a      	strh	r2, [r3, #0]

  return ret;
 80063a6:	697b      	ldr	r3, [r7, #20]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80063bc:	f107 0208 	add.w	r2, r7, #8
 80063c0:	2301      	movs	r3, #1
 80063c2:	2101      	movs	r1, #1
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7ff fc08 	bl	8005bda <lsm6dsr_read_reg>
 80063ca:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10f      	bne.n	80063f2 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80063d2:	78fb      	ldrb	r3, [r7, #3]
 80063d4:	f003 0303 	and.w	r3, r3, #3
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	7a3b      	ldrb	r3, [r7, #8]
 80063dc:	f362 1387 	bfi	r3, r2, #6, #2
 80063e0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80063e2:	f107 0208 	add.w	r2, r7, #8
 80063e6:	2301      	movs	r3, #1
 80063e8:	2101      	movs	r1, #1
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff fc0d 	bl	8005c0a <lsm6dsr_write_reg>
 80063f0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80063f2:	68fb      	ldr	r3, [r7, #12]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8006406:	2301      	movs	r3, #1
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	210f      	movs	r1, #15
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff fbe4 	bl	8005bda <lsm6dsr_read_reg>
 8006412:	60f8      	str	r0, [r7, #12]

  return ret;
 8006414:	68fb      	ldr	r3, [r7, #12]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	460b      	mov	r3, r1
 8006428:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800642a:	f107 0208 	add.w	r2, r7, #8
 800642e:	2301      	movs	r3, #1
 8006430:	2112      	movs	r1, #18
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff fbd1 	bl	8005bda <lsm6dsr_read_reg>
 8006438:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10f      	bne.n	8006460 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	b2da      	uxtb	r2, r3
 8006448:	7a3b      	ldrb	r3, [r7, #8]
 800644a:	f362 0300 	bfi	r3, r2, #0, #1
 800644e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006450:	f107 0208 	add.w	r2, r7, #8
 8006454:	2301      	movs	r3, #1
 8006456:	2112      	movs	r1, #18
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff fbd6 	bl	8005c0a <lsm6dsr_write_reg>
 800645e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006460:	68fb      	ldr	r3, [r7, #12]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006474:	f107 0208 	add.w	r2, r7, #8
 8006478:	2301      	movs	r3, #1
 800647a:	2112      	movs	r1, #18
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff fbac 	bl	8005bda <lsm6dsr_read_reg>
 8006482:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8006484:	7a3b      	ldrb	r3, [r7, #8]
 8006486:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800648a:	b2db      	uxtb	r3, r3
 800648c:	461a      	mov	r2, r3
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	701a      	strb	r2, [r3, #0]

  return ret;
 8006492:	68fb      	ldr	r3, [r7, #12]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80064a6:	2102      	movs	r1, #2
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff ff81 	bl	80063b0 <lsm6dsr_mem_bank_set>
 80064ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d106      	bne.n	80064c4 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80064b6:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80064b8:	2301      	movs	r3, #1
 80064ba:	2146      	movs	r1, #70	; 0x46
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff fb8c 	bl	8005bda <lsm6dsr_read_reg>
 80064c2:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d107      	bne.n	80064da <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80064ce:	2301      	movs	r3, #1
 80064d0:	2147      	movs	r1, #71	; 0x47
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7ff fb81 	bl	8005bda <lsm6dsr_read_reg>
 80064d8:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d104      	bne.n	80064ea <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80064e0:	2100      	movs	r1, #0
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff ff64 	bl	80063b0 <lsm6dsr_mem_bank_set>
 80064e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80064ea:	68fb      	ldr	r3, [r7, #12]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80064fe:	2102      	movs	r1, #2
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff ff55 	bl	80063b0 <lsm6dsr_mem_bank_set>
 8006506:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d107      	bne.n	800651e <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800650e:	f107 0208 	add.w	r2, r7, #8
 8006512:	2301      	movs	r3, #1
 8006514:	215f      	movs	r1, #95	; 0x5f
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff fb5f 	bl	8005bda <lsm6dsr_read_reg>
 800651c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d104      	bne.n	800652e <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8006524:	2100      	movs	r1, #0
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff ff42 	bl	80063b0 <lsm6dsr_mem_bank_set>
 800652c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800652e:	7a3b      	ldrb	r3, [r7, #8]
 8006530:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b03      	cmp	r3, #3
 8006538:	d81a      	bhi.n	8006570 <lsm6dsr_fsm_data_rate_get+0x7c>
 800653a:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <lsm6dsr_fsm_data_rate_get+0x4c>)
 800653c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006540:	08006551 	.word	0x08006551
 8006544:	08006559 	.word	0x08006559
 8006548:	08006561 	.word	0x08006561
 800654c:	08006569 	.word	0x08006569
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2200      	movs	r2, #0
 8006554:	701a      	strb	r2, [r3, #0]
      break;
 8006556:	e00f      	b.n	8006578 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2201      	movs	r2, #1
 800655c:	701a      	strb	r2, [r3, #0]
      break;
 800655e:	e00b      	b.n	8006578 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2202      	movs	r2, #2
 8006564:	701a      	strb	r2, [r3, #0]
      break;
 8006566:	e007      	b.n	8006578 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2203      	movs	r2, #3
 800656c:	701a      	strb	r2, [r3, #0]
      break;
 800656e:	e003      	b.n	8006578 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2200      	movs	r2, #0
 8006574:	701a      	strb	r2, [r3, #0]
      break;
 8006576:	bf00      	nop
  }

  return ret;
 8006578:	68fb      	ldr	r3, [r7, #12]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop

08006584 <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef sDate = {0};
RTC_AlarmTypeDef sAlarm = {0};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 800658c:	f04f 33ff 	mov.w	r3, #4294967295
 8006590:	2208      	movs	r2, #8
 8006592:	4905      	ldr	r1, [pc, #20]	; (80065a8 <HAL_RTC_AlarmAEventCallback+0x24>)
 8006594:	4805      	ldr	r0, [pc, #20]	; (80065ac <HAL_RTC_AlarmAEventCallback+0x28>)
 8006596:	f006 fcac 	bl	800cef2 <HAL_UART_Transmit>
	flagA = 1;
 800659a:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <HAL_RTC_AlarmAEventCallback+0x2c>)
 800659c:	2201      	movs	r2, #1
 800659e:	701a      	strb	r2, [r3, #0]
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	08020820 	.word	0x08020820
 80065ac:	20006dc8 	.word	0x20006dc8
 80065b0:	20000648 	.word	0x20000648

080065b4 <MRT_SetupRTOS>:
}




void MRT_SetupRTOS(UART_HandleTypeDef uart,uint8_t sleepT){
 80065b4:	b084      	sub	sp, #16
 80065b6:	b580      	push	{r7, lr}
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	f107 0c08 	add.w	ip, r7, #8
 80065be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	rtos.huart = uart;
 80065c2:	4b0d      	ldr	r3, [pc, #52]	; (80065f8 <MRT_SetupRTOS+0x44>)
 80065c4:	4618      	mov	r0, r3
 80065c6:	f107 0308 	add.w	r3, r7, #8
 80065ca:	2244      	movs	r2, #68	; 0x44
 80065cc:	4619      	mov	r1, r3
 80065ce:	f013 fbb5 	bl	8019d3c <memcpy>
	rtos.sleepTime = sleepT;
 80065d2:	4a09      	ldr	r2, [pc, #36]	; (80065f8 <MRT_SetupRTOS+0x44>)
 80065d4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80065d8:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 80065dc:	f04f 33ff 	mov.w	r3, #4294967295
 80065e0:	2211      	movs	r2, #17
 80065e2:	4906      	ldr	r1, [pc, #24]	; (80065fc <MRT_SetupRTOS+0x48>)
 80065e4:	4804      	ldr	r0, [pc, #16]	; (80065f8 <MRT_SetupRTOS+0x44>)
 80065e6:	f006 fc84 	bl	800cef2 <HAL_UART_Transmit>
}
 80065ea:	bf00      	nop
 80065ec:	46bd      	mov	sp, r7
 80065ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065f2:	b004      	add	sp, #16
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	20006dc8 	.word	0x20006dc8
 80065fc:	08020838 	.word	0x08020838

08006600 <MRT_WUProcedure>:



void MRT_WUProcedure(void){
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8006606:	4b14      	ldr	r3, [pc, #80]	; (8006658 <MRT_WUProcedure+0x58>)
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b02      	cmp	r3, #2
 8006610:	d11c      	bne.n	800664c <MRT_WUProcedure+0x4c>
	{

		wu_flag = 1;
 8006612:	4b12      	ldr	r3, [pc, #72]	; (800665c <MRT_WUProcedure+0x5c>)
 8006614:	2201      	movs	r2, #1
 8006616:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8006618:	4b0f      	ldr	r3, [pc, #60]	; (8006658 <MRT_WUProcedure+0x58>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a0e      	ldr	r2, [pc, #56]	; (8006658 <MRT_WUProcedure+0x58>)
 800661e:	f043 0308 	orr.w	r3, r3, #8
 8006622:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 8006624:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <MRT_WUProcedure+0x60>)
 8006626:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7f9 fde1 	bl	80001f0 <strlen>
 800662e:	4603      	mov	r3, r0
 8006630:	b29a      	uxth	r2, r3
 8006632:	f04f 33ff 	mov.w	r3, #4294967295
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	480a      	ldr	r0, [pc, #40]	; (8006664 <MRT_WUProcedure+0x64>)
 800663a:	f006 fc5a 	bl	800cef2 <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 800663e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006642:	f003 fc15 	bl	8009e70 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8006646:	4808      	ldr	r0, [pc, #32]	; (8006668 <MRT_WUProcedure+0x68>)
 8006648:	f005 f810 	bl	800b66c <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 800664c:	f000 f80e 	bl	800666c <MRT_ClearFlags>
}
 8006650:	bf00      	nop
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	40007000 	.word	0x40007000
 800665c:	20000649 	.word	0x20000649
 8006660:	0802084c 	.word	0x0802084c
 8006664:	20006dc8 	.word	0x20006dc8
 8006668:	20006908 	.word	0x20006908

0800666c <MRT_ClearFlags>:


void MRT_ClearFlags(void){
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 8006670:	f04f 33ff 	mov.w	r3, #4294967295
 8006674:	2214      	movs	r2, #20
 8006676:	4932      	ldr	r1, [pc, #200]	; (8006740 <MRT_ClearFlags+0xd4>)
 8006678:	4832      	ldr	r0, [pc, #200]	; (8006744 <MRT_ClearFlags+0xd8>)
 800667a:	f006 fc3a 	bl	800cef2 <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 800667e:	4b32      	ldr	r3, [pc, #200]	; (8006748 <MRT_ClearFlags+0xdc>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	22ca      	movs	r2, #202	; 0xca
 8006684:	625a      	str	r2, [r3, #36]	; 0x24
 8006686:	4b30      	ldr	r3, [pc, #192]	; (8006748 <MRT_ClearFlags+0xdc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2253      	movs	r2, #83	; 0x53
 800668c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 800668e:	e00f      	b.n	80066b0 <MRT_ClearFlags+0x44>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 8006690:	f04f 33ff 	mov.w	r3, #4294967295
 8006694:	2217      	movs	r2, #23
 8006696:	492d      	ldr	r1, [pc, #180]	; (800674c <MRT_ClearFlags+0xe0>)
 8006698:	482a      	ldr	r0, [pc, #168]	; (8006744 <MRT_ClearFlags+0xd8>)
 800669a:	f006 fc2a 	bl	800cef2 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800669e:	4b2a      	ldr	r3, [pc, #168]	; (8006748 <MRT_ClearFlags+0xdc>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	4b28      	ldr	r3, [pc, #160]	; (8006748 <MRT_ClearFlags+0xdc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80066ae:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80066b0:	4b25      	ldr	r3, [pc, #148]	; (8006748 <MRT_ClearFlags+0xdc>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e8      	bne.n	8006690 <MRT_ClearFlags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80066be:	4b22      	ldr	r3, [pc, #136]	; (8006748 <MRT_ClearFlags+0xdc>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	22ff      	movs	r2, #255	; 0xff
 80066c4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80066c6:	4b22      	ldr	r3, [pc, #136]	; (8006750 <MRT_ClearFlags+0xe4>)
 80066c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80066cc:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80066ce:	4b1e      	ldr	r3, [pc, #120]	; (8006748 <MRT_ClearFlags+0xdc>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	22ca      	movs	r2, #202	; 0xca
 80066d4:	625a      	str	r2, [r3, #36]	; 0x24
 80066d6:	4b1c      	ldr	r3, [pc, #112]	; (8006748 <MRT_ClearFlags+0xdc>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2253      	movs	r2, #83	; 0x53
 80066dc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80066de:	e00f      	b.n	8006700 <MRT_ClearFlags+0x94>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 80066e0:	f04f 33ff 	mov.w	r3, #4294967295
 80066e4:	2217      	movs	r2, #23
 80066e6:	491b      	ldr	r1, [pc, #108]	; (8006754 <MRT_ClearFlags+0xe8>)
 80066e8:	4816      	ldr	r0, [pc, #88]	; (8006744 <MRT_ClearFlags+0xd8>)
 80066ea:	f006 fc02 	bl	800cef2 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 80066ee:	4b16      	ldr	r3, [pc, #88]	; (8006748 <MRT_ClearFlags+0xdc>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	4b14      	ldr	r3, [pc, #80]	; (8006748 <MRT_ClearFlags+0xdc>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f462 7220 	orn	r2, r2, #640	; 0x280
 80066fe:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8006700:	4b11      	ldr	r3, [pc, #68]	; (8006748 <MRT_ClearFlags+0xdc>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e8      	bne.n	80066e0 <MRT_ClearFlags+0x74>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800670e:	4b0e      	ldr	r3, [pc, #56]	; (8006748 <MRT_ClearFlags+0xdc>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	22ff      	movs	r2, #255	; 0xff
 8006714:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006716:	4b0e      	ldr	r3, [pc, #56]	; (8006750 <MRT_ClearFlags+0xe4>)
 8006718:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800671c:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800671e:	4b0e      	ldr	r3, [pc, #56]	; (8006758 <MRT_ClearFlags+0xec>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a0d      	ldr	r2, [pc, #52]	; (8006758 <MRT_ClearFlags+0xec>)
 8006724:	f043 0304 	orr.w	r3, r3, #4
 8006728:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800672a:	4b07      	ldr	r3, [pc, #28]	; (8006748 <MRT_ClearFlags+0xdc>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	b2da      	uxtb	r2, r3
 8006732:	4b05      	ldr	r3, [pc, #20]	; (8006748 <MRT_ClearFlags+0xdc>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800673a:	60da      	str	r2, [r3, #12]
}
 800673c:	bf00      	nop
 800673e:	bd80      	pop	{r7, pc}
 8006740:	0802086c 	.word	0x0802086c
 8006744:	20006dc8 	.word	0x20006dc8
 8006748:	20006908 	.word	0x20006908
 800674c:	08020884 	.word	0x08020884
 8006750:	40013c00 	.word	0x40013c00
 8006754:	0802089c 	.word	0x0802089c
 8006758:	40007000 	.word	0x40007000

0800675c <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 800675c:	b580      	push	{r7, lr}
 800675e:	b0a4      	sub	sp, #144	; 0x90
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 8006764:	f04f 33ff 	mov.w	r3, #4294967295
 8006768:	220f      	movs	r2, #15
 800676a:	491b      	ldr	r1, [pc, #108]	; (80067d8 <MRT_StandByMode+0x7c>)
 800676c:	481b      	ldr	r0, [pc, #108]	; (80067dc <MRT_StandByMode+0x80>)
 800676e:	f006 fbc0 	bl	800cef2 <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8006772:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006776:	f003 fb69 	bl	8009e4c <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 800677a:	f7ff ff77 	bl	800666c <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 800677e:	f04f 33ff 	mov.w	r3, #4294967295
 8006782:	2211      	movs	r2, #17
 8006784:	4916      	ldr	r1, [pc, #88]	; (80067e0 <MRT_StandByMode+0x84>)
 8006786:	4815      	ldr	r0, [pc, #84]	; (80067dc <MRT_StandByMode+0x80>)
 8006788:	f006 fbb3 	bl	800cef2 <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 800678c:	f107 0308 	add.w	r3, r7, #8
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	4914      	ldr	r1, [pc, #80]	; (80067e4 <MRT_StandByMode+0x88>)
 8006794:	4618      	mov	r0, r3
 8006796:	f014 fb77 	bl	801ae88 <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 800679a:	f107 0308 	add.w	r3, r7, #8
 800679e:	4618      	mov	r0, r3
 80067a0:	f7f9 fd26 	bl	80001f0 <strlen>
 80067a4:	4603      	mov	r3, r0
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	f107 0108 	add.w	r1, r7, #8
 80067ac:	f04f 33ff 	mov.w	r3, #4294967295
 80067b0:	480a      	ldr	r0, [pc, #40]	; (80067dc <MRT_StandByMode+0x80>)
 80067b2:	f006 fb9e 	bl	800cef2 <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80067b6:	2204      	movs	r2, #4
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	480b      	ldr	r0, [pc, #44]	; (80067e8 <MRT_StandByMode+0x8c>)
 80067bc:	f004 fe96 	bl	800b4ec <HAL_RTCEx_SetWakeUpTimer_IT>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <MRT_StandByMode+0x6e>
	{
	  Error_Handler();
 80067c6:	f7fc f8e5 	bl	8002994 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 80067ca:	f003 fb65 	bl	8009e98 <HAL_PWR_EnterSTANDBYMode>
}
 80067ce:	bf00      	nop
 80067d0:	3790      	adds	r7, #144	; 0x90
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	080208b4 	.word	0x080208b4
 80067dc:	20006dc8 	.word	0x20006dc8
 80067e0:	080208c4 	.word	0x080208c4
 80067e4:	080208d8 	.word	0x080208d8
 80067e8:	20006908 	.word	0x20006908

080067ec <MRT_setAlarmA>:
	  }
}



void MRT_setAlarmA(uint8_t h, uint8_t m, uint8_t s){
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	4603      	mov	r3, r0
 80067f4:	71fb      	strb	r3, [r7, #7]
 80067f6:	460b      	mov	r3, r1
 80067f8:	71bb      	strb	r3, [r7, #6]
 80067fa:	4613      	mov	r3, r2
 80067fc:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = h;
 80067fe:	4a18      	ldr	r2, [pc, #96]	; (8006860 <MRT_setAlarmA+0x74>)
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	7013      	strb	r3, [r2, #0]
	  sAlarm.AlarmTime.Minutes = m;
 8006804:	4a16      	ldr	r2, [pc, #88]	; (8006860 <MRT_setAlarmA+0x74>)
 8006806:	79bb      	ldrb	r3, [r7, #6]
 8006808:	7053      	strb	r3, [r2, #1]
	  sAlarm.AlarmTime.Seconds = s;
 800680a:	4a15      	ldr	r2, [pc, #84]	; (8006860 <MRT_setAlarmA+0x74>)
 800680c:	797b      	ldrb	r3, [r7, #5]
 800680e:	7093      	strb	r3, [r2, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8006810:	4b13      	ldr	r3, [pc, #76]	; (8006860 <MRT_setAlarmA+0x74>)
 8006812:	2200      	movs	r2, #0
 8006814:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006816:	4b12      	ldr	r3, [pc, #72]	; (8006860 <MRT_setAlarmA+0x74>)
 8006818:	2200      	movs	r2, #0
 800681a:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800681c:	4b10      	ldr	r3, [pc, #64]	; (8006860 <MRT_setAlarmA+0x74>)
 800681e:	2200      	movs	r2, #0
 8006820:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8006822:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <MRT_setAlarmA+0x74>)
 8006824:	2200      	movs	r2, #0
 8006826:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8006828:	4b0d      	ldr	r3, [pc, #52]	; (8006860 <MRT_setAlarmA+0x74>)
 800682a:	2200      	movs	r2, #0
 800682c:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800682e:	4b0c      	ldr	r3, [pc, #48]	; (8006860 <MRT_setAlarmA+0x74>)
 8006830:	2200      	movs	r2, #0
 8006832:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8006834:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <MRT_setAlarmA+0x74>)
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 800683c:	4b08      	ldr	r3, [pc, #32]	; (8006860 <MRT_setAlarmA+0x74>)
 800683e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006842:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8006844:	2201      	movs	r2, #1
 8006846:	4906      	ldr	r1, [pc, #24]	; (8006860 <MRT_setAlarmA+0x74>)
 8006848:	4806      	ldr	r0, [pc, #24]	; (8006864 <MRT_setAlarmA+0x78>)
 800684a:	f004 fc41 	bl	800b0d0 <HAL_RTC_SetAlarm_IT>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <MRT_setAlarmA+0x6c>
	  {
	    Error_Handler();
 8006854:	f7fc f89e 	bl	8002994 <Error_Handler>
	  }
}
 8006858:	bf00      	nop
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	20000664 	.word	0x20000664
 8006864:	20006908 	.word	0x20006908

08006868 <MRT_setRTC>:


void MRT_setRTC(uint8_t h, uint8_t m, uint8_t s){
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af00      	add	r7, sp, #0
 800686e:	4603      	mov	r3, r0
 8006870:	71fb      	strb	r3, [r7, #7]
 8006872:	460b      	mov	r3, r1
 8006874:	71bb      	strb	r3, [r7, #6]
 8006876:	4613      	mov	r3, r2
 8006878:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = h;
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = m;
 800687e:	79bb      	ldrb	r3, [r7, #6]
 8006880:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = s;
 8006882:	797b      	ldrb	r3, [r7, #5]
 8006884:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006886:	2300      	movs	r3, #0
 8006888:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800688e:	f107 030c 	add.w	r3, r7, #12
 8006892:	2201      	movs	r2, #1
 8006894:	4619      	mov	r1, r3
 8006896:	4811      	ldr	r0, [pc, #68]	; (80068dc <MRT_setRTC+0x74>)
 8006898:	f004 fa09 	bl	800acae <HAL_RTC_SetTime>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <MRT_setRTC+0x3e>
	  {
	    Error_Handler();
 80068a2:	f7fc f877 	bl	8002994 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80068a6:	4b0e      	ldr	r3, [pc, #56]	; (80068e0 <MRT_setRTC+0x78>)
 80068a8:	2201      	movs	r2, #1
 80068aa:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 80068ac:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <MRT_setRTC+0x78>)
 80068ae:	2201      	movs	r2, #1
 80068b0:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 80068b2:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <MRT_setRTC+0x78>)
 80068b4:	2201      	movs	r2, #1
 80068b6:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 80068b8:	4b09      	ldr	r3, [pc, #36]	; (80068e0 <MRT_setRTC+0x78>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80068be:	2201      	movs	r2, #1
 80068c0:	4907      	ldr	r1, [pc, #28]	; (80068e0 <MRT_setRTC+0x78>)
 80068c2:	4806      	ldr	r0, [pc, #24]	; (80068dc <MRT_setRTC+0x74>)
 80068c4:	f004 fb0e 	bl	800aee4 <HAL_RTC_SetDate>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <MRT_setRTC+0x6a>
	  {
	    Error_Handler();
 80068ce:	f7fc f861 	bl	8002994 <Error_Handler>
	  }
}
 80068d2:	bf00      	nop
 80068d4:	3720      	adds	r7, #32
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20006908 	.word	0x20006908
 80068e0:	20000660 	.word	0x20000660

080068e4 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
void Max31855_Read_Temp(void) {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 80068ea:	2300      	movs	r3, #0
 80068ec:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 80068ee:	2200      	movs	r2, #0
 80068f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80068f4:	483f      	ldr	r0, [pc, #252]	; (80069f4 <Max31855_Read_Temp+0x110>)
 80068f6:	f001 f883 	bl	8007a00 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 80068fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068fe:	2204      	movs	r2, #4
 8006900:	493d      	ldr	r1, [pc, #244]	; (80069f8 <Max31855_Read_Temp+0x114>)
 8006902:	483e      	ldr	r0, [pc, #248]	; (80069fc <Max31855_Read_Temp+0x118>)
 8006904:	f005 f8d9 	bl	800baba <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8006908:	2201      	movs	r2, #1
 800690a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800690e:	4839      	ldr	r0, [pc, #228]	; (80069f4 <Max31855_Read_Temp+0x110>)
 8006910:	f001 f876 	bl	8007a00 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8006914:	4b38      	ldr	r3, [pc, #224]	; (80069f8 <Max31855_Read_Temp+0x114>)
 8006916:	78db      	ldrb	r3, [r3, #3]
 8006918:	461a      	mov	r2, r3
 800691a:	4b37      	ldr	r3, [pc, #220]	; (80069f8 <Max31855_Read_Temp+0x114>)
 800691c:	789b      	ldrb	r3, [r3, #2]
 800691e:	021b      	lsls	r3, r3, #8
 8006920:	431a      	orrs	r2, r3
 8006922:	4b35      	ldr	r3, [pc, #212]	; (80069f8 <Max31855_Read_Temp+0x114>)
 8006924:	785b      	ldrb	r3, [r3, #1]
 8006926:	041b      	lsls	r3, r3, #16
 8006928:	431a      	orrs	r2, r3
 800692a:	4b33      	ldr	r3, [pc, #204]	; (80069f8 <Max31855_Read_Temp+0x114>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	061b      	lsls	r3, r3, #24
 8006930:	4313      	orrs	r3, r2
 8006932:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	b2db      	uxtb	r3, r3
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	b2da      	uxtb	r2, r3
 800693e:	4b30      	ldr	r3, [pc, #192]	; (8006a00 <Max31855_Read_Temp+0x11c>)
 8006940:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8006942:	4b2d      	ldr	r3, [pc, #180]	; (80069f8 <Max31855_Read_Temp+0x114>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	09db      	lsrs	r3, r3, #7
 8006948:	b2db      	uxtb	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	4b2d      	ldr	r3, [pc, #180]	; (8006a04 <Max31855_Read_Temp+0x120>)
 800694e:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8006950:	4b29      	ldr	r3, [pc, #164]	; (80069f8 <Max31855_Read_Temp+0x114>)
 8006952:	78db      	ldrb	r3, [r3, #3]
 8006954:	f003 0307 	and.w	r3, r3, #7
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00c      	beq.n	8006976 <Max31855_Read_Temp+0x92>
			THERMO_TEMP = (-1 * (DATARX[3] & 0x07));
 800695c:	4b26      	ldr	r3, [pc, #152]	; (80069f8 <Max31855_Read_Temp+0x114>)
 800695e:	78db      	ldrb	r3, [r3, #3]
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	425b      	negs	r3, r3
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800696e:	4b26      	ldr	r3, [pc, #152]	; (8006a08 <Max31855_Read_Temp+0x124>)
 8006970:	edc3 7a00 	vstr	s15, [r3]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8006974:	e039      	b.n	80069ea <Max31855_Read_Temp+0x106>
		else if (sign == 1) {								// Negative Temperature
 8006976:	4b23      	ldr	r3, [pc, #140]	; (8006a04 <Max31855_Read_Temp+0x120>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d120      	bne.n	80069c0 <Max31855_Read_Temp+0xdc>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 800697e:	4b1e      	ldr	r3, [pc, #120]	; (80069f8 <Max31855_Read_Temp+0x114>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	019b      	lsls	r3, r3, #6
 8006984:	4a1c      	ldr	r2, [pc, #112]	; (80069f8 <Max31855_Read_Temp+0x114>)
 8006986:	7852      	ldrb	r2, [r2, #1]
 8006988:	0892      	lsrs	r2, r2, #2
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	4313      	orrs	r3, r2
 800698e:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006996:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 800699e:	f083 031f 	eor.w	r3, r3, #31
 80069a2:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) -Temp / 4);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	425b      	negs	r3, r3
 80069a8:	ee07 3a90 	vmov	s15, r3
 80069ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069b0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80069b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069b8:	4b13      	ldr	r3, [pc, #76]	; (8006a08 <Max31855_Read_Temp+0x124>)
 80069ba:	edc3 7a00 	vstr	s15, [r3]
}
 80069be:	e014      	b.n	80069ea <Max31855_Read_Temp+0x106>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 80069c0:	4b0d      	ldr	r3, [pc, #52]	; (80069f8 <Max31855_Read_Temp+0x114>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	019b      	lsls	r3, r3, #6
 80069c6:	4a0c      	ldr	r2, [pc, #48]	; (80069f8 <Max31855_Read_Temp+0x114>)
 80069c8:	7852      	ldrb	r2, [r2, #1]
 80069ca:	0892      	lsrs	r2, r2, #2
 80069cc:	b2d2      	uxtb	r2, r2
 80069ce:	4313      	orrs	r3, r2
 80069d0:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) Temp / 4.0);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	ee07 3a90 	vmov	s15, r3
 80069d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069dc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80069e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069e4:	4b08      	ldr	r3, [pc, #32]	; (8006a08 <Max31855_Read_Temp+0x124>)
 80069e6:	edc3 7a00 	vstr	s15, [r3]
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	40021000 	.word	0x40021000
 80069f8:	20006e10 	.word	0x20006e10
 80069fc:	200068ac 	.word	0x200068ac
 8006a00:	2000068c 	.word	0x2000068c
 8006a04:	20000690 	.word	0x20000690
 8006a08:	200069e8 	.word	0x200069e8

08006a0c <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8006a0c:	b40f      	push	{r0, r1, r2, r3}
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b082      	sub	sp, #8
 8006a12:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8006a14:	f107 0314 	add.w	r3, r7, #20
 8006a18:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a22:	480a      	ldr	r0, [pc, #40]	; (8006a4c <myprintf+0x40>)
 8006a24:	f015 fa42 	bl	801beac <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 8006a28:	4808      	ldr	r0, [pc, #32]	; (8006a4c <myprintf+0x40>)
 8006a2a:	f7f9 fbe1 	bl	80001f0 <strlen>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	f04f 33ff 	mov.w	r3, #4294967295
 8006a36:	4905      	ldr	r1, [pc, #20]	; (8006a4c <myprintf+0x40>)
 8006a38:	4805      	ldr	r0, [pc, #20]	; (8006a50 <myprintf+0x44>)
 8006a3a:	f006 fa5a 	bl	800cef2 <HAL_UART_Transmit>

}
 8006a3e:	bf00      	nop
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a48:	b004      	add	sp, #16
 8006a4a:	4770      	bx	lr
 8006a4c:	20000694 	.word	0x20000694
 8006a50:	20005eac 	.word	0x20005eac

08006a54 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b08a      	sub	sp, #40	; 0x28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8006a60:	2201      	movs	r2, #1
 8006a62:	4932      	ldr	r1, [pc, #200]	; (8006b2c <sd_init_dynamic_filename+0xd8>)
 8006a64:	4832      	ldr	r0, [pc, #200]	; (8006b30 <sd_init_dynamic_filename+0xdc>)
 8006a66:	f00c ff47 	bl	80138f8 <f_mount>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8006a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d008      	beq.n	8006a8a <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8006a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	482d      	ldr	r0, [pc, #180]	; (8006b34 <sd_init_dynamic_filename+0xe0>)
 8006a80:	f7ff ffc4 	bl	8006a0c <myprintf>
		return fres;
 8006a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a88:	e04b      	b.n	8006b22 <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8006a8e:	f107 0320 	add.w	r3, r7, #32
 8006a92:	461a      	mov	r2, r3
 8006a94:	68f9      	ldr	r1, [r7, #12]
 8006a96:	4825      	ldr	r0, [pc, #148]	; (8006b2c <sd_init_dynamic_filename+0xd8>)
 8006a98:	f000 f89c 	bl	8006bd4 <scan_files>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	f107 0310 	add.w	r3, r7, #16
 8006aaa:	4923      	ldr	r1, [pc, #140]	; (8006b38 <sd_init_dynamic_filename+0xe4>)
 8006aac:	4618      	mov	r0, r3
 8006aae:	f014 f9eb 	bl	801ae88 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8006ab2:	f107 0310 	add.w	r3, r7, #16
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f014 fa76 	bl	801afaa <strcpy>
 8006abe:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8006ac0:	f107 0310 	add.w	r3, r7, #16
 8006ac4:	221a      	movs	r2, #26
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	481c      	ldr	r0, [pc, #112]	; (8006b3c <sd_init_dynamic_filename+0xe8>)
 8006aca:	f00c ff79 	bl	80139c0 <f_open>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8006ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d11a      	bne.n	8006b12 <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8006adc:	4818      	ldr	r0, [pc, #96]	; (8006b40 <sd_init_dynamic_filename+0xec>)
 8006ade:	f7ff ff95 	bl	8006a0c <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8006ae2:	4b16      	ldr	r3, [pc, #88]	; (8006b3c <sd_init_dynamic_filename+0xe8>)
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4814      	ldr	r0, [pc, #80]	; (8006b3c <sd_init_dynamic_filename+0xe8>)
 8006aea:	f00d fb8a 	bl	8014202 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8006aee:	4915      	ldr	r1, [pc, #84]	; (8006b44 <sd_init_dynamic_filename+0xf0>)
 8006af0:	4815      	ldr	r0, [pc, #84]	; (8006b48 <sd_init_dynamic_filename+0xf4>)
 8006af2:	f014 f9c9 	bl	801ae88 <siprintf>
	sd_write(&fil, msg_buffer);
 8006af6:	4914      	ldr	r1, [pc, #80]	; (8006b48 <sd_init_dynamic_filename+0xf4>)
 8006af8:	4810      	ldr	r0, [pc, #64]	; (8006b3c <sd_init_dynamic_filename+0xe8>)
 8006afa:	f000 f841 	bl	8006b80 <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	480e      	ldr	r0, [pc, #56]	; (8006b3c <sd_init_dynamic_filename+0xe8>)
 8006b02:	f000 f83d 	bl	8006b80 <sd_write>
	f_close(&fil);
 8006b06:	480d      	ldr	r0, [pc, #52]	; (8006b3c <sd_init_dynamic_filename+0xe8>)
 8006b08:	f00d fb4c 	bl	80141a4 <f_close>

	return fres;
 8006b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b10:	e007      	b.n	8006b22 <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8006b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b16:	4619      	mov	r1, r3
 8006b18:	480c      	ldr	r0, [pc, #48]	; (8006b4c <sd_init_dynamic_filename+0xf8>)
 8006b1a:	f7ff ff77 	bl	8006a0c <myprintf>
		return fres;
 8006b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3728      	adds	r7, #40	; 0x28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	08020914 	.word	0x08020914
 8006b30:	20006058 	.word	0x20006058
 8006b34:	08020918 	.word	0x08020918
 8006b38:	08020994 	.word	0x08020994
 8006b3c:	20006a5c 	.word	0x20006a5c
 8006b40:	08020930 	.word	0x08020930
 8006b44:	08020974 	.word	0x08020974
 8006b48:	20006e14 	.word	0x20006e14
 8006b4c:	08020960 	.word	0x08020960

08006b50 <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8006b58:	2212      	movs	r2, #18
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	4807      	ldr	r0, [pc, #28]	; (8006b7c <sd_open_file+0x2c>)
 8006b5e:	f00c ff2f 	bl	80139c0 <f_open>
 8006b62:	4603      	mov	r3, r0
 8006b64:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8006b66:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <sd_open_file+0x2c>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	4803      	ldr	r0, [pc, #12]	; (8006b7c <sd_open_file+0x2c>)
 8006b6e:	f00d fb48 	bl	8014202 <f_lseek>

	return fres;
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20006a5c 	.word	0x20006a5c

08006b80 <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8006b8a:	6838      	ldr	r0, [r7, #0]
 8006b8c:	f7f9 fb30 	bl	80001f0 <strlen>
 8006b90:	4602      	mov	r2, r0
 8006b92:	f107 0308 	add.w	r3, r7, #8
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f00d f8d6 	bl	8013d4a <f_write>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d107      	bne.n	8006bb8 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4619      	mov	r1, r3
 8006bac:	4807      	ldr	r0, [pc, #28]	; (8006bcc <sd_write+0x4c>)
 8006bae:	f7ff ff2d 	bl	8006a0c <myprintf>
		return bytesWrote;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	b25b      	sxtb	r3, r3
 8006bb6:	e004      	b.n	8006bc2 <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8006bb8:	4805      	ldr	r0, [pc, #20]	; (8006bd0 <sd_write+0x50>)
 8006bba:	f7ff ff27 	bl	8006a0c <myprintf>
		return -1;
 8006bbe:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	080209a0 	.word	0x080209a0
 8006bd0:	080209c4 	.word	0x080209c4

08006bd4 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8006bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bd6:	b099      	sub	sp, #100	; 0x64
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
 8006be0:	466b      	mov	r3, sp
 8006be2:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8006be4:	68b8      	ldr	r0, [r7, #8]
 8006be6:	f7f9 fb03 	bl	80001f0 <strlen>
 8006bea:	4603      	mov	r3, r0
 8006bec:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8006bf0:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8006bf4:	4623      	mov	r3, r4
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bfa:	b2e0      	uxtb	r0, r4
 8006bfc:	f04f 0100 	mov.w	r1, #0
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	f04f 0300 	mov.w	r3, #0
 8006c08:	00cb      	lsls	r3, r1, #3
 8006c0a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006c0e:	00c2      	lsls	r2, r0, #3
 8006c10:	b2e0      	uxtb	r0, r4
 8006c12:	f04f 0100 	mov.w	r1, #0
 8006c16:	f04f 0200 	mov.w	r2, #0
 8006c1a:	f04f 0300 	mov.w	r3, #0
 8006c1e:	00cb      	lsls	r3, r1, #3
 8006c20:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006c24:	00c2      	lsls	r2, r0, #3
 8006c26:	4623      	mov	r3, r4
 8006c28:	3307      	adds	r3, #7
 8006c2a:	08db      	lsrs	r3, r3, #3
 8006c2c:	00db      	lsls	r3, r3, #3
 8006c2e:	ebad 0d03 	sub.w	sp, sp, r3
 8006c32:	466b      	mov	r3, sp
 8006c34:	3300      	adds	r3, #0
 8006c36:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8006c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	68b8      	ldr	r0, [r7, #8]
 8006c3e:	f000 f8ff 	bl	8006e40 <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8006c48:	2300      	movs	r3, #0
 8006c4a:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8006c4c:	f107 0318 	add.w	r3, r7, #24
 8006c50:	68f9      	ldr	r1, [r7, #12]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f00d fd28 	bl	80146a8 <f_opendir>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8006c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d16c      	bne.n	8006d40 <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8006c66:	f107 0318 	add.w	r3, r7, #24
 8006c6a:	4939      	ldr	r1, [pc, #228]	; (8006d50 <scan_files+0x17c>)
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f00d fdbf 	bl	80147f0 <f_readdir>
 8006c72:	4603      	mov	r3, r0
 8006c74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8006c78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d15a      	bne.n	8006d36 <scan_files+0x162>
 8006c80:	4b33      	ldr	r3, [pc, #204]	; (8006d50 <scan_files+0x17c>)
 8006c82:	7a5b      	ldrb	r3, [r3, #9]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d056      	beq.n	8006d36 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8006c88:	4b31      	ldr	r3, [pc, #196]	; (8006d50 <scan_files+0x17c>)
 8006c8a:	7a1b      	ldrb	r3, [r3, #8]
 8006c8c:	f003 0310 	and.w	r3, r3, #16
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d14e      	bne.n	8006d32 <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8006c94:	466b      	mov	r3, sp
 8006c96:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8006c98:	482e      	ldr	r0, [pc, #184]	; (8006d54 <scan_files+0x180>)
 8006c9a:	f7f9 faa9 	bl	80001f0 <strlen>
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	4623      	mov	r3, r4
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f04f 0100 	mov.w	r1, #0
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	f04f 0300 	mov.w	r3, #0
 8006cb4:	00cb      	lsls	r3, r1, #3
 8006cb6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006cba:	00c2      	lsls	r2, r0, #3
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f04f 0100 	mov.w	r1, #0
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	00cb      	lsls	r3, r1, #3
 8006ccc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006cd0:	00c2      	lsls	r2, r0, #3
 8006cd2:	1de3      	adds	r3, r4, #7
 8006cd4:	08db      	lsrs	r3, r3, #3
 8006cd6:	00db      	lsls	r3, r3, #3
 8006cd8:	ebad 0d03 	sub.w	sp, sp, r3
 8006cdc:	466b      	mov	r3, sp
 8006cde:	3300      	adds	r3, #0
 8006ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8006ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	481b      	ldr	r0, [pc, #108]	; (8006d54 <scan_files+0x180>)
 8006ce8:	f000 f8aa 	bl	8006e40 <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8006cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cee:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4817      	ldr	r0, [pc, #92]	; (8006d54 <scan_files+0x180>)
 8006cf6:	f014 f960 	bl	801afba <strncmp>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8006d00:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d112      	bne.n	8006d2e <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8006d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d0a:	f107 0214 	add.w	r2, r7, #20
 8006d0e:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 f820 	bl	8006d58 <extract_filename_suffix>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d202      	bcs.n	8006d2e <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	46b5      	mov	sp, r6
 8006d30:	e799      	b.n	8006c66 <scan_files+0x92>
            	continue; // don't enter directory
 8006d32:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8006d34:	e797      	b.n	8006c66 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8006d36:	f107 0318 	add.w	r3, r7, #24
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f00d fd2d 	bl	801479a <f_closedir>
    }

    return res;
 8006d40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d44:	46ad      	mov	sp, r5
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3764      	adds	r7, #100	; 0x64
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000794 	.word	0x20000794
 8006d54:	2000079d 	.word	0x2000079d

08006d58 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8006d58:	b5b0      	push	{r4, r5, r7, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	460b      	mov	r3, r1
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	72fb      	strb	r3, [r7, #11]
 8006d66:	466b      	mov	r3, sp
 8006d68:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f7f9 fa40 	bl	80001f0 <strlen>
 8006d70:	4603      	mov	r3, r0
 8006d72:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8006d74:	2308      	movs	r3, #8
 8006d76:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8006d78:	7f7c      	ldrb	r4, [r7, #29]
 8006d7a:	4623      	mov	r3, r4
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	61bb      	str	r3, [r7, #24]
 8006d80:	b2e0      	uxtb	r0, r4
 8006d82:	f04f 0100 	mov.w	r1, #0
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	00cb      	lsls	r3, r1, #3
 8006d90:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006d94:	00c2      	lsls	r2, r0, #3
 8006d96:	b2e0      	uxtb	r0, r4
 8006d98:	f04f 0100 	mov.w	r1, #0
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	00cb      	lsls	r3, r1, #3
 8006da6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006daa:	00c2      	lsls	r2, r0, #3
 8006dac:	4623      	mov	r3, r4
 8006dae:	3307      	adds	r3, #7
 8006db0:	08db      	lsrs	r3, r3, #3
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	ebad 0d03 	sub.w	sp, sp, r3
 8006db8:	466b      	mov	r3, sp
 8006dba:	3300      	adds	r3, #0
 8006dbc:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	77fb      	strb	r3, [r7, #31]
 8006dc2:	e014      	b.n	8006dee <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8006dc4:	7afb      	ldrb	r3, [r7, #11]
 8006dc6:	1e5a      	subs	r2, r3, #1
 8006dc8:	7ffb      	ldrb	r3, [r7, #31]
 8006dca:	441a      	add	r2, r3
 8006dcc:	7fbb      	ldrb	r3, [r7, #30]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	da11      	bge.n	8006df8 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8006dd4:	7afa      	ldrb	r2, [r7, #11]
 8006dd6:	7ffb      	ldrb	r3, [r7, #31]
 8006dd8:	4413      	add	r3, r2
 8006dda:	461a      	mov	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	441a      	add	r2, r3
 8006de0:	7ffb      	ldrb	r3, [r7, #31]
 8006de2:	7811      	ldrb	r1, [r2, #0]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8006de8:	7ffb      	ldrb	r3, [r7, #31]
 8006dea:	3301      	adds	r3, #1
 8006dec:	77fb      	strb	r3, [r7, #31]
 8006dee:	7ffa      	ldrb	r2, [r7, #31]
 8006df0:	7f7b      	ldrb	r3, [r7, #29]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d3e6      	bcc.n	8006dc4 <extract_filename_suffix+0x6c>
 8006df6:	e000      	b.n	8006dfa <extract_filename_suffix+0xa2>
		}
		else break;
 8006df8:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f107 0110 	add.w	r1, r7, #16
 8006e00:	220a      	movs	r2, #10
 8006e02:	4618      	mov	r0, r3
 8006e04:	f014 ff9e 	bl	801bd44 <strtol>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d00a      	beq.n	8006e2e <extract_filename_suffix+0xd6>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e20:	d005      	beq.n	8006e2e <extract_filename_suffix+0xd6>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d101      	bne.n	8006e32 <extract_filename_suffix+0xda>
	{
		return 1;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <extract_filename_suffix+0xdc>
	}

	return 0;
 8006e32:	2300      	movs	r3, #0
 8006e34:	46ad      	mov	sp, r5
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006e40 <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 8006e40:	b590      	push	{r4, r7, lr}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	73fb      	strb	r3, [r7, #15]
 8006e4e:	e019      	b.n	8006e84 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	4413      	add	r3, r2
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	73bb      	strb	r3, [r7, #14]
 8006e5a:	7bbb      	ldrb	r3, [r7, #14]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	4a0f      	ldr	r2, [pc, #60]	; (8006e9c <str2upper+0x5c>)
 8006e60:	4413      	add	r3, r2
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	f003 0303 	and.w	r3, r3, #3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d102      	bne.n	8006e72 <str2upper+0x32>
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	3b20      	subs	r3, #32
 8006e70:	e000      	b.n	8006e74 <str2upper+0x34>
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	7bfa      	ldrb	r2, [r7, #15]
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	440a      	add	r2, r1
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	3301      	adds	r3, #1
 8006e82:	73fb      	strb	r3, [r7, #15]
 8006e84:	7bfc      	ldrb	r4, [r7, #15]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7f9 f9b2 	bl	80001f0 <strlen>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	429c      	cmp	r4, r3
 8006e90:	d3de      	bcc.n	8006e50 <str2upper+0x10>
	}
}
 8006e92:	bf00      	nop
 8006e94:	bf00      	nop
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd90      	pop	{r4, r7, pc}
 8006e9c:	08020d30 	.word	0x08020d30

08006ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ea4:	4b0e      	ldr	r3, [pc, #56]	; (8006ee0 <HAL_Init+0x40>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a0d      	ldr	r2, [pc, #52]	; (8006ee0 <HAL_Init+0x40>)
 8006eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <HAL_Init+0x40>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a0a      	ldr	r2, [pc, #40]	; (8006ee0 <HAL_Init+0x40>)
 8006eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ebc:	4b08      	ldr	r3, [pc, #32]	; (8006ee0 <HAL_Init+0x40>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a07      	ldr	r2, [pc, #28]	; (8006ee0 <HAL_Init+0x40>)
 8006ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ec8:	2003      	movs	r0, #3
 8006eca:	f000 fb92 	bl	80075f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006ece:	2000      	movs	r0, #0
 8006ed0:	f7fc f8a2 	bl	8003018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ed4:	f7fb fd66 	bl	80029a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	40023c00 	.word	0x40023c00

08006ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ee8:	4b06      	ldr	r3, [pc, #24]	; (8006f04 <HAL_IncTick+0x20>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	461a      	mov	r2, r3
 8006eee:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <HAL_IncTick+0x24>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	4a04      	ldr	r2, [pc, #16]	; (8006f08 <HAL_IncTick+0x24>)
 8006ef6:	6013      	str	r3, [r2, #0]
}
 8006ef8:	bf00      	nop
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	20000020 	.word	0x20000020
 8006f08:	200071fc 	.word	0x200071fc

08006f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8006f10:	4b03      	ldr	r3, [pc, #12]	; (8006f20 <HAL_GetTick+0x14>)
 8006f12:	681b      	ldr	r3, [r3, #0]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	200071fc 	.word	0x200071fc

08006f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f2c:	f7ff ffee 	bl	8006f0c <HAL_GetTick>
 8006f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3c:	d005      	beq.n	8006f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f3e:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <HAL_Delay+0x44>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f4a:	bf00      	nop
 8006f4c:	f7ff ffde 	bl	8006f0c <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d8f7      	bhi.n	8006f4c <HAL_Delay+0x28>
  {
  }
}
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000020 	.word	0x20000020

08006f6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e033      	b.n	8006fea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d109      	bne.n	8006f9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fb fd36 	bl	80029fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d118      	bne.n	8006fdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006fb2:	f023 0302 	bic.w	r3, r3, #2
 8006fb6:	f043 0202 	orr.w	r2, r3, #2
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f94a 	bl	8007258 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	f023 0303 	bic.w	r3, r3, #3
 8006fd2:	f043 0201 	orr.w	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	641a      	str	r2, [r3, #64]	; 0x40
 8006fda:	e001      	b.n	8006fe0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <HAL_ADC_ConfigChannel+0x1c>
 800700c:	2302      	movs	r3, #2
 800700e:	e113      	b.n	8007238 <HAL_ADC_ConfigChannel+0x244>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b09      	cmp	r3, #9
 800701e:	d925      	bls.n	800706c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68d9      	ldr	r1, [r3, #12]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	461a      	mov	r2, r3
 800702e:	4613      	mov	r3, r2
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	4413      	add	r3, r2
 8007034:	3b1e      	subs	r3, #30
 8007036:	2207      	movs	r2, #7
 8007038:	fa02 f303 	lsl.w	r3, r2, r3
 800703c:	43da      	mvns	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	400a      	ands	r2, r1
 8007044:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68d9      	ldr	r1, [r3, #12]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	4618      	mov	r0, r3
 8007058:	4603      	mov	r3, r0
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	4403      	add	r3, r0
 800705e:	3b1e      	subs	r3, #30
 8007060:	409a      	lsls	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	60da      	str	r2, [r3, #12]
 800706a:	e022      	b.n	80070b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6919      	ldr	r1, [r3, #16]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	461a      	mov	r2, r3
 800707a:	4613      	mov	r3, r2
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	4413      	add	r3, r2
 8007080:	2207      	movs	r2, #7
 8007082:	fa02 f303 	lsl.w	r3, r2, r3
 8007086:	43da      	mvns	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	400a      	ands	r2, r1
 800708e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6919      	ldr	r1, [r3, #16]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	4618      	mov	r0, r3
 80070a2:	4603      	mov	r3, r0
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	4403      	add	r3, r0
 80070a8:	409a      	lsls	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	2b06      	cmp	r3, #6
 80070b8:	d824      	bhi.n	8007104 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	3b05      	subs	r3, #5
 80070cc:	221f      	movs	r2, #31
 80070ce:	fa02 f303 	lsl.w	r3, r2, r3
 80070d2:	43da      	mvns	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	400a      	ands	r2, r1
 80070da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	4618      	mov	r0, r3
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	3b05      	subs	r3, #5
 80070f6:	fa00 f203 	lsl.w	r2, r0, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	635a      	str	r2, [r3, #52]	; 0x34
 8007102:	e04c      	b.n	800719e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	2b0c      	cmp	r3, #12
 800710a:	d824      	bhi.n	8007156 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	4613      	mov	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	3b23      	subs	r3, #35	; 0x23
 800711e:	221f      	movs	r2, #31
 8007120:	fa02 f303 	lsl.w	r3, r2, r3
 8007124:	43da      	mvns	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	400a      	ands	r2, r1
 800712c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	4618      	mov	r0, r3
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	3b23      	subs	r3, #35	; 0x23
 8007148:	fa00 f203 	lsl.w	r2, r0, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	631a      	str	r2, [r3, #48]	; 0x30
 8007154:	e023      	b.n	800719e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	4613      	mov	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	3b41      	subs	r3, #65	; 0x41
 8007168:	221f      	movs	r2, #31
 800716a:	fa02 f303 	lsl.w	r3, r2, r3
 800716e:	43da      	mvns	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	400a      	ands	r2, r1
 8007176:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	4618      	mov	r0, r3
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	4613      	mov	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	3b41      	subs	r3, #65	; 0x41
 8007192:	fa00 f203 	lsl.w	r2, r0, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800719e:	4b29      	ldr	r3, [pc, #164]	; (8007244 <HAL_ADC_ConfigChannel+0x250>)
 80071a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a28      	ldr	r2, [pc, #160]	; (8007248 <HAL_ADC_ConfigChannel+0x254>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d10f      	bne.n	80071cc <HAL_ADC_ConfigChannel+0x1d8>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b12      	cmp	r3, #18
 80071b2:	d10b      	bne.n	80071cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a1d      	ldr	r2, [pc, #116]	; (8007248 <HAL_ADC_ConfigChannel+0x254>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d12b      	bne.n	800722e <HAL_ADC_ConfigChannel+0x23a>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a1c      	ldr	r2, [pc, #112]	; (800724c <HAL_ADC_ConfigChannel+0x258>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d003      	beq.n	80071e8 <HAL_ADC_ConfigChannel+0x1f4>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b11      	cmp	r3, #17
 80071e6:	d122      	bne.n	800722e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a11      	ldr	r2, [pc, #68]	; (800724c <HAL_ADC_ConfigChannel+0x258>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d111      	bne.n	800722e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800720a:	4b11      	ldr	r3, [pc, #68]	; (8007250 <HAL_ADC_ConfigChannel+0x25c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a11      	ldr	r2, [pc, #68]	; (8007254 <HAL_ADC_ConfigChannel+0x260>)
 8007210:	fba2 2303 	umull	r2, r3, r2, r3
 8007214:	0c9a      	lsrs	r2, r3, #18
 8007216:	4613      	mov	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007220:	e002      	b.n	8007228 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	3b01      	subs	r3, #1
 8007226:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1f9      	bne.n	8007222 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	40012300 	.word	0x40012300
 8007248:	40012000 	.word	0x40012000
 800724c:	10000012 	.word	0x10000012
 8007250:	20000000 	.word	0x20000000
 8007254:	431bde83 	.word	0x431bde83

08007258 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007260:	4b79      	ldr	r3, [pc, #484]	; (8007448 <ADC_Init+0x1f0>)
 8007262:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	431a      	orrs	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800728c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6859      	ldr	r1, [r3, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	021a      	lsls	r2, r3, #8
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80072b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6859      	ldr	r1, [r3, #4]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689a      	ldr	r2, [r3, #8]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6899      	ldr	r1, [r3, #8]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ea:	4a58      	ldr	r2, [pc, #352]	; (800744c <ADC_Init+0x1f4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d022      	beq.n	8007336 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6899      	ldr	r1, [r3, #8]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6899      	ldr	r1, [r3, #8]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	609a      	str	r2, [r3, #8]
 8007334:	e00f      	b.n	8007356 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007344:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007354:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689a      	ldr	r2, [r3, #8]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0202 	bic.w	r2, r2, #2
 8007364:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6899      	ldr	r1, [r3, #8]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	7e1b      	ldrb	r3, [r3, #24]
 8007370:	005a      	lsls	r2, r3, #1
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01b      	beq.n	80073bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007392:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80073a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6859      	ldr	r1, [r3, #4]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	3b01      	subs	r3, #1
 80073b0:	035a      	lsls	r2, r3, #13
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	605a      	str	r2, [r3, #4]
 80073ba:	e007      	b.n	80073cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80073da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	051a      	lsls	r2, r3, #20
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6899      	ldr	r1, [r3, #8]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800740e:	025a      	lsls	r2, r3, #9
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007426:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6899      	ldr	r1, [r3, #8]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	029a      	lsls	r2, r3, #10
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	609a      	str	r2, [r3, #8]
}
 800743c:	bf00      	nop
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	40012300 	.word	0x40012300
 800744c:	0f000001 	.word	0x0f000001

08007450 <__NVIC_SetPriorityGrouping>:
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007460:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <__NVIC_SetPriorityGrouping+0x44>)
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800746c:	4013      	ands	r3, r2
 800746e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800747c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007482:	4a04      	ldr	r2, [pc, #16]	; (8007494 <__NVIC_SetPriorityGrouping+0x44>)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	60d3      	str	r3, [r2, #12]
}
 8007488:	bf00      	nop
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	e000ed00 	.word	0xe000ed00

08007498 <__NVIC_GetPriorityGrouping>:
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800749c:	4b04      	ldr	r3, [pc, #16]	; (80074b0 <__NVIC_GetPriorityGrouping+0x18>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	0a1b      	lsrs	r3, r3, #8
 80074a2:	f003 0307 	and.w	r3, r3, #7
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	e000ed00 	.word	0xe000ed00

080074b4 <__NVIC_EnableIRQ>:
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	4603      	mov	r3, r0
 80074bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	db0b      	blt.n	80074de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	f003 021f 	and.w	r2, r3, #31
 80074cc:	4907      	ldr	r1, [pc, #28]	; (80074ec <__NVIC_EnableIRQ+0x38>)
 80074ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074d2:	095b      	lsrs	r3, r3, #5
 80074d4:	2001      	movs	r0, #1
 80074d6:	fa00 f202 	lsl.w	r2, r0, r2
 80074da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	e000e100 	.word	0xe000e100

080074f0 <__NVIC_DisableIRQ>:
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	4603      	mov	r3, r0
 80074f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	db12      	blt.n	8007528 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	f003 021f 	and.w	r2, r3, #31
 8007508:	490a      	ldr	r1, [pc, #40]	; (8007534 <__NVIC_DisableIRQ+0x44>)
 800750a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800750e:	095b      	lsrs	r3, r3, #5
 8007510:	2001      	movs	r0, #1
 8007512:	fa00 f202 	lsl.w	r2, r0, r2
 8007516:	3320      	adds	r3, #32
 8007518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800751c:	f3bf 8f4f 	dsb	sy
}
 8007520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007522:	f3bf 8f6f 	isb	sy
}
 8007526:	bf00      	nop
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	e000e100 	.word	0xe000e100

08007538 <__NVIC_SetPriority>:
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	4603      	mov	r3, r0
 8007540:	6039      	str	r1, [r7, #0]
 8007542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007548:	2b00      	cmp	r3, #0
 800754a:	db0a      	blt.n	8007562 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	b2da      	uxtb	r2, r3
 8007550:	490c      	ldr	r1, [pc, #48]	; (8007584 <__NVIC_SetPriority+0x4c>)
 8007552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007556:	0112      	lsls	r2, r2, #4
 8007558:	b2d2      	uxtb	r2, r2
 800755a:	440b      	add	r3, r1
 800755c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007560:	e00a      	b.n	8007578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	b2da      	uxtb	r2, r3
 8007566:	4908      	ldr	r1, [pc, #32]	; (8007588 <__NVIC_SetPriority+0x50>)
 8007568:	79fb      	ldrb	r3, [r7, #7]
 800756a:	f003 030f 	and.w	r3, r3, #15
 800756e:	3b04      	subs	r3, #4
 8007570:	0112      	lsls	r2, r2, #4
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	440b      	add	r3, r1
 8007576:	761a      	strb	r2, [r3, #24]
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	e000e100 	.word	0xe000e100
 8007588:	e000ed00 	.word	0xe000ed00

0800758c <NVIC_EncodePriority>:
{
 800758c:	b480      	push	{r7}
 800758e:	b089      	sub	sp, #36	; 0x24
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	f1c3 0307 	rsb	r3, r3, #7
 80075a6:	2b04      	cmp	r3, #4
 80075a8:	bf28      	it	cs
 80075aa:	2304      	movcs	r3, #4
 80075ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	3304      	adds	r3, #4
 80075b2:	2b06      	cmp	r3, #6
 80075b4:	d902      	bls.n	80075bc <NVIC_EncodePriority+0x30>
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	3b03      	subs	r3, #3
 80075ba:	e000      	b.n	80075be <NVIC_EncodePriority+0x32>
 80075bc:	2300      	movs	r3, #0
 80075be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075c0:	f04f 32ff 	mov.w	r2, #4294967295
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ca:	43da      	mvns	r2, r3
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	401a      	ands	r2, r3
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075d4:	f04f 31ff 	mov.w	r1, #4294967295
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	fa01 f303 	lsl.w	r3, r1, r3
 80075de:	43d9      	mvns	r1, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075e4:	4313      	orrs	r3, r2
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3724      	adds	r7, #36	; 0x24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7ff ff28 	bl	8007450 <__NVIC_SetPriorityGrouping>
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	4603      	mov	r3, r0
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007616:	2300      	movs	r3, #0
 8007618:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800761a:	f7ff ff3d 	bl	8007498 <__NVIC_GetPriorityGrouping>
 800761e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	6978      	ldr	r0, [r7, #20]
 8007626:	f7ff ffb1 	bl	800758c <NVIC_EncodePriority>
 800762a:	4602      	mov	r2, r0
 800762c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007630:	4611      	mov	r1, r2
 8007632:	4618      	mov	r0, r3
 8007634:	f7ff ff80 	bl	8007538 <__NVIC_SetPriority>
}
 8007638:	bf00      	nop
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800764a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800764e:	4618      	mov	r0, r3
 8007650:	f7ff ff30 	bl	80074b4 <__NVIC_EnableIRQ>
}
 8007654:	bf00      	nop
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	4603      	mov	r3, r0
 8007664:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800766a:	4618      	mov	r0, r3
 800766c:	f7ff ff40 	bl	80074f0 <__NVIC_DisableIRQ>
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007678:	b480      	push	{r7}
 800767a:	b089      	sub	sp, #36	; 0x24
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007682:	2300      	movs	r3, #0
 8007684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007686:	2300      	movs	r3, #0
 8007688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800768a:	2300      	movs	r3, #0
 800768c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800768e:	2300      	movs	r3, #0
 8007690:	61fb      	str	r3, [r7, #28]
 8007692:	e177      	b.n	8007984 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007694:	2201      	movs	r2, #1
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	fa02 f303 	lsl.w	r3, r2, r3
 800769c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	4013      	ands	r3, r2
 80076a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	f040 8166 	bne.w	800797e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f003 0303 	and.w	r3, r3, #3
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d005      	beq.n	80076ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d130      	bne.n	800772c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	2203      	movs	r2, #3
 80076d6:	fa02 f303 	lsl.w	r3, r2, r3
 80076da:	43db      	mvns	r3, r3
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	4013      	ands	r3, r2
 80076e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	fa02 f303 	lsl.w	r3, r2, r3
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007700:	2201      	movs	r2, #1
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	fa02 f303 	lsl.w	r3, r2, r3
 8007708:	43db      	mvns	r3, r3
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	4013      	ands	r3, r2
 800770e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	091b      	lsrs	r3, r3, #4
 8007716:	f003 0201 	and.w	r2, r3, #1
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	fa02 f303 	lsl.w	r3, r2, r3
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	4313      	orrs	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f003 0303 	and.w	r3, r3, #3
 8007734:	2b03      	cmp	r3, #3
 8007736:	d017      	beq.n	8007768 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	005b      	lsls	r3, r3, #1
 8007742:	2203      	movs	r2, #3
 8007744:	fa02 f303 	lsl.w	r3, r2, r3
 8007748:	43db      	mvns	r3, r3
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	4013      	ands	r3, r2
 800774e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	fa02 f303 	lsl.w	r3, r2, r3
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	4313      	orrs	r3, r2
 8007760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f003 0303 	and.w	r3, r3, #3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d123      	bne.n	80077bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	08da      	lsrs	r2, r3, #3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	3208      	adds	r2, #8
 800777c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007780:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	f003 0307 	and.w	r3, r3, #7
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	220f      	movs	r2, #15
 800778c:	fa02 f303 	lsl.w	r3, r2, r3
 8007790:	43db      	mvns	r3, r3
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	4013      	ands	r3, r2
 8007796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	691a      	ldr	r2, [r3, #16]
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	fa02 f303 	lsl.w	r3, r2, r3
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	08da      	lsrs	r2, r3, #3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3208      	adds	r2, #8
 80077b6:	69b9      	ldr	r1, [r7, #24]
 80077b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	2203      	movs	r2, #3
 80077c8:	fa02 f303 	lsl.w	r3, r2, r3
 80077cc:	43db      	mvns	r3, r3
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	4013      	ands	r3, r2
 80077d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f003 0203 	and.w	r2, r3, #3
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	fa02 f303 	lsl.w	r3, r2, r3
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 80c0 	beq.w	800797e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077fe:	2300      	movs	r3, #0
 8007800:	60fb      	str	r3, [r7, #12]
 8007802:	4b66      	ldr	r3, [pc, #408]	; (800799c <HAL_GPIO_Init+0x324>)
 8007804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007806:	4a65      	ldr	r2, [pc, #404]	; (800799c <HAL_GPIO_Init+0x324>)
 8007808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800780c:	6453      	str	r3, [r2, #68]	; 0x44
 800780e:	4b63      	ldr	r3, [pc, #396]	; (800799c <HAL_GPIO_Init+0x324>)
 8007810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800781a:	4a61      	ldr	r2, [pc, #388]	; (80079a0 <HAL_GPIO_Init+0x328>)
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	089b      	lsrs	r3, r3, #2
 8007820:	3302      	adds	r3, #2
 8007822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	220f      	movs	r2, #15
 8007832:	fa02 f303 	lsl.w	r3, r2, r3
 8007836:	43db      	mvns	r3, r3
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	4013      	ands	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a58      	ldr	r2, [pc, #352]	; (80079a4 <HAL_GPIO_Init+0x32c>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d037      	beq.n	80078b6 <HAL_GPIO_Init+0x23e>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a57      	ldr	r2, [pc, #348]	; (80079a8 <HAL_GPIO_Init+0x330>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d031      	beq.n	80078b2 <HAL_GPIO_Init+0x23a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a56      	ldr	r2, [pc, #344]	; (80079ac <HAL_GPIO_Init+0x334>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d02b      	beq.n	80078ae <HAL_GPIO_Init+0x236>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a55      	ldr	r2, [pc, #340]	; (80079b0 <HAL_GPIO_Init+0x338>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d025      	beq.n	80078aa <HAL_GPIO_Init+0x232>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a54      	ldr	r2, [pc, #336]	; (80079b4 <HAL_GPIO_Init+0x33c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d01f      	beq.n	80078a6 <HAL_GPIO_Init+0x22e>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a53      	ldr	r2, [pc, #332]	; (80079b8 <HAL_GPIO_Init+0x340>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d019      	beq.n	80078a2 <HAL_GPIO_Init+0x22a>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a52      	ldr	r2, [pc, #328]	; (80079bc <HAL_GPIO_Init+0x344>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d013      	beq.n	800789e <HAL_GPIO_Init+0x226>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a51      	ldr	r2, [pc, #324]	; (80079c0 <HAL_GPIO_Init+0x348>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d00d      	beq.n	800789a <HAL_GPIO_Init+0x222>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a50      	ldr	r2, [pc, #320]	; (80079c4 <HAL_GPIO_Init+0x34c>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d007      	beq.n	8007896 <HAL_GPIO_Init+0x21e>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a4f      	ldr	r2, [pc, #316]	; (80079c8 <HAL_GPIO_Init+0x350>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d101      	bne.n	8007892 <HAL_GPIO_Init+0x21a>
 800788e:	2309      	movs	r3, #9
 8007890:	e012      	b.n	80078b8 <HAL_GPIO_Init+0x240>
 8007892:	230a      	movs	r3, #10
 8007894:	e010      	b.n	80078b8 <HAL_GPIO_Init+0x240>
 8007896:	2308      	movs	r3, #8
 8007898:	e00e      	b.n	80078b8 <HAL_GPIO_Init+0x240>
 800789a:	2307      	movs	r3, #7
 800789c:	e00c      	b.n	80078b8 <HAL_GPIO_Init+0x240>
 800789e:	2306      	movs	r3, #6
 80078a0:	e00a      	b.n	80078b8 <HAL_GPIO_Init+0x240>
 80078a2:	2305      	movs	r3, #5
 80078a4:	e008      	b.n	80078b8 <HAL_GPIO_Init+0x240>
 80078a6:	2304      	movs	r3, #4
 80078a8:	e006      	b.n	80078b8 <HAL_GPIO_Init+0x240>
 80078aa:	2303      	movs	r3, #3
 80078ac:	e004      	b.n	80078b8 <HAL_GPIO_Init+0x240>
 80078ae:	2302      	movs	r3, #2
 80078b0:	e002      	b.n	80078b8 <HAL_GPIO_Init+0x240>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e000      	b.n	80078b8 <HAL_GPIO_Init+0x240>
 80078b6:	2300      	movs	r3, #0
 80078b8:	69fa      	ldr	r2, [r7, #28]
 80078ba:	f002 0203 	and.w	r2, r2, #3
 80078be:	0092      	lsls	r2, r2, #2
 80078c0:	4093      	lsls	r3, r2
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078c8:	4935      	ldr	r1, [pc, #212]	; (80079a0 <HAL_GPIO_Init+0x328>)
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	089b      	lsrs	r3, r3, #2
 80078ce:	3302      	adds	r3, #2
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80078d6:	4b3d      	ldr	r3, [pc, #244]	; (80079cc <HAL_GPIO_Init+0x354>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	43db      	mvns	r3, r3
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	4013      	ands	r3, r2
 80078e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d003      	beq.n	80078fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80078fa:	4a34      	ldr	r2, [pc, #208]	; (80079cc <HAL_GPIO_Init+0x354>)
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007900:	4b32      	ldr	r3, [pc, #200]	; (80079cc <HAL_GPIO_Init+0x354>)
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	43db      	mvns	r3, r3
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	4013      	ands	r3, r2
 800790e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	4313      	orrs	r3, r2
 8007922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007924:	4a29      	ldr	r2, [pc, #164]	; (80079cc <HAL_GPIO_Init+0x354>)
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800792a:	4b28      	ldr	r3, [pc, #160]	; (80079cc <HAL_GPIO_Init+0x354>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	43db      	mvns	r3, r3
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	4013      	ands	r3, r2
 8007938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d003      	beq.n	800794e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007946:	69ba      	ldr	r2, [r7, #24]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	4313      	orrs	r3, r2
 800794c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800794e:	4a1f      	ldr	r2, [pc, #124]	; (80079cc <HAL_GPIO_Init+0x354>)
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007954:	4b1d      	ldr	r3, [pc, #116]	; (80079cc <HAL_GPIO_Init+0x354>)
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	43db      	mvns	r3, r3
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	4013      	ands	r3, r2
 8007962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	4313      	orrs	r3, r2
 8007976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007978:	4a14      	ldr	r2, [pc, #80]	; (80079cc <HAL_GPIO_Init+0x354>)
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	3301      	adds	r3, #1
 8007982:	61fb      	str	r3, [r7, #28]
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	2b0f      	cmp	r3, #15
 8007988:	f67f ae84 	bls.w	8007694 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800798c:	bf00      	nop
 800798e:	bf00      	nop
 8007990:	3724      	adds	r7, #36	; 0x24
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	40023800 	.word	0x40023800
 80079a0:	40013800 	.word	0x40013800
 80079a4:	40020000 	.word	0x40020000
 80079a8:	40020400 	.word	0x40020400
 80079ac:	40020800 	.word	0x40020800
 80079b0:	40020c00 	.word	0x40020c00
 80079b4:	40021000 	.word	0x40021000
 80079b8:	40021400 	.word	0x40021400
 80079bc:	40021800 	.word	0x40021800
 80079c0:	40021c00 	.word	0x40021c00
 80079c4:	40022000 	.word	0x40022000
 80079c8:	40022400 	.word	0x40022400
 80079cc:	40013c00 	.word	0x40013c00

080079d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691a      	ldr	r2, [r3, #16]
 80079e0:	887b      	ldrh	r3, [r7, #2]
 80079e2:	4013      	ands	r3, r2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73fb      	strb	r3, [r7, #15]
 80079ec:	e001      	b.n	80079f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	807b      	strh	r3, [r7, #2]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a10:	787b      	ldrb	r3, [r7, #1]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a16:	887a      	ldrh	r2, [r7, #2]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007a1c:	e003      	b.n	8007a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007a1e:	887b      	ldrh	r3, [r7, #2]
 8007a20:	041a      	lsls	r2, r3, #16
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	619a      	str	r2, [r3, #24]
}
 8007a26:	bf00      	nop
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
	...

08007a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007a3e:	4b08      	ldr	r3, [pc, #32]	; (8007a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a40:	695a      	ldr	r2, [r3, #20]
 8007a42:	88fb      	ldrh	r3, [r7, #6]
 8007a44:	4013      	ands	r3, r2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d006      	beq.n	8007a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007a4a:	4a05      	ldr	r2, [pc, #20]	; (8007a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a4c:	88fb      	ldrh	r3, [r7, #6]
 8007a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007a50:	88fb      	ldrh	r3, [r7, #6]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fb ff40 	bl	80038d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007a58:	bf00      	nop
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	40013c00 	.word	0x40013c00

08007a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e12b      	b.n	8007cce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7fa fffa 	bl	8002a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2224      	movs	r2, #36	; 0x24
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 0201 	bic.w	r2, r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ab6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ac6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007ac8:	f002 fe48 	bl	800a75c <HAL_RCC_GetPCLK1Freq>
 8007acc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	4a81      	ldr	r2, [pc, #516]	; (8007cd8 <HAL_I2C_Init+0x274>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d807      	bhi.n	8007ae8 <HAL_I2C_Init+0x84>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4a80      	ldr	r2, [pc, #512]	; (8007cdc <HAL_I2C_Init+0x278>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	bf94      	ite	ls
 8007ae0:	2301      	movls	r3, #1
 8007ae2:	2300      	movhi	r3, #0
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	e006      	b.n	8007af6 <HAL_I2C_Init+0x92>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4a7d      	ldr	r2, [pc, #500]	; (8007ce0 <HAL_I2C_Init+0x27c>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	bf94      	ite	ls
 8007af0:	2301      	movls	r3, #1
 8007af2:	2300      	movhi	r3, #0
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e0e7      	b.n	8007cce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4a78      	ldr	r2, [pc, #480]	; (8007ce4 <HAL_I2C_Init+0x280>)
 8007b02:	fba2 2303 	umull	r2, r3, r2, r3
 8007b06:	0c9b      	lsrs	r3, r3, #18
 8007b08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	4a6a      	ldr	r2, [pc, #424]	; (8007cd8 <HAL_I2C_Init+0x274>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d802      	bhi.n	8007b38 <HAL_I2C_Init+0xd4>
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	3301      	adds	r3, #1
 8007b36:	e009      	b.n	8007b4c <HAL_I2C_Init+0xe8>
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007b3e:	fb02 f303 	mul.w	r3, r2, r3
 8007b42:	4a69      	ldr	r2, [pc, #420]	; (8007ce8 <HAL_I2C_Init+0x284>)
 8007b44:	fba2 2303 	umull	r2, r3, r2, r3
 8007b48:	099b      	lsrs	r3, r3, #6
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	6812      	ldr	r2, [r2, #0]
 8007b50:	430b      	orrs	r3, r1
 8007b52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007b5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	495c      	ldr	r1, [pc, #368]	; (8007cd8 <HAL_I2C_Init+0x274>)
 8007b68:	428b      	cmp	r3, r1
 8007b6a:	d819      	bhi.n	8007ba0 <HAL_I2C_Init+0x13c>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	1e59      	subs	r1, r3, #1
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b7a:	1c59      	adds	r1, r3, #1
 8007b7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007b80:	400b      	ands	r3, r1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <HAL_I2C_Init+0x138>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	1e59      	subs	r1, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	005b      	lsls	r3, r3, #1
 8007b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b94:	3301      	adds	r3, #1
 8007b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b9a:	e051      	b.n	8007c40 <HAL_I2C_Init+0x1dc>
 8007b9c:	2304      	movs	r3, #4
 8007b9e:	e04f      	b.n	8007c40 <HAL_I2C_Init+0x1dc>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d111      	bne.n	8007bcc <HAL_I2C_Init+0x168>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	1e58      	subs	r0, r3, #1
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6859      	ldr	r1, [r3, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	005b      	lsls	r3, r3, #1
 8007bb4:	440b      	add	r3, r1
 8007bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bba:	3301      	adds	r3, #1
 8007bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	bf0c      	ite	eq
 8007bc4:	2301      	moveq	r3, #1
 8007bc6:	2300      	movne	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	e012      	b.n	8007bf2 <HAL_I2C_Init+0x18e>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	1e58      	subs	r0, r3, #1
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6859      	ldr	r1, [r3, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	440b      	add	r3, r1
 8007bda:	0099      	lsls	r1, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8007be2:	3301      	adds	r3, #1
 8007be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	bf0c      	ite	eq
 8007bec:	2301      	moveq	r3, #1
 8007bee:	2300      	movne	r3, #0
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <HAL_I2C_Init+0x196>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e022      	b.n	8007c40 <HAL_I2C_Init+0x1dc>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10e      	bne.n	8007c20 <HAL_I2C_Init+0x1bc>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	1e58      	subs	r0, r3, #1
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6859      	ldr	r1, [r3, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	440b      	add	r3, r1
 8007c10:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c14:	3301      	adds	r3, #1
 8007c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c1e:	e00f      	b.n	8007c40 <HAL_I2C_Init+0x1dc>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	1e58      	subs	r0, r3, #1
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6859      	ldr	r1, [r3, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	440b      	add	r3, r1
 8007c2e:	0099      	lsls	r1, r3, #2
 8007c30:	440b      	add	r3, r1
 8007c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c36:	3301      	adds	r3, #1
 8007c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c40:	6879      	ldr	r1, [r7, #4]
 8007c42:	6809      	ldr	r1, [r1, #0]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	69da      	ldr	r2, [r3, #28]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	430a      	orrs	r2, r1
 8007c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007c6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	6911      	ldr	r1, [r2, #16]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	68d2      	ldr	r2, [r2, #12]
 8007c7a:	4311      	orrs	r1, r2
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	6812      	ldr	r2, [r2, #0]
 8007c80:	430b      	orrs	r3, r1
 8007c82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	695a      	ldr	r2, [r3, #20]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	431a      	orrs	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	000186a0 	.word	0x000186a0
 8007cdc:	001e847f 	.word	0x001e847f
 8007ce0:	003d08ff 	.word	0x003d08ff
 8007ce4:	431bde83 	.word	0x431bde83
 8007ce8:	10624dd3 	.word	0x10624dd3

08007cec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b088      	sub	sp, #32
 8007cf0:	af02      	add	r7, sp, #8
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	4608      	mov	r0, r1
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	817b      	strh	r3, [r7, #10]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	813b      	strh	r3, [r7, #8]
 8007d02:	4613      	mov	r3, r2
 8007d04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d06:	f7ff f901 	bl	8006f0c <HAL_GetTick>
 8007d0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b20      	cmp	r3, #32
 8007d16:	f040 80d9 	bne.w	8007ecc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	2319      	movs	r3, #25
 8007d20:	2201      	movs	r2, #1
 8007d22:	496d      	ldr	r1, [pc, #436]	; (8007ed8 <HAL_I2C_Mem_Write+0x1ec>)
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 fcb5 	bl	8008694 <I2C_WaitOnFlagUntilTimeout>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007d30:	2302      	movs	r3, #2
 8007d32:	e0cc      	b.n	8007ece <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d101      	bne.n	8007d42 <HAL_I2C_Mem_Write+0x56>
 8007d3e:	2302      	movs	r3, #2
 8007d40:	e0c5      	b.n	8007ece <HAL_I2C_Mem_Write+0x1e2>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d007      	beq.n	8007d68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0201 	orr.w	r2, r2, #1
 8007d66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2221      	movs	r2, #33	; 0x21
 8007d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2240      	movs	r2, #64	; 0x40
 8007d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a3a      	ldr	r2, [r7, #32]
 8007d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4a4d      	ldr	r2, [pc, #308]	; (8007edc <HAL_I2C_Mem_Write+0x1f0>)
 8007da8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007daa:	88f8      	ldrh	r0, [r7, #6]
 8007dac:	893a      	ldrh	r2, [r7, #8]
 8007dae:	8979      	ldrh	r1, [r7, #10]
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	9301      	str	r3, [sp, #4]
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	4603      	mov	r3, r0
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 faec 	bl	8008398 <I2C_RequestMemoryWrite>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d052      	beq.n	8007e6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e081      	b.n	8007ece <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 fd36 	bl	8008840 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00d      	beq.n	8007df6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	d107      	bne.n	8007df2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007df0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e06b      	b.n	8007ece <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	781a      	ldrb	r2, [r3, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e10:	3b01      	subs	r3, #1
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b04      	cmp	r3, #4
 8007e32:	d11b      	bne.n	8007e6c <HAL_I2C_Mem_Write+0x180>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d017      	beq.n	8007e6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e40:	781a      	ldrb	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e56:	3b01      	subs	r3, #1
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	3b01      	subs	r3, #1
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1aa      	bne.n	8007dca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 fd22 	bl	80088c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00d      	beq.n	8007ea0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d107      	bne.n	8007e9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e016      	b.n	8007ece <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	e000      	b.n	8007ece <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007ecc:	2302      	movs	r3, #2
  }
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3718      	adds	r7, #24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	00100002 	.word	0x00100002
 8007edc:	ffff0000 	.word	0xffff0000

08007ee0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08c      	sub	sp, #48	; 0x30
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	4608      	mov	r0, r1
 8007eea:	4611      	mov	r1, r2
 8007eec:	461a      	mov	r2, r3
 8007eee:	4603      	mov	r3, r0
 8007ef0:	817b      	strh	r3, [r7, #10]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	813b      	strh	r3, [r7, #8]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007efa:	f7ff f807 	bl	8006f0c <HAL_GetTick>
 8007efe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	f040 8208 	bne.w	800831e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	2319      	movs	r3, #25
 8007f14:	2201      	movs	r2, #1
 8007f16:	497b      	ldr	r1, [pc, #492]	; (8008104 <HAL_I2C_Mem_Read+0x224>)
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 fbbb 	bl	8008694 <I2C_WaitOnFlagUntilTimeout>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007f24:	2302      	movs	r3, #2
 8007f26:	e1fb      	b.n	8008320 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d101      	bne.n	8007f36 <HAL_I2C_Mem_Read+0x56>
 8007f32:	2302      	movs	r3, #2
 8007f34:	e1f4      	b.n	8008320 <HAL_I2C_Mem_Read+0x440>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d007      	beq.n	8007f5c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0201 	orr.w	r2, r2, #1
 8007f5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2222      	movs	r2, #34	; 0x22
 8007f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2240      	movs	r2, #64	; 0x40
 8007f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	4a5b      	ldr	r2, [pc, #364]	; (8008108 <HAL_I2C_Mem_Read+0x228>)
 8007f9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f9e:	88f8      	ldrh	r0, [r7, #6]
 8007fa0:	893a      	ldrh	r2, [r7, #8]
 8007fa2:	8979      	ldrh	r1, [r7, #10]
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	9301      	str	r3, [sp, #4]
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	4603      	mov	r3, r0
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 fa88 	bl	80084c4 <I2C_RequestMemoryRead>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e1b0      	b.n	8008320 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d113      	bne.n	8007fee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	623b      	str	r3, [r7, #32]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	623b      	str	r3, [r7, #32]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	623b      	str	r3, [r7, #32]
 8007fda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	e184      	b.n	80082f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d11b      	bne.n	800802e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008006:	2300      	movs	r3, #0
 8008008:	61fb      	str	r3, [r7, #28]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	61fb      	str	r3, [r7, #28]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	61fb      	str	r3, [r7, #28]
 800801a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	e164      	b.n	80082f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008032:	2b02      	cmp	r3, #2
 8008034:	d11b      	bne.n	800806e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008044:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008054:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008056:	2300      	movs	r3, #0
 8008058:	61bb      	str	r3, [r7, #24]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	61bb      	str	r3, [r7, #24]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	61bb      	str	r3, [r7, #24]
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	e144      	b.n	80082f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800806e:	2300      	movs	r3, #0
 8008070:	617b      	str	r3, [r7, #20]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	617b      	str	r3, [r7, #20]
 8008082:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008084:	e138      	b.n	80082f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800808a:	2b03      	cmp	r3, #3
 800808c:	f200 80f1 	bhi.w	8008272 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008094:	2b01      	cmp	r3, #1
 8008096:	d123      	bne.n	80080e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800809a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 fc51 	bl	8008944 <I2C_WaitOnRXNEFlagUntilTimeout>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e139      	b.n	8008320 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	691a      	ldr	r2, [r3, #16]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	b2d2      	uxtb	r2, r2
 80080b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080de:	e10b      	b.n	80082f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d14e      	bne.n	8008186 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ee:	2200      	movs	r2, #0
 80080f0:	4906      	ldr	r1, [pc, #24]	; (800810c <HAL_I2C_Mem_Read+0x22c>)
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 face 	bl	8008694 <I2C_WaitOnFlagUntilTimeout>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d008      	beq.n	8008110 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e10e      	b.n	8008320 <HAL_I2C_Mem_Read+0x440>
 8008102:	bf00      	nop
 8008104:	00100002 	.word	0x00100002
 8008108:	ffff0000 	.word	0xffff0000
 800810c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800811e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	691a      	ldr	r2, [r3, #16]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	b2d2      	uxtb	r2, r2
 800812c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800813c:	3b01      	subs	r3, #1
 800813e:	b29a      	uxth	r2, r3
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008148:	b29b      	uxth	r3, r3
 800814a:	3b01      	subs	r3, #1
 800814c:	b29a      	uxth	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	691a      	ldr	r2, [r3, #16]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	b2d2      	uxtb	r2, r2
 800815e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800816e:	3b01      	subs	r3, #1
 8008170:	b29a      	uxth	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800817a:	b29b      	uxth	r3, r3
 800817c:	3b01      	subs	r3, #1
 800817e:	b29a      	uxth	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008184:	e0b8      	b.n	80082f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818c:	2200      	movs	r2, #0
 800818e:	4966      	ldr	r1, [pc, #408]	; (8008328 <HAL_I2C_Mem_Read+0x448>)
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 fa7f 	bl	8008694 <I2C_WaitOnFlagUntilTimeout>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e0bf      	b.n	8008320 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	691a      	ldr	r2, [r3, #16]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	b2d2      	uxtb	r2, r2
 80081bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081cc:	3b01      	subs	r3, #1
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d8:	b29b      	uxth	r3, r3
 80081da:	3b01      	subs	r3, #1
 80081dc:	b29a      	uxth	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e8:	2200      	movs	r2, #0
 80081ea:	494f      	ldr	r1, [pc, #316]	; (8008328 <HAL_I2C_Mem_Read+0x448>)
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 fa51 	bl	8008694 <I2C_WaitOnFlagUntilTimeout>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d001      	beq.n	80081fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e091      	b.n	8008320 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800820a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	691a      	ldr	r2, [r3, #16]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	b2d2      	uxtb	r2, r2
 8008218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008228:	3b01      	subs	r3, #1
 800822a:	b29a      	uxth	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008234:	b29b      	uxth	r3, r3
 8008236:	3b01      	subs	r3, #1
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	691a      	ldr	r2, [r3, #16]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	b2d2      	uxtb	r2, r2
 800824a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800825a:	3b01      	subs	r3, #1
 800825c:	b29a      	uxth	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008266:	b29b      	uxth	r3, r3
 8008268:	3b01      	subs	r3, #1
 800826a:	b29a      	uxth	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008270:	e042      	b.n	80082f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008274:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f000 fb64 	bl	8008944 <I2C_WaitOnRXNEFlagUntilTimeout>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e04c      	b.n	8008320 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	691a      	ldr	r2, [r3, #16]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	b2d2      	uxtb	r2, r2
 8008292:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a2:	3b01      	subs	r3, #1
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	3b01      	subs	r3, #1
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	f003 0304 	and.w	r3, r3, #4
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d118      	bne.n	80082f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	691a      	ldr	r2, [r3, #16]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	b2d2      	uxtb	r2, r2
 80082d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	1c5a      	adds	r2, r3, #1
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e2:	3b01      	subs	r3, #1
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	3b01      	subs	r3, #1
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f47f aec2 	bne.w	8008086 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2220      	movs	r2, #32
 8008306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	e000      	b.n	8008320 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800831e:	2302      	movs	r3, #2
  }
}
 8008320:	4618      	mov	r0, r3
 8008322:	3728      	adds	r7, #40	; 0x28
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	00010004 	.word	0x00010004

0800832c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b20      	cmp	r3, #32
 800833e:	d124      	bne.n	800838a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2228      	movs	r2, #40	; 0x28
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b01      	cmp	r3, #1
 8008354:	d007      	beq.n	8008366 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f042 0201 	orr.w	r2, r2, #1
 8008364:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008374:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008384:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	e000      	b.n	800838c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800838a:	2302      	movs	r3, #2
  }
}
 800838c:	4618      	mov	r0, r3
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af02      	add	r7, sp, #8
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	4608      	mov	r0, r1
 80083a2:	4611      	mov	r1, r2
 80083a4:	461a      	mov	r2, r3
 80083a6:	4603      	mov	r3, r0
 80083a8:	817b      	strh	r3, [r7, #10]
 80083aa:	460b      	mov	r3, r1
 80083ac:	813b      	strh	r3, [r7, #8]
 80083ae:	4613      	mov	r3, r2
 80083b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 f960 	bl	8008694 <I2C_WaitOnFlagUntilTimeout>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00d      	beq.n	80083f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083e8:	d103      	bne.n	80083f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e05f      	b.n	80084b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083f6:	897b      	ldrh	r3, [r7, #10]
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	461a      	mov	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008404:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	6a3a      	ldr	r2, [r7, #32]
 800840a:	492d      	ldr	r1, [pc, #180]	; (80084c0 <I2C_RequestMemoryWrite+0x128>)
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 f998 	bl	8008742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e04c      	b.n	80084b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008434:	6a39      	ldr	r1, [r7, #32]
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 fa02 	bl	8008840 <I2C_WaitOnTXEFlagUntilTimeout>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00d      	beq.n	800845e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008446:	2b04      	cmp	r3, #4
 8008448:	d107      	bne.n	800845a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008458:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e02b      	b.n	80084b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800845e:	88fb      	ldrh	r3, [r7, #6]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d105      	bne.n	8008470 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008464:	893b      	ldrh	r3, [r7, #8]
 8008466:	b2da      	uxtb	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	611a      	str	r2, [r3, #16]
 800846e:	e021      	b.n	80084b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008470:	893b      	ldrh	r3, [r7, #8]
 8008472:	0a1b      	lsrs	r3, r3, #8
 8008474:	b29b      	uxth	r3, r3
 8008476:	b2da      	uxtb	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800847e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008480:	6a39      	ldr	r1, [r7, #32]
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 f9dc 	bl	8008840 <I2C_WaitOnTXEFlagUntilTimeout>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00d      	beq.n	80084aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008492:	2b04      	cmp	r3, #4
 8008494:	d107      	bne.n	80084a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e005      	b.n	80084b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084aa:	893b      	ldrh	r3, [r7, #8]
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	00010002 	.word	0x00010002

080084c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b088      	sub	sp, #32
 80084c8:	af02      	add	r7, sp, #8
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	4608      	mov	r0, r1
 80084ce:	4611      	mov	r1, r2
 80084d0:	461a      	mov	r2, r3
 80084d2:	4603      	mov	r3, r0
 80084d4:	817b      	strh	r3, [r7, #10]
 80084d6:	460b      	mov	r3, r1
 80084d8:	813b      	strh	r3, [r7, #8]
 80084da:	4613      	mov	r3, r2
 80084dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	2200      	movs	r2, #0
 8008506:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f000 f8c2 	bl	8008694 <I2C_WaitOnFlagUntilTimeout>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00d      	beq.n	8008532 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008524:	d103      	bne.n	800852e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800852c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e0aa      	b.n	8008688 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008532:	897b      	ldrh	r3, [r7, #10]
 8008534:	b2db      	uxtb	r3, r3
 8008536:	461a      	mov	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008540:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	6a3a      	ldr	r2, [r7, #32]
 8008546:	4952      	ldr	r1, [pc, #328]	; (8008690 <I2C_RequestMemoryRead+0x1cc>)
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f000 f8fa 	bl	8008742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e097      	b.n	8008688 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008558:	2300      	movs	r3, #0
 800855a:	617b      	str	r3, [r7, #20]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	617b      	str	r3, [r7, #20]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	617b      	str	r3, [r7, #20]
 800856c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800856e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008570:	6a39      	ldr	r1, [r7, #32]
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 f964 	bl	8008840 <I2C_WaitOnTXEFlagUntilTimeout>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00d      	beq.n	800859a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	2b04      	cmp	r3, #4
 8008584:	d107      	bne.n	8008596 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008594:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e076      	b.n	8008688 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800859a:	88fb      	ldrh	r3, [r7, #6]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d105      	bne.n	80085ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085a0:	893b      	ldrh	r3, [r7, #8]
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	611a      	str	r2, [r3, #16]
 80085aa:	e021      	b.n	80085f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80085ac:	893b      	ldrh	r3, [r7, #8]
 80085ae:	0a1b      	lsrs	r3, r3, #8
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085bc:	6a39      	ldr	r1, [r7, #32]
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 f93e 	bl	8008840 <I2C_WaitOnTXEFlagUntilTimeout>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00d      	beq.n	80085e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	d107      	bne.n	80085e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e050      	b.n	8008688 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085e6:	893b      	ldrh	r3, [r7, #8]
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f2:	6a39      	ldr	r1, [r7, #32]
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 f923 	bl	8008840 <I2C_WaitOnTXEFlagUntilTimeout>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00d      	beq.n	800861c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008604:	2b04      	cmp	r3, #4
 8008606:	d107      	bne.n	8008618 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008616:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e035      	b.n	8008688 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800862a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	6a3b      	ldr	r3, [r7, #32]
 8008632:	2200      	movs	r2, #0
 8008634:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 f82b 	bl	8008694 <I2C_WaitOnFlagUntilTimeout>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00d      	beq.n	8008660 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008652:	d103      	bne.n	800865c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800865a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e013      	b.n	8008688 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008660:	897b      	ldrh	r3, [r7, #10]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	f043 0301 	orr.w	r3, r3, #1
 8008668:	b2da      	uxtb	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	6a3a      	ldr	r2, [r7, #32]
 8008674:	4906      	ldr	r1, [pc, #24]	; (8008690 <I2C_RequestMemoryRead+0x1cc>)
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 f863 	bl	8008742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e000      	b.n	8008688 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	00010002 	.word	0x00010002

08008694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	603b      	str	r3, [r7, #0]
 80086a0:	4613      	mov	r3, r2
 80086a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086a4:	e025      	b.n	80086f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ac:	d021      	beq.n	80086f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ae:	f7fe fc2d 	bl	8006f0c <HAL_GetTick>
 80086b2:	4602      	mov	r2, r0
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d302      	bcc.n	80086c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d116      	bne.n	80086f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2220      	movs	r2, #32
 80086ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086de:	f043 0220 	orr.w	r2, r3, #32
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e023      	b.n	800873a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	0c1b      	lsrs	r3, r3, #16
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d10d      	bne.n	8008718 <I2C_WaitOnFlagUntilTimeout+0x84>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	43da      	mvns	r2, r3
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	4013      	ands	r3, r2
 8008708:	b29b      	uxth	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	bf0c      	ite	eq
 800870e:	2301      	moveq	r3, #1
 8008710:	2300      	movne	r3, #0
 8008712:	b2db      	uxtb	r3, r3
 8008714:	461a      	mov	r2, r3
 8008716:	e00c      	b.n	8008732 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	43da      	mvns	r2, r3
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	4013      	ands	r3, r2
 8008724:	b29b      	uxth	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	bf0c      	ite	eq
 800872a:	2301      	moveq	r3, #1
 800872c:	2300      	movne	r3, #0
 800872e:	b2db      	uxtb	r3, r3
 8008730:	461a      	mov	r2, r3
 8008732:	79fb      	ldrb	r3, [r7, #7]
 8008734:	429a      	cmp	r2, r3
 8008736:	d0b6      	beq.n	80086a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b084      	sub	sp, #16
 8008746:	af00      	add	r7, sp, #0
 8008748:	60f8      	str	r0, [r7, #12]
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	607a      	str	r2, [r7, #4]
 800874e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008750:	e051      	b.n	80087f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800875c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008760:	d123      	bne.n	80087aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008770:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800877a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2220      	movs	r2, #32
 8008786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008796:	f043 0204 	orr.w	r2, r3, #4
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e046      	b.n	8008838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b0:	d021      	beq.n	80087f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087b2:	f7fe fbab 	bl	8006f0c <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d302      	bcc.n	80087c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d116      	bne.n	80087f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2220      	movs	r2, #32
 80087d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e2:	f043 0220 	orr.w	r2, r3, #32
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e020      	b.n	8008838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	0c1b      	lsrs	r3, r3, #16
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d10c      	bne.n	800881a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	43da      	mvns	r2, r3
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	4013      	ands	r3, r2
 800880c:	b29b      	uxth	r3, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	bf14      	ite	ne
 8008812:	2301      	movne	r3, #1
 8008814:	2300      	moveq	r3, #0
 8008816:	b2db      	uxtb	r3, r3
 8008818:	e00b      	b.n	8008832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	43da      	mvns	r2, r3
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	4013      	ands	r3, r2
 8008826:	b29b      	uxth	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	bf14      	ite	ne
 800882c:	2301      	movne	r3, #1
 800882e:	2300      	moveq	r3, #0
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d18d      	bne.n	8008752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800884c:	e02d      	b.n	80088aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 f8ce 	bl	80089f0 <I2C_IsAcknowledgeFailed>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e02d      	b.n	80088ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008864:	d021      	beq.n	80088aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008866:	f7fe fb51 	bl	8006f0c <HAL_GetTick>
 800886a:	4602      	mov	r2, r0
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	429a      	cmp	r2, r3
 8008874:	d302      	bcc.n	800887c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d116      	bne.n	80088aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2220      	movs	r2, #32
 8008886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008896:	f043 0220 	orr.w	r2, r3, #32
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e007      	b.n	80088ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b4:	2b80      	cmp	r3, #128	; 0x80
 80088b6:	d1ca      	bne.n	800884e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	60f8      	str	r0, [r7, #12]
 80088ca:	60b9      	str	r1, [r7, #8]
 80088cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088ce:	e02d      	b.n	800892c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f000 f88d 	bl	80089f0 <I2C_IsAcknowledgeFailed>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d001      	beq.n	80088e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e02d      	b.n	800893c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e6:	d021      	beq.n	800892c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088e8:	f7fe fb10 	bl	8006f0c <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d302      	bcc.n	80088fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d116      	bne.n	800892c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2220      	movs	r2, #32
 8008908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008918:	f043 0220 	orr.w	r2, r3, #32
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e007      	b.n	800893c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b04      	cmp	r3, #4
 8008938:	d1ca      	bne.n	80088d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008950:	e042      	b.n	80089d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	f003 0310 	and.w	r3, r3, #16
 800895c:	2b10      	cmp	r3, #16
 800895e:	d119      	bne.n	8008994 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f06f 0210 	mvn.w	r2, #16
 8008968:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2220      	movs	r2, #32
 8008974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e029      	b.n	80089e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008994:	f7fe faba 	bl	8006f0c <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d302      	bcc.n	80089aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d116      	bne.n	80089d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2220      	movs	r2, #32
 80089b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c4:	f043 0220 	orr.w	r2, r3, #32
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e007      	b.n	80089e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e2:	2b40      	cmp	r3, #64	; 0x40
 80089e4:	d1b5      	bne.n	8008952 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a06:	d11b      	bne.n	8008a40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2c:	f043 0204 	orr.w	r2, r3, #4
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e000      	b.n	8008a42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b20      	cmp	r3, #32
 8008a62:	d129      	bne.n	8008ab8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2224      	movs	r2, #36	; 0x24
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0201 	bic.w	r2, r2, #1
 8008a7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f022 0210 	bic.w	r2, r2, #16
 8008a8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f042 0201 	orr.w	r2, r2, #1
 8008aaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2220      	movs	r2, #32
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	e000      	b.n	8008aba <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8008ab8:	2302      	movs	r3, #2
  }
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b085      	sub	sp, #20
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b20      	cmp	r3, #32
 8008ade:	d12a      	bne.n	8008b36 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2224      	movs	r2, #36	; 0x24
 8008ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f022 0201 	bic.w	r2, r2, #1
 8008af6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008b00:	89fb      	ldrh	r3, [r7, #14]
 8008b02:	f023 030f 	bic.w	r3, r3, #15
 8008b06:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	89fb      	ldrh	r3, [r7, #14]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	89fa      	ldrh	r2, [r7, #14]
 8008b18:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f042 0201 	orr.w	r2, r2, #1
 8008b28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2220      	movs	r2, #32
 8008b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	e000      	b.n	8008b38 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008b36:	2302      	movs	r3, #2
  }
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b46:	b08f      	sub	sp, #60	; 0x3c
 8008b48:	af0a      	add	r7, sp, #40	; 0x28
 8008b4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e10f      	b.n	8008d76 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d106      	bne.n	8008b76 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f00f fcbb 	bl	80184ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2203      	movs	r2, #3
 8008b7a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d102      	bne.n	8008b90 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f004 fe2c 	bl	800d7f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	687e      	ldr	r6, [r7, #4]
 8008ba2:	466d      	mov	r5, sp
 8008ba4:	f106 0410 	add.w	r4, r6, #16
 8008ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008bae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008bb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008bb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8008bb8:	1d33      	adds	r3, r6, #4
 8008bba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bbc:	6838      	ldr	r0, [r7, #0]
 8008bbe:	f004 fd03 	bl	800d5c8 <USB_CoreInit>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d005      	beq.n	8008bd4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e0d0      	b.n	8008d76 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2100      	movs	r1, #0
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f004 fe1a 	bl	800d814 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]
 8008be4:	e04a      	b.n	8008c7c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008be6:	7bfa      	ldrb	r2, [r7, #15]
 8008be8:	6879      	ldr	r1, [r7, #4]
 8008bea:	4613      	mov	r3, r2
 8008bec:	00db      	lsls	r3, r3, #3
 8008bee:	1a9b      	subs	r3, r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	440b      	add	r3, r1
 8008bf4:	333d      	adds	r3, #61	; 0x3d
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008bfa:	7bfa      	ldrb	r2, [r7, #15]
 8008bfc:	6879      	ldr	r1, [r7, #4]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	00db      	lsls	r3, r3, #3
 8008c02:	1a9b      	subs	r3, r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	440b      	add	r3, r1
 8008c08:	333c      	adds	r3, #60	; 0x3c
 8008c0a:	7bfa      	ldrb	r2, [r7, #15]
 8008c0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008c0e:	7bfa      	ldrb	r2, [r7, #15]
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
 8008c12:	b298      	uxth	r0, r3
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	4613      	mov	r3, r2
 8008c18:	00db      	lsls	r3, r3, #3
 8008c1a:	1a9b      	subs	r3, r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	440b      	add	r3, r1
 8008c20:	3342      	adds	r3, #66	; 0x42
 8008c22:	4602      	mov	r2, r0
 8008c24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008c26:	7bfa      	ldrb	r2, [r7, #15]
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	00db      	lsls	r3, r3, #3
 8008c2e:	1a9b      	subs	r3, r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	440b      	add	r3, r1
 8008c34:	333f      	adds	r3, #63	; 0x3f
 8008c36:	2200      	movs	r2, #0
 8008c38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008c3a:	7bfa      	ldrb	r2, [r7, #15]
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	00db      	lsls	r3, r3, #3
 8008c42:	1a9b      	subs	r3, r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	440b      	add	r3, r1
 8008c48:	3344      	adds	r3, #68	; 0x44
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008c4e:	7bfa      	ldrb	r2, [r7, #15]
 8008c50:	6879      	ldr	r1, [r7, #4]
 8008c52:	4613      	mov	r3, r2
 8008c54:	00db      	lsls	r3, r3, #3
 8008c56:	1a9b      	subs	r3, r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	440b      	add	r3, r1
 8008c5c:	3348      	adds	r3, #72	; 0x48
 8008c5e:	2200      	movs	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008c62:	7bfa      	ldrb	r2, [r7, #15]
 8008c64:	6879      	ldr	r1, [r7, #4]
 8008c66:	4613      	mov	r3, r2
 8008c68:	00db      	lsls	r3, r3, #3
 8008c6a:	1a9b      	subs	r3, r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	440b      	add	r3, r1
 8008c70:	3350      	adds	r3, #80	; 0x50
 8008c72:	2200      	movs	r2, #0
 8008c74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	73fb      	strb	r3, [r7, #15]
 8008c7c:	7bfa      	ldrb	r2, [r7, #15]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d3af      	bcc.n	8008be6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c86:	2300      	movs	r3, #0
 8008c88:	73fb      	strb	r3, [r7, #15]
 8008c8a:	e044      	b.n	8008d16 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008c8c:	7bfa      	ldrb	r2, [r7, #15]
 8008c8e:	6879      	ldr	r1, [r7, #4]
 8008c90:	4613      	mov	r3, r2
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	1a9b      	subs	r3, r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	440b      	add	r3, r1
 8008c9a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008ca2:	7bfa      	ldrb	r2, [r7, #15]
 8008ca4:	6879      	ldr	r1, [r7, #4]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	1a9b      	subs	r3, r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	440b      	add	r3, r1
 8008cb0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008cb4:	7bfa      	ldrb	r2, [r7, #15]
 8008cb6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008cb8:	7bfa      	ldrb	r2, [r7, #15]
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	1a9b      	subs	r3, r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	440b      	add	r3, r1
 8008cc6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008cca:	2200      	movs	r2, #0
 8008ccc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008cce:	7bfa      	ldrb	r2, [r7, #15]
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	00db      	lsls	r3, r3, #3
 8008cd6:	1a9b      	subs	r3, r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	440b      	add	r3, r1
 8008cdc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008ce4:	7bfa      	ldrb	r2, [r7, #15]
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	1a9b      	subs	r3, r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	440b      	add	r3, r1
 8008cf2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008cfa:	7bfa      	ldrb	r2, [r7, #15]
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	00db      	lsls	r3, r3, #3
 8008d02:	1a9b      	subs	r3, r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	440b      	add	r3, r1
 8008d08:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	3301      	adds	r3, #1
 8008d14:	73fb      	strb	r3, [r7, #15]
 8008d16:	7bfa      	ldrb	r2, [r7, #15]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d3b5      	bcc.n	8008c8c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	603b      	str	r3, [r7, #0]
 8008d26:	687e      	ldr	r6, [r7, #4]
 8008d28:	466d      	mov	r5, sp
 8008d2a:	f106 0410 	add.w	r4, r6, #16
 8008d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008d3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8008d3e:	1d33      	adds	r3, r6, #4
 8008d40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d42:	6838      	ldr	r0, [r7, #0]
 8008d44:	f004 fdb2 	bl	800d8ac <USB_DevInit>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d005      	beq.n	8008d5a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2202      	movs	r2, #2
 8008d52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e00d      	b.n	8008d76 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f005 fe2e 	bl	800e9d0 <USB_DevDisconnect>

  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d101      	bne.n	8008d9a <HAL_PCD_Start+0x1c>
 8008d96:	2302      	movs	r3, #2
 8008d98:	e020      	b.n	8008ddc <HAL_PCD_Start+0x5e>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d109      	bne.n	8008dbe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d005      	beq.n	8008dbe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f004 fd04 	bl	800d7d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f005 fdde 	bl	800e98e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008de4:	b590      	push	{r4, r7, lr}
 8008de6:	b08d      	sub	sp, #52	; 0x34
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f005 fe9c 	bl	800eb38 <USB_GetMode>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f040 839d 	bne.w	8009542 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f005 fe00 	bl	800ea12 <USB_ReadInterrupts>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 8393 	beq.w	8009540 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f005 fdf7 	bl	800ea12 <USB_ReadInterrupts>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f003 0302 	and.w	r3, r3, #2
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d107      	bne.n	8008e3e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	695a      	ldr	r2, [r3, #20]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f002 0202 	and.w	r2, r2, #2
 8008e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f005 fde5 	bl	800ea12 <USB_ReadInterrupts>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	f003 0310 	and.w	r3, r3, #16
 8008e4e:	2b10      	cmp	r3, #16
 8008e50:	d161      	bne.n	8008f16 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	699a      	ldr	r2, [r3, #24]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 0210 	bic.w	r2, r2, #16
 8008e60:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	f003 020f 	and.w	r2, r3, #15
 8008e6e:	4613      	mov	r3, r2
 8008e70:	00db      	lsls	r3, r3, #3
 8008e72:	1a9b      	subs	r3, r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	3304      	adds	r3, #4
 8008e80:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	0c5b      	lsrs	r3, r3, #17
 8008e86:	f003 030f 	and.w	r3, r3, #15
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d124      	bne.n	8008ed8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008e94:	4013      	ands	r3, r2
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d035      	beq.n	8008f06 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	091b      	lsrs	r3, r3, #4
 8008ea2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008ea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	461a      	mov	r2, r3
 8008eac:	6a38      	ldr	r0, [r7, #32]
 8008eae:	f005 fc1c 	bl	800e6ea <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	68da      	ldr	r2, [r3, #12]
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	091b      	lsrs	r3, r3, #4
 8008eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ebe:	441a      	add	r2, r3
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	699a      	ldr	r2, [r3, #24]
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	091b      	lsrs	r3, r3, #4
 8008ecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ed0:	441a      	add	r2, r3
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	619a      	str	r2, [r3, #24]
 8008ed6:	e016      	b.n	8008f06 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	0c5b      	lsrs	r3, r3, #17
 8008edc:	f003 030f 	and.w	r3, r3, #15
 8008ee0:	2b06      	cmp	r3, #6
 8008ee2:	d110      	bne.n	8008f06 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008eea:	2208      	movs	r2, #8
 8008eec:	4619      	mov	r1, r3
 8008eee:	6a38      	ldr	r0, [r7, #32]
 8008ef0:	f005 fbfb 	bl	800e6ea <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	699a      	ldr	r2, [r3, #24]
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	091b      	lsrs	r3, r3, #4
 8008efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f00:	441a      	add	r2, r3
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	699a      	ldr	r2, [r3, #24]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f042 0210 	orr.w	r2, r2, #16
 8008f14:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f005 fd79 	bl	800ea12 <USB_ReadInterrupts>
 8008f20:	4603      	mov	r3, r0
 8008f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008f2a:	d16e      	bne.n	800900a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f005 fd7f 	bl	800ea38 <USB_ReadDevAllOutEpInterrupt>
 8008f3a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008f3c:	e062      	b.n	8009004 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f40:	f003 0301 	and.w	r3, r3, #1
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d057      	beq.n	8008ff8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f4e:	b2d2      	uxtb	r2, r2
 8008f50:	4611      	mov	r1, r2
 8008f52:	4618      	mov	r0, r3
 8008f54:	f005 fda4 	bl	800eaa0 <USB_ReadDevOutEPInterrupt>
 8008f58:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00c      	beq.n	8008f7e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f70:	461a      	mov	r2, r3
 8008f72:	2301      	movs	r3, #1
 8008f74:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008f76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fdb1 	bl	8009ae0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f003 0308 	and.w	r3, r3, #8
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00c      	beq.n	8008fa2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f94:	461a      	mov	r2, r3
 8008f96:	2308      	movs	r3, #8
 8008f98:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008f9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 feab 	bl	8009cf8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d008      	beq.n	8008fbe <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb8:	461a      	mov	r2, r3
 8008fba:	2310      	movs	r3, #16
 8008fbc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d008      	beq.n	8008fda <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	2320      	movs	r3, #32
 8008fd8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d009      	beq.n	8008ff8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ff6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	085b      	lsrs	r3, r3, #1
 8009002:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	2b00      	cmp	r3, #0
 8009008:	d199      	bne.n	8008f3e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4618      	mov	r0, r3
 8009010:	f005 fcff 	bl	800ea12 <USB_ReadInterrupts>
 8009014:	4603      	mov	r3, r0
 8009016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800901a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800901e:	f040 80c0 	bne.w	80091a2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4618      	mov	r0, r3
 8009028:	f005 fd20 	bl	800ea6c <USB_ReadDevAllInEpInterrupt>
 800902c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800902e:	2300      	movs	r3, #0
 8009030:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009032:	e0b2      	b.n	800919a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 80a7 	beq.w	800918e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009046:	b2d2      	uxtb	r2, r2
 8009048:	4611      	mov	r1, r2
 800904a:	4618      	mov	r0, r3
 800904c:	f005 fd46 	bl	800eadc <USB_ReadDevInEPInterrupt>
 8009050:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	f003 0301 	and.w	r3, r3, #1
 8009058:	2b00      	cmp	r3, #0
 800905a:	d057      	beq.n	800910c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	f003 030f 	and.w	r3, r3, #15
 8009062:	2201      	movs	r2, #1
 8009064:	fa02 f303 	lsl.w	r3, r2, r3
 8009068:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	43db      	mvns	r3, r3
 8009076:	69f9      	ldr	r1, [r7, #28]
 8009078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800907c:	4013      	ands	r3, r2
 800907e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	4413      	add	r3, r2
 8009088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800908c:	461a      	mov	r2, r3
 800908e:	2301      	movs	r3, #1
 8009090:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d132      	bne.n	8009100 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800909e:	4613      	mov	r3, r2
 80090a0:	00db      	lsls	r3, r3, #3
 80090a2:	1a9b      	subs	r3, r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	440b      	add	r3, r1
 80090a8:	3348      	adds	r3, #72	; 0x48
 80090aa:	6819      	ldr	r1, [r3, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090b0:	4613      	mov	r3, r2
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	1a9b      	subs	r3, r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4403      	add	r3, r0
 80090ba:	3344      	adds	r3, #68	; 0x44
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4419      	add	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c4:	4613      	mov	r3, r2
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	1a9b      	subs	r3, r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4403      	add	r3, r0
 80090ce:	3348      	adds	r3, #72	; 0x48
 80090d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80090d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d113      	bne.n	8009100 <HAL_PCD_IRQHandler+0x31c>
 80090d8:	6879      	ldr	r1, [r7, #4]
 80090da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090dc:	4613      	mov	r3, r2
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	440b      	add	r3, r1
 80090e6:	3350      	adds	r3, #80	; 0x50
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d108      	bne.n	8009100 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6818      	ldr	r0, [r3, #0]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80090f8:	461a      	mov	r2, r3
 80090fa:	2101      	movs	r1, #1
 80090fc:	f005 fd4e 	bl	800eb9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	b2db      	uxtb	r3, r3
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f00f fa7f 	bl	801860a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f003 0308 	and.w	r3, r3, #8
 8009112:	2b00      	cmp	r3, #0
 8009114:	d008      	beq.n	8009128 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009122:	461a      	mov	r2, r3
 8009124:	2308      	movs	r3, #8
 8009126:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f003 0310 	and.w	r3, r3, #16
 800912e:	2b00      	cmp	r3, #0
 8009130:	d008      	beq.n	8009144 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	4413      	add	r3, r2
 800913a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913e:	461a      	mov	r2, r3
 8009140:	2310      	movs	r3, #16
 8009142:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914a:	2b00      	cmp	r3, #0
 800914c:	d008      	beq.n	8009160 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	4413      	add	r3, r2
 8009156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800915a:	461a      	mov	r2, r3
 800915c:	2340      	movs	r3, #64	; 0x40
 800915e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	f003 0302 	and.w	r3, r3, #2
 8009166:	2b00      	cmp	r3, #0
 8009168:	d008      	beq.n	800917c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	015a      	lsls	r2, r3, #5
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	4413      	add	r3, r2
 8009172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009176:	461a      	mov	r2, r3
 8009178:	2302      	movs	r3, #2
 800917a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009182:	2b00      	cmp	r3, #0
 8009184:	d003      	beq.n	800918e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009186:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fc1b 	bl	80099c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009190:	3301      	adds	r3, #1
 8009192:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009196:	085b      	lsrs	r3, r3, #1
 8009198:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800919a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919c:	2b00      	cmp	r3, #0
 800919e:	f47f af49 	bne.w	8009034 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f005 fc33 	bl	800ea12 <USB_ReadInterrupts>
 80091ac:	4603      	mov	r3, r0
 80091ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091b6:	d122      	bne.n	80091fe <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	69fa      	ldr	r2, [r7, #28]
 80091c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091c6:	f023 0301 	bic.w	r3, r3, #1
 80091ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d108      	bne.n	80091e8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80091de:	2100      	movs	r1, #0
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fe27 	bl	8009e34 <HAL_PCDEx_LPM_Callback>
 80091e6:	e002      	b.n	80091ee <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f00f fa85 	bl	80186f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	695a      	ldr	r2, [r3, #20]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80091fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4618      	mov	r0, r3
 8009204:	f005 fc05 	bl	800ea12 <USB_ReadInterrupts>
 8009208:	4603      	mov	r3, r0
 800920a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800920e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009212:	d112      	bne.n	800923a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b01      	cmp	r3, #1
 8009222:	d102      	bne.n	800922a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f00f fa41 	bl	80186ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	695a      	ldr	r2, [r3, #20]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009238:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4618      	mov	r0, r3
 8009240:	f005 fbe7 	bl	800ea12 <USB_ReadInterrupts>
 8009244:	4603      	mov	r3, r0
 8009246:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800924a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800924e:	f040 80c7 	bne.w	80093e0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	69fa      	ldr	r2, [r7, #28]
 800925c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009260:	f023 0301 	bic.w	r3, r3, #1
 8009264:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2110      	movs	r1, #16
 800926c:	4618      	mov	r0, r3
 800926e:	f004 fc81 	bl	800db74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009272:	2300      	movs	r3, #0
 8009274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009276:	e056      	b.n	8009326 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009284:	461a      	mov	r2, r3
 8009286:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800928a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800928c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928e:	015a      	lsls	r2, r3, #5
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	4413      	add	r3, r2
 8009294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800929c:	0151      	lsls	r1, r2, #5
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	440a      	add	r2, r1
 80092a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092aa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ae:	015a      	lsls	r2, r3, #5
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	4413      	add	r3, r2
 80092b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092bc:	0151      	lsls	r1, r2, #5
 80092be:	69fa      	ldr	r2, [r7, #28]
 80092c0:	440a      	add	r2, r1
 80092c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80092ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80092cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d8:	461a      	mov	r2, r3
 80092da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092f0:	0151      	lsls	r1, r2, #5
 80092f2:	69fa      	ldr	r2, [r7, #28]
 80092f4:	440a      	add	r2, r1
 80092f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009310:	0151      	lsls	r1, r2, #5
 8009312:	69fa      	ldr	r2, [r7, #28]
 8009314:	440a      	add	r2, r1
 8009316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800931a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800931e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009322:	3301      	adds	r3, #1
 8009324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800932c:	429a      	cmp	r2, r3
 800932e:	d3a3      	bcc.n	8009278 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	69fa      	ldr	r2, [r7, #28]
 800933a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800933e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009342:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009348:	2b00      	cmp	r3, #0
 800934a:	d016      	beq.n	800937a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009356:	69fa      	ldr	r2, [r7, #28]
 8009358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800935c:	f043 030b 	orr.w	r3, r3, #11
 8009360:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800936a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800936c:	69fa      	ldr	r2, [r7, #28]
 800936e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009372:	f043 030b 	orr.w	r3, r3, #11
 8009376:	6453      	str	r3, [r2, #68]	; 0x44
 8009378:	e015      	b.n	80093a6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	69fa      	ldr	r2, [r7, #28]
 8009384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009388:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800938c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009390:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	69fa      	ldr	r2, [r7, #28]
 800939c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093a0:	f043 030b 	orr.w	r3, r3, #11
 80093a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	69fa      	ldr	r2, [r7, #28]
 80093b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80093b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6818      	ldr	r0, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80093ca:	461a      	mov	r2, r3
 80093cc:	f005 fbe6 	bl	800eb9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	695a      	ldr	r2, [r3, #20]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80093de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f005 fb14 	bl	800ea12 <USB_ReadInterrupts>
 80093ea:	4603      	mov	r3, r0
 80093ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093f4:	d124      	bne.n	8009440 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f005 fbaa 	bl	800eb54 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4618      	mov	r0, r3
 8009406:	f004 fc12 	bl	800dc2e <USB_GetDevSpeed>
 800940a:	4603      	mov	r3, r0
 800940c:	461a      	mov	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681c      	ldr	r4, [r3, #0]
 8009416:	f001 f995 	bl	800a744 <HAL_RCC_GetHCLKFreq>
 800941a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009420:	b2db      	uxtb	r3, r3
 8009422:	461a      	mov	r2, r3
 8009424:	4620      	mov	r0, r4
 8009426:	f004 f931 	bl	800d68c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f00f f915 	bl	801865a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	695a      	ldr	r2, [r3, #20]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800943e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4618      	mov	r0, r3
 8009446:	f005 fae4 	bl	800ea12 <USB_ReadInterrupts>
 800944a:	4603      	mov	r3, r0
 800944c:	f003 0308 	and.w	r3, r3, #8
 8009450:	2b08      	cmp	r3, #8
 8009452:	d10a      	bne.n	800946a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f00f f8f2 	bl	801863e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	695a      	ldr	r2, [r3, #20]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f002 0208 	and.w	r2, r2, #8
 8009468:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4618      	mov	r0, r3
 8009470:	f005 facf 	bl	800ea12 <USB_ReadInterrupts>
 8009474:	4603      	mov	r3, r0
 8009476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800947a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800947e:	d10f      	bne.n	80094a0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009480:	2300      	movs	r3, #0
 8009482:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	b2db      	uxtb	r3, r3
 8009488:	4619      	mov	r1, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f00f f954 	bl	8018738 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	695a      	ldr	r2, [r3, #20]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800949e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f005 fab4 	bl	800ea12 <USB_ReadInterrupts>
 80094aa:	4603      	mov	r3, r0
 80094ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094b4:	d10f      	bne.n	80094d6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80094b6:	2300      	movs	r3, #0
 80094b8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f00f f927 	bl	8018714 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	695a      	ldr	r2, [r3, #20]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80094d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4618      	mov	r0, r3
 80094dc:	f005 fa99 	bl	800ea12 <USB_ReadInterrupts>
 80094e0:	4603      	mov	r3, r0
 80094e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ea:	d10a      	bne.n	8009502 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f00f f935 	bl	801875c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	695a      	ldr	r2, [r3, #20]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4618      	mov	r0, r3
 8009508:	f005 fa83 	bl	800ea12 <USB_ReadInterrupts>
 800950c:	4603      	mov	r3, r0
 800950e:	f003 0304 	and.w	r3, r3, #4
 8009512:	2b04      	cmp	r3, #4
 8009514:	d115      	bne.n	8009542 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	f003 0304 	and.w	r3, r3, #4
 8009524:	2b00      	cmp	r3, #0
 8009526:	d002      	beq.n	800952e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f00f f925 	bl	8018778 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	6859      	ldr	r1, [r3, #4]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	69ba      	ldr	r2, [r7, #24]
 800953a:	430a      	orrs	r2, r1
 800953c:	605a      	str	r2, [r3, #4]
 800953e:	e000      	b.n	8009542 <HAL_PCD_IRQHandler+0x75e>
      return;
 8009540:	bf00      	nop
    }
  }
}
 8009542:	3734      	adds	r7, #52	; 0x34
 8009544:	46bd      	mov	sp, r7
 8009546:	bd90      	pop	{r4, r7, pc}

08009548 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800955a:	2b01      	cmp	r3, #1
 800955c:	d101      	bne.n	8009562 <HAL_PCD_SetAddress+0x1a>
 800955e:	2302      	movs	r3, #2
 8009560:	e013      	b.n	800958a <HAL_PCD_SetAddress+0x42>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2201      	movs	r2, #1
 8009566:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	78fa      	ldrb	r2, [r7, #3]
 800956e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	78fa      	ldrb	r2, [r7, #3]
 8009578:	4611      	mov	r1, r2
 800957a:	4618      	mov	r0, r3
 800957c:	f005 f9e1 	bl	800e942 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b084      	sub	sp, #16
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	4608      	mov	r0, r1
 800959c:	4611      	mov	r1, r2
 800959e:	461a      	mov	r2, r3
 80095a0:	4603      	mov	r3, r0
 80095a2:	70fb      	strb	r3, [r7, #3]
 80095a4:	460b      	mov	r3, r1
 80095a6:	803b      	strh	r3, [r7, #0]
 80095a8:	4613      	mov	r3, r2
 80095aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80095b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	da0f      	bge.n	80095d8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	f003 020f 	and.w	r2, r3, #15
 80095be:	4613      	mov	r3, r2
 80095c0:	00db      	lsls	r3, r3, #3
 80095c2:	1a9b      	subs	r3, r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	3338      	adds	r3, #56	; 0x38
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	4413      	add	r3, r2
 80095cc:	3304      	adds	r3, #4
 80095ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2201      	movs	r2, #1
 80095d4:	705a      	strb	r2, [r3, #1]
 80095d6:	e00f      	b.n	80095f8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095d8:	78fb      	ldrb	r3, [r7, #3]
 80095da:	f003 020f 	and.w	r2, r3, #15
 80095de:	4613      	mov	r3, r2
 80095e0:	00db      	lsls	r3, r3, #3
 80095e2:	1a9b      	subs	r3, r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	4413      	add	r3, r2
 80095ee:	3304      	adds	r3, #4
 80095f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80095f8:	78fb      	ldrb	r3, [r7, #3]
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009604:	883a      	ldrh	r2, [r7, #0]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	78ba      	ldrb	r2, [r7, #2]
 800960e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	785b      	ldrb	r3, [r3, #1]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d004      	beq.n	8009622 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	b29a      	uxth	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009622:	78bb      	ldrb	r3, [r7, #2]
 8009624:	2b02      	cmp	r3, #2
 8009626:	d102      	bne.n	800962e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009634:	2b01      	cmp	r3, #1
 8009636:	d101      	bne.n	800963c <HAL_PCD_EP_Open+0xaa>
 8009638:	2302      	movs	r3, #2
 800963a:	e00e      	b.n	800965a <HAL_PCD_EP_Open+0xc8>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68f9      	ldr	r1, [r7, #12]
 800964a:	4618      	mov	r0, r3
 800964c:	f004 fb14 	bl	800dc78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009658:	7afb      	ldrb	r3, [r7, #11]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	460b      	mov	r3, r1
 800966c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800966e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009672:	2b00      	cmp	r3, #0
 8009674:	da0f      	bge.n	8009696 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009676:	78fb      	ldrb	r3, [r7, #3]
 8009678:	f003 020f 	and.w	r2, r3, #15
 800967c:	4613      	mov	r3, r2
 800967e:	00db      	lsls	r3, r3, #3
 8009680:	1a9b      	subs	r3, r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	3338      	adds	r3, #56	; 0x38
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	4413      	add	r3, r2
 800968a:	3304      	adds	r3, #4
 800968c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2201      	movs	r2, #1
 8009692:	705a      	strb	r2, [r3, #1]
 8009694:	e00f      	b.n	80096b6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009696:	78fb      	ldrb	r3, [r7, #3]
 8009698:	f003 020f 	and.w	r2, r3, #15
 800969c:	4613      	mov	r3, r2
 800969e:	00db      	lsls	r3, r3, #3
 80096a0:	1a9b      	subs	r3, r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	4413      	add	r3, r2
 80096ac:	3304      	adds	r3, #4
 80096ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80096b6:	78fb      	ldrb	r3, [r7, #3]
 80096b8:	f003 030f 	and.w	r3, r3, #15
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d101      	bne.n	80096d0 <HAL_PCD_EP_Close+0x6e>
 80096cc:	2302      	movs	r3, #2
 80096ce:	e00e      	b.n	80096ee <HAL_PCD_EP_Close+0x8c>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68f9      	ldr	r1, [r7, #12]
 80096de:	4618      	mov	r0, r3
 80096e0:	f004 fb52 	bl	800dd88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b086      	sub	sp, #24
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	60f8      	str	r0, [r7, #12]
 80096fe:	607a      	str	r2, [r7, #4]
 8009700:	603b      	str	r3, [r7, #0]
 8009702:	460b      	mov	r3, r1
 8009704:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009706:	7afb      	ldrb	r3, [r7, #11]
 8009708:	f003 020f 	and.w	r2, r3, #15
 800970c:	4613      	mov	r3, r2
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	1a9b      	subs	r3, r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	4413      	add	r3, r2
 800971c:	3304      	adds	r3, #4
 800971e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	2200      	movs	r2, #0
 8009730:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2200      	movs	r2, #0
 8009736:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009738:	7afb      	ldrb	r3, [r7, #11]
 800973a:	f003 030f 	and.w	r3, r3, #15
 800973e:	b2da      	uxtb	r2, r3
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d102      	bne.n	8009752 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009752:	7afb      	ldrb	r3, [r7, #11]
 8009754:	f003 030f 	and.w	r3, r3, #15
 8009758:	2b00      	cmp	r3, #0
 800975a:	d109      	bne.n	8009770 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6818      	ldr	r0, [r3, #0]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	b2db      	uxtb	r3, r3
 8009766:	461a      	mov	r2, r3
 8009768:	6979      	ldr	r1, [r7, #20]
 800976a:	f004 fe2d 	bl	800e3c8 <USB_EP0StartXfer>
 800976e:	e008      	b.n	8009782 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6818      	ldr	r0, [r3, #0]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	b2db      	uxtb	r3, r3
 800977a:	461a      	mov	r2, r3
 800977c:	6979      	ldr	r1, [r7, #20]
 800977e:	f004 fbdf 	bl	800df40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3718      	adds	r7, #24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	460b      	mov	r3, r1
 8009796:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	f003 020f 	and.w	r2, r3, #15
 800979e:	6879      	ldr	r1, [r7, #4]
 80097a0:	4613      	mov	r3, r2
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	1a9b      	subs	r3, r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	440b      	add	r3, r1
 80097aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80097ae:	681b      	ldr	r3, [r3, #0]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	607a      	str	r2, [r7, #4]
 80097c6:	603b      	str	r3, [r7, #0]
 80097c8:	460b      	mov	r3, r1
 80097ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80097cc:	7afb      	ldrb	r3, [r7, #11]
 80097ce:	f003 020f 	and.w	r2, r3, #15
 80097d2:	4613      	mov	r3, r2
 80097d4:	00db      	lsls	r3, r3, #3
 80097d6:	1a9b      	subs	r3, r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	3338      	adds	r3, #56	; 0x38
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	4413      	add	r3, r2
 80097e0:	3304      	adds	r3, #4
 80097e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	2200      	movs	r2, #0
 80097f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	2201      	movs	r2, #1
 80097fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80097fc:	7afb      	ldrb	r3, [r7, #11]
 80097fe:	f003 030f 	and.w	r3, r3, #15
 8009802:	b2da      	uxtb	r2, r3
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d102      	bne.n	8009816 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009816:	7afb      	ldrb	r3, [r7, #11]
 8009818:	f003 030f 	and.w	r3, r3, #15
 800981c:	2b00      	cmp	r3, #0
 800981e:	d109      	bne.n	8009834 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6818      	ldr	r0, [r3, #0]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	b2db      	uxtb	r3, r3
 800982a:	461a      	mov	r2, r3
 800982c:	6979      	ldr	r1, [r7, #20]
 800982e:	f004 fdcb 	bl	800e3c8 <USB_EP0StartXfer>
 8009832:	e008      	b.n	8009846 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6818      	ldr	r0, [r3, #0]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	461a      	mov	r2, r3
 8009840:	6979      	ldr	r1, [r7, #20]
 8009842:	f004 fb7d 	bl	800df40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3718      	adds	r7, #24
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800985c:	78fb      	ldrb	r3, [r7, #3]
 800985e:	f003 020f 	and.w	r2, r3, #15
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	429a      	cmp	r2, r3
 8009868:	d901      	bls.n	800986e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e050      	b.n	8009910 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800986e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009872:	2b00      	cmp	r3, #0
 8009874:	da0f      	bge.n	8009896 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009876:	78fb      	ldrb	r3, [r7, #3]
 8009878:	f003 020f 	and.w	r2, r3, #15
 800987c:	4613      	mov	r3, r2
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	1a9b      	subs	r3, r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	3338      	adds	r3, #56	; 0x38
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	4413      	add	r3, r2
 800988a:	3304      	adds	r3, #4
 800988c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2201      	movs	r2, #1
 8009892:	705a      	strb	r2, [r3, #1]
 8009894:	e00d      	b.n	80098b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009896:	78fa      	ldrb	r2, [r7, #3]
 8009898:	4613      	mov	r3, r2
 800989a:	00db      	lsls	r3, r3, #3
 800989c:	1a9b      	subs	r3, r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	4413      	add	r3, r2
 80098a8:	3304      	adds	r3, #4
 80098aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2201      	movs	r2, #1
 80098b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80098b8:	78fb      	ldrb	r3, [r7, #3]
 80098ba:	f003 030f 	and.w	r3, r3, #15
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d101      	bne.n	80098d2 <HAL_PCD_EP_SetStall+0x82>
 80098ce:	2302      	movs	r3, #2
 80098d0:	e01e      	b.n	8009910 <HAL_PCD_EP_SetStall+0xc0>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68f9      	ldr	r1, [r7, #12]
 80098e0:	4618      	mov	r0, r3
 80098e2:	f004 ff5a 	bl	800e79a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80098e6:	78fb      	ldrb	r3, [r7, #3]
 80098e8:	f003 030f 	and.w	r3, r3, #15
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10a      	bne.n	8009906 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6818      	ldr	r0, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	b2d9      	uxtb	r1, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009900:	461a      	mov	r2, r3
 8009902:	f005 f94b 	bl	800eb9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	460b      	mov	r3, r1
 8009922:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	f003 020f 	and.w	r2, r3, #15
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	429a      	cmp	r2, r3
 8009930:	d901      	bls.n	8009936 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e042      	b.n	80099bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009936:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800993a:	2b00      	cmp	r3, #0
 800993c:	da0f      	bge.n	800995e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800993e:	78fb      	ldrb	r3, [r7, #3]
 8009940:	f003 020f 	and.w	r2, r3, #15
 8009944:	4613      	mov	r3, r2
 8009946:	00db      	lsls	r3, r3, #3
 8009948:	1a9b      	subs	r3, r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	3338      	adds	r3, #56	; 0x38
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	4413      	add	r3, r2
 8009952:	3304      	adds	r3, #4
 8009954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2201      	movs	r2, #1
 800995a:	705a      	strb	r2, [r3, #1]
 800995c:	e00f      	b.n	800997e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800995e:	78fb      	ldrb	r3, [r7, #3]
 8009960:	f003 020f 	and.w	r2, r3, #15
 8009964:	4613      	mov	r3, r2
 8009966:	00db      	lsls	r3, r3, #3
 8009968:	1a9b      	subs	r3, r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	4413      	add	r3, r2
 8009974:	3304      	adds	r3, #4
 8009976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	f003 030f 	and.w	r3, r3, #15
 800998a:	b2da      	uxtb	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009996:	2b01      	cmp	r3, #1
 8009998:	d101      	bne.n	800999e <HAL_PCD_EP_ClrStall+0x86>
 800999a:	2302      	movs	r3, #2
 800999c:	e00e      	b.n	80099bc <HAL_PCD_EP_ClrStall+0xa4>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68f9      	ldr	r1, [r7, #12]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f004 ff62 	bl	800e876 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08a      	sub	sp, #40	; 0x28
 80099c8:	af02      	add	r7, sp, #8
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	4613      	mov	r3, r2
 80099dc:	00db      	lsls	r3, r3, #3
 80099de:	1a9b      	subs	r3, r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	3338      	adds	r3, #56	; 0x38
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	4413      	add	r3, r2
 80099e8:	3304      	adds	r3, #4
 80099ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	699a      	ldr	r2, [r3, #24]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	695b      	ldr	r3, [r3, #20]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d901      	bls.n	80099fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e06c      	b.n	8009ad6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	695a      	ldr	r2, [r3, #20]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	69fa      	ldr	r2, [r7, #28]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d902      	bls.n	8009a18 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	3303      	adds	r3, #3
 8009a1c:	089b      	lsrs	r3, r3, #2
 8009a1e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009a20:	e02b      	b.n	8009a7a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	695a      	ldr	r2, [r3, #20]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	69fa      	ldr	r2, [r7, #28]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d902      	bls.n	8009a3e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	3303      	adds	r3, #3
 8009a42:	089b      	lsrs	r3, r3, #2
 8009a44:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	68d9      	ldr	r1, [r3, #12]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	6978      	ldr	r0, [r7, #20]
 8009a5e:	f004 fe06 	bl	800e66e <USB_WritePacket>

    ep->xfer_buff  += len;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	441a      	add	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	699a      	ldr	r2, [r3, #24]
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	441a      	add	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	015a      	lsls	r2, r3, #5
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	4413      	add	r3, r2
 8009a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	69ba      	ldr	r2, [r7, #24]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d809      	bhi.n	8009aa4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	699a      	ldr	r2, [r3, #24]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d203      	bcs.n	8009aa4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	695b      	ldr	r3, [r3, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1be      	bne.n	8009a22 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	695a      	ldr	r2, [r3, #20]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d811      	bhi.n	8009ad4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	f003 030f 	and.w	r3, r3, #15
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8009abc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	43db      	mvns	r3, r3
 8009aca:	6939      	ldr	r1, [r7, #16]
 8009acc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3720      	adds	r7, #32
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
	...

08009ae0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	333c      	adds	r3, #60	; 0x3c
 8009af8:	3304      	adds	r3, #4
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	015a      	lsls	r2, r3, #5
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	f040 80a0 	bne.w	8009c58 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	f003 0308 	and.w	r3, r3, #8
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d015      	beq.n	8009b4e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4a72      	ldr	r2, [pc, #456]	; (8009cf0 <PCD_EP_OutXfrComplete_int+0x210>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	f240 80dd 	bls.w	8009ce6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 80d7 	beq.w	8009ce6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	015a      	lsls	r2, r3, #5
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b44:	461a      	mov	r2, r3
 8009b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b4a:	6093      	str	r3, [r2, #8]
 8009b4c:	e0cb      	b.n	8009ce6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	f003 0320 	and.w	r3, r3, #32
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d009      	beq.n	8009b6c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	015a      	lsls	r2, r3, #5
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	4413      	add	r3, r2
 8009b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b64:	461a      	mov	r2, r3
 8009b66:	2320      	movs	r3, #32
 8009b68:	6093      	str	r3, [r2, #8]
 8009b6a:	e0bc      	b.n	8009ce6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f040 80b7 	bne.w	8009ce6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4a5d      	ldr	r2, [pc, #372]	; (8009cf0 <PCD_EP_OutXfrComplete_int+0x210>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d90f      	bls.n	8009ba0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b96:	461a      	mov	r2, r3
 8009b98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b9c:	6093      	str	r3, [r2, #8]
 8009b9e:	e0a2      	b.n	8009ce6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009ba0:	6879      	ldr	r1, [r7, #4]
 8009ba2:	683a      	ldr	r2, [r7, #0]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	00db      	lsls	r3, r3, #3
 8009ba8:	1a9b      	subs	r3, r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	440b      	add	r3, r1
 8009bae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009bb2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	0159      	lsls	r1, r3, #5
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	440b      	add	r3, r1
 8009bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009bc6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	1a9b      	subs	r3, r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4403      	add	r3, r0
 8009bd6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009bda:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009bdc:	6879      	ldr	r1, [r7, #4]
 8009bde:	683a      	ldr	r2, [r7, #0]
 8009be0:	4613      	mov	r3, r2
 8009be2:	00db      	lsls	r3, r3, #3
 8009be4:	1a9b      	subs	r3, r3, r2
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	440b      	add	r3, r1
 8009bea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009bee:	6819      	ldr	r1, [r3, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	00db      	lsls	r3, r3, #3
 8009bf8:	1a9b      	subs	r3, r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4403      	add	r3, r0
 8009bfe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4419      	add	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	00db      	lsls	r3, r3, #3
 8009c0e:	1a9b      	subs	r3, r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4403      	add	r3, r0
 8009c14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009c18:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d114      	bne.n	8009c4a <PCD_EP_OutXfrComplete_int+0x16a>
 8009c20:	6879      	ldr	r1, [r7, #4]
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	4613      	mov	r3, r2
 8009c26:	00db      	lsls	r3, r3, #3
 8009c28:	1a9b      	subs	r3, r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	440b      	add	r3, r1
 8009c2e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d108      	bne.n	8009c4a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6818      	ldr	r0, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009c42:	461a      	mov	r2, r3
 8009c44:	2101      	movs	r1, #1
 8009c46:	f004 ffa9 	bl	800eb9c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f00e fcbf 	bl	80185d4 <HAL_PCD_DataOutStageCallback>
 8009c56:	e046      	b.n	8009ce6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	4a26      	ldr	r2, [pc, #152]	; (8009cf4 <PCD_EP_OutXfrComplete_int+0x214>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d124      	bne.n	8009caa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00a      	beq.n	8009c80 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	015a      	lsls	r2, r3, #5
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	4413      	add	r3, r2
 8009c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c76:	461a      	mov	r2, r3
 8009c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c7c:	6093      	str	r3, [r2, #8]
 8009c7e:	e032      	b.n	8009ce6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	f003 0320 	and.w	r3, r3, #32
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d008      	beq.n	8009c9c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c96:	461a      	mov	r2, r3
 8009c98:	2320      	movs	r3, #32
 8009c9a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f00e fc96 	bl	80185d4 <HAL_PCD_DataOutStageCallback>
 8009ca8:	e01d      	b.n	8009ce6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d114      	bne.n	8009cda <PCD_EP_OutXfrComplete_int+0x1fa>
 8009cb0:	6879      	ldr	r1, [r7, #4]
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	1a9b      	subs	r3, r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	440b      	add	r3, r1
 8009cbe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d108      	bne.n	8009cda <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6818      	ldr	r0, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	f004 ff61 	bl	800eb9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f00e fc77 	bl	80185d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3718      	adds	r7, #24
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	4f54300a 	.word	0x4f54300a
 8009cf4:	4f54310a 	.word	0x4f54310a

08009cf8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	333c      	adds	r3, #60	; 0x3c
 8009d10:	3304      	adds	r3, #4
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	015a      	lsls	r2, r3, #5
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	4a15      	ldr	r2, [pc, #84]	; (8009d80 <PCD_EP_OutSetupPacket_int+0x88>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d90e      	bls.n	8009d4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d009      	beq.n	8009d4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d44:	461a      	mov	r2, r3
 8009d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f00e fc2f 	bl	80185b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	4a0a      	ldr	r2, [pc, #40]	; (8009d80 <PCD_EP_OutSetupPacket_int+0x88>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d90c      	bls.n	8009d74 <PCD_EP_OutSetupPacket_int+0x7c>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d108      	bne.n	8009d74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	2101      	movs	r1, #1
 8009d70:	f004 ff14 	bl	800eb9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	4f54300a 	.word	0x4f54300a

08009d84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	70fb      	strb	r3, [r7, #3]
 8009d90:	4613      	mov	r3, r2
 8009d92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009d9c:	78fb      	ldrb	r3, [r7, #3]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d107      	bne.n	8009db2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009da2:	883b      	ldrh	r3, [r7, #0]
 8009da4:	0419      	lsls	r1, r3, #16
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68ba      	ldr	r2, [r7, #8]
 8009dac:	430a      	orrs	r2, r1
 8009dae:	629a      	str	r2, [r3, #40]	; 0x28
 8009db0:	e028      	b.n	8009e04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db8:	0c1b      	lsrs	r3, r3, #16
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	73fb      	strb	r3, [r7, #15]
 8009dc4:	e00d      	b.n	8009de2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	3340      	adds	r3, #64	; 0x40
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	0c1b      	lsrs	r3, r3, #16
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	4413      	add	r3, r2
 8009dda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009ddc:	7bfb      	ldrb	r3, [r7, #15]
 8009dde:	3301      	adds	r3, #1
 8009de0:	73fb      	strb	r3, [r7, #15]
 8009de2:	7bfa      	ldrb	r2, [r7, #15]
 8009de4:	78fb      	ldrb	r3, [r7, #3]
 8009de6:	3b01      	subs	r3, #1
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d3ec      	bcc.n	8009dc6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009dec:	883b      	ldrh	r3, [r7, #0]
 8009dee:	0418      	lsls	r0, r3, #16
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6819      	ldr	r1, [r3, #0]
 8009df4:	78fb      	ldrb	r3, [r7, #3]
 8009df6:	3b01      	subs	r3, #1
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	4302      	orrs	r2, r0
 8009dfc:	3340      	adds	r3, #64	; 0x40
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	440b      	add	r3, r1
 8009e02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	887a      	ldrh	r2, [r7, #2]
 8009e24:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8009e54:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <HAL_PWR_EnableWakeUpPin+0x20>)
 8009e56:	685a      	ldr	r2, [r3, #4]
 8009e58:	4904      	ldr	r1, [pc, #16]	; (8009e6c <HAL_PWR_EnableWakeUpPin+0x20>)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	604b      	str	r3, [r1, #4]
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	40007000 	.word	0x40007000

08009e70 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8009e78:	4b06      	ldr	r3, [pc, #24]	; (8009e94 <HAL_PWR_DisableWakeUpPin+0x24>)
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	43db      	mvns	r3, r3
 8009e80:	4904      	ldr	r1, [pc, #16]	; (8009e94 <HAL_PWR_DisableWakeUpPin+0x24>)
 8009e82:	4013      	ands	r3, r2
 8009e84:	604b      	str	r3, [r1, #4]
}
 8009e86:	bf00      	nop
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	40007000 	.word	0x40007000

08009e98 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8009e9c:	4b08      	ldr	r3, [pc, #32]	; (8009ec0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a07      	ldr	r2, [pc, #28]	; (8009ec0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8009ea2:	f043 0302 	orr.w	r3, r3, #2
 8009ea6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009ea8:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	4a05      	ldr	r2, [pc, #20]	; (8009ec4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8009eae:	f043 0304 	orr.w	r3, r3, #4
 8009eb2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8009eb4:	bf30      	wfi
}
 8009eb6:	bf00      	nop
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	40007000 	.word	0x40007000
 8009ec4:	e000ed00 	.word	0xe000ed00

08009ec8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d101      	bne.n	8009eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e264      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d075      	beq.n	8009fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009ee6:	4ba3      	ldr	r3, [pc, #652]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	f003 030c 	and.w	r3, r3, #12
 8009eee:	2b04      	cmp	r3, #4
 8009ef0:	d00c      	beq.n	8009f0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ef2:	4ba0      	ldr	r3, [pc, #640]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009efa:	2b08      	cmp	r3, #8
 8009efc:	d112      	bne.n	8009f24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009efe:	4b9d      	ldr	r3, [pc, #628]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f0a:	d10b      	bne.n	8009f24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f0c:	4b99      	ldr	r3, [pc, #612]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d05b      	beq.n	8009fd0 <HAL_RCC_OscConfig+0x108>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d157      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	e23f      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f2c:	d106      	bne.n	8009f3c <HAL_RCC_OscConfig+0x74>
 8009f2e:	4b91      	ldr	r3, [pc, #580]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a90      	ldr	r2, [pc, #576]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f38:	6013      	str	r3, [r2, #0]
 8009f3a:	e01d      	b.n	8009f78 <HAL_RCC_OscConfig+0xb0>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f44:	d10c      	bne.n	8009f60 <HAL_RCC_OscConfig+0x98>
 8009f46:	4b8b      	ldr	r3, [pc, #556]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a8a      	ldr	r2, [pc, #552]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f50:	6013      	str	r3, [r2, #0]
 8009f52:	4b88      	ldr	r3, [pc, #544]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a87      	ldr	r2, [pc, #540]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f5c:	6013      	str	r3, [r2, #0]
 8009f5e:	e00b      	b.n	8009f78 <HAL_RCC_OscConfig+0xb0>
 8009f60:	4b84      	ldr	r3, [pc, #528]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a83      	ldr	r2, [pc, #524]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f6a:	6013      	str	r3, [r2, #0]
 8009f6c:	4b81      	ldr	r3, [pc, #516]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a80      	ldr	r2, [pc, #512]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d013      	beq.n	8009fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f80:	f7fc ffc4 	bl	8006f0c <HAL_GetTick>
 8009f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f86:	e008      	b.n	8009f9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f88:	f7fc ffc0 	bl	8006f0c <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	2b64      	cmp	r3, #100	; 0x64
 8009f94:	d901      	bls.n	8009f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e204      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f9a:	4b76      	ldr	r3, [pc, #472]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0f0      	beq.n	8009f88 <HAL_RCC_OscConfig+0xc0>
 8009fa6:	e014      	b.n	8009fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fa8:	f7fc ffb0 	bl	8006f0c <HAL_GetTick>
 8009fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009fae:	e008      	b.n	8009fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009fb0:	f7fc ffac 	bl	8006f0c <HAL_GetTick>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	2b64      	cmp	r3, #100	; 0x64
 8009fbc:	d901      	bls.n	8009fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e1f0      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009fc2:	4b6c      	ldr	r3, [pc, #432]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1f0      	bne.n	8009fb0 <HAL_RCC_OscConfig+0xe8>
 8009fce:	e000      	b.n	8009fd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0302 	and.w	r3, r3, #2
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d063      	beq.n	800a0a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009fde:	4b65      	ldr	r3, [pc, #404]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f003 030c 	and.w	r3, r3, #12
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00b      	beq.n	800a002 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009fea:	4b62      	ldr	r3, [pc, #392]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009ff2:	2b08      	cmp	r3, #8
 8009ff4:	d11c      	bne.n	800a030 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ff6:	4b5f      	ldr	r3, [pc, #380]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d116      	bne.n	800a030 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a002:	4b5c      	ldr	r3, [pc, #368]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0302 	and.w	r3, r3, #2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <HAL_RCC_OscConfig+0x152>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d001      	beq.n	800a01a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e1c4      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a01a:	4b56      	ldr	r3, [pc, #344]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	4952      	ldr	r1, [pc, #328]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a02e:	e03a      	b.n	800a0a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d020      	beq.n	800a07a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a038:	4b4f      	ldr	r3, [pc, #316]	; (800a178 <HAL_RCC_OscConfig+0x2b0>)
 800a03a:	2201      	movs	r2, #1
 800a03c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a03e:	f7fc ff65 	bl	8006f0c <HAL_GetTick>
 800a042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a044:	e008      	b.n	800a058 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a046:	f7fc ff61 	bl	8006f0c <HAL_GetTick>
 800a04a:	4602      	mov	r2, r0
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	2b02      	cmp	r3, #2
 800a052:	d901      	bls.n	800a058 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	e1a5      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a058:	4b46      	ldr	r3, [pc, #280]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0302 	and.w	r3, r3, #2
 800a060:	2b00      	cmp	r3, #0
 800a062:	d0f0      	beq.n	800a046 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a064:	4b43      	ldr	r3, [pc, #268]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	00db      	lsls	r3, r3, #3
 800a072:	4940      	ldr	r1, [pc, #256]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 800a074:	4313      	orrs	r3, r2
 800a076:	600b      	str	r3, [r1, #0]
 800a078:	e015      	b.n	800a0a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a07a:	4b3f      	ldr	r3, [pc, #252]	; (800a178 <HAL_RCC_OscConfig+0x2b0>)
 800a07c:	2200      	movs	r2, #0
 800a07e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a080:	f7fc ff44 	bl	8006f0c <HAL_GetTick>
 800a084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a086:	e008      	b.n	800a09a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a088:	f7fc ff40 	bl	8006f0c <HAL_GetTick>
 800a08c:	4602      	mov	r2, r0
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	2b02      	cmp	r3, #2
 800a094:	d901      	bls.n	800a09a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e184      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a09a:	4b36      	ldr	r3, [pc, #216]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 0302 	and.w	r3, r3, #2
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1f0      	bne.n	800a088 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0308 	and.w	r3, r3, #8
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d030      	beq.n	800a114 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	695b      	ldr	r3, [r3, #20]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d016      	beq.n	800a0e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a0ba:	4b30      	ldr	r3, [pc, #192]	; (800a17c <HAL_RCC_OscConfig+0x2b4>)
 800a0bc:	2201      	movs	r2, #1
 800a0be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0c0:	f7fc ff24 	bl	8006f0c <HAL_GetTick>
 800a0c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0c6:	e008      	b.n	800a0da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0c8:	f7fc ff20 	bl	8006f0c <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d901      	bls.n	800a0da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e164      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0da:	4b26      	ldr	r3, [pc, #152]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 800a0dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0de:	f003 0302 	and.w	r3, r3, #2
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0f0      	beq.n	800a0c8 <HAL_RCC_OscConfig+0x200>
 800a0e6:	e015      	b.n	800a114 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0e8:	4b24      	ldr	r3, [pc, #144]	; (800a17c <HAL_RCC_OscConfig+0x2b4>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0ee:	f7fc ff0d 	bl	8006f0c <HAL_GetTick>
 800a0f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0f4:	e008      	b.n	800a108 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0f6:	f7fc ff09 	bl	8006f0c <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	2b02      	cmp	r3, #2
 800a102:	d901      	bls.n	800a108 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	e14d      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a108:	4b1a      	ldr	r3, [pc, #104]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 800a10a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a10c:	f003 0302 	and.w	r3, r3, #2
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1f0      	bne.n	800a0f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 0304 	and.w	r3, r3, #4
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f000 80a0 	beq.w	800a262 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a122:	2300      	movs	r3, #0
 800a124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a126:	4b13      	ldr	r3, [pc, #76]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 800a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10f      	bne.n	800a152 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a132:	2300      	movs	r3, #0
 800a134:	60bb      	str	r3, [r7, #8]
 800a136:	4b0f      	ldr	r3, [pc, #60]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 800a138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13a:	4a0e      	ldr	r2, [pc, #56]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 800a13c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a140:	6413      	str	r3, [r2, #64]	; 0x40
 800a142:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <HAL_RCC_OscConfig+0x2ac>)
 800a144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a14a:	60bb      	str	r3, [r7, #8]
 800a14c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a14e:	2301      	movs	r3, #1
 800a150:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a152:	4b0b      	ldr	r3, [pc, #44]	; (800a180 <HAL_RCC_OscConfig+0x2b8>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d121      	bne.n	800a1a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a15e:	4b08      	ldr	r3, [pc, #32]	; (800a180 <HAL_RCC_OscConfig+0x2b8>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a07      	ldr	r2, [pc, #28]	; (800a180 <HAL_RCC_OscConfig+0x2b8>)
 800a164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a16a:	f7fc fecf 	bl	8006f0c <HAL_GetTick>
 800a16e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a170:	e011      	b.n	800a196 <HAL_RCC_OscConfig+0x2ce>
 800a172:	bf00      	nop
 800a174:	40023800 	.word	0x40023800
 800a178:	42470000 	.word	0x42470000
 800a17c:	42470e80 	.word	0x42470e80
 800a180:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a184:	f7fc fec2 	bl	8006f0c <HAL_GetTick>
 800a188:	4602      	mov	r2, r0
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d901      	bls.n	800a196 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e106      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a196:	4b85      	ldr	r3, [pc, #532]	; (800a3ac <HAL_RCC_OscConfig+0x4e4>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d0f0      	beq.n	800a184 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d106      	bne.n	800a1b8 <HAL_RCC_OscConfig+0x2f0>
 800a1aa:	4b81      	ldr	r3, [pc, #516]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a1ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ae:	4a80      	ldr	r2, [pc, #512]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a1b0:	f043 0301 	orr.w	r3, r3, #1
 800a1b4:	6713      	str	r3, [r2, #112]	; 0x70
 800a1b6:	e01c      	b.n	800a1f2 <HAL_RCC_OscConfig+0x32a>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	2b05      	cmp	r3, #5
 800a1be:	d10c      	bne.n	800a1da <HAL_RCC_OscConfig+0x312>
 800a1c0:	4b7b      	ldr	r3, [pc, #492]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c4:	4a7a      	ldr	r2, [pc, #488]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a1c6:	f043 0304 	orr.w	r3, r3, #4
 800a1ca:	6713      	str	r3, [r2, #112]	; 0x70
 800a1cc:	4b78      	ldr	r3, [pc, #480]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a1ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d0:	4a77      	ldr	r2, [pc, #476]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a1d2:	f043 0301 	orr.w	r3, r3, #1
 800a1d6:	6713      	str	r3, [r2, #112]	; 0x70
 800a1d8:	e00b      	b.n	800a1f2 <HAL_RCC_OscConfig+0x32a>
 800a1da:	4b75      	ldr	r3, [pc, #468]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1de:	4a74      	ldr	r2, [pc, #464]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a1e0:	f023 0301 	bic.w	r3, r3, #1
 800a1e4:	6713      	str	r3, [r2, #112]	; 0x70
 800a1e6:	4b72      	ldr	r3, [pc, #456]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ea:	4a71      	ldr	r2, [pc, #452]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a1ec:	f023 0304 	bic.w	r3, r3, #4
 800a1f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d015      	beq.n	800a226 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1fa:	f7fc fe87 	bl	8006f0c <HAL_GetTick>
 800a1fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a200:	e00a      	b.n	800a218 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a202:	f7fc fe83 	bl	8006f0c <HAL_GetTick>
 800a206:	4602      	mov	r2, r0
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a210:	4293      	cmp	r3, r2
 800a212:	d901      	bls.n	800a218 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a214:	2303      	movs	r3, #3
 800a216:	e0c5      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a218:	4b65      	ldr	r3, [pc, #404]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a21a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a21c:	f003 0302 	and.w	r3, r3, #2
 800a220:	2b00      	cmp	r3, #0
 800a222:	d0ee      	beq.n	800a202 <HAL_RCC_OscConfig+0x33a>
 800a224:	e014      	b.n	800a250 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a226:	f7fc fe71 	bl	8006f0c <HAL_GetTick>
 800a22a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a22c:	e00a      	b.n	800a244 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a22e:	f7fc fe6d 	bl	8006f0c <HAL_GetTick>
 800a232:	4602      	mov	r2, r0
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	f241 3288 	movw	r2, #5000	; 0x1388
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d901      	bls.n	800a244 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a240:	2303      	movs	r3, #3
 800a242:	e0af      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a244:	4b5a      	ldr	r3, [pc, #360]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a248:	f003 0302 	and.w	r3, r3, #2
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1ee      	bne.n	800a22e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a250:	7dfb      	ldrb	r3, [r7, #23]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d105      	bne.n	800a262 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a256:	4b56      	ldr	r3, [pc, #344]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25a:	4a55      	ldr	r2, [pc, #340]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a25c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a260:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	2b00      	cmp	r3, #0
 800a268:	f000 809b 	beq.w	800a3a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a26c:	4b50      	ldr	r3, [pc, #320]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	f003 030c 	and.w	r3, r3, #12
 800a274:	2b08      	cmp	r3, #8
 800a276:	d05c      	beq.n	800a332 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d141      	bne.n	800a304 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a280:	4b4c      	ldr	r3, [pc, #304]	; (800a3b4 <HAL_RCC_OscConfig+0x4ec>)
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a286:	f7fc fe41 	bl	8006f0c <HAL_GetTick>
 800a28a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a28c:	e008      	b.n	800a2a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a28e:	f7fc fe3d 	bl	8006f0c <HAL_GetTick>
 800a292:	4602      	mov	r2, r0
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d901      	bls.n	800a2a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a29c:	2303      	movs	r3, #3
 800a29e:	e081      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2a0:	4b43      	ldr	r3, [pc, #268]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1f0      	bne.n	800a28e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	69da      	ldr	r2, [r3, #28]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6a1b      	ldr	r3, [r3, #32]
 800a2b4:	431a      	orrs	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ba:	019b      	lsls	r3, r3, #6
 800a2bc:	431a      	orrs	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c2:	085b      	lsrs	r3, r3, #1
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	041b      	lsls	r3, r3, #16
 800a2c8:	431a      	orrs	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ce:	061b      	lsls	r3, r3, #24
 800a2d0:	4937      	ldr	r1, [pc, #220]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a2d6:	4b37      	ldr	r3, [pc, #220]	; (800a3b4 <HAL_RCC_OscConfig+0x4ec>)
 800a2d8:	2201      	movs	r2, #1
 800a2da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2dc:	f7fc fe16 	bl	8006f0c <HAL_GetTick>
 800a2e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2e2:	e008      	b.n	800a2f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2e4:	f7fc fe12 	bl	8006f0c <HAL_GetTick>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d901      	bls.n	800a2f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	e056      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2f6:	4b2e      	ldr	r3, [pc, #184]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d0f0      	beq.n	800a2e4 <HAL_RCC_OscConfig+0x41c>
 800a302:	e04e      	b.n	800a3a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a304:	4b2b      	ldr	r3, [pc, #172]	; (800a3b4 <HAL_RCC_OscConfig+0x4ec>)
 800a306:	2200      	movs	r2, #0
 800a308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a30a:	f7fc fdff 	bl	8006f0c <HAL_GetTick>
 800a30e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a310:	e008      	b.n	800a324 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a312:	f7fc fdfb 	bl	8006f0c <HAL_GetTick>
 800a316:	4602      	mov	r2, r0
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d901      	bls.n	800a324 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a320:	2303      	movs	r3, #3
 800a322:	e03f      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a324:	4b22      	ldr	r3, [pc, #136]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1f0      	bne.n	800a312 <HAL_RCC_OscConfig+0x44a>
 800a330:	e037      	b.n	800a3a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	699b      	ldr	r3, [r3, #24]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d101      	bne.n	800a33e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e032      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a33e:	4b1c      	ldr	r3, [pc, #112]	; (800a3b0 <HAL_RCC_OscConfig+0x4e8>)
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d028      	beq.n	800a39e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a356:	429a      	cmp	r2, r3
 800a358:	d121      	bne.n	800a39e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a364:	429a      	cmp	r2, r3
 800a366:	d11a      	bne.n	800a39e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a36e:	4013      	ands	r3, r2
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a374:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a376:	4293      	cmp	r3, r2
 800a378:	d111      	bne.n	800a39e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a384:	085b      	lsrs	r3, r3, #1
 800a386:	3b01      	subs	r3, #1
 800a388:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d107      	bne.n	800a39e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a398:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d001      	beq.n	800a3a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e000      	b.n	800a3a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3718      	adds	r7, #24
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	40007000 	.word	0x40007000
 800a3b0:	40023800 	.word	0x40023800
 800a3b4:	42470060 	.word	0x42470060

0800a3b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d101      	bne.n	800a3cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e0cc      	b.n	800a566 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a3cc:	4b68      	ldr	r3, [pc, #416]	; (800a570 <HAL_RCC_ClockConfig+0x1b8>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 030f 	and.w	r3, r3, #15
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d90c      	bls.n	800a3f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3da:	4b65      	ldr	r3, [pc, #404]	; (800a570 <HAL_RCC_ClockConfig+0x1b8>)
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	b2d2      	uxtb	r2, r2
 800a3e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3e2:	4b63      	ldr	r3, [pc, #396]	; (800a570 <HAL_RCC_ClockConfig+0x1b8>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 030f 	and.w	r3, r3, #15
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d001      	beq.n	800a3f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e0b8      	b.n	800a566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0302 	and.w	r3, r3, #2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d020      	beq.n	800a442 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 0304 	and.w	r3, r3, #4
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d005      	beq.n	800a418 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a40c:	4b59      	ldr	r3, [pc, #356]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	4a58      	ldr	r2, [pc, #352]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a412:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a416:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 0308 	and.w	r3, r3, #8
 800a420:	2b00      	cmp	r3, #0
 800a422:	d005      	beq.n	800a430 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a424:	4b53      	ldr	r3, [pc, #332]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	4a52      	ldr	r2, [pc, #328]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a42a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a42e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a430:	4b50      	ldr	r3, [pc, #320]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	494d      	ldr	r1, [pc, #308]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a43e:	4313      	orrs	r3, r2
 800a440:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d044      	beq.n	800a4d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d107      	bne.n	800a466 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a456:	4b47      	ldr	r3, [pc, #284]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d119      	bne.n	800a496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e07f      	b.n	800a566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d003      	beq.n	800a476 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a472:	2b03      	cmp	r3, #3
 800a474:	d107      	bne.n	800a486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a476:	4b3f      	ldr	r3, [pc, #252]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d109      	bne.n	800a496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	e06f      	b.n	800a566 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a486:	4b3b      	ldr	r3, [pc, #236]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d101      	bne.n	800a496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e067      	b.n	800a566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a496:	4b37      	ldr	r3, [pc, #220]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	f023 0203 	bic.w	r2, r3, #3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	4934      	ldr	r1, [pc, #208]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a4a8:	f7fc fd30 	bl	8006f0c <HAL_GetTick>
 800a4ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4ae:	e00a      	b.n	800a4c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4b0:	f7fc fd2c 	bl	8006f0c <HAL_GetTick>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d901      	bls.n	800a4c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	e04f      	b.n	800a566 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4c6:	4b2b      	ldr	r3, [pc, #172]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	f003 020c 	and.w	r2, r3, #12
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d1eb      	bne.n	800a4b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a4d8:	4b25      	ldr	r3, [pc, #148]	; (800a570 <HAL_RCC_ClockConfig+0x1b8>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 030f 	and.w	r3, r3, #15
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d20c      	bcs.n	800a500 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4e6:	4b22      	ldr	r3, [pc, #136]	; (800a570 <HAL_RCC_ClockConfig+0x1b8>)
 800a4e8:	683a      	ldr	r2, [r7, #0]
 800a4ea:	b2d2      	uxtb	r2, r2
 800a4ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4ee:	4b20      	ldr	r3, [pc, #128]	; (800a570 <HAL_RCC_ClockConfig+0x1b8>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f003 030f 	and.w	r3, r3, #15
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d001      	beq.n	800a500 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e032      	b.n	800a566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 0304 	and.w	r3, r3, #4
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d008      	beq.n	800a51e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a50c:	4b19      	ldr	r3, [pc, #100]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	4916      	ldr	r1, [pc, #88]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a51a:	4313      	orrs	r3, r2
 800a51c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 0308 	and.w	r3, r3, #8
 800a526:	2b00      	cmp	r3, #0
 800a528:	d009      	beq.n	800a53e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a52a:	4b12      	ldr	r3, [pc, #72]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	00db      	lsls	r3, r3, #3
 800a538:	490e      	ldr	r1, [pc, #56]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a53a:	4313      	orrs	r3, r2
 800a53c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a53e:	f000 f821 	bl	800a584 <HAL_RCC_GetSysClockFreq>
 800a542:	4602      	mov	r2, r0
 800a544:	4b0b      	ldr	r3, [pc, #44]	; (800a574 <HAL_RCC_ClockConfig+0x1bc>)
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	091b      	lsrs	r3, r3, #4
 800a54a:	f003 030f 	and.w	r3, r3, #15
 800a54e:	490a      	ldr	r1, [pc, #40]	; (800a578 <HAL_RCC_ClockConfig+0x1c0>)
 800a550:	5ccb      	ldrb	r3, [r1, r3]
 800a552:	fa22 f303 	lsr.w	r3, r2, r3
 800a556:	4a09      	ldr	r2, [pc, #36]	; (800a57c <HAL_RCC_ClockConfig+0x1c4>)
 800a558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a55a:	4b09      	ldr	r3, [pc, #36]	; (800a580 <HAL_RCC_ClockConfig+0x1c8>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4618      	mov	r0, r3
 800a560:	f7f8 fd5a 	bl	8003018 <HAL_InitTick>

  return HAL_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	40023c00 	.word	0x40023c00
 800a574:	40023800 	.word	0x40023800
 800a578:	08020c08 	.word	0x08020c08
 800a57c:	20000000 	.word	0x20000000
 800a580:	2000001c 	.word	0x2000001c

0800a584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a584:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a588:	b084      	sub	sp, #16
 800a58a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a58c:	2300      	movs	r3, #0
 800a58e:	607b      	str	r3, [r7, #4]
 800a590:	2300      	movs	r3, #0
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	2300      	movs	r3, #0
 800a596:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a598:	2300      	movs	r3, #0
 800a59a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a59c:	4b67      	ldr	r3, [pc, #412]	; (800a73c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f003 030c 	and.w	r3, r3, #12
 800a5a4:	2b08      	cmp	r3, #8
 800a5a6:	d00d      	beq.n	800a5c4 <HAL_RCC_GetSysClockFreq+0x40>
 800a5a8:	2b08      	cmp	r3, #8
 800a5aa:	f200 80bd 	bhi.w	800a728 <HAL_RCC_GetSysClockFreq+0x1a4>
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d002      	beq.n	800a5b8 <HAL_RCC_GetSysClockFreq+0x34>
 800a5b2:	2b04      	cmp	r3, #4
 800a5b4:	d003      	beq.n	800a5be <HAL_RCC_GetSysClockFreq+0x3a>
 800a5b6:	e0b7      	b.n	800a728 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a5b8:	4b61      	ldr	r3, [pc, #388]	; (800a740 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a5ba:	60bb      	str	r3, [r7, #8]
       break;
 800a5bc:	e0b7      	b.n	800a72e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a5be:	4b60      	ldr	r3, [pc, #384]	; (800a740 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a5c0:	60bb      	str	r3, [r7, #8]
      break;
 800a5c2:	e0b4      	b.n	800a72e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a5c4:	4b5d      	ldr	r3, [pc, #372]	; (800a73c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a5ce:	4b5b      	ldr	r3, [pc, #364]	; (800a73c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d04d      	beq.n	800a676 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a5da:	4b58      	ldr	r3, [pc, #352]	; (800a73c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	099b      	lsrs	r3, r3, #6
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	f04f 0300 	mov.w	r3, #0
 800a5e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a5ea:	f04f 0100 	mov.w	r1, #0
 800a5ee:	ea02 0800 	and.w	r8, r2, r0
 800a5f2:	ea03 0901 	and.w	r9, r3, r1
 800a5f6:	4640      	mov	r0, r8
 800a5f8:	4649      	mov	r1, r9
 800a5fa:	f04f 0200 	mov.w	r2, #0
 800a5fe:	f04f 0300 	mov.w	r3, #0
 800a602:	014b      	lsls	r3, r1, #5
 800a604:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a608:	0142      	lsls	r2, r0, #5
 800a60a:	4610      	mov	r0, r2
 800a60c:	4619      	mov	r1, r3
 800a60e:	ebb0 0008 	subs.w	r0, r0, r8
 800a612:	eb61 0109 	sbc.w	r1, r1, r9
 800a616:	f04f 0200 	mov.w	r2, #0
 800a61a:	f04f 0300 	mov.w	r3, #0
 800a61e:	018b      	lsls	r3, r1, #6
 800a620:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a624:	0182      	lsls	r2, r0, #6
 800a626:	1a12      	subs	r2, r2, r0
 800a628:	eb63 0301 	sbc.w	r3, r3, r1
 800a62c:	f04f 0000 	mov.w	r0, #0
 800a630:	f04f 0100 	mov.w	r1, #0
 800a634:	00d9      	lsls	r1, r3, #3
 800a636:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a63a:	00d0      	lsls	r0, r2, #3
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	eb12 0208 	adds.w	r2, r2, r8
 800a644:	eb43 0309 	adc.w	r3, r3, r9
 800a648:	f04f 0000 	mov.w	r0, #0
 800a64c:	f04f 0100 	mov.w	r1, #0
 800a650:	0299      	lsls	r1, r3, #10
 800a652:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a656:	0290      	lsls	r0, r2, #10
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	4610      	mov	r0, r2
 800a65e:	4619      	mov	r1, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	461a      	mov	r2, r3
 800a664:	f04f 0300 	mov.w	r3, #0
 800a668:	f7f6 fb1e 	bl	8000ca8 <__aeabi_uldivmod>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	4613      	mov	r3, r2
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	e04a      	b.n	800a70c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a676:	4b31      	ldr	r3, [pc, #196]	; (800a73c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	099b      	lsrs	r3, r3, #6
 800a67c:	461a      	mov	r2, r3
 800a67e:	f04f 0300 	mov.w	r3, #0
 800a682:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a686:	f04f 0100 	mov.w	r1, #0
 800a68a:	ea02 0400 	and.w	r4, r2, r0
 800a68e:	ea03 0501 	and.w	r5, r3, r1
 800a692:	4620      	mov	r0, r4
 800a694:	4629      	mov	r1, r5
 800a696:	f04f 0200 	mov.w	r2, #0
 800a69a:	f04f 0300 	mov.w	r3, #0
 800a69e:	014b      	lsls	r3, r1, #5
 800a6a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a6a4:	0142      	lsls	r2, r0, #5
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	1b00      	subs	r0, r0, r4
 800a6ac:	eb61 0105 	sbc.w	r1, r1, r5
 800a6b0:	f04f 0200 	mov.w	r2, #0
 800a6b4:	f04f 0300 	mov.w	r3, #0
 800a6b8:	018b      	lsls	r3, r1, #6
 800a6ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a6be:	0182      	lsls	r2, r0, #6
 800a6c0:	1a12      	subs	r2, r2, r0
 800a6c2:	eb63 0301 	sbc.w	r3, r3, r1
 800a6c6:	f04f 0000 	mov.w	r0, #0
 800a6ca:	f04f 0100 	mov.w	r1, #0
 800a6ce:	00d9      	lsls	r1, r3, #3
 800a6d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a6d4:	00d0      	lsls	r0, r2, #3
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	1912      	adds	r2, r2, r4
 800a6dc:	eb45 0303 	adc.w	r3, r5, r3
 800a6e0:	f04f 0000 	mov.w	r0, #0
 800a6e4:	f04f 0100 	mov.w	r1, #0
 800a6e8:	0299      	lsls	r1, r3, #10
 800a6ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a6ee:	0290      	lsls	r0, r2, #10
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	f04f 0300 	mov.w	r3, #0
 800a700:	f7f6 fad2 	bl	8000ca8 <__aeabi_uldivmod>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	4613      	mov	r3, r2
 800a70a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a70c:	4b0b      	ldr	r3, [pc, #44]	; (800a73c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	0c1b      	lsrs	r3, r3, #16
 800a712:	f003 0303 	and.w	r3, r3, #3
 800a716:	3301      	adds	r3, #1
 800a718:	005b      	lsls	r3, r3, #1
 800a71a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	fbb2 f3f3 	udiv	r3, r2, r3
 800a724:	60bb      	str	r3, [r7, #8]
      break;
 800a726:	e002      	b.n	800a72e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a728:	4b05      	ldr	r3, [pc, #20]	; (800a740 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a72a:	60bb      	str	r3, [r7, #8]
      break;
 800a72c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a72e:	68bb      	ldr	r3, [r7, #8]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a73a:	bf00      	nop
 800a73c:	40023800 	.word	0x40023800
 800a740:	00f42400 	.word	0x00f42400

0800a744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a744:	b480      	push	{r7}
 800a746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a748:	4b03      	ldr	r3, [pc, #12]	; (800a758 <HAL_RCC_GetHCLKFreq+0x14>)
 800a74a:	681b      	ldr	r3, [r3, #0]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	20000000 	.word	0x20000000

0800a75c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a760:	f7ff fff0 	bl	800a744 <HAL_RCC_GetHCLKFreq>
 800a764:	4602      	mov	r2, r0
 800a766:	4b05      	ldr	r3, [pc, #20]	; (800a77c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	0a9b      	lsrs	r3, r3, #10
 800a76c:	f003 0307 	and.w	r3, r3, #7
 800a770:	4903      	ldr	r1, [pc, #12]	; (800a780 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a772:	5ccb      	ldrb	r3, [r1, r3]
 800a774:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a778:	4618      	mov	r0, r3
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	40023800 	.word	0x40023800
 800a780:	08020c18 	.word	0x08020c18

0800a784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a788:	f7ff ffdc 	bl	800a744 <HAL_RCC_GetHCLKFreq>
 800a78c:	4602      	mov	r2, r0
 800a78e:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	0b5b      	lsrs	r3, r3, #13
 800a794:	f003 0307 	and.w	r3, r3, #7
 800a798:	4903      	ldr	r1, [pc, #12]	; (800a7a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a79a:	5ccb      	ldrb	r3, [r1, r3]
 800a79c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	40023800 	.word	0x40023800
 800a7a8:	08020c18 	.word	0x08020c18

0800a7ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	220f      	movs	r2, #15
 800a7ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a7bc:	4b12      	ldr	r3, [pc, #72]	; (800a808 <HAL_RCC_GetClockConfig+0x5c>)
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	f003 0203 	and.w	r2, r3, #3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a7c8:	4b0f      	ldr	r3, [pc, #60]	; (800a808 <HAL_RCC_GetClockConfig+0x5c>)
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a7d4:	4b0c      	ldr	r3, [pc, #48]	; (800a808 <HAL_RCC_GetClockConfig+0x5c>)
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a7e0:	4b09      	ldr	r3, [pc, #36]	; (800a808 <HAL_RCC_GetClockConfig+0x5c>)
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	08db      	lsrs	r3, r3, #3
 800a7e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a7ee:	4b07      	ldr	r3, [pc, #28]	; (800a80c <HAL_RCC_GetClockConfig+0x60>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f003 020f 	and.w	r2, r3, #15
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	601a      	str	r2, [r3, #0]
}
 800a7fa:	bf00      	nop
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	40023800 	.word	0x40023800
 800a80c:	40023c00 	.word	0x40023c00

0800a810 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a818:	2300      	movs	r3, #0
 800a81a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a81c:	2300      	movs	r3, #0
 800a81e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0301 	and.w	r3, r3, #1
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10b      	bne.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a834:	2b00      	cmp	r3, #0
 800a836:	d105      	bne.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a840:	2b00      	cmp	r3, #0
 800a842:	d075      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a844:	4bad      	ldr	r3, [pc, #692]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a846:	2200      	movs	r2, #0
 800a848:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a84a:	f7fc fb5f 	bl	8006f0c <HAL_GetTick>
 800a84e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a850:	e008      	b.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a852:	f7fc fb5b 	bl	8006f0c <HAL_GetTick>
 800a856:	4602      	mov	r2, r0
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	1ad3      	subs	r3, r2, r3
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d901      	bls.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a860:	2303      	movs	r3, #3
 800a862:	e18b      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a864:	4ba6      	ldr	r3, [pc, #664]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1f0      	bne.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 0301 	and.w	r3, r3, #1
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d009      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	019a      	lsls	r2, r3, #6
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	071b      	lsls	r3, r3, #28
 800a888:	499d      	ldr	r1, [pc, #628]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a88a:	4313      	orrs	r3, r2
 800a88c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 0302 	and.w	r3, r3, #2
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d01f      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a89c:	4b98      	ldr	r3, [pc, #608]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a89e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8a2:	0f1b      	lsrs	r3, r3, #28
 800a8a4:	f003 0307 	and.w	r3, r3, #7
 800a8a8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	019a      	lsls	r2, r3, #6
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	061b      	lsls	r3, r3, #24
 800a8b6:	431a      	orrs	r2, r3
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	071b      	lsls	r3, r3, #28
 800a8bc:	4990      	ldr	r1, [pc, #576]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a8c4:	4b8e      	ldr	r3, [pc, #568]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a8c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8ca:	f023 021f 	bic.w	r2, r3, #31
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	498a      	ldr	r1, [pc, #552]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00d      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	019a      	lsls	r2, r3, #6
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	061b      	lsls	r3, r3, #24
 800a8f4:	431a      	orrs	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	071b      	lsls	r3, r3, #28
 800a8fc:	4980      	ldr	r1, [pc, #512]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a8fe:	4313      	orrs	r3, r2
 800a900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a904:	4b7d      	ldr	r3, [pc, #500]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a906:	2201      	movs	r2, #1
 800a908:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a90a:	f7fc faff 	bl	8006f0c <HAL_GetTick>
 800a90e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a910:	e008      	b.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a912:	f7fc fafb 	bl	8006f0c <HAL_GetTick>
 800a916:	4602      	mov	r2, r0
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	d901      	bls.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a920:	2303      	movs	r3, #3
 800a922:	e12b      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a924:	4b76      	ldr	r3, [pc, #472]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d0f0      	beq.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 0304 	and.w	r3, r3, #4
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d105      	bne.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a944:	2b00      	cmp	r3, #0
 800a946:	d079      	beq.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a948:	4b6e      	ldr	r3, [pc, #440]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a94e:	f7fc fadd 	bl	8006f0c <HAL_GetTick>
 800a952:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a954:	e008      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a956:	f7fc fad9 	bl	8006f0c <HAL_GetTick>
 800a95a:	4602      	mov	r2, r0
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	2b02      	cmp	r3, #2
 800a962:	d901      	bls.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	e109      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a968:	4b65      	ldr	r3, [pc, #404]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a974:	d0ef      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 0304 	and.w	r3, r3, #4
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d020      	beq.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a982:	4b5f      	ldr	r3, [pc, #380]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a988:	0f1b      	lsrs	r3, r3, #28
 800a98a:	f003 0307 	and.w	r3, r3, #7
 800a98e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	019a      	lsls	r2, r3, #6
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	061b      	lsls	r3, r3, #24
 800a99c:	431a      	orrs	r2, r3
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	071b      	lsls	r3, r3, #28
 800a9a2:	4957      	ldr	r1, [pc, #348]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a9aa:	4b55      	ldr	r3, [pc, #340]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a9ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	021b      	lsls	r3, r3, #8
 800a9bc:	4950      	ldr	r1, [pc, #320]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0308 	and.w	r3, r3, #8
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d01e      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a9d0:	4b4b      	ldr	r3, [pc, #300]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a9d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d6:	0e1b      	lsrs	r3, r3, #24
 800a9d8:	f003 030f 	and.w	r3, r3, #15
 800a9dc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	019a      	lsls	r2, r3, #6
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	061b      	lsls	r3, r3, #24
 800a9e8:	431a      	orrs	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	071b      	lsls	r3, r3, #28
 800a9f0:	4943      	ldr	r1, [pc, #268]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a9f8:	4b41      	ldr	r3, [pc, #260]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a9fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa06:	493e      	ldr	r1, [pc, #248]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800aa0e:	4b3d      	ldr	r3, [pc, #244]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa10:	2201      	movs	r2, #1
 800aa12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aa14:	f7fc fa7a 	bl	8006f0c <HAL_GetTick>
 800aa18:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aa1a:	e008      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800aa1c:	f7fc fa76 	bl	8006f0c <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d901      	bls.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e0a6      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aa2e:	4b34      	ldr	r3, [pc, #208]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa3a:	d1ef      	bne.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f003 0320 	and.w	r3, r3, #32
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f000 808d 	beq.w	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	60fb      	str	r3, [r7, #12]
 800aa4e:	4b2c      	ldr	r3, [pc, #176]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aa50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa52:	4a2b      	ldr	r2, [pc, #172]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aa54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa58:	6413      	str	r3, [r2, #64]	; 0x40
 800aa5a:	4b29      	ldr	r3, [pc, #164]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aa5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa62:	60fb      	str	r3, [r7, #12]
 800aa64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800aa66:	4b28      	ldr	r3, [pc, #160]	; (800ab08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a27      	ldr	r2, [pc, #156]	; (800ab08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800aa6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aa72:	f7fc fa4b 	bl	8006f0c <HAL_GetTick>
 800aa76:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800aa78:	e008      	b.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800aa7a:	f7fc fa47 	bl	8006f0c <HAL_GetTick>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d901      	bls.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e077      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800aa8c:	4b1e      	ldr	r3, [pc, #120]	; (800ab08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d0f0      	beq.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800aa98:	4b19      	ldr	r3, [pc, #100]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aa9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaa0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d039      	beq.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d032      	beq.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aab6:	4b12      	ldr	r3, [pc, #72]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aabe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800aac0:	4b12      	ldr	r3, [pc, #72]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800aac2:	2201      	movs	r2, #1
 800aac4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800aac6:	4b11      	ldr	r3, [pc, #68]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800aacc:	4a0c      	ldr	r2, [pc, #48]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800aad2:	4b0b      	ldr	r3, [pc, #44]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aad6:	f003 0301 	and.w	r3, r3, #1
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d11e      	bne.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800aade:	f7fc fa15 	bl	8006f0c <HAL_GetTick>
 800aae2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aae4:	e014      	b.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aae6:	f7fc fa11 	bl	8006f0c <HAL_GetTick>
 800aaea:	4602      	mov	r2, r0
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d90b      	bls.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e03f      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800aafc:	42470068 	.word	0x42470068
 800ab00:	40023800 	.word	0x40023800
 800ab04:	42470070 	.word	0x42470070
 800ab08:	40007000 	.word	0x40007000
 800ab0c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab10:	4b1c      	ldr	r3, [pc, #112]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab14:	f003 0302 	and.w	r3, r3, #2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d0e4      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab28:	d10d      	bne.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800ab2a:	4b16      	ldr	r3, [pc, #88]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ab3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab3e:	4911      	ldr	r1, [pc, #68]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab40:	4313      	orrs	r3, r2
 800ab42:	608b      	str	r3, [r1, #8]
 800ab44:	e005      	b.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ab46:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	4a0e      	ldr	r2, [pc, #56]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab4c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ab50:	6093      	str	r3, [r2, #8]
 800ab52:	4b0c      	ldr	r3, [pc, #48]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab5e:	4909      	ldr	r1, [pc, #36]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab60:	4313      	orrs	r3, r2
 800ab62:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 0310 	and.w	r3, r3, #16
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d004      	beq.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800ab76:	4b04      	ldr	r3, [pc, #16]	; (800ab88 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800ab78:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	40023800 	.word	0x40023800
 800ab88:	424711e0 	.word	0x424711e0

0800ab8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d101      	bne.n	800ab9e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e083      	b.n	800aca6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	7f5b      	ldrb	r3, [r3, #29]
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d105      	bne.n	800abb4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f7f8 f83e 	bl	8002c30 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2202      	movs	r2, #2
 800abb8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	22ca      	movs	r2, #202	; 0xca
 800abc0:	625a      	str	r2, [r3, #36]	; 0x24
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2253      	movs	r2, #83	; 0x53
 800abc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fc26 	bl	800b41c <RTC_EnterInitMode>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d008      	beq.n	800abe8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	22ff      	movs	r2, #255	; 0xff
 800abdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2204      	movs	r2, #4
 800abe2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	e05e      	b.n	800aca6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	6812      	ldr	r2, [r2, #0]
 800abf2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800abf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abfa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6899      	ldr	r1, [r3, #8]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685a      	ldr	r2, [r3, #4]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	431a      	orrs	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	431a      	orrs	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	430a      	orrs	r2, r1
 800ac18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	68d2      	ldr	r2, [r2, #12]
 800ac22:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	6919      	ldr	r1, [r3, #16]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	041a      	lsls	r2, r3, #16
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	430a      	orrs	r2, r1
 800ac36:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68da      	ldr	r2, [r3, #12]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac46:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	f003 0320 	and.w	r3, r3, #32
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10e      	bne.n	800ac74 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 fbb8 	bl	800b3cc <HAL_RTC_WaitForSynchro>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d008      	beq.n	800ac74 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	22ff      	movs	r2, #255	; 0xff
 800ac68:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2204      	movs	r2, #4
 800ac6e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	e018      	b.n	800aca6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ac82:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	699a      	ldr	r2, [r3, #24]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	430a      	orrs	r2, r1
 800ac94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	22ff      	movs	r2, #255	; 0xff
 800ac9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800aca4:	2300      	movs	r3, #0
  }
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800acae:	b590      	push	{r4, r7, lr}
 800acb0:	b087      	sub	sp, #28
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	60f8      	str	r0, [r7, #12]
 800acb6:	60b9      	str	r1, [r7, #8]
 800acb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800acba:	2300      	movs	r3, #0
 800acbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	7f1b      	ldrb	r3, [r3, #28]
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d101      	bne.n	800acca <HAL_RTC_SetTime+0x1c>
 800acc6:	2302      	movs	r3, #2
 800acc8:	e0aa      	b.n	800ae20 <HAL_RTC_SetTime+0x172>
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2201      	movs	r2, #1
 800acce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2202      	movs	r2, #2
 800acd4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d126      	bne.n	800ad2a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d102      	bne.n	800acf0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	2200      	movs	r2, #0
 800acee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 fbbd 	bl	800b474 <RTC_ByteToBcd2>
 800acfa:	4603      	mov	r3, r0
 800acfc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	785b      	ldrb	r3, [r3, #1]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f000 fbb6 	bl	800b474 <RTC_ByteToBcd2>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ad0c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	789b      	ldrb	r3, [r3, #2]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 fbae 	bl	800b474 <RTC_ByteToBcd2>
 800ad18:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800ad1a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	78db      	ldrb	r3, [r3, #3]
 800ad22:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ad24:	4313      	orrs	r3, r2
 800ad26:	617b      	str	r3, [r7, #20]
 800ad28:	e018      	b.n	800ad5c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d102      	bne.n	800ad3e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	785b      	ldrb	r3, [r3, #1]
 800ad48:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ad4a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800ad50:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	78db      	ldrb	r3, [r3, #3]
 800ad56:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	22ca      	movs	r2, #202	; 0xca
 800ad62:	625a      	str	r2, [r3, #36]	; 0x24
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2253      	movs	r2, #83	; 0x53
 800ad6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	f000 fb55 	bl	800b41c <RTC_EnterInitMode>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00b      	beq.n	800ad90 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	22ff      	movs	r2, #255	; 0xff
 800ad7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2204      	movs	r2, #4
 800ad84:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e047      	b.n	800ae20 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ad9a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ad9e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	689a      	ldr	r2, [r3, #8]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800adae:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	6899      	ldr	r1, [r3, #8]
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	68da      	ldr	r2, [r3, #12]
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	431a      	orrs	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	430a      	orrs	r2, r1
 800adc6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	68da      	ldr	r2, [r3, #12]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800add6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	f003 0320 	and.w	r3, r3, #32
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d111      	bne.n	800ae0a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f000 faf0 	bl	800b3cc <HAL_RTC_WaitForSynchro>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00b      	beq.n	800ae0a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	22ff      	movs	r2, #255	; 0xff
 800adf8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2204      	movs	r2, #4
 800adfe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e00a      	b.n	800ae20 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	22ff      	movs	r2, #255	; 0xff
 800ae10:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2201      	movs	r2, #1
 800ae16:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
  }
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	371c      	adds	r7, #28
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd90      	pop	{r4, r7, pc}

0800ae28 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ae34:	2300      	movs	r3, #0
 800ae36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ae5a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ae5e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	0c1b      	lsrs	r3, r3, #16
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	0a1b      	lsrs	r3, r3, #8
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae7a:	b2da      	uxtb	r2, r3
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	0c1b      	lsrs	r3, r3, #16
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d11a      	bne.n	800aeda <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 fb01 	bl	800b4b0 <RTC_Bcd2ToByte>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	785b      	ldrb	r3, [r3, #1]
 800aeba:	4618      	mov	r0, r3
 800aebc:	f000 faf8 	bl	800b4b0 <RTC_Bcd2ToByte>
 800aec0:	4603      	mov	r3, r0
 800aec2:	461a      	mov	r2, r3
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	789b      	ldrb	r3, [r3, #2]
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 faef 	bl	800b4b0 <RTC_Bcd2ToByte>
 800aed2:	4603      	mov	r3, r0
 800aed4:	461a      	mov	r2, r3
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3718      	adds	r7, #24
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800aee4:	b590      	push	{r4, r7, lr}
 800aee6:	b087      	sub	sp, #28
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	7f1b      	ldrb	r3, [r3, #28]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d101      	bne.n	800af00 <HAL_RTC_SetDate+0x1c>
 800aefc:	2302      	movs	r3, #2
 800aefe:	e094      	b.n	800b02a <HAL_RTC_SetDate+0x146>
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2201      	movs	r2, #1
 800af04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2202      	movs	r2, #2
 800af0a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d10e      	bne.n	800af30 <HAL_RTC_SetDate+0x4c>
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	785b      	ldrb	r3, [r3, #1]
 800af16:	f003 0310 	and.w	r3, r3, #16
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d008      	beq.n	800af30 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	785b      	ldrb	r3, [r3, #1]
 800af22:	f023 0310 	bic.w	r3, r3, #16
 800af26:	b2db      	uxtb	r3, r3
 800af28:	330a      	adds	r3, #10
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d11c      	bne.n	800af70 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	78db      	ldrb	r3, [r3, #3]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 fa9a 	bl	800b474 <RTC_ByteToBcd2>
 800af40:	4603      	mov	r3, r0
 800af42:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	785b      	ldrb	r3, [r3, #1]
 800af48:	4618      	mov	r0, r3
 800af4a:	f000 fa93 	bl	800b474 <RTC_ByteToBcd2>
 800af4e:	4603      	mov	r3, r0
 800af50:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800af52:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	789b      	ldrb	r3, [r3, #2]
 800af58:	4618      	mov	r0, r3
 800af5a:	f000 fa8b 	bl	800b474 <RTC_ByteToBcd2>
 800af5e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800af60:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800af6a:	4313      	orrs	r3, r2
 800af6c:	617b      	str	r3, [r7, #20]
 800af6e:	e00e      	b.n	800af8e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	78db      	ldrb	r3, [r3, #3]
 800af74:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	785b      	ldrb	r3, [r3, #1]
 800af7a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800af7c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800af7e:	68ba      	ldr	r2, [r7, #8]
 800af80:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800af82:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800af8a:	4313      	orrs	r3, r2
 800af8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	22ca      	movs	r2, #202	; 0xca
 800af94:	625a      	str	r2, [r3, #36]	; 0x24
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2253      	movs	r2, #83	; 0x53
 800af9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f000 fa3c 	bl	800b41c <RTC_EnterInitMode>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00b      	beq.n	800afc2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	22ff      	movs	r2, #255	; 0xff
 800afb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2204      	movs	r2, #4
 800afb6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2200      	movs	r2, #0
 800afbc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	e033      	b.n	800b02a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800afcc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800afd0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68da      	ldr	r2, [r3, #12]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afe0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	f003 0320 	and.w	r3, r3, #32
 800afec:	2b00      	cmp	r3, #0
 800afee:	d111      	bne.n	800b014 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f000 f9eb 	bl	800b3cc <HAL_RTC_WaitForSynchro>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00b      	beq.n	800b014 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	22ff      	movs	r2, #255	; 0xff
 800b002:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2204      	movs	r2, #4
 800b008:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2200      	movs	r2, #0
 800b00e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e00a      	b.n	800b02a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	22ff      	movs	r2, #255	; 0xff
 800b01a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2201      	movs	r2, #1
 800b020:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800b028:	2300      	movs	r3, #0
  }
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	371c      	adds	r7, #28
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd90      	pop	{r4, r7, pc}

0800b032 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b086      	sub	sp, #24
 800b036:	af00      	add	r7, sp, #0
 800b038:	60f8      	str	r0, [r7, #12]
 800b03a:	60b9      	str	r1, [r7, #8]
 800b03c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b03e:	2300      	movs	r3, #0
 800b040:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b04c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b050:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	0c1b      	lsrs	r3, r3, #16
 800b056:	b2da      	uxtb	r2, r3
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	0a1b      	lsrs	r3, r3, #8
 800b060:	b2db      	uxtb	r3, r3
 800b062:	f003 031f 	and.w	r3, r3, #31
 800b066:	b2da      	uxtb	r2, r3
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b074:	b2da      	uxtb	r2, r3
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	0b5b      	lsrs	r3, r3, #13
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	f003 0307 	and.w	r3, r3, #7
 800b084:	b2da      	uxtb	r2, r3
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d11a      	bne.n	800b0c6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	78db      	ldrb	r3, [r3, #3]
 800b094:	4618      	mov	r0, r3
 800b096:	f000 fa0b 	bl	800b4b0 <RTC_Bcd2ToByte>
 800b09a:	4603      	mov	r3, r0
 800b09c:	461a      	mov	r2, r3
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	785b      	ldrb	r3, [r3, #1]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 fa02 	bl	800b4b0 <RTC_Bcd2ToByte>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	789b      	ldrb	r3, [r3, #2]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f000 f9f9 	bl	800b4b0 <RTC_Bcd2ToByte>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3718      	adds	r7, #24
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b0d0:	b590      	push	{r4, r7, lr}
 800b0d2:	b089      	sub	sp, #36	; 0x24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	61fb      	str	r3, [r7, #28]
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800b0e4:	4b93      	ldr	r3, [pc, #588]	; (800b334 <HAL_RTC_SetAlarm_IT+0x264>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a93      	ldr	r2, [pc, #588]	; (800b338 <HAL_RTC_SetAlarm_IT+0x268>)
 800b0ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ee:	0adb      	lsrs	r3, r3, #11
 800b0f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0f4:	fb02 f303 	mul.w	r3, r2, r3
 800b0f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	7f1b      	ldrb	r3, [r3, #28]
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d101      	bne.n	800b106 <HAL_RTC_SetAlarm_IT+0x36>
 800b102:	2302      	movs	r3, #2
 800b104:	e111      	b.n	800b32a <HAL_RTC_SetAlarm_IT+0x25a>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2201      	movs	r2, #1
 800b10a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2202      	movs	r2, #2
 800b110:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d137      	bne.n	800b188 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b122:	2b00      	cmp	r3, #0
 800b124:	d102      	bne.n	800b12c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2200      	movs	r2, #0
 800b12a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	4618      	mov	r0, r3
 800b132:	f000 f99f 	bl	800b474 <RTC_ByteToBcd2>
 800b136:	4603      	mov	r3, r0
 800b138:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	785b      	ldrb	r3, [r3, #1]
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 f998 	bl	800b474 <RTC_ByteToBcd2>
 800b144:	4603      	mov	r3, r0
 800b146:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b148:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	789b      	ldrb	r3, [r3, #2]
 800b14e:	4618      	mov	r0, r3
 800b150:	f000 f990 	bl	800b474 <RTC_ByteToBcd2>
 800b154:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b156:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	78db      	ldrb	r3, [r3, #3]
 800b15e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800b160:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 f982 	bl	800b474 <RTC_ByteToBcd2>
 800b170:	4603      	mov	r3, r0
 800b172:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b174:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b17c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b182:	4313      	orrs	r3, r2
 800b184:	61fb      	str	r3, [r7, #28]
 800b186:	e023      	b.n	800b1d0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b192:	2b00      	cmp	r3, #0
 800b194:	d102      	bne.n	800b19c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	2200      	movs	r2, #0
 800b19a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	785b      	ldrb	r3, [r3, #1]
 800b1a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b1a8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800b1aa:	68ba      	ldr	r2, [r7, #8]
 800b1ac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b1ae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	78db      	ldrb	r3, [r3, #3]
 800b1b4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800b1b6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b1be:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b1c0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b1c6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	685a      	ldr	r2, [r3, #4]
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	22ca      	movs	r2, #202	; 0xca
 800b1e2:	625a      	str	r2, [r3, #36]	; 0x24
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2253      	movs	r2, #83	; 0x53
 800b1ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1f4:	d141      	bne.n	800b27a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	689a      	ldr	r2, [r3, #8]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b204:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800b216:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	1e5a      	subs	r2, r3, #1
 800b21c:	617a      	str	r2, [r7, #20]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d10b      	bne.n	800b23a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	22ff      	movs	r2, #255	; 0xff
 800b228:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2203      	movs	r2, #3
 800b22e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2200      	movs	r2, #0
 800b234:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b236:	2303      	movs	r3, #3
 800b238:	e077      	b.n	800b32a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f003 0301 	and.w	r3, r3, #1
 800b244:	2b00      	cmp	r3, #0
 800b246:	d0e7      	beq.n	800b218 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	69fa      	ldr	r2, [r7, #28]
 800b24e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	69ba      	ldr	r2, [r7, #24]
 800b256:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	689a      	ldr	r2, [r3, #8]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b266:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	689a      	ldr	r2, [r3, #8]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b276:	609a      	str	r2, [r3, #8]
 800b278:	e040      	b.n	800b2fc <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	689a      	ldr	r2, [r3, #8]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b288:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	b2da      	uxtb	r2, r3
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f462 7220 	orn	r2, r2, #640	; 0x280
 800b29a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	1e5a      	subs	r2, r3, #1
 800b2a0:	617a      	str	r2, [r7, #20]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10b      	bne.n	800b2be <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	22ff      	movs	r2, #255	; 0xff
 800b2ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2203      	movs	r2, #3
 800b2b2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	e035      	b.n	800b32a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f003 0302 	and.w	r3, r3, #2
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d0e7      	beq.n	800b29c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	69fa      	ldr	r2, [r7, #28]
 800b2d2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	69ba      	ldr	r2, [r7, #24]
 800b2da:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	689a      	ldr	r2, [r3, #8]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2ea:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	689a      	ldr	r2, [r3, #8]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2fa:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b2fc:	4b0f      	ldr	r3, [pc, #60]	; (800b33c <HAL_RTC_SetAlarm_IT+0x26c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a0e      	ldr	r2, [pc, #56]	; (800b33c <HAL_RTC_SetAlarm_IT+0x26c>)
 800b302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b306:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800b308:	4b0c      	ldr	r3, [pc, #48]	; (800b33c <HAL_RTC_SetAlarm_IT+0x26c>)
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	4a0b      	ldr	r2, [pc, #44]	; (800b33c <HAL_RTC_SetAlarm_IT+0x26c>)
 800b30e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b312:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	22ff      	movs	r2, #255	; 0xff
 800b31a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2201      	movs	r2, #1
 800b320:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2200      	movs	r2, #0
 800b326:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3724      	adds	r7, #36	; 0x24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd90      	pop	{r4, r7, pc}
 800b332:	bf00      	nop
 800b334:	20000000 	.word	0x20000000
 800b338:	10624dd3 	.word	0x10624dd3
 800b33c:	40013c00 	.word	0x40013c00

0800b340 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d012      	beq.n	800b37c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00b      	beq.n	800b37c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f7fb f90d 	bl	8006584 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	b2da      	uxtb	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800b37a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b386:	2b00      	cmp	r3, #0
 800b388:	d012      	beq.n	800b3b0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00b      	beq.n	800b3b0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f9bf 	bl	800b71c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	b2da      	uxtb	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f462 7220 	orn	r2, r2, #640	; 0x280
 800b3ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800b3b0:	4b05      	ldr	r3, [pc, #20]	; (800b3c8 <HAL_RTC_AlarmIRQHandler+0x88>)
 800b3b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b3b6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	775a      	strb	r2, [r3, #29]
}
 800b3be:	bf00      	nop
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	40013c00 	.word	0x40013c00

0800b3cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68da      	ldr	r2, [r3, #12]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b3e6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b3e8:	f7fb fd90 	bl	8006f0c <HAL_GetTick>
 800b3ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b3ee:	e009      	b.n	800b404 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b3f0:	f7fb fd8c 	bl	8006f0c <HAL_GetTick>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	1ad3      	subs	r3, r2, r3
 800b3fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3fe:	d901      	bls.n	800b404 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b400:	2303      	movs	r3, #3
 800b402:	e007      	b.n	800b414 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	f003 0320 	and.w	r3, r3, #32
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d0ee      	beq.n	800b3f0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b412:	2300      	movs	r3, #0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b424:	2300      	movs	r3, #0
 800b426:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b432:	2b00      	cmp	r3, #0
 800b434:	d119      	bne.n	800b46a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f04f 32ff 	mov.w	r2, #4294967295
 800b43e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b440:	f7fb fd64 	bl	8006f0c <HAL_GetTick>
 800b444:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b446:	e009      	b.n	800b45c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b448:	f7fb fd60 	bl	8006f0c <HAL_GetTick>
 800b44c:	4602      	mov	r2, r0
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b456:	d901      	bls.n	800b45c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800b458:	2303      	movs	r3, #3
 800b45a:	e007      	b.n	800b46c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b466:	2b00      	cmp	r3, #0
 800b468:	d0ee      	beq.n	800b448 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	4603      	mov	r3, r0
 800b47c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b47e:	2300      	movs	r3, #0
 800b480:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800b482:	e005      	b.n	800b490 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	3301      	adds	r3, #1
 800b488:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800b48a:	79fb      	ldrb	r3, [r7, #7]
 800b48c:	3b0a      	subs	r3, #10
 800b48e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800b490:	79fb      	ldrb	r3, [r7, #7]
 800b492:	2b09      	cmp	r3, #9
 800b494:	d8f6      	bhi.n	800b484 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	011b      	lsls	r3, r3, #4
 800b49c:	b2da      	uxtb	r2, r3
 800b49e:	79fb      	ldrb	r3, [r7, #7]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	b2db      	uxtb	r3, r3
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3714      	adds	r7, #20
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b4be:	79fb      	ldrb	r3, [r7, #7]
 800b4c0:	091b      	lsrs	r3, r3, #4
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4413      	add	r3, r2
 800b4cc:	005b      	lsls	r3, r3, #1
 800b4ce:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800b4d0:	79fb      	ldrb	r3, [r7, #7]
 800b4d2:	f003 030f 	and.w	r3, r3, #15
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	4413      	add	r3, r2
 800b4de:	b2db      	uxtb	r3, r3
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3714      	adds	r7, #20
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	7f1b      	ldrb	r3, [r3, #28]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d101      	bne.n	800b504 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800b500:	2302      	movs	r3, #2
 800b502:	e0a6      	b.n	800b652 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2201      	movs	r2, #1
 800b508:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2202      	movs	r2, #2
 800b50e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	22ca      	movs	r2, #202	; 0xca
 800b516:	625a      	str	r2, [r3, #36]	; 0x24
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2253      	movs	r2, #83	; 0x53
 800b51e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d022      	beq.n	800b574 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800b52e:	4b4c      	ldr	r3, [pc, #304]	; (800b660 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a4c      	ldr	r2, [pc, #304]	; (800b664 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800b534:	fba2 2303 	umull	r2, r3, r2, r3
 800b538:	0adb      	lsrs	r3, r3, #11
 800b53a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b53e:	fb02 f303 	mul.w	r3, r2, r3
 800b542:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	1e5a      	subs	r2, r3, #1
 800b548:	617a      	str	r2, [r7, #20]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10b      	bne.n	800b566 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	22ff      	movs	r2, #255	; 0xff
 800b554:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2203      	movs	r2, #3
 800b55a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b562:	2303      	movs	r3, #3
 800b564:	e075      	b.n	800b652 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	f003 0304 	and.w	r3, r3, #4
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1e7      	bne.n	800b544 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	689a      	ldr	r2, [r3, #8]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b582:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800b584:	4b36      	ldr	r3, [pc, #216]	; (800b660 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a36      	ldr	r2, [pc, #216]	; (800b664 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800b58a:	fba2 2303 	umull	r2, r3, r2, r3
 800b58e:	0adb      	lsrs	r3, r3, #11
 800b590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b594:	fb02 f303 	mul.w	r3, r2, r3
 800b598:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	1e5a      	subs	r2, r3, #1
 800b59e:	617a      	str	r2, [r7, #20]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10b      	bne.n	800b5bc <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	22ff      	movs	r2, #255	; 0xff
 800b5aa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2203      	movs	r2, #3
 800b5b0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	e04a      	b.n	800b652 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	f003 0304 	and.w	r3, r3, #4
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d0e7      	beq.n	800b59a <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68ba      	ldr	r2, [r7, #8]
 800b5d0:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	689a      	ldr	r2, [r3, #8]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f022 0207 	bic.w	r2, r2, #7
 800b5e0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	6899      	ldr	r1, [r3, #8]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	430a      	orrs	r2, r1
 800b5f0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800b5f2:	4b1d      	ldr	r3, [pc, #116]	; (800b668 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a1c      	ldr	r2, [pc, #112]	; (800b668 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b5f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b5fc:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800b5fe:	4b1a      	ldr	r3, [pc, #104]	; (800b668 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	4a19      	ldr	r2, [pc, #100]	; (800b668 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b608:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	b2da      	uxtb	r2, r3
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800b61a:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	689a      	ldr	r2, [r3, #8]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b62a:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689a      	ldr	r2, [r3, #8]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b63a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	22ff      	movs	r2, #255	; 0xff
 800b642:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2201      	movs	r2, #1
 800b648:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2200      	movs	r2, #0
 800b64e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	371c      	adds	r7, #28
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	20000000 	.word	0x20000000
 800b664:	10624dd3 	.word	0x10624dd3
 800b668:	40013c00 	.word	0x40013c00

0800b66c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b674:	2300      	movs	r3, #0
 800b676:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	7f1b      	ldrb	r3, [r3, #28]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d101      	bne.n	800b684 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800b680:	2302      	movs	r3, #2
 800b682:	e047      	b.n	800b714 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2202      	movs	r2, #2
 800b68e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	22ca      	movs	r2, #202	; 0xca
 800b696:	625a      	str	r2, [r3, #36]	; 0x24
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2253      	movs	r2, #83	; 0x53
 800b69e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	689a      	ldr	r2, [r3, #8]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6ae:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	689a      	ldr	r2, [r3, #8]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b6be:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b6c0:	f7fb fc24 	bl	8006f0c <HAL_GetTick>
 800b6c4:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800b6c6:	e013      	b.n	800b6f0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b6c8:	f7fb fc20 	bl	8006f0c <HAL_GetTick>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6d6:	d90b      	bls.n	800b6f0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	22ff      	movs	r2, #255	; 0xff
 800b6de:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2203      	movs	r2, #3
 800b6e4:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	e011      	b.n	800b714 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	f003 0304 	and.w	r3, r3, #4
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0e4      	beq.n	800b6c8 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	22ff      	movs	r2, #255	; 0xff
 800b704:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2201      	movs	r2, #1
 800b70a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d101      	bne.n	800b742 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	e07b      	b.n	800b83a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b746:	2b00      	cmp	r3, #0
 800b748:	d108      	bne.n	800b75c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b752:	d009      	beq.n	800b768 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	61da      	str	r2, [r3, #28]
 800b75a:	e005      	b.n	800b768 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b00      	cmp	r3, #0
 800b778:	d106      	bne.n	800b788 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7f7 fa86 	bl	8002c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2202      	movs	r2, #2
 800b78c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b79e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b7b0:	431a      	orrs	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7ba:	431a      	orrs	r2, r3
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	691b      	ldr	r3, [r3, #16]
 800b7c0:	f003 0302 	and.w	r3, r3, #2
 800b7c4:	431a      	orrs	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	695b      	ldr	r3, [r3, #20]
 800b7ca:	f003 0301 	and.w	r3, r3, #1
 800b7ce:	431a      	orrs	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	699b      	ldr	r3, [r3, #24]
 800b7d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7d8:	431a      	orrs	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b7e2:	431a      	orrs	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a1b      	ldr	r3, [r3, #32]
 800b7e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7ec:	ea42 0103 	orr.w	r1, r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	430a      	orrs	r2, r1
 800b7fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	0c1b      	lsrs	r3, r3, #16
 800b806:	f003 0104 	and.w	r1, r3, #4
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80e:	f003 0210 	and.w	r2, r3, #16
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	430a      	orrs	r2, r1
 800b818:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	69da      	ldr	r2, [r3, #28]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b828:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3708      	adds	r7, #8
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b088      	sub	sp, #32
 800b846:	af00      	add	r7, sp, #0
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	60b9      	str	r1, [r7, #8]
 800b84c:	603b      	str	r3, [r7, #0]
 800b84e:	4613      	mov	r3, r2
 800b850:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d101      	bne.n	800b864 <HAL_SPI_Transmit+0x22>
 800b860:	2302      	movs	r3, #2
 800b862:	e126      	b.n	800bab2 <HAL_SPI_Transmit+0x270>
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b86c:	f7fb fb4e 	bl	8006f0c <HAL_GetTick>
 800b870:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b872:	88fb      	ldrh	r3, [r7, #6]
 800b874:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d002      	beq.n	800b888 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b882:	2302      	movs	r3, #2
 800b884:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b886:	e10b      	b.n	800baa0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d002      	beq.n	800b894 <HAL_SPI_Transmit+0x52>
 800b88e:	88fb      	ldrh	r3, [r7, #6]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d102      	bne.n	800b89a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b898:	e102      	b.n	800baa0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2203      	movs	r2, #3
 800b89e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	88fa      	ldrh	r2, [r7, #6]
 800b8b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	88fa      	ldrh	r2, [r7, #6]
 800b8b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8e0:	d10f      	bne.n	800b902 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b900:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b90c:	2b40      	cmp	r3, #64	; 0x40
 800b90e:	d007      	beq.n	800b920 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b91e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b928:	d14b      	bne.n	800b9c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d002      	beq.n	800b938 <HAL_SPI_Transmit+0xf6>
 800b932:	8afb      	ldrh	r3, [r7, #22]
 800b934:	2b01      	cmp	r3, #1
 800b936:	d13e      	bne.n	800b9b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b93c:	881a      	ldrh	r2, [r3, #0]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b948:	1c9a      	adds	r2, r3, #2
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b952:	b29b      	uxth	r3, r3
 800b954:	3b01      	subs	r3, #1
 800b956:	b29a      	uxth	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b95c:	e02b      	b.n	800b9b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	f003 0302 	and.w	r3, r3, #2
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d112      	bne.n	800b992 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b970:	881a      	ldrh	r2, [r3, #0]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97c:	1c9a      	adds	r2, r3, #2
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b986:	b29b      	uxth	r3, r3
 800b988:	3b01      	subs	r3, #1
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	86da      	strh	r2, [r3, #54]	; 0x36
 800b990:	e011      	b.n	800b9b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b992:	f7fb fabb 	bl	8006f0c <HAL_GetTick>
 800b996:	4602      	mov	r2, r0
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	683a      	ldr	r2, [r7, #0]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d803      	bhi.n	800b9aa <HAL_SPI_Transmit+0x168>
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a8:	d102      	bne.n	800b9b0 <HAL_SPI_Transmit+0x16e>
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d102      	bne.n	800b9b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b9b4:	e074      	b.n	800baa0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1ce      	bne.n	800b95e <HAL_SPI_Transmit+0x11c>
 800b9c0:	e04c      	b.n	800ba5c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d002      	beq.n	800b9d0 <HAL_SPI_Transmit+0x18e>
 800b9ca:	8afb      	ldrh	r3, [r7, #22]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d140      	bne.n	800ba52 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	330c      	adds	r3, #12
 800b9da:	7812      	ldrb	r2, [r2, #0]
 800b9dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b9f6:	e02c      	b.n	800ba52 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	f003 0302 	and.w	r3, r3, #2
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	d113      	bne.n	800ba2e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	330c      	adds	r3, #12
 800ba10:	7812      	ldrb	r2, [r2, #0]
 800ba12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba18:	1c5a      	adds	r2, r3, #1
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	3b01      	subs	r3, #1
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	86da      	strh	r2, [r3, #54]	; 0x36
 800ba2c:	e011      	b.n	800ba52 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba2e:	f7fb fa6d 	bl	8006f0c <HAL_GetTick>
 800ba32:	4602      	mov	r2, r0
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d803      	bhi.n	800ba46 <HAL_SPI_Transmit+0x204>
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba44:	d102      	bne.n	800ba4c <HAL_SPI_Transmit+0x20a>
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d102      	bne.n	800ba52 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ba50:	e026      	b.n	800baa0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1cd      	bne.n	800b9f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba5c:	69ba      	ldr	r2, [r7, #24]
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f000 fbcb 	bl	800c1fc <SPI_EndRxTxTransaction>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2220      	movs	r2, #32
 800ba70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10a      	bne.n	800ba90 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	613b      	str	r3, [r7, #16]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	613b      	str	r3, [r7, #16]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	613b      	str	r3, [r7, #16]
 800ba8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d002      	beq.n	800ba9e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	77fb      	strb	r3, [r7, #31]
 800ba9c:	e000      	b.n	800baa0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800ba9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bab0:	7ffb      	ldrb	r3, [r7, #31]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3720      	adds	r7, #32
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b088      	sub	sp, #32
 800babe:	af02      	add	r7, sp, #8
 800bac0:	60f8      	str	r0, [r7, #12]
 800bac2:	60b9      	str	r1, [r7, #8]
 800bac4:	603b      	str	r3, [r7, #0]
 800bac6:	4613      	mov	r3, r2
 800bac8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800baca:	2300      	movs	r3, #0
 800bacc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bad6:	d112      	bne.n	800bafe <HAL_SPI_Receive+0x44>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10e      	bne.n	800bafe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2204      	movs	r2, #4
 800bae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bae8:	88fa      	ldrh	r2, [r7, #6]
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	4613      	mov	r3, r2
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	68b9      	ldr	r1, [r7, #8]
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f000 f8f1 	bl	800bcdc <HAL_SPI_TransmitReceive>
 800bafa:	4603      	mov	r3, r0
 800bafc:	e0ea      	b.n	800bcd4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d101      	bne.n	800bb0c <HAL_SPI_Receive+0x52>
 800bb08:	2302      	movs	r3, #2
 800bb0a:	e0e3      	b.n	800bcd4 <HAL_SPI_Receive+0x21a>
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb14:	f7fb f9fa 	bl	8006f0c <HAL_GetTick>
 800bb18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d002      	beq.n	800bb2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bb26:	2302      	movs	r3, #2
 800bb28:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bb2a:	e0ca      	b.n	800bcc2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d002      	beq.n	800bb38 <HAL_SPI_Receive+0x7e>
 800bb32:	88fb      	ldrh	r3, [r7, #6]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d102      	bne.n	800bb3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bb3c:	e0c1      	b.n	800bcc2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2204      	movs	r2, #4
 800bb42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	88fa      	ldrh	r2, [r7, #6]
 800bb56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	88fa      	ldrh	r2, [r7, #6]
 800bb5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2200      	movs	r2, #0
 800bb62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2200      	movs	r2, #0
 800bb68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb84:	d10f      	bne.n	800bba6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bba4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbb0:	2b40      	cmp	r3, #64	; 0x40
 800bbb2:	d007      	beq.n	800bbc4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bbc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d162      	bne.n	800bc92 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bbcc:	e02e      	b.n	800bc2c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	f003 0301 	and.w	r3, r3, #1
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d115      	bne.n	800bc08 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f103 020c 	add.w	r2, r3, #12
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe8:	7812      	ldrb	r2, [r2, #0]
 800bbea:	b2d2      	uxtb	r2, r2
 800bbec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf2:	1c5a      	adds	r2, r3, #1
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc06:	e011      	b.n	800bc2c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc08:	f7fb f980 	bl	8006f0c <HAL_GetTick>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d803      	bhi.n	800bc20 <HAL_SPI_Receive+0x166>
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc1e:	d102      	bne.n	800bc26 <HAL_SPI_Receive+0x16c>
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d102      	bne.n	800bc2c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800bc26:	2303      	movs	r3, #3
 800bc28:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bc2a:	e04a      	b.n	800bcc2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1cb      	bne.n	800bbce <HAL_SPI_Receive+0x114>
 800bc36:	e031      	b.n	800bc9c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d113      	bne.n	800bc6e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	68da      	ldr	r2, [r3, #12]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc50:	b292      	uxth	r2, r2
 800bc52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc58:	1c9a      	adds	r2, r3, #2
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	3b01      	subs	r3, #1
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc6c:	e011      	b.n	800bc92 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc6e:	f7fb f94d 	bl	8006f0c <HAL_GetTick>
 800bc72:	4602      	mov	r2, r0
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	683a      	ldr	r2, [r7, #0]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d803      	bhi.n	800bc86 <HAL_SPI_Receive+0x1cc>
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc84:	d102      	bne.n	800bc8c <HAL_SPI_Receive+0x1d2>
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d102      	bne.n	800bc92 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bc90:	e017      	b.n	800bcc2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1cd      	bne.n	800bc38 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bc9c:	693a      	ldr	r2, [r7, #16]
 800bc9e:	6839      	ldr	r1, [r7, #0]
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f000 fa45 	bl	800c130 <SPI_EndRxTransaction>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d002      	beq.n	800bcb2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2220      	movs	r2, #32
 800bcb0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d002      	beq.n	800bcc0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	75fb      	strb	r3, [r7, #23]
 800bcbe:	e000      	b.n	800bcc2 <HAL_SPI_Receive+0x208>
  }

error :
 800bcc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2200      	movs	r2, #0
 800bcce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bcd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3718      	adds	r7, #24
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b08c      	sub	sp, #48	; 0x30
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bcea:	2301      	movs	r3, #1
 800bcec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d101      	bne.n	800bd02 <HAL_SPI_TransmitReceive+0x26>
 800bcfe:	2302      	movs	r3, #2
 800bd00:	e18a      	b.n	800c018 <HAL_SPI_TransmitReceive+0x33c>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2201      	movs	r2, #1
 800bd06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd0a:	f7fb f8ff 	bl	8006f0c <HAL_GetTick>
 800bd0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bd20:	887b      	ldrh	r3, [r7, #2]
 800bd22:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bd24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d00f      	beq.n	800bd4c <HAL_SPI_TransmitReceive+0x70>
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd32:	d107      	bne.n	800bd44 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d103      	bne.n	800bd44 <HAL_SPI_TransmitReceive+0x68>
 800bd3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd40:	2b04      	cmp	r3, #4
 800bd42:	d003      	beq.n	800bd4c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bd44:	2302      	movs	r3, #2
 800bd46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bd4a:	e15b      	b.n	800c004 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d005      	beq.n	800bd5e <HAL_SPI_TransmitReceive+0x82>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d002      	beq.n	800bd5e <HAL_SPI_TransmitReceive+0x82>
 800bd58:	887b      	ldrh	r3, [r7, #2]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d103      	bne.n	800bd66 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bd64:	e14e      	b.n	800c004 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	2b04      	cmp	r3, #4
 800bd70:	d003      	beq.n	800bd7a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2205      	movs	r2, #5
 800bd76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	887a      	ldrh	r2, [r7, #2]
 800bd8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	887a      	ldrh	r2, [r7, #2]
 800bd90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	887a      	ldrh	r2, [r7, #2]
 800bd9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	887a      	ldrh	r2, [r7, #2]
 800bda2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2200      	movs	r2, #0
 800bda8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2200      	movs	r2, #0
 800bdae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdba:	2b40      	cmp	r3, #64	; 0x40
 800bdbc:	d007      	beq.n	800bdce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	681a      	ldr	r2, [r3, #0]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdd6:	d178      	bne.n	800beca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d002      	beq.n	800bde6 <HAL_SPI_TransmitReceive+0x10a>
 800bde0:	8b7b      	ldrh	r3, [r7, #26]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d166      	bne.n	800beb4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdea:	881a      	ldrh	r2, [r3, #0]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf6:	1c9a      	adds	r2, r3, #2
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be00:	b29b      	uxth	r3, r3
 800be02:	3b01      	subs	r3, #1
 800be04:	b29a      	uxth	r2, r3
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be0a:	e053      	b.n	800beb4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	f003 0302 	and.w	r3, r3, #2
 800be16:	2b02      	cmp	r3, #2
 800be18:	d11b      	bne.n	800be52 <HAL_SPI_TransmitReceive+0x176>
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be1e:	b29b      	uxth	r3, r3
 800be20:	2b00      	cmp	r3, #0
 800be22:	d016      	beq.n	800be52 <HAL_SPI_TransmitReceive+0x176>
 800be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be26:	2b01      	cmp	r3, #1
 800be28:	d113      	bne.n	800be52 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be2e:	881a      	ldrh	r2, [r3, #0]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be3a:	1c9a      	adds	r2, r3, #2
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be44:	b29b      	uxth	r3, r3
 800be46:	3b01      	subs	r3, #1
 800be48:	b29a      	uxth	r2, r3
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800be4e:	2300      	movs	r3, #0
 800be50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	f003 0301 	and.w	r3, r3, #1
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d119      	bne.n	800be94 <HAL_SPI_TransmitReceive+0x1b8>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be64:	b29b      	uxth	r3, r3
 800be66:	2b00      	cmp	r3, #0
 800be68:	d014      	beq.n	800be94 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68da      	ldr	r2, [r3, #12]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be74:	b292      	uxth	r2, r2
 800be76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7c:	1c9a      	adds	r2, r3, #2
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be86:	b29b      	uxth	r3, r3
 800be88:	3b01      	subs	r3, #1
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800be90:	2301      	movs	r3, #1
 800be92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800be94:	f7fb f83a 	bl	8006f0c <HAL_GetTick>
 800be98:	4602      	mov	r2, r0
 800be9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9c:	1ad3      	subs	r3, r2, r3
 800be9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d807      	bhi.n	800beb4 <HAL_SPI_TransmitReceive+0x1d8>
 800bea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beaa:	d003      	beq.n	800beb4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800beb2:	e0a7      	b.n	800c004 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800beb8:	b29b      	uxth	r3, r3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1a6      	bne.n	800be0c <HAL_SPI_TransmitReceive+0x130>
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d1a1      	bne.n	800be0c <HAL_SPI_TransmitReceive+0x130>
 800bec8:	e07c      	b.n	800bfc4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d002      	beq.n	800bed8 <HAL_SPI_TransmitReceive+0x1fc>
 800bed2:	8b7b      	ldrh	r3, [r7, #26]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d16b      	bne.n	800bfb0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	330c      	adds	r3, #12
 800bee2:	7812      	ldrb	r2, [r2, #0]
 800bee4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beea:	1c5a      	adds	r2, r3, #1
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	3b01      	subs	r3, #1
 800bef8:	b29a      	uxth	r2, r3
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800befe:	e057      	b.n	800bfb0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	f003 0302 	and.w	r3, r3, #2
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	d11c      	bne.n	800bf48 <HAL_SPI_TransmitReceive+0x26c>
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d017      	beq.n	800bf48 <HAL_SPI_TransmitReceive+0x26c>
 800bf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d114      	bne.n	800bf48 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	330c      	adds	r3, #12
 800bf28:	7812      	ldrb	r2, [r2, #0]
 800bf2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf30:	1c5a      	adds	r2, r3, #1
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	b29a      	uxth	r2, r3
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bf44:	2300      	movs	r3, #0
 800bf46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	f003 0301 	and.w	r3, r3, #1
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d119      	bne.n	800bf8a <HAL_SPI_TransmitReceive+0x2ae>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d014      	beq.n	800bf8a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68da      	ldr	r2, [r3, #12]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf6a:	b2d2      	uxtb	r2, r2
 800bf6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf72:	1c5a      	adds	r2, r3, #1
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	3b01      	subs	r3, #1
 800bf80:	b29a      	uxth	r2, r3
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bf86:	2301      	movs	r3, #1
 800bf88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bf8a:	f7fa ffbf 	bl	8006f0c <HAL_GetTick>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d803      	bhi.n	800bfa2 <HAL_SPI_TransmitReceive+0x2c6>
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa0:	d102      	bne.n	800bfa8 <HAL_SPI_TransmitReceive+0x2cc>
 800bfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d103      	bne.n	800bfb0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bfa8:	2303      	movs	r3, #3
 800bfaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bfae:	e029      	b.n	800c004 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1a2      	bne.n	800bf00 <HAL_SPI_TransmitReceive+0x224>
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d19d      	bne.n	800bf00 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bfc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f000 f917 	bl	800c1fc <SPI_EndRxTxTransaction>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d006      	beq.n	800bfe2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2220      	movs	r2, #32
 800bfde:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bfe0:	e010      	b.n	800c004 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d10b      	bne.n	800c002 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bfea:	2300      	movs	r3, #0
 800bfec:	617b      	str	r3, [r7, #20]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	617b      	str	r3, [r7, #20]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	617b      	str	r3, [r7, #20]
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	e000      	b.n	800c004 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c002:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2201      	movs	r2, #1
 800c008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c014:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3730      	adds	r7, #48	; 0x30
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b088      	sub	sp, #32
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	603b      	str	r3, [r7, #0]
 800c02c:	4613      	mov	r3, r2
 800c02e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c030:	f7fa ff6c 	bl	8006f0c <HAL_GetTick>
 800c034:	4602      	mov	r2, r0
 800c036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c038:	1a9b      	subs	r3, r3, r2
 800c03a:	683a      	ldr	r2, [r7, #0]
 800c03c:	4413      	add	r3, r2
 800c03e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c040:	f7fa ff64 	bl	8006f0c <HAL_GetTick>
 800c044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c046:	4b39      	ldr	r3, [pc, #228]	; (800c12c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	015b      	lsls	r3, r3, #5
 800c04c:	0d1b      	lsrs	r3, r3, #20
 800c04e:	69fa      	ldr	r2, [r7, #28]
 800c050:	fb02 f303 	mul.w	r3, r2, r3
 800c054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c056:	e054      	b.n	800c102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05e:	d050      	beq.n	800c102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c060:	f7fa ff54 	bl	8006f0c <HAL_GetTick>
 800c064:	4602      	mov	r2, r0
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	69fa      	ldr	r2, [r7, #28]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d902      	bls.n	800c076 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d13d      	bne.n	800c0f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c08e:	d111      	bne.n	800c0b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c098:	d004      	beq.n	800c0a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0a2:	d107      	bne.n	800c0b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0bc:	d10f      	bne.n	800c0de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c0cc:	601a      	str	r2, [r3, #0]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c0dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c0ee:	2303      	movs	r3, #3
 800c0f0:	e017      	b.n	800c122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d101      	bne.n	800c0fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	3b01      	subs	r3, #1
 800c100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	689a      	ldr	r2, [r3, #8]
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	4013      	ands	r3, r2
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	429a      	cmp	r2, r3
 800c110:	bf0c      	ite	eq
 800c112:	2301      	moveq	r3, #1
 800c114:	2300      	movne	r3, #0
 800c116:	b2db      	uxtb	r3, r3
 800c118:	461a      	mov	r2, r3
 800c11a:	79fb      	ldrb	r3, [r7, #7]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d19b      	bne.n	800c058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3720      	adds	r7, #32
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	20000000 	.word	0x20000000

0800c130 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af02      	add	r7, sp, #8
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c144:	d111      	bne.n	800c16a <SPI_EndRxTransaction+0x3a>
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c14e:	d004      	beq.n	800c15a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c158:	d107      	bne.n	800c16a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c168:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c172:	d12a      	bne.n	800c1ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c17c:	d012      	beq.n	800c1a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	9300      	str	r3, [sp, #0]
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	2200      	movs	r2, #0
 800c186:	2180      	movs	r1, #128	; 0x80
 800c188:	68f8      	ldr	r0, [r7, #12]
 800c18a:	f7ff ff49 	bl	800c020 <SPI_WaitFlagStateUntilTimeout>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d02d      	beq.n	800c1f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c198:	f043 0220 	orr.w	r2, r3, #32
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c1a0:	2303      	movs	r3, #3
 800c1a2:	e026      	b.n	800c1f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	9300      	str	r3, [sp, #0]
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	2101      	movs	r1, #1
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f7ff ff36 	bl	800c020 <SPI_WaitFlagStateUntilTimeout>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d01a      	beq.n	800c1f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1be:	f043 0220 	orr.w	r2, r3, #32
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c1c6:	2303      	movs	r3, #3
 800c1c8:	e013      	b.n	800c1f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	2101      	movs	r1, #1
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f7ff ff23 	bl	800c020 <SPI_WaitFlagStateUntilTimeout>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d007      	beq.n	800c1f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e4:	f043 0220 	orr.w	r2, r3, #32
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	e000      	b.n	800c1f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
	...

0800c1fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b088      	sub	sp, #32
 800c200:	af02      	add	r7, sp, #8
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c208:	4b1b      	ldr	r3, [pc, #108]	; (800c278 <SPI_EndRxTxTransaction+0x7c>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a1b      	ldr	r2, [pc, #108]	; (800c27c <SPI_EndRxTxTransaction+0x80>)
 800c20e:	fba2 2303 	umull	r2, r3, r2, r3
 800c212:	0d5b      	lsrs	r3, r3, #21
 800c214:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c218:	fb02 f303 	mul.w	r3, r2, r3
 800c21c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c226:	d112      	bne.n	800c24e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	2200      	movs	r2, #0
 800c230:	2180      	movs	r1, #128	; 0x80
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f7ff fef4 	bl	800c020 <SPI_WaitFlagStateUntilTimeout>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d016      	beq.n	800c26c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c242:	f043 0220 	orr.w	r2, r3, #32
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c24a:	2303      	movs	r3, #3
 800c24c:	e00f      	b.n	800c26e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00a      	beq.n	800c26a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	3b01      	subs	r3, #1
 800c258:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c264:	2b80      	cmp	r3, #128	; 0x80
 800c266:	d0f2      	beq.n	800c24e <SPI_EndRxTxTransaction+0x52>
 800c268:	e000      	b.n	800c26c <SPI_EndRxTxTransaction+0x70>
        break;
 800c26a:	bf00      	nop
  }

  return HAL_OK;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3718      	adds	r7, #24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	20000000 	.word	0x20000000
 800c27c:	165e9f81 	.word	0x165e9f81

0800c280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d101      	bne.n	800c292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e041      	b.n	800c316 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d106      	bne.n	800c2ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 f839 	bl	800c31e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2202      	movs	r2, #2
 800c2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	3304      	adds	r3, #4
 800c2bc:	4619      	mov	r1, r3
 800c2be:	4610      	mov	r0, r2
 800c2c0:	f000 faea 	bl	800c898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2201      	movs	r2, #1
 800c308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c31e:	b480      	push	{r7}
 800c320:	b083      	sub	sp, #12
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c326:	bf00      	nop
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr
	...

0800c334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c342:	b2db      	uxtb	r3, r3
 800c344:	2b01      	cmp	r3, #1
 800c346:	d001      	beq.n	800c34c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c348:	2301      	movs	r3, #1
 800c34a:	e04e      	b.n	800c3ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2202      	movs	r2, #2
 800c350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	68da      	ldr	r2, [r3, #12]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f042 0201 	orr.w	r2, r2, #1
 800c362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a23      	ldr	r2, [pc, #140]	; (800c3f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d022      	beq.n	800c3b4 <HAL_TIM_Base_Start_IT+0x80>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c376:	d01d      	beq.n	800c3b4 <HAL_TIM_Base_Start_IT+0x80>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a1f      	ldr	r2, [pc, #124]	; (800c3fc <HAL_TIM_Base_Start_IT+0xc8>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d018      	beq.n	800c3b4 <HAL_TIM_Base_Start_IT+0x80>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4a1e      	ldr	r2, [pc, #120]	; (800c400 <HAL_TIM_Base_Start_IT+0xcc>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d013      	beq.n	800c3b4 <HAL_TIM_Base_Start_IT+0x80>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a1c      	ldr	r2, [pc, #112]	; (800c404 <HAL_TIM_Base_Start_IT+0xd0>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d00e      	beq.n	800c3b4 <HAL_TIM_Base_Start_IT+0x80>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a1b      	ldr	r2, [pc, #108]	; (800c408 <HAL_TIM_Base_Start_IT+0xd4>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d009      	beq.n	800c3b4 <HAL_TIM_Base_Start_IT+0x80>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a19      	ldr	r2, [pc, #100]	; (800c40c <HAL_TIM_Base_Start_IT+0xd8>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d004      	beq.n	800c3b4 <HAL_TIM_Base_Start_IT+0x80>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a18      	ldr	r2, [pc, #96]	; (800c410 <HAL_TIM_Base_Start_IT+0xdc>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d111      	bne.n	800c3d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	f003 0307 	and.w	r3, r3, #7
 800c3be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2b06      	cmp	r3, #6
 800c3c4:	d010      	beq.n	800c3e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f042 0201 	orr.w	r2, r2, #1
 800c3d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3d6:	e007      	b.n	800c3e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f042 0201 	orr.w	r2, r2, #1
 800c3e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c3e8:	2300      	movs	r3, #0
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3714      	adds	r7, #20
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	40010000 	.word	0x40010000
 800c3fc:	40000400 	.word	0x40000400
 800c400:	40000800 	.word	0x40000800
 800c404:	40000c00 	.word	0x40000c00
 800c408:	40010400 	.word	0x40010400
 800c40c:	40014000 	.word	0x40014000
 800c410:	40001800 	.word	0x40001800

0800c414 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d101      	bne.n	800c426 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c422:	2301      	movs	r3, #1
 800c424:	e041      	b.n	800c4aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d106      	bne.n	800c440 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2200      	movs	r2, #0
 800c436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f7f6 fce0 	bl	8002e00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2202      	movs	r2, #2
 800c444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	3304      	adds	r3, #4
 800c450:	4619      	mov	r1, r3
 800c452:	4610      	mov	r0, r2
 800c454:	f000 fa20 	bl	800c898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2201      	movs	r2, #1
 800c474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2201      	movs	r2, #1
 800c48c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b082      	sub	sp, #8
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	691b      	ldr	r3, [r3, #16]
 800c4c0:	f003 0302 	and.w	r3, r3, #2
 800c4c4:	2b02      	cmp	r3, #2
 800c4c6:	d122      	bne.n	800c50e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	f003 0302 	and.w	r3, r3, #2
 800c4d2:	2b02      	cmp	r3, #2
 800c4d4:	d11b      	bne.n	800c50e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f06f 0202 	mvn.w	r2, #2
 800c4de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	f003 0303 	and.w	r3, r3, #3
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d003      	beq.n	800c4fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 f9b1 	bl	800c85c <HAL_TIM_IC_CaptureCallback>
 800c4fa:	e005      	b.n	800c508 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 f9a3 	bl	800c848 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 f9b4 	bl	800c870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	f003 0304 	and.w	r3, r3, #4
 800c518:	2b04      	cmp	r3, #4
 800c51a:	d122      	bne.n	800c562 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	f003 0304 	and.w	r3, r3, #4
 800c526:	2b04      	cmp	r3, #4
 800c528:	d11b      	bne.n	800c562 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f06f 0204 	mvn.w	r2, #4
 800c532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2202      	movs	r2, #2
 800c538:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	699b      	ldr	r3, [r3, #24]
 800c540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c544:	2b00      	cmp	r3, #0
 800c546:	d003      	beq.n	800c550 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 f987 	bl	800c85c <HAL_TIM_IC_CaptureCallback>
 800c54e:	e005      	b.n	800c55c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 f979 	bl	800c848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 f98a 	bl	800c870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	f003 0308 	and.w	r3, r3, #8
 800c56c:	2b08      	cmp	r3, #8
 800c56e:	d122      	bne.n	800c5b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	f003 0308 	and.w	r3, r3, #8
 800c57a:	2b08      	cmp	r3, #8
 800c57c:	d11b      	bne.n	800c5b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f06f 0208 	mvn.w	r2, #8
 800c586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2204      	movs	r2, #4
 800c58c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	69db      	ldr	r3, [r3, #28]
 800c594:	f003 0303 	and.w	r3, r3, #3
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d003      	beq.n	800c5a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 f95d 	bl	800c85c <HAL_TIM_IC_CaptureCallback>
 800c5a2:	e005      	b.n	800c5b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f000 f94f 	bl	800c848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 f960 	bl	800c870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	691b      	ldr	r3, [r3, #16]
 800c5bc:	f003 0310 	and.w	r3, r3, #16
 800c5c0:	2b10      	cmp	r3, #16
 800c5c2:	d122      	bne.n	800c60a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	f003 0310 	and.w	r3, r3, #16
 800c5ce:	2b10      	cmp	r3, #16
 800c5d0:	d11b      	bne.n	800c60a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f06f 0210 	mvn.w	r2, #16
 800c5da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2208      	movs	r2, #8
 800c5e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	69db      	ldr	r3, [r3, #28]
 800c5e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d003      	beq.n	800c5f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 f933 	bl	800c85c <HAL_TIM_IC_CaptureCallback>
 800c5f6:	e005      	b.n	800c604 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 f925 	bl	800c848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f936 	bl	800c870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	f003 0301 	and.w	r3, r3, #1
 800c614:	2b01      	cmp	r3, #1
 800c616:	d10e      	bne.n	800c636 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	f003 0301 	and.w	r3, r3, #1
 800c622:	2b01      	cmp	r3, #1
 800c624:	d107      	bne.n	800c636 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f06f 0201 	mvn.w	r2, #1
 800c62e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7f6 f99d 	bl	8002970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c640:	2b80      	cmp	r3, #128	; 0x80
 800c642:	d10e      	bne.n	800c662 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c64e:	2b80      	cmp	r3, #128	; 0x80
 800c650:	d107      	bne.n	800c662 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c65a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 fbf1 	bl	800ce44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	691b      	ldr	r3, [r3, #16]
 800c668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c66c:	2b40      	cmp	r3, #64	; 0x40
 800c66e:	d10e      	bne.n	800c68e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c67a:	2b40      	cmp	r3, #64	; 0x40
 800c67c:	d107      	bne.n	800c68e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 f8fb 	bl	800c884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	691b      	ldr	r3, [r3, #16]
 800c694:	f003 0320 	and.w	r3, r3, #32
 800c698:	2b20      	cmp	r3, #32
 800c69a:	d10e      	bne.n	800c6ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	f003 0320 	and.w	r3, r3, #32
 800c6a6:	2b20      	cmp	r3, #32
 800c6a8:	d107      	bne.n	800c6ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f06f 0220 	mvn.w	r2, #32
 800c6b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 fbbb 	bl	800ce30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c6ba:	bf00      	nop
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
	...

0800c6c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b086      	sub	sp, #24
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d101      	bne.n	800c6e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c6de:	2302      	movs	r3, #2
 800c6e0:	e0ae      	b.n	800c840 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2b0c      	cmp	r3, #12
 800c6ee:	f200 809f 	bhi.w	800c830 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c6f2:	a201      	add	r2, pc, #4	; (adr r2, 800c6f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f8:	0800c72d 	.word	0x0800c72d
 800c6fc:	0800c831 	.word	0x0800c831
 800c700:	0800c831 	.word	0x0800c831
 800c704:	0800c831 	.word	0x0800c831
 800c708:	0800c76d 	.word	0x0800c76d
 800c70c:	0800c831 	.word	0x0800c831
 800c710:	0800c831 	.word	0x0800c831
 800c714:	0800c831 	.word	0x0800c831
 800c718:	0800c7af 	.word	0x0800c7af
 800c71c:	0800c831 	.word	0x0800c831
 800c720:	0800c831 	.word	0x0800c831
 800c724:	0800c831 	.word	0x0800c831
 800c728:	0800c7ef 	.word	0x0800c7ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	68b9      	ldr	r1, [r7, #8]
 800c732:	4618      	mov	r0, r3
 800c734:	f000 f950 	bl	800c9d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	699a      	ldr	r2, [r3, #24]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f042 0208 	orr.w	r2, r2, #8
 800c746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	699a      	ldr	r2, [r3, #24]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f022 0204 	bic.w	r2, r2, #4
 800c756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	6999      	ldr	r1, [r3, #24]
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	691a      	ldr	r2, [r3, #16]
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	430a      	orrs	r2, r1
 800c768:	619a      	str	r2, [r3, #24]
      break;
 800c76a:	e064      	b.n	800c836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68b9      	ldr	r1, [r7, #8]
 800c772:	4618      	mov	r0, r3
 800c774:	f000 f9a0 	bl	800cab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	699a      	ldr	r2, [r3, #24]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	699a      	ldr	r2, [r3, #24]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	6999      	ldr	r1, [r3, #24]
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	021a      	lsls	r2, r3, #8
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	430a      	orrs	r2, r1
 800c7aa:	619a      	str	r2, [r3, #24]
      break;
 800c7ac:	e043      	b.n	800c836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	68b9      	ldr	r1, [r7, #8]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f000 f9f5 	bl	800cba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	69da      	ldr	r2, [r3, #28]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f042 0208 	orr.w	r2, r2, #8
 800c7c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	69da      	ldr	r2, [r3, #28]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f022 0204 	bic.w	r2, r2, #4
 800c7d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	69d9      	ldr	r1, [r3, #28]
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	691a      	ldr	r2, [r3, #16]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	430a      	orrs	r2, r1
 800c7ea:	61da      	str	r2, [r3, #28]
      break;
 800c7ec:	e023      	b.n	800c836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	68b9      	ldr	r1, [r7, #8]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f000 fa49 	bl	800cc8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	69da      	ldr	r2, [r3, #28]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	69da      	ldr	r2, [r3, #28]
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	69d9      	ldr	r1, [r3, #28]
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	021a      	lsls	r2, r3, #8
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	430a      	orrs	r2, r1
 800c82c:	61da      	str	r2, [r3, #28]
      break;
 800c82e:	e002      	b.n	800c836 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c830:	2301      	movs	r3, #1
 800c832:	75fb      	strb	r3, [r7, #23]
      break;
 800c834:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2200      	movs	r2, #0
 800c83a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c83e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c840:	4618      	mov	r0, r3
 800c842:	3718      	adds	r7, #24
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c850:	bf00      	nop
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c864:	bf00      	nop
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c878:	bf00      	nop
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c88c:	bf00      	nop
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c898:	b480      	push	{r7}
 800c89a:	b085      	sub	sp, #20
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a40      	ldr	r2, [pc, #256]	; (800c9ac <TIM_Base_SetConfig+0x114>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d013      	beq.n	800c8d8 <TIM_Base_SetConfig+0x40>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8b6:	d00f      	beq.n	800c8d8 <TIM_Base_SetConfig+0x40>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a3d      	ldr	r2, [pc, #244]	; (800c9b0 <TIM_Base_SetConfig+0x118>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d00b      	beq.n	800c8d8 <TIM_Base_SetConfig+0x40>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a3c      	ldr	r2, [pc, #240]	; (800c9b4 <TIM_Base_SetConfig+0x11c>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d007      	beq.n	800c8d8 <TIM_Base_SetConfig+0x40>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a3b      	ldr	r2, [pc, #236]	; (800c9b8 <TIM_Base_SetConfig+0x120>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d003      	beq.n	800c8d8 <TIM_Base_SetConfig+0x40>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a3a      	ldr	r2, [pc, #232]	; (800c9bc <TIM_Base_SetConfig+0x124>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d108      	bne.n	800c8ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4a2f      	ldr	r2, [pc, #188]	; (800c9ac <TIM_Base_SetConfig+0x114>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d02b      	beq.n	800c94a <TIM_Base_SetConfig+0xb2>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8f8:	d027      	beq.n	800c94a <TIM_Base_SetConfig+0xb2>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4a2c      	ldr	r2, [pc, #176]	; (800c9b0 <TIM_Base_SetConfig+0x118>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d023      	beq.n	800c94a <TIM_Base_SetConfig+0xb2>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4a2b      	ldr	r2, [pc, #172]	; (800c9b4 <TIM_Base_SetConfig+0x11c>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d01f      	beq.n	800c94a <TIM_Base_SetConfig+0xb2>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	4a2a      	ldr	r2, [pc, #168]	; (800c9b8 <TIM_Base_SetConfig+0x120>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d01b      	beq.n	800c94a <TIM_Base_SetConfig+0xb2>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	4a29      	ldr	r2, [pc, #164]	; (800c9bc <TIM_Base_SetConfig+0x124>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d017      	beq.n	800c94a <TIM_Base_SetConfig+0xb2>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4a28      	ldr	r2, [pc, #160]	; (800c9c0 <TIM_Base_SetConfig+0x128>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d013      	beq.n	800c94a <TIM_Base_SetConfig+0xb2>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	4a27      	ldr	r2, [pc, #156]	; (800c9c4 <TIM_Base_SetConfig+0x12c>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d00f      	beq.n	800c94a <TIM_Base_SetConfig+0xb2>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4a26      	ldr	r2, [pc, #152]	; (800c9c8 <TIM_Base_SetConfig+0x130>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d00b      	beq.n	800c94a <TIM_Base_SetConfig+0xb2>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4a25      	ldr	r2, [pc, #148]	; (800c9cc <TIM_Base_SetConfig+0x134>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d007      	beq.n	800c94a <TIM_Base_SetConfig+0xb2>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	4a24      	ldr	r2, [pc, #144]	; (800c9d0 <TIM_Base_SetConfig+0x138>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d003      	beq.n	800c94a <TIM_Base_SetConfig+0xb2>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4a23      	ldr	r2, [pc, #140]	; (800c9d4 <TIM_Base_SetConfig+0x13c>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d108      	bne.n	800c95c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	68fa      	ldr	r2, [r7, #12]
 800c958:	4313      	orrs	r3, r2
 800c95a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	695b      	ldr	r3, [r3, #20]
 800c966:	4313      	orrs	r3, r2
 800c968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	689a      	ldr	r2, [r3, #8]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	4a0a      	ldr	r2, [pc, #40]	; (800c9ac <TIM_Base_SetConfig+0x114>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d003      	beq.n	800c990 <TIM_Base_SetConfig+0xf8>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	4a0c      	ldr	r2, [pc, #48]	; (800c9bc <TIM_Base_SetConfig+0x124>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d103      	bne.n	800c998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	691a      	ldr	r2, [r3, #16]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	615a      	str	r2, [r3, #20]
}
 800c99e:	bf00      	nop
 800c9a0:	3714      	adds	r7, #20
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	40010000 	.word	0x40010000
 800c9b0:	40000400 	.word	0x40000400
 800c9b4:	40000800 	.word	0x40000800
 800c9b8:	40000c00 	.word	0x40000c00
 800c9bc:	40010400 	.word	0x40010400
 800c9c0:	40014000 	.word	0x40014000
 800c9c4:	40014400 	.word	0x40014400
 800c9c8:	40014800 	.word	0x40014800
 800c9cc:	40001800 	.word	0x40001800
 800c9d0:	40001c00 	.word	0x40001c00
 800c9d4:	40002000 	.word	0x40002000

0800c9d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b087      	sub	sp, #28
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a1b      	ldr	r3, [r3, #32]
 800c9e6:	f023 0201 	bic.w	r2, r3, #1
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a1b      	ldr	r3, [r3, #32]
 800c9f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	699b      	ldr	r3, [r3, #24]
 800c9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f023 0303 	bic.w	r3, r3, #3
 800ca0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	4313      	orrs	r3, r2
 800ca18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	f023 0302 	bic.w	r3, r3, #2
 800ca20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	697a      	ldr	r2, [r7, #20]
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4a20      	ldr	r2, [pc, #128]	; (800cab0 <TIM_OC1_SetConfig+0xd8>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d003      	beq.n	800ca3c <TIM_OC1_SetConfig+0x64>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	4a1f      	ldr	r2, [pc, #124]	; (800cab4 <TIM_OC1_SetConfig+0xdc>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d10c      	bne.n	800ca56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	f023 0308 	bic.w	r3, r3, #8
 800ca42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	697a      	ldr	r2, [r7, #20]
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	f023 0304 	bic.w	r3, r3, #4
 800ca54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	4a15      	ldr	r2, [pc, #84]	; (800cab0 <TIM_OC1_SetConfig+0xd8>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d003      	beq.n	800ca66 <TIM_OC1_SetConfig+0x8e>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	4a14      	ldr	r2, [pc, #80]	; (800cab4 <TIM_OC1_SetConfig+0xdc>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d111      	bne.n	800ca8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ca74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	695b      	ldr	r3, [r3, #20]
 800ca7a:	693a      	ldr	r2, [r7, #16]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	699b      	ldr	r3, [r3, #24]
 800ca84:	693a      	ldr	r2, [r7, #16]
 800ca86:	4313      	orrs	r3, r2
 800ca88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	693a      	ldr	r2, [r7, #16]
 800ca8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	68fa      	ldr	r2, [r7, #12]
 800ca94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	685a      	ldr	r2, [r3, #4]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	697a      	ldr	r2, [r7, #20]
 800caa2:	621a      	str	r2, [r3, #32]
}
 800caa4:	bf00      	nop
 800caa6:	371c      	adds	r7, #28
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr
 800cab0:	40010000 	.word	0x40010000
 800cab4:	40010400 	.word	0x40010400

0800cab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cab8:	b480      	push	{r7}
 800caba:	b087      	sub	sp, #28
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6a1b      	ldr	r3, [r3, #32]
 800cac6:	f023 0210 	bic.w	r2, r3, #16
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6a1b      	ldr	r3, [r3, #32]
 800cad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	699b      	ldr	r3, [r3, #24]
 800cade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800caee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	021b      	lsls	r3, r3, #8
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	f023 0320 	bic.w	r3, r3, #32
 800cb02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	011b      	lsls	r3, r3, #4
 800cb0a:	697a      	ldr	r2, [r7, #20]
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	4a22      	ldr	r2, [pc, #136]	; (800cb9c <TIM_OC2_SetConfig+0xe4>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d003      	beq.n	800cb20 <TIM_OC2_SetConfig+0x68>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	4a21      	ldr	r2, [pc, #132]	; (800cba0 <TIM_OC2_SetConfig+0xe8>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d10d      	bne.n	800cb3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	011b      	lsls	r3, r3, #4
 800cb2e:	697a      	ldr	r2, [r7, #20]
 800cb30:	4313      	orrs	r3, r2
 800cb32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a17      	ldr	r2, [pc, #92]	; (800cb9c <TIM_OC2_SetConfig+0xe4>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d003      	beq.n	800cb4c <TIM_OC2_SetConfig+0x94>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a16      	ldr	r2, [pc, #88]	; (800cba0 <TIM_OC2_SetConfig+0xe8>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d113      	bne.n	800cb74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	695b      	ldr	r3, [r3, #20]
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	693a      	ldr	r2, [r7, #16]
 800cb64:	4313      	orrs	r3, r2
 800cb66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	699b      	ldr	r3, [r3, #24]
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	693a      	ldr	r2, [r7, #16]
 800cb70:	4313      	orrs	r3, r2
 800cb72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	693a      	ldr	r2, [r7, #16]
 800cb78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	68fa      	ldr	r2, [r7, #12]
 800cb7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	685a      	ldr	r2, [r3, #4]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	697a      	ldr	r2, [r7, #20]
 800cb8c:	621a      	str	r2, [r3, #32]
}
 800cb8e:	bf00      	nop
 800cb90:	371c      	adds	r7, #28
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	40010000 	.word	0x40010000
 800cba0:	40010400 	.word	0x40010400

0800cba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b087      	sub	sp, #28
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a1b      	ldr	r3, [r3, #32]
 800cbb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6a1b      	ldr	r3, [r3, #32]
 800cbbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	69db      	ldr	r3, [r3, #28]
 800cbca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f023 0303 	bic.w	r3, r3, #3
 800cbda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cbec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	021b      	lsls	r3, r3, #8
 800cbf4:	697a      	ldr	r2, [r7, #20]
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a21      	ldr	r2, [pc, #132]	; (800cc84 <TIM_OC3_SetConfig+0xe0>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d003      	beq.n	800cc0a <TIM_OC3_SetConfig+0x66>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a20      	ldr	r2, [pc, #128]	; (800cc88 <TIM_OC3_SetConfig+0xe4>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d10d      	bne.n	800cc26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	021b      	lsls	r3, r3, #8
 800cc18:	697a      	ldr	r2, [r7, #20]
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	4a16      	ldr	r2, [pc, #88]	; (800cc84 <TIM_OC3_SetConfig+0xe0>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d003      	beq.n	800cc36 <TIM_OC3_SetConfig+0x92>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4a15      	ldr	r2, [pc, #84]	; (800cc88 <TIM_OC3_SetConfig+0xe4>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d113      	bne.n	800cc5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	695b      	ldr	r3, [r3, #20]
 800cc4a:	011b      	lsls	r3, r3, #4
 800cc4c:	693a      	ldr	r2, [r7, #16]
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	699b      	ldr	r3, [r3, #24]
 800cc56:	011b      	lsls	r3, r3, #4
 800cc58:	693a      	ldr	r2, [r7, #16]
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	693a      	ldr	r2, [r7, #16]
 800cc62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	685a      	ldr	r2, [r3, #4]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	697a      	ldr	r2, [r7, #20]
 800cc76:	621a      	str	r2, [r3, #32]
}
 800cc78:	bf00      	nop
 800cc7a:	371c      	adds	r7, #28
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr
 800cc84:	40010000 	.word	0x40010000
 800cc88:	40010400 	.word	0x40010400

0800cc8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b087      	sub	sp, #28
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6a1b      	ldr	r3, [r3, #32]
 800cc9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6a1b      	ldr	r3, [r3, #32]
 800cca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	69db      	ldr	r3, [r3, #28]
 800ccb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	021b      	lsls	r3, r3, #8
 800ccca:	68fa      	ldr	r2, [r7, #12]
 800cccc:	4313      	orrs	r3, r2
 800ccce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ccd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	031b      	lsls	r3, r3, #12
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	4313      	orrs	r3, r2
 800cce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a12      	ldr	r2, [pc, #72]	; (800cd30 <TIM_OC4_SetConfig+0xa4>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d003      	beq.n	800ccf4 <TIM_OC4_SetConfig+0x68>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	4a11      	ldr	r2, [pc, #68]	; (800cd34 <TIM_OC4_SetConfig+0xa8>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d109      	bne.n	800cd08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ccfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	695b      	ldr	r3, [r3, #20]
 800cd00:	019b      	lsls	r3, r3, #6
 800cd02:	697a      	ldr	r2, [r7, #20]
 800cd04:	4313      	orrs	r3, r2
 800cd06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	697a      	ldr	r2, [r7, #20]
 800cd0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	68fa      	ldr	r2, [r7, #12]
 800cd12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	693a      	ldr	r2, [r7, #16]
 800cd20:	621a      	str	r2, [r3, #32]
}
 800cd22:	bf00      	nop
 800cd24:	371c      	adds	r7, #28
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop
 800cd30:	40010000 	.word	0x40010000
 800cd34:	40010400 	.word	0x40010400

0800cd38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d101      	bne.n	800cd50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd4c:	2302      	movs	r3, #2
 800cd4e:	e05a      	b.n	800ce06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2201      	movs	r2, #1
 800cd54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2202      	movs	r2, #2
 800cd5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a21      	ldr	r2, [pc, #132]	; (800ce14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d022      	beq.n	800cdda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd9c:	d01d      	beq.n	800cdda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4a1d      	ldr	r2, [pc, #116]	; (800ce18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d018      	beq.n	800cdda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a1b      	ldr	r2, [pc, #108]	; (800ce1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d013      	beq.n	800cdda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4a1a      	ldr	r2, [pc, #104]	; (800ce20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d00e      	beq.n	800cdda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a18      	ldr	r2, [pc, #96]	; (800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d009      	beq.n	800cdda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a17      	ldr	r2, [pc, #92]	; (800ce28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d004      	beq.n	800cdda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a15      	ldr	r2, [pc, #84]	; (800ce2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d10c      	bne.n	800cdf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cde0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	68ba      	ldr	r2, [r7, #8]
 800cde8:	4313      	orrs	r3, r2
 800cdea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	68ba      	ldr	r2, [r7, #8]
 800cdf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3714      	adds	r7, #20
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	40010000 	.word	0x40010000
 800ce18:	40000400 	.word	0x40000400
 800ce1c:	40000800 	.word	0x40000800
 800ce20:	40000c00 	.word	0x40000c00
 800ce24:	40010400 	.word	0x40010400
 800ce28:	40014000 	.word	0x40014000
 800ce2c:	40001800 	.word	0x40001800

0800ce30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce38:	bf00      	nop
 800ce3a:	370c      	adds	r7, #12
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b083      	sub	sp, #12
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce4c:	bf00      	nop
 800ce4e:	370c      	adds	r7, #12
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d101      	bne.n	800ce6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce66:	2301      	movs	r3, #1
 800ce68:	e03f      	b.n	800ceea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d106      	bne.n	800ce84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7f6 f816 	bl	8002eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2224      	movs	r2, #36	; 0x24
 800ce88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	68da      	ldr	r2, [r3, #12]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ce9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 f9cb 	bl	800d238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	691a      	ldr	r2, [r3, #16]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ceb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	695a      	ldr	r2, [r3, #20]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cec0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	68da      	ldr	r2, [r3, #12]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ced0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2220      	movs	r2, #32
 800cedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2220      	movs	r2, #32
 800cee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cee8:	2300      	movs	r3, #0
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3708      	adds	r7, #8
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b08a      	sub	sp, #40	; 0x28
 800cef6:	af02      	add	r7, sp, #8
 800cef8:	60f8      	str	r0, [r7, #12]
 800cefa:	60b9      	str	r1, [r7, #8]
 800cefc:	603b      	str	r3, [r7, #0]
 800cefe:	4613      	mov	r3, r2
 800cf00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cf02:	2300      	movs	r3, #0
 800cf04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	2b20      	cmp	r3, #32
 800cf10:	d17c      	bne.n	800d00c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d002      	beq.n	800cf1e <HAL_UART_Transmit+0x2c>
 800cf18:	88fb      	ldrh	r3, [r7, #6]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d101      	bne.n	800cf22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	e075      	b.n	800d00e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d101      	bne.n	800cf30 <HAL_UART_Transmit+0x3e>
 800cf2c:	2302      	movs	r3, #2
 800cf2e:	e06e      	b.n	800d00e <HAL_UART_Transmit+0x11c>
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2201      	movs	r2, #1
 800cf34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2221      	movs	r2, #33	; 0x21
 800cf42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf46:	f7f9 ffe1 	bl	8006f0c <HAL_GetTick>
 800cf4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	88fa      	ldrh	r2, [r7, #6]
 800cf50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	88fa      	ldrh	r2, [r7, #6]
 800cf56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf60:	d108      	bne.n	800cf74 <HAL_UART_Transmit+0x82>
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d104      	bne.n	800cf74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	61bb      	str	r3, [r7, #24]
 800cf72:	e003      	b.n	800cf7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800cf84:	e02a      	b.n	800cfdc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	9300      	str	r3, [sp, #0]
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	2180      	movs	r1, #128	; 0x80
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f000 f8e2 	bl	800d15a <UART_WaitOnFlagUntilTimeout>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d001      	beq.n	800cfa0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800cf9c:	2303      	movs	r3, #3
 800cf9e:	e036      	b.n	800d00e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d10b      	bne.n	800cfbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	881b      	ldrh	r3, [r3, #0]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cfb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	3302      	adds	r3, #2
 800cfba:	61bb      	str	r3, [r7, #24]
 800cfbc:	e007      	b.n	800cfce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	781a      	ldrb	r2, [r3, #0]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d1cf      	bne.n	800cf86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	2200      	movs	r2, #0
 800cfee:	2140      	movs	r1, #64	; 0x40
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f000 f8b2 	bl	800d15a <UART_WaitOnFlagUntilTimeout>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800cffc:	2303      	movs	r3, #3
 800cffe:	e006      	b.n	800d00e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2220      	movs	r2, #32
 800d004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d008:	2300      	movs	r3, #0
 800d00a:	e000      	b.n	800d00e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d00c:	2302      	movs	r3, #2
  }
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3720      	adds	r7, #32
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b08a      	sub	sp, #40	; 0x28
 800d01a:	af02      	add	r7, sp, #8
 800d01c:	60f8      	str	r0, [r7, #12]
 800d01e:	60b9      	str	r1, [r7, #8]
 800d020:	603b      	str	r3, [r7, #0]
 800d022:	4613      	mov	r3, r2
 800d024:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d026:	2300      	movs	r3, #0
 800d028:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d030:	b2db      	uxtb	r3, r3
 800d032:	2b20      	cmp	r3, #32
 800d034:	f040 808c 	bne.w	800d150 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d002      	beq.n	800d044 <HAL_UART_Receive+0x2e>
 800d03e:	88fb      	ldrh	r3, [r7, #6]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d101      	bne.n	800d048 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800d044:	2301      	movs	r3, #1
 800d046:	e084      	b.n	800d152 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d101      	bne.n	800d056 <HAL_UART_Receive+0x40>
 800d052:	2302      	movs	r3, #2
 800d054:	e07d      	b.n	800d152 <HAL_UART_Receive+0x13c>
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2201      	movs	r2, #1
 800d05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2200      	movs	r2, #0
 800d062:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2222      	movs	r2, #34	; 0x22
 800d068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d072:	f7f9 ff4b 	bl	8006f0c <HAL_GetTick>
 800d076:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	88fa      	ldrh	r2, [r7, #6]
 800d07c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	88fa      	ldrh	r2, [r7, #6]
 800d082:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d08c:	d108      	bne.n	800d0a0 <HAL_UART_Receive+0x8a>
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	691b      	ldr	r3, [r3, #16]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d104      	bne.n	800d0a0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800d096:	2300      	movs	r3, #0
 800d098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	61bb      	str	r3, [r7, #24]
 800d09e:	e003      	b.n	800d0a8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800d0b0:	e043      	b.n	800d13a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	9300      	str	r3, [sp, #0]
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	2120      	movs	r1, #32
 800d0bc:	68f8      	ldr	r0, [r7, #12]
 800d0be:	f000 f84c 	bl	800d15a <UART_WaitOnFlagUntilTimeout>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d001      	beq.n	800d0cc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800d0c8:	2303      	movs	r3, #3
 800d0ca:	e042      	b.n	800d152 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800d0cc:	69fb      	ldr	r3, [r7, #28]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10c      	bne.n	800d0ec <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0de:	b29a      	uxth	r2, r3
 800d0e0:	69bb      	ldr	r3, [r7, #24]
 800d0e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	3302      	adds	r3, #2
 800d0e8:	61bb      	str	r3, [r7, #24]
 800d0ea:	e01f      	b.n	800d12c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0f4:	d007      	beq.n	800d106 <HAL_UART_Receive+0xf0>
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d10a      	bne.n	800d114 <HAL_UART_Receive+0xfe>
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	691b      	ldr	r3, [r3, #16]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d106      	bne.n	800d114 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	b2da      	uxtb	r2, r3
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	701a      	strb	r2, [r3, #0]
 800d112:	e008      	b.n	800d126 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d120:	b2da      	uxtb	r2, r3
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800d126:	69fb      	ldr	r3, [r7, #28]
 800d128:	3301      	adds	r3, #1
 800d12a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d130:	b29b      	uxth	r3, r3
 800d132:	3b01      	subs	r3, #1
 800d134:	b29a      	uxth	r2, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d13e:	b29b      	uxth	r3, r3
 800d140:	2b00      	cmp	r3, #0
 800d142:	d1b6      	bne.n	800d0b2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2220      	movs	r2, #32
 800d148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800d14c:	2300      	movs	r3, #0
 800d14e:	e000      	b.n	800d152 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800d150:	2302      	movs	r3, #2
  }
}
 800d152:	4618      	mov	r0, r3
 800d154:	3720      	adds	r7, #32
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b090      	sub	sp, #64	; 0x40
 800d15e:	af00      	add	r7, sp, #0
 800d160:	60f8      	str	r0, [r7, #12]
 800d162:	60b9      	str	r1, [r7, #8]
 800d164:	603b      	str	r3, [r7, #0]
 800d166:	4613      	mov	r3, r2
 800d168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d16a:	e050      	b.n	800d20e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d16c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d172:	d04c      	beq.n	800d20e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d176:	2b00      	cmp	r3, #0
 800d178:	d007      	beq.n	800d18a <UART_WaitOnFlagUntilTimeout+0x30>
 800d17a:	f7f9 fec7 	bl	8006f0c <HAL_GetTick>
 800d17e:	4602      	mov	r2, r0
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	1ad3      	subs	r3, r2, r3
 800d184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d186:	429a      	cmp	r2, r3
 800d188:	d241      	bcs.n	800d20e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	330c      	adds	r3, #12
 800d190:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d194:	e853 3f00 	ldrex	r3, [r3]
 800d198:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	330c      	adds	r3, #12
 800d1a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d1aa:	637a      	str	r2, [r7, #52]	; 0x34
 800d1ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d1b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1b2:	e841 2300 	strex	r3, r2, [r1]
 800d1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1e5      	bne.n	800d18a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3314      	adds	r3, #20
 800d1c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	e853 3f00 	ldrex	r3, [r3]
 800d1cc:	613b      	str	r3, [r7, #16]
   return(result);
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	f023 0301 	bic.w	r3, r3, #1
 800d1d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	3314      	adds	r3, #20
 800d1dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1de:	623a      	str	r2, [r7, #32]
 800d1e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e2:	69f9      	ldr	r1, [r7, #28]
 800d1e4:	6a3a      	ldr	r2, [r7, #32]
 800d1e6:	e841 2300 	strex	r3, r2, [r1]
 800d1ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d1e5      	bne.n	800d1be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2220      	movs	r2, #32
 800d1f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2220      	movs	r2, #32
 800d1fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2200      	movs	r2, #0
 800d206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800d20a:	2303      	movs	r3, #3
 800d20c:	e00f      	b.n	800d22e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	4013      	ands	r3, r2
 800d218:	68ba      	ldr	r2, [r7, #8]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	bf0c      	ite	eq
 800d21e:	2301      	moveq	r3, #1
 800d220:	2300      	movne	r3, #0
 800d222:	b2db      	uxtb	r3, r3
 800d224:	461a      	mov	r2, r3
 800d226:	79fb      	ldrb	r3, [r7, #7]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d09f      	beq.n	800d16c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d22c:	2300      	movs	r3, #0
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3740      	adds	r7, #64	; 0x40
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
	...

0800d238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d23c:	b09f      	sub	sp, #124	; 0x7c
 800d23e:	af00      	add	r7, sp, #0
 800d240:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	691b      	ldr	r3, [r3, #16]
 800d248:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d24c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d24e:	68d9      	ldr	r1, [r3, #12]
 800d250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	ea40 0301 	orr.w	r3, r0, r1
 800d258:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d25a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d25c:	689a      	ldr	r2, [r3, #8]
 800d25e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d260:	691b      	ldr	r3, [r3, #16]
 800d262:	431a      	orrs	r2, r3
 800d264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d266:	695b      	ldr	r3, [r3, #20]
 800d268:	431a      	orrs	r2, r3
 800d26a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d26c:	69db      	ldr	r3, [r3, #28]
 800d26e:	4313      	orrs	r3, r2
 800d270:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800d272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d27c:	f021 010c 	bic.w	r1, r1, #12
 800d280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d282:	681a      	ldr	r2, [r3, #0]
 800d284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d286:	430b      	orrs	r3, r1
 800d288:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d28a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	695b      	ldr	r3, [r3, #20]
 800d290:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d296:	6999      	ldr	r1, [r3, #24]
 800d298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	ea40 0301 	orr.w	r3, r0, r1
 800d2a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d2a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	4bc5      	ldr	r3, [pc, #788]	; (800d5bc <UART_SetConfig+0x384>)
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d004      	beq.n	800d2b6 <UART_SetConfig+0x7e>
 800d2ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	4bc3      	ldr	r3, [pc, #780]	; (800d5c0 <UART_SetConfig+0x388>)
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d103      	bne.n	800d2be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d2b6:	f7fd fa65 	bl	800a784 <HAL_RCC_GetPCLK2Freq>
 800d2ba:	6778      	str	r0, [r7, #116]	; 0x74
 800d2bc:	e002      	b.n	800d2c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d2be:	f7fd fa4d 	bl	800a75c <HAL_RCC_GetPCLK1Freq>
 800d2c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d2c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2c6:	69db      	ldr	r3, [r3, #28]
 800d2c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2cc:	f040 80b6 	bne.w	800d43c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d2d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2d2:	461c      	mov	r4, r3
 800d2d4:	f04f 0500 	mov.w	r5, #0
 800d2d8:	4622      	mov	r2, r4
 800d2da:	462b      	mov	r3, r5
 800d2dc:	1891      	adds	r1, r2, r2
 800d2de:	6439      	str	r1, [r7, #64]	; 0x40
 800d2e0:	415b      	adcs	r3, r3
 800d2e2:	647b      	str	r3, [r7, #68]	; 0x44
 800d2e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d2e8:	1912      	adds	r2, r2, r4
 800d2ea:	eb45 0303 	adc.w	r3, r5, r3
 800d2ee:	f04f 0000 	mov.w	r0, #0
 800d2f2:	f04f 0100 	mov.w	r1, #0
 800d2f6:	00d9      	lsls	r1, r3, #3
 800d2f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d2fc:	00d0      	lsls	r0, r2, #3
 800d2fe:	4602      	mov	r2, r0
 800d300:	460b      	mov	r3, r1
 800d302:	1911      	adds	r1, r2, r4
 800d304:	6639      	str	r1, [r7, #96]	; 0x60
 800d306:	416b      	adcs	r3, r5
 800d308:	667b      	str	r3, [r7, #100]	; 0x64
 800d30a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	461a      	mov	r2, r3
 800d310:	f04f 0300 	mov.w	r3, #0
 800d314:	1891      	adds	r1, r2, r2
 800d316:	63b9      	str	r1, [r7, #56]	; 0x38
 800d318:	415b      	adcs	r3, r3
 800d31a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d31c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d320:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d324:	f7f3 fcc0 	bl	8000ca8 <__aeabi_uldivmod>
 800d328:	4602      	mov	r2, r0
 800d32a:	460b      	mov	r3, r1
 800d32c:	4ba5      	ldr	r3, [pc, #660]	; (800d5c4 <UART_SetConfig+0x38c>)
 800d32e:	fba3 2302 	umull	r2, r3, r3, r2
 800d332:	095b      	lsrs	r3, r3, #5
 800d334:	011e      	lsls	r6, r3, #4
 800d336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d338:	461c      	mov	r4, r3
 800d33a:	f04f 0500 	mov.w	r5, #0
 800d33e:	4622      	mov	r2, r4
 800d340:	462b      	mov	r3, r5
 800d342:	1891      	adds	r1, r2, r2
 800d344:	6339      	str	r1, [r7, #48]	; 0x30
 800d346:	415b      	adcs	r3, r3
 800d348:	637b      	str	r3, [r7, #52]	; 0x34
 800d34a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d34e:	1912      	adds	r2, r2, r4
 800d350:	eb45 0303 	adc.w	r3, r5, r3
 800d354:	f04f 0000 	mov.w	r0, #0
 800d358:	f04f 0100 	mov.w	r1, #0
 800d35c:	00d9      	lsls	r1, r3, #3
 800d35e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d362:	00d0      	lsls	r0, r2, #3
 800d364:	4602      	mov	r2, r0
 800d366:	460b      	mov	r3, r1
 800d368:	1911      	adds	r1, r2, r4
 800d36a:	65b9      	str	r1, [r7, #88]	; 0x58
 800d36c:	416b      	adcs	r3, r5
 800d36e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	461a      	mov	r2, r3
 800d376:	f04f 0300 	mov.w	r3, #0
 800d37a:	1891      	adds	r1, r2, r2
 800d37c:	62b9      	str	r1, [r7, #40]	; 0x28
 800d37e:	415b      	adcs	r3, r3
 800d380:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d382:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d386:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d38a:	f7f3 fc8d 	bl	8000ca8 <__aeabi_uldivmod>
 800d38e:	4602      	mov	r2, r0
 800d390:	460b      	mov	r3, r1
 800d392:	4b8c      	ldr	r3, [pc, #560]	; (800d5c4 <UART_SetConfig+0x38c>)
 800d394:	fba3 1302 	umull	r1, r3, r3, r2
 800d398:	095b      	lsrs	r3, r3, #5
 800d39a:	2164      	movs	r1, #100	; 0x64
 800d39c:	fb01 f303 	mul.w	r3, r1, r3
 800d3a0:	1ad3      	subs	r3, r2, r3
 800d3a2:	00db      	lsls	r3, r3, #3
 800d3a4:	3332      	adds	r3, #50	; 0x32
 800d3a6:	4a87      	ldr	r2, [pc, #540]	; (800d5c4 <UART_SetConfig+0x38c>)
 800d3a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ac:	095b      	lsrs	r3, r3, #5
 800d3ae:	005b      	lsls	r3, r3, #1
 800d3b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d3b4:	441e      	add	r6, r3
 800d3b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f04f 0100 	mov.w	r1, #0
 800d3be:	4602      	mov	r2, r0
 800d3c0:	460b      	mov	r3, r1
 800d3c2:	1894      	adds	r4, r2, r2
 800d3c4:	623c      	str	r4, [r7, #32]
 800d3c6:	415b      	adcs	r3, r3
 800d3c8:	627b      	str	r3, [r7, #36]	; 0x24
 800d3ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d3ce:	1812      	adds	r2, r2, r0
 800d3d0:	eb41 0303 	adc.w	r3, r1, r3
 800d3d4:	f04f 0400 	mov.w	r4, #0
 800d3d8:	f04f 0500 	mov.w	r5, #0
 800d3dc:	00dd      	lsls	r5, r3, #3
 800d3de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d3e2:	00d4      	lsls	r4, r2, #3
 800d3e4:	4622      	mov	r2, r4
 800d3e6:	462b      	mov	r3, r5
 800d3e8:	1814      	adds	r4, r2, r0
 800d3ea:	653c      	str	r4, [r7, #80]	; 0x50
 800d3ec:	414b      	adcs	r3, r1
 800d3ee:	657b      	str	r3, [r7, #84]	; 0x54
 800d3f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	f04f 0300 	mov.w	r3, #0
 800d3fa:	1891      	adds	r1, r2, r2
 800d3fc:	61b9      	str	r1, [r7, #24]
 800d3fe:	415b      	adcs	r3, r3
 800d400:	61fb      	str	r3, [r7, #28]
 800d402:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d406:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d40a:	f7f3 fc4d 	bl	8000ca8 <__aeabi_uldivmod>
 800d40e:	4602      	mov	r2, r0
 800d410:	460b      	mov	r3, r1
 800d412:	4b6c      	ldr	r3, [pc, #432]	; (800d5c4 <UART_SetConfig+0x38c>)
 800d414:	fba3 1302 	umull	r1, r3, r3, r2
 800d418:	095b      	lsrs	r3, r3, #5
 800d41a:	2164      	movs	r1, #100	; 0x64
 800d41c:	fb01 f303 	mul.w	r3, r1, r3
 800d420:	1ad3      	subs	r3, r2, r3
 800d422:	00db      	lsls	r3, r3, #3
 800d424:	3332      	adds	r3, #50	; 0x32
 800d426:	4a67      	ldr	r2, [pc, #412]	; (800d5c4 <UART_SetConfig+0x38c>)
 800d428:	fba2 2303 	umull	r2, r3, r2, r3
 800d42c:	095b      	lsrs	r3, r3, #5
 800d42e:	f003 0207 	and.w	r2, r3, #7
 800d432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4432      	add	r2, r6
 800d438:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d43a:	e0b9      	b.n	800d5b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d43c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d43e:	461c      	mov	r4, r3
 800d440:	f04f 0500 	mov.w	r5, #0
 800d444:	4622      	mov	r2, r4
 800d446:	462b      	mov	r3, r5
 800d448:	1891      	adds	r1, r2, r2
 800d44a:	6139      	str	r1, [r7, #16]
 800d44c:	415b      	adcs	r3, r3
 800d44e:	617b      	str	r3, [r7, #20]
 800d450:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d454:	1912      	adds	r2, r2, r4
 800d456:	eb45 0303 	adc.w	r3, r5, r3
 800d45a:	f04f 0000 	mov.w	r0, #0
 800d45e:	f04f 0100 	mov.w	r1, #0
 800d462:	00d9      	lsls	r1, r3, #3
 800d464:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d468:	00d0      	lsls	r0, r2, #3
 800d46a:	4602      	mov	r2, r0
 800d46c:	460b      	mov	r3, r1
 800d46e:	eb12 0804 	adds.w	r8, r2, r4
 800d472:	eb43 0905 	adc.w	r9, r3, r5
 800d476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f04f 0100 	mov.w	r1, #0
 800d480:	f04f 0200 	mov.w	r2, #0
 800d484:	f04f 0300 	mov.w	r3, #0
 800d488:	008b      	lsls	r3, r1, #2
 800d48a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d48e:	0082      	lsls	r2, r0, #2
 800d490:	4640      	mov	r0, r8
 800d492:	4649      	mov	r1, r9
 800d494:	f7f3 fc08 	bl	8000ca8 <__aeabi_uldivmod>
 800d498:	4602      	mov	r2, r0
 800d49a:	460b      	mov	r3, r1
 800d49c:	4b49      	ldr	r3, [pc, #292]	; (800d5c4 <UART_SetConfig+0x38c>)
 800d49e:	fba3 2302 	umull	r2, r3, r3, r2
 800d4a2:	095b      	lsrs	r3, r3, #5
 800d4a4:	011e      	lsls	r6, r3, #4
 800d4a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f04f 0100 	mov.w	r1, #0
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	1894      	adds	r4, r2, r2
 800d4b4:	60bc      	str	r4, [r7, #8]
 800d4b6:	415b      	adcs	r3, r3
 800d4b8:	60fb      	str	r3, [r7, #12]
 800d4ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d4be:	1812      	adds	r2, r2, r0
 800d4c0:	eb41 0303 	adc.w	r3, r1, r3
 800d4c4:	f04f 0400 	mov.w	r4, #0
 800d4c8:	f04f 0500 	mov.w	r5, #0
 800d4cc:	00dd      	lsls	r5, r3, #3
 800d4ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d4d2:	00d4      	lsls	r4, r2, #3
 800d4d4:	4622      	mov	r2, r4
 800d4d6:	462b      	mov	r3, r5
 800d4d8:	1814      	adds	r4, r2, r0
 800d4da:	64bc      	str	r4, [r7, #72]	; 0x48
 800d4dc:	414b      	adcs	r3, r1
 800d4de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f04f 0100 	mov.w	r1, #0
 800d4ea:	f04f 0200 	mov.w	r2, #0
 800d4ee:	f04f 0300 	mov.w	r3, #0
 800d4f2:	008b      	lsls	r3, r1, #2
 800d4f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d4f8:	0082      	lsls	r2, r0, #2
 800d4fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d4fe:	f7f3 fbd3 	bl	8000ca8 <__aeabi_uldivmod>
 800d502:	4602      	mov	r2, r0
 800d504:	460b      	mov	r3, r1
 800d506:	4b2f      	ldr	r3, [pc, #188]	; (800d5c4 <UART_SetConfig+0x38c>)
 800d508:	fba3 1302 	umull	r1, r3, r3, r2
 800d50c:	095b      	lsrs	r3, r3, #5
 800d50e:	2164      	movs	r1, #100	; 0x64
 800d510:	fb01 f303 	mul.w	r3, r1, r3
 800d514:	1ad3      	subs	r3, r2, r3
 800d516:	011b      	lsls	r3, r3, #4
 800d518:	3332      	adds	r3, #50	; 0x32
 800d51a:	4a2a      	ldr	r2, [pc, #168]	; (800d5c4 <UART_SetConfig+0x38c>)
 800d51c:	fba2 2303 	umull	r2, r3, r2, r3
 800d520:	095b      	lsrs	r3, r3, #5
 800d522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d526:	441e      	add	r6, r3
 800d528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d52a:	4618      	mov	r0, r3
 800d52c:	f04f 0100 	mov.w	r1, #0
 800d530:	4602      	mov	r2, r0
 800d532:	460b      	mov	r3, r1
 800d534:	1894      	adds	r4, r2, r2
 800d536:	603c      	str	r4, [r7, #0]
 800d538:	415b      	adcs	r3, r3
 800d53a:	607b      	str	r3, [r7, #4]
 800d53c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d540:	1812      	adds	r2, r2, r0
 800d542:	eb41 0303 	adc.w	r3, r1, r3
 800d546:	f04f 0400 	mov.w	r4, #0
 800d54a:	f04f 0500 	mov.w	r5, #0
 800d54e:	00dd      	lsls	r5, r3, #3
 800d550:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d554:	00d4      	lsls	r4, r2, #3
 800d556:	4622      	mov	r2, r4
 800d558:	462b      	mov	r3, r5
 800d55a:	eb12 0a00 	adds.w	sl, r2, r0
 800d55e:	eb43 0b01 	adc.w	fp, r3, r1
 800d562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	4618      	mov	r0, r3
 800d568:	f04f 0100 	mov.w	r1, #0
 800d56c:	f04f 0200 	mov.w	r2, #0
 800d570:	f04f 0300 	mov.w	r3, #0
 800d574:	008b      	lsls	r3, r1, #2
 800d576:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d57a:	0082      	lsls	r2, r0, #2
 800d57c:	4650      	mov	r0, sl
 800d57e:	4659      	mov	r1, fp
 800d580:	f7f3 fb92 	bl	8000ca8 <__aeabi_uldivmod>
 800d584:	4602      	mov	r2, r0
 800d586:	460b      	mov	r3, r1
 800d588:	4b0e      	ldr	r3, [pc, #56]	; (800d5c4 <UART_SetConfig+0x38c>)
 800d58a:	fba3 1302 	umull	r1, r3, r3, r2
 800d58e:	095b      	lsrs	r3, r3, #5
 800d590:	2164      	movs	r1, #100	; 0x64
 800d592:	fb01 f303 	mul.w	r3, r1, r3
 800d596:	1ad3      	subs	r3, r2, r3
 800d598:	011b      	lsls	r3, r3, #4
 800d59a:	3332      	adds	r3, #50	; 0x32
 800d59c:	4a09      	ldr	r2, [pc, #36]	; (800d5c4 <UART_SetConfig+0x38c>)
 800d59e:	fba2 2303 	umull	r2, r3, r2, r3
 800d5a2:	095b      	lsrs	r3, r3, #5
 800d5a4:	f003 020f 	and.w	r2, r3, #15
 800d5a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4432      	add	r2, r6
 800d5ae:	609a      	str	r2, [r3, #8]
}
 800d5b0:	bf00      	nop
 800d5b2:	377c      	adds	r7, #124	; 0x7c
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ba:	bf00      	nop
 800d5bc:	40011000 	.word	0x40011000
 800d5c0:	40011400 	.word	0x40011400
 800d5c4:	51eb851f 	.word	0x51eb851f

0800d5c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d5c8:	b084      	sub	sp, #16
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b084      	sub	sp, #16
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
 800d5d2:	f107 001c 	add.w	r0, r7, #28
 800d5d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d122      	bne.n	800d626 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d5f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	68db      	ldr	r3, [r3, #12]
 800d600:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d105      	bne.n	800d61a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	68db      	ldr	r3, [r3, #12]
 800d612:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f001 fb1c 	bl	800ec58 <USB_CoreReset>
 800d620:	4603      	mov	r3, r0
 800d622:	73fb      	strb	r3, [r7, #15]
 800d624:	e01a      	b.n	800d65c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f001 fb10 	bl	800ec58 <USB_CoreReset>
 800d638:	4603      	mov	r3, r0
 800d63a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d63c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d106      	bne.n	800d650 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d646:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	639a      	str	r2, [r3, #56]	; 0x38
 800d64e:	e005      	b.n	800d65c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d654:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d10b      	bne.n	800d67a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	f043 0206 	orr.w	r2, r3, #6
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	f043 0220 	orr.w	r2, r3, #32
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3710      	adds	r7, #16
 800d680:	46bd      	mov	sp, r7
 800d682:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d686:	b004      	add	sp, #16
 800d688:	4770      	bx	lr
	...

0800d68c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b087      	sub	sp, #28
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	4613      	mov	r3, r2
 800d698:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d69a:	79fb      	ldrb	r3, [r7, #7]
 800d69c:	2b02      	cmp	r3, #2
 800d69e:	d165      	bne.n	800d76c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	4a41      	ldr	r2, [pc, #260]	; (800d7a8 <USB_SetTurnaroundTime+0x11c>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d906      	bls.n	800d6b6 <USB_SetTurnaroundTime+0x2a>
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	4a40      	ldr	r2, [pc, #256]	; (800d7ac <USB_SetTurnaroundTime+0x120>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d202      	bcs.n	800d6b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d6b0:	230f      	movs	r3, #15
 800d6b2:	617b      	str	r3, [r7, #20]
 800d6b4:	e062      	b.n	800d77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	4a3c      	ldr	r2, [pc, #240]	; (800d7ac <USB_SetTurnaroundTime+0x120>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d306      	bcc.n	800d6cc <USB_SetTurnaroundTime+0x40>
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	4a3b      	ldr	r2, [pc, #236]	; (800d7b0 <USB_SetTurnaroundTime+0x124>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d202      	bcs.n	800d6cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d6c6:	230e      	movs	r3, #14
 800d6c8:	617b      	str	r3, [r7, #20]
 800d6ca:	e057      	b.n	800d77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	4a38      	ldr	r2, [pc, #224]	; (800d7b0 <USB_SetTurnaroundTime+0x124>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d306      	bcc.n	800d6e2 <USB_SetTurnaroundTime+0x56>
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	4a37      	ldr	r2, [pc, #220]	; (800d7b4 <USB_SetTurnaroundTime+0x128>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d202      	bcs.n	800d6e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d6dc:	230d      	movs	r3, #13
 800d6de:	617b      	str	r3, [r7, #20]
 800d6e0:	e04c      	b.n	800d77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	4a33      	ldr	r2, [pc, #204]	; (800d7b4 <USB_SetTurnaroundTime+0x128>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d306      	bcc.n	800d6f8 <USB_SetTurnaroundTime+0x6c>
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	4a32      	ldr	r2, [pc, #200]	; (800d7b8 <USB_SetTurnaroundTime+0x12c>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d802      	bhi.n	800d6f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d6f2:	230c      	movs	r3, #12
 800d6f4:	617b      	str	r3, [r7, #20]
 800d6f6:	e041      	b.n	800d77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	4a2f      	ldr	r2, [pc, #188]	; (800d7b8 <USB_SetTurnaroundTime+0x12c>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d906      	bls.n	800d70e <USB_SetTurnaroundTime+0x82>
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	4a2e      	ldr	r2, [pc, #184]	; (800d7bc <USB_SetTurnaroundTime+0x130>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d802      	bhi.n	800d70e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d708:	230b      	movs	r3, #11
 800d70a:	617b      	str	r3, [r7, #20]
 800d70c:	e036      	b.n	800d77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	4a2a      	ldr	r2, [pc, #168]	; (800d7bc <USB_SetTurnaroundTime+0x130>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d906      	bls.n	800d724 <USB_SetTurnaroundTime+0x98>
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	4a29      	ldr	r2, [pc, #164]	; (800d7c0 <USB_SetTurnaroundTime+0x134>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d802      	bhi.n	800d724 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d71e:	230a      	movs	r3, #10
 800d720:	617b      	str	r3, [r7, #20]
 800d722:	e02b      	b.n	800d77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	4a26      	ldr	r2, [pc, #152]	; (800d7c0 <USB_SetTurnaroundTime+0x134>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d906      	bls.n	800d73a <USB_SetTurnaroundTime+0xae>
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	4a25      	ldr	r2, [pc, #148]	; (800d7c4 <USB_SetTurnaroundTime+0x138>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d202      	bcs.n	800d73a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d734:	2309      	movs	r3, #9
 800d736:	617b      	str	r3, [r7, #20]
 800d738:	e020      	b.n	800d77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	4a21      	ldr	r2, [pc, #132]	; (800d7c4 <USB_SetTurnaroundTime+0x138>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d306      	bcc.n	800d750 <USB_SetTurnaroundTime+0xc4>
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	4a20      	ldr	r2, [pc, #128]	; (800d7c8 <USB_SetTurnaroundTime+0x13c>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d802      	bhi.n	800d750 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d74a:	2308      	movs	r3, #8
 800d74c:	617b      	str	r3, [r7, #20]
 800d74e:	e015      	b.n	800d77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	4a1d      	ldr	r2, [pc, #116]	; (800d7c8 <USB_SetTurnaroundTime+0x13c>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d906      	bls.n	800d766 <USB_SetTurnaroundTime+0xda>
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	4a1c      	ldr	r2, [pc, #112]	; (800d7cc <USB_SetTurnaroundTime+0x140>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d202      	bcs.n	800d766 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d760:	2307      	movs	r3, #7
 800d762:	617b      	str	r3, [r7, #20]
 800d764:	e00a      	b.n	800d77c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d766:	2306      	movs	r3, #6
 800d768:	617b      	str	r3, [r7, #20]
 800d76a:	e007      	b.n	800d77c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d76c:	79fb      	ldrb	r3, [r7, #7]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d102      	bne.n	800d778 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d772:	2309      	movs	r3, #9
 800d774:	617b      	str	r3, [r7, #20]
 800d776:	e001      	b.n	800d77c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d778:	2309      	movs	r3, #9
 800d77a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	68da      	ldr	r2, [r3, #12]
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	029b      	lsls	r3, r3, #10
 800d790:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d794:	431a      	orrs	r2, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d79a:	2300      	movs	r3, #0
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	371c      	adds	r7, #28
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr
 800d7a8:	00d8acbf 	.word	0x00d8acbf
 800d7ac:	00e4e1c0 	.word	0x00e4e1c0
 800d7b0:	00f42400 	.word	0x00f42400
 800d7b4:	01067380 	.word	0x01067380
 800d7b8:	011a499f 	.word	0x011a499f
 800d7bc:	01312cff 	.word	0x01312cff
 800d7c0:	014ca43f 	.word	0x014ca43f
 800d7c4:	016e3600 	.word	0x016e3600
 800d7c8:	01a6ab1f 	.word	0x01a6ab1f
 800d7cc:	01e84800 	.word	0x01e84800

0800d7d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	f043 0201 	orr.w	r2, r3, #1
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d7e4:	2300      	movs	r3, #0
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	370c      	adds	r7, #12
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr

0800d7f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7f2:	b480      	push	{r7}
 800d7f4:	b083      	sub	sp, #12
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	689b      	ldr	r3, [r3, #8]
 800d7fe:	f023 0201 	bic.w	r2, r3, #1
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d806:	2300      	movs	r3, #0
}
 800d808:	4618      	mov	r0, r3
 800d80a:	370c      	adds	r7, #12
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr

0800d814 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	460b      	mov	r3, r1
 800d81e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d820:	2300      	movs	r3, #0
 800d822:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	68db      	ldr	r3, [r3, #12]
 800d828:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d830:	78fb      	ldrb	r3, [r7, #3]
 800d832:	2b01      	cmp	r3, #1
 800d834:	d115      	bne.n	800d862 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d842:	2001      	movs	r0, #1
 800d844:	f7f9 fb6e 	bl	8006f24 <HAL_Delay>
      ms++;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	3301      	adds	r3, #1
 800d84c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f001 f972 	bl	800eb38 <USB_GetMode>
 800d854:	4603      	mov	r3, r0
 800d856:	2b01      	cmp	r3, #1
 800d858:	d01e      	beq.n	800d898 <USB_SetCurrentMode+0x84>
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	2b31      	cmp	r3, #49	; 0x31
 800d85e:	d9f0      	bls.n	800d842 <USB_SetCurrentMode+0x2e>
 800d860:	e01a      	b.n	800d898 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d862:	78fb      	ldrb	r3, [r7, #3]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d115      	bne.n	800d894 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d874:	2001      	movs	r0, #1
 800d876:	f7f9 fb55 	bl	8006f24 <HAL_Delay>
      ms++;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	3301      	adds	r3, #1
 800d87e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f001 f959 	bl	800eb38 <USB_GetMode>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d005      	beq.n	800d898 <USB_SetCurrentMode+0x84>
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2b31      	cmp	r3, #49	; 0x31
 800d890:	d9f0      	bls.n	800d874 <USB_SetCurrentMode+0x60>
 800d892:	e001      	b.n	800d898 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d894:	2301      	movs	r3, #1
 800d896:	e005      	b.n	800d8a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2b32      	cmp	r3, #50	; 0x32
 800d89c:	d101      	bne.n	800d8a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	e000      	b.n	800d8a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d8a2:	2300      	movs	r3, #0
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d8ac:	b084      	sub	sp, #16
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b086      	sub	sp, #24
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
 800d8b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d8ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	613b      	str	r3, [r7, #16]
 800d8ca:	e009      	b.n	800d8e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	3340      	adds	r3, #64	; 0x40
 800d8d2:	009b      	lsls	r3, r3, #2
 800d8d4:	4413      	add	r3, r2
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	613b      	str	r3, [r7, #16]
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	2b0e      	cmp	r3, #14
 800d8e4:	d9f2      	bls.n	800d8cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d8e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d11c      	bne.n	800d926 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	68fa      	ldr	r2, [r7, #12]
 800d8f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d8fa:	f043 0302 	orr.w	r3, r3, #2
 800d8fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d904:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d910:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d91c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	639a      	str	r2, [r3, #56]	; 0x38
 800d924:	e00b      	b.n	800d93e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d92a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d936:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d944:	461a      	mov	r2, r3
 800d946:	2300      	movs	r3, #0
 800d948:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d950:	4619      	mov	r1, r3
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d958:	461a      	mov	r2, r3
 800d95a:	680b      	ldr	r3, [r1, #0]
 800d95c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d960:	2b01      	cmp	r3, #1
 800d962:	d10c      	bne.n	800d97e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d966:	2b00      	cmp	r3, #0
 800d968:	d104      	bne.n	800d974 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d96a:	2100      	movs	r1, #0
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 f945 	bl	800dbfc <USB_SetDevSpeed>
 800d972:	e008      	b.n	800d986 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d974:	2101      	movs	r1, #1
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f940 	bl	800dbfc <USB_SetDevSpeed>
 800d97c:	e003      	b.n	800d986 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d97e:	2103      	movs	r1, #3
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 f93b 	bl	800dbfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d986:	2110      	movs	r1, #16
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 f8f3 	bl	800db74 <USB_FlushTxFifo>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d001      	beq.n	800d998 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800d994:	2301      	movs	r3, #1
 800d996:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 f90f 	bl	800dbbc <USB_FlushRxFifo>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d001      	beq.n	800d9a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	2300      	movs	r3, #0
 800d9be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	613b      	str	r3, [r7, #16]
 800d9d0:	e043      	b.n	800da5a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	015a      	lsls	r2, r3, #5
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	4413      	add	r3, r2
 800d9da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d9e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d9e8:	d118      	bne.n	800da1c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d10a      	bne.n	800da06 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	015a      	lsls	r2, r3, #5
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	4413      	add	r3, r2
 800d9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da02:	6013      	str	r3, [r2, #0]
 800da04:	e013      	b.n	800da2e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	015a      	lsls	r2, r3, #5
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	4413      	add	r3, r2
 800da0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da12:	461a      	mov	r2, r3
 800da14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800da18:	6013      	str	r3, [r2, #0]
 800da1a:	e008      	b.n	800da2e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	015a      	lsls	r2, r3, #5
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	4413      	add	r3, r2
 800da24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da28:	461a      	mov	r2, r3
 800da2a:	2300      	movs	r3, #0
 800da2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	015a      	lsls	r2, r3, #5
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	4413      	add	r3, r2
 800da36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da3a:	461a      	mov	r2, r3
 800da3c:	2300      	movs	r3, #0
 800da3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	015a      	lsls	r2, r3, #5
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	4413      	add	r3, r2
 800da48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da4c:	461a      	mov	r2, r3
 800da4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800da52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	3301      	adds	r3, #1
 800da58:	613b      	str	r3, [r7, #16]
 800da5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5c:	693a      	ldr	r2, [r7, #16]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d3b7      	bcc.n	800d9d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da62:	2300      	movs	r3, #0
 800da64:	613b      	str	r3, [r7, #16]
 800da66:	e043      	b.n	800daf0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	015a      	lsls	r2, r3, #5
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	4413      	add	r3, r2
 800da70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da7e:	d118      	bne.n	800dab2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d10a      	bne.n	800da9c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	015a      	lsls	r2, r3, #5
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	4413      	add	r3, r2
 800da8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da92:	461a      	mov	r2, r3
 800da94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da98:	6013      	str	r3, [r2, #0]
 800da9a:	e013      	b.n	800dac4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	015a      	lsls	r2, r3, #5
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	4413      	add	r3, r2
 800daa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daa8:	461a      	mov	r2, r3
 800daaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800daae:	6013      	str	r3, [r2, #0]
 800dab0:	e008      	b.n	800dac4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	015a      	lsls	r2, r3, #5
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	4413      	add	r3, r2
 800daba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dabe:	461a      	mov	r2, r3
 800dac0:	2300      	movs	r3, #0
 800dac2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	015a      	lsls	r2, r3, #5
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	4413      	add	r3, r2
 800dacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dad0:	461a      	mov	r2, r3
 800dad2:	2300      	movs	r3, #0
 800dad4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	015a      	lsls	r2, r3, #5
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	4413      	add	r3, r2
 800dade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dae2:	461a      	mov	r2, r3
 800dae4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dae8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	3301      	adds	r3, #1
 800daee:	613b      	str	r3, [r7, #16]
 800daf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf2:	693a      	ldr	r2, [r7, #16]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d3b7      	bcc.n	800da68 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dafe:	691b      	ldr	r3, [r3, #16]
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2200      	movs	r2, #0
 800db10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800db18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800db1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d105      	bne.n	800db2c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	699b      	ldr	r3, [r3, #24]
 800db24:	f043 0210 	orr.w	r2, r3, #16
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	699a      	ldr	r2, [r3, #24]
 800db30:	4b0f      	ldr	r3, [pc, #60]	; (800db70 <USB_DevInit+0x2c4>)
 800db32:	4313      	orrs	r3, r2
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800db38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d005      	beq.n	800db4a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	699b      	ldr	r3, [r3, #24]
 800db42:	f043 0208 	orr.w	r2, r3, #8
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800db4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d107      	bne.n	800db60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	699b      	ldr	r3, [r3, #24]
 800db54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db58:	f043 0304 	orr.w	r3, r3, #4
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800db60:	7dfb      	ldrb	r3, [r7, #23]
}
 800db62:	4618      	mov	r0, r3
 800db64:	3718      	adds	r7, #24
 800db66:	46bd      	mov	sp, r7
 800db68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db6c:	b004      	add	sp, #16
 800db6e:	4770      	bx	lr
 800db70:	803c3800 	.word	0x803c3800

0800db74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800db74:	b480      	push	{r7}
 800db76:	b085      	sub	sp, #20
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800db7e:	2300      	movs	r3, #0
 800db80:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	019b      	lsls	r3, r3, #6
 800db86:	f043 0220 	orr.w	r2, r3, #32
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	3301      	adds	r3, #1
 800db92:	60fb      	str	r3, [r7, #12]
 800db94:	4a08      	ldr	r2, [pc, #32]	; (800dbb8 <USB_FlushTxFifo+0x44>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d901      	bls.n	800db9e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800db9a:	2303      	movs	r3, #3
 800db9c:	e006      	b.n	800dbac <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	691b      	ldr	r3, [r3, #16]
 800dba2:	f003 0320 	and.w	r3, r3, #32
 800dba6:	2b20      	cmp	r3, #32
 800dba8:	d0f1      	beq.n	800db8e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800dbaa:	2300      	movs	r3, #0
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3714      	adds	r7, #20
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr
 800dbb8:	00030d40 	.word	0x00030d40

0800dbbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b085      	sub	sp, #20
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2210      	movs	r2, #16
 800dbcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	60fb      	str	r3, [r7, #12]
 800dbd4:	4a08      	ldr	r2, [pc, #32]	; (800dbf8 <USB_FlushRxFifo+0x3c>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d901      	bls.n	800dbde <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800dbda:	2303      	movs	r3, #3
 800dbdc:	e006      	b.n	800dbec <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	691b      	ldr	r3, [r3, #16]
 800dbe2:	f003 0310 	and.w	r3, r3, #16
 800dbe6:	2b10      	cmp	r3, #16
 800dbe8:	d0f1      	beq.n	800dbce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3714      	adds	r7, #20
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr
 800dbf8:	00030d40 	.word	0x00030d40

0800dbfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	460b      	mov	r3, r1
 800dc06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	78fb      	ldrb	r3, [r7, #3]
 800dc16:	68f9      	ldr	r1, [r7, #12]
 800dc18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc1c:	4313      	orrs	r3, r2
 800dc1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dc20:	2300      	movs	r3, #0
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3714      	adds	r7, #20
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr

0800dc2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dc2e:	b480      	push	{r7}
 800dc30:	b087      	sub	sp, #28
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	f003 0306 	and.w	r3, r3, #6
 800dc46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d102      	bne.n	800dc54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	75fb      	strb	r3, [r7, #23]
 800dc52:	e00a      	b.n	800dc6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2b02      	cmp	r3, #2
 800dc58:	d002      	beq.n	800dc60 <USB_GetDevSpeed+0x32>
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2b06      	cmp	r3, #6
 800dc5e:	d102      	bne.n	800dc66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dc60:	2302      	movs	r3, #2
 800dc62:	75fb      	strb	r3, [r7, #23]
 800dc64:	e001      	b.n	800dc6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800dc66:	230f      	movs	r3, #15
 800dc68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dc6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	371c      	adds	r7, #28
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b085      	sub	sp, #20
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	785b      	ldrb	r3, [r3, #1]
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	d13a      	bne.n	800dd0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc9a:	69da      	ldr	r2, [r3, #28]
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	f003 030f 	and.w	r3, r3, #15
 800dca4:	2101      	movs	r1, #1
 800dca6:	fa01 f303 	lsl.w	r3, r1, r3
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	68f9      	ldr	r1, [r7, #12]
 800dcae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	015a      	lsls	r2, r3, #5
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d155      	bne.n	800dd78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	015a      	lsls	r2, r3, #5
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	689b      	ldr	r3, [r3, #8]
 800dcde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	78db      	ldrb	r3, [r3, #3]
 800dce6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dce8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	059b      	lsls	r3, r3, #22
 800dcee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dcf0:	4313      	orrs	r3, r2
 800dcf2:	68ba      	ldr	r2, [r7, #8]
 800dcf4:	0151      	lsls	r1, r2, #5
 800dcf6:	68fa      	ldr	r2, [r7, #12]
 800dcf8:	440a      	add	r2, r1
 800dcfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd06:	6013      	str	r3, [r2, #0]
 800dd08:	e036      	b.n	800dd78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd10:	69da      	ldr	r2, [r3, #28]
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	f003 030f 	and.w	r3, r3, #15
 800dd1a:	2101      	movs	r1, #1
 800dd1c:	fa01 f303 	lsl.w	r3, r1, r3
 800dd20:	041b      	lsls	r3, r3, #16
 800dd22:	68f9      	ldr	r1, [r7, #12]
 800dd24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	015a      	lsls	r2, r3, #5
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	4413      	add	r3, r2
 800dd34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d11a      	bne.n	800dd78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	015a      	lsls	r2, r3, #5
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	4413      	add	r3, r2
 800dd4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	689b      	ldr	r3, [r3, #8]
 800dd54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	78db      	ldrb	r3, [r3, #3]
 800dd5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dd5e:	430b      	orrs	r3, r1
 800dd60:	4313      	orrs	r3, r2
 800dd62:	68ba      	ldr	r2, [r7, #8]
 800dd64:	0151      	lsls	r1, r2, #5
 800dd66:	68fa      	ldr	r2, [r7, #12]
 800dd68:	440a      	add	r2, r1
 800dd6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3714      	adds	r7, #20
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
	...

0800dd88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b085      	sub	sp, #20
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	785b      	ldrb	r3, [r3, #1]
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d161      	bne.n	800de68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	015a      	lsls	r2, r3, #5
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	4413      	add	r3, r2
 800ddac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddba:	d11f      	bne.n	800ddfc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	015a      	lsls	r2, r3, #5
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	4413      	add	r3, r2
 800ddc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	68ba      	ldr	r2, [r7, #8]
 800ddcc:	0151      	lsls	r1, r2, #5
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	440a      	add	r2, r1
 800ddd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ddda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	015a      	lsls	r2, r3, #5
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	4413      	add	r3, r2
 800dde4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	68ba      	ldr	r2, [r7, #8]
 800ddec:	0151      	lsls	r1, r2, #5
 800ddee:	68fa      	ldr	r2, [r7, #12]
 800ddf0:	440a      	add	r2, r1
 800ddf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	f003 030f 	and.w	r3, r3, #15
 800de0c:	2101      	movs	r1, #1
 800de0e:	fa01 f303 	lsl.w	r3, r1, r3
 800de12:	b29b      	uxth	r3, r3
 800de14:	43db      	mvns	r3, r3
 800de16:	68f9      	ldr	r1, [r7, #12]
 800de18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de1c:	4013      	ands	r3, r2
 800de1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de26:	69da      	ldr	r2, [r3, #28]
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	f003 030f 	and.w	r3, r3, #15
 800de30:	2101      	movs	r1, #1
 800de32:	fa01 f303 	lsl.w	r3, r1, r3
 800de36:	b29b      	uxth	r3, r3
 800de38:	43db      	mvns	r3, r3
 800de3a:	68f9      	ldr	r1, [r7, #12]
 800de3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de40:	4013      	ands	r3, r2
 800de42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	015a      	lsls	r2, r3, #5
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	4413      	add	r3, r2
 800de4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de50:	681a      	ldr	r2, [r3, #0]
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	0159      	lsls	r1, r3, #5
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	440b      	add	r3, r1
 800de5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de5e:	4619      	mov	r1, r3
 800de60:	4b35      	ldr	r3, [pc, #212]	; (800df38 <USB_DeactivateEndpoint+0x1b0>)
 800de62:	4013      	ands	r3, r2
 800de64:	600b      	str	r3, [r1, #0]
 800de66:	e060      	b.n	800df2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	015a      	lsls	r2, r3, #5
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	4413      	add	r3, r2
 800de70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de7e:	d11f      	bne.n	800dec0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	015a      	lsls	r2, r3, #5
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	4413      	add	r3, r2
 800de88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	68ba      	ldr	r2, [r7, #8]
 800de90:	0151      	lsls	r1, r2, #5
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	440a      	add	r2, r1
 800de96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800de9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	015a      	lsls	r2, r3, #5
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	4413      	add	r3, r2
 800dea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	0151      	lsls	r1, r2, #5
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	440a      	add	r2, r1
 800deb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800deba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800debe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	f003 030f 	and.w	r3, r3, #15
 800ded0:	2101      	movs	r1, #1
 800ded2:	fa01 f303 	lsl.w	r3, r1, r3
 800ded6:	041b      	lsls	r3, r3, #16
 800ded8:	43db      	mvns	r3, r3
 800deda:	68f9      	ldr	r1, [r7, #12]
 800dedc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dee0:	4013      	ands	r3, r2
 800dee2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deea:	69da      	ldr	r2, [r3, #28]
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	f003 030f 	and.w	r3, r3, #15
 800def4:	2101      	movs	r1, #1
 800def6:	fa01 f303 	lsl.w	r3, r1, r3
 800defa:	041b      	lsls	r3, r3, #16
 800defc:	43db      	mvns	r3, r3
 800defe:	68f9      	ldr	r1, [r7, #12]
 800df00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df04:	4013      	ands	r3, r2
 800df06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	015a      	lsls	r2, r3, #5
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	4413      	add	r3, r2
 800df10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	0159      	lsls	r1, r3, #5
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	440b      	add	r3, r1
 800df1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df22:	4619      	mov	r1, r3
 800df24:	4b05      	ldr	r3, [pc, #20]	; (800df3c <USB_DeactivateEndpoint+0x1b4>)
 800df26:	4013      	ands	r3, r2
 800df28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3714      	adds	r7, #20
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr
 800df38:	ec337800 	.word	0xec337800
 800df3c:	eff37800 	.word	0xeff37800

0800df40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b08a      	sub	sp, #40	; 0x28
 800df44:	af02      	add	r7, sp, #8
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	4613      	mov	r3, r2
 800df4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	785b      	ldrb	r3, [r3, #1]
 800df5c:	2b01      	cmp	r3, #1
 800df5e:	f040 815c 	bne.w	800e21a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	695b      	ldr	r3, [r3, #20]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d132      	bne.n	800dfd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df6a:	69bb      	ldr	r3, [r7, #24]
 800df6c:	015a      	lsls	r2, r3, #5
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	4413      	add	r3, r2
 800df72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df76:	691b      	ldr	r3, [r3, #16]
 800df78:	69ba      	ldr	r2, [r7, #24]
 800df7a:	0151      	lsls	r1, r2, #5
 800df7c:	69fa      	ldr	r2, [r7, #28]
 800df7e:	440a      	add	r2, r1
 800df80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800df88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800df8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	015a      	lsls	r2, r3, #5
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	4413      	add	r3, r2
 800df96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df9a:	691b      	ldr	r3, [r3, #16]
 800df9c:	69ba      	ldr	r2, [r7, #24]
 800df9e:	0151      	lsls	r1, r2, #5
 800dfa0:	69fa      	ldr	r2, [r7, #28]
 800dfa2:	440a      	add	r2, r1
 800dfa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dfac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	015a      	lsls	r2, r3, #5
 800dfb2:	69fb      	ldr	r3, [r7, #28]
 800dfb4:	4413      	add	r3, r2
 800dfb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfba:	691b      	ldr	r3, [r3, #16]
 800dfbc:	69ba      	ldr	r2, [r7, #24]
 800dfbe:	0151      	lsls	r1, r2, #5
 800dfc0:	69fa      	ldr	r2, [r7, #28]
 800dfc2:	440a      	add	r2, r1
 800dfc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfc8:	0cdb      	lsrs	r3, r3, #19
 800dfca:	04db      	lsls	r3, r3, #19
 800dfcc:	6113      	str	r3, [r2, #16]
 800dfce:	e074      	b.n	800e0ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	015a      	lsls	r2, r3, #5
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfdc:	691b      	ldr	r3, [r3, #16]
 800dfde:	69ba      	ldr	r2, [r7, #24]
 800dfe0:	0151      	lsls	r1, r2, #5
 800dfe2:	69fa      	ldr	r2, [r7, #28]
 800dfe4:	440a      	add	r2, r1
 800dfe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfea:	0cdb      	lsrs	r3, r3, #19
 800dfec:	04db      	lsls	r3, r3, #19
 800dfee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dff0:	69bb      	ldr	r3, [r7, #24]
 800dff2:	015a      	lsls	r2, r3, #5
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	4413      	add	r3, r2
 800dff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dffc:	691b      	ldr	r3, [r3, #16]
 800dffe:	69ba      	ldr	r2, [r7, #24]
 800e000:	0151      	lsls	r1, r2, #5
 800e002:	69fa      	ldr	r2, [r7, #28]
 800e004:	440a      	add	r2, r1
 800e006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e00a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e00e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e012:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	015a      	lsls	r2, r3, #5
 800e018:	69fb      	ldr	r3, [r7, #28]
 800e01a:	4413      	add	r3, r2
 800e01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e020:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	6959      	ldr	r1, [r3, #20]
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	440b      	add	r3, r1
 800e02c:	1e59      	subs	r1, r3, #1
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	fbb1 f3f3 	udiv	r3, r1, r3
 800e036:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e038:	4b9d      	ldr	r3, [pc, #628]	; (800e2b0 <USB_EPStartXfer+0x370>)
 800e03a:	400b      	ands	r3, r1
 800e03c:	69b9      	ldr	r1, [r7, #24]
 800e03e:	0148      	lsls	r0, r1, #5
 800e040:	69f9      	ldr	r1, [r7, #28]
 800e042:	4401      	add	r1, r0
 800e044:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e048:	4313      	orrs	r3, r2
 800e04a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	015a      	lsls	r2, r3, #5
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	4413      	add	r3, r2
 800e054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e058:	691a      	ldr	r2, [r3, #16]
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	695b      	ldr	r3, [r3, #20]
 800e05e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e062:	69b9      	ldr	r1, [r7, #24]
 800e064:	0148      	lsls	r0, r1, #5
 800e066:	69f9      	ldr	r1, [r7, #28]
 800e068:	4401      	add	r1, r0
 800e06a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e06e:	4313      	orrs	r3, r2
 800e070:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	78db      	ldrb	r3, [r3, #3]
 800e076:	2b01      	cmp	r3, #1
 800e078:	d11f      	bne.n	800e0ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e07a:	69bb      	ldr	r3, [r7, #24]
 800e07c:	015a      	lsls	r2, r3, #5
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	4413      	add	r3, r2
 800e082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e086:	691b      	ldr	r3, [r3, #16]
 800e088:	69ba      	ldr	r2, [r7, #24]
 800e08a:	0151      	lsls	r1, r2, #5
 800e08c:	69fa      	ldr	r2, [r7, #28]
 800e08e:	440a      	add	r2, r1
 800e090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e094:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e098:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	015a      	lsls	r2, r3, #5
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0a6:	691b      	ldr	r3, [r3, #16]
 800e0a8:	69ba      	ldr	r2, [r7, #24]
 800e0aa:	0151      	lsls	r1, r2, #5
 800e0ac:	69fa      	ldr	r2, [r7, #28]
 800e0ae:	440a      	add	r2, r1
 800e0b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e0b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e0ba:	79fb      	ldrb	r3, [r7, #7]
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d14b      	bne.n	800e158 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	691b      	ldr	r3, [r3, #16]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d009      	beq.n	800e0dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	015a      	lsls	r2, r3, #5
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	691b      	ldr	r3, [r3, #16]
 800e0da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	78db      	ldrb	r3, [r3, #3]
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d128      	bne.n	800e136 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0ea:	689b      	ldr	r3, [r3, #8]
 800e0ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d110      	bne.n	800e116 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	015a      	lsls	r2, r3, #5
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	69ba      	ldr	r2, [r7, #24]
 800e104:	0151      	lsls	r1, r2, #5
 800e106:	69fa      	ldr	r2, [r7, #28]
 800e108:	440a      	add	r2, r1
 800e10a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e10e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e112:	6013      	str	r3, [r2, #0]
 800e114:	e00f      	b.n	800e136 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	015a      	lsls	r2, r3, #5
 800e11a:	69fb      	ldr	r3, [r7, #28]
 800e11c:	4413      	add	r3, r2
 800e11e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	69ba      	ldr	r2, [r7, #24]
 800e126:	0151      	lsls	r1, r2, #5
 800e128:	69fa      	ldr	r2, [r7, #28]
 800e12a:	440a      	add	r2, r1
 800e12c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e134:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e136:	69bb      	ldr	r3, [r7, #24]
 800e138:	015a      	lsls	r2, r3, #5
 800e13a:	69fb      	ldr	r3, [r7, #28]
 800e13c:	4413      	add	r3, r2
 800e13e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	69ba      	ldr	r2, [r7, #24]
 800e146:	0151      	lsls	r1, r2, #5
 800e148:	69fa      	ldr	r2, [r7, #28]
 800e14a:	440a      	add	r2, r1
 800e14c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e150:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e154:	6013      	str	r3, [r2, #0]
 800e156:	e12f      	b.n	800e3b8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e158:	69bb      	ldr	r3, [r7, #24]
 800e15a:	015a      	lsls	r2, r3, #5
 800e15c:	69fb      	ldr	r3, [r7, #28]
 800e15e:	4413      	add	r3, r2
 800e160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	69ba      	ldr	r2, [r7, #24]
 800e168:	0151      	lsls	r1, r2, #5
 800e16a:	69fa      	ldr	r2, [r7, #28]
 800e16c:	440a      	add	r2, r1
 800e16e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e172:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e176:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	78db      	ldrb	r3, [r3, #3]
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d015      	beq.n	800e1ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	695b      	ldr	r3, [r3, #20]
 800e184:	2b00      	cmp	r3, #0
 800e186:	f000 8117 	beq.w	800e3b8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	f003 030f 	and.w	r3, r3, #15
 800e19a:	2101      	movs	r1, #1
 800e19c:	fa01 f303 	lsl.w	r3, r1, r3
 800e1a0:	69f9      	ldr	r1, [r7, #28]
 800e1a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	634b      	str	r3, [r1, #52]	; 0x34
 800e1aa:	e105      	b.n	800e3b8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d110      	bne.n	800e1de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e1bc:	69bb      	ldr	r3, [r7, #24]
 800e1be:	015a      	lsls	r2, r3, #5
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	4413      	add	r3, r2
 800e1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	69ba      	ldr	r2, [r7, #24]
 800e1cc:	0151      	lsls	r1, r2, #5
 800e1ce:	69fa      	ldr	r2, [r7, #28]
 800e1d0:	440a      	add	r2, r1
 800e1d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e1da:	6013      	str	r3, [r2, #0]
 800e1dc:	e00f      	b.n	800e1fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	015a      	lsls	r2, r3, #5
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	69ba      	ldr	r2, [r7, #24]
 800e1ee:	0151      	lsls	r1, r2, #5
 800e1f0:	69fa      	ldr	r2, [r7, #28]
 800e1f2:	440a      	add	r2, r1
 800e1f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	68d9      	ldr	r1, [r3, #12]
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	781a      	ldrb	r2, [r3, #0]
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	695b      	ldr	r3, [r3, #20]
 800e20a:	b298      	uxth	r0, r3
 800e20c:	79fb      	ldrb	r3, [r7, #7]
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	4603      	mov	r3, r0
 800e212:	68f8      	ldr	r0, [r7, #12]
 800e214:	f000 fa2b 	bl	800e66e <USB_WritePacket>
 800e218:	e0ce      	b.n	800e3b8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e21a:	69bb      	ldr	r3, [r7, #24]
 800e21c:	015a      	lsls	r2, r3, #5
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	4413      	add	r3, r2
 800e222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e226:	691b      	ldr	r3, [r3, #16]
 800e228:	69ba      	ldr	r2, [r7, #24]
 800e22a:	0151      	lsls	r1, r2, #5
 800e22c:	69fa      	ldr	r2, [r7, #28]
 800e22e:	440a      	add	r2, r1
 800e230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e234:	0cdb      	lsrs	r3, r3, #19
 800e236:	04db      	lsls	r3, r3, #19
 800e238:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	015a      	lsls	r2, r3, #5
 800e23e:	69fb      	ldr	r3, [r7, #28]
 800e240:	4413      	add	r3, r2
 800e242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e246:	691b      	ldr	r3, [r3, #16]
 800e248:	69ba      	ldr	r2, [r7, #24]
 800e24a:	0151      	lsls	r1, r2, #5
 800e24c:	69fa      	ldr	r2, [r7, #28]
 800e24e:	440a      	add	r2, r1
 800e250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e254:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e258:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e25c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	695b      	ldr	r3, [r3, #20]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d126      	bne.n	800e2b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	015a      	lsls	r2, r3, #5
 800e26a:	69fb      	ldr	r3, [r7, #28]
 800e26c:	4413      	add	r3, r2
 800e26e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e272:	691a      	ldr	r2, [r3, #16]
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e27c:	69b9      	ldr	r1, [r7, #24]
 800e27e:	0148      	lsls	r0, r1, #5
 800e280:	69f9      	ldr	r1, [r7, #28]
 800e282:	4401      	add	r1, r0
 800e284:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e288:	4313      	orrs	r3, r2
 800e28a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	015a      	lsls	r2, r3, #5
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	4413      	add	r3, r2
 800e294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e298:	691b      	ldr	r3, [r3, #16]
 800e29a:	69ba      	ldr	r2, [r7, #24]
 800e29c:	0151      	lsls	r1, r2, #5
 800e29e:	69fa      	ldr	r2, [r7, #28]
 800e2a0:	440a      	add	r2, r1
 800e2a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e2aa:	6113      	str	r3, [r2, #16]
 800e2ac:	e036      	b.n	800e31c <USB_EPStartXfer+0x3dc>
 800e2ae:	bf00      	nop
 800e2b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	695a      	ldr	r2, [r3, #20]
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	4413      	add	r3, r2
 800e2be:	1e5a      	subs	r2, r3, #1
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2c8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	015a      	lsls	r2, r3, #5
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2d6:	691a      	ldr	r2, [r3, #16]
 800e2d8:	8afb      	ldrh	r3, [r7, #22]
 800e2da:	04d9      	lsls	r1, r3, #19
 800e2dc:	4b39      	ldr	r3, [pc, #228]	; (800e3c4 <USB_EPStartXfer+0x484>)
 800e2de:	400b      	ands	r3, r1
 800e2e0:	69b9      	ldr	r1, [r7, #24]
 800e2e2:	0148      	lsls	r0, r1, #5
 800e2e4:	69f9      	ldr	r1, [r7, #28]
 800e2e6:	4401      	add	r1, r0
 800e2e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	015a      	lsls	r2, r3, #5
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	4413      	add	r3, r2
 800e2f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2fc:	691a      	ldr	r2, [r3, #16]
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	689b      	ldr	r3, [r3, #8]
 800e302:	8af9      	ldrh	r1, [r7, #22]
 800e304:	fb01 f303 	mul.w	r3, r1, r3
 800e308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e30c:	69b9      	ldr	r1, [r7, #24]
 800e30e:	0148      	lsls	r0, r1, #5
 800e310:	69f9      	ldr	r1, [r7, #28]
 800e312:	4401      	add	r1, r0
 800e314:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e318:	4313      	orrs	r3, r2
 800e31a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e31c:	79fb      	ldrb	r3, [r7, #7]
 800e31e:	2b01      	cmp	r3, #1
 800e320:	d10d      	bne.n	800e33e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d009      	beq.n	800e33e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	68d9      	ldr	r1, [r3, #12]
 800e32e:	69bb      	ldr	r3, [r7, #24]
 800e330:	015a      	lsls	r2, r3, #5
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	4413      	add	r3, r2
 800e336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e33a:	460a      	mov	r2, r1
 800e33c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	78db      	ldrb	r3, [r3, #3]
 800e342:	2b01      	cmp	r3, #1
 800e344:	d128      	bne.n	800e398 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e346:	69fb      	ldr	r3, [r7, #28]
 800e348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e352:	2b00      	cmp	r3, #0
 800e354:	d110      	bne.n	800e378 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e356:	69bb      	ldr	r3, [r7, #24]
 800e358:	015a      	lsls	r2, r3, #5
 800e35a:	69fb      	ldr	r3, [r7, #28]
 800e35c:	4413      	add	r3, r2
 800e35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	69ba      	ldr	r2, [r7, #24]
 800e366:	0151      	lsls	r1, r2, #5
 800e368:	69fa      	ldr	r2, [r7, #28]
 800e36a:	440a      	add	r2, r1
 800e36c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e370:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e374:	6013      	str	r3, [r2, #0]
 800e376:	e00f      	b.n	800e398 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	015a      	lsls	r2, r3, #5
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	4413      	add	r3, r2
 800e380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	69ba      	ldr	r2, [r7, #24]
 800e388:	0151      	lsls	r1, r2, #5
 800e38a:	69fa      	ldr	r2, [r7, #28]
 800e38c:	440a      	add	r2, r1
 800e38e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e396:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e398:	69bb      	ldr	r3, [r7, #24]
 800e39a:	015a      	lsls	r2, r3, #5
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	4413      	add	r3, r2
 800e3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	69ba      	ldr	r2, [r7, #24]
 800e3a8:	0151      	lsls	r1, r2, #5
 800e3aa:	69fa      	ldr	r2, [r7, #28]
 800e3ac:	440a      	add	r2, r1
 800e3ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e3b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e3b8:	2300      	movs	r3, #0
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3720      	adds	r7, #32
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	1ff80000 	.word	0x1ff80000

0800e3c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b087      	sub	sp, #28
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	785b      	ldrb	r3, [r3, #1]
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	f040 80cd 	bne.w	800e584 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	695b      	ldr	r3, [r3, #20]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d132      	bne.n	800e458 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	015a      	lsls	r2, r3, #5
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	693a      	ldr	r2, [r7, #16]
 800e402:	0151      	lsls	r1, r2, #5
 800e404:	697a      	ldr	r2, [r7, #20]
 800e406:	440a      	add	r2, r1
 800e408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e40c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e410:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e414:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	015a      	lsls	r2, r3, #5
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	4413      	add	r3, r2
 800e41e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e422:	691b      	ldr	r3, [r3, #16]
 800e424:	693a      	ldr	r2, [r7, #16]
 800e426:	0151      	lsls	r1, r2, #5
 800e428:	697a      	ldr	r2, [r7, #20]
 800e42a:	440a      	add	r2, r1
 800e42c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	015a      	lsls	r2, r3, #5
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	4413      	add	r3, r2
 800e43e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e442:	691b      	ldr	r3, [r3, #16]
 800e444:	693a      	ldr	r2, [r7, #16]
 800e446:	0151      	lsls	r1, r2, #5
 800e448:	697a      	ldr	r2, [r7, #20]
 800e44a:	440a      	add	r2, r1
 800e44c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e450:	0cdb      	lsrs	r3, r3, #19
 800e452:	04db      	lsls	r3, r3, #19
 800e454:	6113      	str	r3, [r2, #16]
 800e456:	e04e      	b.n	800e4f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	015a      	lsls	r2, r3, #5
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	4413      	add	r3, r2
 800e460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e464:	691b      	ldr	r3, [r3, #16]
 800e466:	693a      	ldr	r2, [r7, #16]
 800e468:	0151      	lsls	r1, r2, #5
 800e46a:	697a      	ldr	r2, [r7, #20]
 800e46c:	440a      	add	r2, r1
 800e46e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e472:	0cdb      	lsrs	r3, r3, #19
 800e474:	04db      	lsls	r3, r3, #19
 800e476:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	015a      	lsls	r2, r3, #5
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	4413      	add	r3, r2
 800e480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e484:	691b      	ldr	r3, [r3, #16]
 800e486:	693a      	ldr	r2, [r7, #16]
 800e488:	0151      	lsls	r1, r2, #5
 800e48a:	697a      	ldr	r2, [r7, #20]
 800e48c:	440a      	add	r2, r1
 800e48e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e492:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e496:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e49a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	695a      	ldr	r2, [r3, #20]
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	689b      	ldr	r3, [r3, #8]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d903      	bls.n	800e4b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	689a      	ldr	r2, [r3, #8]
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	015a      	lsls	r2, r3, #5
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	4413      	add	r3, r2
 800e4b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4bc:	691b      	ldr	r3, [r3, #16]
 800e4be:	693a      	ldr	r2, [r7, #16]
 800e4c0:	0151      	lsls	r1, r2, #5
 800e4c2:	697a      	ldr	r2, [r7, #20]
 800e4c4:	440a      	add	r2, r1
 800e4c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e4ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	015a      	lsls	r2, r3, #5
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4dc:	691a      	ldr	r2, [r3, #16]
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	695b      	ldr	r3, [r3, #20]
 800e4e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4e6:	6939      	ldr	r1, [r7, #16]
 800e4e8:	0148      	lsls	r0, r1, #5
 800e4ea:	6979      	ldr	r1, [r7, #20]
 800e4ec:	4401      	add	r1, r0
 800e4ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e4f6:	79fb      	ldrb	r3, [r7, #7]
 800e4f8:	2b01      	cmp	r3, #1
 800e4fa:	d11e      	bne.n	800e53a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	691b      	ldr	r3, [r3, #16]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d009      	beq.n	800e518 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	015a      	lsls	r2, r3, #5
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	4413      	add	r3, r2
 800e50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e510:	461a      	mov	r2, r3
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	691b      	ldr	r3, [r3, #16]
 800e516:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	015a      	lsls	r2, r3, #5
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	4413      	add	r3, r2
 800e520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	693a      	ldr	r2, [r7, #16]
 800e528:	0151      	lsls	r1, r2, #5
 800e52a:	697a      	ldr	r2, [r7, #20]
 800e52c:	440a      	add	r2, r1
 800e52e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e532:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e536:	6013      	str	r3, [r2, #0]
 800e538:	e092      	b.n	800e660 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	015a      	lsls	r2, r3, #5
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	4413      	add	r3, r2
 800e542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	693a      	ldr	r2, [r7, #16]
 800e54a:	0151      	lsls	r1, r2, #5
 800e54c:	697a      	ldr	r2, [r7, #20]
 800e54e:	440a      	add	r2, r1
 800e550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e554:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e558:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	695b      	ldr	r3, [r3, #20]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d07e      	beq.n	800e660 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	f003 030f 	and.w	r3, r3, #15
 800e572:	2101      	movs	r1, #1
 800e574:	fa01 f303 	lsl.w	r3, r1, r3
 800e578:	6979      	ldr	r1, [r7, #20]
 800e57a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e57e:	4313      	orrs	r3, r2
 800e580:	634b      	str	r3, [r1, #52]	; 0x34
 800e582:	e06d      	b.n	800e660 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	015a      	lsls	r2, r3, #5
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	4413      	add	r3, r2
 800e58c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e590:	691b      	ldr	r3, [r3, #16]
 800e592:	693a      	ldr	r2, [r7, #16]
 800e594:	0151      	lsls	r1, r2, #5
 800e596:	697a      	ldr	r2, [r7, #20]
 800e598:	440a      	add	r2, r1
 800e59a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e59e:	0cdb      	lsrs	r3, r3, #19
 800e5a0:	04db      	lsls	r3, r3, #19
 800e5a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	015a      	lsls	r2, r3, #5
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	4413      	add	r3, r2
 800e5ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5b0:	691b      	ldr	r3, [r3, #16]
 800e5b2:	693a      	ldr	r2, [r7, #16]
 800e5b4:	0151      	lsls	r1, r2, #5
 800e5b6:	697a      	ldr	r2, [r7, #20]
 800e5b8:	440a      	add	r2, r1
 800e5ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e5c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e5c6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	695b      	ldr	r3, [r3, #20]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d003      	beq.n	800e5d8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	689a      	ldr	r2, [r3, #8]
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	015a      	lsls	r2, r3, #5
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	4413      	add	r3, r2
 800e5e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5e4:	691b      	ldr	r3, [r3, #16]
 800e5e6:	693a      	ldr	r2, [r7, #16]
 800e5e8:	0151      	lsls	r1, r2, #5
 800e5ea:	697a      	ldr	r2, [r7, #20]
 800e5ec:	440a      	add	r2, r1
 800e5ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e5f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	015a      	lsls	r2, r3, #5
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	4413      	add	r3, r2
 800e600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e604:	691a      	ldr	r2, [r3, #16]
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e60e:	6939      	ldr	r1, [r7, #16]
 800e610:	0148      	lsls	r0, r1, #5
 800e612:	6979      	ldr	r1, [r7, #20]
 800e614:	4401      	add	r1, r0
 800e616:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e61a:	4313      	orrs	r3, r2
 800e61c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e61e:	79fb      	ldrb	r3, [r7, #7]
 800e620:	2b01      	cmp	r3, #1
 800e622:	d10d      	bne.n	800e640 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	68db      	ldr	r3, [r3, #12]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d009      	beq.n	800e640 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	68d9      	ldr	r1, [r3, #12]
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	015a      	lsls	r2, r3, #5
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	4413      	add	r3, r2
 800e638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e63c:	460a      	mov	r2, r1
 800e63e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	015a      	lsls	r2, r3, #5
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	4413      	add	r3, r2
 800e648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	693a      	ldr	r2, [r7, #16]
 800e650:	0151      	lsls	r1, r2, #5
 800e652:	697a      	ldr	r2, [r7, #20]
 800e654:	440a      	add	r2, r1
 800e656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e65a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e65e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e660:	2300      	movs	r3, #0
}
 800e662:	4618      	mov	r0, r3
 800e664:	371c      	adds	r7, #28
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr

0800e66e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e66e:	b480      	push	{r7}
 800e670:	b089      	sub	sp, #36	; 0x24
 800e672:	af00      	add	r7, sp, #0
 800e674:	60f8      	str	r0, [r7, #12]
 800e676:	60b9      	str	r1, [r7, #8]
 800e678:	4611      	mov	r1, r2
 800e67a:	461a      	mov	r2, r3
 800e67c:	460b      	mov	r3, r1
 800e67e:	71fb      	strb	r3, [r7, #7]
 800e680:	4613      	mov	r3, r2
 800e682:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e68c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e690:	2b00      	cmp	r3, #0
 800e692:	d123      	bne.n	800e6dc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e694:	88bb      	ldrh	r3, [r7, #4]
 800e696:	3303      	adds	r3, #3
 800e698:	089b      	lsrs	r3, r3, #2
 800e69a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e69c:	2300      	movs	r3, #0
 800e69e:	61bb      	str	r3, [r7, #24]
 800e6a0:	e018      	b.n	800e6d4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e6a2:	79fb      	ldrb	r3, [r7, #7]
 800e6a4:	031a      	lsls	r2, r3, #12
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	4413      	add	r3, r2
 800e6aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e6b6:	69fb      	ldr	r3, [r7, #28]
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e6bc:	69fb      	ldr	r3, [r7, #28]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e6c2:	69fb      	ldr	r3, [r7, #28]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	61bb      	str	r3, [r7, #24]
 800e6d4:	69ba      	ldr	r2, [r7, #24]
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d3e2      	bcc.n	800e6a2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e6dc:	2300      	movs	r3, #0
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3724      	adds	r7, #36	; 0x24
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr

0800e6ea <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e6ea:	b480      	push	{r7}
 800e6ec:	b08b      	sub	sp, #44	; 0x2c
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	60f8      	str	r0, [r7, #12]
 800e6f2:	60b9      	str	r1, [r7, #8]
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e700:	88fb      	ldrh	r3, [r7, #6]
 800e702:	089b      	lsrs	r3, r3, #2
 800e704:	b29b      	uxth	r3, r3
 800e706:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e708:	88fb      	ldrh	r3, [r7, #6]
 800e70a:	f003 0303 	and.w	r3, r3, #3
 800e70e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e710:	2300      	movs	r3, #0
 800e712:	623b      	str	r3, [r7, #32]
 800e714:	e014      	b.n	800e740 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e71c:	681a      	ldr	r2, [r3, #0]
 800e71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e720:	601a      	str	r2, [r3, #0]
    pDest++;
 800e722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e724:	3301      	adds	r3, #1
 800e726:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72a:	3301      	adds	r3, #1
 800e72c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e730:	3301      	adds	r3, #1
 800e732:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e736:	3301      	adds	r3, #1
 800e738:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e73a:	6a3b      	ldr	r3, [r7, #32]
 800e73c:	3301      	adds	r3, #1
 800e73e:	623b      	str	r3, [r7, #32]
 800e740:	6a3a      	ldr	r2, [r7, #32]
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	429a      	cmp	r2, r3
 800e746:	d3e6      	bcc.n	800e716 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e748:	8bfb      	ldrh	r3, [r7, #30]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d01e      	beq.n	800e78c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e74e:	2300      	movs	r3, #0
 800e750:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e758:	461a      	mov	r2, r3
 800e75a:	f107 0310 	add.w	r3, r7, #16
 800e75e:	6812      	ldr	r2, [r2, #0]
 800e760:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e762:	693a      	ldr	r2, [r7, #16]
 800e764:	6a3b      	ldr	r3, [r7, #32]
 800e766:	b2db      	uxtb	r3, r3
 800e768:	00db      	lsls	r3, r3, #3
 800e76a:	fa22 f303 	lsr.w	r3, r2, r3
 800e76e:	b2da      	uxtb	r2, r3
 800e770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e772:	701a      	strb	r2, [r3, #0]
      i++;
 800e774:	6a3b      	ldr	r3, [r7, #32]
 800e776:	3301      	adds	r3, #1
 800e778:	623b      	str	r3, [r7, #32]
      pDest++;
 800e77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77c:	3301      	adds	r3, #1
 800e77e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e780:	8bfb      	ldrh	r3, [r7, #30]
 800e782:	3b01      	subs	r3, #1
 800e784:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e786:	8bfb      	ldrh	r3, [r7, #30]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d1ea      	bne.n	800e762 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e78e:	4618      	mov	r0, r3
 800e790:	372c      	adds	r7, #44	; 0x2c
 800e792:	46bd      	mov	sp, r7
 800e794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e798:	4770      	bx	lr

0800e79a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e79a:	b480      	push	{r7}
 800e79c:	b085      	sub	sp, #20
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	6078      	str	r0, [r7, #4]
 800e7a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	785b      	ldrb	r3, [r3, #1]
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d12c      	bne.n	800e810 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	015a      	lsls	r2, r3, #5
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	4413      	add	r3, r2
 800e7be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	db12      	blt.n	800e7ee <USB_EPSetStall+0x54>
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d00f      	beq.n	800e7ee <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	015a      	lsls	r2, r3, #5
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	4413      	add	r3, r2
 800e7d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	68ba      	ldr	r2, [r7, #8]
 800e7de:	0151      	lsls	r1, r2, #5
 800e7e0:	68fa      	ldr	r2, [r7, #12]
 800e7e2:	440a      	add	r2, r1
 800e7e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e7ec:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	015a      	lsls	r2, r3, #5
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	68ba      	ldr	r2, [r7, #8]
 800e7fe:	0151      	lsls	r1, r2, #5
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	440a      	add	r2, r1
 800e804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e808:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e80c:	6013      	str	r3, [r2, #0]
 800e80e:	e02b      	b.n	800e868 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	015a      	lsls	r2, r3, #5
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	4413      	add	r3, r2
 800e818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	db12      	blt.n	800e848 <USB_EPSetStall+0xae>
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d00f      	beq.n	800e848 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	015a      	lsls	r2, r3, #5
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	4413      	add	r3, r2
 800e830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	68ba      	ldr	r2, [r7, #8]
 800e838:	0151      	lsls	r1, r2, #5
 800e83a:	68fa      	ldr	r2, [r7, #12]
 800e83c:	440a      	add	r2, r1
 800e83e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e842:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e846:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	015a      	lsls	r2, r3, #5
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	4413      	add	r3, r2
 800e850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	68ba      	ldr	r2, [r7, #8]
 800e858:	0151      	lsls	r1, r2, #5
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	440a      	add	r2, r1
 800e85e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e862:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e866:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3714      	adds	r7, #20
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr

0800e876 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e876:	b480      	push	{r7}
 800e878:	b085      	sub	sp, #20
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
 800e87e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	785b      	ldrb	r3, [r3, #1]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d128      	bne.n	800e8e4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	015a      	lsls	r2, r3, #5
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	4413      	add	r3, r2
 800e89a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	68ba      	ldr	r2, [r7, #8]
 800e8a2:	0151      	lsls	r1, r2, #5
 800e8a4:	68fa      	ldr	r2, [r7, #12]
 800e8a6:	440a      	add	r2, r1
 800e8a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e8b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	78db      	ldrb	r3, [r3, #3]
 800e8b6:	2b03      	cmp	r3, #3
 800e8b8:	d003      	beq.n	800e8c2 <USB_EPClearStall+0x4c>
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	78db      	ldrb	r3, [r3, #3]
 800e8be:	2b02      	cmp	r3, #2
 800e8c0:	d138      	bne.n	800e934 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	015a      	lsls	r2, r3, #5
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	4413      	add	r3, r2
 800e8ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68ba      	ldr	r2, [r7, #8]
 800e8d2:	0151      	lsls	r1, r2, #5
 800e8d4:	68fa      	ldr	r2, [r7, #12]
 800e8d6:	440a      	add	r2, r1
 800e8d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8e0:	6013      	str	r3, [r2, #0]
 800e8e2:	e027      	b.n	800e934 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	015a      	lsls	r2, r3, #5
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	4413      	add	r3, r2
 800e8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	68ba      	ldr	r2, [r7, #8]
 800e8f4:	0151      	lsls	r1, r2, #5
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	440a      	add	r2, r1
 800e8fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e902:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	78db      	ldrb	r3, [r3, #3]
 800e908:	2b03      	cmp	r3, #3
 800e90a:	d003      	beq.n	800e914 <USB_EPClearStall+0x9e>
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	78db      	ldrb	r3, [r3, #3]
 800e910:	2b02      	cmp	r3, #2
 800e912:	d10f      	bne.n	800e934 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	015a      	lsls	r2, r3, #5
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	4413      	add	r3, r2
 800e91c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	68ba      	ldr	r2, [r7, #8]
 800e924:	0151      	lsls	r1, r2, #5
 800e926:	68fa      	ldr	r2, [r7, #12]
 800e928:	440a      	add	r2, r1
 800e92a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e92e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e932:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e934:	2300      	movs	r3, #0
}
 800e936:	4618      	mov	r0, r3
 800e938:	3714      	adds	r7, #20
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr

0800e942 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e942:	b480      	push	{r7}
 800e944:	b085      	sub	sp, #20
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]
 800e94a:	460b      	mov	r3, r1
 800e94c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e960:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e964:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	78fb      	ldrb	r3, [r7, #3]
 800e970:	011b      	lsls	r3, r3, #4
 800e972:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e976:	68f9      	ldr	r1, [r7, #12]
 800e978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e97c:	4313      	orrs	r3, r2
 800e97e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	3714      	adds	r7, #20
 800e986:	46bd      	mov	sp, r7
 800e988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98c:	4770      	bx	lr

0800e98e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e98e:	b480      	push	{r7}
 800e990:	b085      	sub	sp, #20
 800e992:	af00      	add	r7, sp, #0
 800e994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	68fa      	ldr	r2, [r7, #12]
 800e9a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9a8:	f023 0303 	bic.w	r3, r3, #3
 800e9ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	68fa      	ldr	r2, [r7, #12]
 800e9b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9bc:	f023 0302 	bic.w	r3, r3, #2
 800e9c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e9c2:	2300      	movs	r3, #0
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3714      	adds	r7, #20
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr

0800e9d0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b085      	sub	sp, #20
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	68fa      	ldr	r2, [r7, #12]
 800e9e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9ea:	f023 0303 	bic.w	r3, r3, #3
 800e9ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	68fa      	ldr	r2, [r7, #12]
 800e9fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9fe:	f043 0302 	orr.w	r3, r3, #2
 800ea02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ea04:	2300      	movs	r3, #0
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3714      	adds	r7, #20
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr

0800ea12 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ea12:	b480      	push	{r7}
 800ea14:	b085      	sub	sp, #20
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	695b      	ldr	r3, [r3, #20]
 800ea1e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	699b      	ldr	r3, [r3, #24]
 800ea24:	68fa      	ldr	r2, [r7, #12]
 800ea26:	4013      	ands	r3, r2
 800ea28:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3714      	adds	r7, #20
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr

0800ea38 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea4a:	699b      	ldr	r3, [r3, #24]
 800ea4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea54:	69db      	ldr	r3, [r3, #28]
 800ea56:	68ba      	ldr	r2, [r7, #8]
 800ea58:	4013      	ands	r3, r2
 800ea5a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	0c1b      	lsrs	r3, r3, #16
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3714      	adds	r7, #20
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea7e:	699b      	ldr	r3, [r3, #24]
 800ea80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea88:	69db      	ldr	r3, [r3, #28]
 800ea8a:	68ba      	ldr	r2, [r7, #8]
 800ea8c:	4013      	ands	r3, r2
 800ea8e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	b29b      	uxth	r3, r3
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3714      	adds	r7, #20
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b085      	sub	sp, #20
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800eab0:	78fb      	ldrb	r3, [r7, #3]
 800eab2:	015a      	lsls	r2, r3, #5
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	4413      	add	r3, r2
 800eab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eac6:	695b      	ldr	r3, [r3, #20]
 800eac8:	68ba      	ldr	r2, [r7, #8]
 800eaca:	4013      	ands	r3, r2
 800eacc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eace:	68bb      	ldr	r3, [r7, #8]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3714      	adds	r7, #20
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eadc:	b480      	push	{r7}
 800eade:	b087      	sub	sp, #28
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	460b      	mov	r3, r1
 800eae6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaf2:	691b      	ldr	r3, [r3, #16]
 800eaf4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eafe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800eb00:	78fb      	ldrb	r3, [r7, #3]
 800eb02:	f003 030f 	and.w	r3, r3, #15
 800eb06:	68fa      	ldr	r2, [r7, #12]
 800eb08:	fa22 f303 	lsr.w	r3, r2, r3
 800eb0c:	01db      	lsls	r3, r3, #7
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	693a      	ldr	r2, [r7, #16]
 800eb12:	4313      	orrs	r3, r2
 800eb14:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800eb16:	78fb      	ldrb	r3, [r7, #3]
 800eb18:	015a      	lsls	r2, r3, #5
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	693a      	ldr	r2, [r7, #16]
 800eb26:	4013      	ands	r3, r2
 800eb28:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eb2a:	68bb      	ldr	r3, [r7, #8]
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	371c      	adds	r7, #28
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr

0800eb38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b083      	sub	sp, #12
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	695b      	ldr	r3, [r3, #20]
 800eb44:	f003 0301 	and.w	r3, r3, #1
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	370c      	adds	r7, #12
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr

0800eb54 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b085      	sub	sp, #20
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	68fa      	ldr	r2, [r7, #12]
 800eb6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800eb72:	f023 0307 	bic.w	r3, r3, #7
 800eb76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	68fa      	ldr	r2, [r7, #12]
 800eb82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb8c:	2300      	movs	r3, #0
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3714      	adds	r7, #20
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr
	...

0800eb9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b087      	sub	sp, #28
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	460b      	mov	r3, r1
 800eba6:	607a      	str	r2, [r7, #4]
 800eba8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	333c      	adds	r3, #60	; 0x3c
 800ebb2:	3304      	adds	r3, #4
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	4a26      	ldr	r2, [pc, #152]	; (800ec54 <USB_EP0_OutStart+0xb8>)
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d90a      	bls.n	800ebd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ebcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ebd0:	d101      	bne.n	800ebd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	e037      	b.n	800ec46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebdc:	461a      	mov	r2, r3
 800ebde:	2300      	movs	r3, #0
 800ebe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebe8:	691b      	ldr	r3, [r3, #16]
 800ebea:	697a      	ldr	r2, [r7, #20]
 800ebec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ebf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebfc:	691b      	ldr	r3, [r3, #16]
 800ebfe:	697a      	ldr	r2, [r7, #20]
 800ec00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec04:	f043 0318 	orr.w	r3, r3, #24
 800ec08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec10:	691b      	ldr	r3, [r3, #16]
 800ec12:	697a      	ldr	r2, [r7, #20]
 800ec14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec18:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ec1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ec1e:	7afb      	ldrb	r3, [r7, #11]
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d10f      	bne.n	800ec44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	697a      	ldr	r2, [r7, #20]
 800ec3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec3e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ec42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec44:	2300      	movs	r3, #0
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	371c      	adds	r7, #28
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr
 800ec52:	bf00      	nop
 800ec54:	4f54300a 	.word	0x4f54300a

0800ec58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b085      	sub	sp, #20
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ec60:	2300      	movs	r3, #0
 800ec62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	3301      	adds	r3, #1
 800ec68:	60fb      	str	r3, [r7, #12]
 800ec6a:	4a13      	ldr	r2, [pc, #76]	; (800ecb8 <USB_CoreReset+0x60>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d901      	bls.n	800ec74 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800ec70:	2303      	movs	r3, #3
 800ec72:	e01a      	b.n	800ecaa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	691b      	ldr	r3, [r3, #16]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	daf3      	bge.n	800ec64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	691b      	ldr	r3, [r3, #16]
 800ec84:	f043 0201 	orr.w	r2, r3, #1
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	3301      	adds	r3, #1
 800ec90:	60fb      	str	r3, [r7, #12]
 800ec92:	4a09      	ldr	r2, [pc, #36]	; (800ecb8 <USB_CoreReset+0x60>)
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d901      	bls.n	800ec9c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800ec98:	2303      	movs	r3, #3
 800ec9a:	e006      	b.n	800ecaa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	691b      	ldr	r3, [r3, #16]
 800eca0:	f003 0301 	and.w	r3, r3, #1
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d0f1      	beq.n	800ec8c <USB_CoreReset+0x34>

  return HAL_OK;
 800eca8:	2300      	movs	r3, #0
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3714      	adds	r7, #20
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	00030d40 	.word	0x00030d40

0800ecbc <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b086      	sub	sp, #24
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	603b      	str	r3, [r7, #0]
 800ecc8:	4613      	mov	r3, r2
 800ecca:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 800eccc:	bf00      	nop
 800ecce:	4b18      	ldr	r3, [pc, #96]	; (800ed30 <sx126x_hal_write+0x74>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4a18      	ldr	r2, [pc, #96]	; (800ed34 <sx126x_hal_write+0x78>)
 800ecd4:	8812      	ldrh	r2, [r2, #0]
 800ecd6:	4611      	mov	r1, r2
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7f8 fe79 	bl	80079d0 <HAL_GPIO_ReadPin>
 800ecde:	4603      	mov	r3, r0
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d0f4      	beq.n	800ecce <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800ece4:	4b14      	ldr	r3, [pc, #80]	; (800ed38 <sx126x_hal_write+0x7c>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	4a14      	ldr	r2, [pc, #80]	; (800ed3c <sx126x_hal_write+0x80>)
 800ecea:	8811      	ldrh	r1, [r2, #0]
 800ecec:	2200      	movs	r2, #0
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7f8 fe86 	bl	8007a00 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 800ecf4:	88fa      	ldrh	r2, [r7, #6]
 800ecf6:	2364      	movs	r3, #100	; 0x64
 800ecf8:	68b9      	ldr	r1, [r7, #8]
 800ecfa:	68f8      	ldr	r0, [r7, #12]
 800ecfc:	f7fc fda1 	bl	800b842 <HAL_SPI_Transmit>
 800ed00:	4603      	mov	r3, r0
 800ed02:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 800ed04:	8c3a      	ldrh	r2, [r7, #32]
 800ed06:	2364      	movs	r3, #100	; 0x64
 800ed08:	6839      	ldr	r1, [r7, #0]
 800ed0a:	68f8      	ldr	r0, [r7, #12]
 800ed0c:	f7fc fd99 	bl	800b842 <HAL_SPI_Transmit>
 800ed10:	4603      	mov	r3, r0
 800ed12:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800ed14:	4b08      	ldr	r3, [pc, #32]	; (800ed38 <sx126x_hal_write+0x7c>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4a08      	ldr	r2, [pc, #32]	; (800ed3c <sx126x_hal_write+0x80>)
 800ed1a:	8811      	ldrh	r1, [r2, #0]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7f8 fe6e 	bl	8007a00 <HAL_GPIO_WritePin>
    return status;
 800ed24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3718      	adds	r7, #24
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	200007c0 	.word	0x200007c0
 800ed34:	200007bc 	.word	0x200007bc
 800ed38:	200007b0 	.word	0x200007b0
 800ed3c:	200007ac 	.word	0x200007ac

0800ed40 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b088      	sub	sp, #32
 800ed44:	af02      	add	r7, sp, #8
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	603b      	str	r3, [r7, #0]
 800ed4c:	4613      	mov	r3, r2
 800ed4e:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 800ed50:	bf00      	nop
 800ed52:	4b1e      	ldr	r3, [pc, #120]	; (800edcc <sx126x_hal_read+0x8c>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	4a1e      	ldr	r2, [pc, #120]	; (800edd0 <sx126x_hal_read+0x90>)
 800ed58:	8812      	ldrh	r2, [r2, #0]
 800ed5a:	4611      	mov	r1, r2
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7f8 fe37 	bl	80079d0 <HAL_GPIO_ReadPin>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d0f4      	beq.n	800ed52 <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800ed68:	4b1a      	ldr	r3, [pc, #104]	; (800edd4 <sx126x_hal_read+0x94>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a1a      	ldr	r2, [pc, #104]	; (800edd8 <sx126x_hal_read+0x98>)
 800ed6e:	8811      	ldrh	r1, [r2, #0]
 800ed70:	2200      	movs	r2, #0
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7f8 fe44 	bl	8007a00 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 800ed78:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed7c:	b29a      	uxth	r2, r3
 800ed7e:	2364      	movs	r3, #100	; 0x64
 800ed80:	68b9      	ldr	r1, [r7, #8]
 800ed82:	68f8      	ldr	r0, [r7, #12]
 800ed84:	f7fc fd5d 	bl	800b842 <HAL_SPI_Transmit>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 800ed8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed90:	68ba      	ldr	r2, [r7, #8]
 800ed92:	18d1      	adds	r1, r2, r3
 800ed94:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed98:	b29b      	uxth	r3, r3
 800ed9a:	88fa      	ldrh	r2, [r7, #6]
 800ed9c:	1ad3      	subs	r3, r2, r3
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	2264      	movs	r2, #100	; 0x64
 800eda2:	9200      	str	r2, [sp, #0]
 800eda4:	683a      	ldr	r2, [r7, #0]
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f7fc ff98 	bl	800bcdc <HAL_SPI_TransmitReceive>
 800edac:	4603      	mov	r3, r0
 800edae:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800edb0:	4b08      	ldr	r3, [pc, #32]	; (800edd4 <sx126x_hal_read+0x94>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a08      	ldr	r2, [pc, #32]	; (800edd8 <sx126x_hal_read+0x98>)
 800edb6:	8811      	ldrh	r1, [r2, #0]
 800edb8:	2201      	movs	r2, #1
 800edba:	4618      	mov	r0, r3
 800edbc:	f7f8 fe20 	bl	8007a00 <HAL_GPIO_WritePin>
    return status;
 800edc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3718      	adds	r7, #24
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
 800edca:	bf00      	nop
 800edcc:	200007c0 	.word	0x200007c0
 800edd0:	200007bc 	.word	0x200007bc
 800edd4:	200007b0 	.word	0x200007b0
 800edd8:	200007ac 	.word	0x200007ac

0800eddc <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	460b      	mov	r3, r1
 800ede6:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 800ede8:	4a05      	ldr	r2, [pc, #20]	; (800ee00 <set_NSS_pin+0x24>)
 800edea:	887b      	ldrh	r3, [r7, #2]
 800edec:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 800edee:	4a05      	ldr	r2, [pc, #20]	; (800ee04 <set_NSS_pin+0x28>)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6013      	str	r3, [r2, #0]
}
 800edf4:	bf00      	nop
 800edf6:	370c      	adds	r7, #12
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr
 800ee00:	200007ac 	.word	0x200007ac
 800ee04:	200007b0 	.word	0x200007b0

0800ee08 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	460b      	mov	r3, r1
 800ee12:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 800ee14:	4a05      	ldr	r2, [pc, #20]	; (800ee2c <set_BUSY_pin+0x24>)
 800ee16:	887b      	ldrh	r3, [r7, #2]
 800ee18:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 800ee1a:	4a05      	ldr	r2, [pc, #20]	; (800ee30 <set_BUSY_pin+0x28>)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6013      	str	r3, [r2, #0]
}
 800ee20:	bf00      	nop
 800ee22:	370c      	adds	r7, #12
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr
 800ee2c:	200007bc 	.word	0x200007bc
 800ee30:	200007c0 	.word	0x200007c0

0800ee34 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 800ee34:	b480      	push	{r7}
 800ee36:	b083      	sub	sp, #12
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	460b      	mov	r3, r1
 800ee3e:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 800ee40:	4a05      	ldr	r2, [pc, #20]	; (800ee58 <set_NRESET_pin+0x24>)
 800ee42:	887b      	ldrh	r3, [r7, #2]
 800ee44:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 800ee46:	4a05      	ldr	r2, [pc, #20]	; (800ee5c <set_NRESET_pin+0x28>)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6013      	str	r3, [r2, #0]
}
 800ee4c:	bf00      	nop
 800ee4e:	370c      	adds	r7, #12
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr
 800ee58:	200007b4 	.word	0x200007b4
 800ee5c:	200007b8 	.word	0x200007b8

0800ee60 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	460b      	mov	r3, r1
 800ee6a:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 800ee6c:	4a05      	ldr	r2, [pc, #20]	; (800ee84 <set_DIO1_pin+0x24>)
 800ee6e:	887b      	ldrh	r3, [r7, #2]
 800ee70:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 800ee72:	4a05      	ldr	r2, [pc, #20]	; (800ee88 <set_DIO1_pin+0x28>)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6013      	str	r3, [r2, #0]
}
 800ee78:	bf00      	nop
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr
 800ee84:	200007c4 	.word	0x200007c4
 800ee88:	200007c8 	.word	0x200007c8

0800ee8c <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 800ee8c:	b084      	sub	sp, #16
 800ee8e:	b580      	push	{r7, lr}
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	f107 0c08 	add.w	ip, r7, #8
 800ee96:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 800ee9a:	4b07      	ldr	r3, [pc, #28]	; (800eeb8 <set_hspi+0x2c>)
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f107 0308 	add.w	r3, r7, #8
 800eea2:	2258      	movs	r2, #88	; 0x58
 800eea4:	4619      	mov	r1, r3
 800eea6:	f00a ff49 	bl	8019d3c <memcpy>
}
 800eeaa:	bf00      	nop
 800eeac:	46bd      	mov	sp, r7
 800eeae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eeb2:	b004      	add	sp, #16
 800eeb4:	4770      	bx	lr
 800eeb6:	bf00      	nop
 800eeb8:	200007cc 	.word	0x200007cc

0800eebc <Tx_setup>:

void Tx_setup(){
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b086      	sub	sp, #24
 800eec0:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 800eec2:	4b66      	ldr	r3, [pc, #408]	; (800f05c <Tx_setup+0x1a0>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a66      	ldr	r2, [pc, #408]	; (800f060 <Tx_setup+0x1a4>)
 800eec8:	8811      	ldrh	r1, [r2, #0]
 800eeca:	2201      	movs	r2, #1
 800eecc:	4618      	mov	r0, r3
 800eece:	f7f8 fd97 	bl	8007a00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800eed2:	4b64      	ldr	r3, [pc, #400]	; (800f064 <Tx_setup+0x1a8>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4a64      	ldr	r2, [pc, #400]	; (800f068 <Tx_setup+0x1ac>)
 800eed8:	8811      	ldrh	r1, [r2, #0]
 800eeda:	2200      	movs	r2, #0
 800eedc:	4618      	mov	r0, r3
 800eede:	f7f8 fd8f 	bl	8007a00 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800eee2:	2032      	movs	r0, #50	; 0x32
 800eee4:	f7f8 f81e 	bl	8006f24 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 800eee8:	4b5e      	ldr	r3, [pc, #376]	; (800f064 <Tx_setup+0x1a8>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a5e      	ldr	r2, [pc, #376]	; (800f068 <Tx_setup+0x1ac>)
 800eeee:	8811      	ldrh	r1, [r2, #0]
 800eef0:	2201      	movs	r2, #1
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7f8 fd84 	bl	8007a00 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 800eef8:	2100      	movs	r1, #0
 800eefa:	485c      	ldr	r0, [pc, #368]	; (800f06c <Tx_setup+0x1b0>)
 800eefc:	f000 f92e 	bl	800f15c <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 800ef00:	4b5b      	ldr	r3, [pc, #364]	; (800f070 <Tx_setup+0x1b4>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4619      	mov	r1, r3
 800ef06:	4859      	ldr	r0, [pc, #356]	; (800f06c <Tx_setup+0x1b0>)
 800ef08:	f000 fb96 	bl	800f638 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 800ef0c:	4b59      	ldr	r3, [pc, #356]	; (800f074 <Tx_setup+0x1b8>)
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	4619      	mov	r1, r3
 800ef12:	4856      	ldr	r0, [pc, #344]	; (800f06c <Tx_setup+0x1b0>)
 800ef14:	f000 fbca 	bl	800f6ac <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 800ef18:	4b57      	ldr	r3, [pc, #348]	; (800f078 <Tx_setup+0x1bc>)
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	4853      	ldr	r0, [pc, #332]	; (800f06c <Tx_setup+0x1b0>)
 800ef20:	f000 fa1f 	bl	800f362 <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 800ef24:	2101      	movs	r1, #1
 800ef26:	4851      	ldr	r0, [pc, #324]	; (800f06c <Tx_setup+0x1b0>)
 800ef28:	f000 fb44 	bl	800f5b4 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 800ef2c:	4b53      	ldr	r3, [pc, #332]	; (800f07c <Tx_setup+0x1c0>)
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	2264      	movs	r2, #100	; 0x64
 800ef32:	4619      	mov	r1, r3
 800ef34:	484d      	ldr	r0, [pc, #308]	; (800f06c <Tx_setup+0x1b0>)
 800ef36:	f000 fb57 	bl	800f5e8 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 800ef3a:	4b51      	ldr	r3, [pc, #324]	; (800f080 <Tx_setup+0x1c4>)
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	4619      	mov	r1, r3
 800ef40:	484a      	ldr	r0, [pc, #296]	; (800f06c <Tx_setup+0x1b0>)
 800ef42:	f000 f9ab 	bl	800f29c <sx126x_cal>
    HAL_Delay(50);
 800ef46:	2032      	movs	r0, #50	; 0x32
 800ef48:	f7f7 ffec 	bl	8006f24 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 800ef4c:	4b4d      	ldr	r3, [pc, #308]	; (800f084 <Tx_setup+0x1c8>)
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	4619      	mov	r1, r3
 800ef52:	4846      	ldr	r0, [pc, #280]	; (800f06c <Tx_setup+0x1b0>)
 800ef54:	f000 f988 	bl	800f268 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 800ef58:	4b4b      	ldr	r3, [pc, #300]	; (800f088 <Tx_setup+0x1cc>)
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	4a4b      	ldr	r2, [pc, #300]	; (800f08c <Tx_setup+0x1d0>)
 800ef5e:	7812      	ldrb	r2, [r2, #0]
 800ef60:	4619      	mov	r1, r3
 800ef62:	4842      	ldr	r0, [pc, #264]	; (800f06c <Tx_setup+0x1b0>)
 800ef64:	f000 f9b4 	bl	800f2d0 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 800ef68:	2004      	movs	r0, #4
 800ef6a:	f00a fed7 	bl	8019d1c <malloc>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 800ef72:	4b47      	ldr	r3, [pc, #284]	; (800f090 <Tx_setup+0x1d4>)
 800ef74:	781a      	ldrb	r2, [r3, #0]
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 800ef7a:	4b46      	ldr	r3, [pc, #280]	; (800f094 <Tx_setup+0x1d8>)
 800ef7c:	781a      	ldrb	r2, [r3, #0]
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 800ef82:	4b45      	ldr	r3, [pc, #276]	; (800f098 <Tx_setup+0x1dc>)
 800ef84:	781a      	ldrb	r2, [r3, #0]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 800ef8a:	4b44      	ldr	r3, [pc, #272]	; (800f09c <Tx_setup+0x1e0>)
 800ef8c:	781a      	ldrb	r2, [r3, #0]
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 800ef92:	68f9      	ldr	r1, [r7, #12]
 800ef94:	4835      	ldr	r0, [pc, #212]	; (800f06c <Tx_setup+0x1b0>)
 800ef96:	f000 f9bf 	bl	800f318 <sx126x_set_pa_cfg>
    free(params);
 800ef9a:	68f8      	ldr	r0, [r7, #12]
 800ef9c:	f00a fec6 	bl	8019d2c <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 800efa0:	4b3f      	ldr	r3, [pc, #252]	; (800f0a0 <Tx_setup+0x1e4>)
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	b25b      	sxtb	r3, r3
 800efa6:	4a3f      	ldr	r2, [pc, #252]	; (800f0a4 <Tx_setup+0x1e8>)
 800efa8:	7812      	ldrb	r2, [r2, #0]
 800efaa:	4619      	mov	r1, r3
 800efac:	482f      	ldr	r0, [pc, #188]	; (800f06c <Tx_setup+0x1b0>)
 800efae:	f000 fb97 	bl	800f6e0 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 800efb2:	4b3d      	ldr	r3, [pc, #244]	; (800f0a8 <Tx_setup+0x1ec>)
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	4a3d      	ldr	r2, [pc, #244]	; (800f0ac <Tx_setup+0x1f0>)
 800efb8:	7812      	ldrb	r2, [r2, #0]
 800efba:	4619      	mov	r1, r3
 800efbc:	482b      	ldr	r0, [pc, #172]	; (800f06c <Tx_setup+0x1b0>)
 800efbe:	f000 fc4d 	bl	800f85c <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 800efc2:	2004      	movs	r0, #4
 800efc4:	f00a feaa 	bl	8019d1c <malloc>
 800efc8:	4603      	mov	r3, r0
 800efca:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 800efcc:	4b38      	ldr	r3, [pc, #224]	; (800f0b0 <Tx_setup+0x1f4>)
 800efce:	781a      	ldrb	r2, [r3, #0]
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 800efd4:	4b37      	ldr	r3, [pc, #220]	; (800f0b4 <Tx_setup+0x1f8>)
 800efd6:	781a      	ldrb	r2, [r3, #0]
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 800efdc:	4b36      	ldr	r3, [pc, #216]	; (800f0b8 <Tx_setup+0x1fc>)
 800efde:	781a      	ldrb	r2, [r3, #0]
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 800efe4:	4b35      	ldr	r3, [pc, #212]	; (800f0bc <Tx_setup+0x200>)
 800efe6:	781a      	ldrb	r2, [r3, #0]
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 800efec:	68b9      	ldr	r1, [r7, #8]
 800efee:	481f      	ldr	r0, [pc, #124]	; (800f06c <Tx_setup+0x1b0>)
 800eff0:	f000 fb9a 	bl	800f728 <sx126x_set_lora_mod_params>
    free(mod_params);
 800eff4:	68b8      	ldr	r0, [r7, #8]
 800eff6:	f00a fe99 	bl	8019d2c <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 800effa:	2006      	movs	r0, #6
 800effc:	f00a fe8e 	bl	8019d1c <malloc>
 800f000:	4603      	mov	r3, r0
 800f002:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 800f004:	4b2e      	ldr	r3, [pc, #184]	; (800f0c0 <Tx_setup+0x204>)
 800f006:	881a      	ldrh	r2, [r3, #0]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 800f00c:	4b2d      	ldr	r3, [pc, #180]	; (800f0c4 <Tx_setup+0x208>)
 800f00e:	781a      	ldrb	r2, [r3, #0]
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 800f014:	4b2c      	ldr	r3, [pc, #176]	; (800f0c8 <Tx_setup+0x20c>)
 800f016:	781a      	ldrb	r2, [r3, #0]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 800f01c:	4b2b      	ldr	r3, [pc, #172]	; (800f0cc <Tx_setup+0x210>)
 800f01e:	781a      	ldrb	r2, [r3, #0]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 800f024:	4b2a      	ldr	r3, [pc, #168]	; (800f0d0 <Tx_setup+0x214>)
 800f026:	781a      	ldrb	r2, [r3, #0]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 800f02c:	6879      	ldr	r1, [r7, #4]
 800f02e:	480f      	ldr	r0, [pc, #60]	; (800f06c <Tx_setup+0x1b0>)
 800f030:	f000 fba6 	bl	800f780 <sx126x_set_lora_pkt_params>
    free(lora_params);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f00a fe79 	bl	8019d2c <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 800f03a:	4b26      	ldr	r3, [pc, #152]	; (800f0d4 <Tx_setup+0x218>)
 800f03c:	8819      	ldrh	r1, [r3, #0]
 800f03e:	4b26      	ldr	r3, [pc, #152]	; (800f0d8 <Tx_setup+0x21c>)
 800f040:	881a      	ldrh	r2, [r3, #0]
 800f042:	4b26      	ldr	r3, [pc, #152]	; (800f0dc <Tx_setup+0x220>)
 800f044:	8818      	ldrh	r0, [r3, #0]
 800f046:	4b26      	ldr	r3, [pc, #152]	; (800f0e0 <Tx_setup+0x224>)
 800f048:	881b      	ldrh	r3, [r3, #0]
 800f04a:	9300      	str	r3, [sp, #0]
 800f04c:	4603      	mov	r3, r0
 800f04e:	4807      	ldr	r0, [pc, #28]	; (800f06c <Tx_setup+0x1b0>)
 800f050:	f000 fa13 	bl	800f47a <sx126x_set_dio_irq_params>

}
 800f054:	bf00      	nop
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	200007b8 	.word	0x200007b8
 800f060:	200007b4 	.word	0x200007b4
 800f064:	200007b0 	.word	0x200007b0
 800f068:	200007ac 	.word	0x200007ac
 800f06c:	200007cc 	.word	0x200007cc
 800f070:	20000024 	.word	0x20000024
 800f074:	20000028 	.word	0x20000028
 800f078:	20000029 	.word	0x20000029
 800f07c:	2000002a 	.word	0x2000002a
 800f080:	2000002c 	.word	0x2000002c
 800f084:	2000002b 	.word	0x2000002b
 800f088:	2000002d 	.word	0x2000002d
 800f08c:	2000002e 	.word	0x2000002e
 800f090:	2000002f 	.word	0x2000002f
 800f094:	20000030 	.word	0x20000030
 800f098:	20000824 	.word	0x20000824
 800f09c:	20000031 	.word	0x20000031
 800f0a0:	20000032 	.word	0x20000032
 800f0a4:	20000033 	.word	0x20000033
 800f0a8:	20000825 	.word	0x20000825
 800f0ac:	20000826 	.word	0x20000826
 800f0b0:	20000034 	.word	0x20000034
 800f0b4:	20000035 	.word	0x20000035
 800f0b8:	20000036 	.word	0x20000036
 800f0bc:	20000827 	.word	0x20000827
 800f0c0:	20000038 	.word	0x20000038
 800f0c4:	20000828 	.word	0x20000828
 800f0c8:	2000003a 	.word	0x2000003a
 800f0cc:	2000003b 	.word	0x2000003b
 800f0d0:	20000829 	.word	0x20000829
 800f0d4:	2000003c 	.word	0x2000003c
 800f0d8:	2000003e 	.word	0x2000003e
 800f0dc:	2000082a 	.word	0x2000082a
 800f0e0:	2000082c 	.word	0x2000082c

0800f0e4 <TxProtocol>:

void TxProtocol(uint8_t data[], uint8_t data_length){
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b084      	sub	sp, #16
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	70fb      	strb	r3, [r7, #3]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 800f0f0:	4b18      	ldr	r3, [pc, #96]	; (800f154 <TxProtocol+0x70>)
 800f0f2:	881b      	ldrh	r3, [r3, #0]
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	4818      	ldr	r0, [pc, #96]	; (800f158 <TxProtocol+0x74>)
 800f0f8:	f000 fa36 	bl	800f568 <sx126x_clear_irq_status>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_write_buffer(&hspi, 0, data, data_length); // 0 is the offset
 800f100:	78fb      	ldrb	r3, [r7, #3]
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	2100      	movs	r1, #0
 800f106:	4814      	ldr	r0, [pc, #80]	; (800f158 <TxProtocol+0x74>)
 800f108:	f000 f998 	bl	800f43c <sx126x_write_buffer>
 800f10c:	4603      	mov	r3, r0
 800f10e:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_tx(&hspi, 6000, data_length);
 800f110:	78fb      	ldrb	r3, [r7, #3]
 800f112:	461a      	mov	r2, r3
 800f114:	f241 7170 	movw	r1, #6000	; 0x1770
 800f118:	480f      	ldr	r0, [pc, #60]	; (800f158 <TxProtocol+0x74>)
 800f11a:	f000 f839 	bl	800f190 <sx126x_set_tx>
 800f11e:	4603      	mov	r3, r0
 800f120:	73fb      	strb	r3, [r7, #15]
    osDelay(100);
 800f122:	2064      	movs	r0, #100	; 0x64
 800f124:	f005 fd7b 	bl	8014c1e <osDelay>

    sx126x_irq_mask_t irq;
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 800f128:	f107 030c 	add.w	r3, r7, #12
 800f12c:	4619      	mov	r1, r3
 800f12e:	480a      	ldr	r0, [pc, #40]	; (800f158 <TxProtocol+0x74>)
 800f130:	f000 f9e8 	bl	800f504 <sx126x_get_irq_status>
 800f134:	4603      	mov	r3, r0
 800f136:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_TX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 800f138:	89bb      	ldrh	r3, [r7, #12]
 800f13a:	f003 0301 	and.w	r3, r3, #1
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d104      	bne.n	800f14c <TxProtocol+0x68>
 800f142:	89bb      	ldrh	r3, [r7, #12]
 800f144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d0ed      	beq.n	800f128 <TxProtocol+0x44>
}
 800f14c:	bf00      	nop
 800f14e:	3710      	adds	r7, #16
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	2000003e 	.word	0x2000003e
 800f158:	200007cc 	.word	0x200007cc

0800f15c <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b086      	sub	sp, #24
 800f160:	af02      	add	r7, sp, #8
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	460b      	mov	r3, r1
 800f166:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 800f168:	2300      	movs	r3, #0
 800f16a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 800f16c:	2380      	movs	r3, #128	; 0x80
 800f16e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 800f170:	78fb      	ldrb	r3, [r7, #3]
 800f172:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800f174:	f107 010c 	add.w	r1, r7, #12
 800f178:	2300      	movs	r3, #0
 800f17a:	9300      	str	r3, [sp, #0]
 800f17c:	2300      	movs	r3, #0
 800f17e:	2202      	movs	r2, #2
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f7ff fd9b 	bl	800ecbc <sx126x_hal_write>
 800f186:	4603      	mov	r3, r0
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3710      	adds	r7, #16
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms , uint8_t lora_data_length)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b086      	sub	sp, #24
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	4613      	mov	r3, r2
 800f19c:	71fb      	strb	r3, [r7, #7]
    if (packet_type == SX126X_PKT_TYPE_LORA) {
 800f19e:	4b1b      	ldr	r3, [pc, #108]	; (800f20c <sx126x_set_tx+0x7c>)
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d11e      	bne.n	800f1e4 <sx126x_set_tx+0x54>
        struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 800f1a6:	2006      	movs	r0, #6
 800f1a8:	f00a fdb8 	bl	8019d1c <malloc>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	617b      	str	r3, [r7, #20]
        lora_params->preamble_len_in_symb=pkt_preamble_len;
 800f1b0:	4b17      	ldr	r3, [pc, #92]	; (800f210 <sx126x_set_tx+0x80>)
 800f1b2:	881a      	ldrh	r2, [r3, #0]
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	801a      	strh	r2, [r3, #0]
        lora_params->header_type=header_type;
 800f1b8:	4b16      	ldr	r3, [pc, #88]	; (800f214 <sx126x_set_tx+0x84>)
 800f1ba:	781a      	ldrb	r2, [r3, #0]
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	709a      	strb	r2, [r3, #2]
        lora_params->pld_len_in_bytes=lora_data_length;
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	79fa      	ldrb	r2, [r7, #7]
 800f1c4:	70da      	strb	r2, [r3, #3]
        lora_params->crc_is_on=crc_is_on;
 800f1c6:	4b14      	ldr	r3, [pc, #80]	; (800f218 <sx126x_set_tx+0x88>)
 800f1c8:	781a      	ldrb	r2, [r3, #0]
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	711a      	strb	r2, [r3, #4]
        lora_params->invert_iq_is_on=invert_iq_is_on;
 800f1ce:	4b13      	ldr	r3, [pc, #76]	; (800f21c <sx126x_set_tx+0x8c>)
 800f1d0:	781a      	ldrb	r2, [r3, #0]
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	715a      	strb	r2, [r3, #5]
        sx126x_set_lora_pkt_params(&hspi, lora_params);
 800f1d6:	6979      	ldr	r1, [r7, #20]
 800f1d8:	4811      	ldr	r0, [pc, #68]	; (800f220 <sx126x_set_tx+0x90>)
 800f1da:	f000 fad1 	bl	800f780 <sx126x_set_lora_pkt_params>
        free(lora_params);
 800f1de:	6978      	ldr	r0, [r7, #20]
 800f1e0:	f00a fda4 	bl	8019d2c <free>
    }

    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f1ea:	d301      	bcc.n	800f1f0 <sx126x_set_tx+0x60>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800f1ec:	2302      	movs	r3, #2
 800f1ee:	e008      	b.n	800f202 <sx126x_set_tx+0x72>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800f1f0:	68b8      	ldr	r0, [r7, #8]
 800f1f2:	f000 fb7d 	bl	800f8f0 <sx126x_convert_timeout_in_ms_to_rtc_step>
 800f1f6:	6138      	str	r0, [r7, #16]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800f1f8:	6939      	ldr	r1, [r7, #16]
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	f000 f812 	bl	800f224 <sx126x_set_tx_with_timeout_in_rtc_step>
 800f200:	4603      	mov	r3, r0
}
 800f202:	4618      	mov	r0, r3
 800f204:	3718      	adds	r7, #24
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	20000028 	.word	0x20000028
 800f210:	20000038 	.word	0x20000038
 800f214:	20000828 	.word	0x20000828
 800f218:	2000003b 	.word	0x2000003b
 800f21c:	20000829 	.word	0x20000829
 800f220:	200007cc 	.word	0x200007cc

0800f224 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b086      	sub	sp, #24
 800f228:	af02      	add	r7, sp, #8
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_TX] = { 0 };
 800f22e:	2300      	movs	r3, #0
 800f230:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_TX;
 800f232:	2383      	movs	r3, #131	; 0x83
 800f234:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	0c1b      	lsrs	r3, r3, #16
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	0a1b      	lsrs	r3, r3, #8
 800f242:	b2db      	uxtb	r3, r3
 800f244:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 800f24c:	f107 010c 	add.w	r1, r7, #12
 800f250:	2300      	movs	r3, #0
 800f252:	9300      	str	r3, [sp, #0]
 800f254:	2300      	movs	r3, #0
 800f256:	2204      	movs	r2, #4
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7ff fd2f 	bl	800ecbc <sx126x_hal_write>
 800f25e:	4603      	mov	r3, r0
}
 800f260:	4618      	mov	r0, r3
 800f262:	3710      	adds	r7, #16
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af02      	add	r7, sp, #8
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	460b      	mov	r3, r1
 800f272:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 800f274:	2300      	movs	r3, #0
 800f276:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 800f278:	2396      	movs	r3, #150	; 0x96
 800f27a:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 800f27c:	78fb      	ldrb	r3, [r7, #3]
 800f27e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800f280:	f107 010c 	add.w	r1, r7, #12
 800f284:	2300      	movs	r3, #0
 800f286:	9300      	str	r3, [sp, #0]
 800f288:	2300      	movs	r3, #0
 800f28a:	2202      	movs	r2, #2
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7ff fd15 	bl	800ecbc <sx126x_hal_write>
 800f292:	4603      	mov	r3, r0
}
 800f294:	4618      	mov	r0, r3
 800f296:	3710      	adds	r7, #16
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}

0800f29c <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b086      	sub	sp, #24
 800f2a0:	af02      	add	r7, sp, #8
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 800f2ac:	2389      	movs	r3, #137	; 0x89
 800f2ae:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 800f2b0:	78fb      	ldrb	r3, [r7, #3]
 800f2b2:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800f2b4:	f107 010c 	add.w	r1, r7, #12
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	9300      	str	r3, [sp, #0]
 800f2bc:	2300      	movs	r3, #0
 800f2be:	2202      	movs	r2, #2
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f7ff fcfb 	bl	800ecbc <sx126x_hal_write>
 800f2c6:	4603      	mov	r3, r0
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3710      	adds	r7, #16
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b086      	sub	sp, #24
 800f2d4:	af02      	add	r7, sp, #8
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	460b      	mov	r3, r1
 800f2da:	70fb      	strb	r3, [r7, #3]
 800f2dc:	4613      	mov	r3, r2
 800f2de:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 800f2e0:	4b0c      	ldr	r3, [pc, #48]	; (800f314 <sx126x_cal_img_hex+0x44>)
 800f2e2:	881b      	ldrh	r3, [r3, #0]
 800f2e4:	81bb      	strh	r3, [r7, #12]
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 800f2ea:	2398      	movs	r3, #152	; 0x98
 800f2ec:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 800f2ee:	78fb      	ldrb	r3, [r7, #3]
 800f2f0:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 800f2f2:	78bb      	ldrb	r3, [r7, #2]
 800f2f4:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 800f2f6:	f107 010c 	add.w	r1, r7, #12
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	9300      	str	r3, [sp, #0]
 800f2fe:	2300      	movs	r3, #0
 800f300:	2203      	movs	r2, #3
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f7ff fcda 	bl	800ecbc <sx126x_hal_write>
 800f308:	4603      	mov	r3, r0
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3710      	adds	r7, #16
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	08020a58 	.word	0x08020a58

0800f318 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b086      	sub	sp, #24
 800f31c:	af02      	add	r7, sp, #8
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 800f322:	2300      	movs	r3, #0
 800f324:	60bb      	str	r3, [r7, #8]
 800f326:	2300      	movs	r3, #0
 800f328:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 800f32a:	2395      	movs	r3, #149	; 0x95
 800f32c:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	785b      	ldrb	r3, [r3, #1]
 800f338:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	789b      	ldrb	r3, [r3, #2]
 800f33e:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	78db      	ldrb	r3, [r3, #3]
 800f344:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800f346:	f107 0108 	add.w	r1, r7, #8
 800f34a:	2300      	movs	r3, #0
 800f34c:	9300      	str	r3, [sp, #0]
 800f34e:	2300      	movs	r3, #0
 800f350:	2205      	movs	r2, #5
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f7ff fcb2 	bl	800ecbc <sx126x_hal_write>
 800f358:	4603      	mov	r3, r0
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3710      	adds	r7, #16
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}

0800f362 <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 800f362:	b580      	push	{r7, lr}
 800f364:	b086      	sub	sp, #24
 800f366:	af02      	add	r7, sp, #8
 800f368:	6078      	str	r0, [r7, #4]
 800f36a:	460b      	mov	r3, r1
 800f36c:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 800f36e:	2300      	movs	r3, #0
 800f370:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 800f372:	2393      	movs	r3, #147	; 0x93
 800f374:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 800f376:	78fb      	ldrb	r3, [r7, #3]
 800f378:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 800f37a:	f107 010c 	add.w	r1, r7, #12
 800f37e:	2300      	movs	r3, #0
 800f380:	9300      	str	r3, [sp, #0]
 800f382:	2300      	movs	r3, #0
 800f384:	2202      	movs	r2, #2
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f7ff fc98 	bl	800ecbc <sx126x_hal_write>
 800f38c:	4603      	mov	r3, r0
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3710      	adds	r7, #16
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
	...

0800f398 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b088      	sub	sp, #32
 800f39c:	af02      	add	r7, sp, #8
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	607a      	str	r2, [r7, #4]
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	817b      	strh	r3, [r7, #10]
 800f3a8:	4613      	mov	r3, r2
 800f3aa:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 800f3ac:	4b0e      	ldr	r3, [pc, #56]	; (800f3e8 <sx126x_write_register+0x50>)
 800f3ae:	881b      	ldrh	r3, [r3, #0]
 800f3b0:	82bb      	strh	r3, [r7, #20]
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 800f3b6:	230d      	movs	r3, #13
 800f3b8:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 800f3ba:	897b      	ldrh	r3, [r7, #10]
 800f3bc:	0a1b      	lsrs	r3, r3, #8
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 800f3c4:	897b      	ldrh	r3, [r7, #10]
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800f3ca:	7a7b      	ldrb	r3, [r7, #9]
 800f3cc:	b29b      	uxth	r3, r3
 800f3ce:	f107 0114 	add.w	r1, r7, #20
 800f3d2:	9300      	str	r3, [sp, #0]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2203      	movs	r2, #3
 800f3d8:	68f8      	ldr	r0, [r7, #12]
 800f3da:	f7ff fc6f 	bl	800ecbc <sx126x_hal_write>
 800f3de:	4603      	mov	r3, r0
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3718      	adds	r7, #24
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	08020a58 	.word	0x08020a58

0800f3ec <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b088      	sub	sp, #32
 800f3f0:	af02      	add	r7, sp, #8
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	607a      	str	r2, [r7, #4]
 800f3f6:	461a      	mov	r2, r3
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	817b      	strh	r3, [r7, #10]
 800f3fc:	4613      	mov	r3, r2
 800f3fe:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 800f400:	2300      	movs	r3, #0
 800f402:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 800f404:	2303      	movs	r3, #3
 800f406:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 800f408:	231d      	movs	r3, #29
 800f40a:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 800f40c:	897b      	ldrh	r3, [r7, #10]
 800f40e:	0a1b      	lsrs	r3, r3, #8
 800f410:	b29b      	uxth	r3, r3
 800f412:	b2db      	uxtb	r3, r3
 800f414:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 800f416:	897b      	ldrh	r3, [r7, #10]
 800f418:	b2db      	uxtb	r3, r3
 800f41a:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800f41c:	f107 0110 	add.w	r1, r7, #16
 800f420:	7a7b      	ldrb	r3, [r7, #9]
 800f422:	9300      	str	r3, [sp, #0]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2204      	movs	r2, #4
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	f7ff fc89 	bl	800ed40 <sx126x_hal_read>
 800f42e:	4603      	mov	r3, r0
 800f430:	75fb      	strb	r3, [r7, #23]

    return status;
 800f432:	7dfb      	ldrb	r3, [r7, #23]
}
 800f434:	4618      	mov	r0, r3
 800f436:	3718      	adds	r7, #24
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t buffer_offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b088      	sub	sp, #32
 800f440:	af02      	add	r7, sp, #8
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	607a      	str	r2, [r7, #4]
 800f446:	461a      	mov	r2, r3
 800f448:	460b      	mov	r3, r1
 800f44a:	72fb      	strb	r3, [r7, #11]
 800f44c:	4613      	mov	r3, r2
 800f44e:	72bb      	strb	r3, [r7, #10]
    uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = { 0 };
 800f450:	2300      	movs	r3, #0
 800f452:	82bb      	strh	r3, [r7, #20]

    buf[0] = SX126X_WRITE_BUFFER;
 800f454:	230e      	movs	r3, #14
 800f456:	753b      	strb	r3, [r7, #20]

    buf[1] = buffer_offset;
 800f458:	7afb      	ldrb	r3, [r7, #11]
 800f45a:	757b      	strb	r3, [r7, #21]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 800f45c:	7abb      	ldrb	r3, [r7, #10]
 800f45e:	b29b      	uxth	r3, r3
 800f460:	f107 0114 	add.w	r1, r7, #20
 800f464:	9300      	str	r3, [sp, #0]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2202      	movs	r2, #2
 800f46a:	68f8      	ldr	r0, [r7, #12]
 800f46c:	f7ff fc26 	bl	800ecbc <sx126x_hal_write>
 800f470:	4603      	mov	r3, r0
}
 800f472:	4618      	mov	r0, r3
 800f474:	3718      	adds	r7, #24
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}

0800f47a <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800f47a:	b580      	push	{r7, lr}
 800f47c:	b08a      	sub	sp, #40	; 0x28
 800f47e:	af02      	add	r7, sp, #8
 800f480:	60f8      	str	r0, [r7, #12]
 800f482:	4608      	mov	r0, r1
 800f484:	4611      	mov	r1, r2
 800f486:	461a      	mov	r2, r3
 800f488:	4603      	mov	r3, r0
 800f48a:	817b      	strh	r3, [r7, #10]
 800f48c:	460b      	mov	r3, r1
 800f48e:	813b      	strh	r3, [r7, #8]
 800f490:	4613      	mov	r3, r2
 800f492:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 800f494:	2300      	movs	r3, #0
 800f496:	617b      	str	r3, [r7, #20]
 800f498:	f107 0318 	add.w	r3, r7, #24
 800f49c:	2200      	movs	r2, #0
 800f49e:	601a      	str	r2, [r3, #0]
 800f4a0:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 800f4a2:	2308      	movs	r3, #8
 800f4a4:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800f4a6:	897b      	ldrh	r3, [r7, #10]
 800f4a8:	0a1b      	lsrs	r3, r3, #8
 800f4aa:	b29b      	uxth	r3, r3
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800f4b0:	897b      	ldrh	r3, [r7, #10]
 800f4b2:	b2db      	uxtb	r3, r3
 800f4b4:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 800f4b6:	893b      	ldrh	r3, [r7, #8]
 800f4b8:	0a1b      	lsrs	r3, r3, #8
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	b2db      	uxtb	r3, r3
 800f4be:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 800f4c0:	893b      	ldrh	r3, [r7, #8]
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 800f4c6:	88fb      	ldrh	r3, [r7, #6]
 800f4c8:	0a1b      	lsrs	r3, r3, #8
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	b2db      	uxtb	r3, r3
 800f4ce:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 800f4d0:	88fb      	ldrh	r3, [r7, #6]
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 800f4d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f4d8:	0a1b      	lsrs	r3, r3, #8
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	b2db      	uxtb	r3, r3
 800f4de:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 800f4e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800f4e6:	f107 0114 	add.w	r1, r7, #20
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	9300      	str	r3, [sp, #0]
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	2209      	movs	r2, #9
 800f4f2:	68f8      	ldr	r0, [r7, #12]
 800f4f4:	f7ff fbe2 	bl	800ecbc <sx126x_hal_write>
 800f4f8:	4603      	mov	r3, r0
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3720      	adds	r7, #32
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
	...

0800f504 <sx126x_get_irq_status>:

sx126x_status_t sx126x_get_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b088      	sub	sp, #32
 800f508:	af02      	add	r7, sp, #8
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_IRQ_STATUS]             = { 0x00 }; //0x00 is no operational, its just so that theyre equal
 800f50e:	2300      	movs	r3, #0
 800f510:	613b      	str	r3, [r7, #16]
    uint8_t         received_buf[sizeof( sx126x_irq_mask_t )+1] = { 0x00 };
 800f512:	4b14      	ldr	r3, [pc, #80]	; (800f564 <sx126x_get_irq_status+0x60>)
 800f514:	881b      	ldrh	r3, [r3, #0]
 800f516:	81bb      	strh	r3, [r7, #12]
 800f518:	2300      	movs	r3, #0
 800f51a:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                      = SX126X_STATUS_ERROR;
 800f51c:	2303      	movs	r3, #3
 800f51e:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_IRQ_STATUS;
 800f520:	2312      	movs	r3, #18
 800f522:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_IRQ_STATUS, received_buf,
 800f524:	f107 030c 	add.w	r3, r7, #12
 800f528:	f107 0110 	add.w	r1, r7, #16
 800f52c:	2201      	movs	r2, #1
 800f52e:	9200      	str	r2, [sp, #0]
 800f530:	2204      	movs	r2, #4
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f7ff fc04 	bl	800ed40 <sx126x_hal_read>
 800f538:	4603      	mov	r3, r0
 800f53a:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_IRQ_STATUS );

    if( status == SX126X_STATUS_OK )
 800f53c:	7dfb      	ldrb	r3, [r7, #23]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d10b      	bne.n	800f55a <sx126x_get_irq_status+0x56>
    {
        *irq = ( ( sx126x_irq_mask_t ) received_buf[1] << 8 ) | ( ( sx126x_irq_mask_t ) received_buf[2] << 0 );
 800f542:	7b7b      	ldrb	r3, [r7, #13]
 800f544:	021b      	lsls	r3, r3, #8
 800f546:	b21a      	sxth	r2, r3
 800f548:	7bbb      	ldrb	r3, [r7, #14]
 800f54a:	b21b      	sxth	r3, r3
 800f54c:	4313      	orrs	r3, r2
 800f54e:	b21b      	sxth	r3, r3
 800f550:	b29a      	uxth	r2, r3
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	801a      	strh	r2, [r3, #0]
        status = received_buf[0]; //its the status
 800f556:	7b3b      	ldrb	r3, [r7, #12]
 800f558:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800f55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	3718      	adds	r7, #24
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}
 800f564:	08020a58 	.word	0x08020a58

0800f568 <sx126x_clear_irq_status>:

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b086      	sub	sp, #24
 800f56c:	af02      	add	r7, sp, #8
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	460b      	mov	r3, r1
 800f572:	807b      	strh	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = { 0 };
 800f574:	4b0e      	ldr	r3, [pc, #56]	; (800f5b0 <sx126x_clear_irq_status+0x48>)
 800f576:	881b      	ldrh	r3, [r3, #0]
 800f578:	81bb      	strh	r3, [r7, #12]
 800f57a:	2300      	movs	r3, #0
 800f57c:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CLR_IRQ_STATUS;
 800f57e:	2302      	movs	r3, #2
 800f580:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800f582:	887b      	ldrh	r3, [r7, #2]
 800f584:	0a1b      	lsrs	r3, r3, #8
 800f586:	b29b      	uxth	r3, r3
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800f58c:	887b      	ldrh	r3, [r7, #2]
 800f58e:	b2db      	uxtb	r3, r3
 800f590:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 800f592:	f107 010c 	add.w	r1, r7, #12
 800f596:	2300      	movs	r3, #0
 800f598:	9300      	str	r3, [sp, #0]
 800f59a:	2300      	movs	r3, #0
 800f59c:	2203      	movs	r2, #3
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f7ff fb8c 	bl	800ecbc <sx126x_hal_write>
 800f5a4:	4603      	mov	r3, r0
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3710      	adds	r7, #16
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	08020a58 	.word	0x08020a58

0800f5b4 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b086      	sub	sp, #24
 800f5b8:	af02      	add	r7, sp, #8
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	460b      	mov	r3, r1
 800f5be:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 800f5c4:	239d      	movs	r3, #157	; 0x9d
 800f5c6:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 800f5c8:	78fb      	ldrb	r3, [r7, #3]
 800f5ca:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 800f5cc:	f107 010c 	add.w	r1, r7, #12
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	9300      	str	r3, [sp, #0]
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	2202      	movs	r2, #2
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7ff fb6f 	bl	800ecbc <sx126x_hal_write>
 800f5de:	4603      	mov	r3, r0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3710      	adds	r7, #16
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b088      	sub	sp, #32
 800f5ec:	af02      	add	r7, sp, #8
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	607a      	str	r2, [r7, #4]
 800f5f4:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	613b      	str	r3, [r7, #16]
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 800f5fe:	2397      	movs	r3, #151	; 0x97
 800f600:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 800f602:	7afb      	ldrb	r3, [r7, #11]
 800f604:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	0c1b      	lsrs	r3, r3, #16
 800f60a:	b2db      	uxtb	r3, r3
 800f60c:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	0a1b      	lsrs	r3, r3, #8
 800f612:	b2db      	uxtb	r3, r3
 800f614:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800f61c:	f107 0110 	add.w	r1, r7, #16
 800f620:	2300      	movs	r3, #0
 800f622:	9300      	str	r3, [sp, #0]
 800f624:	2300      	movs	r3, #0
 800f626:	2205      	movs	r2, #5
 800f628:	68f8      	ldr	r0, [r7, #12]
 800f62a:	f7ff fb47 	bl	800ecbc <sx126x_hal_write>
 800f62e:	4603      	mov	r3, r0
}
 800f630:	4618      	mov	r0, r3
 800f632:	3718      	adds	r7, #24
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800f642:	6838      	ldr	r0, [r7, #0]
 800f644:	f000 f92e 	bl	800f8a4 <sx126x_convert_freq_in_hz_to_pll_step>
 800f648:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800f64a:	68f9      	ldr	r1, [r7, #12]
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f000 f805 	bl	800f65c <sx126x_set_rf_freq_in_pll_steps>
 800f652:	4603      	mov	r3, r0
}
 800f654:	4618      	mov	r0, r3
 800f656:	3710      	adds	r7, #16
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b086      	sub	sp, #24
 800f660:	af02      	add	r7, sp, #8
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 800f666:	2300      	movs	r3, #0
 800f668:	60bb      	str	r3, [r7, #8]
 800f66a:	2300      	movs	r3, #0
 800f66c:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 800f66e:	2386      	movs	r3, #134	; 0x86
 800f670:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	0e1b      	lsrs	r3, r3, #24
 800f676:	b2db      	uxtb	r3, r3
 800f678:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	0c1b      	lsrs	r3, r3, #16
 800f67e:	b2db      	uxtb	r3, r3
 800f680:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	0a1b      	lsrs	r3, r3, #8
 800f686:	b2db      	uxtb	r3, r3
 800f688:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	b2db      	uxtb	r3, r3
 800f68e:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800f690:	f107 0108 	add.w	r1, r7, #8
 800f694:	2300      	movs	r3, #0
 800f696:	9300      	str	r3, [sp, #0]
 800f698:	2300      	movs	r3, #0
 800f69a:	2205      	movs	r2, #5
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f7ff fb0d 	bl	800ecbc <sx126x_hal_write>
 800f6a2:	4603      	mov	r3, r0
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3710      	adds	r7, #16
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b086      	sub	sp, #24
 800f6b0:	af02      	add	r7, sp, #8
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 800f6bc:	238a      	movs	r3, #138	; 0x8a
 800f6be:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 800f6c0:	78fb      	ldrb	r3, [r7, #3]
 800f6c2:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800f6c4:	f107 010c 	add.w	r1, r7, #12
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	9300      	str	r3, [sp, #0]
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	2202      	movs	r2, #2
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f7ff faf3 	bl	800ecbc <sx126x_hal_write>
 800f6d6:	4603      	mov	r3, r0
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3710      	adds	r7, #16
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b086      	sub	sp, #24
 800f6e4:	af02      	add	r7, sp, #8
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	460b      	mov	r3, r1
 800f6ea:	70fb      	strb	r3, [r7, #3]
 800f6ec:	4613      	mov	r3, r2
 800f6ee:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 800f6f0:	4b0c      	ldr	r3, [pc, #48]	; (800f724 <sx126x_set_tx_params+0x44>)
 800f6f2:	881b      	ldrh	r3, [r3, #0]
 800f6f4:	81bb      	strh	r3, [r7, #12]
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 800f6fa:	238e      	movs	r3, #142	; 0x8e
 800f6fc:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 800f6fe:	78fb      	ldrb	r3, [r7, #3]
 800f700:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 800f702:	78bb      	ldrb	r3, [r7, #2]
 800f704:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800f706:	f107 010c 	add.w	r1, r7, #12
 800f70a:	2300      	movs	r3, #0
 800f70c:	9300      	str	r3, [sp, #0]
 800f70e:	2300      	movs	r3, #0
 800f710:	2203      	movs	r2, #3
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f7ff fad2 	bl	800ecbc <sx126x_hal_write>
 800f718:	4603      	mov	r3, r0
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3710      	adds	r7, #16
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
 800f722:	bf00      	nop
 800f724:	08020a58 	.word	0x08020a58

0800f728 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b086      	sub	sp, #24
 800f72c:	af02      	add	r7, sp, #8
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800f732:	2303      	movs	r3, #3
 800f734:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 800f736:	2300      	movs	r3, #0
 800f738:	60bb      	str	r3, [r7, #8]
 800f73a:	2300      	movs	r3, #0
 800f73c:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 800f73e:	238b      	movs	r3, #139	; 0x8b
 800f740:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	781b      	ldrb	r3, [r3, #0]
 800f746:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	785b      	ldrb	r3, [r3, #1]
 800f74c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	789b      	ldrb	r3, [r3, #2]
 800f752:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	78db      	ldrb	r3, [r3, #3]
 800f758:	f003 0301 	and.w	r3, r3, #1
 800f75c:	b2db      	uxtb	r3, r3
 800f75e:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800f760:	f107 0108 	add.w	r1, r7, #8
 800f764:	2300      	movs	r3, #0
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	2300      	movs	r3, #0
 800f76a:	2205      	movs	r2, #5
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f7ff faa5 	bl	800ecbc <sx126x_hal_write>
 800f772:	4603      	mov	r3, r0
 800f774:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 800f776:	7bfb      	ldrb	r3, [r7, #15]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3710      	adds	r7, #16
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b088      	sub	sp, #32
 800f784:	af02      	add	r7, sp, #8
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800f78a:	2303      	movs	r3, #3
 800f78c:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 800f78e:	2300      	movs	r3, #0
 800f790:	613b      	str	r3, [r7, #16]
 800f792:	f107 0314 	add.w	r3, r7, #20
 800f796:	2100      	movs	r1, #0
 800f798:	460a      	mov	r2, r1
 800f79a:	801a      	strh	r2, [r3, #0]
 800f79c:	460a      	mov	r2, r1
 800f79e:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 800f7a0:	238c      	movs	r3, #140	; 0x8c
 800f7a2:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	881b      	ldrh	r3, [r3, #0]
 800f7a8:	0a1b      	lsrs	r3, r3, #8
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	881b      	ldrh	r3, [r3, #0]
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	789b      	ldrb	r3, [r3, #2]
 800f7bc:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	78db      	ldrb	r3, [r3, #3]
 800f7c2:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	791b      	ldrb	r3, [r3, #4]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d001      	beq.n	800f7d0 <sx126x_set_lora_pkt_params+0x50>
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	e000      	b.n	800f7d2 <sx126x_set_lora_pkt_params+0x52>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	795b      	ldrb	r3, [r3, #5]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d001      	beq.n	800f7e0 <sx126x_set_lora_pkt_params+0x60>
 800f7dc:	2301      	movs	r3, #1
 800f7de:	e000      	b.n	800f7e2 <sx126x_set_lora_pkt_params+0x62>
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800f7e4:	f107 0110 	add.w	r1, r7, #16
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	9300      	str	r3, [sp, #0]
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	2207      	movs	r2, #7
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f7ff fa63 	bl	800ecbc <sx126x_hal_write>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800f7fa:	7dfb      	ldrb	r3, [r7, #23]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d127      	bne.n	800f850 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 800f800:	2300      	movs	r3, #0
 800f802:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800f804:	f107 020f 	add.w	r2, r7, #15
 800f808:	2301      	movs	r3, #1
 800f80a:	f240 7136 	movw	r1, #1846	; 0x736
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f7ff fdec 	bl	800f3ec <sx126x_read_register>
 800f814:	4603      	mov	r3, r0
 800f816:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800f818:	7dfb      	ldrb	r3, [r7, #23]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d118      	bne.n	800f850 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	795b      	ldrb	r3, [r3, #5]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d005      	beq.n	800f832 <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800f826:	7bfb      	ldrb	r3, [r7, #15]
 800f828:	f023 0304 	bic.w	r3, r3, #4
 800f82c:	b2db      	uxtb	r3, r3
 800f82e:	73fb      	strb	r3, [r7, #15]
 800f830:	e004      	b.n	800f83c <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800f832:	7bfb      	ldrb	r3, [r7, #15]
 800f834:	f043 0304 	orr.w	r3, r3, #4
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800f83c:	f107 020f 	add.w	r2, r7, #15
 800f840:	2301      	movs	r3, #1
 800f842:	f240 7136 	movw	r1, #1846	; 0x736
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f7ff fda6 	bl	800f398 <sx126x_write_register>
 800f84c:	4603      	mov	r3, r0
 800f84e:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800f850:	7dfb      	ldrb	r3, [r7, #23]
}
 800f852:	4618      	mov	r0, r3
 800f854:	3718      	adds	r7, #24
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}
	...

0800f85c <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b086      	sub	sp, #24
 800f860:	af02      	add	r7, sp, #8
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	460b      	mov	r3, r1
 800f866:	70fb      	strb	r3, [r7, #3]
 800f868:	4613      	mov	r3, r2
 800f86a:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 800f86c:	4b0c      	ldr	r3, [pc, #48]	; (800f8a0 <sx126x_set_buffer_base_address+0x44>)
 800f86e:	881b      	ldrh	r3, [r3, #0]
 800f870:	81bb      	strh	r3, [r7, #12]
 800f872:	2300      	movs	r3, #0
 800f874:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 800f876:	238f      	movs	r3, #143	; 0x8f
 800f878:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 800f87a:	78fb      	ldrb	r3, [r7, #3]
 800f87c:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 800f87e:	78bb      	ldrb	r3, [r7, #2]
 800f880:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800f882:	f107 010c 	add.w	r1, r7, #12
 800f886:	2300      	movs	r3, #0
 800f888:	9300      	str	r3, [sp, #0]
 800f88a:	2300      	movs	r3, #0
 800f88c:	2203      	movs	r2, #3
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f7ff fa14 	bl	800ecbc <sx126x_hal_write>
 800f894:	4603      	mov	r3, r0
}
 800f896:	4618      	mov	r0, r3
 800f898:	3710      	adds	r7, #16
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
 800f89e:	bf00      	nop
 800f8a0:	08020a58 	.word	0x08020a58

0800f8a4 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b085      	sub	sp, #20
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a0f      	ldr	r2, [pc, #60]	; (800f8ec <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800f8b0:	fba2 2303 	umull	r2, r3, r2, r3
 800f8b4:	0b1b      	lsrs	r3, r3, #12
 800f8b6:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f643 5209 	movw	r2, #15625	; 0x3d09
 800f8be:	fb02 f303 	mul.w	r3, r2, r3
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	1ad3      	subs	r3, r2, r3
 800f8c6:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	039b      	lsls	r3, r3, #14
 800f8d0:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800f8d4:	3304      	adds	r3, #4
 800f8d6:	4905      	ldr	r1, [pc, #20]	; (800f8ec <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800f8d8:	fba1 1303 	umull	r1, r3, r1, r3
 800f8dc:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800f8de:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3714      	adds	r7, #20
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr
 800f8ec:	431bde83 	.word	0x431bde83

0800f8f0 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	b083      	sub	sp, #12
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	019b      	lsls	r3, r3, #6
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	370c      	adds	r7, #12
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr

0800f908 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f90c:	4904      	ldr	r1, [pc, #16]	; (800f920 <MX_FATFS_Init+0x18>)
 800f90e:	4805      	ldr	r0, [pc, #20]	; (800f924 <MX_FATFS_Init+0x1c>)
 800f910:	f004 fffe 	bl	8014910 <FATFS_LinkDriver>
 800f914:	4603      	mov	r3, r0
 800f916:	461a      	mov	r2, r3
 800f918:	4b03      	ldr	r3, [pc, #12]	; (800f928 <MX_FATFS_Init+0x20>)
 800f91a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f91c:	bf00      	nop
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	20007200 	.word	0x20007200
 800f924:	20000040 	.word	0x20000040
 800f928:	20007204 	.word	0x20007204

0800f92c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f92c:	b480      	push	{r7}
 800f92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f930:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f932:	4618      	mov	r0, r3
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b082      	sub	sp, #8
 800f940:	af00      	add	r7, sp, #0
 800f942:	4603      	mov	r3, r0
 800f944:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800f946:	79fb      	ldrb	r3, [r7, #7]
 800f948:	4618      	mov	r0, r3
 800f94a:	f000 f9dd 	bl	800fd08 <USER_SPI_initialize>
 800f94e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800f950:	4618      	mov	r0, r3
 800f952:	3708      	adds	r7, #8
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}

0800f958 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b082      	sub	sp, #8
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	4603      	mov	r3, r0
 800f960:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800f962:	79fb      	ldrb	r3, [r7, #7]
 800f964:	4618      	mov	r0, r3
 800f966:	f000 fab9 	bl	800fedc <USER_SPI_status>
 800f96a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3708      	adds	r7, #8
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
 800f97a:	60b9      	str	r1, [r7, #8]
 800f97c:	607a      	str	r2, [r7, #4]
 800f97e:	603b      	str	r3, [r7, #0]
 800f980:	4603      	mov	r3, r0
 800f982:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800f984:	7bf8      	ldrb	r0, [r7, #15]
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	687a      	ldr	r2, [r7, #4]
 800f98a:	68b9      	ldr	r1, [r7, #8]
 800f98c:	f000 fabc 	bl	800ff08 <USER_SPI_read>
 800f990:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800f992:	4618      	mov	r0, r3
 800f994:	3710      	adds	r7, #16
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}

0800f99a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800f99a:	b580      	push	{r7, lr}
 800f99c:	b084      	sub	sp, #16
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	60b9      	str	r1, [r7, #8]
 800f9a2:	607a      	str	r2, [r7, #4]
 800f9a4:	603b      	str	r3, [r7, #0]
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800f9aa:	7bf8      	ldrb	r0, [r7, #15]
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	68b9      	ldr	r1, [r7, #8]
 800f9b2:	f000 fb0f 	bl	800ffd4 <USER_SPI_write>
 800f9b6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3710      	adds	r7, #16
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}

0800f9c0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b082      	sub	sp, #8
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	603a      	str	r2, [r7, #0]
 800f9ca:	71fb      	strb	r3, [r7, #7]
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800f9d0:	79b9      	ldrb	r1, [r7, #6]
 800f9d2:	79fb      	ldrb	r3, [r7, #7]
 800f9d4:	683a      	ldr	r2, [r7, #0]
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f000 fb78 	bl	80100cc <USER_SPI_ioctl>
 800f9dc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3708      	adds	r7, #8
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
	...

0800f9e8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800f9f0:	f7f7 fa8c 	bl	8006f0c <HAL_GetTick>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	4a04      	ldr	r2, [pc, #16]	; (800fa08 <SPI_Timer_On+0x20>)
 800f9f8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800f9fa:	4a04      	ldr	r2, [pc, #16]	; (800fa0c <SPI_Timer_On+0x24>)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6013      	str	r3, [r2, #0]
}
 800fa00:	bf00      	nop
 800fa02:	3708      	adds	r7, #8
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}
 800fa08:	2000766c 	.word	0x2000766c
 800fa0c:	20007670 	.word	0x20007670

0800fa10 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800fa10:	b580      	push	{r7, lr}
 800fa12:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800fa14:	f7f7 fa7a 	bl	8006f0c <HAL_GetTick>
 800fa18:	4602      	mov	r2, r0
 800fa1a:	4b06      	ldr	r3, [pc, #24]	; (800fa34 <SPI_Timer_Status+0x24>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	1ad2      	subs	r2, r2, r3
 800fa20:	4b05      	ldr	r3, [pc, #20]	; (800fa38 <SPI_Timer_Status+0x28>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	bf34      	ite	cc
 800fa28:	2301      	movcc	r3, #1
 800fa2a:	2300      	movcs	r3, #0
 800fa2c:	b2db      	uxtb	r3, r3
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	bd80      	pop	{r7, pc}
 800fa32:	bf00      	nop
 800fa34:	2000766c 	.word	0x2000766c
 800fa38:	20007670 	.word	0x20007670

0800fa3c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b086      	sub	sp, #24
 800fa40:	af02      	add	r7, sp, #8
 800fa42:	4603      	mov	r3, r0
 800fa44:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800fa46:	f107 020f 	add.w	r2, r7, #15
 800fa4a:	1df9      	adds	r1, r7, #7
 800fa4c:	2332      	movs	r3, #50	; 0x32
 800fa4e:	9300      	str	r3, [sp, #0]
 800fa50:	2301      	movs	r3, #1
 800fa52:	4804      	ldr	r0, [pc, #16]	; (800fa64 <xchg_spi+0x28>)
 800fa54:	f7fc f942 	bl	800bcdc <HAL_SPI_TransmitReceive>
    return rxDat;
 800fa58:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3710      	adds	r7, #16
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}
 800fa62:	bf00      	nop
 800fa64:	20005fa4 	.word	0x20005fa4

0800fa68 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800fa68:	b590      	push	{r4, r7, lr}
 800fa6a:	b085      	sub	sp, #20
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800fa72:	2300      	movs	r3, #0
 800fa74:	60fb      	str	r3, [r7, #12]
 800fa76:	e00a      	b.n	800fa8e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	18d4      	adds	r4, r2, r3
 800fa7e:	20ff      	movs	r0, #255	; 0xff
 800fa80:	f7ff ffdc 	bl	800fa3c <xchg_spi>
 800fa84:	4603      	mov	r3, r0
 800fa86:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	60fb      	str	r3, [r7, #12]
 800fa8e:	68fa      	ldr	r2, [r7, #12]
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d3f0      	bcc.n	800fa78 <rcvr_spi_multi+0x10>
	}
}
 800fa96:	bf00      	nop
 800fa98:	bf00      	nop
 800fa9a:	3714      	adds	r7, #20
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd90      	pop	{r4, r7, pc}

0800faa0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b084      	sub	sp, #16
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800faaa:	2300      	movs	r3, #0
 800faac:	60fb      	str	r3, [r7, #12]
 800faae:	e009      	b.n	800fac4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800fab0:	687a      	ldr	r2, [r7, #4]
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	4413      	add	r3, r2
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	4618      	mov	r0, r3
 800faba:	f7ff ffbf 	bl	800fa3c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	3301      	adds	r3, #1
 800fac2:	60fb      	str	r3, [r7, #12]
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	429a      	cmp	r2, r3
 800faca:	d3f1      	bcc.n	800fab0 <xmit_spi_multi+0x10>
	}
}
 800facc:	bf00      	nop
 800face:	bf00      	nop
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}

0800fad6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800fad6:	b580      	push	{r7, lr}
 800fad8:	b086      	sub	sp, #24
 800fada:	af00      	add	r7, sp, #0
 800fadc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800fade:	f7f7 fa15 	bl	8006f0c <HAL_GetTick>
 800fae2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800fae8:	20ff      	movs	r0, #255	; 0xff
 800faea:	f7ff ffa7 	bl	800fa3c <xchg_spi>
 800faee:	4603      	mov	r3, r0
 800faf0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800faf2:	7bfb      	ldrb	r3, [r7, #15]
 800faf4:	2bff      	cmp	r3, #255	; 0xff
 800faf6:	d007      	beq.n	800fb08 <wait_ready+0x32>
 800faf8:	f7f7 fa08 	bl	8006f0c <HAL_GetTick>
 800fafc:	4602      	mov	r2, r0
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	1ad3      	subs	r3, r2, r3
 800fb02:	693a      	ldr	r2, [r7, #16]
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d8ef      	bhi.n	800fae8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800fb08:	7bfb      	ldrb	r3, [r7, #15]
 800fb0a:	2bff      	cmp	r3, #255	; 0xff
 800fb0c:	bf0c      	ite	eq
 800fb0e:	2301      	moveq	r3, #1
 800fb10:	2300      	movne	r3, #0
 800fb12:	b2db      	uxtb	r3, r3
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3718      	adds	r7, #24
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800fb20:	2201      	movs	r2, #1
 800fb22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fb26:	4804      	ldr	r0, [pc, #16]	; (800fb38 <despiselect+0x1c>)
 800fb28:	f7f7 ff6a 	bl	8007a00 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800fb2c:	20ff      	movs	r0, #255	; 0xff
 800fb2e:	f7ff ff85 	bl	800fa3c <xchg_spi>

}
 800fb32:	bf00      	nop
 800fb34:	bd80      	pop	{r7, pc}
 800fb36:	bf00      	nop
 800fb38:	40021400 	.word	0x40021400

0800fb3c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800fb40:	2200      	movs	r2, #0
 800fb42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fb46:	480a      	ldr	r0, [pc, #40]	; (800fb70 <spiselect+0x34>)
 800fb48:	f7f7 ff5a 	bl	8007a00 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800fb4c:	20ff      	movs	r0, #255	; 0xff
 800fb4e:	f7ff ff75 	bl	800fa3c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800fb52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fb56:	f7ff ffbe 	bl	800fad6 <wait_ready>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d001      	beq.n	800fb64 <spiselect+0x28>
 800fb60:	2301      	movs	r3, #1
 800fb62:	e002      	b.n	800fb6a <spiselect+0x2e>

	despiselect();
 800fb64:	f7ff ffda 	bl	800fb1c <despiselect>
	return 0;	/* Timeout */
 800fb68:	2300      	movs	r3, #0
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	40021400 	.word	0x40021400

0800fb74 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800fb7e:	20c8      	movs	r0, #200	; 0xc8
 800fb80:	f7ff ff32 	bl	800f9e8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800fb84:	20ff      	movs	r0, #255	; 0xff
 800fb86:	f7ff ff59 	bl	800fa3c <xchg_spi>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800fb8e:	7bfb      	ldrb	r3, [r7, #15]
 800fb90:	2bff      	cmp	r3, #255	; 0xff
 800fb92:	d104      	bne.n	800fb9e <rcvr_datablock+0x2a>
 800fb94:	f7ff ff3c 	bl	800fa10 <SPI_Timer_Status>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d1f2      	bne.n	800fb84 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800fb9e:	7bfb      	ldrb	r3, [r7, #15]
 800fba0:	2bfe      	cmp	r3, #254	; 0xfe
 800fba2:	d001      	beq.n	800fba8 <rcvr_datablock+0x34>
 800fba4:	2300      	movs	r3, #0
 800fba6:	e00a      	b.n	800fbbe <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800fba8:	6839      	ldr	r1, [r7, #0]
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f7ff ff5c 	bl	800fa68 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800fbb0:	20ff      	movs	r0, #255	; 0xff
 800fbb2:	f7ff ff43 	bl	800fa3c <xchg_spi>
 800fbb6:	20ff      	movs	r0, #255	; 0xff
 800fbb8:	f7ff ff40 	bl	800fa3c <xchg_spi>

	return 1;						/* Function succeeded */
 800fbbc:	2301      	movs	r3, #1
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}

0800fbc6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800fbc6:	b580      	push	{r7, lr}
 800fbc8:	b084      	sub	sp, #16
 800fbca:	af00      	add	r7, sp, #0
 800fbcc:	6078      	str	r0, [r7, #4]
 800fbce:	460b      	mov	r3, r1
 800fbd0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800fbd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fbd6:	f7ff ff7e 	bl	800fad6 <wait_ready>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d101      	bne.n	800fbe4 <xmit_datablock+0x1e>
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	e01e      	b.n	800fc22 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800fbe4:	78fb      	ldrb	r3, [r7, #3]
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7ff ff28 	bl	800fa3c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800fbec:	78fb      	ldrb	r3, [r7, #3]
 800fbee:	2bfd      	cmp	r3, #253	; 0xfd
 800fbf0:	d016      	beq.n	800fc20 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800fbf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f7ff ff52 	bl	800faa0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800fbfc:	20ff      	movs	r0, #255	; 0xff
 800fbfe:	f7ff ff1d 	bl	800fa3c <xchg_spi>
 800fc02:	20ff      	movs	r0, #255	; 0xff
 800fc04:	f7ff ff1a 	bl	800fa3c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800fc08:	20ff      	movs	r0, #255	; 0xff
 800fc0a:	f7ff ff17 	bl	800fa3c <xchg_spi>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800fc12:	7bfb      	ldrb	r3, [r7, #15]
 800fc14:	f003 031f 	and.w	r3, r3, #31
 800fc18:	2b05      	cmp	r3, #5
 800fc1a:	d001      	beq.n	800fc20 <xmit_datablock+0x5a>
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	e000      	b.n	800fc22 <xmit_datablock+0x5c>
	}
	return 1;
 800fc20:	2301      	movs	r3, #1
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3710      	adds	r7, #16
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}

0800fc2a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800fc2a:	b580      	push	{r7, lr}
 800fc2c:	b084      	sub	sp, #16
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	4603      	mov	r3, r0
 800fc32:	6039      	str	r1, [r7, #0]
 800fc34:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800fc36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	da0e      	bge.n	800fc5c <send_cmd+0x32>
		cmd &= 0x7F;
 800fc3e:	79fb      	ldrb	r3, [r7, #7]
 800fc40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc44:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800fc46:	2100      	movs	r1, #0
 800fc48:	2037      	movs	r0, #55	; 0x37
 800fc4a:	f7ff ffee 	bl	800fc2a <send_cmd>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800fc52:	7bbb      	ldrb	r3, [r7, #14]
 800fc54:	2b01      	cmp	r3, #1
 800fc56:	d901      	bls.n	800fc5c <send_cmd+0x32>
 800fc58:	7bbb      	ldrb	r3, [r7, #14]
 800fc5a:	e051      	b.n	800fd00 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800fc5c:	79fb      	ldrb	r3, [r7, #7]
 800fc5e:	2b0c      	cmp	r3, #12
 800fc60:	d008      	beq.n	800fc74 <send_cmd+0x4a>
		despiselect();
 800fc62:	f7ff ff5b 	bl	800fb1c <despiselect>
		if (!spiselect()) return 0xFF;
 800fc66:	f7ff ff69 	bl	800fb3c <spiselect>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d101      	bne.n	800fc74 <send_cmd+0x4a>
 800fc70:	23ff      	movs	r3, #255	; 0xff
 800fc72:	e045      	b.n	800fd00 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800fc74:	79fb      	ldrb	r3, [r7, #7]
 800fc76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc7a:	b2db      	uxtb	r3, r3
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7ff fedd 	bl	800fa3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	0e1b      	lsrs	r3, r3, #24
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7ff fed7 	bl	800fa3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	0c1b      	lsrs	r3, r3, #16
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7ff fed1 	bl	800fa3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	0a1b      	lsrs	r3, r3, #8
 800fc9e:	b2db      	uxtb	r3, r3
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7ff fecb 	bl	800fa3c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7ff fec6 	bl	800fa3c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800fcb4:	79fb      	ldrb	r3, [r7, #7]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d101      	bne.n	800fcbe <send_cmd+0x94>
 800fcba:	2395      	movs	r3, #149	; 0x95
 800fcbc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800fcbe:	79fb      	ldrb	r3, [r7, #7]
 800fcc0:	2b08      	cmp	r3, #8
 800fcc2:	d101      	bne.n	800fcc8 <send_cmd+0x9e>
 800fcc4:	2387      	movs	r3, #135	; 0x87
 800fcc6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800fcc8:	7bfb      	ldrb	r3, [r7, #15]
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7ff feb6 	bl	800fa3c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800fcd0:	79fb      	ldrb	r3, [r7, #7]
 800fcd2:	2b0c      	cmp	r3, #12
 800fcd4:	d102      	bne.n	800fcdc <send_cmd+0xb2>
 800fcd6:	20ff      	movs	r0, #255	; 0xff
 800fcd8:	f7ff feb0 	bl	800fa3c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800fcdc:	230a      	movs	r3, #10
 800fcde:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800fce0:	20ff      	movs	r0, #255	; 0xff
 800fce2:	f7ff feab 	bl	800fa3c <xchg_spi>
 800fce6:	4603      	mov	r3, r0
 800fce8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800fcea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	da05      	bge.n	800fcfe <send_cmd+0xd4>
 800fcf2:	7bfb      	ldrb	r3, [r7, #15]
 800fcf4:	3b01      	subs	r3, #1
 800fcf6:	73fb      	strb	r3, [r7, #15]
 800fcf8:	7bfb      	ldrb	r3, [r7, #15]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d1f0      	bne.n	800fce0 <send_cmd+0xb6>

	return res;							/* Return received response */
 800fcfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3710      	adds	r7, #16
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800fd08:	b590      	push	{r4, r7, lr}
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	4603      	mov	r3, r0
 800fd10:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800fd12:	79fb      	ldrb	r3, [r7, #7]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d001      	beq.n	800fd1c <USER_SPI_initialize+0x14>
 800fd18:	2301      	movs	r3, #1
 800fd1a:	e0d4      	b.n	800fec6 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800fd1c:	4b6c      	ldr	r3, [pc, #432]	; (800fed0 <USER_SPI_initialize+0x1c8>)
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	b2db      	uxtb	r3, r3
 800fd22:	f003 0302 	and.w	r3, r3, #2
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d003      	beq.n	800fd32 <USER_SPI_initialize+0x2a>
 800fd2a:	4b69      	ldr	r3, [pc, #420]	; (800fed0 <USER_SPI_initialize+0x1c8>)
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	b2db      	uxtb	r3, r3
 800fd30:	e0c9      	b.n	800fec6 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800fd32:	4b68      	ldr	r3, [pc, #416]	; (800fed4 <USER_SPI_initialize+0x1cc>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	681a      	ldr	r2, [r3, #0]
 800fd38:	4b66      	ldr	r3, [pc, #408]	; (800fed4 <USER_SPI_initialize+0x1cc>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800fd40:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800fd42:	230a      	movs	r3, #10
 800fd44:	73fb      	strb	r3, [r7, #15]
 800fd46:	e005      	b.n	800fd54 <USER_SPI_initialize+0x4c>
 800fd48:	20ff      	movs	r0, #255	; 0xff
 800fd4a:	f7ff fe77 	bl	800fa3c <xchg_spi>
 800fd4e:	7bfb      	ldrb	r3, [r7, #15]
 800fd50:	3b01      	subs	r3, #1
 800fd52:	73fb      	strb	r3, [r7, #15]
 800fd54:	7bfb      	ldrb	r3, [r7, #15]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d1f6      	bne.n	800fd48 <USER_SPI_initialize+0x40>

	ty = 0;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800fd5e:	2100      	movs	r1, #0
 800fd60:	2000      	movs	r0, #0
 800fd62:	f7ff ff62 	bl	800fc2a <send_cmd>
 800fd66:	4603      	mov	r3, r0
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	f040 808b 	bne.w	800fe84 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800fd6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fd72:	f7ff fe39 	bl	800f9e8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800fd76:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fd7a:	2008      	movs	r0, #8
 800fd7c:	f7ff ff55 	bl	800fc2a <send_cmd>
 800fd80:	4603      	mov	r3, r0
 800fd82:	2b01      	cmp	r3, #1
 800fd84:	d151      	bne.n	800fe2a <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800fd86:	2300      	movs	r3, #0
 800fd88:	73fb      	strb	r3, [r7, #15]
 800fd8a:	e00d      	b.n	800fda8 <USER_SPI_initialize+0xa0>
 800fd8c:	7bfc      	ldrb	r4, [r7, #15]
 800fd8e:	20ff      	movs	r0, #255	; 0xff
 800fd90:	f7ff fe54 	bl	800fa3c <xchg_spi>
 800fd94:	4603      	mov	r3, r0
 800fd96:	461a      	mov	r2, r3
 800fd98:	f107 0310 	add.w	r3, r7, #16
 800fd9c:	4423      	add	r3, r4
 800fd9e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800fda2:	7bfb      	ldrb	r3, [r7, #15]
 800fda4:	3301      	adds	r3, #1
 800fda6:	73fb      	strb	r3, [r7, #15]
 800fda8:	7bfb      	ldrb	r3, [r7, #15]
 800fdaa:	2b03      	cmp	r3, #3
 800fdac:	d9ee      	bls.n	800fd8c <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800fdae:	7abb      	ldrb	r3, [r7, #10]
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d167      	bne.n	800fe84 <USER_SPI_initialize+0x17c>
 800fdb4:	7afb      	ldrb	r3, [r7, #11]
 800fdb6:	2baa      	cmp	r3, #170	; 0xaa
 800fdb8:	d164      	bne.n	800fe84 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800fdba:	bf00      	nop
 800fdbc:	f7ff fe28 	bl	800fa10 <SPI_Timer_Status>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d007      	beq.n	800fdd6 <USER_SPI_initialize+0xce>
 800fdc6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800fdca:	20a9      	movs	r0, #169	; 0xa9
 800fdcc:	f7ff ff2d 	bl	800fc2a <send_cmd>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d1f2      	bne.n	800fdbc <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800fdd6:	f7ff fe1b 	bl	800fa10 <SPI_Timer_Status>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d051      	beq.n	800fe84 <USER_SPI_initialize+0x17c>
 800fde0:	2100      	movs	r1, #0
 800fde2:	203a      	movs	r0, #58	; 0x3a
 800fde4:	f7ff ff21 	bl	800fc2a <send_cmd>
 800fde8:	4603      	mov	r3, r0
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d14a      	bne.n	800fe84 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800fdee:	2300      	movs	r3, #0
 800fdf0:	73fb      	strb	r3, [r7, #15]
 800fdf2:	e00d      	b.n	800fe10 <USER_SPI_initialize+0x108>
 800fdf4:	7bfc      	ldrb	r4, [r7, #15]
 800fdf6:	20ff      	movs	r0, #255	; 0xff
 800fdf8:	f7ff fe20 	bl	800fa3c <xchg_spi>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	461a      	mov	r2, r3
 800fe00:	f107 0310 	add.w	r3, r7, #16
 800fe04:	4423      	add	r3, r4
 800fe06:	f803 2c08 	strb.w	r2, [r3, #-8]
 800fe0a:	7bfb      	ldrb	r3, [r7, #15]
 800fe0c:	3301      	adds	r3, #1
 800fe0e:	73fb      	strb	r3, [r7, #15]
 800fe10:	7bfb      	ldrb	r3, [r7, #15]
 800fe12:	2b03      	cmp	r3, #3
 800fe14:	d9ee      	bls.n	800fdf4 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800fe16:	7a3b      	ldrb	r3, [r7, #8]
 800fe18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d001      	beq.n	800fe24 <USER_SPI_initialize+0x11c>
 800fe20:	230c      	movs	r3, #12
 800fe22:	e000      	b.n	800fe26 <USER_SPI_initialize+0x11e>
 800fe24:	2304      	movs	r3, #4
 800fe26:	737b      	strb	r3, [r7, #13]
 800fe28:	e02c      	b.n	800fe84 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800fe2a:	2100      	movs	r1, #0
 800fe2c:	20a9      	movs	r0, #169	; 0xa9
 800fe2e:	f7ff fefc 	bl	800fc2a <send_cmd>
 800fe32:	4603      	mov	r3, r0
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d804      	bhi.n	800fe42 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800fe38:	2302      	movs	r3, #2
 800fe3a:	737b      	strb	r3, [r7, #13]
 800fe3c:	23a9      	movs	r3, #169	; 0xa9
 800fe3e:	73bb      	strb	r3, [r7, #14]
 800fe40:	e003      	b.n	800fe4a <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800fe42:	2301      	movs	r3, #1
 800fe44:	737b      	strb	r3, [r7, #13]
 800fe46:	2301      	movs	r3, #1
 800fe48:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800fe4a:	bf00      	nop
 800fe4c:	f7ff fde0 	bl	800fa10 <SPI_Timer_Status>
 800fe50:	4603      	mov	r3, r0
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d007      	beq.n	800fe66 <USER_SPI_initialize+0x15e>
 800fe56:	7bbb      	ldrb	r3, [r7, #14]
 800fe58:	2100      	movs	r1, #0
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7ff fee5 	bl	800fc2a <send_cmd>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d1f2      	bne.n	800fe4c <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800fe66:	f7ff fdd3 	bl	800fa10 <SPI_Timer_Status>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d007      	beq.n	800fe80 <USER_SPI_initialize+0x178>
 800fe70:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fe74:	2010      	movs	r0, #16
 800fe76:	f7ff fed8 	bl	800fc2a <send_cmd>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d001      	beq.n	800fe84 <USER_SPI_initialize+0x17c>
				ty = 0;
 800fe80:	2300      	movs	r3, #0
 800fe82:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800fe84:	4a14      	ldr	r2, [pc, #80]	; (800fed8 <USER_SPI_initialize+0x1d0>)
 800fe86:	7b7b      	ldrb	r3, [r7, #13]
 800fe88:	7013      	strb	r3, [r2, #0]
	despiselect();
 800fe8a:	f7ff fe47 	bl	800fb1c <despiselect>

	if (ty) {			/* OK */
 800fe8e:	7b7b      	ldrb	r3, [r7, #13]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d012      	beq.n	800feba <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800fe94:	4b0f      	ldr	r3, [pc, #60]	; (800fed4 <USER_SPI_initialize+0x1cc>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800fe9e:	4b0d      	ldr	r3, [pc, #52]	; (800fed4 <USER_SPI_initialize+0x1cc>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f042 0218 	orr.w	r2, r2, #24
 800fea6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800fea8:	4b09      	ldr	r3, [pc, #36]	; (800fed0 <USER_SPI_initialize+0x1c8>)
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	b2db      	uxtb	r3, r3
 800feae:	f023 0301 	bic.w	r3, r3, #1
 800feb2:	b2da      	uxtb	r2, r3
 800feb4:	4b06      	ldr	r3, [pc, #24]	; (800fed0 <USER_SPI_initialize+0x1c8>)
 800feb6:	701a      	strb	r2, [r3, #0]
 800feb8:	e002      	b.n	800fec0 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800feba:	4b05      	ldr	r3, [pc, #20]	; (800fed0 <USER_SPI_initialize+0x1c8>)
 800febc:	2201      	movs	r2, #1
 800febe:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800fec0:	4b03      	ldr	r3, [pc, #12]	; (800fed0 <USER_SPI_initialize+0x1c8>)
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	b2db      	uxtb	r3, r3
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	3714      	adds	r7, #20
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd90      	pop	{r4, r7, pc}
 800fece:	bf00      	nop
 800fed0:	20000054 	.word	0x20000054
 800fed4:	20005fa4 	.word	0x20005fa4
 800fed8:	2000082e 	.word	0x2000082e

0800fedc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800fedc:	b480      	push	{r7}
 800fede:	b083      	sub	sp, #12
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	4603      	mov	r3, r0
 800fee4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800fee6:	79fb      	ldrb	r3, [r7, #7]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d001      	beq.n	800fef0 <USER_SPI_status+0x14>
 800feec:	2301      	movs	r3, #1
 800feee:	e002      	b.n	800fef6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800fef0:	4b04      	ldr	r3, [pc, #16]	; (800ff04 <USER_SPI_status+0x28>)
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	b2db      	uxtb	r3, r3
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	370c      	adds	r7, #12
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr
 800ff02:	bf00      	nop
 800ff04:	20000054 	.word	0x20000054

0800ff08 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	60b9      	str	r1, [r7, #8]
 800ff10:	607a      	str	r2, [r7, #4]
 800ff12:	603b      	str	r3, [r7, #0]
 800ff14:	4603      	mov	r3, r0
 800ff16:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800ff18:	7bfb      	ldrb	r3, [r7, #15]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d102      	bne.n	800ff24 <USER_SPI_read+0x1c>
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d101      	bne.n	800ff28 <USER_SPI_read+0x20>
 800ff24:	2304      	movs	r3, #4
 800ff26:	e04d      	b.n	800ffc4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ff28:	4b28      	ldr	r3, [pc, #160]	; (800ffcc <USER_SPI_read+0xc4>)
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	b2db      	uxtb	r3, r3
 800ff2e:	f003 0301 	and.w	r3, r3, #1
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d001      	beq.n	800ff3a <USER_SPI_read+0x32>
 800ff36:	2303      	movs	r3, #3
 800ff38:	e044      	b.n	800ffc4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800ff3a:	4b25      	ldr	r3, [pc, #148]	; (800ffd0 <USER_SPI_read+0xc8>)
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	f003 0308 	and.w	r3, r3, #8
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d102      	bne.n	800ff4c <USER_SPI_read+0x44>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	025b      	lsls	r3, r3, #9
 800ff4a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d111      	bne.n	800ff76 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800ff52:	6879      	ldr	r1, [r7, #4]
 800ff54:	2011      	movs	r0, #17
 800ff56:	f7ff fe68 	bl	800fc2a <send_cmd>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d129      	bne.n	800ffb4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800ff60:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff64:	68b8      	ldr	r0, [r7, #8]
 800ff66:	f7ff fe05 	bl	800fb74 <rcvr_datablock>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d021      	beq.n	800ffb4 <USER_SPI_read+0xac>
			count = 0;
 800ff70:	2300      	movs	r3, #0
 800ff72:	603b      	str	r3, [r7, #0]
 800ff74:	e01e      	b.n	800ffb4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800ff76:	6879      	ldr	r1, [r7, #4]
 800ff78:	2012      	movs	r0, #18
 800ff7a:	f7ff fe56 	bl	800fc2a <send_cmd>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d117      	bne.n	800ffb4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800ff84:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff88:	68b8      	ldr	r0, [r7, #8]
 800ff8a:	f7ff fdf3 	bl	800fb74 <rcvr_datablock>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d00a      	beq.n	800ffaa <USER_SPI_read+0xa2>
				buff += 512;
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ff9a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	3b01      	subs	r3, #1
 800ffa0:	603b      	str	r3, [r7, #0]
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d1ed      	bne.n	800ff84 <USER_SPI_read+0x7c>
 800ffa8:	e000      	b.n	800ffac <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800ffaa:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800ffac:	2100      	movs	r1, #0
 800ffae:	200c      	movs	r0, #12
 800ffb0:	f7ff fe3b 	bl	800fc2a <send_cmd>
		}
	}
	despiselect();
 800ffb4:	f7ff fdb2 	bl	800fb1c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	bf14      	ite	ne
 800ffbe:	2301      	movne	r3, #1
 800ffc0:	2300      	moveq	r3, #0
 800ffc2:	b2db      	uxtb	r3, r3
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3710      	adds	r7, #16
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	20000054 	.word	0x20000054
 800ffd0:	2000082e 	.word	0x2000082e

0800ffd4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b084      	sub	sp, #16
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	60b9      	str	r1, [r7, #8]
 800ffdc:	607a      	str	r2, [r7, #4]
 800ffde:	603b      	str	r3, [r7, #0]
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800ffe4:	7bfb      	ldrb	r3, [r7, #15]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d102      	bne.n	800fff0 <USER_SPI_write+0x1c>
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d101      	bne.n	800fff4 <USER_SPI_write+0x20>
 800fff0:	2304      	movs	r3, #4
 800fff2:	e063      	b.n	80100bc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800fff4:	4b33      	ldr	r3, [pc, #204]	; (80100c4 <USER_SPI_write+0xf0>)
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	b2db      	uxtb	r3, r3
 800fffa:	f003 0301 	and.w	r3, r3, #1
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d001      	beq.n	8010006 <USER_SPI_write+0x32>
 8010002:	2303      	movs	r3, #3
 8010004:	e05a      	b.n	80100bc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8010006:	4b2f      	ldr	r3, [pc, #188]	; (80100c4 <USER_SPI_write+0xf0>)
 8010008:	781b      	ldrb	r3, [r3, #0]
 801000a:	b2db      	uxtb	r3, r3
 801000c:	f003 0304 	and.w	r3, r3, #4
 8010010:	2b00      	cmp	r3, #0
 8010012:	d001      	beq.n	8010018 <USER_SPI_write+0x44>
 8010014:	2302      	movs	r3, #2
 8010016:	e051      	b.n	80100bc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8010018:	4b2b      	ldr	r3, [pc, #172]	; (80100c8 <USER_SPI_write+0xf4>)
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	f003 0308 	and.w	r3, r3, #8
 8010020:	2b00      	cmp	r3, #0
 8010022:	d102      	bne.n	801002a <USER_SPI_write+0x56>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	025b      	lsls	r3, r3, #9
 8010028:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	2b01      	cmp	r3, #1
 801002e:	d110      	bne.n	8010052 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8010030:	6879      	ldr	r1, [r7, #4]
 8010032:	2018      	movs	r0, #24
 8010034:	f7ff fdf9 	bl	800fc2a <send_cmd>
 8010038:	4603      	mov	r3, r0
 801003a:	2b00      	cmp	r3, #0
 801003c:	d136      	bne.n	80100ac <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 801003e:	21fe      	movs	r1, #254	; 0xfe
 8010040:	68b8      	ldr	r0, [r7, #8]
 8010042:	f7ff fdc0 	bl	800fbc6 <xmit_datablock>
 8010046:	4603      	mov	r3, r0
 8010048:	2b00      	cmp	r3, #0
 801004a:	d02f      	beq.n	80100ac <USER_SPI_write+0xd8>
			count = 0;
 801004c:	2300      	movs	r3, #0
 801004e:	603b      	str	r3, [r7, #0]
 8010050:	e02c      	b.n	80100ac <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8010052:	4b1d      	ldr	r3, [pc, #116]	; (80100c8 <USER_SPI_write+0xf4>)
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	f003 0306 	and.w	r3, r3, #6
 801005a:	2b00      	cmp	r3, #0
 801005c:	d003      	beq.n	8010066 <USER_SPI_write+0x92>
 801005e:	6839      	ldr	r1, [r7, #0]
 8010060:	2097      	movs	r0, #151	; 0x97
 8010062:	f7ff fde2 	bl	800fc2a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8010066:	6879      	ldr	r1, [r7, #4]
 8010068:	2019      	movs	r0, #25
 801006a:	f7ff fdde 	bl	800fc2a <send_cmd>
 801006e:	4603      	mov	r3, r0
 8010070:	2b00      	cmp	r3, #0
 8010072:	d11b      	bne.n	80100ac <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8010074:	21fc      	movs	r1, #252	; 0xfc
 8010076:	68b8      	ldr	r0, [r7, #8]
 8010078:	f7ff fda5 	bl	800fbc6 <xmit_datablock>
 801007c:	4603      	mov	r3, r0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d00a      	beq.n	8010098 <USER_SPI_write+0xc4>
				buff += 512;
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010088:	60bb      	str	r3, [r7, #8]
			} while (--count);
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	3b01      	subs	r3, #1
 801008e:	603b      	str	r3, [r7, #0]
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d1ee      	bne.n	8010074 <USER_SPI_write+0xa0>
 8010096:	e000      	b.n	801009a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8010098:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 801009a:	21fd      	movs	r1, #253	; 0xfd
 801009c:	2000      	movs	r0, #0
 801009e:	f7ff fd92 	bl	800fbc6 <xmit_datablock>
 80100a2:	4603      	mov	r3, r0
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d101      	bne.n	80100ac <USER_SPI_write+0xd8>
 80100a8:	2301      	movs	r3, #1
 80100aa:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80100ac:	f7ff fd36 	bl	800fb1c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	bf14      	ite	ne
 80100b6:	2301      	movne	r3, #1
 80100b8:	2300      	moveq	r3, #0
 80100ba:	b2db      	uxtb	r3, r3
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3710      	adds	r7, #16
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}
 80100c4:	20000054 	.word	0x20000054
 80100c8:	2000082e 	.word	0x2000082e

080100cc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b08c      	sub	sp, #48	; 0x30
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	4603      	mov	r3, r0
 80100d4:	603a      	str	r2, [r7, #0]
 80100d6:	71fb      	strb	r3, [r7, #7]
 80100d8:	460b      	mov	r3, r1
 80100da:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80100dc:	79fb      	ldrb	r3, [r7, #7]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d001      	beq.n	80100e6 <USER_SPI_ioctl+0x1a>
 80100e2:	2304      	movs	r3, #4
 80100e4:	e15a      	b.n	801039c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80100e6:	4baf      	ldr	r3, [pc, #700]	; (80103a4 <USER_SPI_ioctl+0x2d8>)
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	b2db      	uxtb	r3, r3
 80100ec:	f003 0301 	and.w	r3, r3, #1
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d001      	beq.n	80100f8 <USER_SPI_ioctl+0x2c>
 80100f4:	2303      	movs	r3, #3
 80100f6:	e151      	b.n	801039c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80100f8:	2301      	movs	r3, #1
 80100fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80100fe:	79bb      	ldrb	r3, [r7, #6]
 8010100:	2b04      	cmp	r3, #4
 8010102:	f200 8136 	bhi.w	8010372 <USER_SPI_ioctl+0x2a6>
 8010106:	a201      	add	r2, pc, #4	; (adr r2, 801010c <USER_SPI_ioctl+0x40>)
 8010108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801010c:	08010121 	.word	0x08010121
 8010110:	08010135 	.word	0x08010135
 8010114:	08010373 	.word	0x08010373
 8010118:	080101e1 	.word	0x080101e1
 801011c:	080102d7 	.word	0x080102d7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8010120:	f7ff fd0c 	bl	800fb3c <spiselect>
 8010124:	4603      	mov	r3, r0
 8010126:	2b00      	cmp	r3, #0
 8010128:	f000 8127 	beq.w	801037a <USER_SPI_ioctl+0x2ae>
 801012c:	2300      	movs	r3, #0
 801012e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8010132:	e122      	b.n	801037a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8010134:	2100      	movs	r1, #0
 8010136:	2009      	movs	r0, #9
 8010138:	f7ff fd77 	bl	800fc2a <send_cmd>
 801013c:	4603      	mov	r3, r0
 801013e:	2b00      	cmp	r3, #0
 8010140:	f040 811d 	bne.w	801037e <USER_SPI_ioctl+0x2b2>
 8010144:	f107 030c 	add.w	r3, r7, #12
 8010148:	2110      	movs	r1, #16
 801014a:	4618      	mov	r0, r3
 801014c:	f7ff fd12 	bl	800fb74 <rcvr_datablock>
 8010150:	4603      	mov	r3, r0
 8010152:	2b00      	cmp	r3, #0
 8010154:	f000 8113 	beq.w	801037e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8010158:	7b3b      	ldrb	r3, [r7, #12]
 801015a:	099b      	lsrs	r3, r3, #6
 801015c:	b2db      	uxtb	r3, r3
 801015e:	2b01      	cmp	r3, #1
 8010160:	d111      	bne.n	8010186 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8010162:	7d7b      	ldrb	r3, [r7, #21]
 8010164:	461a      	mov	r2, r3
 8010166:	7d3b      	ldrb	r3, [r7, #20]
 8010168:	021b      	lsls	r3, r3, #8
 801016a:	4413      	add	r3, r2
 801016c:	461a      	mov	r2, r3
 801016e:	7cfb      	ldrb	r3, [r7, #19]
 8010170:	041b      	lsls	r3, r3, #16
 8010172:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8010176:	4413      	add	r3, r2
 8010178:	3301      	adds	r3, #1
 801017a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	029a      	lsls	r2, r3, #10
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	601a      	str	r2, [r3, #0]
 8010184:	e028      	b.n	80101d8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8010186:	7c7b      	ldrb	r3, [r7, #17]
 8010188:	f003 030f 	and.w	r3, r3, #15
 801018c:	b2da      	uxtb	r2, r3
 801018e:	7dbb      	ldrb	r3, [r7, #22]
 8010190:	09db      	lsrs	r3, r3, #7
 8010192:	b2db      	uxtb	r3, r3
 8010194:	4413      	add	r3, r2
 8010196:	b2da      	uxtb	r2, r3
 8010198:	7d7b      	ldrb	r3, [r7, #21]
 801019a:	005b      	lsls	r3, r3, #1
 801019c:	b2db      	uxtb	r3, r3
 801019e:	f003 0306 	and.w	r3, r3, #6
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	4413      	add	r3, r2
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	3302      	adds	r3, #2
 80101aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80101ae:	7d3b      	ldrb	r3, [r7, #20]
 80101b0:	099b      	lsrs	r3, r3, #6
 80101b2:	b2db      	uxtb	r3, r3
 80101b4:	461a      	mov	r2, r3
 80101b6:	7cfb      	ldrb	r3, [r7, #19]
 80101b8:	009b      	lsls	r3, r3, #2
 80101ba:	441a      	add	r2, r3
 80101bc:	7cbb      	ldrb	r3, [r7, #18]
 80101be:	029b      	lsls	r3, r3, #10
 80101c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80101c4:	4413      	add	r3, r2
 80101c6:	3301      	adds	r3, #1
 80101c8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80101ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80101ce:	3b09      	subs	r3, #9
 80101d0:	69fa      	ldr	r2, [r7, #28]
 80101d2:	409a      	lsls	r2, r3
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80101d8:	2300      	movs	r3, #0
 80101da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80101de:	e0ce      	b.n	801037e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80101e0:	4b71      	ldr	r3, [pc, #452]	; (80103a8 <USER_SPI_ioctl+0x2dc>)
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	f003 0304 	and.w	r3, r3, #4
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d031      	beq.n	8010250 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80101ec:	2100      	movs	r1, #0
 80101ee:	208d      	movs	r0, #141	; 0x8d
 80101f0:	f7ff fd1b 	bl	800fc2a <send_cmd>
 80101f4:	4603      	mov	r3, r0
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	f040 80c3 	bne.w	8010382 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80101fc:	20ff      	movs	r0, #255	; 0xff
 80101fe:	f7ff fc1d 	bl	800fa3c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8010202:	f107 030c 	add.w	r3, r7, #12
 8010206:	2110      	movs	r1, #16
 8010208:	4618      	mov	r0, r3
 801020a:	f7ff fcb3 	bl	800fb74 <rcvr_datablock>
 801020e:	4603      	mov	r3, r0
 8010210:	2b00      	cmp	r3, #0
 8010212:	f000 80b6 	beq.w	8010382 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8010216:	2330      	movs	r3, #48	; 0x30
 8010218:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 801021c:	e007      	b.n	801022e <USER_SPI_ioctl+0x162>
 801021e:	20ff      	movs	r0, #255	; 0xff
 8010220:	f7ff fc0c 	bl	800fa3c <xchg_spi>
 8010224:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010228:	3b01      	subs	r3, #1
 801022a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 801022e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010232:	2b00      	cmp	r3, #0
 8010234:	d1f3      	bne.n	801021e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8010236:	7dbb      	ldrb	r3, [r7, #22]
 8010238:	091b      	lsrs	r3, r3, #4
 801023a:	b2db      	uxtb	r3, r3
 801023c:	461a      	mov	r2, r3
 801023e:	2310      	movs	r3, #16
 8010240:	fa03 f202 	lsl.w	r2, r3, r2
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8010248:	2300      	movs	r3, #0
 801024a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 801024e:	e098      	b.n	8010382 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8010250:	2100      	movs	r1, #0
 8010252:	2009      	movs	r0, #9
 8010254:	f7ff fce9 	bl	800fc2a <send_cmd>
 8010258:	4603      	mov	r3, r0
 801025a:	2b00      	cmp	r3, #0
 801025c:	f040 8091 	bne.w	8010382 <USER_SPI_ioctl+0x2b6>
 8010260:	f107 030c 	add.w	r3, r7, #12
 8010264:	2110      	movs	r1, #16
 8010266:	4618      	mov	r0, r3
 8010268:	f7ff fc84 	bl	800fb74 <rcvr_datablock>
 801026c:	4603      	mov	r3, r0
 801026e:	2b00      	cmp	r3, #0
 8010270:	f000 8087 	beq.w	8010382 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8010274:	4b4c      	ldr	r3, [pc, #304]	; (80103a8 <USER_SPI_ioctl+0x2dc>)
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	f003 0302 	and.w	r3, r3, #2
 801027c:	2b00      	cmp	r3, #0
 801027e:	d012      	beq.n	80102a6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8010280:	7dbb      	ldrb	r3, [r7, #22]
 8010282:	005b      	lsls	r3, r3, #1
 8010284:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8010288:	7dfa      	ldrb	r2, [r7, #23]
 801028a:	09d2      	lsrs	r2, r2, #7
 801028c:	b2d2      	uxtb	r2, r2
 801028e:	4413      	add	r3, r2
 8010290:	1c5a      	adds	r2, r3, #1
 8010292:	7e7b      	ldrb	r3, [r7, #25]
 8010294:	099b      	lsrs	r3, r3, #6
 8010296:	b2db      	uxtb	r3, r3
 8010298:	3b01      	subs	r3, #1
 801029a:	fa02 f303 	lsl.w	r3, r2, r3
 801029e:	461a      	mov	r2, r3
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	601a      	str	r2, [r3, #0]
 80102a4:	e013      	b.n	80102ce <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80102a6:	7dbb      	ldrb	r3, [r7, #22]
 80102a8:	109b      	asrs	r3, r3, #2
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	f003 031f 	and.w	r3, r3, #31
 80102b0:	3301      	adds	r3, #1
 80102b2:	7dfa      	ldrb	r2, [r7, #23]
 80102b4:	00d2      	lsls	r2, r2, #3
 80102b6:	f002 0218 	and.w	r2, r2, #24
 80102ba:	7df9      	ldrb	r1, [r7, #23]
 80102bc:	0949      	lsrs	r1, r1, #5
 80102be:	b2c9      	uxtb	r1, r1
 80102c0:	440a      	add	r2, r1
 80102c2:	3201      	adds	r2, #1
 80102c4:	fb02 f303 	mul.w	r3, r2, r3
 80102c8:	461a      	mov	r2, r3
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80102ce:	2300      	movs	r3, #0
 80102d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80102d4:	e055      	b.n	8010382 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80102d6:	4b34      	ldr	r3, [pc, #208]	; (80103a8 <USER_SPI_ioctl+0x2dc>)
 80102d8:	781b      	ldrb	r3, [r3, #0]
 80102da:	f003 0306 	and.w	r3, r3, #6
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d051      	beq.n	8010386 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80102e2:	f107 020c 	add.w	r2, r7, #12
 80102e6:	79fb      	ldrb	r3, [r7, #7]
 80102e8:	210b      	movs	r1, #11
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7ff feee 	bl	80100cc <USER_SPI_ioctl>
 80102f0:	4603      	mov	r3, r0
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d149      	bne.n	801038a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80102f6:	7b3b      	ldrb	r3, [r7, #12]
 80102f8:	099b      	lsrs	r3, r3, #6
 80102fa:	b2db      	uxtb	r3, r3
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d104      	bne.n	801030a <USER_SPI_ioctl+0x23e>
 8010300:	7dbb      	ldrb	r3, [r7, #22]
 8010302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010306:	2b00      	cmp	r3, #0
 8010308:	d041      	beq.n	801038e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	623b      	str	r3, [r7, #32]
 801030e:	6a3b      	ldr	r3, [r7, #32]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	62bb      	str	r3, [r7, #40]	; 0x28
 8010314:	6a3b      	ldr	r3, [r7, #32]
 8010316:	685b      	ldr	r3, [r3, #4]
 8010318:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 801031a:	4b23      	ldr	r3, [pc, #140]	; (80103a8 <USER_SPI_ioctl+0x2dc>)
 801031c:	781b      	ldrb	r3, [r3, #0]
 801031e:	f003 0308 	and.w	r3, r3, #8
 8010322:	2b00      	cmp	r3, #0
 8010324:	d105      	bne.n	8010332 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8010326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010328:	025b      	lsls	r3, r3, #9
 801032a:	62bb      	str	r3, [r7, #40]	; 0x28
 801032c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032e:	025b      	lsls	r3, r3, #9
 8010330:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8010332:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010334:	2020      	movs	r0, #32
 8010336:	f7ff fc78 	bl	800fc2a <send_cmd>
 801033a:	4603      	mov	r3, r0
 801033c:	2b00      	cmp	r3, #0
 801033e:	d128      	bne.n	8010392 <USER_SPI_ioctl+0x2c6>
 8010340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010342:	2021      	movs	r0, #33	; 0x21
 8010344:	f7ff fc71 	bl	800fc2a <send_cmd>
 8010348:	4603      	mov	r3, r0
 801034a:	2b00      	cmp	r3, #0
 801034c:	d121      	bne.n	8010392 <USER_SPI_ioctl+0x2c6>
 801034e:	2100      	movs	r1, #0
 8010350:	2026      	movs	r0, #38	; 0x26
 8010352:	f7ff fc6a 	bl	800fc2a <send_cmd>
 8010356:	4603      	mov	r3, r0
 8010358:	2b00      	cmp	r3, #0
 801035a:	d11a      	bne.n	8010392 <USER_SPI_ioctl+0x2c6>
 801035c:	f247 5030 	movw	r0, #30000	; 0x7530
 8010360:	f7ff fbb9 	bl	800fad6 <wait_ready>
 8010364:	4603      	mov	r3, r0
 8010366:	2b00      	cmp	r3, #0
 8010368:	d013      	beq.n	8010392 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 801036a:	2300      	movs	r3, #0
 801036c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8010370:	e00f      	b.n	8010392 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8010372:	2304      	movs	r3, #4
 8010374:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010378:	e00c      	b.n	8010394 <USER_SPI_ioctl+0x2c8>
		break;
 801037a:	bf00      	nop
 801037c:	e00a      	b.n	8010394 <USER_SPI_ioctl+0x2c8>
		break;
 801037e:	bf00      	nop
 8010380:	e008      	b.n	8010394 <USER_SPI_ioctl+0x2c8>
		break;
 8010382:	bf00      	nop
 8010384:	e006      	b.n	8010394 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8010386:	bf00      	nop
 8010388:	e004      	b.n	8010394 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 801038a:	bf00      	nop
 801038c:	e002      	b.n	8010394 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 801038e:	bf00      	nop
 8010390:	e000      	b.n	8010394 <USER_SPI_ioctl+0x2c8>
		break;
 8010392:	bf00      	nop
	}

	despiselect();
 8010394:	f7ff fbc2 	bl	800fb1c <despiselect>

	return res;
 8010398:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801039c:	4618      	mov	r0, r3
 801039e:	3730      	adds	r7, #48	; 0x30
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}
 80103a4:	20000054 	.word	0x20000054
 80103a8:	2000082e 	.word	0x2000082e

080103ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	460b      	mov	r3, r1
 80103b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80103b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80103bc:	f008 fb74 	bl	8018aa8 <USBD_static_malloc>
 80103c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d105      	bne.n	80103d4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2200      	movs	r2, #0
 80103cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80103d0:	2302      	movs	r3, #2
 80103d2:	e066      	b.n	80104a2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	68fa      	ldr	r2, [r7, #12]
 80103d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	7c1b      	ldrb	r3, [r3, #16]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d119      	bne.n	8010418 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80103e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103e8:	2202      	movs	r2, #2
 80103ea:	2181      	movs	r1, #129	; 0x81
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f008 fa38 	bl	8018862 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2201      	movs	r2, #1
 80103f6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80103f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103fc:	2202      	movs	r2, #2
 80103fe:	2101      	movs	r1, #1
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f008 fa2e 	bl	8018862 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2201      	movs	r2, #1
 801040a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2210      	movs	r2, #16
 8010412:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010416:	e016      	b.n	8010446 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010418:	2340      	movs	r3, #64	; 0x40
 801041a:	2202      	movs	r2, #2
 801041c:	2181      	movs	r1, #129	; 0x81
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f008 fa1f 	bl	8018862 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2201      	movs	r2, #1
 8010428:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801042a:	2340      	movs	r3, #64	; 0x40
 801042c:	2202      	movs	r2, #2
 801042e:	2101      	movs	r1, #1
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f008 fa16 	bl	8018862 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2201      	movs	r2, #1
 801043a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2210      	movs	r2, #16
 8010442:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010446:	2308      	movs	r3, #8
 8010448:	2203      	movs	r2, #3
 801044a:	2182      	movs	r1, #130	; 0x82
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f008 fa08 	bl	8018862 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2201      	movs	r2, #1
 8010456:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	2200      	movs	r2, #0
 8010468:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	2200      	movs	r2, #0
 8010470:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	7c1b      	ldrb	r3, [r3, #16]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d109      	bne.n	8010490 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010486:	2101      	movs	r1, #1
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f008 fad9 	bl	8018a40 <USBD_LL_PrepareReceive>
 801048e:	e007      	b.n	80104a0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010496:	2340      	movs	r3, #64	; 0x40
 8010498:	2101      	movs	r1, #1
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f008 fad0 	bl	8018a40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80104a0:	2300      	movs	r3, #0
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3710      	adds	r7, #16
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}

080104aa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80104aa:	b580      	push	{r7, lr}
 80104ac:	b082      	sub	sp, #8
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
 80104b2:	460b      	mov	r3, r1
 80104b4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80104b6:	2181      	movs	r1, #129	; 0x81
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f008 f9f8 	bl	80188ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2200      	movs	r2, #0
 80104c2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80104c4:	2101      	movs	r1, #1
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f008 f9f1 	bl	80188ae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2200      	movs	r2, #0
 80104d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80104d4:	2182      	movs	r1, #130	; 0x82
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f008 f9e9 	bl	80188ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2200      	movs	r2, #0
 80104e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2200      	movs	r2, #0
 80104e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d00e      	beq.n	8010514 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010506:	4618      	mov	r0, r3
 8010508:	f008 fadc 	bl	8018ac4 <USBD_static_free>
    pdev->pClassData = NULL;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2200      	movs	r2, #0
 8010510:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010514:	2300      	movs	r3, #0
}
 8010516:	4618      	mov	r0, r3
 8010518:	3708      	adds	r7, #8
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
	...

08010520 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b086      	sub	sp, #24
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010530:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010532:	2300      	movs	r3, #0
 8010534:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010536:	2300      	movs	r3, #0
 8010538:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801053a:	2300      	movs	r3, #0
 801053c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d101      	bne.n	8010548 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8010544:	2303      	movs	r3, #3
 8010546:	e0af      	b.n	80106a8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010550:	2b00      	cmp	r3, #0
 8010552:	d03f      	beq.n	80105d4 <USBD_CDC_Setup+0xb4>
 8010554:	2b20      	cmp	r3, #32
 8010556:	f040 809f 	bne.w	8010698 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	88db      	ldrh	r3, [r3, #6]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d02e      	beq.n	80105c0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	781b      	ldrb	r3, [r3, #0]
 8010566:	b25b      	sxtb	r3, r3
 8010568:	2b00      	cmp	r3, #0
 801056a:	da16      	bge.n	801059a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010572:	689b      	ldr	r3, [r3, #8]
 8010574:	683a      	ldr	r2, [r7, #0]
 8010576:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8010578:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801057a:	683a      	ldr	r2, [r7, #0]
 801057c:	88d2      	ldrh	r2, [r2, #6]
 801057e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	88db      	ldrh	r3, [r3, #6]
 8010584:	2b07      	cmp	r3, #7
 8010586:	bf28      	it	cs
 8010588:	2307      	movcs	r3, #7
 801058a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	89fa      	ldrh	r2, [r7, #14]
 8010590:	4619      	mov	r1, r3
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f001 fae9 	bl	8011b6a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8010598:	e085      	b.n	80106a6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	785a      	ldrb	r2, [r3, #1]
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	88db      	ldrh	r3, [r3, #6]
 80105a8:	b2da      	uxtb	r2, r3
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80105b0:	6939      	ldr	r1, [r7, #16]
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	88db      	ldrh	r3, [r3, #6]
 80105b6:	461a      	mov	r2, r3
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f001 fb02 	bl	8011bc2 <USBD_CtlPrepareRx>
      break;
 80105be:	e072      	b.n	80106a6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105c6:	689b      	ldr	r3, [r3, #8]
 80105c8:	683a      	ldr	r2, [r7, #0]
 80105ca:	7850      	ldrb	r0, [r2, #1]
 80105cc:	2200      	movs	r2, #0
 80105ce:	6839      	ldr	r1, [r7, #0]
 80105d0:	4798      	blx	r3
      break;
 80105d2:	e068      	b.n	80106a6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	785b      	ldrb	r3, [r3, #1]
 80105d8:	2b0b      	cmp	r3, #11
 80105da:	d852      	bhi.n	8010682 <USBD_CDC_Setup+0x162>
 80105dc:	a201      	add	r2, pc, #4	; (adr r2, 80105e4 <USBD_CDC_Setup+0xc4>)
 80105de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105e2:	bf00      	nop
 80105e4:	08010615 	.word	0x08010615
 80105e8:	08010691 	.word	0x08010691
 80105ec:	08010683 	.word	0x08010683
 80105f0:	08010683 	.word	0x08010683
 80105f4:	08010683 	.word	0x08010683
 80105f8:	08010683 	.word	0x08010683
 80105fc:	08010683 	.word	0x08010683
 8010600:	08010683 	.word	0x08010683
 8010604:	08010683 	.word	0x08010683
 8010608:	08010683 	.word	0x08010683
 801060c:	0801063f 	.word	0x0801063f
 8010610:	08010669 	.word	0x08010669
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801061a:	b2db      	uxtb	r3, r3
 801061c:	2b03      	cmp	r3, #3
 801061e:	d107      	bne.n	8010630 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010620:	f107 030a 	add.w	r3, r7, #10
 8010624:	2202      	movs	r2, #2
 8010626:	4619      	mov	r1, r3
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f001 fa9e 	bl	8011b6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801062e:	e032      	b.n	8010696 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010630:	6839      	ldr	r1, [r7, #0]
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f001 fa28 	bl	8011a88 <USBD_CtlError>
            ret = USBD_FAIL;
 8010638:	2303      	movs	r3, #3
 801063a:	75fb      	strb	r3, [r7, #23]
          break;
 801063c:	e02b      	b.n	8010696 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010644:	b2db      	uxtb	r3, r3
 8010646:	2b03      	cmp	r3, #3
 8010648:	d107      	bne.n	801065a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801064a:	f107 030d 	add.w	r3, r7, #13
 801064e:	2201      	movs	r2, #1
 8010650:	4619      	mov	r1, r3
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f001 fa89 	bl	8011b6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010658:	e01d      	b.n	8010696 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801065a:	6839      	ldr	r1, [r7, #0]
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f001 fa13 	bl	8011a88 <USBD_CtlError>
            ret = USBD_FAIL;
 8010662:	2303      	movs	r3, #3
 8010664:	75fb      	strb	r3, [r7, #23]
          break;
 8010666:	e016      	b.n	8010696 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801066e:	b2db      	uxtb	r3, r3
 8010670:	2b03      	cmp	r3, #3
 8010672:	d00f      	beq.n	8010694 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8010674:	6839      	ldr	r1, [r7, #0]
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f001 fa06 	bl	8011a88 <USBD_CtlError>
            ret = USBD_FAIL;
 801067c:	2303      	movs	r3, #3
 801067e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010680:	e008      	b.n	8010694 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010682:	6839      	ldr	r1, [r7, #0]
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f001 f9ff 	bl	8011a88 <USBD_CtlError>
          ret = USBD_FAIL;
 801068a:	2303      	movs	r3, #3
 801068c:	75fb      	strb	r3, [r7, #23]
          break;
 801068e:	e002      	b.n	8010696 <USBD_CDC_Setup+0x176>
          break;
 8010690:	bf00      	nop
 8010692:	e008      	b.n	80106a6 <USBD_CDC_Setup+0x186>
          break;
 8010694:	bf00      	nop
      }
      break;
 8010696:	e006      	b.n	80106a6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8010698:	6839      	ldr	r1, [r7, #0]
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f001 f9f4 	bl	8011a88 <USBD_CtlError>
      ret = USBD_FAIL;
 80106a0:	2303      	movs	r3, #3
 80106a2:	75fb      	strb	r3, [r7, #23]
      break;
 80106a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80106a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3718      	adds	r7, #24
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	460b      	mov	r3, r1
 80106ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80106c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d101      	bne.n	80106d2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80106ce:	2303      	movs	r3, #3
 80106d0:	e04f      	b.n	8010772 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80106da:	78fa      	ldrb	r2, [r7, #3]
 80106dc:	6879      	ldr	r1, [r7, #4]
 80106de:	4613      	mov	r3, r2
 80106e0:	009b      	lsls	r3, r3, #2
 80106e2:	4413      	add	r3, r2
 80106e4:	009b      	lsls	r3, r3, #2
 80106e6:	440b      	add	r3, r1
 80106e8:	3318      	adds	r3, #24
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d029      	beq.n	8010744 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80106f0:	78fa      	ldrb	r2, [r7, #3]
 80106f2:	6879      	ldr	r1, [r7, #4]
 80106f4:	4613      	mov	r3, r2
 80106f6:	009b      	lsls	r3, r3, #2
 80106f8:	4413      	add	r3, r2
 80106fa:	009b      	lsls	r3, r3, #2
 80106fc:	440b      	add	r3, r1
 80106fe:	3318      	adds	r3, #24
 8010700:	681a      	ldr	r2, [r3, #0]
 8010702:	78f9      	ldrb	r1, [r7, #3]
 8010704:	68f8      	ldr	r0, [r7, #12]
 8010706:	460b      	mov	r3, r1
 8010708:	00db      	lsls	r3, r3, #3
 801070a:	1a5b      	subs	r3, r3, r1
 801070c:	009b      	lsls	r3, r3, #2
 801070e:	4403      	add	r3, r0
 8010710:	3344      	adds	r3, #68	; 0x44
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	fbb2 f1f3 	udiv	r1, r2, r3
 8010718:	fb03 f301 	mul.w	r3, r3, r1
 801071c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801071e:	2b00      	cmp	r3, #0
 8010720:	d110      	bne.n	8010744 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010722:	78fa      	ldrb	r2, [r7, #3]
 8010724:	6879      	ldr	r1, [r7, #4]
 8010726:	4613      	mov	r3, r2
 8010728:	009b      	lsls	r3, r3, #2
 801072a:	4413      	add	r3, r2
 801072c:	009b      	lsls	r3, r3, #2
 801072e:	440b      	add	r3, r1
 8010730:	3318      	adds	r3, #24
 8010732:	2200      	movs	r2, #0
 8010734:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010736:	78f9      	ldrb	r1, [r7, #3]
 8010738:	2300      	movs	r3, #0
 801073a:	2200      	movs	r2, #0
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f008 f95e 	bl	80189fe <USBD_LL_Transmit>
 8010742:	e015      	b.n	8010770 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	2200      	movs	r2, #0
 8010748:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010752:	691b      	ldr	r3, [r3, #16]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d00b      	beq.n	8010770 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801075e:	691b      	ldr	r3, [r3, #16]
 8010760:	68ba      	ldr	r2, [r7, #8]
 8010762:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010766:	68ba      	ldr	r2, [r7, #8]
 8010768:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801076c:	78fa      	ldrb	r2, [r7, #3]
 801076e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010770:	2300      	movs	r3, #0
}
 8010772:	4618      	mov	r0, r3
 8010774:	3710      	adds	r7, #16
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}

0801077a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801077a:	b580      	push	{r7, lr}
 801077c:	b084      	sub	sp, #16
 801077e:	af00      	add	r7, sp, #0
 8010780:	6078      	str	r0, [r7, #4]
 8010782:	460b      	mov	r3, r1
 8010784:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801078c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010794:	2b00      	cmp	r3, #0
 8010796:	d101      	bne.n	801079c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010798:	2303      	movs	r3, #3
 801079a:	e015      	b.n	80107c8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801079c:	78fb      	ldrb	r3, [r7, #3]
 801079e:	4619      	mov	r1, r3
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f008 f96e 	bl	8018a82 <USBD_LL_GetRxDataSize>
 80107a6:	4602      	mov	r2, r0
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107b4:	68db      	ldr	r3, [r3, #12]
 80107b6:	68fa      	ldr	r2, [r7, #12]
 80107b8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80107bc:	68fa      	ldr	r2, [r7, #12]
 80107be:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80107c2:	4611      	mov	r1, r2
 80107c4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80107c6:	2300      	movs	r3, #0
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3710      	adds	r7, #16
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b084      	sub	sp, #16
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d101      	bne.n	80107ea <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80107e6:	2303      	movs	r3, #3
 80107e8:	e01b      	b.n	8010822 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d015      	beq.n	8010820 <USBD_CDC_EP0_RxReady+0x50>
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80107fa:	2bff      	cmp	r3, #255	; 0xff
 80107fc:	d010      	beq.n	8010820 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010804:	689b      	ldr	r3, [r3, #8]
 8010806:	68fa      	ldr	r2, [r7, #12]
 8010808:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801080c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801080e:	68fa      	ldr	r2, [r7, #12]
 8010810:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010814:	b292      	uxth	r2, r2
 8010816:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	22ff      	movs	r2, #255	; 0xff
 801081c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010820:	2300      	movs	r3, #0
}
 8010822:	4618      	mov	r0, r3
 8010824:	3710      	adds	r7, #16
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}
	...

0801082c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2243      	movs	r2, #67	; 0x43
 8010838:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801083a:	4b03      	ldr	r3, [pc, #12]	; (8010848 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801083c:	4618      	mov	r0, r3
 801083e:	370c      	adds	r7, #12
 8010840:	46bd      	mov	sp, r7
 8010842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010846:	4770      	bx	lr
 8010848:	200000e0 	.word	0x200000e0

0801084c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801084c:	b480      	push	{r7}
 801084e:	b083      	sub	sp, #12
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2243      	movs	r2, #67	; 0x43
 8010858:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801085a:	4b03      	ldr	r3, [pc, #12]	; (8010868 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801085c:	4618      	mov	r0, r3
 801085e:	370c      	adds	r7, #12
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr
 8010868:	2000009c 	.word	0x2000009c

0801086c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801086c:	b480      	push	{r7}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2243      	movs	r2, #67	; 0x43
 8010878:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801087a:	4b03      	ldr	r3, [pc, #12]	; (8010888 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801087c:	4618      	mov	r0, r3
 801087e:	370c      	adds	r7, #12
 8010880:	46bd      	mov	sp, r7
 8010882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010886:	4770      	bx	lr
 8010888:	20000124 	.word	0x20000124

0801088c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801088c:	b480      	push	{r7}
 801088e:	b083      	sub	sp, #12
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	220a      	movs	r2, #10
 8010898:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801089a:	4b03      	ldr	r3, [pc, #12]	; (80108a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801089c:	4618      	mov	r0, r3
 801089e:	370c      	adds	r7, #12
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr
 80108a8:	20000058 	.word	0x20000058

080108ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b083      	sub	sp, #12
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d101      	bne.n	80108c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80108bc:	2303      	movs	r3, #3
 80108be:	e004      	b.n	80108ca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80108c8:	2300      	movs	r3, #0
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	370c      	adds	r7, #12
 80108ce:	46bd      	mov	sp, r7
 80108d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d4:	4770      	bx	lr

080108d6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80108d6:	b480      	push	{r7}
 80108d8:	b087      	sub	sp, #28
 80108da:	af00      	add	r7, sp, #0
 80108dc:	60f8      	str	r0, [r7, #12]
 80108de:	60b9      	str	r1, [r7, #8]
 80108e0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108e8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d101      	bne.n	80108f4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80108f0:	2303      	movs	r3, #3
 80108f2:	e008      	b.n	8010906 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	68ba      	ldr	r2, [r7, #8]
 80108f8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	687a      	ldr	r2, [r7, #4]
 8010900:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010904:	2300      	movs	r3, #0
}
 8010906:	4618      	mov	r0, r3
 8010908:	371c      	adds	r7, #28
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr

08010912 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010912:	b480      	push	{r7}
 8010914:	b085      	sub	sp, #20
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
 801091a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010922:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d101      	bne.n	801092e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801092a:	2303      	movs	r3, #3
 801092c:	e004      	b.n	8010938 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	683a      	ldr	r2, [r7, #0]
 8010932:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010936:	2300      	movs	r3, #0
}
 8010938:	4618      	mov	r0, r3
 801093a:	3714      	adds	r7, #20
 801093c:	46bd      	mov	sp, r7
 801093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010942:	4770      	bx	lr

08010944 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010952:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801095a:	2b00      	cmp	r3, #0
 801095c:	d101      	bne.n	8010962 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801095e:	2303      	movs	r3, #3
 8010960:	e016      	b.n	8010990 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	7c1b      	ldrb	r3, [r3, #16]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d109      	bne.n	801097e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010974:	2101      	movs	r1, #1
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f008 f862 	bl	8018a40 <USBD_LL_PrepareReceive>
 801097c:	e007      	b.n	801098e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010984:	2340      	movs	r3, #64	; 0x40
 8010986:	2101      	movs	r1, #1
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	f008 f859 	bl	8018a40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801098e:	2300      	movs	r3, #0
}
 8010990:	4618      	mov	r0, r3
 8010992:	3710      	adds	r7, #16
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}

08010998 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b086      	sub	sp, #24
 801099c:	af00      	add	r7, sp, #0
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	4613      	mov	r3, r2
 80109a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d101      	bne.n	80109b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80109ac:	2303      	movs	r3, #3
 80109ae:	e01f      	b.n	80109f0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2200      	movs	r2, #0
 80109b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2200      	movs	r2, #0
 80109bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	2200      	movs	r2, #0
 80109c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d003      	beq.n	80109d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	68ba      	ldr	r2, [r7, #8]
 80109d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2201      	movs	r2, #1
 80109da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	79fa      	ldrb	r2, [r7, #7]
 80109e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80109e4:	68f8      	ldr	r0, [r7, #12]
 80109e6:	f007 fed5 	bl	8018794 <USBD_LL_Init>
 80109ea:	4603      	mov	r3, r0
 80109ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 80109ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3718      	adds	r7, #24
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b084      	sub	sp, #16
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010a02:	2300      	movs	r3, #0
 8010a04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d101      	bne.n	8010a10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010a0c:	2303      	movs	r3, #3
 8010a0e:	e016      	b.n	8010a3e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	683a      	ldr	r2, [r7, #0]
 8010a14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d00b      	beq.n	8010a3c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a2c:	f107 020e 	add.w	r2, r7, #14
 8010a30:	4610      	mov	r0, r2
 8010a32:	4798      	blx	r3
 8010a34:	4602      	mov	r2, r0
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8010a3c:	2300      	movs	r3, #0
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3710      	adds	r7, #16
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}

08010a46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010a46:	b580      	push	{r7, lr}
 8010a48:	b082      	sub	sp, #8
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f007 feec 	bl	801882c <USBD_LL_Start>
 8010a54:	4603      	mov	r3, r0
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3708      	adds	r7, #8
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}

08010a5e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010a5e:	b480      	push	{r7}
 8010a60:	b083      	sub	sp, #12
 8010a62:	af00      	add	r7, sp, #0
 8010a64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010a66:	2300      	movs	r3, #0
}
 8010a68:	4618      	mov	r0, r3
 8010a6a:	370c      	adds	r7, #12
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a72:	4770      	bx	lr

08010a74 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b084      	sub	sp, #16
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	460b      	mov	r3, r1
 8010a7e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010a80:	2303      	movs	r3, #3
 8010a82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d009      	beq.n	8010aa2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	78fa      	ldrb	r2, [r7, #3]
 8010a98:	4611      	mov	r1, r2
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	4798      	blx	r3
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3710      	adds	r7, #16
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}

08010aac <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b082      	sub	sp, #8
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	460b      	mov	r3, r1
 8010ab6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d007      	beq.n	8010ad2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	78fa      	ldrb	r2, [r7, #3]
 8010acc:	4611      	mov	r1, r2
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	4798      	blx	r3
  }

  return USBD_OK;
 8010ad2:	2300      	movs	r3, #0
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3708      	adds	r7, #8
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}

08010adc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b084      	sub	sp, #16
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010aec:	6839      	ldr	r1, [r7, #0]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f000 ff90 	bl	8011a14 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2201      	movs	r2, #1
 8010af8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010b02:	461a      	mov	r2, r3
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010b10:	f003 031f 	and.w	r3, r3, #31
 8010b14:	2b02      	cmp	r3, #2
 8010b16:	d01a      	beq.n	8010b4e <USBD_LL_SetupStage+0x72>
 8010b18:	2b02      	cmp	r3, #2
 8010b1a:	d822      	bhi.n	8010b62 <USBD_LL_SetupStage+0x86>
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d002      	beq.n	8010b26 <USBD_LL_SetupStage+0x4a>
 8010b20:	2b01      	cmp	r3, #1
 8010b22:	d00a      	beq.n	8010b3a <USBD_LL_SetupStage+0x5e>
 8010b24:	e01d      	b.n	8010b62 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f000 fa62 	bl	8010ff8 <USBD_StdDevReq>
 8010b34:	4603      	mov	r3, r0
 8010b36:	73fb      	strb	r3, [r7, #15]
      break;
 8010b38:	e020      	b.n	8010b7c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b40:	4619      	mov	r1, r3
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f000 fac6 	bl	80110d4 <USBD_StdItfReq>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8010b4c:	e016      	b.n	8010b7c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b54:	4619      	mov	r1, r3
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f000 fb05 	bl	8011166 <USBD_StdEPReq>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8010b60:	e00c      	b.n	8010b7c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010b68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010b6c:	b2db      	uxtb	r3, r3
 8010b6e:	4619      	mov	r1, r3
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f007 febb 	bl	80188ec <USBD_LL_StallEP>
 8010b76:	4603      	mov	r3, r0
 8010b78:	73fb      	strb	r3, [r7, #15]
      break;
 8010b7a:	bf00      	nop
  }

  return ret;
 8010b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3710      	adds	r7, #16
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b086      	sub	sp, #24
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	60f8      	str	r0, [r7, #12]
 8010b8e:	460b      	mov	r3, r1
 8010b90:	607a      	str	r2, [r7, #4]
 8010b92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010b94:	7afb      	ldrb	r3, [r7, #11]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d138      	bne.n	8010c0c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010ba0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010ba8:	2b03      	cmp	r3, #3
 8010baa:	d14a      	bne.n	8010c42 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010bac:	693b      	ldr	r3, [r7, #16]
 8010bae:	689a      	ldr	r2, [r3, #8]
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	68db      	ldr	r3, [r3, #12]
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d913      	bls.n	8010be0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	689a      	ldr	r2, [r3, #8]
 8010bbc:	693b      	ldr	r3, [r7, #16]
 8010bbe:	68db      	ldr	r3, [r3, #12]
 8010bc0:	1ad2      	subs	r2, r2, r3
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	68da      	ldr	r2, [r3, #12]
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	689b      	ldr	r3, [r3, #8]
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	bf28      	it	cs
 8010bd2:	4613      	movcs	r3, r2
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	6879      	ldr	r1, [r7, #4]
 8010bd8:	68f8      	ldr	r0, [r7, #12]
 8010bda:	f001 f80f 	bl	8011bfc <USBD_CtlContinueRx>
 8010bde:	e030      	b.n	8010c42 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010be6:	b2db      	uxtb	r3, r3
 8010be8:	2b03      	cmp	r3, #3
 8010bea:	d10b      	bne.n	8010c04 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bf2:	691b      	ldr	r3, [r3, #16]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d005      	beq.n	8010c04 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bfe:	691b      	ldr	r3, [r3, #16]
 8010c00:	68f8      	ldr	r0, [r7, #12]
 8010c02:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010c04:	68f8      	ldr	r0, [r7, #12]
 8010c06:	f001 f80a 	bl	8011c1e <USBD_CtlSendStatus>
 8010c0a:	e01a      	b.n	8010c42 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	2b03      	cmp	r3, #3
 8010c16:	d114      	bne.n	8010c42 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c1e:	699b      	ldr	r3, [r3, #24]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d00e      	beq.n	8010c42 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c2a:	699b      	ldr	r3, [r3, #24]
 8010c2c:	7afa      	ldrb	r2, [r7, #11]
 8010c2e:	4611      	mov	r1, r2
 8010c30:	68f8      	ldr	r0, [r7, #12]
 8010c32:	4798      	blx	r3
 8010c34:	4603      	mov	r3, r0
 8010c36:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010c38:	7dfb      	ldrb	r3, [r7, #23]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d001      	beq.n	8010c42 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8010c3e:	7dfb      	ldrb	r3, [r7, #23]
 8010c40:	e000      	b.n	8010c44 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010c42:	2300      	movs	r3, #0
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	3718      	adds	r7, #24
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b086      	sub	sp, #24
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	60f8      	str	r0, [r7, #12]
 8010c54:	460b      	mov	r3, r1
 8010c56:	607a      	str	r2, [r7, #4]
 8010c58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010c5a:	7afb      	ldrb	r3, [r7, #11]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d16b      	bne.n	8010d38 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	3314      	adds	r3, #20
 8010c64:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010c6c:	2b02      	cmp	r3, #2
 8010c6e:	d156      	bne.n	8010d1e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	689a      	ldr	r2, [r3, #8]
 8010c74:	693b      	ldr	r3, [r7, #16]
 8010c76:	68db      	ldr	r3, [r3, #12]
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d914      	bls.n	8010ca6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	689a      	ldr	r2, [r3, #8]
 8010c80:	693b      	ldr	r3, [r7, #16]
 8010c82:	68db      	ldr	r3, [r3, #12]
 8010c84:	1ad2      	subs	r2, r2, r3
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	689b      	ldr	r3, [r3, #8]
 8010c8e:	461a      	mov	r2, r3
 8010c90:	6879      	ldr	r1, [r7, #4]
 8010c92:	68f8      	ldr	r0, [r7, #12]
 8010c94:	f000 ff84 	bl	8011ba0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010c98:	2300      	movs	r3, #0
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	2100      	movs	r1, #0
 8010c9e:	68f8      	ldr	r0, [r7, #12]
 8010ca0:	f007 fece 	bl	8018a40 <USBD_LL_PrepareReceive>
 8010ca4:	e03b      	b.n	8010d1e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	68da      	ldr	r2, [r3, #12]
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	689b      	ldr	r3, [r3, #8]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d11c      	bne.n	8010cec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	685a      	ldr	r2, [r3, #4]
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d316      	bcc.n	8010cec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	685a      	ldr	r2, [r3, #4]
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d20f      	bcs.n	8010cec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010ccc:	2200      	movs	r2, #0
 8010cce:	2100      	movs	r1, #0
 8010cd0:	68f8      	ldr	r0, [r7, #12]
 8010cd2:	f000 ff65 	bl	8011ba0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010cde:	2300      	movs	r3, #0
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	2100      	movs	r1, #0
 8010ce4:	68f8      	ldr	r0, [r7, #12]
 8010ce6:	f007 feab 	bl	8018a40 <USBD_LL_PrepareReceive>
 8010cea:	e018      	b.n	8010d1e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	2b03      	cmp	r3, #3
 8010cf6:	d10b      	bne.n	8010d10 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cfe:	68db      	ldr	r3, [r3, #12]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d005      	beq.n	8010d10 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d0a:	68db      	ldr	r3, [r3, #12]
 8010d0c:	68f8      	ldr	r0, [r7, #12]
 8010d0e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010d10:	2180      	movs	r1, #128	; 0x80
 8010d12:	68f8      	ldr	r0, [r7, #12]
 8010d14:	f007 fdea 	bl	80188ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010d18:	68f8      	ldr	r0, [r7, #12]
 8010d1a:	f000 ff93 	bl	8011c44 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010d24:	2b01      	cmp	r3, #1
 8010d26:	d122      	bne.n	8010d6e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010d28:	68f8      	ldr	r0, [r7, #12]
 8010d2a:	f7ff fe98 	bl	8010a5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	2200      	movs	r2, #0
 8010d32:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010d36:	e01a      	b.n	8010d6e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	2b03      	cmp	r3, #3
 8010d42:	d114      	bne.n	8010d6e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d4a:	695b      	ldr	r3, [r3, #20]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d00e      	beq.n	8010d6e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d56:	695b      	ldr	r3, [r3, #20]
 8010d58:	7afa      	ldrb	r2, [r7, #11]
 8010d5a:	4611      	mov	r1, r2
 8010d5c:	68f8      	ldr	r0, [r7, #12]
 8010d5e:	4798      	blx	r3
 8010d60:	4603      	mov	r3, r0
 8010d62:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010d64:	7dfb      	ldrb	r3, [r7, #23]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d001      	beq.n	8010d6e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010d6a:	7dfb      	ldrb	r3, [r7, #23]
 8010d6c:	e000      	b.n	8010d70 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8010d6e:	2300      	movs	r3, #0
}
 8010d70:	4618      	mov	r0, r3
 8010d72:	3718      	adds	r7, #24
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}

08010d78 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b082      	sub	sp, #8
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2201      	movs	r2, #1
 8010d84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2200      	movs	r2, #0
 8010d94:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d101      	bne.n	8010dac <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010da8:	2303      	movs	r3, #3
 8010daa:	e02f      	b.n	8010e0c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d00f      	beq.n	8010dd6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d009      	beq.n	8010dd6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	687a      	ldr	r2, [r7, #4]
 8010dcc:	6852      	ldr	r2, [r2, #4]
 8010dce:	b2d2      	uxtb	r2, r2
 8010dd0:	4611      	mov	r1, r2
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010dd6:	2340      	movs	r3, #64	; 0x40
 8010dd8:	2200      	movs	r2, #0
 8010dda:	2100      	movs	r1, #0
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f007 fd40 	bl	8018862 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2201      	movs	r2, #1
 8010de6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2240      	movs	r2, #64	; 0x40
 8010dee:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010df2:	2340      	movs	r3, #64	; 0x40
 8010df4:	2200      	movs	r2, #0
 8010df6:	2180      	movs	r1, #128	; 0x80
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f007 fd32 	bl	8018862 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2201      	movs	r2, #1
 8010e02:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2240      	movs	r2, #64	; 0x40
 8010e08:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010e0a:	2300      	movs	r3, #0
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3708      	adds	r7, #8
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}

08010e14 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
 8010e1c:	460b      	mov	r3, r1
 8010e1e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	78fa      	ldrb	r2, [r7, #3]
 8010e24:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010e26:	2300      	movs	r3, #0
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	370c      	adds	r7, #12
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e32:	4770      	bx	lr

08010e34 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e42:	b2da      	uxtb	r2, r3
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2204      	movs	r2, #4
 8010e4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010e52:	2300      	movs	r3, #0
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	370c      	adds	r7, #12
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5e:	4770      	bx	lr

08010e60 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010e60:	b480      	push	{r7}
 8010e62:	b083      	sub	sp, #12
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e6e:	b2db      	uxtb	r3, r3
 8010e70:	2b04      	cmp	r3, #4
 8010e72:	d106      	bne.n	8010e82 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010e7a:	b2da      	uxtb	r2, r3
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010e82:	2300      	movs	r3, #0
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	370c      	adds	r7, #12
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8e:	4770      	bx	lr

08010e90 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d101      	bne.n	8010ea6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010ea2:	2303      	movs	r3, #3
 8010ea4:	e012      	b.n	8010ecc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010eac:	b2db      	uxtb	r3, r3
 8010eae:	2b03      	cmp	r3, #3
 8010eb0:	d10b      	bne.n	8010eca <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010eb8:	69db      	ldr	r3, [r3, #28]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d005      	beq.n	8010eca <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ec4:	69db      	ldr	r3, [r3, #28]
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010eca:	2300      	movs	r3, #0
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3708      	adds	r7, #8
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	460b      	mov	r3, r1
 8010ede:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d101      	bne.n	8010eee <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010eea:	2303      	movs	r3, #3
 8010eec:	e014      	b.n	8010f18 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ef4:	b2db      	uxtb	r3, r3
 8010ef6:	2b03      	cmp	r3, #3
 8010ef8:	d10d      	bne.n	8010f16 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f00:	6a1b      	ldr	r3, [r3, #32]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d007      	beq.n	8010f16 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f0c:	6a1b      	ldr	r3, [r3, #32]
 8010f0e:	78fa      	ldrb	r2, [r7, #3]
 8010f10:	4611      	mov	r1, r2
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010f16:	2300      	movs	r3, #0
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3708      	adds	r7, #8
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}

08010f20 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	460b      	mov	r3, r1
 8010f2a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d101      	bne.n	8010f3a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010f36:	2303      	movs	r3, #3
 8010f38:	e014      	b.n	8010f64 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	2b03      	cmp	r3, #3
 8010f44:	d10d      	bne.n	8010f62 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d007      	beq.n	8010f62 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f5a:	78fa      	ldrb	r2, [r7, #3]
 8010f5c:	4611      	mov	r1, r2
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010f62:	2300      	movs	r3, #0
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	3708      	adds	r7, #8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}

08010f6c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010f6c:	b480      	push	{r7}
 8010f6e:	b083      	sub	sp, #12
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f74:	2300      	movs	r3, #0
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	370c      	adds	r7, #12
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f80:	4770      	bx	lr

08010f82 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010f82:	b580      	push	{r7, lr}
 8010f84:	b082      	sub	sp, #8
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d009      	beq.n	8010fb0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fa2:	685b      	ldr	r3, [r3, #4]
 8010fa4:	687a      	ldr	r2, [r7, #4]
 8010fa6:	6852      	ldr	r2, [r2, #4]
 8010fa8:	b2d2      	uxtb	r2, r2
 8010faa:	4611      	mov	r1, r2
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	4798      	blx	r3
  }

  return USBD_OK;
 8010fb0:	2300      	movs	r3, #0
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3708      	adds	r7, #8
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}

08010fba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010fba:	b480      	push	{r7}
 8010fbc:	b087      	sub	sp, #28
 8010fbe:	af00      	add	r7, sp, #0
 8010fc0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	3301      	adds	r3, #1
 8010fd0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010fd8:	8a3b      	ldrh	r3, [r7, #16]
 8010fda:	021b      	lsls	r3, r3, #8
 8010fdc:	b21a      	sxth	r2, r3
 8010fde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010fe2:	4313      	orrs	r3, r2
 8010fe4:	b21b      	sxth	r3, r3
 8010fe6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010fe8:	89fb      	ldrh	r3, [r7, #14]
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	371c      	adds	r7, #28
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff4:	4770      	bx	lr
	...

08010ff8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b084      	sub	sp, #16
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011002:	2300      	movs	r3, #0
 8011004:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801100e:	2b40      	cmp	r3, #64	; 0x40
 8011010:	d005      	beq.n	801101e <USBD_StdDevReq+0x26>
 8011012:	2b40      	cmp	r3, #64	; 0x40
 8011014:	d853      	bhi.n	80110be <USBD_StdDevReq+0xc6>
 8011016:	2b00      	cmp	r3, #0
 8011018:	d00b      	beq.n	8011032 <USBD_StdDevReq+0x3a>
 801101a:	2b20      	cmp	r3, #32
 801101c:	d14f      	bne.n	80110be <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011024:	689b      	ldr	r3, [r3, #8]
 8011026:	6839      	ldr	r1, [r7, #0]
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	4798      	blx	r3
 801102c:	4603      	mov	r3, r0
 801102e:	73fb      	strb	r3, [r7, #15]
      break;
 8011030:	e04a      	b.n	80110c8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	785b      	ldrb	r3, [r3, #1]
 8011036:	2b09      	cmp	r3, #9
 8011038:	d83b      	bhi.n	80110b2 <USBD_StdDevReq+0xba>
 801103a:	a201      	add	r2, pc, #4	; (adr r2, 8011040 <USBD_StdDevReq+0x48>)
 801103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011040:	08011095 	.word	0x08011095
 8011044:	080110a9 	.word	0x080110a9
 8011048:	080110b3 	.word	0x080110b3
 801104c:	0801109f 	.word	0x0801109f
 8011050:	080110b3 	.word	0x080110b3
 8011054:	08011073 	.word	0x08011073
 8011058:	08011069 	.word	0x08011069
 801105c:	080110b3 	.word	0x080110b3
 8011060:	0801108b 	.word	0x0801108b
 8011064:	0801107d 	.word	0x0801107d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011068:	6839      	ldr	r1, [r7, #0]
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f000 f9de 	bl	801142c <USBD_GetDescriptor>
          break;
 8011070:	e024      	b.n	80110bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011072:	6839      	ldr	r1, [r7, #0]
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f000 fb43 	bl	8011700 <USBD_SetAddress>
          break;
 801107a:	e01f      	b.n	80110bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801107c:	6839      	ldr	r1, [r7, #0]
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f000 fb82 	bl	8011788 <USBD_SetConfig>
 8011084:	4603      	mov	r3, r0
 8011086:	73fb      	strb	r3, [r7, #15]
          break;
 8011088:	e018      	b.n	80110bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801108a:	6839      	ldr	r1, [r7, #0]
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f000 fc21 	bl	80118d4 <USBD_GetConfig>
          break;
 8011092:	e013      	b.n	80110bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011094:	6839      	ldr	r1, [r7, #0]
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f000 fc52 	bl	8011940 <USBD_GetStatus>
          break;
 801109c:	e00e      	b.n	80110bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801109e:	6839      	ldr	r1, [r7, #0]
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f000 fc81 	bl	80119a8 <USBD_SetFeature>
          break;
 80110a6:	e009      	b.n	80110bc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80110a8:	6839      	ldr	r1, [r7, #0]
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f000 fc90 	bl	80119d0 <USBD_ClrFeature>
          break;
 80110b0:	e004      	b.n	80110bc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80110b2:	6839      	ldr	r1, [r7, #0]
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f000 fce7 	bl	8011a88 <USBD_CtlError>
          break;
 80110ba:	bf00      	nop
      }
      break;
 80110bc:	e004      	b.n	80110c8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80110be:	6839      	ldr	r1, [r7, #0]
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f000 fce1 	bl	8011a88 <USBD_CtlError>
      break;
 80110c6:	bf00      	nop
  }

  return ret;
 80110c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3710      	adds	r7, #16
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop

080110d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b084      	sub	sp, #16
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80110de:	2300      	movs	r3, #0
 80110e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	781b      	ldrb	r3, [r3, #0]
 80110e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80110ea:	2b40      	cmp	r3, #64	; 0x40
 80110ec:	d005      	beq.n	80110fa <USBD_StdItfReq+0x26>
 80110ee:	2b40      	cmp	r3, #64	; 0x40
 80110f0:	d82f      	bhi.n	8011152 <USBD_StdItfReq+0x7e>
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d001      	beq.n	80110fa <USBD_StdItfReq+0x26>
 80110f6:	2b20      	cmp	r3, #32
 80110f8:	d12b      	bne.n	8011152 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011100:	b2db      	uxtb	r3, r3
 8011102:	3b01      	subs	r3, #1
 8011104:	2b02      	cmp	r3, #2
 8011106:	d81d      	bhi.n	8011144 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	889b      	ldrh	r3, [r3, #4]
 801110c:	b2db      	uxtb	r3, r3
 801110e:	2b01      	cmp	r3, #1
 8011110:	d813      	bhi.n	801113a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011118:	689b      	ldr	r3, [r3, #8]
 801111a:	6839      	ldr	r1, [r7, #0]
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	4798      	blx	r3
 8011120:	4603      	mov	r3, r0
 8011122:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	88db      	ldrh	r3, [r3, #6]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d110      	bne.n	801114e <USBD_StdItfReq+0x7a>
 801112c:	7bfb      	ldrb	r3, [r7, #15]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d10d      	bne.n	801114e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f000 fd73 	bl	8011c1e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011138:	e009      	b.n	801114e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801113a:	6839      	ldr	r1, [r7, #0]
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f000 fca3 	bl	8011a88 <USBD_CtlError>
          break;
 8011142:	e004      	b.n	801114e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8011144:	6839      	ldr	r1, [r7, #0]
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f000 fc9e 	bl	8011a88 <USBD_CtlError>
          break;
 801114c:	e000      	b.n	8011150 <USBD_StdItfReq+0x7c>
          break;
 801114e:	bf00      	nop
      }
      break;
 8011150:	e004      	b.n	801115c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8011152:	6839      	ldr	r1, [r7, #0]
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f000 fc97 	bl	8011a88 <USBD_CtlError>
      break;
 801115a:	bf00      	nop
  }

  return ret;
 801115c:	7bfb      	ldrb	r3, [r7, #15]
}
 801115e:	4618      	mov	r0, r3
 8011160:	3710      	adds	r7, #16
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}

08011166 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011166:	b580      	push	{r7, lr}
 8011168:	b084      	sub	sp, #16
 801116a:	af00      	add	r7, sp, #0
 801116c:	6078      	str	r0, [r7, #4]
 801116e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011170:	2300      	movs	r3, #0
 8011172:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	889b      	ldrh	r3, [r3, #4]
 8011178:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011182:	2b40      	cmp	r3, #64	; 0x40
 8011184:	d007      	beq.n	8011196 <USBD_StdEPReq+0x30>
 8011186:	2b40      	cmp	r3, #64	; 0x40
 8011188:	f200 8145 	bhi.w	8011416 <USBD_StdEPReq+0x2b0>
 801118c:	2b00      	cmp	r3, #0
 801118e:	d00c      	beq.n	80111aa <USBD_StdEPReq+0x44>
 8011190:	2b20      	cmp	r3, #32
 8011192:	f040 8140 	bne.w	8011416 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801119c:	689b      	ldr	r3, [r3, #8]
 801119e:	6839      	ldr	r1, [r7, #0]
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	4798      	blx	r3
 80111a4:	4603      	mov	r3, r0
 80111a6:	73fb      	strb	r3, [r7, #15]
      break;
 80111a8:	e13a      	b.n	8011420 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	785b      	ldrb	r3, [r3, #1]
 80111ae:	2b03      	cmp	r3, #3
 80111b0:	d007      	beq.n	80111c2 <USBD_StdEPReq+0x5c>
 80111b2:	2b03      	cmp	r3, #3
 80111b4:	f300 8129 	bgt.w	801140a <USBD_StdEPReq+0x2a4>
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d07f      	beq.n	80112bc <USBD_StdEPReq+0x156>
 80111bc:	2b01      	cmp	r3, #1
 80111be:	d03c      	beq.n	801123a <USBD_StdEPReq+0xd4>
 80111c0:	e123      	b.n	801140a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	2b02      	cmp	r3, #2
 80111cc:	d002      	beq.n	80111d4 <USBD_StdEPReq+0x6e>
 80111ce:	2b03      	cmp	r3, #3
 80111d0:	d016      	beq.n	8011200 <USBD_StdEPReq+0x9a>
 80111d2:	e02c      	b.n	801122e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80111d4:	7bbb      	ldrb	r3, [r7, #14]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d00d      	beq.n	80111f6 <USBD_StdEPReq+0x90>
 80111da:	7bbb      	ldrb	r3, [r7, #14]
 80111dc:	2b80      	cmp	r3, #128	; 0x80
 80111de:	d00a      	beq.n	80111f6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80111e0:	7bbb      	ldrb	r3, [r7, #14]
 80111e2:	4619      	mov	r1, r3
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f007 fb81 	bl	80188ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80111ea:	2180      	movs	r1, #128	; 0x80
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f007 fb7d 	bl	80188ec <USBD_LL_StallEP>
 80111f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80111f4:	e020      	b.n	8011238 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80111f6:	6839      	ldr	r1, [r7, #0]
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f000 fc45 	bl	8011a88 <USBD_CtlError>
              break;
 80111fe:	e01b      	b.n	8011238 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	885b      	ldrh	r3, [r3, #2]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d10e      	bne.n	8011226 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011208:	7bbb      	ldrb	r3, [r7, #14]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d00b      	beq.n	8011226 <USBD_StdEPReq+0xc0>
 801120e:	7bbb      	ldrb	r3, [r7, #14]
 8011210:	2b80      	cmp	r3, #128	; 0x80
 8011212:	d008      	beq.n	8011226 <USBD_StdEPReq+0xc0>
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	88db      	ldrh	r3, [r3, #6]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d104      	bne.n	8011226 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801121c:	7bbb      	ldrb	r3, [r7, #14]
 801121e:	4619      	mov	r1, r3
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f007 fb63 	bl	80188ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f000 fcf9 	bl	8011c1e <USBD_CtlSendStatus>

              break;
 801122c:	e004      	b.n	8011238 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801122e:	6839      	ldr	r1, [r7, #0]
 8011230:	6878      	ldr	r0, [r7, #4]
 8011232:	f000 fc29 	bl	8011a88 <USBD_CtlError>
              break;
 8011236:	bf00      	nop
          }
          break;
 8011238:	e0ec      	b.n	8011414 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011240:	b2db      	uxtb	r3, r3
 8011242:	2b02      	cmp	r3, #2
 8011244:	d002      	beq.n	801124c <USBD_StdEPReq+0xe6>
 8011246:	2b03      	cmp	r3, #3
 8011248:	d016      	beq.n	8011278 <USBD_StdEPReq+0x112>
 801124a:	e030      	b.n	80112ae <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801124c:	7bbb      	ldrb	r3, [r7, #14]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d00d      	beq.n	801126e <USBD_StdEPReq+0x108>
 8011252:	7bbb      	ldrb	r3, [r7, #14]
 8011254:	2b80      	cmp	r3, #128	; 0x80
 8011256:	d00a      	beq.n	801126e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011258:	7bbb      	ldrb	r3, [r7, #14]
 801125a:	4619      	mov	r1, r3
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f007 fb45 	bl	80188ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011262:	2180      	movs	r1, #128	; 0x80
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f007 fb41 	bl	80188ec <USBD_LL_StallEP>
 801126a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801126c:	e025      	b.n	80112ba <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801126e:	6839      	ldr	r1, [r7, #0]
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f000 fc09 	bl	8011a88 <USBD_CtlError>
              break;
 8011276:	e020      	b.n	80112ba <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	885b      	ldrh	r3, [r3, #2]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d11b      	bne.n	80112b8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011280:	7bbb      	ldrb	r3, [r7, #14]
 8011282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011286:	2b00      	cmp	r3, #0
 8011288:	d004      	beq.n	8011294 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801128a:	7bbb      	ldrb	r3, [r7, #14]
 801128c:	4619      	mov	r1, r3
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f007 fb4b 	bl	801892a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f000 fcc2 	bl	8011c1e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112a0:	689b      	ldr	r3, [r3, #8]
 80112a2:	6839      	ldr	r1, [r7, #0]
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	4798      	blx	r3
 80112a8:	4603      	mov	r3, r0
 80112aa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80112ac:	e004      	b.n	80112b8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80112ae:	6839      	ldr	r1, [r7, #0]
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f000 fbe9 	bl	8011a88 <USBD_CtlError>
              break;
 80112b6:	e000      	b.n	80112ba <USBD_StdEPReq+0x154>
              break;
 80112b8:	bf00      	nop
          }
          break;
 80112ba:	e0ab      	b.n	8011414 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112c2:	b2db      	uxtb	r3, r3
 80112c4:	2b02      	cmp	r3, #2
 80112c6:	d002      	beq.n	80112ce <USBD_StdEPReq+0x168>
 80112c8:	2b03      	cmp	r3, #3
 80112ca:	d032      	beq.n	8011332 <USBD_StdEPReq+0x1cc>
 80112cc:	e097      	b.n	80113fe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80112ce:	7bbb      	ldrb	r3, [r7, #14]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d007      	beq.n	80112e4 <USBD_StdEPReq+0x17e>
 80112d4:	7bbb      	ldrb	r3, [r7, #14]
 80112d6:	2b80      	cmp	r3, #128	; 0x80
 80112d8:	d004      	beq.n	80112e4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80112da:	6839      	ldr	r1, [r7, #0]
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f000 fbd3 	bl	8011a88 <USBD_CtlError>
                break;
 80112e2:	e091      	b.n	8011408 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80112e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	da0b      	bge.n	8011304 <USBD_StdEPReq+0x19e>
 80112ec:	7bbb      	ldrb	r3, [r7, #14]
 80112ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80112f2:	4613      	mov	r3, r2
 80112f4:	009b      	lsls	r3, r3, #2
 80112f6:	4413      	add	r3, r2
 80112f8:	009b      	lsls	r3, r3, #2
 80112fa:	3310      	adds	r3, #16
 80112fc:	687a      	ldr	r2, [r7, #4]
 80112fe:	4413      	add	r3, r2
 8011300:	3304      	adds	r3, #4
 8011302:	e00b      	b.n	801131c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011304:	7bbb      	ldrb	r3, [r7, #14]
 8011306:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801130a:	4613      	mov	r3, r2
 801130c:	009b      	lsls	r3, r3, #2
 801130e:	4413      	add	r3, r2
 8011310:	009b      	lsls	r3, r3, #2
 8011312:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011316:	687a      	ldr	r2, [r7, #4]
 8011318:	4413      	add	r3, r2
 801131a:	3304      	adds	r3, #4
 801131c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	2200      	movs	r2, #0
 8011322:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	2202      	movs	r2, #2
 8011328:	4619      	mov	r1, r3
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f000 fc1d 	bl	8011b6a <USBD_CtlSendData>
              break;
 8011330:	e06a      	b.n	8011408 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011332:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011336:	2b00      	cmp	r3, #0
 8011338:	da11      	bge.n	801135e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801133a:	7bbb      	ldrb	r3, [r7, #14]
 801133c:	f003 020f 	and.w	r2, r3, #15
 8011340:	6879      	ldr	r1, [r7, #4]
 8011342:	4613      	mov	r3, r2
 8011344:	009b      	lsls	r3, r3, #2
 8011346:	4413      	add	r3, r2
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	440b      	add	r3, r1
 801134c:	3324      	adds	r3, #36	; 0x24
 801134e:	881b      	ldrh	r3, [r3, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d117      	bne.n	8011384 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011354:	6839      	ldr	r1, [r7, #0]
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f000 fb96 	bl	8011a88 <USBD_CtlError>
                  break;
 801135c:	e054      	b.n	8011408 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801135e:	7bbb      	ldrb	r3, [r7, #14]
 8011360:	f003 020f 	and.w	r2, r3, #15
 8011364:	6879      	ldr	r1, [r7, #4]
 8011366:	4613      	mov	r3, r2
 8011368:	009b      	lsls	r3, r3, #2
 801136a:	4413      	add	r3, r2
 801136c:	009b      	lsls	r3, r3, #2
 801136e:	440b      	add	r3, r1
 8011370:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011374:	881b      	ldrh	r3, [r3, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d104      	bne.n	8011384 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801137a:	6839      	ldr	r1, [r7, #0]
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f000 fb83 	bl	8011a88 <USBD_CtlError>
                  break;
 8011382:	e041      	b.n	8011408 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011388:	2b00      	cmp	r3, #0
 801138a:	da0b      	bge.n	80113a4 <USBD_StdEPReq+0x23e>
 801138c:	7bbb      	ldrb	r3, [r7, #14]
 801138e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011392:	4613      	mov	r3, r2
 8011394:	009b      	lsls	r3, r3, #2
 8011396:	4413      	add	r3, r2
 8011398:	009b      	lsls	r3, r3, #2
 801139a:	3310      	adds	r3, #16
 801139c:	687a      	ldr	r2, [r7, #4]
 801139e:	4413      	add	r3, r2
 80113a0:	3304      	adds	r3, #4
 80113a2:	e00b      	b.n	80113bc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80113a4:	7bbb      	ldrb	r3, [r7, #14]
 80113a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80113aa:	4613      	mov	r3, r2
 80113ac:	009b      	lsls	r3, r3, #2
 80113ae:	4413      	add	r3, r2
 80113b0:	009b      	lsls	r3, r3, #2
 80113b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80113b6:	687a      	ldr	r2, [r7, #4]
 80113b8:	4413      	add	r3, r2
 80113ba:	3304      	adds	r3, #4
 80113bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80113be:	7bbb      	ldrb	r3, [r7, #14]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d002      	beq.n	80113ca <USBD_StdEPReq+0x264>
 80113c4:	7bbb      	ldrb	r3, [r7, #14]
 80113c6:	2b80      	cmp	r3, #128	; 0x80
 80113c8:	d103      	bne.n	80113d2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	2200      	movs	r2, #0
 80113ce:	601a      	str	r2, [r3, #0]
 80113d0:	e00e      	b.n	80113f0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80113d2:	7bbb      	ldrb	r3, [r7, #14]
 80113d4:	4619      	mov	r1, r3
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f007 fac6 	bl	8018968 <USBD_LL_IsStallEP>
 80113dc:	4603      	mov	r3, r0
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d003      	beq.n	80113ea <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	2201      	movs	r2, #1
 80113e6:	601a      	str	r2, [r3, #0]
 80113e8:	e002      	b.n	80113f0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	2200      	movs	r2, #0
 80113ee:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	2202      	movs	r2, #2
 80113f4:	4619      	mov	r1, r3
 80113f6:	6878      	ldr	r0, [r7, #4]
 80113f8:	f000 fbb7 	bl	8011b6a <USBD_CtlSendData>
              break;
 80113fc:	e004      	b.n	8011408 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80113fe:	6839      	ldr	r1, [r7, #0]
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f000 fb41 	bl	8011a88 <USBD_CtlError>
              break;
 8011406:	bf00      	nop
          }
          break;
 8011408:	e004      	b.n	8011414 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801140a:	6839      	ldr	r1, [r7, #0]
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f000 fb3b 	bl	8011a88 <USBD_CtlError>
          break;
 8011412:	bf00      	nop
      }
      break;
 8011414:	e004      	b.n	8011420 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8011416:	6839      	ldr	r1, [r7, #0]
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f000 fb35 	bl	8011a88 <USBD_CtlError>
      break;
 801141e:	bf00      	nop
  }

  return ret;
 8011420:	7bfb      	ldrb	r3, [r7, #15]
}
 8011422:	4618      	mov	r0, r3
 8011424:	3710      	adds	r7, #16
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}
	...

0801142c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011436:	2300      	movs	r3, #0
 8011438:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801143a:	2300      	movs	r3, #0
 801143c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801143e:	2300      	movs	r3, #0
 8011440:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	885b      	ldrh	r3, [r3, #2]
 8011446:	0a1b      	lsrs	r3, r3, #8
 8011448:	b29b      	uxth	r3, r3
 801144a:	3b01      	subs	r3, #1
 801144c:	2b06      	cmp	r3, #6
 801144e:	f200 8128 	bhi.w	80116a2 <USBD_GetDescriptor+0x276>
 8011452:	a201      	add	r2, pc, #4	; (adr r2, 8011458 <USBD_GetDescriptor+0x2c>)
 8011454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011458:	08011475 	.word	0x08011475
 801145c:	0801148d 	.word	0x0801148d
 8011460:	080114cd 	.word	0x080114cd
 8011464:	080116a3 	.word	0x080116a3
 8011468:	080116a3 	.word	0x080116a3
 801146c:	08011643 	.word	0x08011643
 8011470:	0801166f 	.word	0x0801166f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	687a      	ldr	r2, [r7, #4]
 801147e:	7c12      	ldrb	r2, [r2, #16]
 8011480:	f107 0108 	add.w	r1, r7, #8
 8011484:	4610      	mov	r0, r2
 8011486:	4798      	blx	r3
 8011488:	60f8      	str	r0, [r7, #12]
      break;
 801148a:	e112      	b.n	80116b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	7c1b      	ldrb	r3, [r3, #16]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d10d      	bne.n	80114b0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801149c:	f107 0208 	add.w	r2, r7, #8
 80114a0:	4610      	mov	r0, r2
 80114a2:	4798      	blx	r3
 80114a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	3301      	adds	r3, #1
 80114aa:	2202      	movs	r2, #2
 80114ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80114ae:	e100      	b.n	80116b2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b8:	f107 0208 	add.w	r2, r7, #8
 80114bc:	4610      	mov	r0, r2
 80114be:	4798      	blx	r3
 80114c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	3301      	adds	r3, #1
 80114c6:	2202      	movs	r2, #2
 80114c8:	701a      	strb	r2, [r3, #0]
      break;
 80114ca:	e0f2      	b.n	80116b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	885b      	ldrh	r3, [r3, #2]
 80114d0:	b2db      	uxtb	r3, r3
 80114d2:	2b05      	cmp	r3, #5
 80114d4:	f200 80ac 	bhi.w	8011630 <USBD_GetDescriptor+0x204>
 80114d8:	a201      	add	r2, pc, #4	; (adr r2, 80114e0 <USBD_GetDescriptor+0xb4>)
 80114da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114de:	bf00      	nop
 80114e0:	080114f9 	.word	0x080114f9
 80114e4:	0801152d 	.word	0x0801152d
 80114e8:	08011561 	.word	0x08011561
 80114ec:	08011595 	.word	0x08011595
 80114f0:	080115c9 	.word	0x080115c9
 80114f4:	080115fd 	.word	0x080115fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114fe:	685b      	ldr	r3, [r3, #4]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d00b      	beq.n	801151c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	7c12      	ldrb	r2, [r2, #16]
 8011510:	f107 0108 	add.w	r1, r7, #8
 8011514:	4610      	mov	r0, r2
 8011516:	4798      	blx	r3
 8011518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801151a:	e091      	b.n	8011640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801151c:	6839      	ldr	r1, [r7, #0]
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f000 fab2 	bl	8011a88 <USBD_CtlError>
            err++;
 8011524:	7afb      	ldrb	r3, [r7, #11]
 8011526:	3301      	adds	r3, #1
 8011528:	72fb      	strb	r3, [r7, #11]
          break;
 801152a:	e089      	b.n	8011640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011532:	689b      	ldr	r3, [r3, #8]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d00b      	beq.n	8011550 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801153e:	689b      	ldr	r3, [r3, #8]
 8011540:	687a      	ldr	r2, [r7, #4]
 8011542:	7c12      	ldrb	r2, [r2, #16]
 8011544:	f107 0108 	add.w	r1, r7, #8
 8011548:	4610      	mov	r0, r2
 801154a:	4798      	blx	r3
 801154c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801154e:	e077      	b.n	8011640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011550:	6839      	ldr	r1, [r7, #0]
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f000 fa98 	bl	8011a88 <USBD_CtlError>
            err++;
 8011558:	7afb      	ldrb	r3, [r7, #11]
 801155a:	3301      	adds	r3, #1
 801155c:	72fb      	strb	r3, [r7, #11]
          break;
 801155e:	e06f      	b.n	8011640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011566:	68db      	ldr	r3, [r3, #12]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d00b      	beq.n	8011584 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011572:	68db      	ldr	r3, [r3, #12]
 8011574:	687a      	ldr	r2, [r7, #4]
 8011576:	7c12      	ldrb	r2, [r2, #16]
 8011578:	f107 0108 	add.w	r1, r7, #8
 801157c:	4610      	mov	r0, r2
 801157e:	4798      	blx	r3
 8011580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011582:	e05d      	b.n	8011640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011584:	6839      	ldr	r1, [r7, #0]
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f000 fa7e 	bl	8011a88 <USBD_CtlError>
            err++;
 801158c:	7afb      	ldrb	r3, [r7, #11]
 801158e:	3301      	adds	r3, #1
 8011590:	72fb      	strb	r3, [r7, #11]
          break;
 8011592:	e055      	b.n	8011640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801159a:	691b      	ldr	r3, [r3, #16]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d00b      	beq.n	80115b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115a6:	691b      	ldr	r3, [r3, #16]
 80115a8:	687a      	ldr	r2, [r7, #4]
 80115aa:	7c12      	ldrb	r2, [r2, #16]
 80115ac:	f107 0108 	add.w	r1, r7, #8
 80115b0:	4610      	mov	r0, r2
 80115b2:	4798      	blx	r3
 80115b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80115b6:	e043      	b.n	8011640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80115b8:	6839      	ldr	r1, [r7, #0]
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f000 fa64 	bl	8011a88 <USBD_CtlError>
            err++;
 80115c0:	7afb      	ldrb	r3, [r7, #11]
 80115c2:	3301      	adds	r3, #1
 80115c4:	72fb      	strb	r3, [r7, #11]
          break;
 80115c6:	e03b      	b.n	8011640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115ce:	695b      	ldr	r3, [r3, #20]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d00b      	beq.n	80115ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115da:	695b      	ldr	r3, [r3, #20]
 80115dc:	687a      	ldr	r2, [r7, #4]
 80115de:	7c12      	ldrb	r2, [r2, #16]
 80115e0:	f107 0108 	add.w	r1, r7, #8
 80115e4:	4610      	mov	r0, r2
 80115e6:	4798      	blx	r3
 80115e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80115ea:	e029      	b.n	8011640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80115ec:	6839      	ldr	r1, [r7, #0]
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f000 fa4a 	bl	8011a88 <USBD_CtlError>
            err++;
 80115f4:	7afb      	ldrb	r3, [r7, #11]
 80115f6:	3301      	adds	r3, #1
 80115f8:	72fb      	strb	r3, [r7, #11]
          break;
 80115fa:	e021      	b.n	8011640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011602:	699b      	ldr	r3, [r3, #24]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d00b      	beq.n	8011620 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801160e:	699b      	ldr	r3, [r3, #24]
 8011610:	687a      	ldr	r2, [r7, #4]
 8011612:	7c12      	ldrb	r2, [r2, #16]
 8011614:	f107 0108 	add.w	r1, r7, #8
 8011618:	4610      	mov	r0, r2
 801161a:	4798      	blx	r3
 801161c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801161e:	e00f      	b.n	8011640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011620:	6839      	ldr	r1, [r7, #0]
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f000 fa30 	bl	8011a88 <USBD_CtlError>
            err++;
 8011628:	7afb      	ldrb	r3, [r7, #11]
 801162a:	3301      	adds	r3, #1
 801162c:	72fb      	strb	r3, [r7, #11]
          break;
 801162e:	e007      	b.n	8011640 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011630:	6839      	ldr	r1, [r7, #0]
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f000 fa28 	bl	8011a88 <USBD_CtlError>
          err++;
 8011638:	7afb      	ldrb	r3, [r7, #11]
 801163a:	3301      	adds	r3, #1
 801163c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801163e:	bf00      	nop
      }
      break;
 8011640:	e037      	b.n	80116b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	7c1b      	ldrb	r3, [r3, #16]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d109      	bne.n	801165e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011652:	f107 0208 	add.w	r2, r7, #8
 8011656:	4610      	mov	r0, r2
 8011658:	4798      	blx	r3
 801165a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801165c:	e029      	b.n	80116b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801165e:	6839      	ldr	r1, [r7, #0]
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f000 fa11 	bl	8011a88 <USBD_CtlError>
        err++;
 8011666:	7afb      	ldrb	r3, [r7, #11]
 8011668:	3301      	adds	r3, #1
 801166a:	72fb      	strb	r3, [r7, #11]
      break;
 801166c:	e021      	b.n	80116b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	7c1b      	ldrb	r3, [r3, #16]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d10d      	bne.n	8011692 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801167e:	f107 0208 	add.w	r2, r7, #8
 8011682:	4610      	mov	r0, r2
 8011684:	4798      	blx	r3
 8011686:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	3301      	adds	r3, #1
 801168c:	2207      	movs	r2, #7
 801168e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011690:	e00f      	b.n	80116b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011692:	6839      	ldr	r1, [r7, #0]
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f000 f9f7 	bl	8011a88 <USBD_CtlError>
        err++;
 801169a:	7afb      	ldrb	r3, [r7, #11]
 801169c:	3301      	adds	r3, #1
 801169e:	72fb      	strb	r3, [r7, #11]
      break;
 80116a0:	e007      	b.n	80116b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80116a2:	6839      	ldr	r1, [r7, #0]
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f000 f9ef 	bl	8011a88 <USBD_CtlError>
      err++;
 80116aa:	7afb      	ldrb	r3, [r7, #11]
 80116ac:	3301      	adds	r3, #1
 80116ae:	72fb      	strb	r3, [r7, #11]
      break;
 80116b0:	bf00      	nop
  }

  if (err != 0U)
 80116b2:	7afb      	ldrb	r3, [r7, #11]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d11e      	bne.n	80116f6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	88db      	ldrh	r3, [r3, #6]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d016      	beq.n	80116ee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80116c0:	893b      	ldrh	r3, [r7, #8]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d00e      	beq.n	80116e4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	88da      	ldrh	r2, [r3, #6]
 80116ca:	893b      	ldrh	r3, [r7, #8]
 80116cc:	4293      	cmp	r3, r2
 80116ce:	bf28      	it	cs
 80116d0:	4613      	movcs	r3, r2
 80116d2:	b29b      	uxth	r3, r3
 80116d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80116d6:	893b      	ldrh	r3, [r7, #8]
 80116d8:	461a      	mov	r2, r3
 80116da:	68f9      	ldr	r1, [r7, #12]
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f000 fa44 	bl	8011b6a <USBD_CtlSendData>
 80116e2:	e009      	b.n	80116f8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80116e4:	6839      	ldr	r1, [r7, #0]
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f000 f9ce 	bl	8011a88 <USBD_CtlError>
 80116ec:	e004      	b.n	80116f8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f000 fa95 	bl	8011c1e <USBD_CtlSendStatus>
 80116f4:	e000      	b.n	80116f8 <USBD_GetDescriptor+0x2cc>
    return;
 80116f6:	bf00      	nop
  }
}
 80116f8:	3710      	adds	r7, #16
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop

08011700 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b084      	sub	sp, #16
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	889b      	ldrh	r3, [r3, #4]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d131      	bne.n	8011776 <USBD_SetAddress+0x76>
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	88db      	ldrh	r3, [r3, #6]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d12d      	bne.n	8011776 <USBD_SetAddress+0x76>
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	885b      	ldrh	r3, [r3, #2]
 801171e:	2b7f      	cmp	r3, #127	; 0x7f
 8011720:	d829      	bhi.n	8011776 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	885b      	ldrh	r3, [r3, #2]
 8011726:	b2db      	uxtb	r3, r3
 8011728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801172c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011734:	b2db      	uxtb	r3, r3
 8011736:	2b03      	cmp	r3, #3
 8011738:	d104      	bne.n	8011744 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801173a:	6839      	ldr	r1, [r7, #0]
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f000 f9a3 	bl	8011a88 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011742:	e01d      	b.n	8011780 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	7bfa      	ldrb	r2, [r7, #15]
 8011748:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801174c:	7bfb      	ldrb	r3, [r7, #15]
 801174e:	4619      	mov	r1, r3
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f007 f935 	bl	80189c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f000 fa61 	bl	8011c1e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801175c:	7bfb      	ldrb	r3, [r7, #15]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d004      	beq.n	801176c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	2202      	movs	r2, #2
 8011766:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801176a:	e009      	b.n	8011780 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2201      	movs	r2, #1
 8011770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011774:	e004      	b.n	8011780 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011776:	6839      	ldr	r1, [r7, #0]
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f000 f985 	bl	8011a88 <USBD_CtlError>
  }
}
 801177e:	bf00      	nop
 8011780:	bf00      	nop
 8011782:	3710      	adds	r7, #16
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011792:	2300      	movs	r3, #0
 8011794:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	885b      	ldrh	r3, [r3, #2]
 801179a:	b2da      	uxtb	r2, r3
 801179c:	4b4c      	ldr	r3, [pc, #304]	; (80118d0 <USBD_SetConfig+0x148>)
 801179e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80117a0:	4b4b      	ldr	r3, [pc, #300]	; (80118d0 <USBD_SetConfig+0x148>)
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	2b01      	cmp	r3, #1
 80117a6:	d905      	bls.n	80117b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80117a8:	6839      	ldr	r1, [r7, #0]
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f000 f96c 	bl	8011a88 <USBD_CtlError>
    return USBD_FAIL;
 80117b0:	2303      	movs	r3, #3
 80117b2:	e088      	b.n	80118c6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	2b02      	cmp	r3, #2
 80117be:	d002      	beq.n	80117c6 <USBD_SetConfig+0x3e>
 80117c0:	2b03      	cmp	r3, #3
 80117c2:	d025      	beq.n	8011810 <USBD_SetConfig+0x88>
 80117c4:	e071      	b.n	80118aa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80117c6:	4b42      	ldr	r3, [pc, #264]	; (80118d0 <USBD_SetConfig+0x148>)
 80117c8:	781b      	ldrb	r3, [r3, #0]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d01c      	beq.n	8011808 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80117ce:	4b40      	ldr	r3, [pc, #256]	; (80118d0 <USBD_SetConfig+0x148>)
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	461a      	mov	r2, r3
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80117d8:	4b3d      	ldr	r3, [pc, #244]	; (80118d0 <USBD_SetConfig+0x148>)
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	4619      	mov	r1, r3
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f7ff f948 	bl	8010a74 <USBD_SetClassConfig>
 80117e4:	4603      	mov	r3, r0
 80117e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80117e8:	7bfb      	ldrb	r3, [r7, #15]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d004      	beq.n	80117f8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80117ee:	6839      	ldr	r1, [r7, #0]
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f000 f949 	bl	8011a88 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80117f6:	e065      	b.n	80118c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f000 fa10 	bl	8011c1e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2203      	movs	r2, #3
 8011802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011806:	e05d      	b.n	80118c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f000 fa08 	bl	8011c1e <USBD_CtlSendStatus>
      break;
 801180e:	e059      	b.n	80118c4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011810:	4b2f      	ldr	r3, [pc, #188]	; (80118d0 <USBD_SetConfig+0x148>)
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d112      	bne.n	801183e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2202      	movs	r2, #2
 801181c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011820:	4b2b      	ldr	r3, [pc, #172]	; (80118d0 <USBD_SetConfig+0x148>)
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	461a      	mov	r2, r3
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801182a:	4b29      	ldr	r3, [pc, #164]	; (80118d0 <USBD_SetConfig+0x148>)
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	4619      	mov	r1, r3
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	f7ff f93b 	bl	8010aac <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f000 f9f1 	bl	8011c1e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801183c:	e042      	b.n	80118c4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801183e:	4b24      	ldr	r3, [pc, #144]	; (80118d0 <USBD_SetConfig+0x148>)
 8011840:	781b      	ldrb	r3, [r3, #0]
 8011842:	461a      	mov	r2, r3
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	429a      	cmp	r2, r3
 801184a:	d02a      	beq.n	80118a2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	b2db      	uxtb	r3, r3
 8011852:	4619      	mov	r1, r3
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f7ff f929 	bl	8010aac <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801185a:	4b1d      	ldr	r3, [pc, #116]	; (80118d0 <USBD_SetConfig+0x148>)
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	461a      	mov	r2, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011864:	4b1a      	ldr	r3, [pc, #104]	; (80118d0 <USBD_SetConfig+0x148>)
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	4619      	mov	r1, r3
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f7ff f902 	bl	8010a74 <USBD_SetClassConfig>
 8011870:	4603      	mov	r3, r0
 8011872:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011874:	7bfb      	ldrb	r3, [r7, #15]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d00f      	beq.n	801189a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801187a:	6839      	ldr	r1, [r7, #0]
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f000 f903 	bl	8011a88 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	b2db      	uxtb	r3, r3
 8011888:	4619      	mov	r1, r3
 801188a:	6878      	ldr	r0, [r7, #4]
 801188c:	f7ff f90e 	bl	8010aac <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2202      	movs	r2, #2
 8011894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011898:	e014      	b.n	80118c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f000 f9bf 	bl	8011c1e <USBD_CtlSendStatus>
      break;
 80118a0:	e010      	b.n	80118c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f000 f9bb 	bl	8011c1e <USBD_CtlSendStatus>
      break;
 80118a8:	e00c      	b.n	80118c4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80118aa:	6839      	ldr	r1, [r7, #0]
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f000 f8eb 	bl	8011a88 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80118b2:	4b07      	ldr	r3, [pc, #28]	; (80118d0 <USBD_SetConfig+0x148>)
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	4619      	mov	r1, r3
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f7ff f8f7 	bl	8010aac <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80118be:	2303      	movs	r3, #3
 80118c0:	73fb      	strb	r3, [r7, #15]
      break;
 80118c2:	bf00      	nop
  }

  return ret;
 80118c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3710      	adds	r7, #16
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}
 80118ce:	bf00      	nop
 80118d0:	2000082f 	.word	0x2000082f

080118d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	88db      	ldrh	r3, [r3, #6]
 80118e2:	2b01      	cmp	r3, #1
 80118e4:	d004      	beq.n	80118f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80118e6:	6839      	ldr	r1, [r7, #0]
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f000 f8cd 	bl	8011a88 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80118ee:	e023      	b.n	8011938 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118f6:	b2db      	uxtb	r3, r3
 80118f8:	2b02      	cmp	r3, #2
 80118fa:	dc02      	bgt.n	8011902 <USBD_GetConfig+0x2e>
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	dc03      	bgt.n	8011908 <USBD_GetConfig+0x34>
 8011900:	e015      	b.n	801192e <USBD_GetConfig+0x5a>
 8011902:	2b03      	cmp	r3, #3
 8011904:	d00b      	beq.n	801191e <USBD_GetConfig+0x4a>
 8011906:	e012      	b.n	801192e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2200      	movs	r2, #0
 801190c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	3308      	adds	r3, #8
 8011912:	2201      	movs	r2, #1
 8011914:	4619      	mov	r1, r3
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f000 f927 	bl	8011b6a <USBD_CtlSendData>
        break;
 801191c:	e00c      	b.n	8011938 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	3304      	adds	r3, #4
 8011922:	2201      	movs	r2, #1
 8011924:	4619      	mov	r1, r3
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f000 f91f 	bl	8011b6a <USBD_CtlSendData>
        break;
 801192c:	e004      	b.n	8011938 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801192e:	6839      	ldr	r1, [r7, #0]
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f000 f8a9 	bl	8011a88 <USBD_CtlError>
        break;
 8011936:	bf00      	nop
}
 8011938:	bf00      	nop
 801193a:	3708      	adds	r7, #8
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}

08011940 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b082      	sub	sp, #8
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
 8011948:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011950:	b2db      	uxtb	r3, r3
 8011952:	3b01      	subs	r3, #1
 8011954:	2b02      	cmp	r3, #2
 8011956:	d81e      	bhi.n	8011996 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	88db      	ldrh	r3, [r3, #6]
 801195c:	2b02      	cmp	r3, #2
 801195e:	d004      	beq.n	801196a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011960:	6839      	ldr	r1, [r7, #0]
 8011962:	6878      	ldr	r0, [r7, #4]
 8011964:	f000 f890 	bl	8011a88 <USBD_CtlError>
        break;
 8011968:	e01a      	b.n	80119a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2201      	movs	r2, #1
 801196e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011976:	2b00      	cmp	r3, #0
 8011978:	d005      	beq.n	8011986 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	68db      	ldr	r3, [r3, #12]
 801197e:	f043 0202 	orr.w	r2, r3, #2
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	330c      	adds	r3, #12
 801198a:	2202      	movs	r2, #2
 801198c:	4619      	mov	r1, r3
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f000 f8eb 	bl	8011b6a <USBD_CtlSendData>
      break;
 8011994:	e004      	b.n	80119a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011996:	6839      	ldr	r1, [r7, #0]
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f000 f875 	bl	8011a88 <USBD_CtlError>
      break;
 801199e:	bf00      	nop
  }
}
 80119a0:	bf00      	nop
 80119a2:	3708      	adds	r7, #8
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd80      	pop	{r7, pc}

080119a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b082      	sub	sp, #8
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	885b      	ldrh	r3, [r3, #2]
 80119b6:	2b01      	cmp	r3, #1
 80119b8:	d106      	bne.n	80119c8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2201      	movs	r2, #1
 80119be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f000 f92b 	bl	8011c1e <USBD_CtlSendStatus>
  }
}
 80119c8:	bf00      	nop
 80119ca:	3708      	adds	r7, #8
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}

080119d0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b082      	sub	sp, #8
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	3b01      	subs	r3, #1
 80119e4:	2b02      	cmp	r3, #2
 80119e6:	d80b      	bhi.n	8011a00 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	885b      	ldrh	r3, [r3, #2]
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	d10c      	bne.n	8011a0a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2200      	movs	r2, #0
 80119f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f000 f910 	bl	8011c1e <USBD_CtlSendStatus>
      }
      break;
 80119fe:	e004      	b.n	8011a0a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011a00:	6839      	ldr	r1, [r7, #0]
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f000 f840 	bl	8011a88 <USBD_CtlError>
      break;
 8011a08:	e000      	b.n	8011a0c <USBD_ClrFeature+0x3c>
      break;
 8011a0a:	bf00      	nop
  }
}
 8011a0c:	bf00      	nop
 8011a0e:	3708      	adds	r7, #8
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b084      	sub	sp, #16
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	781a      	ldrb	r2, [r3, #0]
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	3301      	adds	r3, #1
 8011a2e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	781a      	ldrb	r2, [r3, #0]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	3301      	adds	r3, #1
 8011a3c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011a3e:	68f8      	ldr	r0, [r7, #12]
 8011a40:	f7ff fabb 	bl	8010fba <SWAPBYTE>
 8011a44:	4603      	mov	r3, r0
 8011a46:	461a      	mov	r2, r3
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	3301      	adds	r3, #1
 8011a50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	3301      	adds	r3, #1
 8011a56:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011a58:	68f8      	ldr	r0, [r7, #12]
 8011a5a:	f7ff faae 	bl	8010fba <SWAPBYTE>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	461a      	mov	r2, r3
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	3301      	adds	r3, #1
 8011a6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	3301      	adds	r3, #1
 8011a70:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011a72:	68f8      	ldr	r0, [r7, #12]
 8011a74:	f7ff faa1 	bl	8010fba <SWAPBYTE>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	461a      	mov	r2, r3
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	80da      	strh	r2, [r3, #6]
}
 8011a80:	bf00      	nop
 8011a82:	3710      	adds	r7, #16
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}

08011a88 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b082      	sub	sp, #8
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
 8011a90:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a92:	2180      	movs	r1, #128	; 0x80
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f006 ff29 	bl	80188ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011a9a:	2100      	movs	r1, #0
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f006 ff25 	bl	80188ec <USBD_LL_StallEP>
}
 8011aa2:	bf00      	nop
 8011aa4:	3708      	adds	r7, #8
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011aaa:	b580      	push	{r7, lr}
 8011aac:	b086      	sub	sp, #24
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	60f8      	str	r0, [r7, #12]
 8011ab2:	60b9      	str	r1, [r7, #8]
 8011ab4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d036      	beq.n	8011b2e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011ac4:	6938      	ldr	r0, [r7, #16]
 8011ac6:	f000 f836 	bl	8011b36 <USBD_GetLen>
 8011aca:	4603      	mov	r3, r0
 8011acc:	3301      	adds	r3, #1
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	005b      	lsls	r3, r3, #1
 8011ad2:	b29a      	uxth	r2, r3
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011ad8:	7dfb      	ldrb	r3, [r7, #23]
 8011ada:	68ba      	ldr	r2, [r7, #8]
 8011adc:	4413      	add	r3, r2
 8011ade:	687a      	ldr	r2, [r7, #4]
 8011ae0:	7812      	ldrb	r2, [r2, #0]
 8011ae2:	701a      	strb	r2, [r3, #0]
  idx++;
 8011ae4:	7dfb      	ldrb	r3, [r7, #23]
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011aea:	7dfb      	ldrb	r3, [r7, #23]
 8011aec:	68ba      	ldr	r2, [r7, #8]
 8011aee:	4413      	add	r3, r2
 8011af0:	2203      	movs	r2, #3
 8011af2:	701a      	strb	r2, [r3, #0]
  idx++;
 8011af4:	7dfb      	ldrb	r3, [r7, #23]
 8011af6:	3301      	adds	r3, #1
 8011af8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011afa:	e013      	b.n	8011b24 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011afc:	7dfb      	ldrb	r3, [r7, #23]
 8011afe:	68ba      	ldr	r2, [r7, #8]
 8011b00:	4413      	add	r3, r2
 8011b02:	693a      	ldr	r2, [r7, #16]
 8011b04:	7812      	ldrb	r2, [r2, #0]
 8011b06:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011b08:	693b      	ldr	r3, [r7, #16]
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	613b      	str	r3, [r7, #16]
    idx++;
 8011b0e:	7dfb      	ldrb	r3, [r7, #23]
 8011b10:	3301      	adds	r3, #1
 8011b12:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011b14:	7dfb      	ldrb	r3, [r7, #23]
 8011b16:	68ba      	ldr	r2, [r7, #8]
 8011b18:	4413      	add	r3, r2
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	701a      	strb	r2, [r3, #0]
    idx++;
 8011b1e:	7dfb      	ldrb	r3, [r7, #23]
 8011b20:	3301      	adds	r3, #1
 8011b22:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011b24:	693b      	ldr	r3, [r7, #16]
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d1e7      	bne.n	8011afc <USBD_GetString+0x52>
 8011b2c:	e000      	b.n	8011b30 <USBD_GetString+0x86>
    return;
 8011b2e:	bf00      	nop
  }
}
 8011b30:	3718      	adds	r7, #24
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}

08011b36 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011b36:	b480      	push	{r7}
 8011b38:	b085      	sub	sp, #20
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011b46:	e005      	b.n	8011b54 <USBD_GetLen+0x1e>
  {
    len++;
 8011b48:	7bfb      	ldrb	r3, [r7, #15]
 8011b4a:	3301      	adds	r3, #1
 8011b4c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	3301      	adds	r3, #1
 8011b52:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	781b      	ldrb	r3, [r3, #0]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d1f5      	bne.n	8011b48 <USBD_GetLen+0x12>
  }

  return len;
 8011b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3714      	adds	r7, #20
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr

08011b6a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011b6a:	b580      	push	{r7, lr}
 8011b6c:	b084      	sub	sp, #16
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	60f8      	str	r0, [r7, #12]
 8011b72:	60b9      	str	r1, [r7, #8]
 8011b74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	2202      	movs	r2, #2
 8011b7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	687a      	ldr	r2, [r7, #4]
 8011b82:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	687a      	ldr	r2, [r7, #4]
 8011b88:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	68ba      	ldr	r2, [r7, #8]
 8011b8e:	2100      	movs	r1, #0
 8011b90:	68f8      	ldr	r0, [r7, #12]
 8011b92:	f006 ff34 	bl	80189fe <USBD_LL_Transmit>

  return USBD_OK;
 8011b96:	2300      	movs	r3, #0
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3710      	adds	r7, #16
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}

08011ba0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b084      	sub	sp, #16
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	60b9      	str	r1, [r7, #8]
 8011baa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	68ba      	ldr	r2, [r7, #8]
 8011bb0:	2100      	movs	r1, #0
 8011bb2:	68f8      	ldr	r0, [r7, #12]
 8011bb4:	f006 ff23 	bl	80189fe <USBD_LL_Transmit>

  return USBD_OK;
 8011bb8:	2300      	movs	r3, #0
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3710      	adds	r7, #16
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}

08011bc2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011bc2:	b580      	push	{r7, lr}
 8011bc4:	b084      	sub	sp, #16
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	60f8      	str	r0, [r7, #12]
 8011bca:	60b9      	str	r1, [r7, #8]
 8011bcc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	2203      	movs	r2, #3
 8011bd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	687a      	ldr	r2, [r7, #4]
 8011bda:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	687a      	ldr	r2, [r7, #4]
 8011be2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	68ba      	ldr	r2, [r7, #8]
 8011bea:	2100      	movs	r1, #0
 8011bec:	68f8      	ldr	r0, [r7, #12]
 8011bee:	f006 ff27 	bl	8018a40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011bf2:	2300      	movs	r3, #0
}
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	3710      	adds	r7, #16
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}

08011bfc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b084      	sub	sp, #16
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	60f8      	str	r0, [r7, #12]
 8011c04:	60b9      	str	r1, [r7, #8]
 8011c06:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	68ba      	ldr	r2, [r7, #8]
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	68f8      	ldr	r0, [r7, #12]
 8011c10:	f006 ff16 	bl	8018a40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011c14:	2300      	movs	r3, #0
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3710      	adds	r7, #16
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}

08011c1e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011c1e:	b580      	push	{r7, lr}
 8011c20:	b082      	sub	sp, #8
 8011c22:	af00      	add	r7, sp, #0
 8011c24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	2204      	movs	r2, #4
 8011c2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011c2e:	2300      	movs	r3, #0
 8011c30:	2200      	movs	r2, #0
 8011c32:	2100      	movs	r1, #0
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f006 fee2 	bl	80189fe <USBD_LL_Transmit>

  return USBD_OK;
 8011c3a:	2300      	movs	r3, #0
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3708      	adds	r7, #8
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b082      	sub	sp, #8
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2205      	movs	r2, #5
 8011c50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011c54:	2300      	movs	r3, #0
 8011c56:	2200      	movs	r2, #0
 8011c58:	2100      	movs	r1, #0
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f006 fef0 	bl	8018a40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011c60:	2300      	movs	r3, #0
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	3708      	adds	r7, #8
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
	...

08011c6c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b084      	sub	sp, #16
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	4603      	mov	r3, r0
 8011c74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011c76:	79fb      	ldrb	r3, [r7, #7]
 8011c78:	4a08      	ldr	r2, [pc, #32]	; (8011c9c <disk_status+0x30>)
 8011c7a:	009b      	lsls	r3, r3, #2
 8011c7c:	4413      	add	r3, r2
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	685b      	ldr	r3, [r3, #4]
 8011c82:	79fa      	ldrb	r2, [r7, #7]
 8011c84:	4905      	ldr	r1, [pc, #20]	; (8011c9c <disk_status+0x30>)
 8011c86:	440a      	add	r2, r1
 8011c88:	7a12      	ldrb	r2, [r2, #8]
 8011c8a:	4610      	mov	r0, r2
 8011c8c:	4798      	blx	r3
 8011c8e:	4603      	mov	r3, r0
 8011c90:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3710      	adds	r7, #16
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	20000858 	.word	0x20000858

08011ca0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b084      	sub	sp, #16
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011caa:	2300      	movs	r3, #0
 8011cac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011cae:	79fb      	ldrb	r3, [r7, #7]
 8011cb0:	4a0d      	ldr	r2, [pc, #52]	; (8011ce8 <disk_initialize+0x48>)
 8011cb2:	5cd3      	ldrb	r3, [r2, r3]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d111      	bne.n	8011cdc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011cb8:	79fb      	ldrb	r3, [r7, #7]
 8011cba:	4a0b      	ldr	r2, [pc, #44]	; (8011ce8 <disk_initialize+0x48>)
 8011cbc:	2101      	movs	r1, #1
 8011cbe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011cc0:	79fb      	ldrb	r3, [r7, #7]
 8011cc2:	4a09      	ldr	r2, [pc, #36]	; (8011ce8 <disk_initialize+0x48>)
 8011cc4:	009b      	lsls	r3, r3, #2
 8011cc6:	4413      	add	r3, r2
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	79fa      	ldrb	r2, [r7, #7]
 8011cce:	4906      	ldr	r1, [pc, #24]	; (8011ce8 <disk_initialize+0x48>)
 8011cd0:	440a      	add	r2, r1
 8011cd2:	7a12      	ldrb	r2, [r2, #8]
 8011cd4:	4610      	mov	r0, r2
 8011cd6:	4798      	blx	r3
 8011cd8:	4603      	mov	r3, r0
 8011cda:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3710      	adds	r7, #16
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}
 8011ce6:	bf00      	nop
 8011ce8:	20000858 	.word	0x20000858

08011cec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011cec:	b590      	push	{r4, r7, lr}
 8011cee:	b087      	sub	sp, #28
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	60b9      	str	r1, [r7, #8]
 8011cf4:	607a      	str	r2, [r7, #4]
 8011cf6:	603b      	str	r3, [r7, #0]
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011cfc:	7bfb      	ldrb	r3, [r7, #15]
 8011cfe:	4a0a      	ldr	r2, [pc, #40]	; (8011d28 <disk_read+0x3c>)
 8011d00:	009b      	lsls	r3, r3, #2
 8011d02:	4413      	add	r3, r2
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	689c      	ldr	r4, [r3, #8]
 8011d08:	7bfb      	ldrb	r3, [r7, #15]
 8011d0a:	4a07      	ldr	r2, [pc, #28]	; (8011d28 <disk_read+0x3c>)
 8011d0c:	4413      	add	r3, r2
 8011d0e:	7a18      	ldrb	r0, [r3, #8]
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	68b9      	ldr	r1, [r7, #8]
 8011d16:	47a0      	blx	r4
 8011d18:	4603      	mov	r3, r0
 8011d1a:	75fb      	strb	r3, [r7, #23]
  return res;
 8011d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	371c      	adds	r7, #28
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd90      	pop	{r4, r7, pc}
 8011d26:	bf00      	nop
 8011d28:	20000858 	.word	0x20000858

08011d2c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011d2c:	b590      	push	{r4, r7, lr}
 8011d2e:	b087      	sub	sp, #28
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	60b9      	str	r1, [r7, #8]
 8011d34:	607a      	str	r2, [r7, #4]
 8011d36:	603b      	str	r3, [r7, #0]
 8011d38:	4603      	mov	r3, r0
 8011d3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011d3c:	7bfb      	ldrb	r3, [r7, #15]
 8011d3e:	4a0a      	ldr	r2, [pc, #40]	; (8011d68 <disk_write+0x3c>)
 8011d40:	009b      	lsls	r3, r3, #2
 8011d42:	4413      	add	r3, r2
 8011d44:	685b      	ldr	r3, [r3, #4]
 8011d46:	68dc      	ldr	r4, [r3, #12]
 8011d48:	7bfb      	ldrb	r3, [r7, #15]
 8011d4a:	4a07      	ldr	r2, [pc, #28]	; (8011d68 <disk_write+0x3c>)
 8011d4c:	4413      	add	r3, r2
 8011d4e:	7a18      	ldrb	r0, [r3, #8]
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	687a      	ldr	r2, [r7, #4]
 8011d54:	68b9      	ldr	r1, [r7, #8]
 8011d56:	47a0      	blx	r4
 8011d58:	4603      	mov	r3, r0
 8011d5a:	75fb      	strb	r3, [r7, #23]
  return res;
 8011d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	371c      	adds	r7, #28
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd90      	pop	{r4, r7, pc}
 8011d66:	bf00      	nop
 8011d68:	20000858 	.word	0x20000858

08011d6c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b084      	sub	sp, #16
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	4603      	mov	r3, r0
 8011d74:	603a      	str	r2, [r7, #0]
 8011d76:	71fb      	strb	r3, [r7, #7]
 8011d78:	460b      	mov	r3, r1
 8011d7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011d7c:	79fb      	ldrb	r3, [r7, #7]
 8011d7e:	4a09      	ldr	r2, [pc, #36]	; (8011da4 <disk_ioctl+0x38>)
 8011d80:	009b      	lsls	r3, r3, #2
 8011d82:	4413      	add	r3, r2
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	691b      	ldr	r3, [r3, #16]
 8011d88:	79fa      	ldrb	r2, [r7, #7]
 8011d8a:	4906      	ldr	r1, [pc, #24]	; (8011da4 <disk_ioctl+0x38>)
 8011d8c:	440a      	add	r2, r1
 8011d8e:	7a10      	ldrb	r0, [r2, #8]
 8011d90:	79b9      	ldrb	r1, [r7, #6]
 8011d92:	683a      	ldr	r2, [r7, #0]
 8011d94:	4798      	blx	r3
 8011d96:	4603      	mov	r3, r0
 8011d98:	73fb      	strb	r3, [r7, #15]
  return res;
 8011d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3710      	adds	r7, #16
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}
 8011da4:	20000858 	.word	0x20000858

08011da8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011da8:	b480      	push	{r7}
 8011daa:	b085      	sub	sp, #20
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	3301      	adds	r3, #1
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011db8:	89fb      	ldrh	r3, [r7, #14]
 8011dba:	021b      	lsls	r3, r3, #8
 8011dbc:	b21a      	sxth	r2, r3
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	781b      	ldrb	r3, [r3, #0]
 8011dc2:	b21b      	sxth	r3, r3
 8011dc4:	4313      	orrs	r3, r2
 8011dc6:	b21b      	sxth	r3, r3
 8011dc8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011dca:	89fb      	ldrh	r3, [r7, #14]
}
 8011dcc:	4618      	mov	r0, r3
 8011dce:	3714      	adds	r7, #20
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd6:	4770      	bx	lr

08011dd8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b085      	sub	sp, #20
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	3303      	adds	r3, #3
 8011de4:	781b      	ldrb	r3, [r3, #0]
 8011de6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	021b      	lsls	r3, r3, #8
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	3202      	adds	r2, #2
 8011df0:	7812      	ldrb	r2, [r2, #0]
 8011df2:	4313      	orrs	r3, r2
 8011df4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	021b      	lsls	r3, r3, #8
 8011dfa:	687a      	ldr	r2, [r7, #4]
 8011dfc:	3201      	adds	r2, #1
 8011dfe:	7812      	ldrb	r2, [r2, #0]
 8011e00:	4313      	orrs	r3, r2
 8011e02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	021b      	lsls	r3, r3, #8
 8011e08:	687a      	ldr	r2, [r7, #4]
 8011e0a:	7812      	ldrb	r2, [r2, #0]
 8011e0c:	4313      	orrs	r3, r2
 8011e0e:	60fb      	str	r3, [r7, #12]
	return rv;
 8011e10:	68fb      	ldr	r3, [r7, #12]
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3714      	adds	r7, #20
 8011e16:	46bd      	mov	sp, r7
 8011e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1c:	4770      	bx	lr

08011e1e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011e1e:	b480      	push	{r7}
 8011e20:	b083      	sub	sp, #12
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	6078      	str	r0, [r7, #4]
 8011e26:	460b      	mov	r3, r1
 8011e28:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	1c5a      	adds	r2, r3, #1
 8011e2e:	607a      	str	r2, [r7, #4]
 8011e30:	887a      	ldrh	r2, [r7, #2]
 8011e32:	b2d2      	uxtb	r2, r2
 8011e34:	701a      	strb	r2, [r3, #0]
 8011e36:	887b      	ldrh	r3, [r7, #2]
 8011e38:	0a1b      	lsrs	r3, r3, #8
 8011e3a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	1c5a      	adds	r2, r3, #1
 8011e40:	607a      	str	r2, [r7, #4]
 8011e42:	887a      	ldrh	r2, [r7, #2]
 8011e44:	b2d2      	uxtb	r2, r2
 8011e46:	701a      	strb	r2, [r3, #0]
}
 8011e48:	bf00      	nop
 8011e4a:	370c      	adds	r7, #12
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e52:	4770      	bx	lr

08011e54 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011e54:	b480      	push	{r7}
 8011e56:	b083      	sub	sp, #12
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
 8011e5c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	1c5a      	adds	r2, r3, #1
 8011e62:	607a      	str	r2, [r7, #4]
 8011e64:	683a      	ldr	r2, [r7, #0]
 8011e66:	b2d2      	uxtb	r2, r2
 8011e68:	701a      	strb	r2, [r3, #0]
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	0a1b      	lsrs	r3, r3, #8
 8011e6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	1c5a      	adds	r2, r3, #1
 8011e74:	607a      	str	r2, [r7, #4]
 8011e76:	683a      	ldr	r2, [r7, #0]
 8011e78:	b2d2      	uxtb	r2, r2
 8011e7a:	701a      	strb	r2, [r3, #0]
 8011e7c:	683b      	ldr	r3, [r7, #0]
 8011e7e:	0a1b      	lsrs	r3, r3, #8
 8011e80:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	1c5a      	adds	r2, r3, #1
 8011e86:	607a      	str	r2, [r7, #4]
 8011e88:	683a      	ldr	r2, [r7, #0]
 8011e8a:	b2d2      	uxtb	r2, r2
 8011e8c:	701a      	strb	r2, [r3, #0]
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	0a1b      	lsrs	r3, r3, #8
 8011e92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	1c5a      	adds	r2, r3, #1
 8011e98:	607a      	str	r2, [r7, #4]
 8011e9a:	683a      	ldr	r2, [r7, #0]
 8011e9c:	b2d2      	uxtb	r2, r2
 8011e9e:	701a      	strb	r2, [r3, #0]
}
 8011ea0:	bf00      	nop
 8011ea2:	370c      	adds	r7, #12
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eaa:	4770      	bx	lr

08011eac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011eac:	b480      	push	{r7}
 8011eae:	b087      	sub	sp, #28
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	60f8      	str	r0, [r7, #12]
 8011eb4:	60b9      	str	r1, [r7, #8]
 8011eb6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d00d      	beq.n	8011ee2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011ec6:	693a      	ldr	r2, [r7, #16]
 8011ec8:	1c53      	adds	r3, r2, #1
 8011eca:	613b      	str	r3, [r7, #16]
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	1c59      	adds	r1, r3, #1
 8011ed0:	6179      	str	r1, [r7, #20]
 8011ed2:	7812      	ldrb	r2, [r2, #0]
 8011ed4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	3b01      	subs	r3, #1
 8011eda:	607b      	str	r3, [r7, #4]
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d1f1      	bne.n	8011ec6 <mem_cpy+0x1a>
	}
}
 8011ee2:	bf00      	nop
 8011ee4:	371c      	adds	r7, #28
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eec:	4770      	bx	lr

08011eee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011eee:	b480      	push	{r7}
 8011ef0:	b087      	sub	sp, #28
 8011ef2:	af00      	add	r7, sp, #0
 8011ef4:	60f8      	str	r0, [r7, #12]
 8011ef6:	60b9      	str	r1, [r7, #8]
 8011ef8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011efe:	697b      	ldr	r3, [r7, #20]
 8011f00:	1c5a      	adds	r2, r3, #1
 8011f02:	617a      	str	r2, [r7, #20]
 8011f04:	68ba      	ldr	r2, [r7, #8]
 8011f06:	b2d2      	uxtb	r2, r2
 8011f08:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	3b01      	subs	r3, #1
 8011f0e:	607b      	str	r3, [r7, #4]
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d1f3      	bne.n	8011efe <mem_set+0x10>
}
 8011f16:	bf00      	nop
 8011f18:	bf00      	nop
 8011f1a:	371c      	adds	r7, #28
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f22:	4770      	bx	lr

08011f24 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011f24:	b480      	push	{r7}
 8011f26:	b089      	sub	sp, #36	; 0x24
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	60b9      	str	r1, [r7, #8]
 8011f2e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	61fb      	str	r3, [r7, #28]
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011f3c:	69fb      	ldr	r3, [r7, #28]
 8011f3e:	1c5a      	adds	r2, r3, #1
 8011f40:	61fa      	str	r2, [r7, #28]
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	4619      	mov	r1, r3
 8011f46:	69bb      	ldr	r3, [r7, #24]
 8011f48:	1c5a      	adds	r2, r3, #1
 8011f4a:	61ba      	str	r2, [r7, #24]
 8011f4c:	781b      	ldrb	r3, [r3, #0]
 8011f4e:	1acb      	subs	r3, r1, r3
 8011f50:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	3b01      	subs	r3, #1
 8011f56:	607b      	str	r3, [r7, #4]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d002      	beq.n	8011f64 <mem_cmp+0x40>
 8011f5e:	697b      	ldr	r3, [r7, #20]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d0eb      	beq.n	8011f3c <mem_cmp+0x18>

	return r;
 8011f64:	697b      	ldr	r3, [r7, #20]
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	3724      	adds	r7, #36	; 0x24
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f70:	4770      	bx	lr

08011f72 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011f72:	b480      	push	{r7}
 8011f74:	b083      	sub	sp, #12
 8011f76:	af00      	add	r7, sp, #0
 8011f78:	6078      	str	r0, [r7, #4]
 8011f7a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011f7c:	e002      	b.n	8011f84 <chk_chr+0x12>
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	3301      	adds	r3, #1
 8011f82:	607b      	str	r3, [r7, #4]
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	781b      	ldrb	r3, [r3, #0]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d005      	beq.n	8011f98 <chk_chr+0x26>
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	781b      	ldrb	r3, [r3, #0]
 8011f90:	461a      	mov	r2, r3
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	4293      	cmp	r3, r2
 8011f96:	d1f2      	bne.n	8011f7e <chk_chr+0xc>
	return *str;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	781b      	ldrb	r3, [r3, #0]
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	370c      	adds	r7, #12
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa6:	4770      	bx	lr

08011fa8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b082      	sub	sp, #8
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d009      	beq.n	8011fca <lock_fs+0x22>
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	68db      	ldr	r3, [r3, #12]
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f002 fcde 	bl	801497c <ff_req_grant>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d001      	beq.n	8011fca <lock_fs+0x22>
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	e000      	b.n	8011fcc <lock_fs+0x24>
 8011fca:	2300      	movs	r3, #0
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3708      	adds	r7, #8
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}

08011fd4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b082      	sub	sp, #8
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
 8011fdc:	460b      	mov	r3, r1
 8011fde:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d00d      	beq.n	8012002 <unlock_fs+0x2e>
 8011fe6:	78fb      	ldrb	r3, [r7, #3]
 8011fe8:	2b0c      	cmp	r3, #12
 8011fea:	d00a      	beq.n	8012002 <unlock_fs+0x2e>
 8011fec:	78fb      	ldrb	r3, [r7, #3]
 8011fee:	2b0b      	cmp	r3, #11
 8011ff0:	d007      	beq.n	8012002 <unlock_fs+0x2e>
 8011ff2:	78fb      	ldrb	r3, [r7, #3]
 8011ff4:	2b0f      	cmp	r3, #15
 8011ff6:	d004      	beq.n	8012002 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	68db      	ldr	r3, [r3, #12]
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f002 fcd2 	bl	80149a6 <ff_rel_grant>
	}
}
 8012002:	bf00      	nop
 8012004:	3708      	adds	r7, #8
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}
	...

0801200c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801200c:	b480      	push	{r7}
 801200e:	b085      	sub	sp, #20
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012016:	2300      	movs	r3, #0
 8012018:	60bb      	str	r3, [r7, #8]
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	60fb      	str	r3, [r7, #12]
 801201e:	e029      	b.n	8012074 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012020:	4a27      	ldr	r2, [pc, #156]	; (80120c0 <chk_lock+0xb4>)
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	011b      	lsls	r3, r3, #4
 8012026:	4413      	add	r3, r2
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d01d      	beq.n	801206a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801202e:	4a24      	ldr	r2, [pc, #144]	; (80120c0 <chk_lock+0xb4>)
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	011b      	lsls	r3, r3, #4
 8012034:	4413      	add	r3, r2
 8012036:	681a      	ldr	r2, [r3, #0]
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	429a      	cmp	r2, r3
 801203e:	d116      	bne.n	801206e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012040:	4a1f      	ldr	r2, [pc, #124]	; (80120c0 <chk_lock+0xb4>)
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	011b      	lsls	r3, r3, #4
 8012046:	4413      	add	r3, r2
 8012048:	3304      	adds	r3, #4
 801204a:	681a      	ldr	r2, [r3, #0]
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012050:	429a      	cmp	r2, r3
 8012052:	d10c      	bne.n	801206e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012054:	4a1a      	ldr	r2, [pc, #104]	; (80120c0 <chk_lock+0xb4>)
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	011b      	lsls	r3, r3, #4
 801205a:	4413      	add	r3, r2
 801205c:	3308      	adds	r3, #8
 801205e:	681a      	ldr	r2, [r3, #0]
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012064:	429a      	cmp	r2, r3
 8012066:	d102      	bne.n	801206e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012068:	e007      	b.n	801207a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801206a:	2301      	movs	r3, #1
 801206c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	3301      	adds	r3, #1
 8012072:	60fb      	str	r3, [r7, #12]
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	2b01      	cmp	r3, #1
 8012078:	d9d2      	bls.n	8012020 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	2b02      	cmp	r3, #2
 801207e:	d109      	bne.n	8012094 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d102      	bne.n	801208c <chk_lock+0x80>
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	2b02      	cmp	r3, #2
 801208a:	d101      	bne.n	8012090 <chk_lock+0x84>
 801208c:	2300      	movs	r3, #0
 801208e:	e010      	b.n	80120b2 <chk_lock+0xa6>
 8012090:	2312      	movs	r3, #18
 8012092:	e00e      	b.n	80120b2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d108      	bne.n	80120ac <chk_lock+0xa0>
 801209a:	4a09      	ldr	r2, [pc, #36]	; (80120c0 <chk_lock+0xb4>)
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	011b      	lsls	r3, r3, #4
 80120a0:	4413      	add	r3, r2
 80120a2:	330c      	adds	r3, #12
 80120a4:	881b      	ldrh	r3, [r3, #0]
 80120a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120aa:	d101      	bne.n	80120b0 <chk_lock+0xa4>
 80120ac:	2310      	movs	r3, #16
 80120ae:	e000      	b.n	80120b2 <chk_lock+0xa6>
 80120b0:	2300      	movs	r3, #0
}
 80120b2:	4618      	mov	r0, r3
 80120b4:	3714      	adds	r7, #20
 80120b6:	46bd      	mov	sp, r7
 80120b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120bc:	4770      	bx	lr
 80120be:	bf00      	nop
 80120c0:	20000838 	.word	0x20000838

080120c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80120c4:	b480      	push	{r7}
 80120c6:	b083      	sub	sp, #12
 80120c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80120ca:	2300      	movs	r3, #0
 80120cc:	607b      	str	r3, [r7, #4]
 80120ce:	e002      	b.n	80120d6 <enq_lock+0x12>
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	3301      	adds	r3, #1
 80120d4:	607b      	str	r3, [r7, #4]
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	2b01      	cmp	r3, #1
 80120da:	d806      	bhi.n	80120ea <enq_lock+0x26>
 80120dc:	4a09      	ldr	r2, [pc, #36]	; (8012104 <enq_lock+0x40>)
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	011b      	lsls	r3, r3, #4
 80120e2:	4413      	add	r3, r2
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d1f2      	bne.n	80120d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2b02      	cmp	r3, #2
 80120ee:	bf14      	ite	ne
 80120f0:	2301      	movne	r3, #1
 80120f2:	2300      	moveq	r3, #0
 80120f4:	b2db      	uxtb	r3, r3
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	370c      	adds	r7, #12
 80120fa:	46bd      	mov	sp, r7
 80120fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012100:	4770      	bx	lr
 8012102:	bf00      	nop
 8012104:	20000838 	.word	0x20000838

08012108 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012108:	b480      	push	{r7}
 801210a:	b085      	sub	sp, #20
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012112:	2300      	movs	r3, #0
 8012114:	60fb      	str	r3, [r7, #12]
 8012116:	e01f      	b.n	8012158 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012118:	4a41      	ldr	r2, [pc, #260]	; (8012220 <inc_lock+0x118>)
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	011b      	lsls	r3, r3, #4
 801211e:	4413      	add	r3, r2
 8012120:	681a      	ldr	r2, [r3, #0]
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	429a      	cmp	r2, r3
 8012128:	d113      	bne.n	8012152 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801212a:	4a3d      	ldr	r2, [pc, #244]	; (8012220 <inc_lock+0x118>)
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	011b      	lsls	r3, r3, #4
 8012130:	4413      	add	r3, r2
 8012132:	3304      	adds	r3, #4
 8012134:	681a      	ldr	r2, [r3, #0]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801213a:	429a      	cmp	r2, r3
 801213c:	d109      	bne.n	8012152 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801213e:	4a38      	ldr	r2, [pc, #224]	; (8012220 <inc_lock+0x118>)
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	011b      	lsls	r3, r3, #4
 8012144:	4413      	add	r3, r2
 8012146:	3308      	adds	r3, #8
 8012148:	681a      	ldr	r2, [r3, #0]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801214e:	429a      	cmp	r2, r3
 8012150:	d006      	beq.n	8012160 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	3301      	adds	r3, #1
 8012156:	60fb      	str	r3, [r7, #12]
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	2b01      	cmp	r3, #1
 801215c:	d9dc      	bls.n	8012118 <inc_lock+0x10>
 801215e:	e000      	b.n	8012162 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012160:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2b02      	cmp	r3, #2
 8012166:	d132      	bne.n	80121ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012168:	2300      	movs	r3, #0
 801216a:	60fb      	str	r3, [r7, #12]
 801216c:	e002      	b.n	8012174 <inc_lock+0x6c>
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	3301      	adds	r3, #1
 8012172:	60fb      	str	r3, [r7, #12]
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2b01      	cmp	r3, #1
 8012178:	d806      	bhi.n	8012188 <inc_lock+0x80>
 801217a:	4a29      	ldr	r2, [pc, #164]	; (8012220 <inc_lock+0x118>)
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	011b      	lsls	r3, r3, #4
 8012180:	4413      	add	r3, r2
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d1f2      	bne.n	801216e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	2b02      	cmp	r3, #2
 801218c:	d101      	bne.n	8012192 <inc_lock+0x8a>
 801218e:	2300      	movs	r3, #0
 8012190:	e040      	b.n	8012214 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681a      	ldr	r2, [r3, #0]
 8012196:	4922      	ldr	r1, [pc, #136]	; (8012220 <inc_lock+0x118>)
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	011b      	lsls	r3, r3, #4
 801219c:	440b      	add	r3, r1
 801219e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	689a      	ldr	r2, [r3, #8]
 80121a4:	491e      	ldr	r1, [pc, #120]	; (8012220 <inc_lock+0x118>)
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	011b      	lsls	r3, r3, #4
 80121aa:	440b      	add	r3, r1
 80121ac:	3304      	adds	r3, #4
 80121ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	695a      	ldr	r2, [r3, #20]
 80121b4:	491a      	ldr	r1, [pc, #104]	; (8012220 <inc_lock+0x118>)
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	011b      	lsls	r3, r3, #4
 80121ba:	440b      	add	r3, r1
 80121bc:	3308      	adds	r3, #8
 80121be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80121c0:	4a17      	ldr	r2, [pc, #92]	; (8012220 <inc_lock+0x118>)
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	011b      	lsls	r3, r3, #4
 80121c6:	4413      	add	r3, r2
 80121c8:	330c      	adds	r3, #12
 80121ca:	2200      	movs	r2, #0
 80121cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80121ce:	683b      	ldr	r3, [r7, #0]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d009      	beq.n	80121e8 <inc_lock+0xe0>
 80121d4:	4a12      	ldr	r2, [pc, #72]	; (8012220 <inc_lock+0x118>)
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	011b      	lsls	r3, r3, #4
 80121da:	4413      	add	r3, r2
 80121dc:	330c      	adds	r3, #12
 80121de:	881b      	ldrh	r3, [r3, #0]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d001      	beq.n	80121e8 <inc_lock+0xe0>
 80121e4:	2300      	movs	r3, #0
 80121e6:	e015      	b.n	8012214 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d108      	bne.n	8012200 <inc_lock+0xf8>
 80121ee:	4a0c      	ldr	r2, [pc, #48]	; (8012220 <inc_lock+0x118>)
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	011b      	lsls	r3, r3, #4
 80121f4:	4413      	add	r3, r2
 80121f6:	330c      	adds	r3, #12
 80121f8:	881b      	ldrh	r3, [r3, #0]
 80121fa:	3301      	adds	r3, #1
 80121fc:	b29a      	uxth	r2, r3
 80121fe:	e001      	b.n	8012204 <inc_lock+0xfc>
 8012200:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012204:	4906      	ldr	r1, [pc, #24]	; (8012220 <inc_lock+0x118>)
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	011b      	lsls	r3, r3, #4
 801220a:	440b      	add	r3, r1
 801220c:	330c      	adds	r3, #12
 801220e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	3301      	adds	r3, #1
}
 8012214:	4618      	mov	r0, r3
 8012216:	3714      	adds	r7, #20
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr
 8012220:	20000838 	.word	0x20000838

08012224 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012224:	b480      	push	{r7}
 8012226:	b085      	sub	sp, #20
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	3b01      	subs	r3, #1
 8012230:	607b      	str	r3, [r7, #4]
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2b01      	cmp	r3, #1
 8012236:	d825      	bhi.n	8012284 <dec_lock+0x60>
		n = Files[i].ctr;
 8012238:	4a17      	ldr	r2, [pc, #92]	; (8012298 <dec_lock+0x74>)
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	011b      	lsls	r3, r3, #4
 801223e:	4413      	add	r3, r2
 8012240:	330c      	adds	r3, #12
 8012242:	881b      	ldrh	r3, [r3, #0]
 8012244:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012246:	89fb      	ldrh	r3, [r7, #14]
 8012248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801224c:	d101      	bne.n	8012252 <dec_lock+0x2e>
 801224e:	2300      	movs	r3, #0
 8012250:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012252:	89fb      	ldrh	r3, [r7, #14]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d002      	beq.n	801225e <dec_lock+0x3a>
 8012258:	89fb      	ldrh	r3, [r7, #14]
 801225a:	3b01      	subs	r3, #1
 801225c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801225e:	4a0e      	ldr	r2, [pc, #56]	; (8012298 <dec_lock+0x74>)
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	011b      	lsls	r3, r3, #4
 8012264:	4413      	add	r3, r2
 8012266:	330c      	adds	r3, #12
 8012268:	89fa      	ldrh	r2, [r7, #14]
 801226a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801226c:	89fb      	ldrh	r3, [r7, #14]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d105      	bne.n	801227e <dec_lock+0x5a>
 8012272:	4a09      	ldr	r2, [pc, #36]	; (8012298 <dec_lock+0x74>)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	011b      	lsls	r3, r3, #4
 8012278:	4413      	add	r3, r2
 801227a:	2200      	movs	r2, #0
 801227c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801227e:	2300      	movs	r3, #0
 8012280:	737b      	strb	r3, [r7, #13]
 8012282:	e001      	b.n	8012288 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012284:	2302      	movs	r3, #2
 8012286:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012288:	7b7b      	ldrb	r3, [r7, #13]
}
 801228a:	4618      	mov	r0, r3
 801228c:	3714      	adds	r7, #20
 801228e:	46bd      	mov	sp, r7
 8012290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012294:	4770      	bx	lr
 8012296:	bf00      	nop
 8012298:	20000838 	.word	0x20000838

0801229c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801229c:	b480      	push	{r7}
 801229e:	b085      	sub	sp, #20
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80122a4:	2300      	movs	r3, #0
 80122a6:	60fb      	str	r3, [r7, #12]
 80122a8:	e010      	b.n	80122cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80122aa:	4a0d      	ldr	r2, [pc, #52]	; (80122e0 <clear_lock+0x44>)
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	011b      	lsls	r3, r3, #4
 80122b0:	4413      	add	r3, r2
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	687a      	ldr	r2, [r7, #4]
 80122b6:	429a      	cmp	r2, r3
 80122b8:	d105      	bne.n	80122c6 <clear_lock+0x2a>
 80122ba:	4a09      	ldr	r2, [pc, #36]	; (80122e0 <clear_lock+0x44>)
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	011b      	lsls	r3, r3, #4
 80122c0:	4413      	add	r3, r2
 80122c2:	2200      	movs	r2, #0
 80122c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	3301      	adds	r3, #1
 80122ca:	60fb      	str	r3, [r7, #12]
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	2b01      	cmp	r3, #1
 80122d0:	d9eb      	bls.n	80122aa <clear_lock+0xe>
	}
}
 80122d2:	bf00      	nop
 80122d4:	bf00      	nop
 80122d6:	3714      	adds	r7, #20
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr
 80122e0:	20000838 	.word	0x20000838

080122e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b086      	sub	sp, #24
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80122ec:	2300      	movs	r3, #0
 80122ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	78db      	ldrb	r3, [r3, #3]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d034      	beq.n	8012362 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	7858      	ldrb	r0, [r3, #1]
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012308:	2301      	movs	r3, #1
 801230a:	697a      	ldr	r2, [r7, #20]
 801230c:	f7ff fd0e 	bl	8011d2c <disk_write>
 8012310:	4603      	mov	r3, r0
 8012312:	2b00      	cmp	r3, #0
 8012314:	d002      	beq.n	801231c <sync_window+0x38>
			res = FR_DISK_ERR;
 8012316:	2301      	movs	r3, #1
 8012318:	73fb      	strb	r3, [r7, #15]
 801231a:	e022      	b.n	8012362 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2200      	movs	r2, #0
 8012320:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012326:	697a      	ldr	r2, [r7, #20]
 8012328:	1ad2      	subs	r2, r2, r3
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	69db      	ldr	r3, [r3, #28]
 801232e:	429a      	cmp	r2, r3
 8012330:	d217      	bcs.n	8012362 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	789b      	ldrb	r3, [r3, #2]
 8012336:	613b      	str	r3, [r7, #16]
 8012338:	e010      	b.n	801235c <sync_window+0x78>
					wsect += fs->fsize;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	69db      	ldr	r3, [r3, #28]
 801233e:	697a      	ldr	r2, [r7, #20]
 8012340:	4413      	add	r3, r2
 8012342:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	7858      	ldrb	r0, [r3, #1]
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801234e:	2301      	movs	r3, #1
 8012350:	697a      	ldr	r2, [r7, #20]
 8012352:	f7ff fceb 	bl	8011d2c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012356:	693b      	ldr	r3, [r7, #16]
 8012358:	3b01      	subs	r3, #1
 801235a:	613b      	str	r3, [r7, #16]
 801235c:	693b      	ldr	r3, [r7, #16]
 801235e:	2b01      	cmp	r3, #1
 8012360:	d8eb      	bhi.n	801233a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012362:	7bfb      	ldrb	r3, [r7, #15]
}
 8012364:	4618      	mov	r0, r3
 8012366:	3718      	adds	r7, #24
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012376:	2300      	movs	r3, #0
 8012378:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801237e:	683a      	ldr	r2, [r7, #0]
 8012380:	429a      	cmp	r2, r3
 8012382:	d01b      	beq.n	80123bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f7ff ffad 	bl	80122e4 <sync_window>
 801238a:	4603      	mov	r3, r0
 801238c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801238e:	7bfb      	ldrb	r3, [r7, #15]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d113      	bne.n	80123bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	7858      	ldrb	r0, [r3, #1]
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801239e:	2301      	movs	r3, #1
 80123a0:	683a      	ldr	r2, [r7, #0]
 80123a2:	f7ff fca3 	bl	8011cec <disk_read>
 80123a6:	4603      	mov	r3, r0
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d004      	beq.n	80123b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80123ac:	f04f 33ff 	mov.w	r3, #4294967295
 80123b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80123b2:	2301      	movs	r3, #1
 80123b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	683a      	ldr	r2, [r7, #0]
 80123ba:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80123bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3710      	adds	r7, #16
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
	...

080123c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b084      	sub	sp, #16
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f7ff ff87 	bl	80122e4 <sync_window>
 80123d6:	4603      	mov	r3, r0
 80123d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80123da:	7bfb      	ldrb	r3, [r7, #15]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d158      	bne.n	8012492 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	781b      	ldrb	r3, [r3, #0]
 80123e4:	2b03      	cmp	r3, #3
 80123e6:	d148      	bne.n	801247a <sync_fs+0xb2>
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	791b      	ldrb	r3, [r3, #4]
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d144      	bne.n	801247a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	3334      	adds	r3, #52	; 0x34
 80123f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80123f8:	2100      	movs	r1, #0
 80123fa:	4618      	mov	r0, r3
 80123fc:	f7ff fd77 	bl	8011eee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	3334      	adds	r3, #52	; 0x34
 8012404:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012408:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801240c:	4618      	mov	r0, r3
 801240e:	f7ff fd06 	bl	8011e1e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	3334      	adds	r3, #52	; 0x34
 8012416:	4921      	ldr	r1, [pc, #132]	; (801249c <sync_fs+0xd4>)
 8012418:	4618      	mov	r0, r3
 801241a:	f7ff fd1b 	bl	8011e54 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	3334      	adds	r3, #52	; 0x34
 8012422:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012426:	491e      	ldr	r1, [pc, #120]	; (80124a0 <sync_fs+0xd8>)
 8012428:	4618      	mov	r0, r3
 801242a:	f7ff fd13 	bl	8011e54 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	3334      	adds	r3, #52	; 0x34
 8012432:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	695b      	ldr	r3, [r3, #20]
 801243a:	4619      	mov	r1, r3
 801243c:	4610      	mov	r0, r2
 801243e:	f7ff fd09 	bl	8011e54 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	3334      	adds	r3, #52	; 0x34
 8012446:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	691b      	ldr	r3, [r3, #16]
 801244e:	4619      	mov	r1, r3
 8012450:	4610      	mov	r0, r2
 8012452:	f7ff fcff 	bl	8011e54 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	6a1b      	ldr	r3, [r3, #32]
 801245a:	1c5a      	adds	r2, r3, #1
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	7858      	ldrb	r0, [r3, #1]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801246e:	2301      	movs	r3, #1
 8012470:	f7ff fc5c 	bl	8011d2c <disk_write>
			fs->fsi_flag = 0;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2200      	movs	r2, #0
 8012478:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	785b      	ldrb	r3, [r3, #1]
 801247e:	2200      	movs	r2, #0
 8012480:	2100      	movs	r1, #0
 8012482:	4618      	mov	r0, r3
 8012484:	f7ff fc72 	bl	8011d6c <disk_ioctl>
 8012488:	4603      	mov	r3, r0
 801248a:	2b00      	cmp	r3, #0
 801248c:	d001      	beq.n	8012492 <sync_fs+0xca>
 801248e:	2301      	movs	r3, #1
 8012490:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012492:	7bfb      	ldrb	r3, [r7, #15]
}
 8012494:	4618      	mov	r0, r3
 8012496:	3710      	adds	r7, #16
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}
 801249c:	41615252 	.word	0x41615252
 80124a0:	61417272 	.word	0x61417272

080124a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80124a4:	b480      	push	{r7}
 80124a6:	b083      	sub	sp, #12
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
 80124ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	3b02      	subs	r3, #2
 80124b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	699b      	ldr	r3, [r3, #24]
 80124b8:	3b02      	subs	r3, #2
 80124ba:	683a      	ldr	r2, [r7, #0]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d301      	bcc.n	80124c4 <clust2sect+0x20>
 80124c0:	2300      	movs	r3, #0
 80124c2:	e008      	b.n	80124d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	895b      	ldrh	r3, [r3, #10]
 80124c8:	461a      	mov	r2, r3
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	fb03 f202 	mul.w	r2, r3, r2
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124d4:	4413      	add	r3, r2
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	370c      	adds	r7, #12
 80124da:	46bd      	mov	sp, r7
 80124dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e0:	4770      	bx	lr

080124e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80124e2:	b580      	push	{r7, lr}
 80124e4:	b086      	sub	sp, #24
 80124e6:	af00      	add	r7, sp, #0
 80124e8:	6078      	str	r0, [r7, #4]
 80124ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	2b01      	cmp	r3, #1
 80124f6:	d904      	bls.n	8012502 <get_fat+0x20>
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	699b      	ldr	r3, [r3, #24]
 80124fc:	683a      	ldr	r2, [r7, #0]
 80124fe:	429a      	cmp	r2, r3
 8012500:	d302      	bcc.n	8012508 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012502:	2301      	movs	r3, #1
 8012504:	617b      	str	r3, [r7, #20]
 8012506:	e08f      	b.n	8012628 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012508:	f04f 33ff 	mov.w	r3, #4294967295
 801250c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	2b03      	cmp	r3, #3
 8012514:	d062      	beq.n	80125dc <get_fat+0xfa>
 8012516:	2b03      	cmp	r3, #3
 8012518:	dc7c      	bgt.n	8012614 <get_fat+0x132>
 801251a:	2b01      	cmp	r3, #1
 801251c:	d002      	beq.n	8012524 <get_fat+0x42>
 801251e:	2b02      	cmp	r3, #2
 8012520:	d042      	beq.n	80125a8 <get_fat+0xc6>
 8012522:	e077      	b.n	8012614 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	60fb      	str	r3, [r7, #12]
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	085b      	lsrs	r3, r3, #1
 801252c:	68fa      	ldr	r2, [r7, #12]
 801252e:	4413      	add	r3, r2
 8012530:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	0a5b      	lsrs	r3, r3, #9
 801253a:	4413      	add	r3, r2
 801253c:	4619      	mov	r1, r3
 801253e:	6938      	ldr	r0, [r7, #16]
 8012540:	f7ff ff14 	bl	801236c <move_window>
 8012544:	4603      	mov	r3, r0
 8012546:	2b00      	cmp	r3, #0
 8012548:	d167      	bne.n	801261a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	1c5a      	adds	r2, r3, #1
 801254e:	60fa      	str	r2, [r7, #12]
 8012550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012554:	693a      	ldr	r2, [r7, #16]
 8012556:	4413      	add	r3, r2
 8012558:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801255c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801255e:	693b      	ldr	r3, [r7, #16]
 8012560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	0a5b      	lsrs	r3, r3, #9
 8012566:	4413      	add	r3, r2
 8012568:	4619      	mov	r1, r3
 801256a:	6938      	ldr	r0, [r7, #16]
 801256c:	f7ff fefe 	bl	801236c <move_window>
 8012570:	4603      	mov	r3, r0
 8012572:	2b00      	cmp	r3, #0
 8012574:	d153      	bne.n	801261e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801257c:	693a      	ldr	r2, [r7, #16]
 801257e:	4413      	add	r3, r2
 8012580:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012584:	021b      	lsls	r3, r3, #8
 8012586:	461a      	mov	r2, r3
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	4313      	orrs	r3, r2
 801258c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	f003 0301 	and.w	r3, r3, #1
 8012594:	2b00      	cmp	r3, #0
 8012596:	d002      	beq.n	801259e <get_fat+0xbc>
 8012598:	68bb      	ldr	r3, [r7, #8]
 801259a:	091b      	lsrs	r3, r3, #4
 801259c:	e002      	b.n	80125a4 <get_fat+0xc2>
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80125a4:	617b      	str	r3, [r7, #20]
			break;
 80125a6:	e03f      	b.n	8012628 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	0a1b      	lsrs	r3, r3, #8
 80125b0:	4413      	add	r3, r2
 80125b2:	4619      	mov	r1, r3
 80125b4:	6938      	ldr	r0, [r7, #16]
 80125b6:	f7ff fed9 	bl	801236c <move_window>
 80125ba:	4603      	mov	r3, r0
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d130      	bne.n	8012622 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	005b      	lsls	r3, r3, #1
 80125ca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80125ce:	4413      	add	r3, r2
 80125d0:	4618      	mov	r0, r3
 80125d2:	f7ff fbe9 	bl	8011da8 <ld_word>
 80125d6:	4603      	mov	r3, r0
 80125d8:	617b      	str	r3, [r7, #20]
			break;
 80125da:	e025      	b.n	8012628 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	09db      	lsrs	r3, r3, #7
 80125e4:	4413      	add	r3, r2
 80125e6:	4619      	mov	r1, r3
 80125e8:	6938      	ldr	r0, [r7, #16]
 80125ea:	f7ff febf 	bl	801236c <move_window>
 80125ee:	4603      	mov	r3, r0
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d118      	bne.n	8012626 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80125f4:	693b      	ldr	r3, [r7, #16]
 80125f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	009b      	lsls	r3, r3, #2
 80125fe:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012602:	4413      	add	r3, r2
 8012604:	4618      	mov	r0, r3
 8012606:	f7ff fbe7 	bl	8011dd8 <ld_dword>
 801260a:	4603      	mov	r3, r0
 801260c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012610:	617b      	str	r3, [r7, #20]
			break;
 8012612:	e009      	b.n	8012628 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012614:	2301      	movs	r3, #1
 8012616:	617b      	str	r3, [r7, #20]
 8012618:	e006      	b.n	8012628 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801261a:	bf00      	nop
 801261c:	e004      	b.n	8012628 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801261e:	bf00      	nop
 8012620:	e002      	b.n	8012628 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012622:	bf00      	nop
 8012624:	e000      	b.n	8012628 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012626:	bf00      	nop
		}
	}

	return val;
 8012628:	697b      	ldr	r3, [r7, #20]
}
 801262a:	4618      	mov	r0, r3
 801262c:	3718      	adds	r7, #24
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}

08012632 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012632:	b590      	push	{r4, r7, lr}
 8012634:	b089      	sub	sp, #36	; 0x24
 8012636:	af00      	add	r7, sp, #0
 8012638:	60f8      	str	r0, [r7, #12]
 801263a:	60b9      	str	r1, [r7, #8]
 801263c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801263e:	2302      	movs	r3, #2
 8012640:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	2b01      	cmp	r3, #1
 8012646:	f240 80d2 	bls.w	80127ee <put_fat+0x1bc>
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	699b      	ldr	r3, [r3, #24]
 801264e:	68ba      	ldr	r2, [r7, #8]
 8012650:	429a      	cmp	r2, r3
 8012652:	f080 80cc 	bcs.w	80127ee <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	2b03      	cmp	r3, #3
 801265c:	f000 8096 	beq.w	801278c <put_fat+0x15a>
 8012660:	2b03      	cmp	r3, #3
 8012662:	f300 80cd 	bgt.w	8012800 <put_fat+0x1ce>
 8012666:	2b01      	cmp	r3, #1
 8012668:	d002      	beq.n	8012670 <put_fat+0x3e>
 801266a:	2b02      	cmp	r3, #2
 801266c:	d06e      	beq.n	801274c <put_fat+0x11a>
 801266e:	e0c7      	b.n	8012800 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	61bb      	str	r3, [r7, #24]
 8012674:	69bb      	ldr	r3, [r7, #24]
 8012676:	085b      	lsrs	r3, r3, #1
 8012678:	69ba      	ldr	r2, [r7, #24]
 801267a:	4413      	add	r3, r2
 801267c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012682:	69bb      	ldr	r3, [r7, #24]
 8012684:	0a5b      	lsrs	r3, r3, #9
 8012686:	4413      	add	r3, r2
 8012688:	4619      	mov	r1, r3
 801268a:	68f8      	ldr	r0, [r7, #12]
 801268c:	f7ff fe6e 	bl	801236c <move_window>
 8012690:	4603      	mov	r3, r0
 8012692:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012694:	7ffb      	ldrb	r3, [r7, #31]
 8012696:	2b00      	cmp	r3, #0
 8012698:	f040 80ab 	bne.w	80127f2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80126a2:	69bb      	ldr	r3, [r7, #24]
 80126a4:	1c59      	adds	r1, r3, #1
 80126a6:	61b9      	str	r1, [r7, #24]
 80126a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126ac:	4413      	add	r3, r2
 80126ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80126b0:	68bb      	ldr	r3, [r7, #8]
 80126b2:	f003 0301 	and.w	r3, r3, #1
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d00d      	beq.n	80126d6 <put_fat+0xa4>
 80126ba:	697b      	ldr	r3, [r7, #20]
 80126bc:	781b      	ldrb	r3, [r3, #0]
 80126be:	b25b      	sxtb	r3, r3
 80126c0:	f003 030f 	and.w	r3, r3, #15
 80126c4:	b25a      	sxtb	r2, r3
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	b2db      	uxtb	r3, r3
 80126ca:	011b      	lsls	r3, r3, #4
 80126cc:	b25b      	sxtb	r3, r3
 80126ce:	4313      	orrs	r3, r2
 80126d0:	b25b      	sxtb	r3, r3
 80126d2:	b2db      	uxtb	r3, r3
 80126d4:	e001      	b.n	80126da <put_fat+0xa8>
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	b2db      	uxtb	r3, r3
 80126da:	697a      	ldr	r2, [r7, #20]
 80126dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	2201      	movs	r2, #1
 80126e2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126e8:	69bb      	ldr	r3, [r7, #24]
 80126ea:	0a5b      	lsrs	r3, r3, #9
 80126ec:	4413      	add	r3, r2
 80126ee:	4619      	mov	r1, r3
 80126f0:	68f8      	ldr	r0, [r7, #12]
 80126f2:	f7ff fe3b 	bl	801236c <move_window>
 80126f6:	4603      	mov	r3, r0
 80126f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80126fa:	7ffb      	ldrb	r3, [r7, #31]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d17a      	bne.n	80127f6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012706:	69bb      	ldr	r3, [r7, #24]
 8012708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801270c:	4413      	add	r3, r2
 801270e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012710:	68bb      	ldr	r3, [r7, #8]
 8012712:	f003 0301 	and.w	r3, r3, #1
 8012716:	2b00      	cmp	r3, #0
 8012718:	d003      	beq.n	8012722 <put_fat+0xf0>
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	091b      	lsrs	r3, r3, #4
 801271e:	b2db      	uxtb	r3, r3
 8012720:	e00e      	b.n	8012740 <put_fat+0x10e>
 8012722:	697b      	ldr	r3, [r7, #20]
 8012724:	781b      	ldrb	r3, [r3, #0]
 8012726:	b25b      	sxtb	r3, r3
 8012728:	f023 030f 	bic.w	r3, r3, #15
 801272c:	b25a      	sxtb	r2, r3
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	0a1b      	lsrs	r3, r3, #8
 8012732:	b25b      	sxtb	r3, r3
 8012734:	f003 030f 	and.w	r3, r3, #15
 8012738:	b25b      	sxtb	r3, r3
 801273a:	4313      	orrs	r3, r2
 801273c:	b25b      	sxtb	r3, r3
 801273e:	b2db      	uxtb	r3, r3
 8012740:	697a      	ldr	r2, [r7, #20]
 8012742:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	2201      	movs	r2, #1
 8012748:	70da      	strb	r2, [r3, #3]
			break;
 801274a:	e059      	b.n	8012800 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	0a1b      	lsrs	r3, r3, #8
 8012754:	4413      	add	r3, r2
 8012756:	4619      	mov	r1, r3
 8012758:	68f8      	ldr	r0, [r7, #12]
 801275a:	f7ff fe07 	bl	801236c <move_window>
 801275e:	4603      	mov	r3, r0
 8012760:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012762:	7ffb      	ldrb	r3, [r7, #31]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d148      	bne.n	80127fa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	005b      	lsls	r3, r3, #1
 8012772:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012776:	4413      	add	r3, r2
 8012778:	687a      	ldr	r2, [r7, #4]
 801277a:	b292      	uxth	r2, r2
 801277c:	4611      	mov	r1, r2
 801277e:	4618      	mov	r0, r3
 8012780:	f7ff fb4d 	bl	8011e1e <st_word>
			fs->wflag = 1;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	2201      	movs	r2, #1
 8012788:	70da      	strb	r2, [r3, #3]
			break;
 801278a:	e039      	b.n	8012800 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	09db      	lsrs	r3, r3, #7
 8012794:	4413      	add	r3, r2
 8012796:	4619      	mov	r1, r3
 8012798:	68f8      	ldr	r0, [r7, #12]
 801279a:	f7ff fde7 	bl	801236c <move_window>
 801279e:	4603      	mov	r3, r0
 80127a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80127a2:	7ffb      	ldrb	r3, [r7, #31]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d12a      	bne.n	80127fe <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	009b      	lsls	r3, r3, #2
 80127b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80127bc:	4413      	add	r3, r2
 80127be:	4618      	mov	r0, r3
 80127c0:	f7ff fb0a 	bl	8011dd8 <ld_dword>
 80127c4:	4603      	mov	r3, r0
 80127c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80127ca:	4323      	orrs	r3, r4
 80127cc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	009b      	lsls	r3, r3, #2
 80127d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80127dc:	4413      	add	r3, r2
 80127de:	6879      	ldr	r1, [r7, #4]
 80127e0:	4618      	mov	r0, r3
 80127e2:	f7ff fb37 	bl	8011e54 <st_dword>
			fs->wflag = 1;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	2201      	movs	r2, #1
 80127ea:	70da      	strb	r2, [r3, #3]
			break;
 80127ec:	e008      	b.n	8012800 <put_fat+0x1ce>
		}
	}
 80127ee:	bf00      	nop
 80127f0:	e006      	b.n	8012800 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80127f2:	bf00      	nop
 80127f4:	e004      	b.n	8012800 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80127f6:	bf00      	nop
 80127f8:	e002      	b.n	8012800 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80127fa:	bf00      	nop
 80127fc:	e000      	b.n	8012800 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80127fe:	bf00      	nop
	return res;
 8012800:	7ffb      	ldrb	r3, [r7, #31]
}
 8012802:	4618      	mov	r0, r3
 8012804:	3724      	adds	r7, #36	; 0x24
 8012806:	46bd      	mov	sp, r7
 8012808:	bd90      	pop	{r4, r7, pc}

0801280a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801280a:	b580      	push	{r7, lr}
 801280c:	b088      	sub	sp, #32
 801280e:	af00      	add	r7, sp, #0
 8012810:	60f8      	str	r0, [r7, #12]
 8012812:	60b9      	str	r1, [r7, #8]
 8012814:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012816:	2300      	movs	r3, #0
 8012818:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	2b01      	cmp	r3, #1
 8012824:	d904      	bls.n	8012830 <remove_chain+0x26>
 8012826:	69bb      	ldr	r3, [r7, #24]
 8012828:	699b      	ldr	r3, [r3, #24]
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	429a      	cmp	r2, r3
 801282e:	d301      	bcc.n	8012834 <remove_chain+0x2a>
 8012830:	2302      	movs	r3, #2
 8012832:	e04b      	b.n	80128cc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d00c      	beq.n	8012854 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801283a:	f04f 32ff 	mov.w	r2, #4294967295
 801283e:	6879      	ldr	r1, [r7, #4]
 8012840:	69b8      	ldr	r0, [r7, #24]
 8012842:	f7ff fef6 	bl	8012632 <put_fat>
 8012846:	4603      	mov	r3, r0
 8012848:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801284a:	7ffb      	ldrb	r3, [r7, #31]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d001      	beq.n	8012854 <remove_chain+0x4a>
 8012850:	7ffb      	ldrb	r3, [r7, #31]
 8012852:	e03b      	b.n	80128cc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012854:	68b9      	ldr	r1, [r7, #8]
 8012856:	68f8      	ldr	r0, [r7, #12]
 8012858:	f7ff fe43 	bl	80124e2 <get_fat>
 801285c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d031      	beq.n	80128c8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012864:	697b      	ldr	r3, [r7, #20]
 8012866:	2b01      	cmp	r3, #1
 8012868:	d101      	bne.n	801286e <remove_chain+0x64>
 801286a:	2302      	movs	r3, #2
 801286c:	e02e      	b.n	80128cc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801286e:	697b      	ldr	r3, [r7, #20]
 8012870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012874:	d101      	bne.n	801287a <remove_chain+0x70>
 8012876:	2301      	movs	r3, #1
 8012878:	e028      	b.n	80128cc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801287a:	2200      	movs	r2, #0
 801287c:	68b9      	ldr	r1, [r7, #8]
 801287e:	69b8      	ldr	r0, [r7, #24]
 8012880:	f7ff fed7 	bl	8012632 <put_fat>
 8012884:	4603      	mov	r3, r0
 8012886:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012888:	7ffb      	ldrb	r3, [r7, #31]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d001      	beq.n	8012892 <remove_chain+0x88>
 801288e:	7ffb      	ldrb	r3, [r7, #31]
 8012890:	e01c      	b.n	80128cc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012892:	69bb      	ldr	r3, [r7, #24]
 8012894:	695a      	ldr	r2, [r3, #20]
 8012896:	69bb      	ldr	r3, [r7, #24]
 8012898:	699b      	ldr	r3, [r3, #24]
 801289a:	3b02      	subs	r3, #2
 801289c:	429a      	cmp	r2, r3
 801289e:	d20b      	bcs.n	80128b8 <remove_chain+0xae>
			fs->free_clst++;
 80128a0:	69bb      	ldr	r3, [r7, #24]
 80128a2:	695b      	ldr	r3, [r3, #20]
 80128a4:	1c5a      	adds	r2, r3, #1
 80128a6:	69bb      	ldr	r3, [r7, #24]
 80128a8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80128aa:	69bb      	ldr	r3, [r7, #24]
 80128ac:	791b      	ldrb	r3, [r3, #4]
 80128ae:	f043 0301 	orr.w	r3, r3, #1
 80128b2:	b2da      	uxtb	r2, r3
 80128b4:	69bb      	ldr	r3, [r7, #24]
 80128b6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80128b8:	697b      	ldr	r3, [r7, #20]
 80128ba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80128bc:	69bb      	ldr	r3, [r7, #24]
 80128be:	699b      	ldr	r3, [r3, #24]
 80128c0:	68ba      	ldr	r2, [r7, #8]
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d3c6      	bcc.n	8012854 <remove_chain+0x4a>
 80128c6:	e000      	b.n	80128ca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80128c8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80128ca:	2300      	movs	r3, #0
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	3720      	adds	r7, #32
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b088      	sub	sp, #32
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d10d      	bne.n	8012906 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80128ea:	693b      	ldr	r3, [r7, #16]
 80128ec:	691b      	ldr	r3, [r3, #16]
 80128ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80128f0:	69bb      	ldr	r3, [r7, #24]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d004      	beq.n	8012900 <create_chain+0x2c>
 80128f6:	693b      	ldr	r3, [r7, #16]
 80128f8:	699b      	ldr	r3, [r3, #24]
 80128fa:	69ba      	ldr	r2, [r7, #24]
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d31b      	bcc.n	8012938 <create_chain+0x64>
 8012900:	2301      	movs	r3, #1
 8012902:	61bb      	str	r3, [r7, #24]
 8012904:	e018      	b.n	8012938 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012906:	6839      	ldr	r1, [r7, #0]
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f7ff fdea 	bl	80124e2 <get_fat>
 801290e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	2b01      	cmp	r3, #1
 8012914:	d801      	bhi.n	801291a <create_chain+0x46>
 8012916:	2301      	movs	r3, #1
 8012918:	e070      	b.n	80129fc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012920:	d101      	bne.n	8012926 <create_chain+0x52>
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	e06a      	b.n	80129fc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012926:	693b      	ldr	r3, [r7, #16]
 8012928:	699b      	ldr	r3, [r3, #24]
 801292a:	68fa      	ldr	r2, [r7, #12]
 801292c:	429a      	cmp	r2, r3
 801292e:	d201      	bcs.n	8012934 <create_chain+0x60>
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	e063      	b.n	80129fc <create_chain+0x128>
		scl = clst;
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012938:	69bb      	ldr	r3, [r7, #24]
 801293a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801293c:	69fb      	ldr	r3, [r7, #28]
 801293e:	3301      	adds	r3, #1
 8012940:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	699b      	ldr	r3, [r3, #24]
 8012946:	69fa      	ldr	r2, [r7, #28]
 8012948:	429a      	cmp	r2, r3
 801294a:	d307      	bcc.n	801295c <create_chain+0x88>
				ncl = 2;
 801294c:	2302      	movs	r3, #2
 801294e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012950:	69fa      	ldr	r2, [r7, #28]
 8012952:	69bb      	ldr	r3, [r7, #24]
 8012954:	429a      	cmp	r2, r3
 8012956:	d901      	bls.n	801295c <create_chain+0x88>
 8012958:	2300      	movs	r3, #0
 801295a:	e04f      	b.n	80129fc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801295c:	69f9      	ldr	r1, [r7, #28]
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f7ff fdbf 	bl	80124e2 <get_fat>
 8012964:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d00e      	beq.n	801298a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	2b01      	cmp	r3, #1
 8012970:	d003      	beq.n	801297a <create_chain+0xa6>
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012978:	d101      	bne.n	801297e <create_chain+0xaa>
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	e03e      	b.n	80129fc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801297e:	69fa      	ldr	r2, [r7, #28]
 8012980:	69bb      	ldr	r3, [r7, #24]
 8012982:	429a      	cmp	r2, r3
 8012984:	d1da      	bne.n	801293c <create_chain+0x68>
 8012986:	2300      	movs	r3, #0
 8012988:	e038      	b.n	80129fc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801298a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801298c:	f04f 32ff 	mov.w	r2, #4294967295
 8012990:	69f9      	ldr	r1, [r7, #28]
 8012992:	6938      	ldr	r0, [r7, #16]
 8012994:	f7ff fe4d 	bl	8012632 <put_fat>
 8012998:	4603      	mov	r3, r0
 801299a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801299c:	7dfb      	ldrb	r3, [r7, #23]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d109      	bne.n	80129b6 <create_chain+0xe2>
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d006      	beq.n	80129b6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80129a8:	69fa      	ldr	r2, [r7, #28]
 80129aa:	6839      	ldr	r1, [r7, #0]
 80129ac:	6938      	ldr	r0, [r7, #16]
 80129ae:	f7ff fe40 	bl	8012632 <put_fat>
 80129b2:	4603      	mov	r3, r0
 80129b4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80129b6:	7dfb      	ldrb	r3, [r7, #23]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d116      	bne.n	80129ea <create_chain+0x116>
		fs->last_clst = ncl;
 80129bc:	693b      	ldr	r3, [r7, #16]
 80129be:	69fa      	ldr	r2, [r7, #28]
 80129c0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80129c2:	693b      	ldr	r3, [r7, #16]
 80129c4:	695a      	ldr	r2, [r3, #20]
 80129c6:	693b      	ldr	r3, [r7, #16]
 80129c8:	699b      	ldr	r3, [r3, #24]
 80129ca:	3b02      	subs	r3, #2
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d804      	bhi.n	80129da <create_chain+0x106>
 80129d0:	693b      	ldr	r3, [r7, #16]
 80129d2:	695b      	ldr	r3, [r3, #20]
 80129d4:	1e5a      	subs	r2, r3, #1
 80129d6:	693b      	ldr	r3, [r7, #16]
 80129d8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	791b      	ldrb	r3, [r3, #4]
 80129de:	f043 0301 	orr.w	r3, r3, #1
 80129e2:	b2da      	uxtb	r2, r3
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	711a      	strb	r2, [r3, #4]
 80129e8:	e007      	b.n	80129fa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80129ea:	7dfb      	ldrb	r3, [r7, #23]
 80129ec:	2b01      	cmp	r3, #1
 80129ee:	d102      	bne.n	80129f6 <create_chain+0x122>
 80129f0:	f04f 33ff 	mov.w	r3, #4294967295
 80129f4:	e000      	b.n	80129f8 <create_chain+0x124>
 80129f6:	2301      	movs	r3, #1
 80129f8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80129fa:	69fb      	ldr	r3, [r7, #28]
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	3720      	adds	r7, #32
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}

08012a04 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012a04:	b480      	push	{r7}
 8012a06:	b087      	sub	sp, #28
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a18:	3304      	adds	r3, #4
 8012a1a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	0a5b      	lsrs	r3, r3, #9
 8012a20:	68fa      	ldr	r2, [r7, #12]
 8012a22:	8952      	ldrh	r2, [r2, #10]
 8012a24:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a28:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	1d1a      	adds	r2, r3, #4
 8012a2e:	613a      	str	r2, [r7, #16]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d101      	bne.n	8012a3e <clmt_clust+0x3a>
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	e010      	b.n	8012a60 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012a3e:	697a      	ldr	r2, [r7, #20]
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d307      	bcc.n	8012a56 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012a46:	697a      	ldr	r2, [r7, #20]
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	1ad3      	subs	r3, r2, r3
 8012a4c:	617b      	str	r3, [r7, #20]
 8012a4e:	693b      	ldr	r3, [r7, #16]
 8012a50:	3304      	adds	r3, #4
 8012a52:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012a54:	e7e9      	b.n	8012a2a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012a56:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	681a      	ldr	r2, [r3, #0]
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	4413      	add	r3, r2
}
 8012a60:	4618      	mov	r0, r3
 8012a62:	371c      	adds	r7, #28
 8012a64:	46bd      	mov	sp, r7
 8012a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6a:	4770      	bx	lr

08012a6c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b086      	sub	sp, #24
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012a82:	d204      	bcs.n	8012a8e <dir_sdi+0x22>
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	f003 031f 	and.w	r3, r3, #31
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d001      	beq.n	8012a92 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012a8e:	2302      	movs	r3, #2
 8012a90:	e063      	b.n	8012b5a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	683a      	ldr	r2, [r7, #0]
 8012a96:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	689b      	ldr	r3, [r3, #8]
 8012a9c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d106      	bne.n	8012ab2 <dir_sdi+0x46>
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	781b      	ldrb	r3, [r3, #0]
 8012aa8:	2b02      	cmp	r3, #2
 8012aaa:	d902      	bls.n	8012ab2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ab0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d10c      	bne.n	8012ad2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	095b      	lsrs	r3, r3, #5
 8012abc:	693a      	ldr	r2, [r7, #16]
 8012abe:	8912      	ldrh	r2, [r2, #8]
 8012ac0:	4293      	cmp	r3, r2
 8012ac2:	d301      	bcc.n	8012ac8 <dir_sdi+0x5c>
 8012ac4:	2302      	movs	r3, #2
 8012ac6:	e048      	b.n	8012b5a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012ac8:	693b      	ldr	r3, [r7, #16]
 8012aca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	61da      	str	r2, [r3, #28]
 8012ad0:	e029      	b.n	8012b26 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012ad2:	693b      	ldr	r3, [r7, #16]
 8012ad4:	895b      	ldrh	r3, [r3, #10]
 8012ad6:	025b      	lsls	r3, r3, #9
 8012ad8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012ada:	e019      	b.n	8012b10 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	6979      	ldr	r1, [r7, #20]
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	f7ff fcfe 	bl	80124e2 <get_fat>
 8012ae6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012aee:	d101      	bne.n	8012af4 <dir_sdi+0x88>
 8012af0:	2301      	movs	r3, #1
 8012af2:	e032      	b.n	8012b5a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012af4:	697b      	ldr	r3, [r7, #20]
 8012af6:	2b01      	cmp	r3, #1
 8012af8:	d904      	bls.n	8012b04 <dir_sdi+0x98>
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	699b      	ldr	r3, [r3, #24]
 8012afe:	697a      	ldr	r2, [r7, #20]
 8012b00:	429a      	cmp	r2, r3
 8012b02:	d301      	bcc.n	8012b08 <dir_sdi+0x9c>
 8012b04:	2302      	movs	r3, #2
 8012b06:	e028      	b.n	8012b5a <dir_sdi+0xee>
			ofs -= csz;
 8012b08:	683a      	ldr	r2, [r7, #0]
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	1ad3      	subs	r3, r2, r3
 8012b0e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012b10:	683a      	ldr	r2, [r7, #0]
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	429a      	cmp	r2, r3
 8012b16:	d2e1      	bcs.n	8012adc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012b18:	6979      	ldr	r1, [r7, #20]
 8012b1a:	6938      	ldr	r0, [r7, #16]
 8012b1c:	f7ff fcc2 	bl	80124a4 <clust2sect>
 8012b20:	4602      	mov	r2, r0
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	697a      	ldr	r2, [r7, #20]
 8012b2a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	69db      	ldr	r3, [r3, #28]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d101      	bne.n	8012b38 <dir_sdi+0xcc>
 8012b34:	2302      	movs	r3, #2
 8012b36:	e010      	b.n	8012b5a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	69da      	ldr	r2, [r3, #28]
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	0a5b      	lsrs	r3, r3, #9
 8012b40:	441a      	add	r2, r3
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b52:	441a      	add	r2, r3
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012b58:	2300      	movs	r3, #0
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3718      	adds	r7, #24
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}

08012b62 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012b62:	b580      	push	{r7, lr}
 8012b64:	b086      	sub	sp, #24
 8012b66:	af00      	add	r7, sp, #0
 8012b68:	6078      	str	r0, [r7, #4]
 8012b6a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	695b      	ldr	r3, [r3, #20]
 8012b76:	3320      	adds	r3, #32
 8012b78:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	69db      	ldr	r3, [r3, #28]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d003      	beq.n	8012b8a <dir_next+0x28>
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012b88:	d301      	bcc.n	8012b8e <dir_next+0x2c>
 8012b8a:	2304      	movs	r3, #4
 8012b8c:	e0aa      	b.n	8012ce4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012b8e:	68bb      	ldr	r3, [r7, #8]
 8012b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	f040 8098 	bne.w	8012cca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	69db      	ldr	r3, [r3, #28]
 8012b9e:	1c5a      	adds	r2, r3, #1
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	699b      	ldr	r3, [r3, #24]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d10b      	bne.n	8012bc4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012bac:	68bb      	ldr	r3, [r7, #8]
 8012bae:	095b      	lsrs	r3, r3, #5
 8012bb0:	68fa      	ldr	r2, [r7, #12]
 8012bb2:	8912      	ldrh	r2, [r2, #8]
 8012bb4:	4293      	cmp	r3, r2
 8012bb6:	f0c0 8088 	bcc.w	8012cca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	61da      	str	r2, [r3, #28]
 8012bc0:	2304      	movs	r3, #4
 8012bc2:	e08f      	b.n	8012ce4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	0a5b      	lsrs	r3, r3, #9
 8012bc8:	68fa      	ldr	r2, [r7, #12]
 8012bca:	8952      	ldrh	r2, [r2, #10]
 8012bcc:	3a01      	subs	r2, #1
 8012bce:	4013      	ands	r3, r2
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d17a      	bne.n	8012cca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012bd4:	687a      	ldr	r2, [r7, #4]
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	699b      	ldr	r3, [r3, #24]
 8012bda:	4619      	mov	r1, r3
 8012bdc:	4610      	mov	r0, r2
 8012bde:	f7ff fc80 	bl	80124e2 <get_fat>
 8012be2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	2b01      	cmp	r3, #1
 8012be8:	d801      	bhi.n	8012bee <dir_next+0x8c>
 8012bea:	2302      	movs	r3, #2
 8012bec:	e07a      	b.n	8012ce4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bf4:	d101      	bne.n	8012bfa <dir_next+0x98>
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	e074      	b.n	8012ce4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	699b      	ldr	r3, [r3, #24]
 8012bfe:	697a      	ldr	r2, [r7, #20]
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d358      	bcc.n	8012cb6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d104      	bne.n	8012c14 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	61da      	str	r2, [r3, #28]
 8012c10:	2304      	movs	r3, #4
 8012c12:	e067      	b.n	8012ce4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012c14:	687a      	ldr	r2, [r7, #4]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	699b      	ldr	r3, [r3, #24]
 8012c1a:	4619      	mov	r1, r3
 8012c1c:	4610      	mov	r0, r2
 8012c1e:	f7ff fe59 	bl	80128d4 <create_chain>
 8012c22:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d101      	bne.n	8012c2e <dir_next+0xcc>
 8012c2a:	2307      	movs	r3, #7
 8012c2c:	e05a      	b.n	8012ce4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012c2e:	697b      	ldr	r3, [r7, #20]
 8012c30:	2b01      	cmp	r3, #1
 8012c32:	d101      	bne.n	8012c38 <dir_next+0xd6>
 8012c34:	2302      	movs	r3, #2
 8012c36:	e055      	b.n	8012ce4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012c38:	697b      	ldr	r3, [r7, #20]
 8012c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c3e:	d101      	bne.n	8012c44 <dir_next+0xe2>
 8012c40:	2301      	movs	r3, #1
 8012c42:	e04f      	b.n	8012ce4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012c44:	68f8      	ldr	r0, [r7, #12]
 8012c46:	f7ff fb4d 	bl	80122e4 <sync_window>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d001      	beq.n	8012c54 <dir_next+0xf2>
 8012c50:	2301      	movs	r3, #1
 8012c52:	e047      	b.n	8012ce4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	3334      	adds	r3, #52	; 0x34
 8012c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012c5c:	2100      	movs	r1, #0
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7ff f945 	bl	8011eee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012c64:	2300      	movs	r3, #0
 8012c66:	613b      	str	r3, [r7, #16]
 8012c68:	6979      	ldr	r1, [r7, #20]
 8012c6a:	68f8      	ldr	r0, [r7, #12]
 8012c6c:	f7ff fc1a 	bl	80124a4 <clust2sect>
 8012c70:	4602      	mov	r2, r0
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	631a      	str	r2, [r3, #48]	; 0x30
 8012c76:	e012      	b.n	8012c9e <dir_next+0x13c>
						fs->wflag = 1;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	2201      	movs	r2, #1
 8012c7c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012c7e:	68f8      	ldr	r0, [r7, #12]
 8012c80:	f7ff fb30 	bl	80122e4 <sync_window>
 8012c84:	4603      	mov	r3, r0
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d001      	beq.n	8012c8e <dir_next+0x12c>
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	e02a      	b.n	8012ce4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	3301      	adds	r3, #1
 8012c92:	613b      	str	r3, [r7, #16]
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c98:	1c5a      	adds	r2, r3, #1
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	895b      	ldrh	r3, [r3, #10]
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	693b      	ldr	r3, [r7, #16]
 8012ca6:	4293      	cmp	r3, r2
 8012ca8:	d3e6      	bcc.n	8012c78 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	1ad2      	subs	r2, r2, r3
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	697a      	ldr	r2, [r7, #20]
 8012cba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012cbc:	6979      	ldr	r1, [r7, #20]
 8012cbe:	68f8      	ldr	r0, [r7, #12]
 8012cc0:	f7ff fbf0 	bl	80124a4 <clust2sect>
 8012cc4:	4602      	mov	r2, r0
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	68ba      	ldr	r2, [r7, #8]
 8012cce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cdc:	441a      	add	r2, r3
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012ce2:	2300      	movs	r3, #0
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3718      	adds	r7, #24
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}

08012cec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b086      	sub	sp, #24
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012cfc:	2100      	movs	r1, #0
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	f7ff feb4 	bl	8012a6c <dir_sdi>
 8012d04:	4603      	mov	r3, r0
 8012d06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012d08:	7dfb      	ldrb	r3, [r7, #23]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d12b      	bne.n	8012d66 <dir_alloc+0x7a>
		n = 0;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	69db      	ldr	r3, [r3, #28]
 8012d16:	4619      	mov	r1, r3
 8012d18:	68f8      	ldr	r0, [r7, #12]
 8012d1a:	f7ff fb27 	bl	801236c <move_window>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012d22:	7dfb      	ldrb	r3, [r7, #23]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d11d      	bne.n	8012d64 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	6a1b      	ldr	r3, [r3, #32]
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	2be5      	cmp	r3, #229	; 0xe5
 8012d30:	d004      	beq.n	8012d3c <dir_alloc+0x50>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6a1b      	ldr	r3, [r3, #32]
 8012d36:	781b      	ldrb	r3, [r3, #0]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d107      	bne.n	8012d4c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012d3c:	693b      	ldr	r3, [r7, #16]
 8012d3e:	3301      	adds	r3, #1
 8012d40:	613b      	str	r3, [r7, #16]
 8012d42:	693a      	ldr	r2, [r7, #16]
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d102      	bne.n	8012d50 <dir_alloc+0x64>
 8012d4a:	e00c      	b.n	8012d66 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012d50:	2101      	movs	r1, #1
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f7ff ff05 	bl	8012b62 <dir_next>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012d5c:	7dfb      	ldrb	r3, [r7, #23]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d0d7      	beq.n	8012d12 <dir_alloc+0x26>
 8012d62:	e000      	b.n	8012d66 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012d64:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012d66:	7dfb      	ldrb	r3, [r7, #23]
 8012d68:	2b04      	cmp	r3, #4
 8012d6a:	d101      	bne.n	8012d70 <dir_alloc+0x84>
 8012d6c:	2307      	movs	r3, #7
 8012d6e:	75fb      	strb	r3, [r7, #23]
	return res;
 8012d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3718      	adds	r7, #24
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}

08012d7a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012d7a:	b580      	push	{r7, lr}
 8012d7c:	b084      	sub	sp, #16
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	6078      	str	r0, [r7, #4]
 8012d82:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	331a      	adds	r3, #26
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f7ff f80d 	bl	8011da8 <ld_word>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	2b03      	cmp	r3, #3
 8012d98:	d109      	bne.n	8012dae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012d9a:	683b      	ldr	r3, [r7, #0]
 8012d9c:	3314      	adds	r3, #20
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f7ff f802 	bl	8011da8 <ld_word>
 8012da4:	4603      	mov	r3, r0
 8012da6:	041b      	lsls	r3, r3, #16
 8012da8:	68fa      	ldr	r2, [r7, #12]
 8012daa:	4313      	orrs	r3, r2
 8012dac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012dae:	68fb      	ldr	r3, [r7, #12]
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3710      	adds	r7, #16
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}

08012db8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b084      	sub	sp, #16
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	60f8      	str	r0, [r7, #12]
 8012dc0:	60b9      	str	r1, [r7, #8]
 8012dc2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012dc4:	68bb      	ldr	r3, [r7, #8]
 8012dc6:	331a      	adds	r3, #26
 8012dc8:	687a      	ldr	r2, [r7, #4]
 8012dca:	b292      	uxth	r2, r2
 8012dcc:	4611      	mov	r1, r2
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7ff f825 	bl	8011e1e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	781b      	ldrb	r3, [r3, #0]
 8012dd8:	2b03      	cmp	r3, #3
 8012dda:	d109      	bne.n	8012df0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	f103 0214 	add.w	r2, r3, #20
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	0c1b      	lsrs	r3, r3, #16
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	4619      	mov	r1, r3
 8012dea:	4610      	mov	r0, r2
 8012dec:	f7ff f817 	bl	8011e1e <st_word>
	}
}
 8012df0:	bf00      	nop
 8012df2:	3710      	adds	r7, #16
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}

08012df8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b086      	sub	sp, #24
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
 8012e00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012e02:	2304      	movs	r3, #4
 8012e04:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012e0c:	e03c      	b.n	8012e88 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	69db      	ldr	r3, [r3, #28]
 8012e12:	4619      	mov	r1, r3
 8012e14:	6938      	ldr	r0, [r7, #16]
 8012e16:	f7ff faa9 	bl	801236c <move_window>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012e1e:	7dfb      	ldrb	r3, [r7, #23]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d136      	bne.n	8012e92 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	6a1b      	ldr	r3, [r3, #32]
 8012e28:	781b      	ldrb	r3, [r3, #0]
 8012e2a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012e2c:	7bfb      	ldrb	r3, [r7, #15]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d102      	bne.n	8012e38 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012e32:	2304      	movs	r3, #4
 8012e34:	75fb      	strb	r3, [r7, #23]
 8012e36:	e031      	b.n	8012e9c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6a1b      	ldr	r3, [r3, #32]
 8012e3c:	330b      	adds	r3, #11
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e44:	73bb      	strb	r3, [r7, #14]
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	7bba      	ldrb	r2, [r7, #14]
 8012e4a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012e4c:	7bfb      	ldrb	r3, [r7, #15]
 8012e4e:	2be5      	cmp	r3, #229	; 0xe5
 8012e50:	d011      	beq.n	8012e76 <dir_read+0x7e>
 8012e52:	7bfb      	ldrb	r3, [r7, #15]
 8012e54:	2b2e      	cmp	r3, #46	; 0x2e
 8012e56:	d00e      	beq.n	8012e76 <dir_read+0x7e>
 8012e58:	7bbb      	ldrb	r3, [r7, #14]
 8012e5a:	2b0f      	cmp	r3, #15
 8012e5c:	d00b      	beq.n	8012e76 <dir_read+0x7e>
 8012e5e:	7bbb      	ldrb	r3, [r7, #14]
 8012e60:	f023 0320 	bic.w	r3, r3, #32
 8012e64:	2b08      	cmp	r3, #8
 8012e66:	bf0c      	ite	eq
 8012e68:	2301      	moveq	r3, #1
 8012e6a:	2300      	movne	r3, #0
 8012e6c:	b2db      	uxtb	r3, r3
 8012e6e:	461a      	mov	r2, r3
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	4293      	cmp	r3, r2
 8012e74:	d00f      	beq.n	8012e96 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012e76:	2100      	movs	r1, #0
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7ff fe72 	bl	8012b62 <dir_next>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012e82:	7dfb      	ldrb	r3, [r7, #23]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d108      	bne.n	8012e9a <dir_read+0xa2>
	while (dp->sect) {
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	69db      	ldr	r3, [r3, #28]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d1be      	bne.n	8012e0e <dir_read+0x16>
 8012e90:	e004      	b.n	8012e9c <dir_read+0xa4>
		if (res != FR_OK) break;
 8012e92:	bf00      	nop
 8012e94:	e002      	b.n	8012e9c <dir_read+0xa4>
				break;
 8012e96:	bf00      	nop
 8012e98:	e000      	b.n	8012e9c <dir_read+0xa4>
		if (res != FR_OK) break;
 8012e9a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012e9c:	7dfb      	ldrb	r3, [r7, #23]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d002      	beq.n	8012ea8 <dir_read+0xb0>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	61da      	str	r2, [r3, #28]
	return res;
 8012ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	3718      	adds	r7, #24
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}

08012eb2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012eb2:	b580      	push	{r7, lr}
 8012eb4:	b086      	sub	sp, #24
 8012eb6:	af00      	add	r7, sp, #0
 8012eb8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012ec0:	2100      	movs	r1, #0
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f7ff fdd2 	bl	8012a6c <dir_sdi>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012ecc:	7dfb      	ldrb	r3, [r7, #23]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d001      	beq.n	8012ed6 <dir_find+0x24>
 8012ed2:	7dfb      	ldrb	r3, [r7, #23]
 8012ed4:	e03e      	b.n	8012f54 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	69db      	ldr	r3, [r3, #28]
 8012eda:	4619      	mov	r1, r3
 8012edc:	6938      	ldr	r0, [r7, #16]
 8012ede:	f7ff fa45 	bl	801236c <move_window>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012ee6:	7dfb      	ldrb	r3, [r7, #23]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d12f      	bne.n	8012f4c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	6a1b      	ldr	r3, [r3, #32]
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012ef4:	7bfb      	ldrb	r3, [r7, #15]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d102      	bne.n	8012f00 <dir_find+0x4e>
 8012efa:	2304      	movs	r3, #4
 8012efc:	75fb      	strb	r3, [r7, #23]
 8012efe:	e028      	b.n	8012f52 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	6a1b      	ldr	r3, [r3, #32]
 8012f04:	330b      	adds	r3, #11
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f0c:	b2da      	uxtb	r2, r3
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	6a1b      	ldr	r3, [r3, #32]
 8012f16:	330b      	adds	r3, #11
 8012f18:	781b      	ldrb	r3, [r3, #0]
 8012f1a:	f003 0308 	and.w	r3, r3, #8
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d10a      	bne.n	8012f38 <dir_find+0x86>
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	6a18      	ldr	r0, [r3, #32]
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	3324      	adds	r3, #36	; 0x24
 8012f2a:	220b      	movs	r2, #11
 8012f2c:	4619      	mov	r1, r3
 8012f2e:	f7fe fff9 	bl	8011f24 <mem_cmp>
 8012f32:	4603      	mov	r3, r0
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d00b      	beq.n	8012f50 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012f38:	2100      	movs	r1, #0
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	f7ff fe11 	bl	8012b62 <dir_next>
 8012f40:	4603      	mov	r3, r0
 8012f42:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012f44:	7dfb      	ldrb	r3, [r7, #23]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d0c5      	beq.n	8012ed6 <dir_find+0x24>
 8012f4a:	e002      	b.n	8012f52 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012f4c:	bf00      	nop
 8012f4e:	e000      	b.n	8012f52 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012f50:	bf00      	nop

	return res;
 8012f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f54:	4618      	mov	r0, r3
 8012f56:	3718      	adds	r7, #24
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}

08012f5c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b084      	sub	sp, #16
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012f6a:	2101      	movs	r1, #1
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7ff febd 	bl	8012cec <dir_alloc>
 8012f72:	4603      	mov	r3, r0
 8012f74:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012f76:	7bfb      	ldrb	r3, [r7, #15]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d11c      	bne.n	8012fb6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	69db      	ldr	r3, [r3, #28]
 8012f80:	4619      	mov	r1, r3
 8012f82:	68b8      	ldr	r0, [r7, #8]
 8012f84:	f7ff f9f2 	bl	801236c <move_window>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012f8c:	7bfb      	ldrb	r3, [r7, #15]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d111      	bne.n	8012fb6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6a1b      	ldr	r3, [r3, #32]
 8012f96:	2220      	movs	r2, #32
 8012f98:	2100      	movs	r1, #0
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7fe ffa7 	bl	8011eee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	6a18      	ldr	r0, [r3, #32]
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	3324      	adds	r3, #36	; 0x24
 8012fa8:	220b      	movs	r2, #11
 8012faa:	4619      	mov	r1, r3
 8012fac:	f7fe ff7e 	bl	8011eac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	2201      	movs	r2, #1
 8012fb4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fb8:	4618      	mov	r0, r3
 8012fba:	3710      	adds	r7, #16
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}

08012fc0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b086      	sub	sp, #24
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
 8012fc8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	69db      	ldr	r3, [r3, #28]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d04e      	beq.n	8013076 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8012fd8:	2300      	movs	r3, #0
 8012fda:	613b      	str	r3, [r7, #16]
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8012fe0:	e021      	b.n	8013026 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	6a1a      	ldr	r2, [r3, #32]
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	1c59      	adds	r1, r3, #1
 8012fea:	6179      	str	r1, [r7, #20]
 8012fec:	4413      	add	r3, r2
 8012fee:	781b      	ldrb	r3, [r3, #0]
 8012ff0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012ff2:	7bfb      	ldrb	r3, [r7, #15]
 8012ff4:	2b20      	cmp	r3, #32
 8012ff6:	d100      	bne.n	8012ffa <get_fileinfo+0x3a>
 8012ff8:	e015      	b.n	8013026 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012ffa:	7bfb      	ldrb	r3, [r7, #15]
 8012ffc:	2b05      	cmp	r3, #5
 8012ffe:	d101      	bne.n	8013004 <get_fileinfo+0x44>
 8013000:	23e5      	movs	r3, #229	; 0xe5
 8013002:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	2b09      	cmp	r3, #9
 8013008:	d106      	bne.n	8013018 <get_fileinfo+0x58>
 801300a:	693b      	ldr	r3, [r7, #16]
 801300c:	1c5a      	adds	r2, r3, #1
 801300e:	613a      	str	r2, [r7, #16]
 8013010:	683a      	ldr	r2, [r7, #0]
 8013012:	4413      	add	r3, r2
 8013014:	222e      	movs	r2, #46	; 0x2e
 8013016:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8013018:	693b      	ldr	r3, [r7, #16]
 801301a:	1c5a      	adds	r2, r3, #1
 801301c:	613a      	str	r2, [r7, #16]
 801301e:	683a      	ldr	r2, [r7, #0]
 8013020:	4413      	add	r3, r2
 8013022:	7bfa      	ldrb	r2, [r7, #15]
 8013024:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8013026:	697b      	ldr	r3, [r7, #20]
 8013028:	2b0a      	cmp	r3, #10
 801302a:	d9da      	bls.n	8012fe2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 801302c:	683a      	ldr	r2, [r7, #0]
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	4413      	add	r3, r2
 8013032:	3309      	adds	r3, #9
 8013034:	2200      	movs	r2, #0
 8013036:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6a1b      	ldr	r3, [r3, #32]
 801303c:	7ada      	ldrb	r2, [r3, #11]
 801303e:	683b      	ldr	r3, [r7, #0]
 8013040:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6a1b      	ldr	r3, [r3, #32]
 8013046:	331c      	adds	r3, #28
 8013048:	4618      	mov	r0, r3
 801304a:	f7fe fec5 	bl	8011dd8 <ld_dword>
 801304e:	4602      	mov	r2, r0
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	6a1b      	ldr	r3, [r3, #32]
 8013058:	3316      	adds	r3, #22
 801305a:	4618      	mov	r0, r3
 801305c:	f7fe febc 	bl	8011dd8 <ld_dword>
 8013060:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	b29a      	uxth	r2, r3
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	80da      	strh	r2, [r3, #6]
 801306a:	68bb      	ldr	r3, [r7, #8]
 801306c:	0c1b      	lsrs	r3, r3, #16
 801306e:	b29a      	uxth	r2, r3
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	809a      	strh	r2, [r3, #4]
 8013074:	e000      	b.n	8013078 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013076:	bf00      	nop
}
 8013078:	3718      	adds	r7, #24
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
	...

08013080 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b088      	sub	sp, #32
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
 8013088:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	60fb      	str	r3, [r7, #12]
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	3324      	adds	r3, #36	; 0x24
 8013094:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013096:	220b      	movs	r2, #11
 8013098:	2120      	movs	r1, #32
 801309a:	68b8      	ldr	r0, [r7, #8]
 801309c:	f7fe ff27 	bl	8011eee <mem_set>
	si = i = 0; ni = 8;
 80130a0:	2300      	movs	r3, #0
 80130a2:	613b      	str	r3, [r7, #16]
 80130a4:	693b      	ldr	r3, [r7, #16]
 80130a6:	61fb      	str	r3, [r7, #28]
 80130a8:	2308      	movs	r3, #8
 80130aa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80130ac:	69fb      	ldr	r3, [r7, #28]
 80130ae:	1c5a      	adds	r2, r3, #1
 80130b0:	61fa      	str	r2, [r7, #28]
 80130b2:	68fa      	ldr	r2, [r7, #12]
 80130b4:	4413      	add	r3, r2
 80130b6:	781b      	ldrb	r3, [r3, #0]
 80130b8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80130ba:	7efb      	ldrb	r3, [r7, #27]
 80130bc:	2b20      	cmp	r3, #32
 80130be:	d94e      	bls.n	801315e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80130c0:	7efb      	ldrb	r3, [r7, #27]
 80130c2:	2b2f      	cmp	r3, #47	; 0x2f
 80130c4:	d006      	beq.n	80130d4 <create_name+0x54>
 80130c6:	7efb      	ldrb	r3, [r7, #27]
 80130c8:	2b5c      	cmp	r3, #92	; 0x5c
 80130ca:	d110      	bne.n	80130ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80130cc:	e002      	b.n	80130d4 <create_name+0x54>
 80130ce:	69fb      	ldr	r3, [r7, #28]
 80130d0:	3301      	adds	r3, #1
 80130d2:	61fb      	str	r3, [r7, #28]
 80130d4:	68fa      	ldr	r2, [r7, #12]
 80130d6:	69fb      	ldr	r3, [r7, #28]
 80130d8:	4413      	add	r3, r2
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	2b2f      	cmp	r3, #47	; 0x2f
 80130de:	d0f6      	beq.n	80130ce <create_name+0x4e>
 80130e0:	68fa      	ldr	r2, [r7, #12]
 80130e2:	69fb      	ldr	r3, [r7, #28]
 80130e4:	4413      	add	r3, r2
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	2b5c      	cmp	r3, #92	; 0x5c
 80130ea:	d0f0      	beq.n	80130ce <create_name+0x4e>
			break;
 80130ec:	e038      	b.n	8013160 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80130ee:	7efb      	ldrb	r3, [r7, #27]
 80130f0:	2b2e      	cmp	r3, #46	; 0x2e
 80130f2:	d003      	beq.n	80130fc <create_name+0x7c>
 80130f4:	693a      	ldr	r2, [r7, #16]
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d30c      	bcc.n	8013116 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	2b0b      	cmp	r3, #11
 8013100:	d002      	beq.n	8013108 <create_name+0x88>
 8013102:	7efb      	ldrb	r3, [r7, #27]
 8013104:	2b2e      	cmp	r3, #46	; 0x2e
 8013106:	d001      	beq.n	801310c <create_name+0x8c>
 8013108:	2306      	movs	r3, #6
 801310a:	e044      	b.n	8013196 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801310c:	2308      	movs	r3, #8
 801310e:	613b      	str	r3, [r7, #16]
 8013110:	230b      	movs	r3, #11
 8013112:	617b      	str	r3, [r7, #20]
			continue;
 8013114:	e022      	b.n	801315c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013116:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801311a:	2b00      	cmp	r3, #0
 801311c:	da04      	bge.n	8013128 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801311e:	7efb      	ldrb	r3, [r7, #27]
 8013120:	3b80      	subs	r3, #128	; 0x80
 8013122:	4a1f      	ldr	r2, [pc, #124]	; (80131a0 <create_name+0x120>)
 8013124:	5cd3      	ldrb	r3, [r2, r3]
 8013126:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013128:	7efb      	ldrb	r3, [r7, #27]
 801312a:	4619      	mov	r1, r3
 801312c:	481d      	ldr	r0, [pc, #116]	; (80131a4 <create_name+0x124>)
 801312e:	f7fe ff20 	bl	8011f72 <chk_chr>
 8013132:	4603      	mov	r3, r0
 8013134:	2b00      	cmp	r3, #0
 8013136:	d001      	beq.n	801313c <create_name+0xbc>
 8013138:	2306      	movs	r3, #6
 801313a:	e02c      	b.n	8013196 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801313c:	7efb      	ldrb	r3, [r7, #27]
 801313e:	2b60      	cmp	r3, #96	; 0x60
 8013140:	d905      	bls.n	801314e <create_name+0xce>
 8013142:	7efb      	ldrb	r3, [r7, #27]
 8013144:	2b7a      	cmp	r3, #122	; 0x7a
 8013146:	d802      	bhi.n	801314e <create_name+0xce>
 8013148:	7efb      	ldrb	r3, [r7, #27]
 801314a:	3b20      	subs	r3, #32
 801314c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	1c5a      	adds	r2, r3, #1
 8013152:	613a      	str	r2, [r7, #16]
 8013154:	68ba      	ldr	r2, [r7, #8]
 8013156:	4413      	add	r3, r2
 8013158:	7efa      	ldrb	r2, [r7, #27]
 801315a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801315c:	e7a6      	b.n	80130ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801315e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013160:	68fa      	ldr	r2, [r7, #12]
 8013162:	69fb      	ldr	r3, [r7, #28]
 8013164:	441a      	add	r2, r3
 8013166:	683b      	ldr	r3, [r7, #0]
 8013168:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d101      	bne.n	8013174 <create_name+0xf4>
 8013170:	2306      	movs	r3, #6
 8013172:	e010      	b.n	8013196 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	2be5      	cmp	r3, #229	; 0xe5
 801317a:	d102      	bne.n	8013182 <create_name+0x102>
 801317c:	68bb      	ldr	r3, [r7, #8]
 801317e:	2205      	movs	r2, #5
 8013180:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013182:	7efb      	ldrb	r3, [r7, #27]
 8013184:	2b20      	cmp	r3, #32
 8013186:	d801      	bhi.n	801318c <create_name+0x10c>
 8013188:	2204      	movs	r2, #4
 801318a:	e000      	b.n	801318e <create_name+0x10e>
 801318c:	2200      	movs	r2, #0
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	330b      	adds	r3, #11
 8013192:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013194:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013196:	4618      	mov	r0, r3
 8013198:	3720      	adds	r7, #32
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
 801319e:	bf00      	nop
 80131a0:	08020c70 	.word	0x08020c70
 80131a4:	08020a5c 	.word	0x08020a5c

080131a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b086      	sub	sp, #24
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80131b6:	693b      	ldr	r3, [r7, #16]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80131bc:	e002      	b.n	80131c4 <follow_path+0x1c>
 80131be:	683b      	ldr	r3, [r7, #0]
 80131c0:	3301      	adds	r3, #1
 80131c2:	603b      	str	r3, [r7, #0]
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	781b      	ldrb	r3, [r3, #0]
 80131c8:	2b2f      	cmp	r3, #47	; 0x2f
 80131ca:	d0f8      	beq.n	80131be <follow_path+0x16>
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	781b      	ldrb	r3, [r3, #0]
 80131d0:	2b5c      	cmp	r3, #92	; 0x5c
 80131d2:	d0f4      	beq.n	80131be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80131d4:	693b      	ldr	r3, [r7, #16]
 80131d6:	2200      	movs	r2, #0
 80131d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80131da:	683b      	ldr	r3, [r7, #0]
 80131dc:	781b      	ldrb	r3, [r3, #0]
 80131de:	2b1f      	cmp	r3, #31
 80131e0:	d80a      	bhi.n	80131f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2280      	movs	r2, #128	; 0x80
 80131e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80131ea:	2100      	movs	r1, #0
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f7ff fc3d 	bl	8012a6c <dir_sdi>
 80131f2:	4603      	mov	r3, r0
 80131f4:	75fb      	strb	r3, [r7, #23]
 80131f6:	e043      	b.n	8013280 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80131f8:	463b      	mov	r3, r7
 80131fa:	4619      	mov	r1, r3
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f7ff ff3f 	bl	8013080 <create_name>
 8013202:	4603      	mov	r3, r0
 8013204:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013206:	7dfb      	ldrb	r3, [r7, #23]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d134      	bne.n	8013276 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801320c:	6878      	ldr	r0, [r7, #4]
 801320e:	f7ff fe50 	bl	8012eb2 <dir_find>
 8013212:	4603      	mov	r3, r0
 8013214:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801321c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801321e:	7dfb      	ldrb	r3, [r7, #23]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d00a      	beq.n	801323a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013224:	7dfb      	ldrb	r3, [r7, #23]
 8013226:	2b04      	cmp	r3, #4
 8013228:	d127      	bne.n	801327a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801322a:	7afb      	ldrb	r3, [r7, #11]
 801322c:	f003 0304 	and.w	r3, r3, #4
 8013230:	2b00      	cmp	r3, #0
 8013232:	d122      	bne.n	801327a <follow_path+0xd2>
 8013234:	2305      	movs	r3, #5
 8013236:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013238:	e01f      	b.n	801327a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801323a:	7afb      	ldrb	r3, [r7, #11]
 801323c:	f003 0304 	and.w	r3, r3, #4
 8013240:	2b00      	cmp	r3, #0
 8013242:	d11c      	bne.n	801327e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	799b      	ldrb	r3, [r3, #6]
 8013248:	f003 0310 	and.w	r3, r3, #16
 801324c:	2b00      	cmp	r3, #0
 801324e:	d102      	bne.n	8013256 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013250:	2305      	movs	r3, #5
 8013252:	75fb      	strb	r3, [r7, #23]
 8013254:	e014      	b.n	8013280 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	695b      	ldr	r3, [r3, #20]
 8013260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013264:	4413      	add	r3, r2
 8013266:	4619      	mov	r1, r3
 8013268:	68f8      	ldr	r0, [r7, #12]
 801326a:	f7ff fd86 	bl	8012d7a <ld_clust>
 801326e:	4602      	mov	r2, r0
 8013270:	693b      	ldr	r3, [r7, #16]
 8013272:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013274:	e7c0      	b.n	80131f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8013276:	bf00      	nop
 8013278:	e002      	b.n	8013280 <follow_path+0xd8>
				break;
 801327a:	bf00      	nop
 801327c:	e000      	b.n	8013280 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801327e:	bf00      	nop
			}
		}
	}

	return res;
 8013280:	7dfb      	ldrb	r3, [r7, #23]
}
 8013282:	4618      	mov	r0, r3
 8013284:	3718      	adds	r7, #24
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}

0801328a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801328a:	b480      	push	{r7}
 801328c:	b087      	sub	sp, #28
 801328e:	af00      	add	r7, sp, #0
 8013290:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013292:	f04f 33ff 	mov.w	r3, #4294967295
 8013296:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d031      	beq.n	8013304 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	617b      	str	r3, [r7, #20]
 80132a6:	e002      	b.n	80132ae <get_ldnumber+0x24>
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	3301      	adds	r3, #1
 80132ac:	617b      	str	r3, [r7, #20]
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	781b      	ldrb	r3, [r3, #0]
 80132b2:	2b20      	cmp	r3, #32
 80132b4:	d903      	bls.n	80132be <get_ldnumber+0x34>
 80132b6:	697b      	ldr	r3, [r7, #20]
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	2b3a      	cmp	r3, #58	; 0x3a
 80132bc:	d1f4      	bne.n	80132a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	2b3a      	cmp	r3, #58	; 0x3a
 80132c4:	d11c      	bne.n	8013300 <get_ldnumber+0x76>
			tp = *path;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	1c5a      	adds	r2, r3, #1
 80132d0:	60fa      	str	r2, [r7, #12]
 80132d2:	781b      	ldrb	r3, [r3, #0]
 80132d4:	3b30      	subs	r3, #48	; 0x30
 80132d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80132d8:	68bb      	ldr	r3, [r7, #8]
 80132da:	2b09      	cmp	r3, #9
 80132dc:	d80e      	bhi.n	80132fc <get_ldnumber+0x72>
 80132de:	68fa      	ldr	r2, [r7, #12]
 80132e0:	697b      	ldr	r3, [r7, #20]
 80132e2:	429a      	cmp	r2, r3
 80132e4:	d10a      	bne.n	80132fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d107      	bne.n	80132fc <get_ldnumber+0x72>
					vol = (int)i;
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80132f0:	697b      	ldr	r3, [r7, #20]
 80132f2:	3301      	adds	r3, #1
 80132f4:	617b      	str	r3, [r7, #20]
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	697a      	ldr	r2, [r7, #20]
 80132fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	e002      	b.n	8013306 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013300:	2300      	movs	r3, #0
 8013302:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013304:	693b      	ldr	r3, [r7, #16]
}
 8013306:	4618      	mov	r0, r3
 8013308:	371c      	adds	r7, #28
 801330a:	46bd      	mov	sp, r7
 801330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013310:	4770      	bx	lr
	...

08013314 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b082      	sub	sp, #8
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2200      	movs	r2, #0
 8013322:	70da      	strb	r2, [r3, #3]
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	f04f 32ff 	mov.w	r2, #4294967295
 801332a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801332c:	6839      	ldr	r1, [r7, #0]
 801332e:	6878      	ldr	r0, [r7, #4]
 8013330:	f7ff f81c 	bl	801236c <move_window>
 8013334:	4603      	mov	r3, r0
 8013336:	2b00      	cmp	r3, #0
 8013338:	d001      	beq.n	801333e <check_fs+0x2a>
 801333a:	2304      	movs	r3, #4
 801333c:	e038      	b.n	80133b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	3334      	adds	r3, #52	; 0x34
 8013342:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013346:	4618      	mov	r0, r3
 8013348:	f7fe fd2e 	bl	8011da8 <ld_word>
 801334c:	4603      	mov	r3, r0
 801334e:	461a      	mov	r2, r3
 8013350:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013354:	429a      	cmp	r2, r3
 8013356:	d001      	beq.n	801335c <check_fs+0x48>
 8013358:	2303      	movs	r3, #3
 801335a:	e029      	b.n	80133b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013362:	2be9      	cmp	r3, #233	; 0xe9
 8013364:	d009      	beq.n	801337a <check_fs+0x66>
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801336c:	2beb      	cmp	r3, #235	; 0xeb
 801336e:	d11e      	bne.n	80133ae <check_fs+0x9a>
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013376:	2b90      	cmp	r3, #144	; 0x90
 8013378:	d119      	bne.n	80133ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	3334      	adds	r3, #52	; 0x34
 801337e:	3336      	adds	r3, #54	; 0x36
 8013380:	4618      	mov	r0, r3
 8013382:	f7fe fd29 	bl	8011dd8 <ld_dword>
 8013386:	4603      	mov	r3, r0
 8013388:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801338c:	4a0a      	ldr	r2, [pc, #40]	; (80133b8 <check_fs+0xa4>)
 801338e:	4293      	cmp	r3, r2
 8013390:	d101      	bne.n	8013396 <check_fs+0x82>
 8013392:	2300      	movs	r3, #0
 8013394:	e00c      	b.n	80133b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	3334      	adds	r3, #52	; 0x34
 801339a:	3352      	adds	r3, #82	; 0x52
 801339c:	4618      	mov	r0, r3
 801339e:	f7fe fd1b 	bl	8011dd8 <ld_dword>
 80133a2:	4603      	mov	r3, r0
 80133a4:	4a05      	ldr	r2, [pc, #20]	; (80133bc <check_fs+0xa8>)
 80133a6:	4293      	cmp	r3, r2
 80133a8:	d101      	bne.n	80133ae <check_fs+0x9a>
 80133aa:	2300      	movs	r3, #0
 80133ac:	e000      	b.n	80133b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80133ae:	2302      	movs	r3, #2
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	3708      	adds	r7, #8
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}
 80133b8:	00544146 	.word	0x00544146
 80133bc:	33544146 	.word	0x33544146

080133c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b096      	sub	sp, #88	; 0x58
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	60f8      	str	r0, [r7, #12]
 80133c8:	60b9      	str	r1, [r7, #8]
 80133ca:	4613      	mov	r3, r2
 80133cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80133ce:	68bb      	ldr	r3, [r7, #8]
 80133d0:	2200      	movs	r2, #0
 80133d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80133d4:	68f8      	ldr	r0, [r7, #12]
 80133d6:	f7ff ff58 	bl	801328a <get_ldnumber>
 80133da:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80133dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133de:	2b00      	cmp	r3, #0
 80133e0:	da01      	bge.n	80133e6 <find_volume+0x26>
 80133e2:	230b      	movs	r3, #11
 80133e4:	e236      	b.n	8013854 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80133e6:	4aac      	ldr	r2, [pc, #688]	; (8013698 <find_volume+0x2d8>)
 80133e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133ee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80133f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d101      	bne.n	80133fa <find_volume+0x3a>
 80133f6:	230c      	movs	r3, #12
 80133f8:	e22c      	b.n	8013854 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 80133fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80133fc:	f7fe fdd4 	bl	8011fa8 <lock_fs>
 8013400:	4603      	mov	r3, r0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d101      	bne.n	801340a <find_volume+0x4a>
 8013406:	230f      	movs	r3, #15
 8013408:	e224      	b.n	8013854 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801340e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013410:	79fb      	ldrb	r3, [r7, #7]
 8013412:	f023 0301 	bic.w	r3, r3, #1
 8013416:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801341a:	781b      	ldrb	r3, [r3, #0]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d01a      	beq.n	8013456 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8013420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013422:	785b      	ldrb	r3, [r3, #1]
 8013424:	4618      	mov	r0, r3
 8013426:	f7fe fc21 	bl	8011c6c <disk_status>
 801342a:	4603      	mov	r3, r0
 801342c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013430:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013434:	f003 0301 	and.w	r3, r3, #1
 8013438:	2b00      	cmp	r3, #0
 801343a:	d10c      	bne.n	8013456 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801343c:	79fb      	ldrb	r3, [r7, #7]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d007      	beq.n	8013452 <find_volume+0x92>
 8013442:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013446:	f003 0304 	and.w	r3, r3, #4
 801344a:	2b00      	cmp	r3, #0
 801344c:	d001      	beq.n	8013452 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801344e:	230a      	movs	r3, #10
 8013450:	e200      	b.n	8013854 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8013452:	2300      	movs	r3, #0
 8013454:	e1fe      	b.n	8013854 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013458:	2200      	movs	r2, #0
 801345a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801345c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801345e:	b2da      	uxtb	r2, r3
 8013460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013462:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013466:	785b      	ldrb	r3, [r3, #1]
 8013468:	4618      	mov	r0, r3
 801346a:	f7fe fc19 	bl	8011ca0 <disk_initialize>
 801346e:	4603      	mov	r3, r0
 8013470:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013474:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013478:	f003 0301 	and.w	r3, r3, #1
 801347c:	2b00      	cmp	r3, #0
 801347e:	d001      	beq.n	8013484 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013480:	2303      	movs	r3, #3
 8013482:	e1e7      	b.n	8013854 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013484:	79fb      	ldrb	r3, [r7, #7]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d007      	beq.n	801349a <find_volume+0xda>
 801348a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801348e:	f003 0304 	and.w	r3, r3, #4
 8013492:	2b00      	cmp	r3, #0
 8013494:	d001      	beq.n	801349a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8013496:	230a      	movs	r3, #10
 8013498:	e1dc      	b.n	8013854 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801349a:	2300      	movs	r3, #0
 801349c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801349e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80134a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80134a2:	f7ff ff37 	bl	8013314 <check_fs>
 80134a6:	4603      	mov	r3, r0
 80134a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80134ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134b0:	2b02      	cmp	r3, #2
 80134b2:	d14b      	bne.n	801354c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80134b4:	2300      	movs	r3, #0
 80134b6:	643b      	str	r3, [r7, #64]	; 0x40
 80134b8:	e01f      	b.n	80134fa <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80134ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134bc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80134c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134c2:	011b      	lsls	r3, r3, #4
 80134c4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80134c8:	4413      	add	r3, r2
 80134ca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80134cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ce:	3304      	adds	r3, #4
 80134d0:	781b      	ldrb	r3, [r3, #0]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d006      	beq.n	80134e4 <find_volume+0x124>
 80134d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d8:	3308      	adds	r3, #8
 80134da:	4618      	mov	r0, r3
 80134dc:	f7fe fc7c 	bl	8011dd8 <ld_dword>
 80134e0:	4602      	mov	r2, r0
 80134e2:	e000      	b.n	80134e6 <find_volume+0x126>
 80134e4:	2200      	movs	r2, #0
 80134e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134e8:	009b      	lsls	r3, r3, #2
 80134ea:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80134ee:	440b      	add	r3, r1
 80134f0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80134f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134f6:	3301      	adds	r3, #1
 80134f8:	643b      	str	r3, [r7, #64]	; 0x40
 80134fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134fc:	2b03      	cmp	r3, #3
 80134fe:	d9dc      	bls.n	80134ba <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013500:	2300      	movs	r3, #0
 8013502:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013506:	2b00      	cmp	r3, #0
 8013508:	d002      	beq.n	8013510 <find_volume+0x150>
 801350a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801350c:	3b01      	subs	r3, #1
 801350e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013512:	009b      	lsls	r3, r3, #2
 8013514:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013518:	4413      	add	r3, r2
 801351a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801351e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013522:	2b00      	cmp	r3, #0
 8013524:	d005      	beq.n	8013532 <find_volume+0x172>
 8013526:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013528:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801352a:	f7ff fef3 	bl	8013314 <check_fs>
 801352e:	4603      	mov	r3, r0
 8013530:	e000      	b.n	8013534 <find_volume+0x174>
 8013532:	2303      	movs	r3, #3
 8013534:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013538:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801353c:	2b01      	cmp	r3, #1
 801353e:	d905      	bls.n	801354c <find_volume+0x18c>
 8013540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013542:	3301      	adds	r3, #1
 8013544:	643b      	str	r3, [r7, #64]	; 0x40
 8013546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013548:	2b03      	cmp	r3, #3
 801354a:	d9e1      	bls.n	8013510 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801354c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013550:	2b04      	cmp	r3, #4
 8013552:	d101      	bne.n	8013558 <find_volume+0x198>
 8013554:	2301      	movs	r3, #1
 8013556:	e17d      	b.n	8013854 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013558:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801355c:	2b01      	cmp	r3, #1
 801355e:	d901      	bls.n	8013564 <find_volume+0x1a4>
 8013560:	230d      	movs	r3, #13
 8013562:	e177      	b.n	8013854 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013566:	3334      	adds	r3, #52	; 0x34
 8013568:	330b      	adds	r3, #11
 801356a:	4618      	mov	r0, r3
 801356c:	f7fe fc1c 	bl	8011da8 <ld_word>
 8013570:	4603      	mov	r3, r0
 8013572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013576:	d001      	beq.n	801357c <find_volume+0x1bc>
 8013578:	230d      	movs	r3, #13
 801357a:	e16b      	b.n	8013854 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801357c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801357e:	3334      	adds	r3, #52	; 0x34
 8013580:	3316      	adds	r3, #22
 8013582:	4618      	mov	r0, r3
 8013584:	f7fe fc10 	bl	8011da8 <ld_word>
 8013588:	4603      	mov	r3, r0
 801358a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801358c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801358e:	2b00      	cmp	r3, #0
 8013590:	d106      	bne.n	80135a0 <find_volume+0x1e0>
 8013592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013594:	3334      	adds	r3, #52	; 0x34
 8013596:	3324      	adds	r3, #36	; 0x24
 8013598:	4618      	mov	r0, r3
 801359a:	f7fe fc1d 	bl	8011dd8 <ld_dword>
 801359e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80135a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80135a4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80135a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135a8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80135ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80135b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135b2:	789b      	ldrb	r3, [r3, #2]
 80135b4:	2b01      	cmp	r3, #1
 80135b6:	d005      	beq.n	80135c4 <find_volume+0x204>
 80135b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ba:	789b      	ldrb	r3, [r3, #2]
 80135bc:	2b02      	cmp	r3, #2
 80135be:	d001      	beq.n	80135c4 <find_volume+0x204>
 80135c0:	230d      	movs	r3, #13
 80135c2:	e147      	b.n	8013854 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80135c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135c6:	789b      	ldrb	r3, [r3, #2]
 80135c8:	461a      	mov	r2, r3
 80135ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135cc:	fb02 f303 	mul.w	r3, r2, r3
 80135d0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80135d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80135d8:	b29a      	uxth	r2, r3
 80135da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80135de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e0:	895b      	ldrh	r3, [r3, #10]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d008      	beq.n	80135f8 <find_volume+0x238>
 80135e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e8:	895b      	ldrh	r3, [r3, #10]
 80135ea:	461a      	mov	r2, r3
 80135ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ee:	895b      	ldrh	r3, [r3, #10]
 80135f0:	3b01      	subs	r3, #1
 80135f2:	4013      	ands	r3, r2
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d001      	beq.n	80135fc <find_volume+0x23c>
 80135f8:	230d      	movs	r3, #13
 80135fa:	e12b      	b.n	8013854 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80135fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135fe:	3334      	adds	r3, #52	; 0x34
 8013600:	3311      	adds	r3, #17
 8013602:	4618      	mov	r0, r3
 8013604:	f7fe fbd0 	bl	8011da8 <ld_word>
 8013608:	4603      	mov	r3, r0
 801360a:	461a      	mov	r2, r3
 801360c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801360e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013612:	891b      	ldrh	r3, [r3, #8]
 8013614:	f003 030f 	and.w	r3, r3, #15
 8013618:	b29b      	uxth	r3, r3
 801361a:	2b00      	cmp	r3, #0
 801361c:	d001      	beq.n	8013622 <find_volume+0x262>
 801361e:	230d      	movs	r3, #13
 8013620:	e118      	b.n	8013854 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013624:	3334      	adds	r3, #52	; 0x34
 8013626:	3313      	adds	r3, #19
 8013628:	4618      	mov	r0, r3
 801362a:	f7fe fbbd 	bl	8011da8 <ld_word>
 801362e:	4603      	mov	r3, r0
 8013630:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013634:	2b00      	cmp	r3, #0
 8013636:	d106      	bne.n	8013646 <find_volume+0x286>
 8013638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801363a:	3334      	adds	r3, #52	; 0x34
 801363c:	3320      	adds	r3, #32
 801363e:	4618      	mov	r0, r3
 8013640:	f7fe fbca 	bl	8011dd8 <ld_dword>
 8013644:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013648:	3334      	adds	r3, #52	; 0x34
 801364a:	330e      	adds	r3, #14
 801364c:	4618      	mov	r0, r3
 801364e:	f7fe fbab 	bl	8011da8 <ld_word>
 8013652:	4603      	mov	r3, r0
 8013654:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013656:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013658:	2b00      	cmp	r3, #0
 801365a:	d101      	bne.n	8013660 <find_volume+0x2a0>
 801365c:	230d      	movs	r3, #13
 801365e:	e0f9      	b.n	8013854 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013660:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013664:	4413      	add	r3, r2
 8013666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013668:	8912      	ldrh	r2, [r2, #8]
 801366a:	0912      	lsrs	r2, r2, #4
 801366c:	b292      	uxth	r2, r2
 801366e:	4413      	add	r3, r2
 8013670:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013676:	429a      	cmp	r2, r3
 8013678:	d201      	bcs.n	801367e <find_volume+0x2be>
 801367a:	230d      	movs	r3, #13
 801367c:	e0ea      	b.n	8013854 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801367e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013682:	1ad3      	subs	r3, r2, r3
 8013684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013686:	8952      	ldrh	r2, [r2, #10]
 8013688:	fbb3 f3f2 	udiv	r3, r3, r2
 801368c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013690:	2b00      	cmp	r3, #0
 8013692:	d103      	bne.n	801369c <find_volume+0x2dc>
 8013694:	230d      	movs	r3, #13
 8013696:	e0dd      	b.n	8013854 <find_volume+0x494>
 8013698:	20000830 	.word	0x20000830
		fmt = FS_FAT32;
 801369c:	2303      	movs	r3, #3
 801369e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80136a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80136a8:	4293      	cmp	r3, r2
 80136aa:	d802      	bhi.n	80136b2 <find_volume+0x2f2>
 80136ac:	2302      	movs	r3, #2
 80136ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80136b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80136b8:	4293      	cmp	r3, r2
 80136ba:	d802      	bhi.n	80136c2 <find_volume+0x302>
 80136bc:	2301      	movs	r3, #1
 80136be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80136c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c4:	1c9a      	adds	r2, r3, #2
 80136c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136c8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80136ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80136ce:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80136d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80136d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136d4:	441a      	add	r2, r3
 80136d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136d8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80136da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80136dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136de:	441a      	add	r2, r3
 80136e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136e2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80136e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80136e8:	2b03      	cmp	r3, #3
 80136ea:	d11e      	bne.n	801372a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80136ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ee:	3334      	adds	r3, #52	; 0x34
 80136f0:	332a      	adds	r3, #42	; 0x2a
 80136f2:	4618      	mov	r0, r3
 80136f4:	f7fe fb58 	bl	8011da8 <ld_word>
 80136f8:	4603      	mov	r3, r0
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d001      	beq.n	8013702 <find_volume+0x342>
 80136fe:	230d      	movs	r3, #13
 8013700:	e0a8      	b.n	8013854 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013704:	891b      	ldrh	r3, [r3, #8]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d001      	beq.n	801370e <find_volume+0x34e>
 801370a:	230d      	movs	r3, #13
 801370c:	e0a2      	b.n	8013854 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013710:	3334      	adds	r3, #52	; 0x34
 8013712:	332c      	adds	r3, #44	; 0x2c
 8013714:	4618      	mov	r0, r3
 8013716:	f7fe fb5f 	bl	8011dd8 <ld_dword>
 801371a:	4602      	mov	r2, r0
 801371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801371e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013722:	699b      	ldr	r3, [r3, #24]
 8013724:	009b      	lsls	r3, r3, #2
 8013726:	647b      	str	r3, [r7, #68]	; 0x44
 8013728:	e01f      	b.n	801376a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801372a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801372c:	891b      	ldrh	r3, [r3, #8]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d101      	bne.n	8013736 <find_volume+0x376>
 8013732:	230d      	movs	r3, #13
 8013734:	e08e      	b.n	8013854 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801373a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801373c:	441a      	add	r2, r3
 801373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013740:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013742:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013746:	2b02      	cmp	r3, #2
 8013748:	d103      	bne.n	8013752 <find_volume+0x392>
 801374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801374c:	699b      	ldr	r3, [r3, #24]
 801374e:	005b      	lsls	r3, r3, #1
 8013750:	e00a      	b.n	8013768 <find_volume+0x3a8>
 8013752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013754:	699a      	ldr	r2, [r3, #24]
 8013756:	4613      	mov	r3, r2
 8013758:	005b      	lsls	r3, r3, #1
 801375a:	4413      	add	r3, r2
 801375c:	085a      	lsrs	r2, r3, #1
 801375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013760:	699b      	ldr	r3, [r3, #24]
 8013762:	f003 0301 	and.w	r3, r3, #1
 8013766:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013768:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801376a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801376c:	69da      	ldr	r2, [r3, #28]
 801376e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013770:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013774:	0a5b      	lsrs	r3, r3, #9
 8013776:	429a      	cmp	r2, r3
 8013778:	d201      	bcs.n	801377e <find_volume+0x3be>
 801377a:	230d      	movs	r3, #13
 801377c:	e06a      	b.n	8013854 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013780:	f04f 32ff 	mov.w	r2, #4294967295
 8013784:	615a      	str	r2, [r3, #20]
 8013786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013788:	695a      	ldr	r2, [r3, #20]
 801378a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801378c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013790:	2280      	movs	r2, #128	; 0x80
 8013792:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013794:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013798:	2b03      	cmp	r3, #3
 801379a:	d149      	bne.n	8013830 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801379c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801379e:	3334      	adds	r3, #52	; 0x34
 80137a0:	3330      	adds	r3, #48	; 0x30
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7fe fb00 	bl	8011da8 <ld_word>
 80137a8:	4603      	mov	r3, r0
 80137aa:	2b01      	cmp	r3, #1
 80137ac:	d140      	bne.n	8013830 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80137ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137b0:	3301      	adds	r3, #1
 80137b2:	4619      	mov	r1, r3
 80137b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80137b6:	f7fe fdd9 	bl	801236c <move_window>
 80137ba:	4603      	mov	r3, r0
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d137      	bne.n	8013830 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80137c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c2:	2200      	movs	r2, #0
 80137c4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80137c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c8:	3334      	adds	r3, #52	; 0x34
 80137ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7fe faea 	bl	8011da8 <ld_word>
 80137d4:	4603      	mov	r3, r0
 80137d6:	461a      	mov	r2, r3
 80137d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80137dc:	429a      	cmp	r2, r3
 80137de:	d127      	bne.n	8013830 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80137e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e2:	3334      	adds	r3, #52	; 0x34
 80137e4:	4618      	mov	r0, r3
 80137e6:	f7fe faf7 	bl	8011dd8 <ld_dword>
 80137ea:	4603      	mov	r3, r0
 80137ec:	4a1b      	ldr	r2, [pc, #108]	; (801385c <find_volume+0x49c>)
 80137ee:	4293      	cmp	r3, r2
 80137f0:	d11e      	bne.n	8013830 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80137f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f4:	3334      	adds	r3, #52	; 0x34
 80137f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80137fa:	4618      	mov	r0, r3
 80137fc:	f7fe faec 	bl	8011dd8 <ld_dword>
 8013800:	4603      	mov	r3, r0
 8013802:	4a17      	ldr	r2, [pc, #92]	; (8013860 <find_volume+0x4a0>)
 8013804:	4293      	cmp	r3, r2
 8013806:	d113      	bne.n	8013830 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801380a:	3334      	adds	r3, #52	; 0x34
 801380c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013810:	4618      	mov	r0, r3
 8013812:	f7fe fae1 	bl	8011dd8 <ld_dword>
 8013816:	4602      	mov	r2, r0
 8013818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801381a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801381c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801381e:	3334      	adds	r3, #52	; 0x34
 8013820:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013824:	4618      	mov	r0, r3
 8013826:	f7fe fad7 	bl	8011dd8 <ld_dword>
 801382a:	4602      	mov	r2, r0
 801382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801382e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013832:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013836:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013838:	4b0a      	ldr	r3, [pc, #40]	; (8013864 <find_volume+0x4a4>)
 801383a:	881b      	ldrh	r3, [r3, #0]
 801383c:	3301      	adds	r3, #1
 801383e:	b29a      	uxth	r2, r3
 8013840:	4b08      	ldr	r3, [pc, #32]	; (8013864 <find_volume+0x4a4>)
 8013842:	801a      	strh	r2, [r3, #0]
 8013844:	4b07      	ldr	r3, [pc, #28]	; (8013864 <find_volume+0x4a4>)
 8013846:	881a      	ldrh	r2, [r3, #0]
 8013848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801384a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801384c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801384e:	f7fe fd25 	bl	801229c <clear_lock>
#endif
	return FR_OK;
 8013852:	2300      	movs	r3, #0
}
 8013854:	4618      	mov	r0, r3
 8013856:	3758      	adds	r7, #88	; 0x58
 8013858:	46bd      	mov	sp, r7
 801385a:	bd80      	pop	{r7, pc}
 801385c:	41615252 	.word	0x41615252
 8013860:	61417272 	.word	0x61417272
 8013864:	20000834 	.word	0x20000834

08013868 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b084      	sub	sp, #16
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013872:	2309      	movs	r3, #9
 8013874:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d02e      	beq.n	80138da <validate+0x72>
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d02a      	beq.n	80138da <validate+0x72>
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	781b      	ldrb	r3, [r3, #0]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d025      	beq.n	80138da <validate+0x72>
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	889a      	ldrh	r2, [r3, #4]
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	88db      	ldrh	r3, [r3, #6]
 8013898:	429a      	cmp	r2, r3
 801389a:	d11e      	bne.n	80138da <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	4618      	mov	r0, r3
 80138a2:	f7fe fb81 	bl	8011fa8 <lock_fs>
 80138a6:	4603      	mov	r3, r0
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d014      	beq.n	80138d6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	785b      	ldrb	r3, [r3, #1]
 80138b2:	4618      	mov	r0, r3
 80138b4:	f7fe f9da 	bl	8011c6c <disk_status>
 80138b8:	4603      	mov	r3, r0
 80138ba:	f003 0301 	and.w	r3, r3, #1
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d102      	bne.n	80138c8 <validate+0x60>
				res = FR_OK;
 80138c2:	2300      	movs	r3, #0
 80138c4:	73fb      	strb	r3, [r7, #15]
 80138c6:	e008      	b.n	80138da <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	2100      	movs	r1, #0
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7fe fb80 	bl	8011fd4 <unlock_fs>
 80138d4:	e001      	b.n	80138da <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80138d6:	230f      	movs	r3, #15
 80138d8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80138da:	7bfb      	ldrb	r3, [r7, #15]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d102      	bne.n	80138e6 <validate+0x7e>
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	e000      	b.n	80138e8 <validate+0x80>
 80138e6:	2300      	movs	r3, #0
 80138e8:	683a      	ldr	r2, [r7, #0]
 80138ea:	6013      	str	r3, [r2, #0]
	return res;
 80138ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3710      	adds	r7, #16
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}
	...

080138f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b088      	sub	sp, #32
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	60f8      	str	r0, [r7, #12]
 8013900:	60b9      	str	r1, [r7, #8]
 8013902:	4613      	mov	r3, r2
 8013904:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801390a:	f107 0310 	add.w	r3, r7, #16
 801390e:	4618      	mov	r0, r3
 8013910:	f7ff fcbb 	bl	801328a <get_ldnumber>
 8013914:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013916:	69fb      	ldr	r3, [r7, #28]
 8013918:	2b00      	cmp	r3, #0
 801391a:	da01      	bge.n	8013920 <f_mount+0x28>
 801391c:	230b      	movs	r3, #11
 801391e:	e048      	b.n	80139b2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013920:	4a26      	ldr	r2, [pc, #152]	; (80139bc <f_mount+0xc4>)
 8013922:	69fb      	ldr	r3, [r7, #28]
 8013924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013928:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801392a:	69bb      	ldr	r3, [r7, #24]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d00f      	beq.n	8013950 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013930:	69b8      	ldr	r0, [r7, #24]
 8013932:	f7fe fcb3 	bl	801229c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8013936:	69bb      	ldr	r3, [r7, #24]
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	4618      	mov	r0, r3
 801393c:	f001 f812 	bl	8014964 <ff_del_syncobj>
 8013940:	4603      	mov	r3, r0
 8013942:	2b00      	cmp	r3, #0
 8013944:	d101      	bne.n	801394a <f_mount+0x52>
 8013946:	2302      	movs	r3, #2
 8013948:	e033      	b.n	80139b2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801394a:	69bb      	ldr	r3, [r7, #24]
 801394c:	2200      	movs	r2, #0
 801394e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d00f      	beq.n	8013976 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	2200      	movs	r2, #0
 801395a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801395c:	69fb      	ldr	r3, [r7, #28]
 801395e:	b2da      	uxtb	r2, r3
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	330c      	adds	r3, #12
 8013964:	4619      	mov	r1, r3
 8013966:	4610      	mov	r0, r2
 8013968:	f000 ffe1 	bl	801492e <ff_cre_syncobj>
 801396c:	4603      	mov	r3, r0
 801396e:	2b00      	cmp	r3, #0
 8013970:	d101      	bne.n	8013976 <f_mount+0x7e>
 8013972:	2302      	movs	r3, #2
 8013974:	e01d      	b.n	80139b2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013976:	68fa      	ldr	r2, [r7, #12]
 8013978:	4910      	ldr	r1, [pc, #64]	; (80139bc <f_mount+0xc4>)
 801397a:	69fb      	ldr	r3, [r7, #28]
 801397c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d002      	beq.n	801398c <f_mount+0x94>
 8013986:	79fb      	ldrb	r3, [r7, #7]
 8013988:	2b01      	cmp	r3, #1
 801398a:	d001      	beq.n	8013990 <f_mount+0x98>
 801398c:	2300      	movs	r3, #0
 801398e:	e010      	b.n	80139b2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013990:	f107 010c 	add.w	r1, r7, #12
 8013994:	f107 0308 	add.w	r3, r7, #8
 8013998:	2200      	movs	r2, #0
 801399a:	4618      	mov	r0, r3
 801399c:	f7ff fd10 	bl	80133c0 <find_volume>
 80139a0:	4603      	mov	r3, r0
 80139a2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	7dfa      	ldrb	r2, [r7, #23]
 80139a8:	4611      	mov	r1, r2
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7fe fb12 	bl	8011fd4 <unlock_fs>
 80139b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80139b2:	4618      	mov	r0, r3
 80139b4:	3720      	adds	r7, #32
 80139b6:	46bd      	mov	sp, r7
 80139b8:	bd80      	pop	{r7, pc}
 80139ba:	bf00      	nop
 80139bc:	20000830 	.word	0x20000830

080139c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b098      	sub	sp, #96	; 0x60
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	60f8      	str	r0, [r7, #12]
 80139c8:	60b9      	str	r1, [r7, #8]
 80139ca:	4613      	mov	r3, r2
 80139cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d101      	bne.n	80139d8 <f_open+0x18>
 80139d4:	2309      	movs	r3, #9
 80139d6:	e1b4      	b.n	8013d42 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80139d8:	79fb      	ldrb	r3, [r7, #7]
 80139da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80139de:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80139e0:	79fa      	ldrb	r2, [r7, #7]
 80139e2:	f107 0110 	add.w	r1, r7, #16
 80139e6:	f107 0308 	add.w	r3, r7, #8
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7ff fce8 	bl	80133c0 <find_volume>
 80139f0:	4603      	mov	r3, r0
 80139f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80139f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	f040 8191 	bne.w	8013d22 <f_open+0x362>
		dj.obj.fs = fs;
 8013a00:	693b      	ldr	r3, [r7, #16]
 8013a02:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013a04:	68ba      	ldr	r2, [r7, #8]
 8013a06:	f107 0314 	add.w	r3, r7, #20
 8013a0a:	4611      	mov	r1, r2
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7ff fbcb 	bl	80131a8 <follow_path>
 8013a12:	4603      	mov	r3, r0
 8013a14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013a18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d11a      	bne.n	8013a56 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013a20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013a24:	b25b      	sxtb	r3, r3
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	da03      	bge.n	8013a32 <f_open+0x72>
				res = FR_INVALID_NAME;
 8013a2a:	2306      	movs	r3, #6
 8013a2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013a30:	e011      	b.n	8013a56 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013a32:	79fb      	ldrb	r3, [r7, #7]
 8013a34:	f023 0301 	bic.w	r3, r3, #1
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	bf14      	ite	ne
 8013a3c:	2301      	movne	r3, #1
 8013a3e:	2300      	moveq	r3, #0
 8013a40:	b2db      	uxtb	r3, r3
 8013a42:	461a      	mov	r2, r3
 8013a44:	f107 0314 	add.w	r3, r7, #20
 8013a48:	4611      	mov	r1, r2
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f7fe fade 	bl	801200c <chk_lock>
 8013a50:	4603      	mov	r3, r0
 8013a52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013a56:	79fb      	ldrb	r3, [r7, #7]
 8013a58:	f003 031c 	and.w	r3, r3, #28
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d07f      	beq.n	8013b60 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013a60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d017      	beq.n	8013a98 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013a68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013a6c:	2b04      	cmp	r3, #4
 8013a6e:	d10e      	bne.n	8013a8e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013a70:	f7fe fb28 	bl	80120c4 <enq_lock>
 8013a74:	4603      	mov	r3, r0
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d006      	beq.n	8013a88 <f_open+0xc8>
 8013a7a:	f107 0314 	add.w	r3, r7, #20
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f7ff fa6c 	bl	8012f5c <dir_register>
 8013a84:	4603      	mov	r3, r0
 8013a86:	e000      	b.n	8013a8a <f_open+0xca>
 8013a88:	2312      	movs	r3, #18
 8013a8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013a8e:	79fb      	ldrb	r3, [r7, #7]
 8013a90:	f043 0308 	orr.w	r3, r3, #8
 8013a94:	71fb      	strb	r3, [r7, #7]
 8013a96:	e010      	b.n	8013aba <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013a98:	7ebb      	ldrb	r3, [r7, #26]
 8013a9a:	f003 0311 	and.w	r3, r3, #17
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d003      	beq.n	8013aaa <f_open+0xea>
					res = FR_DENIED;
 8013aa2:	2307      	movs	r3, #7
 8013aa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013aa8:	e007      	b.n	8013aba <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013aaa:	79fb      	ldrb	r3, [r7, #7]
 8013aac:	f003 0304 	and.w	r3, r3, #4
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d002      	beq.n	8013aba <f_open+0xfa>
 8013ab4:	2308      	movs	r3, #8
 8013ab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013aba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d168      	bne.n	8013b94 <f_open+0x1d4>
 8013ac2:	79fb      	ldrb	r3, [r7, #7]
 8013ac4:	f003 0308 	and.w	r3, r3, #8
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d063      	beq.n	8013b94 <f_open+0x1d4>
				dw = GET_FATTIME();
 8013acc:	f7fb ff2e 	bl	800f92c <get_fattime>
 8013ad0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ad4:	330e      	adds	r3, #14
 8013ad6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f7fe f9bb 	bl	8011e54 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ae0:	3316      	adds	r3, #22
 8013ae2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7fe f9b5 	bl	8011e54 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aec:	330b      	adds	r3, #11
 8013aee:	2220      	movs	r2, #32
 8013af0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013af2:	693b      	ldr	r3, [r7, #16]
 8013af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013af6:	4611      	mov	r1, r2
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7ff f93e 	bl	8012d7a <ld_clust>
 8013afe:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013b00:	693b      	ldr	r3, [r7, #16]
 8013b02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013b04:	2200      	movs	r2, #0
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7ff f956 	bl	8012db8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b0e:	331c      	adds	r3, #28
 8013b10:	2100      	movs	r1, #0
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7fe f99e 	bl	8011e54 <st_dword>
					fs->wflag = 1;
 8013b18:	693b      	ldr	r3, [r7, #16]
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d037      	beq.n	8013b94 <f_open+0x1d4>
						dw = fs->winsect;
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b28:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013b2a:	f107 0314 	add.w	r3, r7, #20
 8013b2e:	2200      	movs	r2, #0
 8013b30:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fe fe69 	bl	801280a <remove_chain>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013b3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d126      	bne.n	8013b94 <f_open+0x1d4>
							res = move_window(fs, dw);
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7fe fc0e 	bl	801236c <move_window>
 8013b50:	4603      	mov	r3, r0
 8013b52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013b5a:	3a01      	subs	r2, #1
 8013b5c:	611a      	str	r2, [r3, #16]
 8013b5e:	e019      	b.n	8013b94 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013b60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d115      	bne.n	8013b94 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013b68:	7ebb      	ldrb	r3, [r7, #26]
 8013b6a:	f003 0310 	and.w	r3, r3, #16
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d003      	beq.n	8013b7a <f_open+0x1ba>
					res = FR_NO_FILE;
 8013b72:	2304      	movs	r3, #4
 8013b74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013b78:	e00c      	b.n	8013b94 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013b7a:	79fb      	ldrb	r3, [r7, #7]
 8013b7c:	f003 0302 	and.w	r3, r3, #2
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d007      	beq.n	8013b94 <f_open+0x1d4>
 8013b84:	7ebb      	ldrb	r3, [r7, #26]
 8013b86:	f003 0301 	and.w	r3, r3, #1
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d002      	beq.n	8013b94 <f_open+0x1d4>
						res = FR_DENIED;
 8013b8e:	2307      	movs	r3, #7
 8013b90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013b94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d128      	bne.n	8013bee <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013b9c:	79fb      	ldrb	r3, [r7, #7]
 8013b9e:	f003 0308 	and.w	r3, r3, #8
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d003      	beq.n	8013bae <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013ba6:	79fb      	ldrb	r3, [r7, #7]
 8013ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013bae:	693b      	ldr	r3, [r7, #16]
 8013bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013bbc:	79fb      	ldrb	r3, [r7, #7]
 8013bbe:	f023 0301 	bic.w	r3, r3, #1
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	bf14      	ite	ne
 8013bc6:	2301      	movne	r3, #1
 8013bc8:	2300      	moveq	r3, #0
 8013bca:	b2db      	uxtb	r3, r3
 8013bcc:	461a      	mov	r2, r3
 8013bce:	f107 0314 	add.w	r3, r7, #20
 8013bd2:	4611      	mov	r1, r2
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f7fe fa97 	bl	8012108 <inc_lock>
 8013bda:	4602      	mov	r2, r0
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	691b      	ldr	r3, [r3, #16]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d102      	bne.n	8013bee <f_open+0x22e>
 8013be8:	2302      	movs	r3, #2
 8013bea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013bee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	f040 8095 	bne.w	8013d22 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bfc:	4611      	mov	r1, r2
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f7ff f8bb 	bl	8012d7a <ld_clust>
 8013c04:	4602      	mov	r2, r0
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c0c:	331c      	adds	r3, #28
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f7fe f8e2 	bl	8011dd8 <ld_dword>
 8013c14:	4602      	mov	r2, r0
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013c20:	693a      	ldr	r2, [r7, #16]
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	88da      	ldrh	r2, [r3, #6]
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	79fa      	ldrb	r2, [r7, #7]
 8013c32:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	2200      	movs	r2, #0
 8013c38:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	2200      	movs	r2, #0
 8013c44:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	3330      	adds	r3, #48	; 0x30
 8013c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c4e:	2100      	movs	r1, #0
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7fe f94c 	bl	8011eee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013c56:	79fb      	ldrb	r3, [r7, #7]
 8013c58:	f003 0320 	and.w	r3, r3, #32
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d060      	beq.n	8013d22 <f_open+0x362>
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	68db      	ldr	r3, [r3, #12]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d05c      	beq.n	8013d22 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	68da      	ldr	r2, [r3, #12]
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013c70:	693b      	ldr	r3, [r7, #16]
 8013c72:	895b      	ldrh	r3, [r3, #10]
 8013c74:	025b      	lsls	r3, r3, #9
 8013c76:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	689b      	ldr	r3, [r3, #8]
 8013c7c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	68db      	ldr	r3, [r3, #12]
 8013c82:	657b      	str	r3, [r7, #84]	; 0x54
 8013c84:	e016      	b.n	8013cb4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7fe fc29 	bl	80124e2 <get_fat>
 8013c90:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c94:	2b01      	cmp	r3, #1
 8013c96:	d802      	bhi.n	8013c9e <f_open+0x2de>
 8013c98:	2302      	movs	r3, #2
 8013c9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ca4:	d102      	bne.n	8013cac <f_open+0x2ec>
 8013ca6:	2301      	movs	r3, #1
 8013ca8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013cac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013cb0:	1ad3      	subs	r3, r2, r3
 8013cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8013cb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d103      	bne.n	8013cc4 <f_open+0x304>
 8013cbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d8e0      	bhi.n	8013c86 <f_open+0x2c6>
				}
				fp->clust = clst;
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013cc8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013cca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d127      	bne.n	8013d22 <f_open+0x362>
 8013cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d022      	beq.n	8013d22 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013cdc:	693b      	ldr	r3, [r7, #16]
 8013cde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7fe fbdf 	bl	80124a4 <clust2sect>
 8013ce6:	6478      	str	r0, [r7, #68]	; 0x44
 8013ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d103      	bne.n	8013cf6 <f_open+0x336>
						res = FR_INT_ERR;
 8013cee:	2302      	movs	r3, #2
 8013cf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013cf4:	e015      	b.n	8013d22 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013cf8:	0a5a      	lsrs	r2, r3, #9
 8013cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cfc:	441a      	add	r2, r3
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	7858      	ldrb	r0, [r3, #1]
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	6a1a      	ldr	r2, [r3, #32]
 8013d10:	2301      	movs	r3, #1
 8013d12:	f7fd ffeb 	bl	8011cec <disk_read>
 8013d16:	4603      	mov	r3, r0
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d002      	beq.n	8013d22 <f_open+0x362>
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013d22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d002      	beq.n	8013d30 <f_open+0x370>
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013d30:	693b      	ldr	r3, [r7, #16]
 8013d32:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8013d36:	4611      	mov	r1, r2
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f7fe f94b 	bl	8011fd4 <unlock_fs>
 8013d3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013d42:	4618      	mov	r0, r3
 8013d44:	3760      	adds	r7, #96	; 0x60
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}

08013d4a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013d4a:	b580      	push	{r7, lr}
 8013d4c:	b08c      	sub	sp, #48	; 0x30
 8013d4e:	af00      	add	r7, sp, #0
 8013d50:	60f8      	str	r0, [r7, #12]
 8013d52:	60b9      	str	r1, [r7, #8]
 8013d54:	607a      	str	r2, [r7, #4]
 8013d56:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	f107 0210 	add.w	r2, r7, #16
 8013d68:	4611      	mov	r1, r2
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f7ff fd7c 	bl	8013868 <validate>
 8013d70:	4603      	mov	r3, r0
 8013d72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013d76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d107      	bne.n	8013d8e <f_write+0x44>
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	7d5b      	ldrb	r3, [r3, #21]
 8013d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013d86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d009      	beq.n	8013da2 <f_write+0x58>
 8013d8e:	693b      	ldr	r3, [r7, #16]
 8013d90:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013d94:	4611      	mov	r1, r2
 8013d96:	4618      	mov	r0, r3
 8013d98:	f7fe f91c 	bl	8011fd4 <unlock_fs>
 8013d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013da0:	e173      	b.n	801408a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	7d1b      	ldrb	r3, [r3, #20]
 8013da6:	f003 0302 	and.w	r3, r3, #2
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d106      	bne.n	8013dbc <f_write+0x72>
 8013dae:	693b      	ldr	r3, [r7, #16]
 8013db0:	2107      	movs	r1, #7
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7fe f90e 	bl	8011fd4 <unlock_fs>
 8013db8:	2307      	movs	r3, #7
 8013dba:	e166      	b.n	801408a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	699a      	ldr	r2, [r3, #24]
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	441a      	add	r2, r3
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	699b      	ldr	r3, [r3, #24]
 8013dc8:	429a      	cmp	r2, r3
 8013dca:	f080 814b 	bcs.w	8014064 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	699b      	ldr	r3, [r3, #24]
 8013dd2:	43db      	mvns	r3, r3
 8013dd4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013dd6:	e145      	b.n	8014064 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	699b      	ldr	r3, [r3, #24]
 8013ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	f040 8101 	bne.w	8013fe8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	699b      	ldr	r3, [r3, #24]
 8013dea:	0a5b      	lsrs	r3, r3, #9
 8013dec:	693a      	ldr	r2, [r7, #16]
 8013dee:	8952      	ldrh	r2, [r2, #10]
 8013df0:	3a01      	subs	r2, #1
 8013df2:	4013      	ands	r3, r2
 8013df4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013df6:	69bb      	ldr	r3, [r7, #24]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d14d      	bne.n	8013e98 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	699b      	ldr	r3, [r3, #24]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d10c      	bne.n	8013e1e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	689b      	ldr	r3, [r3, #8]
 8013e08:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d11a      	bne.n	8013e46 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	2100      	movs	r1, #0
 8013e14:	4618      	mov	r0, r3
 8013e16:	f7fe fd5d 	bl	80128d4 <create_chain>
 8013e1a:	62b8      	str	r0, [r7, #40]	; 0x28
 8013e1c:	e013      	b.n	8013e46 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d007      	beq.n	8013e36 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	699b      	ldr	r3, [r3, #24]
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	68f8      	ldr	r0, [r7, #12]
 8013e2e:	f7fe fde9 	bl	8012a04 <clmt_clust>
 8013e32:	62b8      	str	r0, [r7, #40]	; 0x28
 8013e34:	e007      	b.n	8013e46 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013e36:	68fa      	ldr	r2, [r7, #12]
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	69db      	ldr	r3, [r3, #28]
 8013e3c:	4619      	mov	r1, r3
 8013e3e:	4610      	mov	r0, r2
 8013e40:	f7fe fd48 	bl	80128d4 <create_chain>
 8013e44:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	f000 8110 	beq.w	801406e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e50:	2b01      	cmp	r3, #1
 8013e52:	d109      	bne.n	8013e68 <f_write+0x11e>
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	2202      	movs	r2, #2
 8013e58:	755a      	strb	r2, [r3, #21]
 8013e5a:	693b      	ldr	r3, [r7, #16]
 8013e5c:	2102      	movs	r1, #2
 8013e5e:	4618      	mov	r0, r3
 8013e60:	f7fe f8b8 	bl	8011fd4 <unlock_fs>
 8013e64:	2302      	movs	r3, #2
 8013e66:	e110      	b.n	801408a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e6e:	d109      	bne.n	8013e84 <f_write+0x13a>
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	2201      	movs	r2, #1
 8013e74:	755a      	strb	r2, [r3, #21]
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	2101      	movs	r1, #1
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7fe f8aa 	bl	8011fd4 <unlock_fs>
 8013e80:	2301      	movs	r3, #1
 8013e82:	e102      	b.n	801408a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e88:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	689b      	ldr	r3, [r3, #8]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d102      	bne.n	8013e98 <f_write+0x14e>
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e96:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	7d1b      	ldrb	r3, [r3, #20]
 8013e9c:	b25b      	sxtb	r3, r3
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	da1d      	bge.n	8013ede <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	7858      	ldrb	r0, [r3, #1]
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	6a1a      	ldr	r2, [r3, #32]
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	f7fd ff3b 	bl	8011d2c <disk_write>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d009      	beq.n	8013ed0 <f_write+0x186>
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	2201      	movs	r2, #1
 8013ec0:	755a      	strb	r2, [r3, #21]
 8013ec2:	693b      	ldr	r3, [r7, #16]
 8013ec4:	2101      	movs	r1, #1
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7fe f884 	bl	8011fd4 <unlock_fs>
 8013ecc:	2301      	movs	r3, #1
 8013ece:	e0dc      	b.n	801408a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	7d1b      	ldrb	r3, [r3, #20]
 8013ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ed8:	b2da      	uxtb	r2, r3
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013ede:	693a      	ldr	r2, [r7, #16]
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	69db      	ldr	r3, [r3, #28]
 8013ee4:	4619      	mov	r1, r3
 8013ee6:	4610      	mov	r0, r2
 8013ee8:	f7fe fadc 	bl	80124a4 <clust2sect>
 8013eec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013eee:	697b      	ldr	r3, [r7, #20]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d109      	bne.n	8013f08 <f_write+0x1be>
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2202      	movs	r2, #2
 8013ef8:	755a      	strb	r2, [r3, #21]
 8013efa:	693b      	ldr	r3, [r7, #16]
 8013efc:	2102      	movs	r1, #2
 8013efe:	4618      	mov	r0, r3
 8013f00:	f7fe f868 	bl	8011fd4 <unlock_fs>
 8013f04:	2302      	movs	r3, #2
 8013f06:	e0c0      	b.n	801408a <f_write+0x340>
			sect += csect;
 8013f08:	697a      	ldr	r2, [r7, #20]
 8013f0a:	69bb      	ldr	r3, [r7, #24]
 8013f0c:	4413      	add	r3, r2
 8013f0e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	0a5b      	lsrs	r3, r3, #9
 8013f14:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013f16:	6a3b      	ldr	r3, [r7, #32]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d041      	beq.n	8013fa0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013f1c:	69ba      	ldr	r2, [r7, #24]
 8013f1e:	6a3b      	ldr	r3, [r7, #32]
 8013f20:	4413      	add	r3, r2
 8013f22:	693a      	ldr	r2, [r7, #16]
 8013f24:	8952      	ldrh	r2, [r2, #10]
 8013f26:	4293      	cmp	r3, r2
 8013f28:	d905      	bls.n	8013f36 <f_write+0x1ec>
					cc = fs->csize - csect;
 8013f2a:	693b      	ldr	r3, [r7, #16]
 8013f2c:	895b      	ldrh	r3, [r3, #10]
 8013f2e:	461a      	mov	r2, r3
 8013f30:	69bb      	ldr	r3, [r7, #24]
 8013f32:	1ad3      	subs	r3, r2, r3
 8013f34:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	7858      	ldrb	r0, [r3, #1]
 8013f3a:	6a3b      	ldr	r3, [r7, #32]
 8013f3c:	697a      	ldr	r2, [r7, #20]
 8013f3e:	69f9      	ldr	r1, [r7, #28]
 8013f40:	f7fd fef4 	bl	8011d2c <disk_write>
 8013f44:	4603      	mov	r3, r0
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d009      	beq.n	8013f5e <f_write+0x214>
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	2201      	movs	r2, #1
 8013f4e:	755a      	strb	r2, [r3, #21]
 8013f50:	693b      	ldr	r3, [r7, #16]
 8013f52:	2101      	movs	r1, #1
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7fe f83d 	bl	8011fd4 <unlock_fs>
 8013f5a:	2301      	movs	r3, #1
 8013f5c:	e095      	b.n	801408a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	6a1a      	ldr	r2, [r3, #32]
 8013f62:	697b      	ldr	r3, [r7, #20]
 8013f64:	1ad3      	subs	r3, r2, r3
 8013f66:	6a3a      	ldr	r2, [r7, #32]
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d915      	bls.n	8013f98 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	6a1a      	ldr	r2, [r3, #32]
 8013f76:	697b      	ldr	r3, [r7, #20]
 8013f78:	1ad3      	subs	r3, r2, r3
 8013f7a:	025b      	lsls	r3, r3, #9
 8013f7c:	69fa      	ldr	r2, [r7, #28]
 8013f7e:	4413      	add	r3, r2
 8013f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f84:	4619      	mov	r1, r3
 8013f86:	f7fd ff91 	bl	8011eac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	7d1b      	ldrb	r3, [r3, #20]
 8013f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f92:	b2da      	uxtb	r2, r3
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013f98:	6a3b      	ldr	r3, [r7, #32]
 8013f9a:	025b      	lsls	r3, r3, #9
 8013f9c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013f9e:	e044      	b.n	801402a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	6a1b      	ldr	r3, [r3, #32]
 8013fa4:	697a      	ldr	r2, [r7, #20]
 8013fa6:	429a      	cmp	r2, r3
 8013fa8:	d01b      	beq.n	8013fe2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	699a      	ldr	r2, [r3, #24]
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d215      	bcs.n	8013fe2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	7858      	ldrb	r0, [r3, #1]
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	697a      	ldr	r2, [r7, #20]
 8013fc4:	f7fd fe92 	bl	8011cec <disk_read>
 8013fc8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d009      	beq.n	8013fe2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	2201      	movs	r2, #1
 8013fd2:	755a      	strb	r2, [r3, #21]
 8013fd4:	693b      	ldr	r3, [r7, #16]
 8013fd6:	2101      	movs	r1, #1
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7fd fffb 	bl	8011fd4 <unlock_fs>
 8013fde:	2301      	movs	r3, #1
 8013fe0:	e053      	b.n	801408a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	697a      	ldr	r2, [r7, #20]
 8013fe6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	699b      	ldr	r3, [r3, #24]
 8013fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ff0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013ff4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	429a      	cmp	r2, r3
 8013ffc:	d901      	bls.n	8014002 <f_write+0x2b8>
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	699b      	ldr	r3, [r3, #24]
 801400c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014010:	4413      	add	r3, r2
 8014012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014014:	69f9      	ldr	r1, [r7, #28]
 8014016:	4618      	mov	r0, r3
 8014018:	f7fd ff48 	bl	8011eac <mem_cpy>
		fp->flag |= FA_DIRTY;
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	7d1b      	ldrb	r3, [r3, #20]
 8014020:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014024:	b2da      	uxtb	r2, r3
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801402a:	69fa      	ldr	r2, [r7, #28]
 801402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801402e:	4413      	add	r3, r2
 8014030:	61fb      	str	r3, [r7, #28]
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	699a      	ldr	r2, [r3, #24]
 8014036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014038:	441a      	add	r2, r3
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	619a      	str	r2, [r3, #24]
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	68da      	ldr	r2, [r3, #12]
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	699b      	ldr	r3, [r3, #24]
 8014046:	429a      	cmp	r2, r3
 8014048:	bf38      	it	cc
 801404a:	461a      	movcc	r2, r3
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	60da      	str	r2, [r3, #12]
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	681a      	ldr	r2, [r3, #0]
 8014054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014056:	441a      	add	r2, r3
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	601a      	str	r2, [r3, #0]
 801405c:	687a      	ldr	r2, [r7, #4]
 801405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014060:	1ad3      	subs	r3, r2, r3
 8014062:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2b00      	cmp	r3, #0
 8014068:	f47f aeb6 	bne.w	8013dd8 <f_write+0x8e>
 801406c:	e000      	b.n	8014070 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801406e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	7d1b      	ldrb	r3, [r3, #20]
 8014074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014078:	b2da      	uxtb	r2, r3
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801407e:	693b      	ldr	r3, [r7, #16]
 8014080:	2100      	movs	r1, #0
 8014082:	4618      	mov	r0, r3
 8014084:	f7fd ffa6 	bl	8011fd4 <unlock_fs>
 8014088:	2300      	movs	r3, #0
}
 801408a:	4618      	mov	r0, r3
 801408c:	3730      	adds	r7, #48	; 0x30
 801408e:	46bd      	mov	sp, r7
 8014090:	bd80      	pop	{r7, pc}

08014092 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014092:	b580      	push	{r7, lr}
 8014094:	b086      	sub	sp, #24
 8014096:	af00      	add	r7, sp, #0
 8014098:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	f107 0208 	add.w	r2, r7, #8
 80140a0:	4611      	mov	r1, r2
 80140a2:	4618      	mov	r0, r3
 80140a4:	f7ff fbe0 	bl	8013868 <validate>
 80140a8:	4603      	mov	r3, r0
 80140aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80140ac:	7dfb      	ldrb	r3, [r7, #23]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d16d      	bne.n	801418e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	7d1b      	ldrb	r3, [r3, #20]
 80140b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d067      	beq.n	801418e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	7d1b      	ldrb	r3, [r3, #20]
 80140c2:	b25b      	sxtb	r3, r3
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	da1a      	bge.n	80140fe <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80140c8:	68bb      	ldr	r3, [r7, #8]
 80140ca:	7858      	ldrb	r0, [r3, #1]
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	6a1a      	ldr	r2, [r3, #32]
 80140d6:	2301      	movs	r3, #1
 80140d8:	f7fd fe28 	bl	8011d2c <disk_write>
 80140dc:	4603      	mov	r3, r0
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d006      	beq.n	80140f0 <f_sync+0x5e>
 80140e2:	68bb      	ldr	r3, [r7, #8]
 80140e4:	2101      	movs	r1, #1
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7fd ff74 	bl	8011fd4 <unlock_fs>
 80140ec:	2301      	movs	r3, #1
 80140ee:	e055      	b.n	801419c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	7d1b      	ldrb	r3, [r3, #20]
 80140f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80140f8:	b2da      	uxtb	r2, r3
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80140fe:	f7fb fc15 	bl	800f92c <get_fattime>
 8014102:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014104:	68ba      	ldr	r2, [r7, #8]
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801410a:	4619      	mov	r1, r3
 801410c:	4610      	mov	r0, r2
 801410e:	f7fe f92d 	bl	801236c <move_window>
 8014112:	4603      	mov	r3, r0
 8014114:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014116:	7dfb      	ldrb	r3, [r7, #23]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d138      	bne.n	801418e <f_sync+0xfc>
					dir = fp->dir_ptr;
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014120:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	330b      	adds	r3, #11
 8014126:	781a      	ldrb	r2, [r3, #0]
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	330b      	adds	r3, #11
 801412c:	f042 0220 	orr.w	r2, r2, #32
 8014130:	b2d2      	uxtb	r2, r2
 8014132:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	6818      	ldr	r0, [r3, #0]
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	689b      	ldr	r3, [r3, #8]
 801413c:	461a      	mov	r2, r3
 801413e:	68f9      	ldr	r1, [r7, #12]
 8014140:	f7fe fe3a 	bl	8012db8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	f103 021c 	add.w	r2, r3, #28
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	68db      	ldr	r3, [r3, #12]
 801414e:	4619      	mov	r1, r3
 8014150:	4610      	mov	r0, r2
 8014152:	f7fd fe7f 	bl	8011e54 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	3316      	adds	r3, #22
 801415a:	6939      	ldr	r1, [r7, #16]
 801415c:	4618      	mov	r0, r3
 801415e:	f7fd fe79 	bl	8011e54 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	3312      	adds	r3, #18
 8014166:	2100      	movs	r1, #0
 8014168:	4618      	mov	r0, r3
 801416a:	f7fd fe58 	bl	8011e1e <st_word>
					fs->wflag = 1;
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	2201      	movs	r2, #1
 8014172:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	4618      	mov	r0, r3
 8014178:	f7fe f926 	bl	80123c8 <sync_fs>
 801417c:	4603      	mov	r3, r0
 801417e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	7d1b      	ldrb	r3, [r3, #20]
 8014184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014188:	b2da      	uxtb	r2, r3
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801418e:	68bb      	ldr	r3, [r7, #8]
 8014190:	7dfa      	ldrb	r2, [r7, #23]
 8014192:	4611      	mov	r1, r2
 8014194:	4618      	mov	r0, r3
 8014196:	f7fd ff1d 	bl	8011fd4 <unlock_fs>
 801419a:	7dfb      	ldrb	r3, [r7, #23]
}
 801419c:	4618      	mov	r0, r3
 801419e:	3718      	adds	r7, #24
 80141a0:	46bd      	mov	sp, r7
 80141a2:	bd80      	pop	{r7, pc}

080141a4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b084      	sub	sp, #16
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80141ac:	6878      	ldr	r0, [r7, #4]
 80141ae:	f7ff ff70 	bl	8014092 <f_sync>
 80141b2:	4603      	mov	r3, r0
 80141b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80141b6:	7bfb      	ldrb	r3, [r7, #15]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d11d      	bne.n	80141f8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	f107 0208 	add.w	r2, r7, #8
 80141c2:	4611      	mov	r1, r2
 80141c4:	4618      	mov	r0, r3
 80141c6:	f7ff fb4f 	bl	8013868 <validate>
 80141ca:	4603      	mov	r3, r0
 80141cc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80141ce:	7bfb      	ldrb	r3, [r7, #15]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d111      	bne.n	80141f8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	691b      	ldr	r3, [r3, #16]
 80141d8:	4618      	mov	r0, r3
 80141da:	f7fe f823 	bl	8012224 <dec_lock>
 80141de:	4603      	mov	r3, r0
 80141e0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80141e2:	7bfb      	ldrb	r3, [r7, #15]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d102      	bne.n	80141ee <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2200      	movs	r2, #0
 80141ec:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	2100      	movs	r1, #0
 80141f2:	4618      	mov	r0, r3
 80141f4:	f7fd feee 	bl	8011fd4 <unlock_fs>
#endif
		}
	}
	return res;
 80141f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80141fa:	4618      	mov	r0, r3
 80141fc:	3710      	adds	r7, #16
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}

08014202 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014202:	b580      	push	{r7, lr}
 8014204:	b090      	sub	sp, #64	; 0x40
 8014206:	af00      	add	r7, sp, #0
 8014208:	6078      	str	r0, [r7, #4]
 801420a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f107 0208 	add.w	r2, r7, #8
 8014212:	4611      	mov	r1, r2
 8014214:	4618      	mov	r0, r3
 8014216:	f7ff fb27 	bl	8013868 <validate>
 801421a:	4603      	mov	r3, r0
 801421c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014220:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014224:	2b00      	cmp	r3, #0
 8014226:	d103      	bne.n	8014230 <f_lseek+0x2e>
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	7d5b      	ldrb	r3, [r3, #21]
 801422c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014230:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014234:	2b00      	cmp	r3, #0
 8014236:	d009      	beq.n	801424c <f_lseek+0x4a>
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801423e:	4611      	mov	r1, r2
 8014240:	4618      	mov	r0, r3
 8014242:	f7fd fec7 	bl	8011fd4 <unlock_fs>
 8014246:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801424a:	e229      	b.n	80146a0 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014250:	2b00      	cmp	r3, #0
 8014252:	f000 80ea 	beq.w	801442a <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	f1b3 3fff 	cmp.w	r3, #4294967295
 801425c:	d164      	bne.n	8014328 <f_lseek+0x126>
			tbl = fp->cltbl;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014262:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014266:	1d1a      	adds	r2, r3, #4
 8014268:	627a      	str	r2, [r7, #36]	; 0x24
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	617b      	str	r3, [r7, #20]
 801426e:	2302      	movs	r3, #2
 8014270:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	689b      	ldr	r3, [r3, #8]
 8014276:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8014278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801427a:	2b00      	cmp	r3, #0
 801427c:	d044      	beq.n	8014308 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014280:	613b      	str	r3, [r7, #16]
 8014282:	2300      	movs	r3, #0
 8014284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014288:	3302      	adds	r3, #2
 801428a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801428e:	60fb      	str	r3, [r7, #12]
 8014290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014292:	3301      	adds	r3, #1
 8014294:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801429a:	4618      	mov	r0, r3
 801429c:	f7fe f921 	bl	80124e2 <get_fat>
 80142a0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80142a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a4:	2b01      	cmp	r3, #1
 80142a6:	d809      	bhi.n	80142bc <f_lseek+0xba>
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	2202      	movs	r2, #2
 80142ac:	755a      	strb	r2, [r3, #21]
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	2102      	movs	r1, #2
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7fd fe8e 	bl	8011fd4 <unlock_fs>
 80142b8:	2302      	movs	r3, #2
 80142ba:	e1f1      	b.n	80146a0 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80142bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142c2:	d109      	bne.n	80142d8 <f_lseek+0xd6>
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	2201      	movs	r2, #1
 80142c8:	755a      	strb	r2, [r3, #21]
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	2101      	movs	r1, #1
 80142ce:	4618      	mov	r0, r3
 80142d0:	f7fd fe80 	bl	8011fd4 <unlock_fs>
 80142d4:	2301      	movs	r3, #1
 80142d6:	e1e3      	b.n	80146a0 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	3301      	adds	r3, #1
 80142dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142de:	429a      	cmp	r2, r3
 80142e0:	d0d4      	beq.n	801428c <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80142e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142e4:	697b      	ldr	r3, [r7, #20]
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d809      	bhi.n	80142fe <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80142ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ec:	1d1a      	adds	r2, r3, #4
 80142ee:	627a      	str	r2, [r7, #36]	; 0x24
 80142f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142f2:	601a      	str	r2, [r3, #0]
 80142f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f6:	1d1a      	adds	r2, r3, #4
 80142f8:	627a      	str	r2, [r7, #36]	; 0x24
 80142fa:	693a      	ldr	r2, [r7, #16]
 80142fc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	699b      	ldr	r3, [r3, #24]
 8014302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014304:	429a      	cmp	r2, r3
 8014306:	d3ba      	bcc.n	801427e <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801430c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801430e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	429a      	cmp	r2, r3
 8014316:	d803      	bhi.n	8014320 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8014318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431a:	2200      	movs	r2, #0
 801431c:	601a      	str	r2, [r3, #0]
 801431e:	e1b6      	b.n	801468e <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014320:	2311      	movs	r3, #17
 8014322:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014326:	e1b2      	b.n	801468e <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	68db      	ldr	r3, [r3, #12]
 801432c:	683a      	ldr	r2, [r7, #0]
 801432e:	429a      	cmp	r2, r3
 8014330:	d902      	bls.n	8014338 <f_lseek+0x136>
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	68db      	ldr	r3, [r3, #12]
 8014336:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	683a      	ldr	r2, [r7, #0]
 801433c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801433e:	683b      	ldr	r3, [r7, #0]
 8014340:	2b00      	cmp	r3, #0
 8014342:	f000 81a4 	beq.w	801468e <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	3b01      	subs	r3, #1
 801434a:	4619      	mov	r1, r3
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	f7fe fb59 	bl	8012a04 <clmt_clust>
 8014352:	4602      	mov	r2, r0
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014358:	68ba      	ldr	r2, [r7, #8]
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	69db      	ldr	r3, [r3, #28]
 801435e:	4619      	mov	r1, r3
 8014360:	4610      	mov	r0, r2
 8014362:	f7fe f89f 	bl	80124a4 <clust2sect>
 8014366:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014368:	69bb      	ldr	r3, [r7, #24]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d109      	bne.n	8014382 <f_lseek+0x180>
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	2202      	movs	r2, #2
 8014372:	755a      	strb	r2, [r3, #21]
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	2102      	movs	r1, #2
 8014378:	4618      	mov	r0, r3
 801437a:	f7fd fe2b 	bl	8011fd4 <unlock_fs>
 801437e:	2302      	movs	r3, #2
 8014380:	e18e      	b.n	80146a0 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014382:	683b      	ldr	r3, [r7, #0]
 8014384:	3b01      	subs	r3, #1
 8014386:	0a5b      	lsrs	r3, r3, #9
 8014388:	68ba      	ldr	r2, [r7, #8]
 801438a:	8952      	ldrh	r2, [r2, #10]
 801438c:	3a01      	subs	r2, #1
 801438e:	4013      	ands	r3, r2
 8014390:	69ba      	ldr	r2, [r7, #24]
 8014392:	4413      	add	r3, r2
 8014394:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	699b      	ldr	r3, [r3, #24]
 801439a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801439e:	2b00      	cmp	r3, #0
 80143a0:	f000 8175 	beq.w	801468e <f_lseek+0x48c>
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	6a1b      	ldr	r3, [r3, #32]
 80143a8:	69ba      	ldr	r2, [r7, #24]
 80143aa:	429a      	cmp	r2, r3
 80143ac:	f000 816f 	beq.w	801468e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	7d1b      	ldrb	r3, [r3, #20]
 80143b4:	b25b      	sxtb	r3, r3
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	da1d      	bge.n	80143f6 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	7858      	ldrb	r0, [r3, #1]
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6a1a      	ldr	r2, [r3, #32]
 80143c8:	2301      	movs	r3, #1
 80143ca:	f7fd fcaf 	bl	8011d2c <disk_write>
 80143ce:	4603      	mov	r3, r0
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d009      	beq.n	80143e8 <f_lseek+0x1e6>
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2201      	movs	r2, #1
 80143d8:	755a      	strb	r2, [r3, #21]
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	2101      	movs	r1, #1
 80143de:	4618      	mov	r0, r3
 80143e0:	f7fd fdf8 	bl	8011fd4 <unlock_fs>
 80143e4:	2301      	movs	r3, #1
 80143e6:	e15b      	b.n	80146a0 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	7d1b      	ldrb	r3, [r3, #20]
 80143ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80143f0:	b2da      	uxtb	r2, r3
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80143f6:	68bb      	ldr	r3, [r7, #8]
 80143f8:	7858      	ldrb	r0, [r3, #1]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014400:	2301      	movs	r3, #1
 8014402:	69ba      	ldr	r2, [r7, #24]
 8014404:	f7fd fc72 	bl	8011cec <disk_read>
 8014408:	4603      	mov	r3, r0
 801440a:	2b00      	cmp	r3, #0
 801440c:	d009      	beq.n	8014422 <f_lseek+0x220>
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2201      	movs	r2, #1
 8014412:	755a      	strb	r2, [r3, #21]
 8014414:	68bb      	ldr	r3, [r7, #8]
 8014416:	2101      	movs	r1, #1
 8014418:	4618      	mov	r0, r3
 801441a:	f7fd fddb 	bl	8011fd4 <unlock_fs>
 801441e:	2301      	movs	r3, #1
 8014420:	e13e      	b.n	80146a0 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	69ba      	ldr	r2, [r7, #24]
 8014426:	621a      	str	r2, [r3, #32]
 8014428:	e131      	b.n	801468e <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	68db      	ldr	r3, [r3, #12]
 801442e:	683a      	ldr	r2, [r7, #0]
 8014430:	429a      	cmp	r2, r3
 8014432:	d908      	bls.n	8014446 <f_lseek+0x244>
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	7d1b      	ldrb	r3, [r3, #20]
 8014438:	f003 0302 	and.w	r3, r3, #2
 801443c:	2b00      	cmp	r3, #0
 801443e:	d102      	bne.n	8014446 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	68db      	ldr	r3, [r3, #12]
 8014444:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	699b      	ldr	r3, [r3, #24]
 801444a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801444c:	2300      	movs	r3, #0
 801444e:	637b      	str	r3, [r7, #52]	; 0x34
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014454:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014456:	683b      	ldr	r3, [r7, #0]
 8014458:	2b00      	cmp	r3, #0
 801445a:	f000 80c0 	beq.w	80145de <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	895b      	ldrh	r3, [r3, #10]
 8014462:	025b      	lsls	r3, r3, #9
 8014464:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014466:	6a3b      	ldr	r3, [r7, #32]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d01b      	beq.n	80144a4 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801446c:	683b      	ldr	r3, [r7, #0]
 801446e:	1e5a      	subs	r2, r3, #1
 8014470:	69fb      	ldr	r3, [r7, #28]
 8014472:	fbb2 f2f3 	udiv	r2, r2, r3
 8014476:	6a3b      	ldr	r3, [r7, #32]
 8014478:	1e59      	subs	r1, r3, #1
 801447a:	69fb      	ldr	r3, [r7, #28]
 801447c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014480:	429a      	cmp	r2, r3
 8014482:	d30f      	bcc.n	80144a4 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014484:	6a3b      	ldr	r3, [r7, #32]
 8014486:	1e5a      	subs	r2, r3, #1
 8014488:	69fb      	ldr	r3, [r7, #28]
 801448a:	425b      	negs	r3, r3
 801448c:	401a      	ands	r2, r3
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	699b      	ldr	r3, [r3, #24]
 8014496:	683a      	ldr	r2, [r7, #0]
 8014498:	1ad3      	subs	r3, r2, r3
 801449a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	69db      	ldr	r3, [r3, #28]
 80144a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80144a2:	e02c      	b.n	80144fe <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	689b      	ldr	r3, [r3, #8]
 80144a8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80144aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d123      	bne.n	80144f8 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2100      	movs	r1, #0
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fe fa0d 	bl	80128d4 <create_chain>
 80144ba:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80144bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144be:	2b01      	cmp	r3, #1
 80144c0:	d109      	bne.n	80144d6 <f_lseek+0x2d4>
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2202      	movs	r2, #2
 80144c6:	755a      	strb	r2, [r3, #21]
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	2102      	movs	r1, #2
 80144cc:	4618      	mov	r0, r3
 80144ce:	f7fd fd81 	bl	8011fd4 <unlock_fs>
 80144d2:	2302      	movs	r3, #2
 80144d4:	e0e4      	b.n	80146a0 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80144d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144dc:	d109      	bne.n	80144f2 <f_lseek+0x2f0>
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2201      	movs	r2, #1
 80144e2:	755a      	strb	r2, [r3, #21]
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	2101      	movs	r1, #1
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7fd fd73 	bl	8011fd4 <unlock_fs>
 80144ee:	2301      	movs	r3, #1
 80144f0:	e0d6      	b.n	80146a0 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144f6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144fc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80144fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014500:	2b00      	cmp	r3, #0
 8014502:	d06c      	beq.n	80145de <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8014504:	e044      	b.n	8014590 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8014506:	683a      	ldr	r2, [r7, #0]
 8014508:	69fb      	ldr	r3, [r7, #28]
 801450a:	1ad3      	subs	r3, r2, r3
 801450c:	603b      	str	r3, [r7, #0]
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	699a      	ldr	r2, [r3, #24]
 8014512:	69fb      	ldr	r3, [r7, #28]
 8014514:	441a      	add	r2, r3
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	7d1b      	ldrb	r3, [r3, #20]
 801451e:	f003 0302 	and.w	r3, r3, #2
 8014522:	2b00      	cmp	r3, #0
 8014524:	d00b      	beq.n	801453e <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801452a:	4618      	mov	r0, r3
 801452c:	f7fe f9d2 	bl	80128d4 <create_chain>
 8014530:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014534:	2b00      	cmp	r3, #0
 8014536:	d108      	bne.n	801454a <f_lseek+0x348>
							ofs = 0; break;
 8014538:	2300      	movs	r3, #0
 801453a:	603b      	str	r3, [r7, #0]
 801453c:	e02c      	b.n	8014598 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014542:	4618      	mov	r0, r3
 8014544:	f7fd ffcd 	bl	80124e2 <get_fat>
 8014548:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014550:	d109      	bne.n	8014566 <f_lseek+0x364>
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	2201      	movs	r2, #1
 8014556:	755a      	strb	r2, [r3, #21]
 8014558:	68bb      	ldr	r3, [r7, #8]
 801455a:	2101      	movs	r1, #1
 801455c:	4618      	mov	r0, r3
 801455e:	f7fd fd39 	bl	8011fd4 <unlock_fs>
 8014562:	2301      	movs	r3, #1
 8014564:	e09c      	b.n	80146a0 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014568:	2b01      	cmp	r3, #1
 801456a:	d904      	bls.n	8014576 <f_lseek+0x374>
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	699b      	ldr	r3, [r3, #24]
 8014570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014572:	429a      	cmp	r2, r3
 8014574:	d309      	bcc.n	801458a <f_lseek+0x388>
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	2202      	movs	r2, #2
 801457a:	755a      	strb	r2, [r3, #21]
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	2102      	movs	r1, #2
 8014580:	4618      	mov	r0, r3
 8014582:	f7fd fd27 	bl	8011fd4 <unlock_fs>
 8014586:	2302      	movs	r3, #2
 8014588:	e08a      	b.n	80146a0 <f_lseek+0x49e>
					fp->clust = clst;
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801458e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014590:	683a      	ldr	r2, [r7, #0]
 8014592:	69fb      	ldr	r3, [r7, #28]
 8014594:	429a      	cmp	r2, r3
 8014596:	d8b6      	bhi.n	8014506 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	699a      	ldr	r2, [r3, #24]
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	441a      	add	r2, r3
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d017      	beq.n	80145de <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7fd ff76 	bl	80124a4 <clust2sect>
 80145b8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80145ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d109      	bne.n	80145d4 <f_lseek+0x3d2>
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2202      	movs	r2, #2
 80145c4:	755a      	strb	r2, [r3, #21]
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	2102      	movs	r1, #2
 80145ca:	4618      	mov	r0, r3
 80145cc:	f7fd fd02 	bl	8011fd4 <unlock_fs>
 80145d0:	2302      	movs	r3, #2
 80145d2:	e065      	b.n	80146a0 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	0a5b      	lsrs	r3, r3, #9
 80145d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80145da:	4413      	add	r3, r2
 80145dc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	699a      	ldr	r2, [r3, #24]
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	68db      	ldr	r3, [r3, #12]
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d90a      	bls.n	8014600 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	699a      	ldr	r2, [r3, #24]
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	7d1b      	ldrb	r3, [r3, #20]
 80145f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145fa:	b2da      	uxtb	r2, r3
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	699b      	ldr	r3, [r3, #24]
 8014604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014608:	2b00      	cmp	r3, #0
 801460a:	d040      	beq.n	801468e <f_lseek+0x48c>
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	6a1b      	ldr	r3, [r3, #32]
 8014610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014612:	429a      	cmp	r2, r3
 8014614:	d03b      	beq.n	801468e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	7d1b      	ldrb	r3, [r3, #20]
 801461a:	b25b      	sxtb	r3, r3
 801461c:	2b00      	cmp	r3, #0
 801461e:	da1d      	bge.n	801465c <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	7858      	ldrb	r0, [r3, #1]
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	6a1a      	ldr	r2, [r3, #32]
 801462e:	2301      	movs	r3, #1
 8014630:	f7fd fb7c 	bl	8011d2c <disk_write>
 8014634:	4603      	mov	r3, r0
 8014636:	2b00      	cmp	r3, #0
 8014638:	d009      	beq.n	801464e <f_lseek+0x44c>
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	2201      	movs	r2, #1
 801463e:	755a      	strb	r2, [r3, #21]
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	2101      	movs	r1, #1
 8014644:	4618      	mov	r0, r3
 8014646:	f7fd fcc5 	bl	8011fd4 <unlock_fs>
 801464a:	2301      	movs	r3, #1
 801464c:	e028      	b.n	80146a0 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	7d1b      	ldrb	r3, [r3, #20]
 8014652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014656:	b2da      	uxtb	r2, r3
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801465c:	68bb      	ldr	r3, [r7, #8]
 801465e:	7858      	ldrb	r0, [r3, #1]
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014666:	2301      	movs	r3, #1
 8014668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801466a:	f7fd fb3f 	bl	8011cec <disk_read>
 801466e:	4603      	mov	r3, r0
 8014670:	2b00      	cmp	r3, #0
 8014672:	d009      	beq.n	8014688 <f_lseek+0x486>
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	2201      	movs	r2, #1
 8014678:	755a      	strb	r2, [r3, #21]
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	2101      	movs	r1, #1
 801467e:	4618      	mov	r0, r3
 8014680:	f7fd fca8 	bl	8011fd4 <unlock_fs>
 8014684:	2301      	movs	r3, #1
 8014686:	e00b      	b.n	80146a0 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801468c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014694:	4611      	mov	r1, r2
 8014696:	4618      	mov	r0, r3
 8014698:	f7fd fc9c 	bl	8011fd4 <unlock_fs>
 801469c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80146a0:	4618      	mov	r0, r3
 80146a2:	3740      	adds	r7, #64	; 0x40
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}

080146a8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b086      	sub	sp, #24
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d101      	bne.n	80146bc <f_opendir+0x14>
 80146b8:	2309      	movs	r3, #9
 80146ba:	e06a      	b.n	8014792 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80146c0:	f107 010c 	add.w	r1, r7, #12
 80146c4:	463b      	mov	r3, r7
 80146c6:	2200      	movs	r2, #0
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7fe fe79 	bl	80133c0 <find_volume>
 80146ce:	4603      	mov	r3, r0
 80146d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80146d2:	7dfb      	ldrb	r3, [r7, #23]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d14f      	bne.n	8014778 <f_opendir+0xd0>
		obj->fs = fs;
 80146d8:	68fa      	ldr	r2, [r7, #12]
 80146da:	693b      	ldr	r3, [r7, #16]
 80146dc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	4619      	mov	r1, r3
 80146e2:	6878      	ldr	r0, [r7, #4]
 80146e4:	f7fe fd60 	bl	80131a8 <follow_path>
 80146e8:	4603      	mov	r3, r0
 80146ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80146ec:	7dfb      	ldrb	r3, [r7, #23]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d13d      	bne.n	801476e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80146f8:	b25b      	sxtb	r3, r3
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	db12      	blt.n	8014724 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80146fe:	693b      	ldr	r3, [r7, #16]
 8014700:	799b      	ldrb	r3, [r3, #6]
 8014702:	f003 0310 	and.w	r3, r3, #16
 8014706:	2b00      	cmp	r3, #0
 8014708:	d00a      	beq.n	8014720 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801470a:	68fa      	ldr	r2, [r7, #12]
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	6a1b      	ldr	r3, [r3, #32]
 8014710:	4619      	mov	r1, r3
 8014712:	4610      	mov	r0, r2
 8014714:	f7fe fb31 	bl	8012d7a <ld_clust>
 8014718:	4602      	mov	r2, r0
 801471a:	693b      	ldr	r3, [r7, #16]
 801471c:	609a      	str	r2, [r3, #8]
 801471e:	e001      	b.n	8014724 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8014720:	2305      	movs	r3, #5
 8014722:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8014724:	7dfb      	ldrb	r3, [r7, #23]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d121      	bne.n	801476e <f_opendir+0xc6>
				obj->id = fs->id;
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	88da      	ldrh	r2, [r3, #6]
 801472e:	693b      	ldr	r3, [r7, #16]
 8014730:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8014732:	2100      	movs	r1, #0
 8014734:	6878      	ldr	r0, [r7, #4]
 8014736:	f7fe f999 	bl	8012a6c <dir_sdi>
 801473a:	4603      	mov	r3, r0
 801473c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801473e:	7dfb      	ldrb	r3, [r7, #23]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d114      	bne.n	801476e <f_opendir+0xc6>
					if (obj->sclust) {
 8014744:	693b      	ldr	r3, [r7, #16]
 8014746:	689b      	ldr	r3, [r3, #8]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d00d      	beq.n	8014768 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801474c:	2100      	movs	r1, #0
 801474e:	6878      	ldr	r0, [r7, #4]
 8014750:	f7fd fcda 	bl	8012108 <inc_lock>
 8014754:	4602      	mov	r2, r0
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801475a:	693b      	ldr	r3, [r7, #16]
 801475c:	691b      	ldr	r3, [r3, #16]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d105      	bne.n	801476e <f_opendir+0xc6>
 8014762:	2312      	movs	r3, #18
 8014764:	75fb      	strb	r3, [r7, #23]
 8014766:	e002      	b.n	801476e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8014768:	693b      	ldr	r3, [r7, #16]
 801476a:	2200      	movs	r2, #0
 801476c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801476e:	7dfb      	ldrb	r3, [r7, #23]
 8014770:	2b04      	cmp	r3, #4
 8014772:	d101      	bne.n	8014778 <f_opendir+0xd0>
 8014774:	2305      	movs	r3, #5
 8014776:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8014778:	7dfb      	ldrb	r3, [r7, #23]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d002      	beq.n	8014784 <f_opendir+0xdc>
 801477e:	693b      	ldr	r3, [r7, #16]
 8014780:	2200      	movs	r2, #0
 8014782:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	7dfa      	ldrb	r2, [r7, #23]
 8014788:	4611      	mov	r1, r2
 801478a:	4618      	mov	r0, r3
 801478c:	f7fd fc22 	bl	8011fd4 <unlock_fs>
 8014790:	7dfb      	ldrb	r3, [r7, #23]
}
 8014792:	4618      	mov	r0, r3
 8014794:	3718      	adds	r7, #24
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}

0801479a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801479a:	b580      	push	{r7, lr}
 801479c:	b084      	sub	sp, #16
 801479e:	af00      	add	r7, sp, #0
 80147a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f107 0208 	add.w	r2, r7, #8
 80147a8:	4611      	mov	r1, r2
 80147aa:	4618      	mov	r0, r3
 80147ac:	f7ff f85c 	bl	8013868 <validate>
 80147b0:	4603      	mov	r3, r0
 80147b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80147b4:	7bfb      	ldrb	r3, [r7, #15]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d115      	bne.n	80147e6 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	691b      	ldr	r3, [r3, #16]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d006      	beq.n	80147d0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	691b      	ldr	r3, [r3, #16]
 80147c6:	4618      	mov	r0, r3
 80147c8:	f7fd fd2c 	bl	8012224 <dec_lock>
 80147cc:	4603      	mov	r3, r0
 80147ce:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80147d0:	7bfb      	ldrb	r3, [r7, #15]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d102      	bne.n	80147dc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	2200      	movs	r2, #0
 80147da:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80147dc:	68bb      	ldr	r3, [r7, #8]
 80147de:	2100      	movs	r1, #0
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7fd fbf7 	bl	8011fd4 <unlock_fs>
#endif
	}
	return res;
 80147e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80147e8:	4618      	mov	r0, r3
 80147ea:	3710      	adds	r7, #16
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}

080147f0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b084      	sub	sp, #16
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
 80147f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f107 0208 	add.w	r2, r7, #8
 8014800:	4611      	mov	r1, r2
 8014802:	4618      	mov	r0, r3
 8014804:	f7ff f830 	bl	8013868 <validate>
 8014808:	4603      	mov	r3, r0
 801480a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801480c:	7bfb      	ldrb	r3, [r7, #15]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d126      	bne.n	8014860 <f_readdir+0x70>
		if (!fno) {
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d106      	bne.n	8014826 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8014818:	2100      	movs	r1, #0
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f7fe f926 	bl	8012a6c <dir_sdi>
 8014820:	4603      	mov	r3, r0
 8014822:	73fb      	strb	r3, [r7, #15]
 8014824:	e01c      	b.n	8014860 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8014826:	2100      	movs	r1, #0
 8014828:	6878      	ldr	r0, [r7, #4]
 801482a:	f7fe fae5 	bl	8012df8 <dir_read>
 801482e:	4603      	mov	r3, r0
 8014830:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8014832:	7bfb      	ldrb	r3, [r7, #15]
 8014834:	2b04      	cmp	r3, #4
 8014836:	d101      	bne.n	801483c <f_readdir+0x4c>
 8014838:	2300      	movs	r3, #0
 801483a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801483c:	7bfb      	ldrb	r3, [r7, #15]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d10e      	bne.n	8014860 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8014842:	6839      	ldr	r1, [r7, #0]
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f7fe fbbb 	bl	8012fc0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801484a:	2100      	movs	r1, #0
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f7fe f988 	bl	8012b62 <dir_next>
 8014852:	4603      	mov	r3, r0
 8014854:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8014856:	7bfb      	ldrb	r3, [r7, #15]
 8014858:	2b04      	cmp	r3, #4
 801485a:	d101      	bne.n	8014860 <f_readdir+0x70>
 801485c:	2300      	movs	r3, #0
 801485e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8014860:	68bb      	ldr	r3, [r7, #8]
 8014862:	7bfa      	ldrb	r2, [r7, #15]
 8014864:	4611      	mov	r1, r2
 8014866:	4618      	mov	r0, r3
 8014868:	f7fd fbb4 	bl	8011fd4 <unlock_fs>
 801486c:	7bfb      	ldrb	r3, [r7, #15]
}
 801486e:	4618      	mov	r0, r3
 8014870:	3710      	adds	r7, #16
 8014872:	46bd      	mov	sp, r7
 8014874:	bd80      	pop	{r7, pc}
	...

08014878 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014878:	b480      	push	{r7}
 801487a:	b087      	sub	sp, #28
 801487c:	af00      	add	r7, sp, #0
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	60b9      	str	r1, [r7, #8]
 8014882:	4613      	mov	r3, r2
 8014884:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014886:	2301      	movs	r3, #1
 8014888:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801488a:	2300      	movs	r3, #0
 801488c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801488e:	4b1f      	ldr	r3, [pc, #124]	; (801490c <FATFS_LinkDriverEx+0x94>)
 8014890:	7a5b      	ldrb	r3, [r3, #9]
 8014892:	b2db      	uxtb	r3, r3
 8014894:	2b00      	cmp	r3, #0
 8014896:	d131      	bne.n	80148fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014898:	4b1c      	ldr	r3, [pc, #112]	; (801490c <FATFS_LinkDriverEx+0x94>)
 801489a:	7a5b      	ldrb	r3, [r3, #9]
 801489c:	b2db      	uxtb	r3, r3
 801489e:	461a      	mov	r2, r3
 80148a0:	4b1a      	ldr	r3, [pc, #104]	; (801490c <FATFS_LinkDriverEx+0x94>)
 80148a2:	2100      	movs	r1, #0
 80148a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80148a6:	4b19      	ldr	r3, [pc, #100]	; (801490c <FATFS_LinkDriverEx+0x94>)
 80148a8:	7a5b      	ldrb	r3, [r3, #9]
 80148aa:	b2db      	uxtb	r3, r3
 80148ac:	4a17      	ldr	r2, [pc, #92]	; (801490c <FATFS_LinkDriverEx+0x94>)
 80148ae:	009b      	lsls	r3, r3, #2
 80148b0:	4413      	add	r3, r2
 80148b2:	68fa      	ldr	r2, [r7, #12]
 80148b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80148b6:	4b15      	ldr	r3, [pc, #84]	; (801490c <FATFS_LinkDriverEx+0x94>)
 80148b8:	7a5b      	ldrb	r3, [r3, #9]
 80148ba:	b2db      	uxtb	r3, r3
 80148bc:	461a      	mov	r2, r3
 80148be:	4b13      	ldr	r3, [pc, #76]	; (801490c <FATFS_LinkDriverEx+0x94>)
 80148c0:	4413      	add	r3, r2
 80148c2:	79fa      	ldrb	r2, [r7, #7]
 80148c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80148c6:	4b11      	ldr	r3, [pc, #68]	; (801490c <FATFS_LinkDriverEx+0x94>)
 80148c8:	7a5b      	ldrb	r3, [r3, #9]
 80148ca:	b2db      	uxtb	r3, r3
 80148cc:	1c5a      	adds	r2, r3, #1
 80148ce:	b2d1      	uxtb	r1, r2
 80148d0:	4a0e      	ldr	r2, [pc, #56]	; (801490c <FATFS_LinkDriverEx+0x94>)
 80148d2:	7251      	strb	r1, [r2, #9]
 80148d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80148d6:	7dbb      	ldrb	r3, [r7, #22]
 80148d8:	3330      	adds	r3, #48	; 0x30
 80148da:	b2da      	uxtb	r2, r3
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80148e0:	68bb      	ldr	r3, [r7, #8]
 80148e2:	3301      	adds	r3, #1
 80148e4:	223a      	movs	r2, #58	; 0x3a
 80148e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80148e8:	68bb      	ldr	r3, [r7, #8]
 80148ea:	3302      	adds	r3, #2
 80148ec:	222f      	movs	r2, #47	; 0x2f
 80148ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	3303      	adds	r3, #3
 80148f4:	2200      	movs	r2, #0
 80148f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80148f8:	2300      	movs	r3, #0
 80148fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80148fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80148fe:	4618      	mov	r0, r3
 8014900:	371c      	adds	r7, #28
 8014902:	46bd      	mov	sp, r7
 8014904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014908:	4770      	bx	lr
 801490a:	bf00      	nop
 801490c:	20000858 	.word	0x20000858

08014910 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b082      	sub	sp, #8
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
 8014918:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801491a:	2200      	movs	r2, #0
 801491c:	6839      	ldr	r1, [r7, #0]
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f7ff ffaa 	bl	8014878 <FATFS_LinkDriverEx>
 8014924:	4603      	mov	r3, r0
}
 8014926:	4618      	mov	r0, r3
 8014928:	3708      	adds	r7, #8
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}

0801492e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801492e:	b580      	push	{r7, lr}
 8014930:	b084      	sub	sp, #16
 8014932:	af00      	add	r7, sp, #0
 8014934:	4603      	mov	r3, r0
 8014936:	6039      	str	r1, [r7, #0]
 8014938:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801493a:	2200      	movs	r2, #0
 801493c:	2101      	movs	r1, #1
 801493e:	2001      	movs	r0, #1
 8014940:	f000 f988 	bl	8014c54 <osSemaphoreNew>
 8014944:	4602      	mov	r2, r0
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	2b00      	cmp	r3, #0
 8014950:	bf14      	ite	ne
 8014952:	2301      	movne	r3, #1
 8014954:	2300      	moveq	r3, #0
 8014956:	b2db      	uxtb	r3, r3
 8014958:	60fb      	str	r3, [r7, #12]

    return ret;
 801495a:	68fb      	ldr	r3, [r7, #12]
}
 801495c:	4618      	mov	r0, r3
 801495e:	3710      	adds	r7, #16
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}

08014964 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b082      	sub	sp, #8
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f000 fa91 	bl	8014e94 <osSemaphoreDelete>
#endif
    return 1;
 8014972:	2301      	movs	r3, #1
}
 8014974:	4618      	mov	r0, r3
 8014976:	3708      	adds	r7, #8
 8014978:	46bd      	mov	sp, r7
 801497a:	bd80      	pop	{r7, pc}

0801497c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b084      	sub	sp, #16
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8014984:	2300      	movs	r3, #0
 8014986:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8014988:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	f000 f9eb 	bl	8014d68 <osSemaphoreAcquire>
 8014992:	4603      	mov	r3, r0
 8014994:	2b00      	cmp	r3, #0
 8014996:	d101      	bne.n	801499c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8014998:	2301      	movs	r3, #1
 801499a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801499c:	68fb      	ldr	r3, [r7, #12]
}
 801499e:	4618      	mov	r0, r3
 80149a0:	3710      	adds	r7, #16
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bd80      	pop	{r7, pc}

080149a6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80149a6:	b580      	push	{r7, lr}
 80149a8:	b082      	sub	sp, #8
 80149aa:	af00      	add	r7, sp, #0
 80149ac:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80149ae:	6878      	ldr	r0, [r7, #4]
 80149b0:	f000 fa2c 	bl	8014e0c <osSemaphoreRelease>
#endif
}
 80149b4:	bf00      	nop
 80149b6:	3708      	adds	r7, #8
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}

080149bc <__NVIC_SetPriority>:
{
 80149bc:	b480      	push	{r7}
 80149be:	b083      	sub	sp, #12
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	4603      	mov	r3, r0
 80149c4:	6039      	str	r1, [r7, #0]
 80149c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80149c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	db0a      	blt.n	80149e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	b2da      	uxtb	r2, r3
 80149d4:	490c      	ldr	r1, [pc, #48]	; (8014a08 <__NVIC_SetPriority+0x4c>)
 80149d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80149da:	0112      	lsls	r2, r2, #4
 80149dc:	b2d2      	uxtb	r2, r2
 80149de:	440b      	add	r3, r1
 80149e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80149e4:	e00a      	b.n	80149fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	b2da      	uxtb	r2, r3
 80149ea:	4908      	ldr	r1, [pc, #32]	; (8014a0c <__NVIC_SetPriority+0x50>)
 80149ec:	79fb      	ldrb	r3, [r7, #7]
 80149ee:	f003 030f 	and.w	r3, r3, #15
 80149f2:	3b04      	subs	r3, #4
 80149f4:	0112      	lsls	r2, r2, #4
 80149f6:	b2d2      	uxtb	r2, r2
 80149f8:	440b      	add	r3, r1
 80149fa:	761a      	strb	r2, [r3, #24]
}
 80149fc:	bf00      	nop
 80149fe:	370c      	adds	r7, #12
 8014a00:	46bd      	mov	sp, r7
 8014a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a06:	4770      	bx	lr
 8014a08:	e000e100 	.word	0xe000e100
 8014a0c:	e000ed00 	.word	0xe000ed00

08014a10 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014a10:	b580      	push	{r7, lr}
 8014a12:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8014a14:	4b05      	ldr	r3, [pc, #20]	; (8014a2c <SysTick_Handler+0x1c>)
 8014a16:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014a18:	f002 fa20 	bl	8016e5c <xTaskGetSchedulerState>
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	2b01      	cmp	r3, #1
 8014a20:	d001      	beq.n	8014a26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8014a22:	f003 f909 	bl	8017c38 <xPortSysTickHandler>
  }
}
 8014a26:	bf00      	nop
 8014a28:	bd80      	pop	{r7, pc}
 8014a2a:	bf00      	nop
 8014a2c:	e000e010 	.word	0xe000e010

08014a30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014a30:	b580      	push	{r7, lr}
 8014a32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014a34:	2100      	movs	r1, #0
 8014a36:	f06f 0004 	mvn.w	r0, #4
 8014a3a:	f7ff ffbf 	bl	80149bc <__NVIC_SetPriority>
#endif
}
 8014a3e:	bf00      	nop
 8014a40:	bd80      	pop	{r7, pc}
	...

08014a44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014a44:	b480      	push	{r7}
 8014a46:	b083      	sub	sp, #12
 8014a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014a4a:	f3ef 8305 	mrs	r3, IPSR
 8014a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8014a50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d003      	beq.n	8014a5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014a56:	f06f 0305 	mvn.w	r3, #5
 8014a5a:	607b      	str	r3, [r7, #4]
 8014a5c:	e00c      	b.n	8014a78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014a5e:	4b0a      	ldr	r3, [pc, #40]	; (8014a88 <osKernelInitialize+0x44>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d105      	bne.n	8014a72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014a66:	4b08      	ldr	r3, [pc, #32]	; (8014a88 <osKernelInitialize+0x44>)
 8014a68:	2201      	movs	r2, #1
 8014a6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	607b      	str	r3, [r7, #4]
 8014a70:	e002      	b.n	8014a78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8014a72:	f04f 33ff 	mov.w	r3, #4294967295
 8014a76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014a78:	687b      	ldr	r3, [r7, #4]
}
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	370c      	adds	r7, #12
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a84:	4770      	bx	lr
 8014a86:	bf00      	nop
 8014a88:	20000864 	.word	0x20000864

08014a8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b082      	sub	sp, #8
 8014a90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014a92:	f3ef 8305 	mrs	r3, IPSR
 8014a96:	603b      	str	r3, [r7, #0]
  return(result);
 8014a98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d003      	beq.n	8014aa6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8014a9e:	f06f 0305 	mvn.w	r3, #5
 8014aa2:	607b      	str	r3, [r7, #4]
 8014aa4:	e010      	b.n	8014ac8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014aa6:	4b0b      	ldr	r3, [pc, #44]	; (8014ad4 <osKernelStart+0x48>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	2b01      	cmp	r3, #1
 8014aac:	d109      	bne.n	8014ac2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8014aae:	f7ff ffbf 	bl	8014a30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014ab2:	4b08      	ldr	r3, [pc, #32]	; (8014ad4 <osKernelStart+0x48>)
 8014ab4:	2202      	movs	r2, #2
 8014ab6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014ab8:	f001 fd64 	bl	8016584 <vTaskStartScheduler>
      stat = osOK;
 8014abc:	2300      	movs	r3, #0
 8014abe:	607b      	str	r3, [r7, #4]
 8014ac0:	e002      	b.n	8014ac8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8014ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ac6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014ac8:	687b      	ldr	r3, [r7, #4]
}
 8014aca:	4618      	mov	r0, r3
 8014acc:	3708      	adds	r7, #8
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}
 8014ad2:	bf00      	nop
 8014ad4:	20000864 	.word	0x20000864

08014ad8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b08e      	sub	sp, #56	; 0x38
 8014adc:	af04      	add	r7, sp, #16
 8014ade:	60f8      	str	r0, [r7, #12]
 8014ae0:	60b9      	str	r1, [r7, #8]
 8014ae2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ae8:	f3ef 8305 	mrs	r3, IPSR
 8014aec:	617b      	str	r3, [r7, #20]
  return(result);
 8014aee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d17e      	bne.n	8014bf2 <osThreadNew+0x11a>
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d07b      	beq.n	8014bf2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8014afa:	2380      	movs	r3, #128	; 0x80
 8014afc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8014afe:	2318      	movs	r3, #24
 8014b00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8014b02:	2300      	movs	r3, #0
 8014b04:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8014b06:	f04f 33ff 	mov.w	r3, #4294967295
 8014b0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d045      	beq.n	8014b9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d002      	beq.n	8014b20 <osThreadNew+0x48>
        name = attr->name;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	699b      	ldr	r3, [r3, #24]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d002      	beq.n	8014b2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	699b      	ldr	r3, [r3, #24]
 8014b2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014b2e:	69fb      	ldr	r3, [r7, #28]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d008      	beq.n	8014b46 <osThreadNew+0x6e>
 8014b34:	69fb      	ldr	r3, [r7, #28]
 8014b36:	2b38      	cmp	r3, #56	; 0x38
 8014b38:	d805      	bhi.n	8014b46 <osThreadNew+0x6e>
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	685b      	ldr	r3, [r3, #4]
 8014b3e:	f003 0301 	and.w	r3, r3, #1
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d001      	beq.n	8014b4a <osThreadNew+0x72>
        return (NULL);
 8014b46:	2300      	movs	r3, #0
 8014b48:	e054      	b.n	8014bf4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	695b      	ldr	r3, [r3, #20]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d003      	beq.n	8014b5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	695b      	ldr	r3, [r3, #20]
 8014b56:	089b      	lsrs	r3, r3, #2
 8014b58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	689b      	ldr	r3, [r3, #8]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d00e      	beq.n	8014b80 <osThreadNew+0xa8>
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	68db      	ldr	r3, [r3, #12]
 8014b66:	2bbb      	cmp	r3, #187	; 0xbb
 8014b68:	d90a      	bls.n	8014b80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d006      	beq.n	8014b80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	695b      	ldr	r3, [r3, #20]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d002      	beq.n	8014b80 <osThreadNew+0xa8>
        mem = 1;
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	61bb      	str	r3, [r7, #24]
 8014b7e:	e010      	b.n	8014ba2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	689b      	ldr	r3, [r3, #8]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d10c      	bne.n	8014ba2 <osThreadNew+0xca>
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	68db      	ldr	r3, [r3, #12]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d108      	bne.n	8014ba2 <osThreadNew+0xca>
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	691b      	ldr	r3, [r3, #16]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d104      	bne.n	8014ba2 <osThreadNew+0xca>
          mem = 0;
 8014b98:	2300      	movs	r3, #0
 8014b9a:	61bb      	str	r3, [r7, #24]
 8014b9c:	e001      	b.n	8014ba2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014ba2:	69bb      	ldr	r3, [r7, #24]
 8014ba4:	2b01      	cmp	r3, #1
 8014ba6:	d110      	bne.n	8014bca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014bac:	687a      	ldr	r2, [r7, #4]
 8014bae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014bb0:	9202      	str	r2, [sp, #8]
 8014bb2:	9301      	str	r3, [sp, #4]
 8014bb4:	69fb      	ldr	r3, [r7, #28]
 8014bb6:	9300      	str	r3, [sp, #0]
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	6a3a      	ldr	r2, [r7, #32]
 8014bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014bbe:	68f8      	ldr	r0, [r7, #12]
 8014bc0:	f001 fa82 	bl	80160c8 <xTaskCreateStatic>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	613b      	str	r3, [r7, #16]
 8014bc8:	e013      	b.n	8014bf2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8014bca:	69bb      	ldr	r3, [r7, #24]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d110      	bne.n	8014bf2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014bd0:	6a3b      	ldr	r3, [r7, #32]
 8014bd2:	b29a      	uxth	r2, r3
 8014bd4:	f107 0310 	add.w	r3, r7, #16
 8014bd8:	9301      	str	r3, [sp, #4]
 8014bda:	69fb      	ldr	r3, [r7, #28]
 8014bdc:	9300      	str	r3, [sp, #0]
 8014bde:	68bb      	ldr	r3, [r7, #8]
 8014be0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014be2:	68f8      	ldr	r0, [r7, #12]
 8014be4:	f001 facd 	bl	8016182 <xTaskCreate>
 8014be8:	4603      	mov	r3, r0
 8014bea:	2b01      	cmp	r3, #1
 8014bec:	d001      	beq.n	8014bf2 <osThreadNew+0x11a>
            hTask = NULL;
 8014bee:	2300      	movs	r3, #0
 8014bf0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014bf2:	693b      	ldr	r3, [r7, #16]
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	3728      	adds	r7, #40	; 0x28
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd80      	pop	{r7, pc}

08014bfc <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b082      	sub	sp, #8
 8014c00:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8014c02:	f002 f91b 	bl	8016e3c <xTaskGetCurrentTaskHandle>
 8014c06:	6078      	str	r0, [r7, #4]

  return (id);
 8014c08:	687b      	ldr	r3, [r7, #4]
}
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	3708      	adds	r7, #8
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd80      	pop	{r7, pc}

08014c12 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8014c12:	b580      	push	{r7, lr}
 8014c14:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8014c16:	2000      	movs	r0, #0
 8014c18:	f001 fc0e 	bl	8016438 <vTaskDelete>
#endif
  for (;;);
 8014c1c:	e7fe      	b.n	8014c1c <osThreadExit+0xa>

08014c1e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8014c1e:	b580      	push	{r7, lr}
 8014c20:	b084      	sub	sp, #16
 8014c22:	af00      	add	r7, sp, #0
 8014c24:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c26:	f3ef 8305 	mrs	r3, IPSR
 8014c2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8014c2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d003      	beq.n	8014c3a <osDelay+0x1c>
    stat = osErrorISR;
 8014c32:	f06f 0305 	mvn.w	r3, #5
 8014c36:	60fb      	str	r3, [r7, #12]
 8014c38:	e007      	b.n	8014c4a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d002      	beq.n	8014c4a <osDelay+0x2c>
      vTaskDelay(ticks);
 8014c44:	6878      	ldr	r0, [r7, #4]
 8014c46:	f001 fc69 	bl	801651c <vTaskDelay>
    }
  }

  return (stat);
 8014c4a:	68fb      	ldr	r3, [r7, #12]
}
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	3710      	adds	r7, #16
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}

08014c54 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b08a      	sub	sp, #40	; 0x28
 8014c58:	af02      	add	r7, sp, #8
 8014c5a:	60f8      	str	r0, [r7, #12]
 8014c5c:	60b9      	str	r1, [r7, #8]
 8014c5e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8014c60:	2300      	movs	r3, #0
 8014c62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c64:	f3ef 8305 	mrs	r3, IPSR
 8014c68:	613b      	str	r3, [r7, #16]
  return(result);
 8014c6a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d175      	bne.n	8014d5c <osSemaphoreNew+0x108>
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d072      	beq.n	8014d5c <osSemaphoreNew+0x108>
 8014c76:	68ba      	ldr	r2, [r7, #8]
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d86e      	bhi.n	8014d5c <osSemaphoreNew+0x108>
    mem = -1;
 8014c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d015      	beq.n	8014cb6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	689b      	ldr	r3, [r3, #8]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d006      	beq.n	8014ca0 <osSemaphoreNew+0x4c>
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	68db      	ldr	r3, [r3, #12]
 8014c96:	2b4f      	cmp	r3, #79	; 0x4f
 8014c98:	d902      	bls.n	8014ca0 <osSemaphoreNew+0x4c>
        mem = 1;
 8014c9a:	2301      	movs	r3, #1
 8014c9c:	61bb      	str	r3, [r7, #24]
 8014c9e:	e00c      	b.n	8014cba <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	689b      	ldr	r3, [r3, #8]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d108      	bne.n	8014cba <osSemaphoreNew+0x66>
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	68db      	ldr	r3, [r3, #12]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d104      	bne.n	8014cba <osSemaphoreNew+0x66>
          mem = 0;
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	61bb      	str	r3, [r7, #24]
 8014cb4:	e001      	b.n	8014cba <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8014cba:	69bb      	ldr	r3, [r7, #24]
 8014cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cc0:	d04c      	beq.n	8014d5c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	2b01      	cmp	r3, #1
 8014cc6:	d128      	bne.n	8014d1a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	2b01      	cmp	r3, #1
 8014ccc:	d10a      	bne.n	8014ce4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	689b      	ldr	r3, [r3, #8]
 8014cd2:	2203      	movs	r2, #3
 8014cd4:	9200      	str	r2, [sp, #0]
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	2100      	movs	r1, #0
 8014cda:	2001      	movs	r0, #1
 8014cdc:	f000 fa4e 	bl	801517c <xQueueGenericCreateStatic>
 8014ce0:	61f8      	str	r0, [r7, #28]
 8014ce2:	e005      	b.n	8014cf0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8014ce4:	2203      	movs	r2, #3
 8014ce6:	2100      	movs	r1, #0
 8014ce8:	2001      	movs	r0, #1
 8014cea:	f000 fabf 	bl	801526c <xQueueGenericCreate>
 8014cee:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8014cf0:	69fb      	ldr	r3, [r7, #28]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d022      	beq.n	8014d3c <osSemaphoreNew+0xe8>
 8014cf6:	68bb      	ldr	r3, [r7, #8]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d01f      	beq.n	8014d3c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	2200      	movs	r2, #0
 8014d00:	2100      	movs	r1, #0
 8014d02:	69f8      	ldr	r0, [r7, #28]
 8014d04:	f000 fb7a 	bl	80153fc <xQueueGenericSend>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	2b01      	cmp	r3, #1
 8014d0c:	d016      	beq.n	8014d3c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8014d0e:	69f8      	ldr	r0, [r7, #28]
 8014d10:	f001 f806 	bl	8015d20 <vQueueDelete>
            hSemaphore = NULL;
 8014d14:	2300      	movs	r3, #0
 8014d16:	61fb      	str	r3, [r7, #28]
 8014d18:	e010      	b.n	8014d3c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8014d1a:	69bb      	ldr	r3, [r7, #24]
 8014d1c:	2b01      	cmp	r3, #1
 8014d1e:	d108      	bne.n	8014d32 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	689b      	ldr	r3, [r3, #8]
 8014d24:	461a      	mov	r2, r3
 8014d26:	68b9      	ldr	r1, [r7, #8]
 8014d28:	68f8      	ldr	r0, [r7, #12]
 8014d2a:	f000 fafc 	bl	8015326 <xQueueCreateCountingSemaphoreStatic>
 8014d2e:	61f8      	str	r0, [r7, #28]
 8014d30:	e004      	b.n	8014d3c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8014d32:	68b9      	ldr	r1, [r7, #8]
 8014d34:	68f8      	ldr	r0, [r7, #12]
 8014d36:	f000 fb2d 	bl	8015394 <xQueueCreateCountingSemaphore>
 8014d3a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8014d3c:	69fb      	ldr	r3, [r7, #28]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d00c      	beq.n	8014d5c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d003      	beq.n	8014d50 <osSemaphoreNew+0xfc>
          name = attr->name;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	617b      	str	r3, [r7, #20]
 8014d4e:	e001      	b.n	8014d54 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8014d50:	2300      	movs	r3, #0
 8014d52:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8014d54:	6979      	ldr	r1, [r7, #20]
 8014d56:	69f8      	ldr	r0, [r7, #28]
 8014d58:	f001 f92e 	bl	8015fb8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8014d5c:	69fb      	ldr	r3, [r7, #28]
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3720      	adds	r7, #32
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bd80      	pop	{r7, pc}
	...

08014d68 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b086      	sub	sp, #24
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
 8014d70:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014d76:	2300      	movs	r3, #0
 8014d78:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014d7a:	693b      	ldr	r3, [r7, #16]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d103      	bne.n	8014d88 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8014d80:	f06f 0303 	mvn.w	r3, #3
 8014d84:	617b      	str	r3, [r7, #20]
 8014d86:	e039      	b.n	8014dfc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d88:	f3ef 8305 	mrs	r3, IPSR
 8014d8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8014d8e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d022      	beq.n	8014dda <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d003      	beq.n	8014da2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8014d9a:	f06f 0303 	mvn.w	r3, #3
 8014d9e:	617b      	str	r3, [r7, #20]
 8014da0:	e02c      	b.n	8014dfc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8014da2:	2300      	movs	r3, #0
 8014da4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8014da6:	f107 0308 	add.w	r3, r7, #8
 8014daa:	461a      	mov	r2, r3
 8014dac:	2100      	movs	r1, #0
 8014dae:	6938      	ldr	r0, [r7, #16]
 8014db0:	f000 ff36 	bl	8015c20 <xQueueReceiveFromISR>
 8014db4:	4603      	mov	r3, r0
 8014db6:	2b01      	cmp	r3, #1
 8014db8:	d003      	beq.n	8014dc2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8014dba:	f06f 0302 	mvn.w	r3, #2
 8014dbe:	617b      	str	r3, [r7, #20]
 8014dc0:	e01c      	b.n	8014dfc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8014dc2:	68bb      	ldr	r3, [r7, #8]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d019      	beq.n	8014dfc <osSemaphoreAcquire+0x94>
 8014dc8:	4b0f      	ldr	r3, [pc, #60]	; (8014e08 <osSemaphoreAcquire+0xa0>)
 8014dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014dce:	601a      	str	r2, [r3, #0]
 8014dd0:	f3bf 8f4f 	dsb	sy
 8014dd4:	f3bf 8f6f 	isb	sy
 8014dd8:	e010      	b.n	8014dfc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8014dda:	6839      	ldr	r1, [r7, #0]
 8014ddc:	6938      	ldr	r0, [r7, #16]
 8014dde:	f000 fe13 	bl	8015a08 <xQueueSemaphoreTake>
 8014de2:	4603      	mov	r3, r0
 8014de4:	2b01      	cmp	r3, #1
 8014de6:	d009      	beq.n	8014dfc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8014de8:	683b      	ldr	r3, [r7, #0]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d003      	beq.n	8014df6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8014dee:	f06f 0301 	mvn.w	r3, #1
 8014df2:	617b      	str	r3, [r7, #20]
 8014df4:	e002      	b.n	8014dfc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8014df6:	f06f 0302 	mvn.w	r3, #2
 8014dfa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8014dfc:	697b      	ldr	r3, [r7, #20]
}
 8014dfe:	4618      	mov	r0, r3
 8014e00:	3718      	adds	r7, #24
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}
 8014e06:	bf00      	nop
 8014e08:	e000ed04 	.word	0xe000ed04

08014e0c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b086      	sub	sp, #24
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014e18:	2300      	movs	r3, #0
 8014e1a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014e1c:	693b      	ldr	r3, [r7, #16]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d103      	bne.n	8014e2a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8014e22:	f06f 0303 	mvn.w	r3, #3
 8014e26:	617b      	str	r3, [r7, #20]
 8014e28:	e02c      	b.n	8014e84 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014e2a:	f3ef 8305 	mrs	r3, IPSR
 8014e2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8014e30:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d01a      	beq.n	8014e6c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8014e36:	2300      	movs	r3, #0
 8014e38:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8014e3a:	f107 0308 	add.w	r3, r7, #8
 8014e3e:	4619      	mov	r1, r3
 8014e40:	6938      	ldr	r0, [r7, #16]
 8014e42:	f000 fc74 	bl	801572e <xQueueGiveFromISR>
 8014e46:	4603      	mov	r3, r0
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	d003      	beq.n	8014e54 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8014e4c:	f06f 0302 	mvn.w	r3, #2
 8014e50:	617b      	str	r3, [r7, #20]
 8014e52:	e017      	b.n	8014e84 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8014e54:	68bb      	ldr	r3, [r7, #8]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d014      	beq.n	8014e84 <osSemaphoreRelease+0x78>
 8014e5a:	4b0d      	ldr	r3, [pc, #52]	; (8014e90 <osSemaphoreRelease+0x84>)
 8014e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e60:	601a      	str	r2, [r3, #0]
 8014e62:	f3bf 8f4f 	dsb	sy
 8014e66:	f3bf 8f6f 	isb	sy
 8014e6a:	e00b      	b.n	8014e84 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	2200      	movs	r2, #0
 8014e70:	2100      	movs	r1, #0
 8014e72:	6938      	ldr	r0, [r7, #16]
 8014e74:	f000 fac2 	bl	80153fc <xQueueGenericSend>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	2b01      	cmp	r3, #1
 8014e7c:	d002      	beq.n	8014e84 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8014e7e:	f06f 0302 	mvn.w	r3, #2
 8014e82:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8014e84:	697b      	ldr	r3, [r7, #20]
}
 8014e86:	4618      	mov	r0, r3
 8014e88:	3718      	adds	r7, #24
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bd80      	pop	{r7, pc}
 8014e8e:	bf00      	nop
 8014e90:	e000ed04 	.word	0xe000ed04

08014e94 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b086      	sub	sp, #24
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ea0:	f3ef 8305 	mrs	r3, IPSR
 8014ea4:	60fb      	str	r3, [r7, #12]
  return(result);
 8014ea6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d003      	beq.n	8014eb4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8014eac:	f06f 0305 	mvn.w	r3, #5
 8014eb0:	617b      	str	r3, [r7, #20]
 8014eb2:	e00e      	b.n	8014ed2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8014eb4:	693b      	ldr	r3, [r7, #16]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d103      	bne.n	8014ec2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8014eba:	f06f 0303 	mvn.w	r3, #3
 8014ebe:	617b      	str	r3, [r7, #20]
 8014ec0:	e007      	b.n	8014ed2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8014ec2:	6938      	ldr	r0, [r7, #16]
 8014ec4:	f001 f8a2 	bl	801600c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8014ecc:	6938      	ldr	r0, [r7, #16]
 8014ece:	f000 ff27 	bl	8015d20 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8014ed2:	697b      	ldr	r3, [r7, #20]
}
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	3718      	adds	r7, #24
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	bd80      	pop	{r7, pc}

08014edc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014edc:	b480      	push	{r7}
 8014ede:	b085      	sub	sp, #20
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	60f8      	str	r0, [r7, #12]
 8014ee4:	60b9      	str	r1, [r7, #8]
 8014ee6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	4a07      	ldr	r2, [pc, #28]	; (8014f08 <vApplicationGetIdleTaskMemory+0x2c>)
 8014eec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	4a06      	ldr	r2, [pc, #24]	; (8014f0c <vApplicationGetIdleTaskMemory+0x30>)
 8014ef2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	2280      	movs	r2, #128	; 0x80
 8014ef8:	601a      	str	r2, [r3, #0]
}
 8014efa:	bf00      	nop
 8014efc:	3714      	adds	r7, #20
 8014efe:	46bd      	mov	sp, r7
 8014f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f04:	4770      	bx	lr
 8014f06:	bf00      	nop
 8014f08:	20000868 	.word	0x20000868
 8014f0c:	20000924 	.word	0x20000924

08014f10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014f10:	b480      	push	{r7}
 8014f12:	b085      	sub	sp, #20
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	60f8      	str	r0, [r7, #12]
 8014f18:	60b9      	str	r1, [r7, #8]
 8014f1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	4a07      	ldr	r2, [pc, #28]	; (8014f3c <vApplicationGetTimerTaskMemory+0x2c>)
 8014f20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8014f22:	68bb      	ldr	r3, [r7, #8]
 8014f24:	4a06      	ldr	r2, [pc, #24]	; (8014f40 <vApplicationGetTimerTaskMemory+0x30>)
 8014f26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014f2e:	601a      	str	r2, [r3, #0]
}
 8014f30:	bf00      	nop
 8014f32:	3714      	adds	r7, #20
 8014f34:	46bd      	mov	sp, r7
 8014f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3a:	4770      	bx	lr
 8014f3c:	20000b24 	.word	0x20000b24
 8014f40:	20000be0 	.word	0x20000be0

08014f44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014f44:	b480      	push	{r7}
 8014f46:	b083      	sub	sp, #12
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	f103 0208 	add.w	r2, r3, #8
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	f04f 32ff 	mov.w	r2, #4294967295
 8014f5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	f103 0208 	add.w	r2, r3, #8
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f103 0208 	add.w	r2, r3, #8
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	2200      	movs	r2, #0
 8014f76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014f78:	bf00      	nop
 8014f7a:	370c      	adds	r7, #12
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f82:	4770      	bx	lr

08014f84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014f84:	b480      	push	{r7}
 8014f86:	b083      	sub	sp, #12
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	2200      	movs	r2, #0
 8014f90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014f92:	bf00      	nop
 8014f94:	370c      	adds	r7, #12
 8014f96:	46bd      	mov	sp, r7
 8014f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9c:	4770      	bx	lr

08014f9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014f9e:	b480      	push	{r7}
 8014fa0:	b085      	sub	sp, #20
 8014fa2:	af00      	add	r7, sp, #0
 8014fa4:	6078      	str	r0, [r7, #4]
 8014fa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	685b      	ldr	r3, [r3, #4]
 8014fac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014fae:	683b      	ldr	r3, [r7, #0]
 8014fb0:	68fa      	ldr	r2, [r7, #12]
 8014fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	689a      	ldr	r2, [r3, #8]
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	689b      	ldr	r3, [r3, #8]
 8014fc0:	683a      	ldr	r2, [r7, #0]
 8014fc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	683a      	ldr	r2, [r7, #0]
 8014fc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014fca:	683b      	ldr	r3, [r7, #0]
 8014fcc:	687a      	ldr	r2, [r7, #4]
 8014fce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	1c5a      	adds	r2, r3, #1
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	601a      	str	r2, [r3, #0]
}
 8014fda:	bf00      	nop
 8014fdc:	3714      	adds	r7, #20
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe4:	4770      	bx	lr

08014fe6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014fe6:	b480      	push	{r7}
 8014fe8:	b085      	sub	sp, #20
 8014fea:	af00      	add	r7, sp, #0
 8014fec:	6078      	str	r0, [r7, #4]
 8014fee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014ff0:	683b      	ldr	r3, [r7, #0]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014ff6:	68bb      	ldr	r3, [r7, #8]
 8014ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ffc:	d103      	bne.n	8015006 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	691b      	ldr	r3, [r3, #16]
 8015002:	60fb      	str	r3, [r7, #12]
 8015004:	e00c      	b.n	8015020 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	3308      	adds	r3, #8
 801500a:	60fb      	str	r3, [r7, #12]
 801500c:	e002      	b.n	8015014 <vListInsert+0x2e>
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	685b      	ldr	r3, [r3, #4]
 8015012:	60fb      	str	r3, [r7, #12]
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	685b      	ldr	r3, [r3, #4]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	68ba      	ldr	r2, [r7, #8]
 801501c:	429a      	cmp	r2, r3
 801501e:	d2f6      	bcs.n	801500e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	685a      	ldr	r2, [r3, #4]
 8015024:	683b      	ldr	r3, [r7, #0]
 8015026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	685b      	ldr	r3, [r3, #4]
 801502c:	683a      	ldr	r2, [r7, #0]
 801502e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015030:	683b      	ldr	r3, [r7, #0]
 8015032:	68fa      	ldr	r2, [r7, #12]
 8015034:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	683a      	ldr	r2, [r7, #0]
 801503a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801503c:	683b      	ldr	r3, [r7, #0]
 801503e:	687a      	ldr	r2, [r7, #4]
 8015040:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	1c5a      	adds	r2, r3, #1
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	601a      	str	r2, [r3, #0]
}
 801504c:	bf00      	nop
 801504e:	3714      	adds	r7, #20
 8015050:	46bd      	mov	sp, r7
 8015052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015056:	4770      	bx	lr

08015058 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015058:	b480      	push	{r7}
 801505a:	b085      	sub	sp, #20
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	691b      	ldr	r3, [r3, #16]
 8015064:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	685b      	ldr	r3, [r3, #4]
 801506a:	687a      	ldr	r2, [r7, #4]
 801506c:	6892      	ldr	r2, [r2, #8]
 801506e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	689b      	ldr	r3, [r3, #8]
 8015074:	687a      	ldr	r2, [r7, #4]
 8015076:	6852      	ldr	r2, [r2, #4]
 8015078:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	687a      	ldr	r2, [r7, #4]
 8015080:	429a      	cmp	r2, r3
 8015082:	d103      	bne.n	801508c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	689a      	ldr	r2, [r3, #8]
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2200      	movs	r2, #0
 8015090:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	1e5a      	subs	r2, r3, #1
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	681b      	ldr	r3, [r3, #0]
}
 80150a0:	4618      	mov	r0, r3
 80150a2:	3714      	adds	r7, #20
 80150a4:	46bd      	mov	sp, r7
 80150a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150aa:	4770      	bx	lr

080150ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b084      	sub	sp, #16
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
 80150b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d10a      	bne.n	80150d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80150c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150c4:	f383 8811 	msr	BASEPRI, r3
 80150c8:	f3bf 8f6f 	isb	sy
 80150cc:	f3bf 8f4f 	dsb	sy
 80150d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80150d2:	bf00      	nop
 80150d4:	e7fe      	b.n	80150d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80150d6:	f002 fd1d 	bl	8017b14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	681a      	ldr	r2, [r3, #0]
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150e2:	68f9      	ldr	r1, [r7, #12]
 80150e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80150e6:	fb01 f303 	mul.w	r3, r1, r3
 80150ea:	441a      	add	r2, r3
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	2200      	movs	r2, #0
 80150f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	681a      	ldr	r2, [r3, #0]
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	681a      	ldr	r2, [r3, #0]
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015106:	3b01      	subs	r3, #1
 8015108:	68f9      	ldr	r1, [r7, #12]
 801510a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801510c:	fb01 f303 	mul.w	r3, r1, r3
 8015110:	441a      	add	r2, r3
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	22ff      	movs	r2, #255	; 0xff
 801511a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	22ff      	movs	r2, #255	; 0xff
 8015122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d114      	bne.n	8015156 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	691b      	ldr	r3, [r3, #16]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d01a      	beq.n	801516a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	3310      	adds	r3, #16
 8015138:	4618      	mov	r0, r3
 801513a:	f001 fcbd 	bl	8016ab8 <xTaskRemoveFromEventList>
 801513e:	4603      	mov	r3, r0
 8015140:	2b00      	cmp	r3, #0
 8015142:	d012      	beq.n	801516a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015144:	4b0c      	ldr	r3, [pc, #48]	; (8015178 <xQueueGenericReset+0xcc>)
 8015146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801514a:	601a      	str	r2, [r3, #0]
 801514c:	f3bf 8f4f 	dsb	sy
 8015150:	f3bf 8f6f 	isb	sy
 8015154:	e009      	b.n	801516a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	3310      	adds	r3, #16
 801515a:	4618      	mov	r0, r3
 801515c:	f7ff fef2 	bl	8014f44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	3324      	adds	r3, #36	; 0x24
 8015164:	4618      	mov	r0, r3
 8015166:	f7ff feed 	bl	8014f44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801516a:	f002 fd03 	bl	8017b74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801516e:	2301      	movs	r3, #1
}
 8015170:	4618      	mov	r0, r3
 8015172:	3710      	adds	r7, #16
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}
 8015178:	e000ed04 	.word	0xe000ed04

0801517c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801517c:	b580      	push	{r7, lr}
 801517e:	b08e      	sub	sp, #56	; 0x38
 8015180:	af02      	add	r7, sp, #8
 8015182:	60f8      	str	r0, [r7, #12]
 8015184:	60b9      	str	r1, [r7, #8]
 8015186:	607a      	str	r2, [r7, #4]
 8015188:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d10a      	bne.n	80151a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015194:	f383 8811 	msr	BASEPRI, r3
 8015198:	f3bf 8f6f 	isb	sy
 801519c:	f3bf 8f4f 	dsb	sy
 80151a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80151a2:	bf00      	nop
 80151a4:	e7fe      	b.n	80151a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d10a      	bne.n	80151c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80151ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151b0:	f383 8811 	msr	BASEPRI, r3
 80151b4:	f3bf 8f6f 	isb	sy
 80151b8:	f3bf 8f4f 	dsb	sy
 80151bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80151be:	bf00      	nop
 80151c0:	e7fe      	b.n	80151c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d002      	beq.n	80151ce <xQueueGenericCreateStatic+0x52>
 80151c8:	68bb      	ldr	r3, [r7, #8]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d001      	beq.n	80151d2 <xQueueGenericCreateStatic+0x56>
 80151ce:	2301      	movs	r3, #1
 80151d0:	e000      	b.n	80151d4 <xQueueGenericCreateStatic+0x58>
 80151d2:	2300      	movs	r3, #0
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d10a      	bne.n	80151ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80151d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151dc:	f383 8811 	msr	BASEPRI, r3
 80151e0:	f3bf 8f6f 	isb	sy
 80151e4:	f3bf 8f4f 	dsb	sy
 80151e8:	623b      	str	r3, [r7, #32]
}
 80151ea:	bf00      	nop
 80151ec:	e7fe      	b.n	80151ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d102      	bne.n	80151fa <xQueueGenericCreateStatic+0x7e>
 80151f4:	68bb      	ldr	r3, [r7, #8]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d101      	bne.n	80151fe <xQueueGenericCreateStatic+0x82>
 80151fa:	2301      	movs	r3, #1
 80151fc:	e000      	b.n	8015200 <xQueueGenericCreateStatic+0x84>
 80151fe:	2300      	movs	r3, #0
 8015200:	2b00      	cmp	r3, #0
 8015202:	d10a      	bne.n	801521a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015208:	f383 8811 	msr	BASEPRI, r3
 801520c:	f3bf 8f6f 	isb	sy
 8015210:	f3bf 8f4f 	dsb	sy
 8015214:	61fb      	str	r3, [r7, #28]
}
 8015216:	bf00      	nop
 8015218:	e7fe      	b.n	8015218 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801521a:	2350      	movs	r3, #80	; 0x50
 801521c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801521e:	697b      	ldr	r3, [r7, #20]
 8015220:	2b50      	cmp	r3, #80	; 0x50
 8015222:	d00a      	beq.n	801523a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015228:	f383 8811 	msr	BASEPRI, r3
 801522c:	f3bf 8f6f 	isb	sy
 8015230:	f3bf 8f4f 	dsb	sy
 8015234:	61bb      	str	r3, [r7, #24]
}
 8015236:	bf00      	nop
 8015238:	e7fe      	b.n	8015238 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801523a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801523c:	683b      	ldr	r3, [r7, #0]
 801523e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015242:	2b00      	cmp	r3, #0
 8015244:	d00d      	beq.n	8015262 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015248:	2201      	movs	r2, #1
 801524a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801524e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015254:	9300      	str	r3, [sp, #0]
 8015256:	4613      	mov	r3, r2
 8015258:	687a      	ldr	r2, [r7, #4]
 801525a:	68b9      	ldr	r1, [r7, #8]
 801525c:	68f8      	ldr	r0, [r7, #12]
 801525e:	f000 f83f 	bl	80152e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015264:	4618      	mov	r0, r3
 8015266:	3730      	adds	r7, #48	; 0x30
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}

0801526c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801526c:	b580      	push	{r7, lr}
 801526e:	b08a      	sub	sp, #40	; 0x28
 8015270:	af02      	add	r7, sp, #8
 8015272:	60f8      	str	r0, [r7, #12]
 8015274:	60b9      	str	r1, [r7, #8]
 8015276:	4613      	mov	r3, r2
 8015278:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d10a      	bne.n	8015296 <xQueueGenericCreate+0x2a>
	__asm volatile
 8015280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015284:	f383 8811 	msr	BASEPRI, r3
 8015288:	f3bf 8f6f 	isb	sy
 801528c:	f3bf 8f4f 	dsb	sy
 8015290:	613b      	str	r3, [r7, #16]
}
 8015292:	bf00      	nop
 8015294:	e7fe      	b.n	8015294 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	68ba      	ldr	r2, [r7, #8]
 801529a:	fb02 f303 	mul.w	r3, r2, r3
 801529e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80152a0:	69fb      	ldr	r3, [r7, #28]
 80152a2:	3350      	adds	r3, #80	; 0x50
 80152a4:	4618      	mov	r0, r3
 80152a6:	f002 fd57 	bl	8017d58 <pvPortMalloc>
 80152aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80152ac:	69bb      	ldr	r3, [r7, #24]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d011      	beq.n	80152d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80152b2:	69bb      	ldr	r3, [r7, #24]
 80152b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80152b6:	697b      	ldr	r3, [r7, #20]
 80152b8:	3350      	adds	r3, #80	; 0x50
 80152ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80152bc:	69bb      	ldr	r3, [r7, #24]
 80152be:	2200      	movs	r2, #0
 80152c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80152c4:	79fa      	ldrb	r2, [r7, #7]
 80152c6:	69bb      	ldr	r3, [r7, #24]
 80152c8:	9300      	str	r3, [sp, #0]
 80152ca:	4613      	mov	r3, r2
 80152cc:	697a      	ldr	r2, [r7, #20]
 80152ce:	68b9      	ldr	r1, [r7, #8]
 80152d0:	68f8      	ldr	r0, [r7, #12]
 80152d2:	f000 f805 	bl	80152e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80152d6:	69bb      	ldr	r3, [r7, #24]
	}
 80152d8:	4618      	mov	r0, r3
 80152da:	3720      	adds	r7, #32
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}

080152e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b084      	sub	sp, #16
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	60f8      	str	r0, [r7, #12]
 80152e8:	60b9      	str	r1, [r7, #8]
 80152ea:	607a      	str	r2, [r7, #4]
 80152ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80152ee:	68bb      	ldr	r3, [r7, #8]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d103      	bne.n	80152fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80152f4:	69bb      	ldr	r3, [r7, #24]
 80152f6:	69ba      	ldr	r2, [r7, #24]
 80152f8:	601a      	str	r2, [r3, #0]
 80152fa:	e002      	b.n	8015302 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80152fc:	69bb      	ldr	r3, [r7, #24]
 80152fe:	687a      	ldr	r2, [r7, #4]
 8015300:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015302:	69bb      	ldr	r3, [r7, #24]
 8015304:	68fa      	ldr	r2, [r7, #12]
 8015306:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015308:	69bb      	ldr	r3, [r7, #24]
 801530a:	68ba      	ldr	r2, [r7, #8]
 801530c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801530e:	2101      	movs	r1, #1
 8015310:	69b8      	ldr	r0, [r7, #24]
 8015312:	f7ff fecb 	bl	80150ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015316:	69bb      	ldr	r3, [r7, #24]
 8015318:	78fa      	ldrb	r2, [r7, #3]
 801531a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801531e:	bf00      	nop
 8015320:	3710      	adds	r7, #16
 8015322:	46bd      	mov	sp, r7
 8015324:	bd80      	pop	{r7, pc}

08015326 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015326:	b580      	push	{r7, lr}
 8015328:	b08a      	sub	sp, #40	; 0x28
 801532a:	af02      	add	r7, sp, #8
 801532c:	60f8      	str	r0, [r7, #12]
 801532e:	60b9      	str	r1, [r7, #8]
 8015330:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d10a      	bne.n	801534e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8015338:	f04f 0350 	mov.w	r3, #80	; 0x50
 801533c:	f383 8811 	msr	BASEPRI, r3
 8015340:	f3bf 8f6f 	isb	sy
 8015344:	f3bf 8f4f 	dsb	sy
 8015348:	61bb      	str	r3, [r7, #24]
}
 801534a:	bf00      	nop
 801534c:	e7fe      	b.n	801534c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801534e:	68ba      	ldr	r2, [r7, #8]
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	429a      	cmp	r2, r3
 8015354:	d90a      	bls.n	801536c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8015356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801535a:	f383 8811 	msr	BASEPRI, r3
 801535e:	f3bf 8f6f 	isb	sy
 8015362:	f3bf 8f4f 	dsb	sy
 8015366:	617b      	str	r3, [r7, #20]
}
 8015368:	bf00      	nop
 801536a:	e7fe      	b.n	801536a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801536c:	2302      	movs	r3, #2
 801536e:	9300      	str	r3, [sp, #0]
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	2200      	movs	r2, #0
 8015374:	2100      	movs	r1, #0
 8015376:	68f8      	ldr	r0, [r7, #12]
 8015378:	f7ff ff00 	bl	801517c <xQueueGenericCreateStatic>
 801537c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801537e:	69fb      	ldr	r3, [r7, #28]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d002      	beq.n	801538a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015384:	69fb      	ldr	r3, [r7, #28]
 8015386:	68ba      	ldr	r2, [r7, #8]
 8015388:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801538a:	69fb      	ldr	r3, [r7, #28]
	}
 801538c:	4618      	mov	r0, r3
 801538e:	3720      	adds	r7, #32
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}

08015394 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015394:	b580      	push	{r7, lr}
 8015396:	b086      	sub	sp, #24
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
 801539c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d10a      	bne.n	80153ba <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80153a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a8:	f383 8811 	msr	BASEPRI, r3
 80153ac:	f3bf 8f6f 	isb	sy
 80153b0:	f3bf 8f4f 	dsb	sy
 80153b4:	613b      	str	r3, [r7, #16]
}
 80153b6:	bf00      	nop
 80153b8:	e7fe      	b.n	80153b8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80153ba:	683a      	ldr	r2, [r7, #0]
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d90a      	bls.n	80153d8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80153c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153c6:	f383 8811 	msr	BASEPRI, r3
 80153ca:	f3bf 8f6f 	isb	sy
 80153ce:	f3bf 8f4f 	dsb	sy
 80153d2:	60fb      	str	r3, [r7, #12]
}
 80153d4:	bf00      	nop
 80153d6:	e7fe      	b.n	80153d6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80153d8:	2202      	movs	r2, #2
 80153da:	2100      	movs	r1, #0
 80153dc:	6878      	ldr	r0, [r7, #4]
 80153de:	f7ff ff45 	bl	801526c <xQueueGenericCreate>
 80153e2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80153e4:	697b      	ldr	r3, [r7, #20]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d002      	beq.n	80153f0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80153ea:	697b      	ldr	r3, [r7, #20]
 80153ec:	683a      	ldr	r2, [r7, #0]
 80153ee:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80153f0:	697b      	ldr	r3, [r7, #20]
	}
 80153f2:	4618      	mov	r0, r3
 80153f4:	3718      	adds	r7, #24
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}
	...

080153fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b08e      	sub	sp, #56	; 0x38
 8015400:	af00      	add	r7, sp, #0
 8015402:	60f8      	str	r0, [r7, #12]
 8015404:	60b9      	str	r1, [r7, #8]
 8015406:	607a      	str	r2, [r7, #4]
 8015408:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801540a:	2300      	movs	r3, #0
 801540c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015414:	2b00      	cmp	r3, #0
 8015416:	d10a      	bne.n	801542e <xQueueGenericSend+0x32>
	__asm volatile
 8015418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801541c:	f383 8811 	msr	BASEPRI, r3
 8015420:	f3bf 8f6f 	isb	sy
 8015424:	f3bf 8f4f 	dsb	sy
 8015428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801542a:	bf00      	nop
 801542c:	e7fe      	b.n	801542c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801542e:	68bb      	ldr	r3, [r7, #8]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d103      	bne.n	801543c <xQueueGenericSend+0x40>
 8015434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015438:	2b00      	cmp	r3, #0
 801543a:	d101      	bne.n	8015440 <xQueueGenericSend+0x44>
 801543c:	2301      	movs	r3, #1
 801543e:	e000      	b.n	8015442 <xQueueGenericSend+0x46>
 8015440:	2300      	movs	r3, #0
 8015442:	2b00      	cmp	r3, #0
 8015444:	d10a      	bne.n	801545c <xQueueGenericSend+0x60>
	__asm volatile
 8015446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801544a:	f383 8811 	msr	BASEPRI, r3
 801544e:	f3bf 8f6f 	isb	sy
 8015452:	f3bf 8f4f 	dsb	sy
 8015456:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015458:	bf00      	nop
 801545a:	e7fe      	b.n	801545a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801545c:	683b      	ldr	r3, [r7, #0]
 801545e:	2b02      	cmp	r3, #2
 8015460:	d103      	bne.n	801546a <xQueueGenericSend+0x6e>
 8015462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015466:	2b01      	cmp	r3, #1
 8015468:	d101      	bne.n	801546e <xQueueGenericSend+0x72>
 801546a:	2301      	movs	r3, #1
 801546c:	e000      	b.n	8015470 <xQueueGenericSend+0x74>
 801546e:	2300      	movs	r3, #0
 8015470:	2b00      	cmp	r3, #0
 8015472:	d10a      	bne.n	801548a <xQueueGenericSend+0x8e>
	__asm volatile
 8015474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015478:	f383 8811 	msr	BASEPRI, r3
 801547c:	f3bf 8f6f 	isb	sy
 8015480:	f3bf 8f4f 	dsb	sy
 8015484:	623b      	str	r3, [r7, #32]
}
 8015486:	bf00      	nop
 8015488:	e7fe      	b.n	8015488 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801548a:	f001 fce7 	bl	8016e5c <xTaskGetSchedulerState>
 801548e:	4603      	mov	r3, r0
 8015490:	2b00      	cmp	r3, #0
 8015492:	d102      	bne.n	801549a <xQueueGenericSend+0x9e>
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d101      	bne.n	801549e <xQueueGenericSend+0xa2>
 801549a:	2301      	movs	r3, #1
 801549c:	e000      	b.n	80154a0 <xQueueGenericSend+0xa4>
 801549e:	2300      	movs	r3, #0
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d10a      	bne.n	80154ba <xQueueGenericSend+0xbe>
	__asm volatile
 80154a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154a8:	f383 8811 	msr	BASEPRI, r3
 80154ac:	f3bf 8f6f 	isb	sy
 80154b0:	f3bf 8f4f 	dsb	sy
 80154b4:	61fb      	str	r3, [r7, #28]
}
 80154b6:	bf00      	nop
 80154b8:	e7fe      	b.n	80154b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80154ba:	f002 fb2b 	bl	8017b14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80154be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80154c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154c6:	429a      	cmp	r2, r3
 80154c8:	d302      	bcc.n	80154d0 <xQueueGenericSend+0xd4>
 80154ca:	683b      	ldr	r3, [r7, #0]
 80154cc:	2b02      	cmp	r3, #2
 80154ce:	d129      	bne.n	8015524 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80154d0:	683a      	ldr	r2, [r7, #0]
 80154d2:	68b9      	ldr	r1, [r7, #8]
 80154d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154d6:	f000 fc5e 	bl	8015d96 <prvCopyDataToQueue>
 80154da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80154dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d010      	beq.n	8015506 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80154e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154e6:	3324      	adds	r3, #36	; 0x24
 80154e8:	4618      	mov	r0, r3
 80154ea:	f001 fae5 	bl	8016ab8 <xTaskRemoveFromEventList>
 80154ee:	4603      	mov	r3, r0
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d013      	beq.n	801551c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80154f4:	4b3f      	ldr	r3, [pc, #252]	; (80155f4 <xQueueGenericSend+0x1f8>)
 80154f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154fa:	601a      	str	r2, [r3, #0]
 80154fc:	f3bf 8f4f 	dsb	sy
 8015500:	f3bf 8f6f 	isb	sy
 8015504:	e00a      	b.n	801551c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015508:	2b00      	cmp	r3, #0
 801550a:	d007      	beq.n	801551c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801550c:	4b39      	ldr	r3, [pc, #228]	; (80155f4 <xQueueGenericSend+0x1f8>)
 801550e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015512:	601a      	str	r2, [r3, #0]
 8015514:	f3bf 8f4f 	dsb	sy
 8015518:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801551c:	f002 fb2a 	bl	8017b74 <vPortExitCritical>
				return pdPASS;
 8015520:	2301      	movs	r3, #1
 8015522:	e063      	b.n	80155ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d103      	bne.n	8015532 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801552a:	f002 fb23 	bl	8017b74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801552e:	2300      	movs	r3, #0
 8015530:	e05c      	b.n	80155ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015534:	2b00      	cmp	r3, #0
 8015536:	d106      	bne.n	8015546 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015538:	f107 0314 	add.w	r3, r7, #20
 801553c:	4618      	mov	r0, r3
 801553e:	f001 fb1f 	bl	8016b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015542:	2301      	movs	r3, #1
 8015544:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015546:	f002 fb15 	bl	8017b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801554a:	f001 f88b 	bl	8016664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801554e:	f002 fae1 	bl	8017b14 <vPortEnterCritical>
 8015552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015558:	b25b      	sxtb	r3, r3
 801555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801555e:	d103      	bne.n	8015568 <xQueueGenericSend+0x16c>
 8015560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015562:	2200      	movs	r2, #0
 8015564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801556a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801556e:	b25b      	sxtb	r3, r3
 8015570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015574:	d103      	bne.n	801557e <xQueueGenericSend+0x182>
 8015576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015578:	2200      	movs	r2, #0
 801557a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801557e:	f002 faf9 	bl	8017b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015582:	1d3a      	adds	r2, r7, #4
 8015584:	f107 0314 	add.w	r3, r7, #20
 8015588:	4611      	mov	r1, r2
 801558a:	4618      	mov	r0, r3
 801558c:	f001 fb0e 	bl	8016bac <xTaskCheckForTimeOut>
 8015590:	4603      	mov	r3, r0
 8015592:	2b00      	cmp	r3, #0
 8015594:	d124      	bne.n	80155e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015598:	f000 fcf5 	bl	8015f86 <prvIsQueueFull>
 801559c:	4603      	mov	r3, r0
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d018      	beq.n	80155d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80155a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155a4:	3310      	adds	r3, #16
 80155a6:	687a      	ldr	r2, [r7, #4]
 80155a8:	4611      	mov	r1, r2
 80155aa:	4618      	mov	r0, r3
 80155ac:	f001 fa34 	bl	8016a18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80155b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155b2:	f000 fc80 	bl	8015eb6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80155b6:	f001 f863 	bl	8016680 <xTaskResumeAll>
 80155ba:	4603      	mov	r3, r0
 80155bc:	2b00      	cmp	r3, #0
 80155be:	f47f af7c 	bne.w	80154ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80155c2:	4b0c      	ldr	r3, [pc, #48]	; (80155f4 <xQueueGenericSend+0x1f8>)
 80155c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155c8:	601a      	str	r2, [r3, #0]
 80155ca:	f3bf 8f4f 	dsb	sy
 80155ce:	f3bf 8f6f 	isb	sy
 80155d2:	e772      	b.n	80154ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80155d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155d6:	f000 fc6e 	bl	8015eb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80155da:	f001 f851 	bl	8016680 <xTaskResumeAll>
 80155de:	e76c      	b.n	80154ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80155e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155e2:	f000 fc68 	bl	8015eb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80155e6:	f001 f84b 	bl	8016680 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80155ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80155ec:	4618      	mov	r0, r3
 80155ee:	3738      	adds	r7, #56	; 0x38
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd80      	pop	{r7, pc}
 80155f4:	e000ed04 	.word	0xe000ed04

080155f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b090      	sub	sp, #64	; 0x40
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	60f8      	str	r0, [r7, #12]
 8015600:	60b9      	str	r1, [r7, #8]
 8015602:	607a      	str	r2, [r7, #4]
 8015604:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801560c:	2b00      	cmp	r3, #0
 801560e:	d10a      	bne.n	8015626 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015614:	f383 8811 	msr	BASEPRI, r3
 8015618:	f3bf 8f6f 	isb	sy
 801561c:	f3bf 8f4f 	dsb	sy
 8015620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015622:	bf00      	nop
 8015624:	e7fe      	b.n	8015624 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d103      	bne.n	8015634 <xQueueGenericSendFromISR+0x3c>
 801562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015630:	2b00      	cmp	r3, #0
 8015632:	d101      	bne.n	8015638 <xQueueGenericSendFromISR+0x40>
 8015634:	2301      	movs	r3, #1
 8015636:	e000      	b.n	801563a <xQueueGenericSendFromISR+0x42>
 8015638:	2300      	movs	r3, #0
 801563a:	2b00      	cmp	r3, #0
 801563c:	d10a      	bne.n	8015654 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015642:	f383 8811 	msr	BASEPRI, r3
 8015646:	f3bf 8f6f 	isb	sy
 801564a:	f3bf 8f4f 	dsb	sy
 801564e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015650:	bf00      	nop
 8015652:	e7fe      	b.n	8015652 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015654:	683b      	ldr	r3, [r7, #0]
 8015656:	2b02      	cmp	r3, #2
 8015658:	d103      	bne.n	8015662 <xQueueGenericSendFromISR+0x6a>
 801565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801565c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801565e:	2b01      	cmp	r3, #1
 8015660:	d101      	bne.n	8015666 <xQueueGenericSendFromISR+0x6e>
 8015662:	2301      	movs	r3, #1
 8015664:	e000      	b.n	8015668 <xQueueGenericSendFromISR+0x70>
 8015666:	2300      	movs	r3, #0
 8015668:	2b00      	cmp	r3, #0
 801566a:	d10a      	bne.n	8015682 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015670:	f383 8811 	msr	BASEPRI, r3
 8015674:	f3bf 8f6f 	isb	sy
 8015678:	f3bf 8f4f 	dsb	sy
 801567c:	623b      	str	r3, [r7, #32]
}
 801567e:	bf00      	nop
 8015680:	e7fe      	b.n	8015680 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015682:	f002 fb29 	bl	8017cd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015686:	f3ef 8211 	mrs	r2, BASEPRI
 801568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801568e:	f383 8811 	msr	BASEPRI, r3
 8015692:	f3bf 8f6f 	isb	sy
 8015696:	f3bf 8f4f 	dsb	sy
 801569a:	61fa      	str	r2, [r7, #28]
 801569c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801569e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80156a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80156a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80156a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156aa:	429a      	cmp	r2, r3
 80156ac:	d302      	bcc.n	80156b4 <xQueueGenericSendFromISR+0xbc>
 80156ae:	683b      	ldr	r3, [r7, #0]
 80156b0:	2b02      	cmp	r3, #2
 80156b2:	d12f      	bne.n	8015714 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80156b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80156ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80156be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80156c4:	683a      	ldr	r2, [r7, #0]
 80156c6:	68b9      	ldr	r1, [r7, #8]
 80156c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80156ca:	f000 fb64 	bl	8015d96 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80156ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80156d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156d6:	d112      	bne.n	80156fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80156d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d016      	beq.n	801570e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80156e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156e2:	3324      	adds	r3, #36	; 0x24
 80156e4:	4618      	mov	r0, r3
 80156e6:	f001 f9e7 	bl	8016ab8 <xTaskRemoveFromEventList>
 80156ea:	4603      	mov	r3, r0
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d00e      	beq.n	801570e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d00b      	beq.n	801570e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	2201      	movs	r2, #1
 80156fa:	601a      	str	r2, [r3, #0]
 80156fc:	e007      	b.n	801570e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80156fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015702:	3301      	adds	r3, #1
 8015704:	b2db      	uxtb	r3, r3
 8015706:	b25a      	sxtb	r2, r3
 8015708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801570a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801570e:	2301      	movs	r3, #1
 8015710:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8015712:	e001      	b.n	8015718 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015714:	2300      	movs	r3, #0
 8015716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801571a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801571c:	697b      	ldr	r3, [r7, #20]
 801571e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015722:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015726:	4618      	mov	r0, r3
 8015728:	3740      	adds	r7, #64	; 0x40
 801572a:	46bd      	mov	sp, r7
 801572c:	bd80      	pop	{r7, pc}

0801572e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801572e:	b580      	push	{r7, lr}
 8015730:	b08e      	sub	sp, #56	; 0x38
 8015732:	af00      	add	r7, sp, #0
 8015734:	6078      	str	r0, [r7, #4]
 8015736:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801573e:	2b00      	cmp	r3, #0
 8015740:	d10a      	bne.n	8015758 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8015742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015746:	f383 8811 	msr	BASEPRI, r3
 801574a:	f3bf 8f6f 	isb	sy
 801574e:	f3bf 8f4f 	dsb	sy
 8015752:	623b      	str	r3, [r7, #32]
}
 8015754:	bf00      	nop
 8015756:	e7fe      	b.n	8015756 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801575c:	2b00      	cmp	r3, #0
 801575e:	d00a      	beq.n	8015776 <xQueueGiveFromISR+0x48>
	__asm volatile
 8015760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015764:	f383 8811 	msr	BASEPRI, r3
 8015768:	f3bf 8f6f 	isb	sy
 801576c:	f3bf 8f4f 	dsb	sy
 8015770:	61fb      	str	r3, [r7, #28]
}
 8015772:	bf00      	nop
 8015774:	e7fe      	b.n	8015774 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d103      	bne.n	8015786 <xQueueGiveFromISR+0x58>
 801577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015780:	689b      	ldr	r3, [r3, #8]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d101      	bne.n	801578a <xQueueGiveFromISR+0x5c>
 8015786:	2301      	movs	r3, #1
 8015788:	e000      	b.n	801578c <xQueueGiveFromISR+0x5e>
 801578a:	2300      	movs	r3, #0
 801578c:	2b00      	cmp	r3, #0
 801578e:	d10a      	bne.n	80157a6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8015790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015794:	f383 8811 	msr	BASEPRI, r3
 8015798:	f3bf 8f6f 	isb	sy
 801579c:	f3bf 8f4f 	dsb	sy
 80157a0:	61bb      	str	r3, [r7, #24]
}
 80157a2:	bf00      	nop
 80157a4:	e7fe      	b.n	80157a4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80157a6:	f002 fa97 	bl	8017cd8 <vPortValidateInterruptPriority>
	__asm volatile
 80157aa:	f3ef 8211 	mrs	r2, BASEPRI
 80157ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157b2:	f383 8811 	msr	BASEPRI, r3
 80157b6:	f3bf 8f6f 	isb	sy
 80157ba:	f3bf 8f4f 	dsb	sy
 80157be:	617a      	str	r2, [r7, #20]
 80157c0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80157c2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80157c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80157c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80157cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80157d2:	429a      	cmp	r2, r3
 80157d4:	d22b      	bcs.n	801582e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80157d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80157dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80157e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e2:	1c5a      	adds	r2, r3, #1
 80157e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80157e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80157ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157f0:	d112      	bne.n	8015818 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80157f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d016      	beq.n	8015828 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80157fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157fc:	3324      	adds	r3, #36	; 0x24
 80157fe:	4618      	mov	r0, r3
 8015800:	f001 f95a 	bl	8016ab8 <xTaskRemoveFromEventList>
 8015804:	4603      	mov	r3, r0
 8015806:	2b00      	cmp	r3, #0
 8015808:	d00e      	beq.n	8015828 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d00b      	beq.n	8015828 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015810:	683b      	ldr	r3, [r7, #0]
 8015812:	2201      	movs	r2, #1
 8015814:	601a      	str	r2, [r3, #0]
 8015816:	e007      	b.n	8015828 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801581c:	3301      	adds	r3, #1
 801581e:	b2db      	uxtb	r3, r3
 8015820:	b25a      	sxtb	r2, r3
 8015822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015828:	2301      	movs	r3, #1
 801582a:	637b      	str	r3, [r7, #52]	; 0x34
 801582c:	e001      	b.n	8015832 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801582e:	2300      	movs	r3, #0
 8015830:	637b      	str	r3, [r7, #52]	; 0x34
 8015832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015834:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	f383 8811 	msr	BASEPRI, r3
}
 801583c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015840:	4618      	mov	r0, r3
 8015842:	3738      	adds	r7, #56	; 0x38
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}

08015848 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b08c      	sub	sp, #48	; 0x30
 801584c:	af00      	add	r7, sp, #0
 801584e:	60f8      	str	r0, [r7, #12]
 8015850:	60b9      	str	r1, [r7, #8]
 8015852:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015854:	2300      	movs	r3, #0
 8015856:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801585e:	2b00      	cmp	r3, #0
 8015860:	d10a      	bne.n	8015878 <xQueueReceive+0x30>
	__asm volatile
 8015862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015866:	f383 8811 	msr	BASEPRI, r3
 801586a:	f3bf 8f6f 	isb	sy
 801586e:	f3bf 8f4f 	dsb	sy
 8015872:	623b      	str	r3, [r7, #32]
}
 8015874:	bf00      	nop
 8015876:	e7fe      	b.n	8015876 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015878:	68bb      	ldr	r3, [r7, #8]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d103      	bne.n	8015886 <xQueueReceive+0x3e>
 801587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015882:	2b00      	cmp	r3, #0
 8015884:	d101      	bne.n	801588a <xQueueReceive+0x42>
 8015886:	2301      	movs	r3, #1
 8015888:	e000      	b.n	801588c <xQueueReceive+0x44>
 801588a:	2300      	movs	r3, #0
 801588c:	2b00      	cmp	r3, #0
 801588e:	d10a      	bne.n	80158a6 <xQueueReceive+0x5e>
	__asm volatile
 8015890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015894:	f383 8811 	msr	BASEPRI, r3
 8015898:	f3bf 8f6f 	isb	sy
 801589c:	f3bf 8f4f 	dsb	sy
 80158a0:	61fb      	str	r3, [r7, #28]
}
 80158a2:	bf00      	nop
 80158a4:	e7fe      	b.n	80158a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80158a6:	f001 fad9 	bl	8016e5c <xTaskGetSchedulerState>
 80158aa:	4603      	mov	r3, r0
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d102      	bne.n	80158b6 <xQueueReceive+0x6e>
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d101      	bne.n	80158ba <xQueueReceive+0x72>
 80158b6:	2301      	movs	r3, #1
 80158b8:	e000      	b.n	80158bc <xQueueReceive+0x74>
 80158ba:	2300      	movs	r3, #0
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d10a      	bne.n	80158d6 <xQueueReceive+0x8e>
	__asm volatile
 80158c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158c4:	f383 8811 	msr	BASEPRI, r3
 80158c8:	f3bf 8f6f 	isb	sy
 80158cc:	f3bf 8f4f 	dsb	sy
 80158d0:	61bb      	str	r3, [r7, #24]
}
 80158d2:	bf00      	nop
 80158d4:	e7fe      	b.n	80158d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80158d6:	f002 f91d 	bl	8017b14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80158da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80158de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80158e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d01f      	beq.n	8015926 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80158e6:	68b9      	ldr	r1, [r7, #8]
 80158e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158ea:	f000 fabe 	bl	8015e6a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80158ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f0:	1e5a      	subs	r2, r3, #1
 80158f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80158f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158f8:	691b      	ldr	r3, [r3, #16]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d00f      	beq.n	801591e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80158fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015900:	3310      	adds	r3, #16
 8015902:	4618      	mov	r0, r3
 8015904:	f001 f8d8 	bl	8016ab8 <xTaskRemoveFromEventList>
 8015908:	4603      	mov	r3, r0
 801590a:	2b00      	cmp	r3, #0
 801590c:	d007      	beq.n	801591e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801590e:	4b3d      	ldr	r3, [pc, #244]	; (8015a04 <xQueueReceive+0x1bc>)
 8015910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015914:	601a      	str	r2, [r3, #0]
 8015916:	f3bf 8f4f 	dsb	sy
 801591a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801591e:	f002 f929 	bl	8017b74 <vPortExitCritical>
				return pdPASS;
 8015922:	2301      	movs	r3, #1
 8015924:	e069      	b.n	80159fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d103      	bne.n	8015934 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801592c:	f002 f922 	bl	8017b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015930:	2300      	movs	r3, #0
 8015932:	e062      	b.n	80159fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015936:	2b00      	cmp	r3, #0
 8015938:	d106      	bne.n	8015948 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801593a:	f107 0310 	add.w	r3, r7, #16
 801593e:	4618      	mov	r0, r3
 8015940:	f001 f91e 	bl	8016b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015944:	2301      	movs	r3, #1
 8015946:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015948:	f002 f914 	bl	8017b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801594c:	f000 fe8a 	bl	8016664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015950:	f002 f8e0 	bl	8017b14 <vPortEnterCritical>
 8015954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015956:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801595a:	b25b      	sxtb	r3, r3
 801595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015960:	d103      	bne.n	801596a <xQueueReceive+0x122>
 8015962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015964:	2200      	movs	r2, #0
 8015966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801596c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015970:	b25b      	sxtb	r3, r3
 8015972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015976:	d103      	bne.n	8015980 <xQueueReceive+0x138>
 8015978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801597a:	2200      	movs	r2, #0
 801597c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015980:	f002 f8f8 	bl	8017b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015984:	1d3a      	adds	r2, r7, #4
 8015986:	f107 0310 	add.w	r3, r7, #16
 801598a:	4611      	mov	r1, r2
 801598c:	4618      	mov	r0, r3
 801598e:	f001 f90d 	bl	8016bac <xTaskCheckForTimeOut>
 8015992:	4603      	mov	r3, r0
 8015994:	2b00      	cmp	r3, #0
 8015996:	d123      	bne.n	80159e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801599a:	f000 fade 	bl	8015f5a <prvIsQueueEmpty>
 801599e:	4603      	mov	r3, r0
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d017      	beq.n	80159d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80159a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159a6:	3324      	adds	r3, #36	; 0x24
 80159a8:	687a      	ldr	r2, [r7, #4]
 80159aa:	4611      	mov	r1, r2
 80159ac:	4618      	mov	r0, r3
 80159ae:	f001 f833 	bl	8016a18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80159b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159b4:	f000 fa7f 	bl	8015eb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80159b8:	f000 fe62 	bl	8016680 <xTaskResumeAll>
 80159bc:	4603      	mov	r3, r0
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d189      	bne.n	80158d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80159c2:	4b10      	ldr	r3, [pc, #64]	; (8015a04 <xQueueReceive+0x1bc>)
 80159c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159c8:	601a      	str	r2, [r3, #0]
 80159ca:	f3bf 8f4f 	dsb	sy
 80159ce:	f3bf 8f6f 	isb	sy
 80159d2:	e780      	b.n	80158d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80159d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159d6:	f000 fa6e 	bl	8015eb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80159da:	f000 fe51 	bl	8016680 <xTaskResumeAll>
 80159de:	e77a      	b.n	80158d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80159e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159e2:	f000 fa68 	bl	8015eb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80159e6:	f000 fe4b 	bl	8016680 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80159ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159ec:	f000 fab5 	bl	8015f5a <prvIsQueueEmpty>
 80159f0:	4603      	mov	r3, r0
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	f43f af6f 	beq.w	80158d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80159f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80159fa:	4618      	mov	r0, r3
 80159fc:	3730      	adds	r7, #48	; 0x30
 80159fe:	46bd      	mov	sp, r7
 8015a00:	bd80      	pop	{r7, pc}
 8015a02:	bf00      	nop
 8015a04:	e000ed04 	.word	0xe000ed04

08015a08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b08e      	sub	sp, #56	; 0x38
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	6078      	str	r0, [r7, #4]
 8015a10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015a12:	2300      	movs	r3, #0
 8015a14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d10a      	bne.n	8015a3a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8015a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a28:	f383 8811 	msr	BASEPRI, r3
 8015a2c:	f3bf 8f6f 	isb	sy
 8015a30:	f3bf 8f4f 	dsb	sy
 8015a34:	623b      	str	r3, [r7, #32]
}
 8015a36:	bf00      	nop
 8015a38:	e7fe      	b.n	8015a38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d00a      	beq.n	8015a58 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8015a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a46:	f383 8811 	msr	BASEPRI, r3
 8015a4a:	f3bf 8f6f 	isb	sy
 8015a4e:	f3bf 8f4f 	dsb	sy
 8015a52:	61fb      	str	r3, [r7, #28]
}
 8015a54:	bf00      	nop
 8015a56:	e7fe      	b.n	8015a56 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015a58:	f001 fa00 	bl	8016e5c <xTaskGetSchedulerState>
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d102      	bne.n	8015a68 <xQueueSemaphoreTake+0x60>
 8015a62:	683b      	ldr	r3, [r7, #0]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d101      	bne.n	8015a6c <xQueueSemaphoreTake+0x64>
 8015a68:	2301      	movs	r3, #1
 8015a6a:	e000      	b.n	8015a6e <xQueueSemaphoreTake+0x66>
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d10a      	bne.n	8015a88 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8015a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a76:	f383 8811 	msr	BASEPRI, r3
 8015a7a:	f3bf 8f6f 	isb	sy
 8015a7e:	f3bf 8f4f 	dsb	sy
 8015a82:	61bb      	str	r3, [r7, #24]
}
 8015a84:	bf00      	nop
 8015a86:	e7fe      	b.n	8015a86 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015a88:	f002 f844 	bl	8017b14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a90:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d024      	beq.n	8015ae2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a9a:	1e5a      	subs	r2, r3, #1
 8015a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a9e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d104      	bne.n	8015ab2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015aa8:	f001 fb4e 	bl	8017148 <pvTaskIncrementMutexHeldCount>
 8015aac:	4602      	mov	r2, r0
 8015aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ab0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ab4:	691b      	ldr	r3, [r3, #16]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d00f      	beq.n	8015ada <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015abc:	3310      	adds	r3, #16
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f000 fffa 	bl	8016ab8 <xTaskRemoveFromEventList>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d007      	beq.n	8015ada <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015aca:	4b54      	ldr	r3, [pc, #336]	; (8015c1c <xQueueSemaphoreTake+0x214>)
 8015acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ad0:	601a      	str	r2, [r3, #0]
 8015ad2:	f3bf 8f4f 	dsb	sy
 8015ad6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015ada:	f002 f84b 	bl	8017b74 <vPortExitCritical>
				return pdPASS;
 8015ade:	2301      	movs	r3, #1
 8015ae0:	e097      	b.n	8015c12 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015ae2:	683b      	ldr	r3, [r7, #0]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d111      	bne.n	8015b0c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d00a      	beq.n	8015b04 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8015aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af2:	f383 8811 	msr	BASEPRI, r3
 8015af6:	f3bf 8f6f 	isb	sy
 8015afa:	f3bf 8f4f 	dsb	sy
 8015afe:	617b      	str	r3, [r7, #20]
}
 8015b00:	bf00      	nop
 8015b02:	e7fe      	b.n	8015b02 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015b04:	f002 f836 	bl	8017b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	e082      	b.n	8015c12 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d106      	bne.n	8015b20 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015b12:	f107 030c 	add.w	r3, r7, #12
 8015b16:	4618      	mov	r0, r3
 8015b18:	f001 f832 	bl	8016b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015b1c:	2301      	movs	r3, #1
 8015b1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015b20:	f002 f828 	bl	8017b74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015b24:	f000 fd9e 	bl	8016664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015b28:	f001 fff4 	bl	8017b14 <vPortEnterCritical>
 8015b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015b32:	b25b      	sxtb	r3, r3
 8015b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b38:	d103      	bne.n	8015b42 <xQueueSemaphoreTake+0x13a>
 8015b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015b48:	b25b      	sxtb	r3, r3
 8015b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b4e:	d103      	bne.n	8015b58 <xQueueSemaphoreTake+0x150>
 8015b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b52:	2200      	movs	r2, #0
 8015b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015b58:	f002 f80c 	bl	8017b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015b5c:	463a      	mov	r2, r7
 8015b5e:	f107 030c 	add.w	r3, r7, #12
 8015b62:	4611      	mov	r1, r2
 8015b64:	4618      	mov	r0, r3
 8015b66:	f001 f821 	bl	8016bac <xTaskCheckForTimeOut>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d132      	bne.n	8015bd6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015b72:	f000 f9f2 	bl	8015f5a <prvIsQueueEmpty>
 8015b76:	4603      	mov	r3, r0
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d026      	beq.n	8015bca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d109      	bne.n	8015b98 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8015b84:	f001 ffc6 	bl	8017b14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b8a:	689b      	ldr	r3, [r3, #8]
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	f001 f983 	bl	8016e98 <xTaskPriorityInherit>
 8015b92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015b94:	f001 ffee 	bl	8017b74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b9a:	3324      	adds	r3, #36	; 0x24
 8015b9c:	683a      	ldr	r2, [r7, #0]
 8015b9e:	4611      	mov	r1, r2
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f000 ff39 	bl	8016a18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015ba6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ba8:	f000 f985 	bl	8015eb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015bac:	f000 fd68 	bl	8016680 <xTaskResumeAll>
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	f47f af68 	bne.w	8015a88 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015bb8:	4b18      	ldr	r3, [pc, #96]	; (8015c1c <xQueueSemaphoreTake+0x214>)
 8015bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bbe:	601a      	str	r2, [r3, #0]
 8015bc0:	f3bf 8f4f 	dsb	sy
 8015bc4:	f3bf 8f6f 	isb	sy
 8015bc8:	e75e      	b.n	8015a88 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015bca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015bcc:	f000 f973 	bl	8015eb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015bd0:	f000 fd56 	bl	8016680 <xTaskResumeAll>
 8015bd4:	e758      	b.n	8015a88 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015bd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015bd8:	f000 f96d 	bl	8015eb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015bdc:	f000 fd50 	bl	8016680 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015be0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015be2:	f000 f9ba 	bl	8015f5a <prvIsQueueEmpty>
 8015be6:	4603      	mov	r3, r0
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	f43f af4d 	beq.w	8015a88 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d00d      	beq.n	8015c10 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8015bf4:	f001 ff8e 	bl	8017b14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015bf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015bfa:	f000 f8b4 	bl	8015d66 <prvGetDisinheritPriorityAfterTimeout>
 8015bfe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c02:	689b      	ldr	r3, [r3, #8]
 8015c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015c06:	4618      	mov	r0, r3
 8015c08:	f001 fa1c 	bl	8017044 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015c0c:	f001 ffb2 	bl	8017b74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015c10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015c12:	4618      	mov	r0, r3
 8015c14:	3738      	adds	r7, #56	; 0x38
 8015c16:	46bd      	mov	sp, r7
 8015c18:	bd80      	pop	{r7, pc}
 8015c1a:	bf00      	nop
 8015c1c:	e000ed04 	.word	0xe000ed04

08015c20 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b08e      	sub	sp, #56	; 0x38
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	60f8      	str	r0, [r7, #12]
 8015c28:	60b9      	str	r1, [r7, #8]
 8015c2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d10a      	bne.n	8015c4c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c3a:	f383 8811 	msr	BASEPRI, r3
 8015c3e:	f3bf 8f6f 	isb	sy
 8015c42:	f3bf 8f4f 	dsb	sy
 8015c46:	623b      	str	r3, [r7, #32]
}
 8015c48:	bf00      	nop
 8015c4a:	e7fe      	b.n	8015c4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c4c:	68bb      	ldr	r3, [r7, #8]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d103      	bne.n	8015c5a <xQueueReceiveFromISR+0x3a>
 8015c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d101      	bne.n	8015c5e <xQueueReceiveFromISR+0x3e>
 8015c5a:	2301      	movs	r3, #1
 8015c5c:	e000      	b.n	8015c60 <xQueueReceiveFromISR+0x40>
 8015c5e:	2300      	movs	r3, #0
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d10a      	bne.n	8015c7a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c68:	f383 8811 	msr	BASEPRI, r3
 8015c6c:	f3bf 8f6f 	isb	sy
 8015c70:	f3bf 8f4f 	dsb	sy
 8015c74:	61fb      	str	r3, [r7, #28]
}
 8015c76:	bf00      	nop
 8015c78:	e7fe      	b.n	8015c78 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015c7a:	f002 f82d 	bl	8017cd8 <vPortValidateInterruptPriority>
	__asm volatile
 8015c7e:	f3ef 8211 	mrs	r2, BASEPRI
 8015c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c86:	f383 8811 	msr	BASEPRI, r3
 8015c8a:	f3bf 8f6f 	isb	sy
 8015c8e:	f3bf 8f4f 	dsb	sy
 8015c92:	61ba      	str	r2, [r7, #24]
 8015c94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015c96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015c98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d02f      	beq.n	8015d06 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015cb0:	68b9      	ldr	r1, [r7, #8]
 8015cb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cb4:	f000 f8d9 	bl	8015e6a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cba:	1e5a      	subs	r2, r3, #1
 8015cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015cc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cc8:	d112      	bne.n	8015cf0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ccc:	691b      	ldr	r3, [r3, #16]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d016      	beq.n	8015d00 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cd4:	3310      	adds	r3, #16
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f000 feee 	bl	8016ab8 <xTaskRemoveFromEventList>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d00e      	beq.n	8015d00 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d00b      	beq.n	8015d00 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2201      	movs	r2, #1
 8015cec:	601a      	str	r2, [r3, #0]
 8015cee:	e007      	b.n	8015d00 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cf4:	3301      	adds	r3, #1
 8015cf6:	b2db      	uxtb	r3, r3
 8015cf8:	b25a      	sxtb	r2, r3
 8015cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015d00:	2301      	movs	r3, #1
 8015d02:	637b      	str	r3, [r7, #52]	; 0x34
 8015d04:	e001      	b.n	8015d0a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8015d06:	2300      	movs	r3, #0
 8015d08:	637b      	str	r3, [r7, #52]	; 0x34
 8015d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015d0e:	693b      	ldr	r3, [r7, #16]
 8015d10:	f383 8811 	msr	BASEPRI, r3
}
 8015d14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015d18:	4618      	mov	r0, r3
 8015d1a:	3738      	adds	r7, #56	; 0x38
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	bd80      	pop	{r7, pc}

08015d20 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b084      	sub	sp, #16
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d10a      	bne.n	8015d48 <vQueueDelete+0x28>
	__asm volatile
 8015d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d36:	f383 8811 	msr	BASEPRI, r3
 8015d3a:	f3bf 8f6f 	isb	sy
 8015d3e:	f3bf 8f4f 	dsb	sy
 8015d42:	60bb      	str	r3, [r7, #8]
}
 8015d44:	bf00      	nop
 8015d46:	e7fe      	b.n	8015d46 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015d48:	68f8      	ldr	r0, [r7, #12]
 8015d4a:	f000 f95f 	bl	801600c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d102      	bne.n	8015d5e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8015d58:	68f8      	ldr	r0, [r7, #12]
 8015d5a:	f002 f8c9 	bl	8017ef0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8015d5e:	bf00      	nop
 8015d60:	3710      	adds	r7, #16
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}

08015d66 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015d66:	b480      	push	{r7}
 8015d68:	b085      	sub	sp, #20
 8015d6a:	af00      	add	r7, sp, #0
 8015d6c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d006      	beq.n	8015d84 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8015d80:	60fb      	str	r3, [r7, #12]
 8015d82:	e001      	b.n	8015d88 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015d84:	2300      	movs	r3, #0
 8015d86:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015d88:	68fb      	ldr	r3, [r7, #12]
	}
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	3714      	adds	r7, #20
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d94:	4770      	bx	lr

08015d96 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015d96:	b580      	push	{r7, lr}
 8015d98:	b086      	sub	sp, #24
 8015d9a:	af00      	add	r7, sp, #0
 8015d9c:	60f8      	str	r0, [r7, #12]
 8015d9e:	60b9      	str	r1, [r7, #8]
 8015da0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015da2:	2300      	movs	r3, #0
 8015da4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015daa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d10d      	bne.n	8015dd0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d14d      	bne.n	8015e58 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	689b      	ldr	r3, [r3, #8]
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	f001 f8d1 	bl	8016f68 <xTaskPriorityDisinherit>
 8015dc6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	2200      	movs	r2, #0
 8015dcc:	609a      	str	r2, [r3, #8]
 8015dce:	e043      	b.n	8015e58 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d119      	bne.n	8015e0a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	6858      	ldr	r0, [r3, #4]
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015dde:	461a      	mov	r2, r3
 8015de0:	68b9      	ldr	r1, [r7, #8]
 8015de2:	f003 ffab 	bl	8019d3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	685a      	ldr	r2, [r3, #4]
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015dee:	441a      	add	r2, r3
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	685a      	ldr	r2, [r3, #4]
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	689b      	ldr	r3, [r3, #8]
 8015dfc:	429a      	cmp	r2, r3
 8015dfe:	d32b      	bcc.n	8015e58 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	681a      	ldr	r2, [r3, #0]
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	605a      	str	r2, [r3, #4]
 8015e08:	e026      	b.n	8015e58 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	68d8      	ldr	r0, [r3, #12]
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e12:	461a      	mov	r2, r3
 8015e14:	68b9      	ldr	r1, [r7, #8]
 8015e16:	f003 ff91 	bl	8019d3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	68da      	ldr	r2, [r3, #12]
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e22:	425b      	negs	r3, r3
 8015e24:	441a      	add	r2, r3
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	68da      	ldr	r2, [r3, #12]
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	429a      	cmp	r2, r3
 8015e34:	d207      	bcs.n	8015e46 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	689a      	ldr	r2, [r3, #8]
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e3e:	425b      	negs	r3, r3
 8015e40:	441a      	add	r2, r3
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	2b02      	cmp	r3, #2
 8015e4a:	d105      	bne.n	8015e58 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015e4c:	693b      	ldr	r3, [r7, #16]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d002      	beq.n	8015e58 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015e52:	693b      	ldr	r3, [r7, #16]
 8015e54:	3b01      	subs	r3, #1
 8015e56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015e58:	693b      	ldr	r3, [r7, #16]
 8015e5a:	1c5a      	adds	r2, r3, #1
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015e60:	697b      	ldr	r3, [r7, #20]
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3718      	adds	r7, #24
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}

08015e6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015e6a:	b580      	push	{r7, lr}
 8015e6c:	b082      	sub	sp, #8
 8015e6e:	af00      	add	r7, sp, #0
 8015e70:	6078      	str	r0, [r7, #4]
 8015e72:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d018      	beq.n	8015eae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	68da      	ldr	r2, [r3, #12]
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e84:	441a      	add	r2, r3
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	68da      	ldr	r2, [r3, #12]
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	689b      	ldr	r3, [r3, #8]
 8015e92:	429a      	cmp	r2, r3
 8015e94:	d303      	bcc.n	8015e9e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	681a      	ldr	r2, [r3, #0]
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	68d9      	ldr	r1, [r3, #12]
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ea6:	461a      	mov	r2, r3
 8015ea8:	6838      	ldr	r0, [r7, #0]
 8015eaa:	f003 ff47 	bl	8019d3c <memcpy>
	}
}
 8015eae:	bf00      	nop
 8015eb0:	3708      	adds	r7, #8
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bd80      	pop	{r7, pc}

08015eb6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015eb6:	b580      	push	{r7, lr}
 8015eb8:	b084      	sub	sp, #16
 8015eba:	af00      	add	r7, sp, #0
 8015ebc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015ebe:	f001 fe29 	bl	8017b14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015ec8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015eca:	e011      	b.n	8015ef0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d012      	beq.n	8015efa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	3324      	adds	r3, #36	; 0x24
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f000 fded 	bl	8016ab8 <xTaskRemoveFromEventList>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d001      	beq.n	8015ee8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015ee4:	f000 fec4 	bl	8016c70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015ee8:	7bfb      	ldrb	r3, [r7, #15]
 8015eea:	3b01      	subs	r3, #1
 8015eec:	b2db      	uxtb	r3, r3
 8015eee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	dce9      	bgt.n	8015ecc <prvUnlockQueue+0x16>
 8015ef8:	e000      	b.n	8015efc <prvUnlockQueue+0x46>
					break;
 8015efa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	22ff      	movs	r2, #255	; 0xff
 8015f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015f04:	f001 fe36 	bl	8017b74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015f08:	f001 fe04 	bl	8017b14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015f12:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015f14:	e011      	b.n	8015f3a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	691b      	ldr	r3, [r3, #16]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d012      	beq.n	8015f44 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	3310      	adds	r3, #16
 8015f22:	4618      	mov	r0, r3
 8015f24:	f000 fdc8 	bl	8016ab8 <xTaskRemoveFromEventList>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d001      	beq.n	8015f32 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015f2e:	f000 fe9f 	bl	8016c70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015f32:	7bbb      	ldrb	r3, [r7, #14]
 8015f34:	3b01      	subs	r3, #1
 8015f36:	b2db      	uxtb	r3, r3
 8015f38:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015f3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	dce9      	bgt.n	8015f16 <prvUnlockQueue+0x60>
 8015f42:	e000      	b.n	8015f46 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015f44:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	22ff      	movs	r2, #255	; 0xff
 8015f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015f4e:	f001 fe11 	bl	8017b74 <vPortExitCritical>
}
 8015f52:	bf00      	nop
 8015f54:	3710      	adds	r7, #16
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}

08015f5a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015f5a:	b580      	push	{r7, lr}
 8015f5c:	b084      	sub	sp, #16
 8015f5e:	af00      	add	r7, sp, #0
 8015f60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015f62:	f001 fdd7 	bl	8017b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d102      	bne.n	8015f74 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015f6e:	2301      	movs	r3, #1
 8015f70:	60fb      	str	r3, [r7, #12]
 8015f72:	e001      	b.n	8015f78 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015f74:	2300      	movs	r3, #0
 8015f76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015f78:	f001 fdfc 	bl	8017b74 <vPortExitCritical>

	return xReturn;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
}
 8015f7e:	4618      	mov	r0, r3
 8015f80:	3710      	adds	r7, #16
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd80      	pop	{r7, pc}

08015f86 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015f86:	b580      	push	{r7, lr}
 8015f88:	b084      	sub	sp, #16
 8015f8a:	af00      	add	r7, sp, #0
 8015f8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015f8e:	f001 fdc1 	bl	8017b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015f9a:	429a      	cmp	r2, r3
 8015f9c:	d102      	bne.n	8015fa4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015f9e:	2301      	movs	r3, #1
 8015fa0:	60fb      	str	r3, [r7, #12]
 8015fa2:	e001      	b.n	8015fa8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015fa8:	f001 fde4 	bl	8017b74 <vPortExitCritical>

	return xReturn;
 8015fac:	68fb      	ldr	r3, [r7, #12]
}
 8015fae:	4618      	mov	r0, r3
 8015fb0:	3710      	adds	r7, #16
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bd80      	pop	{r7, pc}
	...

08015fb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015fb8:	b480      	push	{r7}
 8015fba:	b085      	sub	sp, #20
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
 8015fc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	60fb      	str	r3, [r7, #12]
 8015fc6:	e014      	b.n	8015ff2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015fc8:	4a0f      	ldr	r2, [pc, #60]	; (8016008 <vQueueAddToRegistry+0x50>)
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d10b      	bne.n	8015fec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015fd4:	490c      	ldr	r1, [pc, #48]	; (8016008 <vQueueAddToRegistry+0x50>)
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	683a      	ldr	r2, [r7, #0]
 8015fda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015fde:	4a0a      	ldr	r2, [pc, #40]	; (8016008 <vQueueAddToRegistry+0x50>)
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	00db      	lsls	r3, r3, #3
 8015fe4:	4413      	add	r3, r2
 8015fe6:	687a      	ldr	r2, [r7, #4]
 8015fe8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8015fea:	e006      	b.n	8015ffa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	3301      	adds	r3, #1
 8015ff0:	60fb      	str	r3, [r7, #12]
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	2b07      	cmp	r3, #7
 8015ff6:	d9e7      	bls.n	8015fc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015ff8:	bf00      	nop
 8015ffa:	bf00      	nop
 8015ffc:	3714      	adds	r7, #20
 8015ffe:	46bd      	mov	sp, r7
 8016000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016004:	4770      	bx	lr
 8016006:	bf00      	nop
 8016008:	20007674 	.word	0x20007674

0801600c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801600c:	b480      	push	{r7}
 801600e:	b085      	sub	sp, #20
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016014:	2300      	movs	r3, #0
 8016016:	60fb      	str	r3, [r7, #12]
 8016018:	e016      	b.n	8016048 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801601a:	4a10      	ldr	r2, [pc, #64]	; (801605c <vQueueUnregisterQueue+0x50>)
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	00db      	lsls	r3, r3, #3
 8016020:	4413      	add	r3, r2
 8016022:	685b      	ldr	r3, [r3, #4]
 8016024:	687a      	ldr	r2, [r7, #4]
 8016026:	429a      	cmp	r2, r3
 8016028:	d10b      	bne.n	8016042 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801602a:	4a0c      	ldr	r2, [pc, #48]	; (801605c <vQueueUnregisterQueue+0x50>)
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	2100      	movs	r1, #0
 8016030:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8016034:	4a09      	ldr	r2, [pc, #36]	; (801605c <vQueueUnregisterQueue+0x50>)
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	00db      	lsls	r3, r3, #3
 801603a:	4413      	add	r3, r2
 801603c:	2200      	movs	r2, #0
 801603e:	605a      	str	r2, [r3, #4]
				break;
 8016040:	e006      	b.n	8016050 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	3301      	adds	r3, #1
 8016046:	60fb      	str	r3, [r7, #12]
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	2b07      	cmp	r3, #7
 801604c:	d9e5      	bls.n	801601a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801604e:	bf00      	nop
 8016050:	bf00      	nop
 8016052:	3714      	adds	r7, #20
 8016054:	46bd      	mov	sp, r7
 8016056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605a:	4770      	bx	lr
 801605c:	20007674 	.word	0x20007674

08016060 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016060:	b580      	push	{r7, lr}
 8016062:	b086      	sub	sp, #24
 8016064:	af00      	add	r7, sp, #0
 8016066:	60f8      	str	r0, [r7, #12]
 8016068:	60b9      	str	r1, [r7, #8]
 801606a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016070:	f001 fd50 	bl	8017b14 <vPortEnterCritical>
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801607a:	b25b      	sxtb	r3, r3
 801607c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016080:	d103      	bne.n	801608a <vQueueWaitForMessageRestricted+0x2a>
 8016082:	697b      	ldr	r3, [r7, #20]
 8016084:	2200      	movs	r2, #0
 8016086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801608a:	697b      	ldr	r3, [r7, #20]
 801608c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016090:	b25b      	sxtb	r3, r3
 8016092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016096:	d103      	bne.n	80160a0 <vQueueWaitForMessageRestricted+0x40>
 8016098:	697b      	ldr	r3, [r7, #20]
 801609a:	2200      	movs	r2, #0
 801609c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80160a0:	f001 fd68 	bl	8017b74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80160a4:	697b      	ldr	r3, [r7, #20]
 80160a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d106      	bne.n	80160ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80160ac:	697b      	ldr	r3, [r7, #20]
 80160ae:	3324      	adds	r3, #36	; 0x24
 80160b0:	687a      	ldr	r2, [r7, #4]
 80160b2:	68b9      	ldr	r1, [r7, #8]
 80160b4:	4618      	mov	r0, r3
 80160b6:	f000 fcd3 	bl	8016a60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80160ba:	6978      	ldr	r0, [r7, #20]
 80160bc:	f7ff fefb 	bl	8015eb6 <prvUnlockQueue>
	}
 80160c0:	bf00      	nop
 80160c2:	3718      	adds	r7, #24
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bd80      	pop	{r7, pc}

080160c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b08e      	sub	sp, #56	; 0x38
 80160cc:	af04      	add	r7, sp, #16
 80160ce:	60f8      	str	r0, [r7, #12]
 80160d0:	60b9      	str	r1, [r7, #8]
 80160d2:	607a      	str	r2, [r7, #4]
 80160d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80160d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d10a      	bne.n	80160f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80160dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160e0:	f383 8811 	msr	BASEPRI, r3
 80160e4:	f3bf 8f6f 	isb	sy
 80160e8:	f3bf 8f4f 	dsb	sy
 80160ec:	623b      	str	r3, [r7, #32]
}
 80160ee:	bf00      	nop
 80160f0:	e7fe      	b.n	80160f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80160f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d10a      	bne.n	801610e <xTaskCreateStatic+0x46>
	__asm volatile
 80160f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160fc:	f383 8811 	msr	BASEPRI, r3
 8016100:	f3bf 8f6f 	isb	sy
 8016104:	f3bf 8f4f 	dsb	sy
 8016108:	61fb      	str	r3, [r7, #28]
}
 801610a:	bf00      	nop
 801610c:	e7fe      	b.n	801610c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801610e:	23bc      	movs	r3, #188	; 0xbc
 8016110:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016112:	693b      	ldr	r3, [r7, #16]
 8016114:	2bbc      	cmp	r3, #188	; 0xbc
 8016116:	d00a      	beq.n	801612e <xTaskCreateStatic+0x66>
	__asm volatile
 8016118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801611c:	f383 8811 	msr	BASEPRI, r3
 8016120:	f3bf 8f6f 	isb	sy
 8016124:	f3bf 8f4f 	dsb	sy
 8016128:	61bb      	str	r3, [r7, #24]
}
 801612a:	bf00      	nop
 801612c:	e7fe      	b.n	801612c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801612e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016132:	2b00      	cmp	r3, #0
 8016134:	d01e      	beq.n	8016174 <xTaskCreateStatic+0xac>
 8016136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016138:	2b00      	cmp	r3, #0
 801613a:	d01b      	beq.n	8016174 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801613e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016144:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016148:	2202      	movs	r2, #2
 801614a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801614e:	2300      	movs	r3, #0
 8016150:	9303      	str	r3, [sp, #12]
 8016152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016154:	9302      	str	r3, [sp, #8]
 8016156:	f107 0314 	add.w	r3, r7, #20
 801615a:	9301      	str	r3, [sp, #4]
 801615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801615e:	9300      	str	r3, [sp, #0]
 8016160:	683b      	ldr	r3, [r7, #0]
 8016162:	687a      	ldr	r2, [r7, #4]
 8016164:	68b9      	ldr	r1, [r7, #8]
 8016166:	68f8      	ldr	r0, [r7, #12]
 8016168:	f000 f850 	bl	801620c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801616c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801616e:	f000 f8f3 	bl	8016358 <prvAddNewTaskToReadyList>
 8016172:	e001      	b.n	8016178 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016174:	2300      	movs	r3, #0
 8016176:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016178:	697b      	ldr	r3, [r7, #20]
	}
 801617a:	4618      	mov	r0, r3
 801617c:	3728      	adds	r7, #40	; 0x28
 801617e:	46bd      	mov	sp, r7
 8016180:	bd80      	pop	{r7, pc}

08016182 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016182:	b580      	push	{r7, lr}
 8016184:	b08c      	sub	sp, #48	; 0x30
 8016186:	af04      	add	r7, sp, #16
 8016188:	60f8      	str	r0, [r7, #12]
 801618a:	60b9      	str	r1, [r7, #8]
 801618c:	603b      	str	r3, [r7, #0]
 801618e:	4613      	mov	r3, r2
 8016190:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016192:	88fb      	ldrh	r3, [r7, #6]
 8016194:	009b      	lsls	r3, r3, #2
 8016196:	4618      	mov	r0, r3
 8016198:	f001 fdde 	bl	8017d58 <pvPortMalloc>
 801619c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801619e:	697b      	ldr	r3, [r7, #20]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d00e      	beq.n	80161c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80161a4:	20bc      	movs	r0, #188	; 0xbc
 80161a6:	f001 fdd7 	bl	8017d58 <pvPortMalloc>
 80161aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80161ac:	69fb      	ldr	r3, [r7, #28]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d003      	beq.n	80161ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80161b2:	69fb      	ldr	r3, [r7, #28]
 80161b4:	697a      	ldr	r2, [r7, #20]
 80161b6:	631a      	str	r2, [r3, #48]	; 0x30
 80161b8:	e005      	b.n	80161c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80161ba:	6978      	ldr	r0, [r7, #20]
 80161bc:	f001 fe98 	bl	8017ef0 <vPortFree>
 80161c0:	e001      	b.n	80161c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80161c2:	2300      	movs	r3, #0
 80161c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80161c6:	69fb      	ldr	r3, [r7, #28]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d017      	beq.n	80161fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80161cc:	69fb      	ldr	r3, [r7, #28]
 80161ce:	2200      	movs	r2, #0
 80161d0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80161d4:	88fa      	ldrh	r2, [r7, #6]
 80161d6:	2300      	movs	r3, #0
 80161d8:	9303      	str	r3, [sp, #12]
 80161da:	69fb      	ldr	r3, [r7, #28]
 80161dc:	9302      	str	r3, [sp, #8]
 80161de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e0:	9301      	str	r3, [sp, #4]
 80161e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e4:	9300      	str	r3, [sp, #0]
 80161e6:	683b      	ldr	r3, [r7, #0]
 80161e8:	68b9      	ldr	r1, [r7, #8]
 80161ea:	68f8      	ldr	r0, [r7, #12]
 80161ec:	f000 f80e 	bl	801620c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80161f0:	69f8      	ldr	r0, [r7, #28]
 80161f2:	f000 f8b1 	bl	8016358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80161f6:	2301      	movs	r3, #1
 80161f8:	61bb      	str	r3, [r7, #24]
 80161fa:	e002      	b.n	8016202 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80161fc:	f04f 33ff 	mov.w	r3, #4294967295
 8016200:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016202:	69bb      	ldr	r3, [r7, #24]
	}
 8016204:	4618      	mov	r0, r3
 8016206:	3720      	adds	r7, #32
 8016208:	46bd      	mov	sp, r7
 801620a:	bd80      	pop	{r7, pc}

0801620c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b088      	sub	sp, #32
 8016210:	af00      	add	r7, sp, #0
 8016212:	60f8      	str	r0, [r7, #12]
 8016214:	60b9      	str	r1, [r7, #8]
 8016216:	607a      	str	r2, [r7, #4]
 8016218:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801621c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	009b      	lsls	r3, r3, #2
 8016222:	461a      	mov	r2, r3
 8016224:	21a5      	movs	r1, #165	; 0xa5
 8016226:	f003 fdb1 	bl	8019d8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801622c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016234:	3b01      	subs	r3, #1
 8016236:	009b      	lsls	r3, r3, #2
 8016238:	4413      	add	r3, r2
 801623a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801623c:	69bb      	ldr	r3, [r7, #24]
 801623e:	f023 0307 	bic.w	r3, r3, #7
 8016242:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016244:	69bb      	ldr	r3, [r7, #24]
 8016246:	f003 0307 	and.w	r3, r3, #7
 801624a:	2b00      	cmp	r3, #0
 801624c:	d00a      	beq.n	8016264 <prvInitialiseNewTask+0x58>
	__asm volatile
 801624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016252:	f383 8811 	msr	BASEPRI, r3
 8016256:	f3bf 8f6f 	isb	sy
 801625a:	f3bf 8f4f 	dsb	sy
 801625e:	617b      	str	r3, [r7, #20]
}
 8016260:	bf00      	nop
 8016262:	e7fe      	b.n	8016262 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016264:	68bb      	ldr	r3, [r7, #8]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d01f      	beq.n	80162aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801626a:	2300      	movs	r3, #0
 801626c:	61fb      	str	r3, [r7, #28]
 801626e:	e012      	b.n	8016296 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016270:	68ba      	ldr	r2, [r7, #8]
 8016272:	69fb      	ldr	r3, [r7, #28]
 8016274:	4413      	add	r3, r2
 8016276:	7819      	ldrb	r1, [r3, #0]
 8016278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801627a:	69fb      	ldr	r3, [r7, #28]
 801627c:	4413      	add	r3, r2
 801627e:	3334      	adds	r3, #52	; 0x34
 8016280:	460a      	mov	r2, r1
 8016282:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016284:	68ba      	ldr	r2, [r7, #8]
 8016286:	69fb      	ldr	r3, [r7, #28]
 8016288:	4413      	add	r3, r2
 801628a:	781b      	ldrb	r3, [r3, #0]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d006      	beq.n	801629e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016290:	69fb      	ldr	r3, [r7, #28]
 8016292:	3301      	adds	r3, #1
 8016294:	61fb      	str	r3, [r7, #28]
 8016296:	69fb      	ldr	r3, [r7, #28]
 8016298:	2b0f      	cmp	r3, #15
 801629a:	d9e9      	bls.n	8016270 <prvInitialiseNewTask+0x64>
 801629c:	e000      	b.n	80162a0 <prvInitialiseNewTask+0x94>
			{
				break;
 801629e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80162a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162a2:	2200      	movs	r2, #0
 80162a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80162a8:	e003      	b.n	80162b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80162aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ac:	2200      	movs	r2, #0
 80162ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80162b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162b4:	2b37      	cmp	r3, #55	; 0x37
 80162b6:	d901      	bls.n	80162bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80162b8:	2337      	movs	r3, #55	; 0x37
 80162ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80162bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80162c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80162c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ca:	2200      	movs	r2, #0
 80162cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80162ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d0:	3304      	adds	r3, #4
 80162d2:	4618      	mov	r0, r3
 80162d4:	f7fe fe56 	bl	8014f84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80162d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162da:	3318      	adds	r3, #24
 80162dc:	4618      	mov	r0, r3
 80162de:	f7fe fe51 	bl	8014f84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80162e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80162e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80162ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80162f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80162f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162fa:	2200      	movs	r2, #0
 80162fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016302:	2200      	movs	r2, #0
 8016304:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801630a:	3354      	adds	r3, #84	; 0x54
 801630c:	2260      	movs	r2, #96	; 0x60
 801630e:	2100      	movs	r1, #0
 8016310:	4618      	mov	r0, r3
 8016312:	f003 fd3b 	bl	8019d8c <memset>
 8016316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016318:	4a0c      	ldr	r2, [pc, #48]	; (801634c <prvInitialiseNewTask+0x140>)
 801631a:	659a      	str	r2, [r3, #88]	; 0x58
 801631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631e:	4a0c      	ldr	r2, [pc, #48]	; (8016350 <prvInitialiseNewTask+0x144>)
 8016320:	65da      	str	r2, [r3, #92]	; 0x5c
 8016322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016324:	4a0b      	ldr	r2, [pc, #44]	; (8016354 <prvInitialiseNewTask+0x148>)
 8016326:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016328:	683a      	ldr	r2, [r7, #0]
 801632a:	68f9      	ldr	r1, [r7, #12]
 801632c:	69b8      	ldr	r0, [r7, #24]
 801632e:	f001 fac1 	bl	80178b4 <pxPortInitialiseStack>
 8016332:	4602      	mov	r2, r0
 8016334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016336:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801633a:	2b00      	cmp	r3, #0
 801633c:	d002      	beq.n	8016344 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016342:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016344:	bf00      	nop
 8016346:	3720      	adds	r7, #32
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}
 801634c:	08020e54 	.word	0x08020e54
 8016350:	08020e74 	.word	0x08020e74
 8016354:	08020e34 	.word	0x08020e34

08016358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b082      	sub	sp, #8
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016360:	f001 fbd8 	bl	8017b14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016364:	4b2d      	ldr	r3, [pc, #180]	; (801641c <prvAddNewTaskToReadyList+0xc4>)
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	3301      	adds	r3, #1
 801636a:	4a2c      	ldr	r2, [pc, #176]	; (801641c <prvAddNewTaskToReadyList+0xc4>)
 801636c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801636e:	4b2c      	ldr	r3, [pc, #176]	; (8016420 <prvAddNewTaskToReadyList+0xc8>)
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d109      	bne.n	801638a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016376:	4a2a      	ldr	r2, [pc, #168]	; (8016420 <prvAddNewTaskToReadyList+0xc8>)
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801637c:	4b27      	ldr	r3, [pc, #156]	; (801641c <prvAddNewTaskToReadyList+0xc4>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	2b01      	cmp	r3, #1
 8016382:	d110      	bne.n	80163a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016384:	f000 fc98 	bl	8016cb8 <prvInitialiseTaskLists>
 8016388:	e00d      	b.n	80163a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801638a:	4b26      	ldr	r3, [pc, #152]	; (8016424 <prvAddNewTaskToReadyList+0xcc>)
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d109      	bne.n	80163a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016392:	4b23      	ldr	r3, [pc, #140]	; (8016420 <prvAddNewTaskToReadyList+0xc8>)
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801639c:	429a      	cmp	r2, r3
 801639e:	d802      	bhi.n	80163a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80163a0:	4a1f      	ldr	r2, [pc, #124]	; (8016420 <prvAddNewTaskToReadyList+0xc8>)
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80163a6:	4b20      	ldr	r3, [pc, #128]	; (8016428 <prvAddNewTaskToReadyList+0xd0>)
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	3301      	adds	r3, #1
 80163ac:	4a1e      	ldr	r2, [pc, #120]	; (8016428 <prvAddNewTaskToReadyList+0xd0>)
 80163ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80163b0:	4b1d      	ldr	r3, [pc, #116]	; (8016428 <prvAddNewTaskToReadyList+0xd0>)
 80163b2:	681a      	ldr	r2, [r3, #0]
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163bc:	4b1b      	ldr	r3, [pc, #108]	; (801642c <prvAddNewTaskToReadyList+0xd4>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	429a      	cmp	r2, r3
 80163c2:	d903      	bls.n	80163cc <prvAddNewTaskToReadyList+0x74>
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163c8:	4a18      	ldr	r2, [pc, #96]	; (801642c <prvAddNewTaskToReadyList+0xd4>)
 80163ca:	6013      	str	r3, [r2, #0]
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163d0:	4613      	mov	r3, r2
 80163d2:	009b      	lsls	r3, r3, #2
 80163d4:	4413      	add	r3, r2
 80163d6:	009b      	lsls	r3, r3, #2
 80163d8:	4a15      	ldr	r2, [pc, #84]	; (8016430 <prvAddNewTaskToReadyList+0xd8>)
 80163da:	441a      	add	r2, r3
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	3304      	adds	r3, #4
 80163e0:	4619      	mov	r1, r3
 80163e2:	4610      	mov	r0, r2
 80163e4:	f7fe fddb 	bl	8014f9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80163e8:	f001 fbc4 	bl	8017b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80163ec:	4b0d      	ldr	r3, [pc, #52]	; (8016424 <prvAddNewTaskToReadyList+0xcc>)
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d00e      	beq.n	8016412 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80163f4:	4b0a      	ldr	r3, [pc, #40]	; (8016420 <prvAddNewTaskToReadyList+0xc8>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163fe:	429a      	cmp	r2, r3
 8016400:	d207      	bcs.n	8016412 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016402:	4b0c      	ldr	r3, [pc, #48]	; (8016434 <prvAddNewTaskToReadyList+0xdc>)
 8016404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016408:	601a      	str	r2, [r3, #0]
 801640a:	f3bf 8f4f 	dsb	sy
 801640e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016412:	bf00      	nop
 8016414:	3708      	adds	r7, #8
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}
 801641a:	bf00      	nop
 801641c:	200014b4 	.word	0x200014b4
 8016420:	20000fe0 	.word	0x20000fe0
 8016424:	200014c0 	.word	0x200014c0
 8016428:	200014d0 	.word	0x200014d0
 801642c:	200014bc 	.word	0x200014bc
 8016430:	20000fe4 	.word	0x20000fe4
 8016434:	e000ed04 	.word	0xe000ed04

08016438 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8016438:	b580      	push	{r7, lr}
 801643a:	b084      	sub	sp, #16
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8016440:	f001 fb68 	bl	8017b14 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	2b00      	cmp	r3, #0
 8016448:	d102      	bne.n	8016450 <vTaskDelete+0x18>
 801644a:	4b2c      	ldr	r3, [pc, #176]	; (80164fc <vTaskDelete+0xc4>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	e000      	b.n	8016452 <vTaskDelete+0x1a>
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	3304      	adds	r3, #4
 8016458:	4618      	mov	r0, r3
 801645a:	f7fe fdfd 	bl	8015058 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016462:	2b00      	cmp	r3, #0
 8016464:	d004      	beq.n	8016470 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	3318      	adds	r3, #24
 801646a:	4618      	mov	r0, r3
 801646c:	f7fe fdf4 	bl	8015058 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8016470:	4b23      	ldr	r3, [pc, #140]	; (8016500 <vTaskDelete+0xc8>)
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	3301      	adds	r3, #1
 8016476:	4a22      	ldr	r2, [pc, #136]	; (8016500 <vTaskDelete+0xc8>)
 8016478:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801647a:	4b20      	ldr	r3, [pc, #128]	; (80164fc <vTaskDelete+0xc4>)
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	68fa      	ldr	r2, [r7, #12]
 8016480:	429a      	cmp	r2, r3
 8016482:	d10b      	bne.n	801649c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	3304      	adds	r3, #4
 8016488:	4619      	mov	r1, r3
 801648a:	481e      	ldr	r0, [pc, #120]	; (8016504 <vTaskDelete+0xcc>)
 801648c:	f7fe fd87 	bl	8014f9e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8016490:	4b1d      	ldr	r3, [pc, #116]	; (8016508 <vTaskDelete+0xd0>)
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	3301      	adds	r3, #1
 8016496:	4a1c      	ldr	r2, [pc, #112]	; (8016508 <vTaskDelete+0xd0>)
 8016498:	6013      	str	r3, [r2, #0]
 801649a:	e009      	b.n	80164b0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801649c:	4b1b      	ldr	r3, [pc, #108]	; (801650c <vTaskDelete+0xd4>)
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	3b01      	subs	r3, #1
 80164a2:	4a1a      	ldr	r2, [pc, #104]	; (801650c <vTaskDelete+0xd4>)
 80164a4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80164a6:	68f8      	ldr	r0, [r7, #12]
 80164a8:	f000 fc74 	bl	8016d94 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80164ac:	f000 fca6 	bl	8016dfc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80164b0:	f001 fb60 	bl	8017b74 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80164b4:	4b16      	ldr	r3, [pc, #88]	; (8016510 <vTaskDelete+0xd8>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d01b      	beq.n	80164f4 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80164bc:	4b0f      	ldr	r3, [pc, #60]	; (80164fc <vTaskDelete+0xc4>)
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	68fa      	ldr	r2, [r7, #12]
 80164c2:	429a      	cmp	r2, r3
 80164c4:	d116      	bne.n	80164f4 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80164c6:	4b13      	ldr	r3, [pc, #76]	; (8016514 <vTaskDelete+0xdc>)
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d00a      	beq.n	80164e4 <vTaskDelete+0xac>
	__asm volatile
 80164ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164d2:	f383 8811 	msr	BASEPRI, r3
 80164d6:	f3bf 8f6f 	isb	sy
 80164da:	f3bf 8f4f 	dsb	sy
 80164de:	60bb      	str	r3, [r7, #8]
}
 80164e0:	bf00      	nop
 80164e2:	e7fe      	b.n	80164e2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80164e4:	4b0c      	ldr	r3, [pc, #48]	; (8016518 <vTaskDelete+0xe0>)
 80164e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164ea:	601a      	str	r2, [r3, #0]
 80164ec:	f3bf 8f4f 	dsb	sy
 80164f0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80164f4:	bf00      	nop
 80164f6:	3710      	adds	r7, #16
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}
 80164fc:	20000fe0 	.word	0x20000fe0
 8016500:	200014d0 	.word	0x200014d0
 8016504:	20001488 	.word	0x20001488
 8016508:	2000149c 	.word	0x2000149c
 801650c:	200014b4 	.word	0x200014b4
 8016510:	200014c0 	.word	0x200014c0
 8016514:	200014dc 	.word	0x200014dc
 8016518:	e000ed04 	.word	0xe000ed04

0801651c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801651c:	b580      	push	{r7, lr}
 801651e:	b084      	sub	sp, #16
 8016520:	af00      	add	r7, sp, #0
 8016522:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016524:	2300      	movs	r3, #0
 8016526:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d017      	beq.n	801655e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801652e:	4b13      	ldr	r3, [pc, #76]	; (801657c <vTaskDelay+0x60>)
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d00a      	beq.n	801654c <vTaskDelay+0x30>
	__asm volatile
 8016536:	f04f 0350 	mov.w	r3, #80	; 0x50
 801653a:	f383 8811 	msr	BASEPRI, r3
 801653e:	f3bf 8f6f 	isb	sy
 8016542:	f3bf 8f4f 	dsb	sy
 8016546:	60bb      	str	r3, [r7, #8]
}
 8016548:	bf00      	nop
 801654a:	e7fe      	b.n	801654a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801654c:	f000 f88a 	bl	8016664 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016550:	2100      	movs	r1, #0
 8016552:	6878      	ldr	r0, [r7, #4]
 8016554:	f000 fe0c 	bl	8017170 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016558:	f000 f892 	bl	8016680 <xTaskResumeAll>
 801655c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d107      	bne.n	8016574 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016564:	4b06      	ldr	r3, [pc, #24]	; (8016580 <vTaskDelay+0x64>)
 8016566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801656a:	601a      	str	r2, [r3, #0]
 801656c:	f3bf 8f4f 	dsb	sy
 8016570:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016574:	bf00      	nop
 8016576:	3710      	adds	r7, #16
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}
 801657c:	200014dc 	.word	0x200014dc
 8016580:	e000ed04 	.word	0xe000ed04

08016584 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b08a      	sub	sp, #40	; 0x28
 8016588:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801658a:	2300      	movs	r3, #0
 801658c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801658e:	2300      	movs	r3, #0
 8016590:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016592:	463a      	mov	r2, r7
 8016594:	1d39      	adds	r1, r7, #4
 8016596:	f107 0308 	add.w	r3, r7, #8
 801659a:	4618      	mov	r0, r3
 801659c:	f7fe fc9e 	bl	8014edc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80165a0:	6839      	ldr	r1, [r7, #0]
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	68ba      	ldr	r2, [r7, #8]
 80165a6:	9202      	str	r2, [sp, #8]
 80165a8:	9301      	str	r3, [sp, #4]
 80165aa:	2300      	movs	r3, #0
 80165ac:	9300      	str	r3, [sp, #0]
 80165ae:	2300      	movs	r3, #0
 80165b0:	460a      	mov	r2, r1
 80165b2:	4924      	ldr	r1, [pc, #144]	; (8016644 <vTaskStartScheduler+0xc0>)
 80165b4:	4824      	ldr	r0, [pc, #144]	; (8016648 <vTaskStartScheduler+0xc4>)
 80165b6:	f7ff fd87 	bl	80160c8 <xTaskCreateStatic>
 80165ba:	4603      	mov	r3, r0
 80165bc:	4a23      	ldr	r2, [pc, #140]	; (801664c <vTaskStartScheduler+0xc8>)
 80165be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80165c0:	4b22      	ldr	r3, [pc, #136]	; (801664c <vTaskStartScheduler+0xc8>)
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d002      	beq.n	80165ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80165c8:	2301      	movs	r3, #1
 80165ca:	617b      	str	r3, [r7, #20]
 80165cc:	e001      	b.n	80165d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80165ce:	2300      	movs	r3, #0
 80165d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80165d2:	697b      	ldr	r3, [r7, #20]
 80165d4:	2b01      	cmp	r3, #1
 80165d6:	d102      	bne.n	80165de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80165d8:	f000 fe1e 	bl	8017218 <xTimerCreateTimerTask>
 80165dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80165de:	697b      	ldr	r3, [r7, #20]
 80165e0:	2b01      	cmp	r3, #1
 80165e2:	d11b      	bne.n	801661c <vTaskStartScheduler+0x98>
	__asm volatile
 80165e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165e8:	f383 8811 	msr	BASEPRI, r3
 80165ec:	f3bf 8f6f 	isb	sy
 80165f0:	f3bf 8f4f 	dsb	sy
 80165f4:	613b      	str	r3, [r7, #16]
}
 80165f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80165f8:	4b15      	ldr	r3, [pc, #84]	; (8016650 <vTaskStartScheduler+0xcc>)
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	3354      	adds	r3, #84	; 0x54
 80165fe:	4a15      	ldr	r2, [pc, #84]	; (8016654 <vTaskStartScheduler+0xd0>)
 8016600:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016602:	4b15      	ldr	r3, [pc, #84]	; (8016658 <vTaskStartScheduler+0xd4>)
 8016604:	f04f 32ff 	mov.w	r2, #4294967295
 8016608:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801660a:	4b14      	ldr	r3, [pc, #80]	; (801665c <vTaskStartScheduler+0xd8>)
 801660c:	2201      	movs	r2, #1
 801660e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016610:	4b13      	ldr	r3, [pc, #76]	; (8016660 <vTaskStartScheduler+0xdc>)
 8016612:	2200      	movs	r2, #0
 8016614:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016616:	f001 f9db 	bl	80179d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801661a:	e00e      	b.n	801663a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801661c:	697b      	ldr	r3, [r7, #20]
 801661e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016622:	d10a      	bne.n	801663a <vTaskStartScheduler+0xb6>
	__asm volatile
 8016624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016628:	f383 8811 	msr	BASEPRI, r3
 801662c:	f3bf 8f6f 	isb	sy
 8016630:	f3bf 8f4f 	dsb	sy
 8016634:	60fb      	str	r3, [r7, #12]
}
 8016636:	bf00      	nop
 8016638:	e7fe      	b.n	8016638 <vTaskStartScheduler+0xb4>
}
 801663a:	bf00      	nop
 801663c:	3718      	adds	r7, #24
 801663e:	46bd      	mov	sp, r7
 8016640:	bd80      	pop	{r7, pc}
 8016642:	bf00      	nop
 8016644:	08020aa0 	.word	0x08020aa0
 8016648:	08016c89 	.word	0x08016c89
 801664c:	200014d8 	.word	0x200014d8
 8016650:	20000fe0 	.word	0x20000fe0
 8016654:	200001d8 	.word	0x200001d8
 8016658:	200014d4 	.word	0x200014d4
 801665c:	200014c0 	.word	0x200014c0
 8016660:	200014b8 	.word	0x200014b8

08016664 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016664:	b480      	push	{r7}
 8016666:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016668:	4b04      	ldr	r3, [pc, #16]	; (801667c <vTaskSuspendAll+0x18>)
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	3301      	adds	r3, #1
 801666e:	4a03      	ldr	r2, [pc, #12]	; (801667c <vTaskSuspendAll+0x18>)
 8016670:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8016672:	bf00      	nop
 8016674:	46bd      	mov	sp, r7
 8016676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667a:	4770      	bx	lr
 801667c:	200014dc 	.word	0x200014dc

08016680 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b084      	sub	sp, #16
 8016684:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016686:	2300      	movs	r3, #0
 8016688:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801668a:	2300      	movs	r3, #0
 801668c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801668e:	4b42      	ldr	r3, [pc, #264]	; (8016798 <xTaskResumeAll+0x118>)
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d10a      	bne.n	80166ac <xTaskResumeAll+0x2c>
	__asm volatile
 8016696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801669a:	f383 8811 	msr	BASEPRI, r3
 801669e:	f3bf 8f6f 	isb	sy
 80166a2:	f3bf 8f4f 	dsb	sy
 80166a6:	603b      	str	r3, [r7, #0]
}
 80166a8:	bf00      	nop
 80166aa:	e7fe      	b.n	80166aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80166ac:	f001 fa32 	bl	8017b14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80166b0:	4b39      	ldr	r3, [pc, #228]	; (8016798 <xTaskResumeAll+0x118>)
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	3b01      	subs	r3, #1
 80166b6:	4a38      	ldr	r2, [pc, #224]	; (8016798 <xTaskResumeAll+0x118>)
 80166b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80166ba:	4b37      	ldr	r3, [pc, #220]	; (8016798 <xTaskResumeAll+0x118>)
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d162      	bne.n	8016788 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80166c2:	4b36      	ldr	r3, [pc, #216]	; (801679c <xTaskResumeAll+0x11c>)
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d05e      	beq.n	8016788 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80166ca:	e02f      	b.n	801672c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166cc:	4b34      	ldr	r3, [pc, #208]	; (80167a0 <xTaskResumeAll+0x120>)
 80166ce:	68db      	ldr	r3, [r3, #12]
 80166d0:	68db      	ldr	r3, [r3, #12]
 80166d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	3318      	adds	r3, #24
 80166d8:	4618      	mov	r0, r3
 80166da:	f7fe fcbd 	bl	8015058 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	3304      	adds	r3, #4
 80166e2:	4618      	mov	r0, r3
 80166e4:	f7fe fcb8 	bl	8015058 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166ec:	4b2d      	ldr	r3, [pc, #180]	; (80167a4 <xTaskResumeAll+0x124>)
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	429a      	cmp	r2, r3
 80166f2:	d903      	bls.n	80166fc <xTaskResumeAll+0x7c>
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166f8:	4a2a      	ldr	r2, [pc, #168]	; (80167a4 <xTaskResumeAll+0x124>)
 80166fa:	6013      	str	r3, [r2, #0]
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016700:	4613      	mov	r3, r2
 8016702:	009b      	lsls	r3, r3, #2
 8016704:	4413      	add	r3, r2
 8016706:	009b      	lsls	r3, r3, #2
 8016708:	4a27      	ldr	r2, [pc, #156]	; (80167a8 <xTaskResumeAll+0x128>)
 801670a:	441a      	add	r2, r3
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	3304      	adds	r3, #4
 8016710:	4619      	mov	r1, r3
 8016712:	4610      	mov	r0, r2
 8016714:	f7fe fc43 	bl	8014f9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801671c:	4b23      	ldr	r3, [pc, #140]	; (80167ac <xTaskResumeAll+0x12c>)
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016722:	429a      	cmp	r2, r3
 8016724:	d302      	bcc.n	801672c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8016726:	4b22      	ldr	r3, [pc, #136]	; (80167b0 <xTaskResumeAll+0x130>)
 8016728:	2201      	movs	r2, #1
 801672a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801672c:	4b1c      	ldr	r3, [pc, #112]	; (80167a0 <xTaskResumeAll+0x120>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d1cb      	bne.n	80166cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d001      	beq.n	801673e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801673a:	f000 fb5f 	bl	8016dfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801673e:	4b1d      	ldr	r3, [pc, #116]	; (80167b4 <xTaskResumeAll+0x134>)
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d010      	beq.n	801676c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801674a:	f000 f847 	bl	80167dc <xTaskIncrementTick>
 801674e:	4603      	mov	r3, r0
 8016750:	2b00      	cmp	r3, #0
 8016752:	d002      	beq.n	801675a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8016754:	4b16      	ldr	r3, [pc, #88]	; (80167b0 <xTaskResumeAll+0x130>)
 8016756:	2201      	movs	r2, #1
 8016758:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	3b01      	subs	r3, #1
 801675e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d1f1      	bne.n	801674a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8016766:	4b13      	ldr	r3, [pc, #76]	; (80167b4 <xTaskResumeAll+0x134>)
 8016768:	2200      	movs	r2, #0
 801676a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801676c:	4b10      	ldr	r3, [pc, #64]	; (80167b0 <xTaskResumeAll+0x130>)
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d009      	beq.n	8016788 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016774:	2301      	movs	r3, #1
 8016776:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016778:	4b0f      	ldr	r3, [pc, #60]	; (80167b8 <xTaskResumeAll+0x138>)
 801677a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801677e:	601a      	str	r2, [r3, #0]
 8016780:	f3bf 8f4f 	dsb	sy
 8016784:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016788:	f001 f9f4 	bl	8017b74 <vPortExitCritical>

	return xAlreadyYielded;
 801678c:	68bb      	ldr	r3, [r7, #8]
}
 801678e:	4618      	mov	r0, r3
 8016790:	3710      	adds	r7, #16
 8016792:	46bd      	mov	sp, r7
 8016794:	bd80      	pop	{r7, pc}
 8016796:	bf00      	nop
 8016798:	200014dc 	.word	0x200014dc
 801679c:	200014b4 	.word	0x200014b4
 80167a0:	20001474 	.word	0x20001474
 80167a4:	200014bc 	.word	0x200014bc
 80167a8:	20000fe4 	.word	0x20000fe4
 80167ac:	20000fe0 	.word	0x20000fe0
 80167b0:	200014c8 	.word	0x200014c8
 80167b4:	200014c4 	.word	0x200014c4
 80167b8:	e000ed04 	.word	0xe000ed04

080167bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80167bc:	b480      	push	{r7}
 80167be:	b083      	sub	sp, #12
 80167c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80167c2:	4b05      	ldr	r3, [pc, #20]	; (80167d8 <xTaskGetTickCount+0x1c>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80167c8:	687b      	ldr	r3, [r7, #4]
}
 80167ca:	4618      	mov	r0, r3
 80167cc:	370c      	adds	r7, #12
 80167ce:	46bd      	mov	sp, r7
 80167d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d4:	4770      	bx	lr
 80167d6:	bf00      	nop
 80167d8:	200014b8 	.word	0x200014b8

080167dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b086      	sub	sp, #24
 80167e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80167e2:	2300      	movs	r3, #0
 80167e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80167e6:	4b4f      	ldr	r3, [pc, #316]	; (8016924 <xTaskIncrementTick+0x148>)
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	f040 808f 	bne.w	801690e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80167f0:	4b4d      	ldr	r3, [pc, #308]	; (8016928 <xTaskIncrementTick+0x14c>)
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	3301      	adds	r3, #1
 80167f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80167f8:	4a4b      	ldr	r2, [pc, #300]	; (8016928 <xTaskIncrementTick+0x14c>)
 80167fa:	693b      	ldr	r3, [r7, #16]
 80167fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80167fe:	693b      	ldr	r3, [r7, #16]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d120      	bne.n	8016846 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016804:	4b49      	ldr	r3, [pc, #292]	; (801692c <xTaskIncrementTick+0x150>)
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d00a      	beq.n	8016824 <xTaskIncrementTick+0x48>
	__asm volatile
 801680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016812:	f383 8811 	msr	BASEPRI, r3
 8016816:	f3bf 8f6f 	isb	sy
 801681a:	f3bf 8f4f 	dsb	sy
 801681e:	603b      	str	r3, [r7, #0]
}
 8016820:	bf00      	nop
 8016822:	e7fe      	b.n	8016822 <xTaskIncrementTick+0x46>
 8016824:	4b41      	ldr	r3, [pc, #260]	; (801692c <xTaskIncrementTick+0x150>)
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	60fb      	str	r3, [r7, #12]
 801682a:	4b41      	ldr	r3, [pc, #260]	; (8016930 <xTaskIncrementTick+0x154>)
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	4a3f      	ldr	r2, [pc, #252]	; (801692c <xTaskIncrementTick+0x150>)
 8016830:	6013      	str	r3, [r2, #0]
 8016832:	4a3f      	ldr	r2, [pc, #252]	; (8016930 <xTaskIncrementTick+0x154>)
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	6013      	str	r3, [r2, #0]
 8016838:	4b3e      	ldr	r3, [pc, #248]	; (8016934 <xTaskIncrementTick+0x158>)
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	3301      	adds	r3, #1
 801683e:	4a3d      	ldr	r2, [pc, #244]	; (8016934 <xTaskIncrementTick+0x158>)
 8016840:	6013      	str	r3, [r2, #0]
 8016842:	f000 fadb 	bl	8016dfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016846:	4b3c      	ldr	r3, [pc, #240]	; (8016938 <xTaskIncrementTick+0x15c>)
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	693a      	ldr	r2, [r7, #16]
 801684c:	429a      	cmp	r2, r3
 801684e:	d349      	bcc.n	80168e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016850:	4b36      	ldr	r3, [pc, #216]	; (801692c <xTaskIncrementTick+0x150>)
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d104      	bne.n	8016864 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801685a:	4b37      	ldr	r3, [pc, #220]	; (8016938 <xTaskIncrementTick+0x15c>)
 801685c:	f04f 32ff 	mov.w	r2, #4294967295
 8016860:	601a      	str	r2, [r3, #0]
					break;
 8016862:	e03f      	b.n	80168e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016864:	4b31      	ldr	r3, [pc, #196]	; (801692c <xTaskIncrementTick+0x150>)
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	68db      	ldr	r3, [r3, #12]
 801686a:	68db      	ldr	r3, [r3, #12]
 801686c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801686e:	68bb      	ldr	r3, [r7, #8]
 8016870:	685b      	ldr	r3, [r3, #4]
 8016872:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016874:	693a      	ldr	r2, [r7, #16]
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	429a      	cmp	r2, r3
 801687a:	d203      	bcs.n	8016884 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801687c:	4a2e      	ldr	r2, [pc, #184]	; (8016938 <xTaskIncrementTick+0x15c>)
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016882:	e02f      	b.n	80168e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016884:	68bb      	ldr	r3, [r7, #8]
 8016886:	3304      	adds	r3, #4
 8016888:	4618      	mov	r0, r3
 801688a:	f7fe fbe5 	bl	8015058 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801688e:	68bb      	ldr	r3, [r7, #8]
 8016890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016892:	2b00      	cmp	r3, #0
 8016894:	d004      	beq.n	80168a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016896:	68bb      	ldr	r3, [r7, #8]
 8016898:	3318      	adds	r3, #24
 801689a:	4618      	mov	r0, r3
 801689c:	f7fe fbdc 	bl	8015058 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80168a0:	68bb      	ldr	r3, [r7, #8]
 80168a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168a4:	4b25      	ldr	r3, [pc, #148]	; (801693c <xTaskIncrementTick+0x160>)
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	429a      	cmp	r2, r3
 80168aa:	d903      	bls.n	80168b4 <xTaskIncrementTick+0xd8>
 80168ac:	68bb      	ldr	r3, [r7, #8]
 80168ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168b0:	4a22      	ldr	r2, [pc, #136]	; (801693c <xTaskIncrementTick+0x160>)
 80168b2:	6013      	str	r3, [r2, #0]
 80168b4:	68bb      	ldr	r3, [r7, #8]
 80168b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168b8:	4613      	mov	r3, r2
 80168ba:	009b      	lsls	r3, r3, #2
 80168bc:	4413      	add	r3, r2
 80168be:	009b      	lsls	r3, r3, #2
 80168c0:	4a1f      	ldr	r2, [pc, #124]	; (8016940 <xTaskIncrementTick+0x164>)
 80168c2:	441a      	add	r2, r3
 80168c4:	68bb      	ldr	r3, [r7, #8]
 80168c6:	3304      	adds	r3, #4
 80168c8:	4619      	mov	r1, r3
 80168ca:	4610      	mov	r0, r2
 80168cc:	f7fe fb67 	bl	8014f9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80168d0:	68bb      	ldr	r3, [r7, #8]
 80168d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168d4:	4b1b      	ldr	r3, [pc, #108]	; (8016944 <xTaskIncrementTick+0x168>)
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168da:	429a      	cmp	r2, r3
 80168dc:	d3b8      	bcc.n	8016850 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80168de:	2301      	movs	r3, #1
 80168e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80168e2:	e7b5      	b.n	8016850 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80168e4:	4b17      	ldr	r3, [pc, #92]	; (8016944 <xTaskIncrementTick+0x168>)
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168ea:	4915      	ldr	r1, [pc, #84]	; (8016940 <xTaskIncrementTick+0x164>)
 80168ec:	4613      	mov	r3, r2
 80168ee:	009b      	lsls	r3, r3, #2
 80168f0:	4413      	add	r3, r2
 80168f2:	009b      	lsls	r3, r3, #2
 80168f4:	440b      	add	r3, r1
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	2b01      	cmp	r3, #1
 80168fa:	d901      	bls.n	8016900 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80168fc:	2301      	movs	r3, #1
 80168fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016900:	4b11      	ldr	r3, [pc, #68]	; (8016948 <xTaskIncrementTick+0x16c>)
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d007      	beq.n	8016918 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8016908:	2301      	movs	r3, #1
 801690a:	617b      	str	r3, [r7, #20]
 801690c:	e004      	b.n	8016918 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801690e:	4b0f      	ldr	r3, [pc, #60]	; (801694c <xTaskIncrementTick+0x170>)
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	3301      	adds	r3, #1
 8016914:	4a0d      	ldr	r2, [pc, #52]	; (801694c <xTaskIncrementTick+0x170>)
 8016916:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016918:	697b      	ldr	r3, [r7, #20]
}
 801691a:	4618      	mov	r0, r3
 801691c:	3718      	adds	r7, #24
 801691e:	46bd      	mov	sp, r7
 8016920:	bd80      	pop	{r7, pc}
 8016922:	bf00      	nop
 8016924:	200014dc 	.word	0x200014dc
 8016928:	200014b8 	.word	0x200014b8
 801692c:	2000146c 	.word	0x2000146c
 8016930:	20001470 	.word	0x20001470
 8016934:	200014cc 	.word	0x200014cc
 8016938:	200014d4 	.word	0x200014d4
 801693c:	200014bc 	.word	0x200014bc
 8016940:	20000fe4 	.word	0x20000fe4
 8016944:	20000fe0 	.word	0x20000fe0
 8016948:	200014c8 	.word	0x200014c8
 801694c:	200014c4 	.word	0x200014c4

08016950 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016950:	b480      	push	{r7}
 8016952:	b085      	sub	sp, #20
 8016954:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016956:	4b2a      	ldr	r3, [pc, #168]	; (8016a00 <vTaskSwitchContext+0xb0>)
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d003      	beq.n	8016966 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801695e:	4b29      	ldr	r3, [pc, #164]	; (8016a04 <vTaskSwitchContext+0xb4>)
 8016960:	2201      	movs	r2, #1
 8016962:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016964:	e046      	b.n	80169f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8016966:	4b27      	ldr	r3, [pc, #156]	; (8016a04 <vTaskSwitchContext+0xb4>)
 8016968:	2200      	movs	r2, #0
 801696a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801696c:	4b26      	ldr	r3, [pc, #152]	; (8016a08 <vTaskSwitchContext+0xb8>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	60fb      	str	r3, [r7, #12]
 8016972:	e010      	b.n	8016996 <vTaskSwitchContext+0x46>
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d10a      	bne.n	8016990 <vTaskSwitchContext+0x40>
	__asm volatile
 801697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801697e:	f383 8811 	msr	BASEPRI, r3
 8016982:	f3bf 8f6f 	isb	sy
 8016986:	f3bf 8f4f 	dsb	sy
 801698a:	607b      	str	r3, [r7, #4]
}
 801698c:	bf00      	nop
 801698e:	e7fe      	b.n	801698e <vTaskSwitchContext+0x3e>
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	3b01      	subs	r3, #1
 8016994:	60fb      	str	r3, [r7, #12]
 8016996:	491d      	ldr	r1, [pc, #116]	; (8016a0c <vTaskSwitchContext+0xbc>)
 8016998:	68fa      	ldr	r2, [r7, #12]
 801699a:	4613      	mov	r3, r2
 801699c:	009b      	lsls	r3, r3, #2
 801699e:	4413      	add	r3, r2
 80169a0:	009b      	lsls	r3, r3, #2
 80169a2:	440b      	add	r3, r1
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d0e4      	beq.n	8016974 <vTaskSwitchContext+0x24>
 80169aa:	68fa      	ldr	r2, [r7, #12]
 80169ac:	4613      	mov	r3, r2
 80169ae:	009b      	lsls	r3, r3, #2
 80169b0:	4413      	add	r3, r2
 80169b2:	009b      	lsls	r3, r3, #2
 80169b4:	4a15      	ldr	r2, [pc, #84]	; (8016a0c <vTaskSwitchContext+0xbc>)
 80169b6:	4413      	add	r3, r2
 80169b8:	60bb      	str	r3, [r7, #8]
 80169ba:	68bb      	ldr	r3, [r7, #8]
 80169bc:	685b      	ldr	r3, [r3, #4]
 80169be:	685a      	ldr	r2, [r3, #4]
 80169c0:	68bb      	ldr	r3, [r7, #8]
 80169c2:	605a      	str	r2, [r3, #4]
 80169c4:	68bb      	ldr	r3, [r7, #8]
 80169c6:	685a      	ldr	r2, [r3, #4]
 80169c8:	68bb      	ldr	r3, [r7, #8]
 80169ca:	3308      	adds	r3, #8
 80169cc:	429a      	cmp	r2, r3
 80169ce:	d104      	bne.n	80169da <vTaskSwitchContext+0x8a>
 80169d0:	68bb      	ldr	r3, [r7, #8]
 80169d2:	685b      	ldr	r3, [r3, #4]
 80169d4:	685a      	ldr	r2, [r3, #4]
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	605a      	str	r2, [r3, #4]
 80169da:	68bb      	ldr	r3, [r7, #8]
 80169dc:	685b      	ldr	r3, [r3, #4]
 80169de:	68db      	ldr	r3, [r3, #12]
 80169e0:	4a0b      	ldr	r2, [pc, #44]	; (8016a10 <vTaskSwitchContext+0xc0>)
 80169e2:	6013      	str	r3, [r2, #0]
 80169e4:	4a08      	ldr	r2, [pc, #32]	; (8016a08 <vTaskSwitchContext+0xb8>)
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80169ea:	4b09      	ldr	r3, [pc, #36]	; (8016a10 <vTaskSwitchContext+0xc0>)
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	3354      	adds	r3, #84	; 0x54
 80169f0:	4a08      	ldr	r2, [pc, #32]	; (8016a14 <vTaskSwitchContext+0xc4>)
 80169f2:	6013      	str	r3, [r2, #0]
}
 80169f4:	bf00      	nop
 80169f6:	3714      	adds	r7, #20
 80169f8:	46bd      	mov	sp, r7
 80169fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fe:	4770      	bx	lr
 8016a00:	200014dc 	.word	0x200014dc
 8016a04:	200014c8 	.word	0x200014c8
 8016a08:	200014bc 	.word	0x200014bc
 8016a0c:	20000fe4 	.word	0x20000fe4
 8016a10:	20000fe0 	.word	0x20000fe0
 8016a14:	200001d8 	.word	0x200001d8

08016a18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b084      	sub	sp, #16
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
 8016a20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d10a      	bne.n	8016a3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a2c:	f383 8811 	msr	BASEPRI, r3
 8016a30:	f3bf 8f6f 	isb	sy
 8016a34:	f3bf 8f4f 	dsb	sy
 8016a38:	60fb      	str	r3, [r7, #12]
}
 8016a3a:	bf00      	nop
 8016a3c:	e7fe      	b.n	8016a3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016a3e:	4b07      	ldr	r3, [pc, #28]	; (8016a5c <vTaskPlaceOnEventList+0x44>)
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	3318      	adds	r3, #24
 8016a44:	4619      	mov	r1, r3
 8016a46:	6878      	ldr	r0, [r7, #4]
 8016a48:	f7fe facd 	bl	8014fe6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016a4c:	2101      	movs	r1, #1
 8016a4e:	6838      	ldr	r0, [r7, #0]
 8016a50:	f000 fb8e 	bl	8017170 <prvAddCurrentTaskToDelayedList>
}
 8016a54:	bf00      	nop
 8016a56:	3710      	adds	r7, #16
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bd80      	pop	{r7, pc}
 8016a5c:	20000fe0 	.word	0x20000fe0

08016a60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b086      	sub	sp, #24
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	60f8      	str	r0, [r7, #12]
 8016a68:	60b9      	str	r1, [r7, #8]
 8016a6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d10a      	bne.n	8016a88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a76:	f383 8811 	msr	BASEPRI, r3
 8016a7a:	f3bf 8f6f 	isb	sy
 8016a7e:	f3bf 8f4f 	dsb	sy
 8016a82:	617b      	str	r3, [r7, #20]
}
 8016a84:	bf00      	nop
 8016a86:	e7fe      	b.n	8016a86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016a88:	4b0a      	ldr	r3, [pc, #40]	; (8016ab4 <vTaskPlaceOnEventListRestricted+0x54>)
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	3318      	adds	r3, #24
 8016a8e:	4619      	mov	r1, r3
 8016a90:	68f8      	ldr	r0, [r7, #12]
 8016a92:	f7fe fa84 	bl	8014f9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d002      	beq.n	8016aa2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8016aa0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016aa2:	6879      	ldr	r1, [r7, #4]
 8016aa4:	68b8      	ldr	r0, [r7, #8]
 8016aa6:	f000 fb63 	bl	8017170 <prvAddCurrentTaskToDelayedList>
	}
 8016aaa:	bf00      	nop
 8016aac:	3718      	adds	r7, #24
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	bd80      	pop	{r7, pc}
 8016ab2:	bf00      	nop
 8016ab4:	20000fe0 	.word	0x20000fe0

08016ab8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b086      	sub	sp, #24
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	68db      	ldr	r3, [r3, #12]
 8016ac4:	68db      	ldr	r3, [r3, #12]
 8016ac6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016ac8:	693b      	ldr	r3, [r7, #16]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d10a      	bne.n	8016ae4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ad2:	f383 8811 	msr	BASEPRI, r3
 8016ad6:	f3bf 8f6f 	isb	sy
 8016ada:	f3bf 8f4f 	dsb	sy
 8016ade:	60fb      	str	r3, [r7, #12]
}
 8016ae0:	bf00      	nop
 8016ae2:	e7fe      	b.n	8016ae2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016ae4:	693b      	ldr	r3, [r7, #16]
 8016ae6:	3318      	adds	r3, #24
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f7fe fab5 	bl	8015058 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016aee:	4b1e      	ldr	r3, [pc, #120]	; (8016b68 <xTaskRemoveFromEventList+0xb0>)
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d11d      	bne.n	8016b32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016af6:	693b      	ldr	r3, [r7, #16]
 8016af8:	3304      	adds	r3, #4
 8016afa:	4618      	mov	r0, r3
 8016afc:	f7fe faac 	bl	8015058 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016b00:	693b      	ldr	r3, [r7, #16]
 8016b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b04:	4b19      	ldr	r3, [pc, #100]	; (8016b6c <xTaskRemoveFromEventList+0xb4>)
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	429a      	cmp	r2, r3
 8016b0a:	d903      	bls.n	8016b14 <xTaskRemoveFromEventList+0x5c>
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b10:	4a16      	ldr	r2, [pc, #88]	; (8016b6c <xTaskRemoveFromEventList+0xb4>)
 8016b12:	6013      	str	r3, [r2, #0]
 8016b14:	693b      	ldr	r3, [r7, #16]
 8016b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b18:	4613      	mov	r3, r2
 8016b1a:	009b      	lsls	r3, r3, #2
 8016b1c:	4413      	add	r3, r2
 8016b1e:	009b      	lsls	r3, r3, #2
 8016b20:	4a13      	ldr	r2, [pc, #76]	; (8016b70 <xTaskRemoveFromEventList+0xb8>)
 8016b22:	441a      	add	r2, r3
 8016b24:	693b      	ldr	r3, [r7, #16]
 8016b26:	3304      	adds	r3, #4
 8016b28:	4619      	mov	r1, r3
 8016b2a:	4610      	mov	r0, r2
 8016b2c:	f7fe fa37 	bl	8014f9e <vListInsertEnd>
 8016b30:	e005      	b.n	8016b3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016b32:	693b      	ldr	r3, [r7, #16]
 8016b34:	3318      	adds	r3, #24
 8016b36:	4619      	mov	r1, r3
 8016b38:	480e      	ldr	r0, [pc, #56]	; (8016b74 <xTaskRemoveFromEventList+0xbc>)
 8016b3a:	f7fe fa30 	bl	8014f9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016b3e:	693b      	ldr	r3, [r7, #16]
 8016b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b42:	4b0d      	ldr	r3, [pc, #52]	; (8016b78 <xTaskRemoveFromEventList+0xc0>)
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b48:	429a      	cmp	r2, r3
 8016b4a:	d905      	bls.n	8016b58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016b4c:	2301      	movs	r3, #1
 8016b4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016b50:	4b0a      	ldr	r3, [pc, #40]	; (8016b7c <xTaskRemoveFromEventList+0xc4>)
 8016b52:	2201      	movs	r2, #1
 8016b54:	601a      	str	r2, [r3, #0]
 8016b56:	e001      	b.n	8016b5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8016b58:	2300      	movs	r3, #0
 8016b5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016b5c:	697b      	ldr	r3, [r7, #20]
}
 8016b5e:	4618      	mov	r0, r3
 8016b60:	3718      	adds	r7, #24
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}
 8016b66:	bf00      	nop
 8016b68:	200014dc 	.word	0x200014dc
 8016b6c:	200014bc 	.word	0x200014bc
 8016b70:	20000fe4 	.word	0x20000fe4
 8016b74:	20001474 	.word	0x20001474
 8016b78:	20000fe0 	.word	0x20000fe0
 8016b7c:	200014c8 	.word	0x200014c8

08016b80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016b80:	b480      	push	{r7}
 8016b82:	b083      	sub	sp, #12
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016b88:	4b06      	ldr	r3, [pc, #24]	; (8016ba4 <vTaskInternalSetTimeOutState+0x24>)
 8016b8a:	681a      	ldr	r2, [r3, #0]
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016b90:	4b05      	ldr	r3, [pc, #20]	; (8016ba8 <vTaskInternalSetTimeOutState+0x28>)
 8016b92:	681a      	ldr	r2, [r3, #0]
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	605a      	str	r2, [r3, #4]
}
 8016b98:	bf00      	nop
 8016b9a:	370c      	adds	r7, #12
 8016b9c:	46bd      	mov	sp, r7
 8016b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba2:	4770      	bx	lr
 8016ba4:	200014cc 	.word	0x200014cc
 8016ba8:	200014b8 	.word	0x200014b8

08016bac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b088      	sub	sp, #32
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
 8016bb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d10a      	bne.n	8016bd2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bc0:	f383 8811 	msr	BASEPRI, r3
 8016bc4:	f3bf 8f6f 	isb	sy
 8016bc8:	f3bf 8f4f 	dsb	sy
 8016bcc:	613b      	str	r3, [r7, #16]
}
 8016bce:	bf00      	nop
 8016bd0:	e7fe      	b.n	8016bd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016bd2:	683b      	ldr	r3, [r7, #0]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d10a      	bne.n	8016bee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bdc:	f383 8811 	msr	BASEPRI, r3
 8016be0:	f3bf 8f6f 	isb	sy
 8016be4:	f3bf 8f4f 	dsb	sy
 8016be8:	60fb      	str	r3, [r7, #12]
}
 8016bea:	bf00      	nop
 8016bec:	e7fe      	b.n	8016bec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8016bee:	f000 ff91 	bl	8017b14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016bf2:	4b1d      	ldr	r3, [pc, #116]	; (8016c68 <xTaskCheckForTimeOut+0xbc>)
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	685b      	ldr	r3, [r3, #4]
 8016bfc:	69ba      	ldr	r2, [r7, #24]
 8016bfe:	1ad3      	subs	r3, r2, r3
 8016c00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016c02:	683b      	ldr	r3, [r7, #0]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c0a:	d102      	bne.n	8016c12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	61fb      	str	r3, [r7, #28]
 8016c10:	e023      	b.n	8016c5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	681a      	ldr	r2, [r3, #0]
 8016c16:	4b15      	ldr	r3, [pc, #84]	; (8016c6c <xTaskCheckForTimeOut+0xc0>)
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	429a      	cmp	r2, r3
 8016c1c:	d007      	beq.n	8016c2e <xTaskCheckForTimeOut+0x82>
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	685b      	ldr	r3, [r3, #4]
 8016c22:	69ba      	ldr	r2, [r7, #24]
 8016c24:	429a      	cmp	r2, r3
 8016c26:	d302      	bcc.n	8016c2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016c28:	2301      	movs	r3, #1
 8016c2a:	61fb      	str	r3, [r7, #28]
 8016c2c:	e015      	b.n	8016c5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016c2e:	683b      	ldr	r3, [r7, #0]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	697a      	ldr	r2, [r7, #20]
 8016c34:	429a      	cmp	r2, r3
 8016c36:	d20b      	bcs.n	8016c50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016c38:	683b      	ldr	r3, [r7, #0]
 8016c3a:	681a      	ldr	r2, [r3, #0]
 8016c3c:	697b      	ldr	r3, [r7, #20]
 8016c3e:	1ad2      	subs	r2, r2, r3
 8016c40:	683b      	ldr	r3, [r7, #0]
 8016c42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016c44:	6878      	ldr	r0, [r7, #4]
 8016c46:	f7ff ff9b 	bl	8016b80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	61fb      	str	r3, [r7, #28]
 8016c4e:	e004      	b.n	8016c5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016c50:	683b      	ldr	r3, [r7, #0]
 8016c52:	2200      	movs	r2, #0
 8016c54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016c56:	2301      	movs	r3, #1
 8016c58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016c5a:	f000 ff8b 	bl	8017b74 <vPortExitCritical>

	return xReturn;
 8016c5e:	69fb      	ldr	r3, [r7, #28]
}
 8016c60:	4618      	mov	r0, r3
 8016c62:	3720      	adds	r7, #32
 8016c64:	46bd      	mov	sp, r7
 8016c66:	bd80      	pop	{r7, pc}
 8016c68:	200014b8 	.word	0x200014b8
 8016c6c:	200014cc 	.word	0x200014cc

08016c70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016c70:	b480      	push	{r7}
 8016c72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016c74:	4b03      	ldr	r3, [pc, #12]	; (8016c84 <vTaskMissedYield+0x14>)
 8016c76:	2201      	movs	r2, #1
 8016c78:	601a      	str	r2, [r3, #0]
}
 8016c7a:	bf00      	nop
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c82:	4770      	bx	lr
 8016c84:	200014c8 	.word	0x200014c8

08016c88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b082      	sub	sp, #8
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016c90:	f000 f852 	bl	8016d38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016c94:	4b06      	ldr	r3, [pc, #24]	; (8016cb0 <prvIdleTask+0x28>)
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	2b01      	cmp	r3, #1
 8016c9a:	d9f9      	bls.n	8016c90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016c9c:	4b05      	ldr	r3, [pc, #20]	; (8016cb4 <prvIdleTask+0x2c>)
 8016c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ca2:	601a      	str	r2, [r3, #0]
 8016ca4:	f3bf 8f4f 	dsb	sy
 8016ca8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016cac:	e7f0      	b.n	8016c90 <prvIdleTask+0x8>
 8016cae:	bf00      	nop
 8016cb0:	20000fe4 	.word	0x20000fe4
 8016cb4:	e000ed04 	.word	0xe000ed04

08016cb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b082      	sub	sp, #8
 8016cbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	607b      	str	r3, [r7, #4]
 8016cc2:	e00c      	b.n	8016cde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016cc4:	687a      	ldr	r2, [r7, #4]
 8016cc6:	4613      	mov	r3, r2
 8016cc8:	009b      	lsls	r3, r3, #2
 8016cca:	4413      	add	r3, r2
 8016ccc:	009b      	lsls	r3, r3, #2
 8016cce:	4a12      	ldr	r2, [pc, #72]	; (8016d18 <prvInitialiseTaskLists+0x60>)
 8016cd0:	4413      	add	r3, r2
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f7fe f936 	bl	8014f44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	3301      	adds	r3, #1
 8016cdc:	607b      	str	r3, [r7, #4]
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	2b37      	cmp	r3, #55	; 0x37
 8016ce2:	d9ef      	bls.n	8016cc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016ce4:	480d      	ldr	r0, [pc, #52]	; (8016d1c <prvInitialiseTaskLists+0x64>)
 8016ce6:	f7fe f92d 	bl	8014f44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016cea:	480d      	ldr	r0, [pc, #52]	; (8016d20 <prvInitialiseTaskLists+0x68>)
 8016cec:	f7fe f92a 	bl	8014f44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016cf0:	480c      	ldr	r0, [pc, #48]	; (8016d24 <prvInitialiseTaskLists+0x6c>)
 8016cf2:	f7fe f927 	bl	8014f44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016cf6:	480c      	ldr	r0, [pc, #48]	; (8016d28 <prvInitialiseTaskLists+0x70>)
 8016cf8:	f7fe f924 	bl	8014f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016cfc:	480b      	ldr	r0, [pc, #44]	; (8016d2c <prvInitialiseTaskLists+0x74>)
 8016cfe:	f7fe f921 	bl	8014f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016d02:	4b0b      	ldr	r3, [pc, #44]	; (8016d30 <prvInitialiseTaskLists+0x78>)
 8016d04:	4a05      	ldr	r2, [pc, #20]	; (8016d1c <prvInitialiseTaskLists+0x64>)
 8016d06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016d08:	4b0a      	ldr	r3, [pc, #40]	; (8016d34 <prvInitialiseTaskLists+0x7c>)
 8016d0a:	4a05      	ldr	r2, [pc, #20]	; (8016d20 <prvInitialiseTaskLists+0x68>)
 8016d0c:	601a      	str	r2, [r3, #0]
}
 8016d0e:	bf00      	nop
 8016d10:	3708      	adds	r7, #8
 8016d12:	46bd      	mov	sp, r7
 8016d14:	bd80      	pop	{r7, pc}
 8016d16:	bf00      	nop
 8016d18:	20000fe4 	.word	0x20000fe4
 8016d1c:	20001444 	.word	0x20001444
 8016d20:	20001458 	.word	0x20001458
 8016d24:	20001474 	.word	0x20001474
 8016d28:	20001488 	.word	0x20001488
 8016d2c:	200014a0 	.word	0x200014a0
 8016d30:	2000146c 	.word	0x2000146c
 8016d34:	20001470 	.word	0x20001470

08016d38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	b082      	sub	sp, #8
 8016d3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016d3e:	e019      	b.n	8016d74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016d40:	f000 fee8 	bl	8017b14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d44:	4b10      	ldr	r3, [pc, #64]	; (8016d88 <prvCheckTasksWaitingTermination+0x50>)
 8016d46:	68db      	ldr	r3, [r3, #12]
 8016d48:	68db      	ldr	r3, [r3, #12]
 8016d4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	3304      	adds	r3, #4
 8016d50:	4618      	mov	r0, r3
 8016d52:	f7fe f981 	bl	8015058 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016d56:	4b0d      	ldr	r3, [pc, #52]	; (8016d8c <prvCheckTasksWaitingTermination+0x54>)
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	3b01      	subs	r3, #1
 8016d5c:	4a0b      	ldr	r2, [pc, #44]	; (8016d8c <prvCheckTasksWaitingTermination+0x54>)
 8016d5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016d60:	4b0b      	ldr	r3, [pc, #44]	; (8016d90 <prvCheckTasksWaitingTermination+0x58>)
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	3b01      	subs	r3, #1
 8016d66:	4a0a      	ldr	r2, [pc, #40]	; (8016d90 <prvCheckTasksWaitingTermination+0x58>)
 8016d68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016d6a:	f000 ff03 	bl	8017b74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016d6e:	6878      	ldr	r0, [r7, #4]
 8016d70:	f000 f810 	bl	8016d94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016d74:	4b06      	ldr	r3, [pc, #24]	; (8016d90 <prvCheckTasksWaitingTermination+0x58>)
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d1e1      	bne.n	8016d40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016d7c:	bf00      	nop
 8016d7e:	bf00      	nop
 8016d80:	3708      	adds	r7, #8
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bd80      	pop	{r7, pc}
 8016d86:	bf00      	nop
 8016d88:	20001488 	.word	0x20001488
 8016d8c:	200014b4 	.word	0x200014b4
 8016d90:	2000149c 	.word	0x2000149c

08016d94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016d94:	b580      	push	{r7, lr}
 8016d96:	b084      	sub	sp, #16
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	3354      	adds	r3, #84	; 0x54
 8016da0:	4618      	mov	r0, r3
 8016da2:	f003 ffbb 	bl	801ad1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d108      	bne.n	8016dc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016db4:	4618      	mov	r0, r3
 8016db6:	f001 f89b 	bl	8017ef0 <vPortFree>
				vPortFree( pxTCB );
 8016dba:	6878      	ldr	r0, [r7, #4]
 8016dbc:	f001 f898 	bl	8017ef0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016dc0:	e018      	b.n	8016df4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8016dc8:	2b01      	cmp	r3, #1
 8016dca:	d103      	bne.n	8016dd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016dcc:	6878      	ldr	r0, [r7, #4]
 8016dce:	f001 f88f 	bl	8017ef0 <vPortFree>
	}
 8016dd2:	e00f      	b.n	8016df4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8016dda:	2b02      	cmp	r3, #2
 8016ddc:	d00a      	beq.n	8016df4 <prvDeleteTCB+0x60>
	__asm volatile
 8016dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016de2:	f383 8811 	msr	BASEPRI, r3
 8016de6:	f3bf 8f6f 	isb	sy
 8016dea:	f3bf 8f4f 	dsb	sy
 8016dee:	60fb      	str	r3, [r7, #12]
}
 8016df0:	bf00      	nop
 8016df2:	e7fe      	b.n	8016df2 <prvDeleteTCB+0x5e>
	}
 8016df4:	bf00      	nop
 8016df6:	3710      	adds	r7, #16
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	bd80      	pop	{r7, pc}

08016dfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016dfc:	b480      	push	{r7}
 8016dfe:	b083      	sub	sp, #12
 8016e00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016e02:	4b0c      	ldr	r3, [pc, #48]	; (8016e34 <prvResetNextTaskUnblockTime+0x38>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d104      	bne.n	8016e16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016e0c:	4b0a      	ldr	r3, [pc, #40]	; (8016e38 <prvResetNextTaskUnblockTime+0x3c>)
 8016e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8016e12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016e14:	e008      	b.n	8016e28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e16:	4b07      	ldr	r3, [pc, #28]	; (8016e34 <prvResetNextTaskUnblockTime+0x38>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	68db      	ldr	r3, [r3, #12]
 8016e1c:	68db      	ldr	r3, [r3, #12]
 8016e1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	685b      	ldr	r3, [r3, #4]
 8016e24:	4a04      	ldr	r2, [pc, #16]	; (8016e38 <prvResetNextTaskUnblockTime+0x3c>)
 8016e26:	6013      	str	r3, [r2, #0]
}
 8016e28:	bf00      	nop
 8016e2a:	370c      	adds	r7, #12
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e32:	4770      	bx	lr
 8016e34:	2000146c 	.word	0x2000146c
 8016e38:	200014d4 	.word	0x200014d4

08016e3c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8016e3c:	b480      	push	{r7}
 8016e3e:	b083      	sub	sp, #12
 8016e40:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8016e42:	4b05      	ldr	r3, [pc, #20]	; (8016e58 <xTaskGetCurrentTaskHandle+0x1c>)
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	607b      	str	r3, [r7, #4]

		return xReturn;
 8016e48:	687b      	ldr	r3, [r7, #4]
	}
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	370c      	adds	r7, #12
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e54:	4770      	bx	lr
 8016e56:	bf00      	nop
 8016e58:	20000fe0 	.word	0x20000fe0

08016e5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016e5c:	b480      	push	{r7}
 8016e5e:	b083      	sub	sp, #12
 8016e60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016e62:	4b0b      	ldr	r3, [pc, #44]	; (8016e90 <xTaskGetSchedulerState+0x34>)
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d102      	bne.n	8016e70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016e6a:	2301      	movs	r3, #1
 8016e6c:	607b      	str	r3, [r7, #4]
 8016e6e:	e008      	b.n	8016e82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016e70:	4b08      	ldr	r3, [pc, #32]	; (8016e94 <xTaskGetSchedulerState+0x38>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d102      	bne.n	8016e7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016e78:	2302      	movs	r3, #2
 8016e7a:	607b      	str	r3, [r7, #4]
 8016e7c:	e001      	b.n	8016e82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016e7e:	2300      	movs	r3, #0
 8016e80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016e82:	687b      	ldr	r3, [r7, #4]
	}
 8016e84:	4618      	mov	r0, r3
 8016e86:	370c      	adds	r7, #12
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8e:	4770      	bx	lr
 8016e90:	200014c0 	.word	0x200014c0
 8016e94:	200014dc 	.word	0x200014dc

08016e98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b084      	sub	sp, #16
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d051      	beq.n	8016f52 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016eae:	68bb      	ldr	r3, [r7, #8]
 8016eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016eb2:	4b2a      	ldr	r3, [pc, #168]	; (8016f5c <xTaskPriorityInherit+0xc4>)
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016eb8:	429a      	cmp	r2, r3
 8016eba:	d241      	bcs.n	8016f40 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016ebc:	68bb      	ldr	r3, [r7, #8]
 8016ebe:	699b      	ldr	r3, [r3, #24]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	db06      	blt.n	8016ed2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ec4:	4b25      	ldr	r3, [pc, #148]	; (8016f5c <xTaskPriorityInherit+0xc4>)
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016eca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016ece:	68bb      	ldr	r3, [r7, #8]
 8016ed0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016ed2:	68bb      	ldr	r3, [r7, #8]
 8016ed4:	6959      	ldr	r1, [r3, #20]
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016eda:	4613      	mov	r3, r2
 8016edc:	009b      	lsls	r3, r3, #2
 8016ede:	4413      	add	r3, r2
 8016ee0:	009b      	lsls	r3, r3, #2
 8016ee2:	4a1f      	ldr	r2, [pc, #124]	; (8016f60 <xTaskPriorityInherit+0xc8>)
 8016ee4:	4413      	add	r3, r2
 8016ee6:	4299      	cmp	r1, r3
 8016ee8:	d122      	bne.n	8016f30 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016eea:	68bb      	ldr	r3, [r7, #8]
 8016eec:	3304      	adds	r3, #4
 8016eee:	4618      	mov	r0, r3
 8016ef0:	f7fe f8b2 	bl	8015058 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016ef4:	4b19      	ldr	r3, [pc, #100]	; (8016f5c <xTaskPriorityInherit+0xc4>)
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016efe:	68bb      	ldr	r3, [r7, #8]
 8016f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f02:	4b18      	ldr	r3, [pc, #96]	; (8016f64 <xTaskPriorityInherit+0xcc>)
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	429a      	cmp	r2, r3
 8016f08:	d903      	bls.n	8016f12 <xTaskPriorityInherit+0x7a>
 8016f0a:	68bb      	ldr	r3, [r7, #8]
 8016f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f0e:	4a15      	ldr	r2, [pc, #84]	; (8016f64 <xTaskPriorityInherit+0xcc>)
 8016f10:	6013      	str	r3, [r2, #0]
 8016f12:	68bb      	ldr	r3, [r7, #8]
 8016f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f16:	4613      	mov	r3, r2
 8016f18:	009b      	lsls	r3, r3, #2
 8016f1a:	4413      	add	r3, r2
 8016f1c:	009b      	lsls	r3, r3, #2
 8016f1e:	4a10      	ldr	r2, [pc, #64]	; (8016f60 <xTaskPriorityInherit+0xc8>)
 8016f20:	441a      	add	r2, r3
 8016f22:	68bb      	ldr	r3, [r7, #8]
 8016f24:	3304      	adds	r3, #4
 8016f26:	4619      	mov	r1, r3
 8016f28:	4610      	mov	r0, r2
 8016f2a:	f7fe f838 	bl	8014f9e <vListInsertEnd>
 8016f2e:	e004      	b.n	8016f3a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016f30:	4b0a      	ldr	r3, [pc, #40]	; (8016f5c <xTaskPriorityInherit+0xc4>)
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f36:	68bb      	ldr	r3, [r7, #8]
 8016f38:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016f3a:	2301      	movs	r3, #1
 8016f3c:	60fb      	str	r3, [r7, #12]
 8016f3e:	e008      	b.n	8016f52 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016f40:	68bb      	ldr	r3, [r7, #8]
 8016f42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016f44:	4b05      	ldr	r3, [pc, #20]	; (8016f5c <xTaskPriorityInherit+0xc4>)
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f4a:	429a      	cmp	r2, r3
 8016f4c:	d201      	bcs.n	8016f52 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016f4e:	2301      	movs	r3, #1
 8016f50:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016f52:	68fb      	ldr	r3, [r7, #12]
	}
 8016f54:	4618      	mov	r0, r3
 8016f56:	3710      	adds	r7, #16
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	bd80      	pop	{r7, pc}
 8016f5c:	20000fe0 	.word	0x20000fe0
 8016f60:	20000fe4 	.word	0x20000fe4
 8016f64:	200014bc 	.word	0x200014bc

08016f68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b086      	sub	sp, #24
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016f74:	2300      	movs	r3, #0
 8016f76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d056      	beq.n	801702c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016f7e:	4b2e      	ldr	r3, [pc, #184]	; (8017038 <xTaskPriorityDisinherit+0xd0>)
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	693a      	ldr	r2, [r7, #16]
 8016f84:	429a      	cmp	r2, r3
 8016f86:	d00a      	beq.n	8016f9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f8c:	f383 8811 	msr	BASEPRI, r3
 8016f90:	f3bf 8f6f 	isb	sy
 8016f94:	f3bf 8f4f 	dsb	sy
 8016f98:	60fb      	str	r3, [r7, #12]
}
 8016f9a:	bf00      	nop
 8016f9c:	e7fe      	b.n	8016f9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016f9e:	693b      	ldr	r3, [r7, #16]
 8016fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d10a      	bne.n	8016fbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016faa:	f383 8811 	msr	BASEPRI, r3
 8016fae:	f3bf 8f6f 	isb	sy
 8016fb2:	f3bf 8f4f 	dsb	sy
 8016fb6:	60bb      	str	r3, [r7, #8]
}
 8016fb8:	bf00      	nop
 8016fba:	e7fe      	b.n	8016fba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8016fbc:	693b      	ldr	r3, [r7, #16]
 8016fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016fc0:	1e5a      	subs	r2, r3, #1
 8016fc2:	693b      	ldr	r3, [r7, #16]
 8016fc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016fc6:	693b      	ldr	r3, [r7, #16]
 8016fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fca:	693b      	ldr	r3, [r7, #16]
 8016fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016fce:	429a      	cmp	r2, r3
 8016fd0:	d02c      	beq.n	801702c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016fd2:	693b      	ldr	r3, [r7, #16]
 8016fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d128      	bne.n	801702c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016fda:	693b      	ldr	r3, [r7, #16]
 8016fdc:	3304      	adds	r3, #4
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7fe f83a 	bl	8015058 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016fe4:	693b      	ldr	r3, [r7, #16]
 8016fe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016fe8:	693b      	ldr	r3, [r7, #16]
 8016fea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016fec:	693b      	ldr	r3, [r7, #16]
 8016fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ff0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016ff4:	693b      	ldr	r3, [r7, #16]
 8016ff6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016ff8:	693b      	ldr	r3, [r7, #16]
 8016ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ffc:	4b0f      	ldr	r3, [pc, #60]	; (801703c <xTaskPriorityDisinherit+0xd4>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	429a      	cmp	r2, r3
 8017002:	d903      	bls.n	801700c <xTaskPriorityDisinherit+0xa4>
 8017004:	693b      	ldr	r3, [r7, #16]
 8017006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017008:	4a0c      	ldr	r2, [pc, #48]	; (801703c <xTaskPriorityDisinherit+0xd4>)
 801700a:	6013      	str	r3, [r2, #0]
 801700c:	693b      	ldr	r3, [r7, #16]
 801700e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017010:	4613      	mov	r3, r2
 8017012:	009b      	lsls	r3, r3, #2
 8017014:	4413      	add	r3, r2
 8017016:	009b      	lsls	r3, r3, #2
 8017018:	4a09      	ldr	r2, [pc, #36]	; (8017040 <xTaskPriorityDisinherit+0xd8>)
 801701a:	441a      	add	r2, r3
 801701c:	693b      	ldr	r3, [r7, #16]
 801701e:	3304      	adds	r3, #4
 8017020:	4619      	mov	r1, r3
 8017022:	4610      	mov	r0, r2
 8017024:	f7fd ffbb 	bl	8014f9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017028:	2301      	movs	r3, #1
 801702a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801702c:	697b      	ldr	r3, [r7, #20]
	}
 801702e:	4618      	mov	r0, r3
 8017030:	3718      	adds	r7, #24
 8017032:	46bd      	mov	sp, r7
 8017034:	bd80      	pop	{r7, pc}
 8017036:	bf00      	nop
 8017038:	20000fe0 	.word	0x20000fe0
 801703c:	200014bc 	.word	0x200014bc
 8017040:	20000fe4 	.word	0x20000fe4

08017044 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017044:	b580      	push	{r7, lr}
 8017046:	b088      	sub	sp, #32
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
 801704c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017052:	2301      	movs	r3, #1
 8017054:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d06a      	beq.n	8017132 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801705c:	69bb      	ldr	r3, [r7, #24]
 801705e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017060:	2b00      	cmp	r3, #0
 8017062:	d10a      	bne.n	801707a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017068:	f383 8811 	msr	BASEPRI, r3
 801706c:	f3bf 8f6f 	isb	sy
 8017070:	f3bf 8f4f 	dsb	sy
 8017074:	60fb      	str	r3, [r7, #12]
}
 8017076:	bf00      	nop
 8017078:	e7fe      	b.n	8017078 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801707a:	69bb      	ldr	r3, [r7, #24]
 801707c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801707e:	683a      	ldr	r2, [r7, #0]
 8017080:	429a      	cmp	r2, r3
 8017082:	d902      	bls.n	801708a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017084:	683b      	ldr	r3, [r7, #0]
 8017086:	61fb      	str	r3, [r7, #28]
 8017088:	e002      	b.n	8017090 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801708a:	69bb      	ldr	r3, [r7, #24]
 801708c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801708e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017090:	69bb      	ldr	r3, [r7, #24]
 8017092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017094:	69fa      	ldr	r2, [r7, #28]
 8017096:	429a      	cmp	r2, r3
 8017098:	d04b      	beq.n	8017132 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801709a:	69bb      	ldr	r3, [r7, #24]
 801709c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801709e:	697a      	ldr	r2, [r7, #20]
 80170a0:	429a      	cmp	r2, r3
 80170a2:	d146      	bne.n	8017132 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80170a4:	4b25      	ldr	r3, [pc, #148]	; (801713c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	69ba      	ldr	r2, [r7, #24]
 80170aa:	429a      	cmp	r2, r3
 80170ac:	d10a      	bne.n	80170c4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80170ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170b2:	f383 8811 	msr	BASEPRI, r3
 80170b6:	f3bf 8f6f 	isb	sy
 80170ba:	f3bf 8f4f 	dsb	sy
 80170be:	60bb      	str	r3, [r7, #8]
}
 80170c0:	bf00      	nop
 80170c2:	e7fe      	b.n	80170c2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80170c4:	69bb      	ldr	r3, [r7, #24]
 80170c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80170ca:	69bb      	ldr	r3, [r7, #24]
 80170cc:	69fa      	ldr	r2, [r7, #28]
 80170ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80170d0:	69bb      	ldr	r3, [r7, #24]
 80170d2:	699b      	ldr	r3, [r3, #24]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	db04      	blt.n	80170e2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80170d8:	69fb      	ldr	r3, [r7, #28]
 80170da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80170de:	69bb      	ldr	r3, [r7, #24]
 80170e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80170e2:	69bb      	ldr	r3, [r7, #24]
 80170e4:	6959      	ldr	r1, [r3, #20]
 80170e6:	693a      	ldr	r2, [r7, #16]
 80170e8:	4613      	mov	r3, r2
 80170ea:	009b      	lsls	r3, r3, #2
 80170ec:	4413      	add	r3, r2
 80170ee:	009b      	lsls	r3, r3, #2
 80170f0:	4a13      	ldr	r2, [pc, #76]	; (8017140 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80170f2:	4413      	add	r3, r2
 80170f4:	4299      	cmp	r1, r3
 80170f6:	d11c      	bne.n	8017132 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80170f8:	69bb      	ldr	r3, [r7, #24]
 80170fa:	3304      	adds	r3, #4
 80170fc:	4618      	mov	r0, r3
 80170fe:	f7fd ffab 	bl	8015058 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017102:	69bb      	ldr	r3, [r7, #24]
 8017104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017106:	4b0f      	ldr	r3, [pc, #60]	; (8017144 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	429a      	cmp	r2, r3
 801710c:	d903      	bls.n	8017116 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801710e:	69bb      	ldr	r3, [r7, #24]
 8017110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017112:	4a0c      	ldr	r2, [pc, #48]	; (8017144 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017114:	6013      	str	r3, [r2, #0]
 8017116:	69bb      	ldr	r3, [r7, #24]
 8017118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801711a:	4613      	mov	r3, r2
 801711c:	009b      	lsls	r3, r3, #2
 801711e:	4413      	add	r3, r2
 8017120:	009b      	lsls	r3, r3, #2
 8017122:	4a07      	ldr	r2, [pc, #28]	; (8017140 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017124:	441a      	add	r2, r3
 8017126:	69bb      	ldr	r3, [r7, #24]
 8017128:	3304      	adds	r3, #4
 801712a:	4619      	mov	r1, r3
 801712c:	4610      	mov	r0, r2
 801712e:	f7fd ff36 	bl	8014f9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017132:	bf00      	nop
 8017134:	3720      	adds	r7, #32
 8017136:	46bd      	mov	sp, r7
 8017138:	bd80      	pop	{r7, pc}
 801713a:	bf00      	nop
 801713c:	20000fe0 	.word	0x20000fe0
 8017140:	20000fe4 	.word	0x20000fe4
 8017144:	200014bc 	.word	0x200014bc

08017148 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017148:	b480      	push	{r7}
 801714a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801714c:	4b07      	ldr	r3, [pc, #28]	; (801716c <pvTaskIncrementMutexHeldCount+0x24>)
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d004      	beq.n	801715e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017154:	4b05      	ldr	r3, [pc, #20]	; (801716c <pvTaskIncrementMutexHeldCount+0x24>)
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801715a:	3201      	adds	r2, #1
 801715c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801715e:	4b03      	ldr	r3, [pc, #12]	; (801716c <pvTaskIncrementMutexHeldCount+0x24>)
 8017160:	681b      	ldr	r3, [r3, #0]
	}
 8017162:	4618      	mov	r0, r3
 8017164:	46bd      	mov	sp, r7
 8017166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801716a:	4770      	bx	lr
 801716c:	20000fe0 	.word	0x20000fe0

08017170 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b084      	sub	sp, #16
 8017174:	af00      	add	r7, sp, #0
 8017176:	6078      	str	r0, [r7, #4]
 8017178:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801717a:	4b21      	ldr	r3, [pc, #132]	; (8017200 <prvAddCurrentTaskToDelayedList+0x90>)
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017180:	4b20      	ldr	r3, [pc, #128]	; (8017204 <prvAddCurrentTaskToDelayedList+0x94>)
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	3304      	adds	r3, #4
 8017186:	4618      	mov	r0, r3
 8017188:	f7fd ff66 	bl	8015058 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017192:	d10a      	bne.n	80171aa <prvAddCurrentTaskToDelayedList+0x3a>
 8017194:	683b      	ldr	r3, [r7, #0]
 8017196:	2b00      	cmp	r3, #0
 8017198:	d007      	beq.n	80171aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801719a:	4b1a      	ldr	r3, [pc, #104]	; (8017204 <prvAddCurrentTaskToDelayedList+0x94>)
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	3304      	adds	r3, #4
 80171a0:	4619      	mov	r1, r3
 80171a2:	4819      	ldr	r0, [pc, #100]	; (8017208 <prvAddCurrentTaskToDelayedList+0x98>)
 80171a4:	f7fd fefb 	bl	8014f9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80171a8:	e026      	b.n	80171f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80171aa:	68fa      	ldr	r2, [r7, #12]
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	4413      	add	r3, r2
 80171b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80171b2:	4b14      	ldr	r3, [pc, #80]	; (8017204 <prvAddCurrentTaskToDelayedList+0x94>)
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	68ba      	ldr	r2, [r7, #8]
 80171b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80171ba:	68ba      	ldr	r2, [r7, #8]
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	429a      	cmp	r2, r3
 80171c0:	d209      	bcs.n	80171d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80171c2:	4b12      	ldr	r3, [pc, #72]	; (801720c <prvAddCurrentTaskToDelayedList+0x9c>)
 80171c4:	681a      	ldr	r2, [r3, #0]
 80171c6:	4b0f      	ldr	r3, [pc, #60]	; (8017204 <prvAddCurrentTaskToDelayedList+0x94>)
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	3304      	adds	r3, #4
 80171cc:	4619      	mov	r1, r3
 80171ce:	4610      	mov	r0, r2
 80171d0:	f7fd ff09 	bl	8014fe6 <vListInsert>
}
 80171d4:	e010      	b.n	80171f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80171d6:	4b0e      	ldr	r3, [pc, #56]	; (8017210 <prvAddCurrentTaskToDelayedList+0xa0>)
 80171d8:	681a      	ldr	r2, [r3, #0]
 80171da:	4b0a      	ldr	r3, [pc, #40]	; (8017204 <prvAddCurrentTaskToDelayedList+0x94>)
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	3304      	adds	r3, #4
 80171e0:	4619      	mov	r1, r3
 80171e2:	4610      	mov	r0, r2
 80171e4:	f7fd feff 	bl	8014fe6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80171e8:	4b0a      	ldr	r3, [pc, #40]	; (8017214 <prvAddCurrentTaskToDelayedList+0xa4>)
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	68ba      	ldr	r2, [r7, #8]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d202      	bcs.n	80171f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80171f2:	4a08      	ldr	r2, [pc, #32]	; (8017214 <prvAddCurrentTaskToDelayedList+0xa4>)
 80171f4:	68bb      	ldr	r3, [r7, #8]
 80171f6:	6013      	str	r3, [r2, #0]
}
 80171f8:	bf00      	nop
 80171fa:	3710      	adds	r7, #16
 80171fc:	46bd      	mov	sp, r7
 80171fe:	bd80      	pop	{r7, pc}
 8017200:	200014b8 	.word	0x200014b8
 8017204:	20000fe0 	.word	0x20000fe0
 8017208:	200014a0 	.word	0x200014a0
 801720c:	20001470 	.word	0x20001470
 8017210:	2000146c 	.word	0x2000146c
 8017214:	200014d4 	.word	0x200014d4

08017218 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017218:	b580      	push	{r7, lr}
 801721a:	b08a      	sub	sp, #40	; 0x28
 801721c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801721e:	2300      	movs	r3, #0
 8017220:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017222:	f000 fb07 	bl	8017834 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017226:	4b1c      	ldr	r3, [pc, #112]	; (8017298 <xTimerCreateTimerTask+0x80>)
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d021      	beq.n	8017272 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801722e:	2300      	movs	r3, #0
 8017230:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017232:	2300      	movs	r3, #0
 8017234:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017236:	1d3a      	adds	r2, r7, #4
 8017238:	f107 0108 	add.w	r1, r7, #8
 801723c:	f107 030c 	add.w	r3, r7, #12
 8017240:	4618      	mov	r0, r3
 8017242:	f7fd fe65 	bl	8014f10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017246:	6879      	ldr	r1, [r7, #4]
 8017248:	68bb      	ldr	r3, [r7, #8]
 801724a:	68fa      	ldr	r2, [r7, #12]
 801724c:	9202      	str	r2, [sp, #8]
 801724e:	9301      	str	r3, [sp, #4]
 8017250:	2302      	movs	r3, #2
 8017252:	9300      	str	r3, [sp, #0]
 8017254:	2300      	movs	r3, #0
 8017256:	460a      	mov	r2, r1
 8017258:	4910      	ldr	r1, [pc, #64]	; (801729c <xTimerCreateTimerTask+0x84>)
 801725a:	4811      	ldr	r0, [pc, #68]	; (80172a0 <xTimerCreateTimerTask+0x88>)
 801725c:	f7fe ff34 	bl	80160c8 <xTaskCreateStatic>
 8017260:	4603      	mov	r3, r0
 8017262:	4a10      	ldr	r2, [pc, #64]	; (80172a4 <xTimerCreateTimerTask+0x8c>)
 8017264:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017266:	4b0f      	ldr	r3, [pc, #60]	; (80172a4 <xTimerCreateTimerTask+0x8c>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d001      	beq.n	8017272 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801726e:	2301      	movs	r3, #1
 8017270:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017272:	697b      	ldr	r3, [r7, #20]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d10a      	bne.n	801728e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801727c:	f383 8811 	msr	BASEPRI, r3
 8017280:	f3bf 8f6f 	isb	sy
 8017284:	f3bf 8f4f 	dsb	sy
 8017288:	613b      	str	r3, [r7, #16]
}
 801728a:	bf00      	nop
 801728c:	e7fe      	b.n	801728c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801728e:	697b      	ldr	r3, [r7, #20]
}
 8017290:	4618      	mov	r0, r3
 8017292:	3718      	adds	r7, #24
 8017294:	46bd      	mov	sp, r7
 8017296:	bd80      	pop	{r7, pc}
 8017298:	20001510 	.word	0x20001510
 801729c:	08020aa8 	.word	0x08020aa8
 80172a0:	080173dd 	.word	0x080173dd
 80172a4:	20001514 	.word	0x20001514

080172a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80172a8:	b580      	push	{r7, lr}
 80172aa:	b08a      	sub	sp, #40	; 0x28
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	60f8      	str	r0, [r7, #12]
 80172b0:	60b9      	str	r1, [r7, #8]
 80172b2:	607a      	str	r2, [r7, #4]
 80172b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80172b6:	2300      	movs	r3, #0
 80172b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d10a      	bne.n	80172d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80172c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172c4:	f383 8811 	msr	BASEPRI, r3
 80172c8:	f3bf 8f6f 	isb	sy
 80172cc:	f3bf 8f4f 	dsb	sy
 80172d0:	623b      	str	r3, [r7, #32]
}
 80172d2:	bf00      	nop
 80172d4:	e7fe      	b.n	80172d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80172d6:	4b1a      	ldr	r3, [pc, #104]	; (8017340 <xTimerGenericCommand+0x98>)
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d02a      	beq.n	8017334 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80172de:	68bb      	ldr	r3, [r7, #8]
 80172e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80172ea:	68bb      	ldr	r3, [r7, #8]
 80172ec:	2b05      	cmp	r3, #5
 80172ee:	dc18      	bgt.n	8017322 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80172f0:	f7ff fdb4 	bl	8016e5c <xTaskGetSchedulerState>
 80172f4:	4603      	mov	r3, r0
 80172f6:	2b02      	cmp	r3, #2
 80172f8:	d109      	bne.n	801730e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80172fa:	4b11      	ldr	r3, [pc, #68]	; (8017340 <xTimerGenericCommand+0x98>)
 80172fc:	6818      	ldr	r0, [r3, #0]
 80172fe:	f107 0110 	add.w	r1, r7, #16
 8017302:	2300      	movs	r3, #0
 8017304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017306:	f7fe f879 	bl	80153fc <xQueueGenericSend>
 801730a:	6278      	str	r0, [r7, #36]	; 0x24
 801730c:	e012      	b.n	8017334 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801730e:	4b0c      	ldr	r3, [pc, #48]	; (8017340 <xTimerGenericCommand+0x98>)
 8017310:	6818      	ldr	r0, [r3, #0]
 8017312:	f107 0110 	add.w	r1, r7, #16
 8017316:	2300      	movs	r3, #0
 8017318:	2200      	movs	r2, #0
 801731a:	f7fe f86f 	bl	80153fc <xQueueGenericSend>
 801731e:	6278      	str	r0, [r7, #36]	; 0x24
 8017320:	e008      	b.n	8017334 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017322:	4b07      	ldr	r3, [pc, #28]	; (8017340 <xTimerGenericCommand+0x98>)
 8017324:	6818      	ldr	r0, [r3, #0]
 8017326:	f107 0110 	add.w	r1, r7, #16
 801732a:	2300      	movs	r3, #0
 801732c:	683a      	ldr	r2, [r7, #0]
 801732e:	f7fe f963 	bl	80155f8 <xQueueGenericSendFromISR>
 8017332:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017336:	4618      	mov	r0, r3
 8017338:	3728      	adds	r7, #40	; 0x28
 801733a:	46bd      	mov	sp, r7
 801733c:	bd80      	pop	{r7, pc}
 801733e:	bf00      	nop
 8017340:	20001510 	.word	0x20001510

08017344 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017344:	b580      	push	{r7, lr}
 8017346:	b088      	sub	sp, #32
 8017348:	af02      	add	r7, sp, #8
 801734a:	6078      	str	r0, [r7, #4]
 801734c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801734e:	4b22      	ldr	r3, [pc, #136]	; (80173d8 <prvProcessExpiredTimer+0x94>)
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	68db      	ldr	r3, [r3, #12]
 8017354:	68db      	ldr	r3, [r3, #12]
 8017356:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017358:	697b      	ldr	r3, [r7, #20]
 801735a:	3304      	adds	r3, #4
 801735c:	4618      	mov	r0, r3
 801735e:	f7fd fe7b 	bl	8015058 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017362:	697b      	ldr	r3, [r7, #20]
 8017364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017368:	f003 0304 	and.w	r3, r3, #4
 801736c:	2b00      	cmp	r3, #0
 801736e:	d022      	beq.n	80173b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017370:	697b      	ldr	r3, [r7, #20]
 8017372:	699a      	ldr	r2, [r3, #24]
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	18d1      	adds	r1, r2, r3
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	683a      	ldr	r2, [r7, #0]
 801737c:	6978      	ldr	r0, [r7, #20]
 801737e:	f000 f8d1 	bl	8017524 <prvInsertTimerInActiveList>
 8017382:	4603      	mov	r3, r0
 8017384:	2b00      	cmp	r3, #0
 8017386:	d01f      	beq.n	80173c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017388:	2300      	movs	r3, #0
 801738a:	9300      	str	r3, [sp, #0]
 801738c:	2300      	movs	r3, #0
 801738e:	687a      	ldr	r2, [r7, #4]
 8017390:	2100      	movs	r1, #0
 8017392:	6978      	ldr	r0, [r7, #20]
 8017394:	f7ff ff88 	bl	80172a8 <xTimerGenericCommand>
 8017398:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801739a:	693b      	ldr	r3, [r7, #16]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d113      	bne.n	80173c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80173a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173a4:	f383 8811 	msr	BASEPRI, r3
 80173a8:	f3bf 8f6f 	isb	sy
 80173ac:	f3bf 8f4f 	dsb	sy
 80173b0:	60fb      	str	r3, [r7, #12]
}
 80173b2:	bf00      	nop
 80173b4:	e7fe      	b.n	80173b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80173b6:	697b      	ldr	r3, [r7, #20]
 80173b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80173bc:	f023 0301 	bic.w	r3, r3, #1
 80173c0:	b2da      	uxtb	r2, r3
 80173c2:	697b      	ldr	r3, [r7, #20]
 80173c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80173c8:	697b      	ldr	r3, [r7, #20]
 80173ca:	6a1b      	ldr	r3, [r3, #32]
 80173cc:	6978      	ldr	r0, [r7, #20]
 80173ce:	4798      	blx	r3
}
 80173d0:	bf00      	nop
 80173d2:	3718      	adds	r7, #24
 80173d4:	46bd      	mov	sp, r7
 80173d6:	bd80      	pop	{r7, pc}
 80173d8:	20001508 	.word	0x20001508

080173dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	b084      	sub	sp, #16
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80173e4:	f107 0308 	add.w	r3, r7, #8
 80173e8:	4618      	mov	r0, r3
 80173ea:	f000 f857 	bl	801749c <prvGetNextExpireTime>
 80173ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	4619      	mov	r1, r3
 80173f4:	68f8      	ldr	r0, [r7, #12]
 80173f6:	f000 f803 	bl	8017400 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80173fa:	f000 f8d5 	bl	80175a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80173fe:	e7f1      	b.n	80173e4 <prvTimerTask+0x8>

08017400 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017400:	b580      	push	{r7, lr}
 8017402:	b084      	sub	sp, #16
 8017404:	af00      	add	r7, sp, #0
 8017406:	6078      	str	r0, [r7, #4]
 8017408:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801740a:	f7ff f92b 	bl	8016664 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801740e:	f107 0308 	add.w	r3, r7, #8
 8017412:	4618      	mov	r0, r3
 8017414:	f000 f866 	bl	80174e4 <prvSampleTimeNow>
 8017418:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801741a:	68bb      	ldr	r3, [r7, #8]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d130      	bne.n	8017482 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017420:	683b      	ldr	r3, [r7, #0]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d10a      	bne.n	801743c <prvProcessTimerOrBlockTask+0x3c>
 8017426:	687a      	ldr	r2, [r7, #4]
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	429a      	cmp	r2, r3
 801742c:	d806      	bhi.n	801743c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801742e:	f7ff f927 	bl	8016680 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017432:	68f9      	ldr	r1, [r7, #12]
 8017434:	6878      	ldr	r0, [r7, #4]
 8017436:	f7ff ff85 	bl	8017344 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801743a:	e024      	b.n	8017486 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801743c:	683b      	ldr	r3, [r7, #0]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d008      	beq.n	8017454 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017442:	4b13      	ldr	r3, [pc, #76]	; (8017490 <prvProcessTimerOrBlockTask+0x90>)
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d101      	bne.n	8017450 <prvProcessTimerOrBlockTask+0x50>
 801744c:	2301      	movs	r3, #1
 801744e:	e000      	b.n	8017452 <prvProcessTimerOrBlockTask+0x52>
 8017450:	2300      	movs	r3, #0
 8017452:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017454:	4b0f      	ldr	r3, [pc, #60]	; (8017494 <prvProcessTimerOrBlockTask+0x94>)
 8017456:	6818      	ldr	r0, [r3, #0]
 8017458:	687a      	ldr	r2, [r7, #4]
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	1ad3      	subs	r3, r2, r3
 801745e:	683a      	ldr	r2, [r7, #0]
 8017460:	4619      	mov	r1, r3
 8017462:	f7fe fdfd 	bl	8016060 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017466:	f7ff f90b 	bl	8016680 <xTaskResumeAll>
 801746a:	4603      	mov	r3, r0
 801746c:	2b00      	cmp	r3, #0
 801746e:	d10a      	bne.n	8017486 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017470:	4b09      	ldr	r3, [pc, #36]	; (8017498 <prvProcessTimerOrBlockTask+0x98>)
 8017472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017476:	601a      	str	r2, [r3, #0]
 8017478:	f3bf 8f4f 	dsb	sy
 801747c:	f3bf 8f6f 	isb	sy
}
 8017480:	e001      	b.n	8017486 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017482:	f7ff f8fd 	bl	8016680 <xTaskResumeAll>
}
 8017486:	bf00      	nop
 8017488:	3710      	adds	r7, #16
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}
 801748e:	bf00      	nop
 8017490:	2000150c 	.word	0x2000150c
 8017494:	20001510 	.word	0x20001510
 8017498:	e000ed04 	.word	0xe000ed04

0801749c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801749c:	b480      	push	{r7}
 801749e:	b085      	sub	sp, #20
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80174a4:	4b0e      	ldr	r3, [pc, #56]	; (80174e0 <prvGetNextExpireTime+0x44>)
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d101      	bne.n	80174b2 <prvGetNextExpireTime+0x16>
 80174ae:	2201      	movs	r2, #1
 80174b0:	e000      	b.n	80174b4 <prvGetNextExpireTime+0x18>
 80174b2:	2200      	movs	r2, #0
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d105      	bne.n	80174cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80174c0:	4b07      	ldr	r3, [pc, #28]	; (80174e0 <prvGetNextExpireTime+0x44>)
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	68db      	ldr	r3, [r3, #12]
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	60fb      	str	r3, [r7, #12]
 80174ca:	e001      	b.n	80174d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80174cc:	2300      	movs	r3, #0
 80174ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80174d0:	68fb      	ldr	r3, [r7, #12]
}
 80174d2:	4618      	mov	r0, r3
 80174d4:	3714      	adds	r7, #20
 80174d6:	46bd      	mov	sp, r7
 80174d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174dc:	4770      	bx	lr
 80174de:	bf00      	nop
 80174e0:	20001508 	.word	0x20001508

080174e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b084      	sub	sp, #16
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80174ec:	f7ff f966 	bl	80167bc <xTaskGetTickCount>
 80174f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80174f2:	4b0b      	ldr	r3, [pc, #44]	; (8017520 <prvSampleTimeNow+0x3c>)
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	68fa      	ldr	r2, [r7, #12]
 80174f8:	429a      	cmp	r2, r3
 80174fa:	d205      	bcs.n	8017508 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80174fc:	f000 f936 	bl	801776c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	2201      	movs	r2, #1
 8017504:	601a      	str	r2, [r3, #0]
 8017506:	e002      	b.n	801750e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	2200      	movs	r2, #0
 801750c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801750e:	4a04      	ldr	r2, [pc, #16]	; (8017520 <prvSampleTimeNow+0x3c>)
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017514:	68fb      	ldr	r3, [r7, #12]
}
 8017516:	4618      	mov	r0, r3
 8017518:	3710      	adds	r7, #16
 801751a:	46bd      	mov	sp, r7
 801751c:	bd80      	pop	{r7, pc}
 801751e:	bf00      	nop
 8017520:	20001518 	.word	0x20001518

08017524 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017524:	b580      	push	{r7, lr}
 8017526:	b086      	sub	sp, #24
 8017528:	af00      	add	r7, sp, #0
 801752a:	60f8      	str	r0, [r7, #12]
 801752c:	60b9      	str	r1, [r7, #8]
 801752e:	607a      	str	r2, [r7, #4]
 8017530:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017532:	2300      	movs	r3, #0
 8017534:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	68ba      	ldr	r2, [r7, #8]
 801753a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	68fa      	ldr	r2, [r7, #12]
 8017540:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017542:	68ba      	ldr	r2, [r7, #8]
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	429a      	cmp	r2, r3
 8017548:	d812      	bhi.n	8017570 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801754a:	687a      	ldr	r2, [r7, #4]
 801754c:	683b      	ldr	r3, [r7, #0]
 801754e:	1ad2      	subs	r2, r2, r3
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	699b      	ldr	r3, [r3, #24]
 8017554:	429a      	cmp	r2, r3
 8017556:	d302      	bcc.n	801755e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017558:	2301      	movs	r3, #1
 801755a:	617b      	str	r3, [r7, #20]
 801755c:	e01b      	b.n	8017596 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801755e:	4b10      	ldr	r3, [pc, #64]	; (80175a0 <prvInsertTimerInActiveList+0x7c>)
 8017560:	681a      	ldr	r2, [r3, #0]
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	3304      	adds	r3, #4
 8017566:	4619      	mov	r1, r3
 8017568:	4610      	mov	r0, r2
 801756a:	f7fd fd3c 	bl	8014fe6 <vListInsert>
 801756e:	e012      	b.n	8017596 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017570:	687a      	ldr	r2, [r7, #4]
 8017572:	683b      	ldr	r3, [r7, #0]
 8017574:	429a      	cmp	r2, r3
 8017576:	d206      	bcs.n	8017586 <prvInsertTimerInActiveList+0x62>
 8017578:	68ba      	ldr	r2, [r7, #8]
 801757a:	683b      	ldr	r3, [r7, #0]
 801757c:	429a      	cmp	r2, r3
 801757e:	d302      	bcc.n	8017586 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017580:	2301      	movs	r3, #1
 8017582:	617b      	str	r3, [r7, #20]
 8017584:	e007      	b.n	8017596 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017586:	4b07      	ldr	r3, [pc, #28]	; (80175a4 <prvInsertTimerInActiveList+0x80>)
 8017588:	681a      	ldr	r2, [r3, #0]
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	3304      	adds	r3, #4
 801758e:	4619      	mov	r1, r3
 8017590:	4610      	mov	r0, r2
 8017592:	f7fd fd28 	bl	8014fe6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017596:	697b      	ldr	r3, [r7, #20]
}
 8017598:	4618      	mov	r0, r3
 801759a:	3718      	adds	r7, #24
 801759c:	46bd      	mov	sp, r7
 801759e:	bd80      	pop	{r7, pc}
 80175a0:	2000150c 	.word	0x2000150c
 80175a4:	20001508 	.word	0x20001508

080175a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b08e      	sub	sp, #56	; 0x38
 80175ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80175ae:	e0ca      	b.n	8017746 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	da18      	bge.n	80175e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80175b6:	1d3b      	adds	r3, r7, #4
 80175b8:	3304      	adds	r3, #4
 80175ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80175bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d10a      	bne.n	80175d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80175c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175c6:	f383 8811 	msr	BASEPRI, r3
 80175ca:	f3bf 8f6f 	isb	sy
 80175ce:	f3bf 8f4f 	dsb	sy
 80175d2:	61fb      	str	r3, [r7, #28]
}
 80175d4:	bf00      	nop
 80175d6:	e7fe      	b.n	80175d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80175d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175de:	6850      	ldr	r0, [r2, #4]
 80175e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175e2:	6892      	ldr	r2, [r2, #8]
 80175e4:	4611      	mov	r1, r2
 80175e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	f2c0 80aa 	blt.w	8017744 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80175f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f6:	695b      	ldr	r3, [r3, #20]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d004      	beq.n	8017606 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80175fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175fe:	3304      	adds	r3, #4
 8017600:	4618      	mov	r0, r3
 8017602:	f7fd fd29 	bl	8015058 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017606:	463b      	mov	r3, r7
 8017608:	4618      	mov	r0, r3
 801760a:	f7ff ff6b 	bl	80174e4 <prvSampleTimeNow>
 801760e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	2b09      	cmp	r3, #9
 8017614:	f200 8097 	bhi.w	8017746 <prvProcessReceivedCommands+0x19e>
 8017618:	a201      	add	r2, pc, #4	; (adr r2, 8017620 <prvProcessReceivedCommands+0x78>)
 801761a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801761e:	bf00      	nop
 8017620:	08017649 	.word	0x08017649
 8017624:	08017649 	.word	0x08017649
 8017628:	08017649 	.word	0x08017649
 801762c:	080176bd 	.word	0x080176bd
 8017630:	080176d1 	.word	0x080176d1
 8017634:	0801771b 	.word	0x0801771b
 8017638:	08017649 	.word	0x08017649
 801763c:	08017649 	.word	0x08017649
 8017640:	080176bd 	.word	0x080176bd
 8017644:	080176d1 	.word	0x080176d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801764a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801764e:	f043 0301 	orr.w	r3, r3, #1
 8017652:	b2da      	uxtb	r2, r3
 8017654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801765a:	68ba      	ldr	r2, [r7, #8]
 801765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801765e:	699b      	ldr	r3, [r3, #24]
 8017660:	18d1      	adds	r1, r2, r3
 8017662:	68bb      	ldr	r3, [r7, #8]
 8017664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017668:	f7ff ff5c 	bl	8017524 <prvInsertTimerInActiveList>
 801766c:	4603      	mov	r3, r0
 801766e:	2b00      	cmp	r3, #0
 8017670:	d069      	beq.n	8017746 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017674:	6a1b      	ldr	r3, [r3, #32]
 8017676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017678:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801767c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017680:	f003 0304 	and.w	r3, r3, #4
 8017684:	2b00      	cmp	r3, #0
 8017686:	d05e      	beq.n	8017746 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017688:	68ba      	ldr	r2, [r7, #8]
 801768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801768c:	699b      	ldr	r3, [r3, #24]
 801768e:	441a      	add	r2, r3
 8017690:	2300      	movs	r3, #0
 8017692:	9300      	str	r3, [sp, #0]
 8017694:	2300      	movs	r3, #0
 8017696:	2100      	movs	r1, #0
 8017698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801769a:	f7ff fe05 	bl	80172a8 <xTimerGenericCommand>
 801769e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80176a0:	6a3b      	ldr	r3, [r7, #32]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d14f      	bne.n	8017746 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80176a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176aa:	f383 8811 	msr	BASEPRI, r3
 80176ae:	f3bf 8f6f 	isb	sy
 80176b2:	f3bf 8f4f 	dsb	sy
 80176b6:	61bb      	str	r3, [r7, #24]
}
 80176b8:	bf00      	nop
 80176ba:	e7fe      	b.n	80176ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80176bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80176c2:	f023 0301 	bic.w	r3, r3, #1
 80176c6:	b2da      	uxtb	r2, r3
 80176c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80176ce:	e03a      	b.n	8017746 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80176d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80176d6:	f043 0301 	orr.w	r3, r3, #1
 80176da:	b2da      	uxtb	r2, r3
 80176dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80176e2:	68ba      	ldr	r2, [r7, #8]
 80176e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80176e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ea:	699b      	ldr	r3, [r3, #24]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d10a      	bne.n	8017706 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80176f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f4:	f383 8811 	msr	BASEPRI, r3
 80176f8:	f3bf 8f6f 	isb	sy
 80176fc:	f3bf 8f4f 	dsb	sy
 8017700:	617b      	str	r3, [r7, #20]
}
 8017702:	bf00      	nop
 8017704:	e7fe      	b.n	8017704 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017708:	699a      	ldr	r2, [r3, #24]
 801770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801770c:	18d1      	adds	r1, r2, r3
 801770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017714:	f7ff ff06 	bl	8017524 <prvInsertTimerInActiveList>
					break;
 8017718:	e015      	b.n	8017746 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801771c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017720:	f003 0302 	and.w	r3, r3, #2
 8017724:	2b00      	cmp	r3, #0
 8017726:	d103      	bne.n	8017730 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8017728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801772a:	f000 fbe1 	bl	8017ef0 <vPortFree>
 801772e:	e00a      	b.n	8017746 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017736:	f023 0301 	bic.w	r3, r3, #1
 801773a:	b2da      	uxtb	r2, r3
 801773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801773e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017742:	e000      	b.n	8017746 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017744:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017746:	4b08      	ldr	r3, [pc, #32]	; (8017768 <prvProcessReceivedCommands+0x1c0>)
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	1d39      	adds	r1, r7, #4
 801774c:	2200      	movs	r2, #0
 801774e:	4618      	mov	r0, r3
 8017750:	f7fe f87a 	bl	8015848 <xQueueReceive>
 8017754:	4603      	mov	r3, r0
 8017756:	2b00      	cmp	r3, #0
 8017758:	f47f af2a 	bne.w	80175b0 <prvProcessReceivedCommands+0x8>
	}
}
 801775c:	bf00      	nop
 801775e:	bf00      	nop
 8017760:	3730      	adds	r7, #48	; 0x30
 8017762:	46bd      	mov	sp, r7
 8017764:	bd80      	pop	{r7, pc}
 8017766:	bf00      	nop
 8017768:	20001510 	.word	0x20001510

0801776c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801776c:	b580      	push	{r7, lr}
 801776e:	b088      	sub	sp, #32
 8017770:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017772:	e048      	b.n	8017806 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017774:	4b2d      	ldr	r3, [pc, #180]	; (801782c <prvSwitchTimerLists+0xc0>)
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	68db      	ldr	r3, [r3, #12]
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801777e:	4b2b      	ldr	r3, [pc, #172]	; (801782c <prvSwitchTimerLists+0xc0>)
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	68db      	ldr	r3, [r3, #12]
 8017784:	68db      	ldr	r3, [r3, #12]
 8017786:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	3304      	adds	r3, #4
 801778c:	4618      	mov	r0, r3
 801778e:	f7fd fc63 	bl	8015058 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	6a1b      	ldr	r3, [r3, #32]
 8017796:	68f8      	ldr	r0, [r7, #12]
 8017798:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80177a0:	f003 0304 	and.w	r3, r3, #4
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d02e      	beq.n	8017806 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	699b      	ldr	r3, [r3, #24]
 80177ac:	693a      	ldr	r2, [r7, #16]
 80177ae:	4413      	add	r3, r2
 80177b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80177b2:	68ba      	ldr	r2, [r7, #8]
 80177b4:	693b      	ldr	r3, [r7, #16]
 80177b6:	429a      	cmp	r2, r3
 80177b8:	d90e      	bls.n	80177d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	68ba      	ldr	r2, [r7, #8]
 80177be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	68fa      	ldr	r2, [r7, #12]
 80177c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80177c6:	4b19      	ldr	r3, [pc, #100]	; (801782c <prvSwitchTimerLists+0xc0>)
 80177c8:	681a      	ldr	r2, [r3, #0]
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	3304      	adds	r3, #4
 80177ce:	4619      	mov	r1, r3
 80177d0:	4610      	mov	r0, r2
 80177d2:	f7fd fc08 	bl	8014fe6 <vListInsert>
 80177d6:	e016      	b.n	8017806 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80177d8:	2300      	movs	r3, #0
 80177da:	9300      	str	r3, [sp, #0]
 80177dc:	2300      	movs	r3, #0
 80177de:	693a      	ldr	r2, [r7, #16]
 80177e0:	2100      	movs	r1, #0
 80177e2:	68f8      	ldr	r0, [r7, #12]
 80177e4:	f7ff fd60 	bl	80172a8 <xTimerGenericCommand>
 80177e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d10a      	bne.n	8017806 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80177f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177f4:	f383 8811 	msr	BASEPRI, r3
 80177f8:	f3bf 8f6f 	isb	sy
 80177fc:	f3bf 8f4f 	dsb	sy
 8017800:	603b      	str	r3, [r7, #0]
}
 8017802:	bf00      	nop
 8017804:	e7fe      	b.n	8017804 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017806:	4b09      	ldr	r3, [pc, #36]	; (801782c <prvSwitchTimerLists+0xc0>)
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d1b1      	bne.n	8017774 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017810:	4b06      	ldr	r3, [pc, #24]	; (801782c <prvSwitchTimerLists+0xc0>)
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017816:	4b06      	ldr	r3, [pc, #24]	; (8017830 <prvSwitchTimerLists+0xc4>)
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	4a04      	ldr	r2, [pc, #16]	; (801782c <prvSwitchTimerLists+0xc0>)
 801781c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801781e:	4a04      	ldr	r2, [pc, #16]	; (8017830 <prvSwitchTimerLists+0xc4>)
 8017820:	697b      	ldr	r3, [r7, #20]
 8017822:	6013      	str	r3, [r2, #0]
}
 8017824:	bf00      	nop
 8017826:	3718      	adds	r7, #24
 8017828:	46bd      	mov	sp, r7
 801782a:	bd80      	pop	{r7, pc}
 801782c:	20001508 	.word	0x20001508
 8017830:	2000150c 	.word	0x2000150c

08017834 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017834:	b580      	push	{r7, lr}
 8017836:	b082      	sub	sp, #8
 8017838:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801783a:	f000 f96b 	bl	8017b14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801783e:	4b15      	ldr	r3, [pc, #84]	; (8017894 <prvCheckForValidListAndQueue+0x60>)
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d120      	bne.n	8017888 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017846:	4814      	ldr	r0, [pc, #80]	; (8017898 <prvCheckForValidListAndQueue+0x64>)
 8017848:	f7fd fb7c 	bl	8014f44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801784c:	4813      	ldr	r0, [pc, #76]	; (801789c <prvCheckForValidListAndQueue+0x68>)
 801784e:	f7fd fb79 	bl	8014f44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017852:	4b13      	ldr	r3, [pc, #76]	; (80178a0 <prvCheckForValidListAndQueue+0x6c>)
 8017854:	4a10      	ldr	r2, [pc, #64]	; (8017898 <prvCheckForValidListAndQueue+0x64>)
 8017856:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017858:	4b12      	ldr	r3, [pc, #72]	; (80178a4 <prvCheckForValidListAndQueue+0x70>)
 801785a:	4a10      	ldr	r2, [pc, #64]	; (801789c <prvCheckForValidListAndQueue+0x68>)
 801785c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801785e:	2300      	movs	r3, #0
 8017860:	9300      	str	r3, [sp, #0]
 8017862:	4b11      	ldr	r3, [pc, #68]	; (80178a8 <prvCheckForValidListAndQueue+0x74>)
 8017864:	4a11      	ldr	r2, [pc, #68]	; (80178ac <prvCheckForValidListAndQueue+0x78>)
 8017866:	2110      	movs	r1, #16
 8017868:	200a      	movs	r0, #10
 801786a:	f7fd fc87 	bl	801517c <xQueueGenericCreateStatic>
 801786e:	4603      	mov	r3, r0
 8017870:	4a08      	ldr	r2, [pc, #32]	; (8017894 <prvCheckForValidListAndQueue+0x60>)
 8017872:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017874:	4b07      	ldr	r3, [pc, #28]	; (8017894 <prvCheckForValidListAndQueue+0x60>)
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d005      	beq.n	8017888 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801787c:	4b05      	ldr	r3, [pc, #20]	; (8017894 <prvCheckForValidListAndQueue+0x60>)
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	490b      	ldr	r1, [pc, #44]	; (80178b0 <prvCheckForValidListAndQueue+0x7c>)
 8017882:	4618      	mov	r0, r3
 8017884:	f7fe fb98 	bl	8015fb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017888:	f000 f974 	bl	8017b74 <vPortExitCritical>
}
 801788c:	bf00      	nop
 801788e:	46bd      	mov	sp, r7
 8017890:	bd80      	pop	{r7, pc}
 8017892:	bf00      	nop
 8017894:	20001510 	.word	0x20001510
 8017898:	200014e0 	.word	0x200014e0
 801789c:	200014f4 	.word	0x200014f4
 80178a0:	20001508 	.word	0x20001508
 80178a4:	2000150c 	.word	0x2000150c
 80178a8:	200015bc 	.word	0x200015bc
 80178ac:	2000151c 	.word	0x2000151c
 80178b0:	08020ab0 	.word	0x08020ab0

080178b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80178b4:	b480      	push	{r7}
 80178b6:	b085      	sub	sp, #20
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	60f8      	str	r0, [r7, #12]
 80178bc:	60b9      	str	r1, [r7, #8]
 80178be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	3b04      	subs	r3, #4
 80178c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80178cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	3b04      	subs	r3, #4
 80178d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80178d4:	68bb      	ldr	r3, [r7, #8]
 80178d6:	f023 0201 	bic.w	r2, r3, #1
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	3b04      	subs	r3, #4
 80178e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80178e4:	4a0c      	ldr	r2, [pc, #48]	; (8017918 <pxPortInitialiseStack+0x64>)
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	3b14      	subs	r3, #20
 80178ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80178f0:	687a      	ldr	r2, [r7, #4]
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	3b04      	subs	r3, #4
 80178fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	f06f 0202 	mvn.w	r2, #2
 8017902:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	3b20      	subs	r3, #32
 8017908:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801790a:	68fb      	ldr	r3, [r7, #12]
}
 801790c:	4618      	mov	r0, r3
 801790e:	3714      	adds	r7, #20
 8017910:	46bd      	mov	sp, r7
 8017912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017916:	4770      	bx	lr
 8017918:	0801791d 	.word	0x0801791d

0801791c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801791c:	b480      	push	{r7}
 801791e:	b085      	sub	sp, #20
 8017920:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017922:	2300      	movs	r3, #0
 8017924:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017926:	4b12      	ldr	r3, [pc, #72]	; (8017970 <prvTaskExitError+0x54>)
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801792e:	d00a      	beq.n	8017946 <prvTaskExitError+0x2a>
	__asm volatile
 8017930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017934:	f383 8811 	msr	BASEPRI, r3
 8017938:	f3bf 8f6f 	isb	sy
 801793c:	f3bf 8f4f 	dsb	sy
 8017940:	60fb      	str	r3, [r7, #12]
}
 8017942:	bf00      	nop
 8017944:	e7fe      	b.n	8017944 <prvTaskExitError+0x28>
	__asm volatile
 8017946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801794a:	f383 8811 	msr	BASEPRI, r3
 801794e:	f3bf 8f6f 	isb	sy
 8017952:	f3bf 8f4f 	dsb	sy
 8017956:	60bb      	str	r3, [r7, #8]
}
 8017958:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801795a:	bf00      	nop
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	2b00      	cmp	r3, #0
 8017960:	d0fc      	beq.n	801795c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017962:	bf00      	nop
 8017964:	bf00      	nop
 8017966:	3714      	adds	r7, #20
 8017968:	46bd      	mov	sp, r7
 801796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796e:	4770      	bx	lr
 8017970:	20000168 	.word	0x20000168
	...

08017980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017980:	4b07      	ldr	r3, [pc, #28]	; (80179a0 <pxCurrentTCBConst2>)
 8017982:	6819      	ldr	r1, [r3, #0]
 8017984:	6808      	ldr	r0, [r1, #0]
 8017986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801798a:	f380 8809 	msr	PSP, r0
 801798e:	f3bf 8f6f 	isb	sy
 8017992:	f04f 0000 	mov.w	r0, #0
 8017996:	f380 8811 	msr	BASEPRI, r0
 801799a:	4770      	bx	lr
 801799c:	f3af 8000 	nop.w

080179a0 <pxCurrentTCBConst2>:
 80179a0:	20000fe0 	.word	0x20000fe0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80179a4:	bf00      	nop
 80179a6:	bf00      	nop

080179a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80179a8:	4808      	ldr	r0, [pc, #32]	; (80179cc <prvPortStartFirstTask+0x24>)
 80179aa:	6800      	ldr	r0, [r0, #0]
 80179ac:	6800      	ldr	r0, [r0, #0]
 80179ae:	f380 8808 	msr	MSP, r0
 80179b2:	f04f 0000 	mov.w	r0, #0
 80179b6:	f380 8814 	msr	CONTROL, r0
 80179ba:	b662      	cpsie	i
 80179bc:	b661      	cpsie	f
 80179be:	f3bf 8f4f 	dsb	sy
 80179c2:	f3bf 8f6f 	isb	sy
 80179c6:	df00      	svc	0
 80179c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80179ca:	bf00      	nop
 80179cc:	e000ed08 	.word	0xe000ed08

080179d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b086      	sub	sp, #24
 80179d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80179d6:	4b46      	ldr	r3, [pc, #280]	; (8017af0 <xPortStartScheduler+0x120>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	4a46      	ldr	r2, [pc, #280]	; (8017af4 <xPortStartScheduler+0x124>)
 80179dc:	4293      	cmp	r3, r2
 80179de:	d10a      	bne.n	80179f6 <xPortStartScheduler+0x26>
	__asm volatile
 80179e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179e4:	f383 8811 	msr	BASEPRI, r3
 80179e8:	f3bf 8f6f 	isb	sy
 80179ec:	f3bf 8f4f 	dsb	sy
 80179f0:	613b      	str	r3, [r7, #16]
}
 80179f2:	bf00      	nop
 80179f4:	e7fe      	b.n	80179f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80179f6:	4b3e      	ldr	r3, [pc, #248]	; (8017af0 <xPortStartScheduler+0x120>)
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	4a3f      	ldr	r2, [pc, #252]	; (8017af8 <xPortStartScheduler+0x128>)
 80179fc:	4293      	cmp	r3, r2
 80179fe:	d10a      	bne.n	8017a16 <xPortStartScheduler+0x46>
	__asm volatile
 8017a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a04:	f383 8811 	msr	BASEPRI, r3
 8017a08:	f3bf 8f6f 	isb	sy
 8017a0c:	f3bf 8f4f 	dsb	sy
 8017a10:	60fb      	str	r3, [r7, #12]
}
 8017a12:	bf00      	nop
 8017a14:	e7fe      	b.n	8017a14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017a16:	4b39      	ldr	r3, [pc, #228]	; (8017afc <xPortStartScheduler+0x12c>)
 8017a18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017a1a:	697b      	ldr	r3, [r7, #20]
 8017a1c:	781b      	ldrb	r3, [r3, #0]
 8017a1e:	b2db      	uxtb	r3, r3
 8017a20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017a22:	697b      	ldr	r3, [r7, #20]
 8017a24:	22ff      	movs	r2, #255	; 0xff
 8017a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017a28:	697b      	ldr	r3, [r7, #20]
 8017a2a:	781b      	ldrb	r3, [r3, #0]
 8017a2c:	b2db      	uxtb	r3, r3
 8017a2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017a30:	78fb      	ldrb	r3, [r7, #3]
 8017a32:	b2db      	uxtb	r3, r3
 8017a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017a38:	b2da      	uxtb	r2, r3
 8017a3a:	4b31      	ldr	r3, [pc, #196]	; (8017b00 <xPortStartScheduler+0x130>)
 8017a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017a3e:	4b31      	ldr	r3, [pc, #196]	; (8017b04 <xPortStartScheduler+0x134>)
 8017a40:	2207      	movs	r2, #7
 8017a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017a44:	e009      	b.n	8017a5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8017a46:	4b2f      	ldr	r3, [pc, #188]	; (8017b04 <xPortStartScheduler+0x134>)
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	3b01      	subs	r3, #1
 8017a4c:	4a2d      	ldr	r2, [pc, #180]	; (8017b04 <xPortStartScheduler+0x134>)
 8017a4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017a50:	78fb      	ldrb	r3, [r7, #3]
 8017a52:	b2db      	uxtb	r3, r3
 8017a54:	005b      	lsls	r3, r3, #1
 8017a56:	b2db      	uxtb	r3, r3
 8017a58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017a5a:	78fb      	ldrb	r3, [r7, #3]
 8017a5c:	b2db      	uxtb	r3, r3
 8017a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017a62:	2b80      	cmp	r3, #128	; 0x80
 8017a64:	d0ef      	beq.n	8017a46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017a66:	4b27      	ldr	r3, [pc, #156]	; (8017b04 <xPortStartScheduler+0x134>)
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	f1c3 0307 	rsb	r3, r3, #7
 8017a6e:	2b04      	cmp	r3, #4
 8017a70:	d00a      	beq.n	8017a88 <xPortStartScheduler+0xb8>
	__asm volatile
 8017a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a76:	f383 8811 	msr	BASEPRI, r3
 8017a7a:	f3bf 8f6f 	isb	sy
 8017a7e:	f3bf 8f4f 	dsb	sy
 8017a82:	60bb      	str	r3, [r7, #8]
}
 8017a84:	bf00      	nop
 8017a86:	e7fe      	b.n	8017a86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017a88:	4b1e      	ldr	r3, [pc, #120]	; (8017b04 <xPortStartScheduler+0x134>)
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	021b      	lsls	r3, r3, #8
 8017a8e:	4a1d      	ldr	r2, [pc, #116]	; (8017b04 <xPortStartScheduler+0x134>)
 8017a90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017a92:	4b1c      	ldr	r3, [pc, #112]	; (8017b04 <xPortStartScheduler+0x134>)
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8017a9a:	4a1a      	ldr	r2, [pc, #104]	; (8017b04 <xPortStartScheduler+0x134>)
 8017a9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	b2da      	uxtb	r2, r3
 8017aa2:	697b      	ldr	r3, [r7, #20]
 8017aa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017aa6:	4b18      	ldr	r3, [pc, #96]	; (8017b08 <xPortStartScheduler+0x138>)
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	4a17      	ldr	r2, [pc, #92]	; (8017b08 <xPortStartScheduler+0x138>)
 8017aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017ab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017ab2:	4b15      	ldr	r3, [pc, #84]	; (8017b08 <xPortStartScheduler+0x138>)
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	4a14      	ldr	r2, [pc, #80]	; (8017b08 <xPortStartScheduler+0x138>)
 8017ab8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8017abc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017abe:	f000 f8dd 	bl	8017c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017ac2:	4b12      	ldr	r3, [pc, #72]	; (8017b0c <xPortStartScheduler+0x13c>)
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8017ac8:	f000 f8fc 	bl	8017cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017acc:	4b10      	ldr	r3, [pc, #64]	; (8017b10 <xPortStartScheduler+0x140>)
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	4a0f      	ldr	r2, [pc, #60]	; (8017b10 <xPortStartScheduler+0x140>)
 8017ad2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017ad6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017ad8:	f7ff ff66 	bl	80179a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017adc:	f7fe ff38 	bl	8016950 <vTaskSwitchContext>
	prvTaskExitError();
 8017ae0:	f7ff ff1c 	bl	801791c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017ae4:	2300      	movs	r3, #0
}
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	3718      	adds	r7, #24
 8017aea:	46bd      	mov	sp, r7
 8017aec:	bd80      	pop	{r7, pc}
 8017aee:	bf00      	nop
 8017af0:	e000ed00 	.word	0xe000ed00
 8017af4:	410fc271 	.word	0x410fc271
 8017af8:	410fc270 	.word	0x410fc270
 8017afc:	e000e400 	.word	0xe000e400
 8017b00:	2000160c 	.word	0x2000160c
 8017b04:	20001610 	.word	0x20001610
 8017b08:	e000ed20 	.word	0xe000ed20
 8017b0c:	20000168 	.word	0x20000168
 8017b10:	e000ef34 	.word	0xe000ef34

08017b14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017b14:	b480      	push	{r7}
 8017b16:	b083      	sub	sp, #12
 8017b18:	af00      	add	r7, sp, #0
	__asm volatile
 8017b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b1e:	f383 8811 	msr	BASEPRI, r3
 8017b22:	f3bf 8f6f 	isb	sy
 8017b26:	f3bf 8f4f 	dsb	sy
 8017b2a:	607b      	str	r3, [r7, #4]
}
 8017b2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017b2e:	4b0f      	ldr	r3, [pc, #60]	; (8017b6c <vPortEnterCritical+0x58>)
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	3301      	adds	r3, #1
 8017b34:	4a0d      	ldr	r2, [pc, #52]	; (8017b6c <vPortEnterCritical+0x58>)
 8017b36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017b38:	4b0c      	ldr	r3, [pc, #48]	; (8017b6c <vPortEnterCritical+0x58>)
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	2b01      	cmp	r3, #1
 8017b3e:	d10f      	bne.n	8017b60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017b40:	4b0b      	ldr	r3, [pc, #44]	; (8017b70 <vPortEnterCritical+0x5c>)
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	b2db      	uxtb	r3, r3
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d00a      	beq.n	8017b60 <vPortEnterCritical+0x4c>
	__asm volatile
 8017b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b4e:	f383 8811 	msr	BASEPRI, r3
 8017b52:	f3bf 8f6f 	isb	sy
 8017b56:	f3bf 8f4f 	dsb	sy
 8017b5a:	603b      	str	r3, [r7, #0]
}
 8017b5c:	bf00      	nop
 8017b5e:	e7fe      	b.n	8017b5e <vPortEnterCritical+0x4a>
	}
}
 8017b60:	bf00      	nop
 8017b62:	370c      	adds	r7, #12
 8017b64:	46bd      	mov	sp, r7
 8017b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b6a:	4770      	bx	lr
 8017b6c:	20000168 	.word	0x20000168
 8017b70:	e000ed04 	.word	0xe000ed04

08017b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017b74:	b480      	push	{r7}
 8017b76:	b083      	sub	sp, #12
 8017b78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017b7a:	4b12      	ldr	r3, [pc, #72]	; (8017bc4 <vPortExitCritical+0x50>)
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d10a      	bne.n	8017b98 <vPortExitCritical+0x24>
	__asm volatile
 8017b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b86:	f383 8811 	msr	BASEPRI, r3
 8017b8a:	f3bf 8f6f 	isb	sy
 8017b8e:	f3bf 8f4f 	dsb	sy
 8017b92:	607b      	str	r3, [r7, #4]
}
 8017b94:	bf00      	nop
 8017b96:	e7fe      	b.n	8017b96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017b98:	4b0a      	ldr	r3, [pc, #40]	; (8017bc4 <vPortExitCritical+0x50>)
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	3b01      	subs	r3, #1
 8017b9e:	4a09      	ldr	r2, [pc, #36]	; (8017bc4 <vPortExitCritical+0x50>)
 8017ba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017ba2:	4b08      	ldr	r3, [pc, #32]	; (8017bc4 <vPortExitCritical+0x50>)
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d105      	bne.n	8017bb6 <vPortExitCritical+0x42>
 8017baa:	2300      	movs	r3, #0
 8017bac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017bae:	683b      	ldr	r3, [r7, #0]
 8017bb0:	f383 8811 	msr	BASEPRI, r3
}
 8017bb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017bb6:	bf00      	nop
 8017bb8:	370c      	adds	r7, #12
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc0:	4770      	bx	lr
 8017bc2:	bf00      	nop
 8017bc4:	20000168 	.word	0x20000168
	...

08017bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017bd0:	f3ef 8009 	mrs	r0, PSP
 8017bd4:	f3bf 8f6f 	isb	sy
 8017bd8:	4b15      	ldr	r3, [pc, #84]	; (8017c30 <pxCurrentTCBConst>)
 8017bda:	681a      	ldr	r2, [r3, #0]
 8017bdc:	f01e 0f10 	tst.w	lr, #16
 8017be0:	bf08      	it	eq
 8017be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bea:	6010      	str	r0, [r2, #0]
 8017bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017bf4:	f380 8811 	msr	BASEPRI, r0
 8017bf8:	f3bf 8f4f 	dsb	sy
 8017bfc:	f3bf 8f6f 	isb	sy
 8017c00:	f7fe fea6 	bl	8016950 <vTaskSwitchContext>
 8017c04:	f04f 0000 	mov.w	r0, #0
 8017c08:	f380 8811 	msr	BASEPRI, r0
 8017c0c:	bc09      	pop	{r0, r3}
 8017c0e:	6819      	ldr	r1, [r3, #0]
 8017c10:	6808      	ldr	r0, [r1, #0]
 8017c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c16:	f01e 0f10 	tst.w	lr, #16
 8017c1a:	bf08      	it	eq
 8017c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017c20:	f380 8809 	msr	PSP, r0
 8017c24:	f3bf 8f6f 	isb	sy
 8017c28:	4770      	bx	lr
 8017c2a:	bf00      	nop
 8017c2c:	f3af 8000 	nop.w

08017c30 <pxCurrentTCBConst>:
 8017c30:	20000fe0 	.word	0x20000fe0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017c34:	bf00      	nop
 8017c36:	bf00      	nop

08017c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b082      	sub	sp, #8
 8017c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8017c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c42:	f383 8811 	msr	BASEPRI, r3
 8017c46:	f3bf 8f6f 	isb	sy
 8017c4a:	f3bf 8f4f 	dsb	sy
 8017c4e:	607b      	str	r3, [r7, #4]
}
 8017c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017c52:	f7fe fdc3 	bl	80167dc <xTaskIncrementTick>
 8017c56:	4603      	mov	r3, r0
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d003      	beq.n	8017c64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017c5c:	4b06      	ldr	r3, [pc, #24]	; (8017c78 <xPortSysTickHandler+0x40>)
 8017c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c62:	601a      	str	r2, [r3, #0]
 8017c64:	2300      	movs	r3, #0
 8017c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017c68:	683b      	ldr	r3, [r7, #0]
 8017c6a:	f383 8811 	msr	BASEPRI, r3
}
 8017c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017c70:	bf00      	nop
 8017c72:	3708      	adds	r7, #8
 8017c74:	46bd      	mov	sp, r7
 8017c76:	bd80      	pop	{r7, pc}
 8017c78:	e000ed04 	.word	0xe000ed04

08017c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017c7c:	b480      	push	{r7}
 8017c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017c80:	4b0b      	ldr	r3, [pc, #44]	; (8017cb0 <vPortSetupTimerInterrupt+0x34>)
 8017c82:	2200      	movs	r2, #0
 8017c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017c86:	4b0b      	ldr	r3, [pc, #44]	; (8017cb4 <vPortSetupTimerInterrupt+0x38>)
 8017c88:	2200      	movs	r2, #0
 8017c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017c8c:	4b0a      	ldr	r3, [pc, #40]	; (8017cb8 <vPortSetupTimerInterrupt+0x3c>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	4a0a      	ldr	r2, [pc, #40]	; (8017cbc <vPortSetupTimerInterrupt+0x40>)
 8017c92:	fba2 2303 	umull	r2, r3, r2, r3
 8017c96:	099b      	lsrs	r3, r3, #6
 8017c98:	4a09      	ldr	r2, [pc, #36]	; (8017cc0 <vPortSetupTimerInterrupt+0x44>)
 8017c9a:	3b01      	subs	r3, #1
 8017c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017c9e:	4b04      	ldr	r3, [pc, #16]	; (8017cb0 <vPortSetupTimerInterrupt+0x34>)
 8017ca0:	2207      	movs	r2, #7
 8017ca2:	601a      	str	r2, [r3, #0]
}
 8017ca4:	bf00      	nop
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cac:	4770      	bx	lr
 8017cae:	bf00      	nop
 8017cb0:	e000e010 	.word	0xe000e010
 8017cb4:	e000e018 	.word	0xe000e018
 8017cb8:	20000000 	.word	0x20000000
 8017cbc:	10624dd3 	.word	0x10624dd3
 8017cc0:	e000e014 	.word	0xe000e014

08017cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017cd4 <vPortEnableVFP+0x10>
 8017cc8:	6801      	ldr	r1, [r0, #0]
 8017cca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8017cce:	6001      	str	r1, [r0, #0]
 8017cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017cd2:	bf00      	nop
 8017cd4:	e000ed88 	.word	0xe000ed88

08017cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017cd8:	b480      	push	{r7}
 8017cda:	b085      	sub	sp, #20
 8017cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017cde:	f3ef 8305 	mrs	r3, IPSR
 8017ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	2b0f      	cmp	r3, #15
 8017ce8:	d914      	bls.n	8017d14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017cea:	4a17      	ldr	r2, [pc, #92]	; (8017d48 <vPortValidateInterruptPriority+0x70>)
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	4413      	add	r3, r2
 8017cf0:	781b      	ldrb	r3, [r3, #0]
 8017cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017cf4:	4b15      	ldr	r3, [pc, #84]	; (8017d4c <vPortValidateInterruptPriority+0x74>)
 8017cf6:	781b      	ldrb	r3, [r3, #0]
 8017cf8:	7afa      	ldrb	r2, [r7, #11]
 8017cfa:	429a      	cmp	r2, r3
 8017cfc:	d20a      	bcs.n	8017d14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8017cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d02:	f383 8811 	msr	BASEPRI, r3
 8017d06:	f3bf 8f6f 	isb	sy
 8017d0a:	f3bf 8f4f 	dsb	sy
 8017d0e:	607b      	str	r3, [r7, #4]
}
 8017d10:	bf00      	nop
 8017d12:	e7fe      	b.n	8017d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017d14:	4b0e      	ldr	r3, [pc, #56]	; (8017d50 <vPortValidateInterruptPriority+0x78>)
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017d1c:	4b0d      	ldr	r3, [pc, #52]	; (8017d54 <vPortValidateInterruptPriority+0x7c>)
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	429a      	cmp	r2, r3
 8017d22:	d90a      	bls.n	8017d3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8017d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d28:	f383 8811 	msr	BASEPRI, r3
 8017d2c:	f3bf 8f6f 	isb	sy
 8017d30:	f3bf 8f4f 	dsb	sy
 8017d34:	603b      	str	r3, [r7, #0]
}
 8017d36:	bf00      	nop
 8017d38:	e7fe      	b.n	8017d38 <vPortValidateInterruptPriority+0x60>
	}
 8017d3a:	bf00      	nop
 8017d3c:	3714      	adds	r7, #20
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d44:	4770      	bx	lr
 8017d46:	bf00      	nop
 8017d48:	e000e3f0 	.word	0xe000e3f0
 8017d4c:	2000160c 	.word	0x2000160c
 8017d50:	e000ed0c 	.word	0xe000ed0c
 8017d54:	20001610 	.word	0x20001610

08017d58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	b08a      	sub	sp, #40	; 0x28
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017d60:	2300      	movs	r3, #0
 8017d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017d64:	f7fe fc7e 	bl	8016664 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017d68:	4b5b      	ldr	r3, [pc, #364]	; (8017ed8 <pvPortMalloc+0x180>)
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d101      	bne.n	8017d74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017d70:	f000 f920 	bl	8017fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017d74:	4b59      	ldr	r3, [pc, #356]	; (8017edc <pvPortMalloc+0x184>)
 8017d76:	681a      	ldr	r2, [r3, #0]
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	4013      	ands	r3, r2
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	f040 8093 	bne.w	8017ea8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d01d      	beq.n	8017dc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8017d88:	2208      	movs	r2, #8
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	4413      	add	r3, r2
 8017d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	f003 0307 	and.w	r3, r3, #7
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d014      	beq.n	8017dc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	f023 0307 	bic.w	r3, r3, #7
 8017da0:	3308      	adds	r3, #8
 8017da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	f003 0307 	and.w	r3, r3, #7
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d00a      	beq.n	8017dc4 <pvPortMalloc+0x6c>
	__asm volatile
 8017dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017db2:	f383 8811 	msr	BASEPRI, r3
 8017db6:	f3bf 8f6f 	isb	sy
 8017dba:	f3bf 8f4f 	dsb	sy
 8017dbe:	617b      	str	r3, [r7, #20]
}
 8017dc0:	bf00      	nop
 8017dc2:	e7fe      	b.n	8017dc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d06e      	beq.n	8017ea8 <pvPortMalloc+0x150>
 8017dca:	4b45      	ldr	r3, [pc, #276]	; (8017ee0 <pvPortMalloc+0x188>)
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	687a      	ldr	r2, [r7, #4]
 8017dd0:	429a      	cmp	r2, r3
 8017dd2:	d869      	bhi.n	8017ea8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017dd4:	4b43      	ldr	r3, [pc, #268]	; (8017ee4 <pvPortMalloc+0x18c>)
 8017dd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017dd8:	4b42      	ldr	r3, [pc, #264]	; (8017ee4 <pvPortMalloc+0x18c>)
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017dde:	e004      	b.n	8017dea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8017de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dec:	685b      	ldr	r3, [r3, #4]
 8017dee:	687a      	ldr	r2, [r7, #4]
 8017df0:	429a      	cmp	r2, r3
 8017df2:	d903      	bls.n	8017dfc <pvPortMalloc+0xa4>
 8017df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d1f1      	bne.n	8017de0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017dfc:	4b36      	ldr	r3, [pc, #216]	; (8017ed8 <pvPortMalloc+0x180>)
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e02:	429a      	cmp	r2, r3
 8017e04:	d050      	beq.n	8017ea8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017e06:	6a3b      	ldr	r3, [r7, #32]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	2208      	movs	r2, #8
 8017e0c:	4413      	add	r3, r2
 8017e0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e12:	681a      	ldr	r2, [r3, #0]
 8017e14:	6a3b      	ldr	r3, [r7, #32]
 8017e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e1a:	685a      	ldr	r2, [r3, #4]
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	1ad2      	subs	r2, r2, r3
 8017e20:	2308      	movs	r3, #8
 8017e22:	005b      	lsls	r3, r3, #1
 8017e24:	429a      	cmp	r2, r3
 8017e26:	d91f      	bls.n	8017e68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	4413      	add	r3, r2
 8017e2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017e30:	69bb      	ldr	r3, [r7, #24]
 8017e32:	f003 0307 	and.w	r3, r3, #7
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d00a      	beq.n	8017e50 <pvPortMalloc+0xf8>
	__asm volatile
 8017e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e3e:	f383 8811 	msr	BASEPRI, r3
 8017e42:	f3bf 8f6f 	isb	sy
 8017e46:	f3bf 8f4f 	dsb	sy
 8017e4a:	613b      	str	r3, [r7, #16]
}
 8017e4c:	bf00      	nop
 8017e4e:	e7fe      	b.n	8017e4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e52:	685a      	ldr	r2, [r3, #4]
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	1ad2      	subs	r2, r2, r3
 8017e58:	69bb      	ldr	r3, [r7, #24]
 8017e5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e5e:	687a      	ldr	r2, [r7, #4]
 8017e60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017e62:	69b8      	ldr	r0, [r7, #24]
 8017e64:	f000 f908 	bl	8018078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017e68:	4b1d      	ldr	r3, [pc, #116]	; (8017ee0 <pvPortMalloc+0x188>)
 8017e6a:	681a      	ldr	r2, [r3, #0]
 8017e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e6e:	685b      	ldr	r3, [r3, #4]
 8017e70:	1ad3      	subs	r3, r2, r3
 8017e72:	4a1b      	ldr	r2, [pc, #108]	; (8017ee0 <pvPortMalloc+0x188>)
 8017e74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017e76:	4b1a      	ldr	r3, [pc, #104]	; (8017ee0 <pvPortMalloc+0x188>)
 8017e78:	681a      	ldr	r2, [r3, #0]
 8017e7a:	4b1b      	ldr	r3, [pc, #108]	; (8017ee8 <pvPortMalloc+0x190>)
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	429a      	cmp	r2, r3
 8017e80:	d203      	bcs.n	8017e8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017e82:	4b17      	ldr	r3, [pc, #92]	; (8017ee0 <pvPortMalloc+0x188>)
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	4a18      	ldr	r2, [pc, #96]	; (8017ee8 <pvPortMalloc+0x190>)
 8017e88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e8c:	685a      	ldr	r2, [r3, #4]
 8017e8e:	4b13      	ldr	r3, [pc, #76]	; (8017edc <pvPortMalloc+0x184>)
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	431a      	orrs	r2, r3
 8017e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e9a:	2200      	movs	r2, #0
 8017e9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8017e9e:	4b13      	ldr	r3, [pc, #76]	; (8017eec <pvPortMalloc+0x194>)
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	3301      	adds	r3, #1
 8017ea4:	4a11      	ldr	r2, [pc, #68]	; (8017eec <pvPortMalloc+0x194>)
 8017ea6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017ea8:	f7fe fbea 	bl	8016680 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017eac:	69fb      	ldr	r3, [r7, #28]
 8017eae:	f003 0307 	and.w	r3, r3, #7
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d00a      	beq.n	8017ecc <pvPortMalloc+0x174>
	__asm volatile
 8017eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eba:	f383 8811 	msr	BASEPRI, r3
 8017ebe:	f3bf 8f6f 	isb	sy
 8017ec2:	f3bf 8f4f 	dsb	sy
 8017ec6:	60fb      	str	r3, [r7, #12]
}
 8017ec8:	bf00      	nop
 8017eca:	e7fe      	b.n	8017eca <pvPortMalloc+0x172>
	return pvReturn;
 8017ecc:	69fb      	ldr	r3, [r7, #28]
}
 8017ece:	4618      	mov	r0, r3
 8017ed0:	3728      	adds	r7, #40	; 0x28
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	bd80      	pop	{r7, pc}
 8017ed6:	bf00      	nop
 8017ed8:	20005c6c 	.word	0x20005c6c
 8017edc:	20005c80 	.word	0x20005c80
 8017ee0:	20005c70 	.word	0x20005c70
 8017ee4:	20005c64 	.word	0x20005c64
 8017ee8:	20005c74 	.word	0x20005c74
 8017eec:	20005c78 	.word	0x20005c78

08017ef0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	b086      	sub	sp, #24
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d04d      	beq.n	8017f9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017f02:	2308      	movs	r3, #8
 8017f04:	425b      	negs	r3, r3
 8017f06:	697a      	ldr	r2, [r7, #20]
 8017f08:	4413      	add	r3, r2
 8017f0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017f0c:	697b      	ldr	r3, [r7, #20]
 8017f0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017f10:	693b      	ldr	r3, [r7, #16]
 8017f12:	685a      	ldr	r2, [r3, #4]
 8017f14:	4b24      	ldr	r3, [pc, #144]	; (8017fa8 <vPortFree+0xb8>)
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	4013      	ands	r3, r2
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d10a      	bne.n	8017f34 <vPortFree+0x44>
	__asm volatile
 8017f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f22:	f383 8811 	msr	BASEPRI, r3
 8017f26:	f3bf 8f6f 	isb	sy
 8017f2a:	f3bf 8f4f 	dsb	sy
 8017f2e:	60fb      	str	r3, [r7, #12]
}
 8017f30:	bf00      	nop
 8017f32:	e7fe      	b.n	8017f32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017f34:	693b      	ldr	r3, [r7, #16]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d00a      	beq.n	8017f52 <vPortFree+0x62>
	__asm volatile
 8017f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f40:	f383 8811 	msr	BASEPRI, r3
 8017f44:	f3bf 8f6f 	isb	sy
 8017f48:	f3bf 8f4f 	dsb	sy
 8017f4c:	60bb      	str	r3, [r7, #8]
}
 8017f4e:	bf00      	nop
 8017f50:	e7fe      	b.n	8017f50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017f52:	693b      	ldr	r3, [r7, #16]
 8017f54:	685a      	ldr	r2, [r3, #4]
 8017f56:	4b14      	ldr	r3, [pc, #80]	; (8017fa8 <vPortFree+0xb8>)
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	4013      	ands	r3, r2
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d01e      	beq.n	8017f9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017f60:	693b      	ldr	r3, [r7, #16]
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d11a      	bne.n	8017f9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017f68:	693b      	ldr	r3, [r7, #16]
 8017f6a:	685a      	ldr	r2, [r3, #4]
 8017f6c:	4b0e      	ldr	r3, [pc, #56]	; (8017fa8 <vPortFree+0xb8>)
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	43db      	mvns	r3, r3
 8017f72:	401a      	ands	r2, r3
 8017f74:	693b      	ldr	r3, [r7, #16]
 8017f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017f78:	f7fe fb74 	bl	8016664 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017f7c:	693b      	ldr	r3, [r7, #16]
 8017f7e:	685a      	ldr	r2, [r3, #4]
 8017f80:	4b0a      	ldr	r3, [pc, #40]	; (8017fac <vPortFree+0xbc>)
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	4413      	add	r3, r2
 8017f86:	4a09      	ldr	r2, [pc, #36]	; (8017fac <vPortFree+0xbc>)
 8017f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017f8a:	6938      	ldr	r0, [r7, #16]
 8017f8c:	f000 f874 	bl	8018078 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017f90:	4b07      	ldr	r3, [pc, #28]	; (8017fb0 <vPortFree+0xc0>)
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	3301      	adds	r3, #1
 8017f96:	4a06      	ldr	r2, [pc, #24]	; (8017fb0 <vPortFree+0xc0>)
 8017f98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017f9a:	f7fe fb71 	bl	8016680 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017f9e:	bf00      	nop
 8017fa0:	3718      	adds	r7, #24
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	bd80      	pop	{r7, pc}
 8017fa6:	bf00      	nop
 8017fa8:	20005c80 	.word	0x20005c80
 8017fac:	20005c70 	.word	0x20005c70
 8017fb0:	20005c7c 	.word	0x20005c7c

08017fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017fb4:	b480      	push	{r7}
 8017fb6:	b085      	sub	sp, #20
 8017fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017fba:	f244 6350 	movw	r3, #18000	; 0x4650
 8017fbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017fc0:	4b27      	ldr	r3, [pc, #156]	; (8018060 <prvHeapInit+0xac>)
 8017fc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	f003 0307 	and.w	r3, r3, #7
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d00c      	beq.n	8017fe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	3307      	adds	r3, #7
 8017fd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017fd4:	68fb      	ldr	r3, [r7, #12]
 8017fd6:	f023 0307 	bic.w	r3, r3, #7
 8017fda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017fdc:	68ba      	ldr	r2, [r7, #8]
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	1ad3      	subs	r3, r2, r3
 8017fe2:	4a1f      	ldr	r2, [pc, #124]	; (8018060 <prvHeapInit+0xac>)
 8017fe4:	4413      	add	r3, r2
 8017fe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017fec:	4a1d      	ldr	r2, [pc, #116]	; (8018064 <prvHeapInit+0xb0>)
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017ff2:	4b1c      	ldr	r3, [pc, #112]	; (8018064 <prvHeapInit+0xb0>)
 8017ff4:	2200      	movs	r2, #0
 8017ff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	68ba      	ldr	r2, [r7, #8]
 8017ffc:	4413      	add	r3, r2
 8017ffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018000:	2208      	movs	r2, #8
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	1a9b      	subs	r3, r3, r2
 8018006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	f023 0307 	bic.w	r3, r3, #7
 801800e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	4a15      	ldr	r2, [pc, #84]	; (8018068 <prvHeapInit+0xb4>)
 8018014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018016:	4b14      	ldr	r3, [pc, #80]	; (8018068 <prvHeapInit+0xb4>)
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	2200      	movs	r2, #0
 801801c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801801e:	4b12      	ldr	r3, [pc, #72]	; (8018068 <prvHeapInit+0xb4>)
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	2200      	movs	r2, #0
 8018024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801802a:	683b      	ldr	r3, [r7, #0]
 801802c:	68fa      	ldr	r2, [r7, #12]
 801802e:	1ad2      	subs	r2, r2, r3
 8018030:	683b      	ldr	r3, [r7, #0]
 8018032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018034:	4b0c      	ldr	r3, [pc, #48]	; (8018068 <prvHeapInit+0xb4>)
 8018036:	681a      	ldr	r2, [r3, #0]
 8018038:	683b      	ldr	r3, [r7, #0]
 801803a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801803c:	683b      	ldr	r3, [r7, #0]
 801803e:	685b      	ldr	r3, [r3, #4]
 8018040:	4a0a      	ldr	r2, [pc, #40]	; (801806c <prvHeapInit+0xb8>)
 8018042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018044:	683b      	ldr	r3, [r7, #0]
 8018046:	685b      	ldr	r3, [r3, #4]
 8018048:	4a09      	ldr	r2, [pc, #36]	; (8018070 <prvHeapInit+0xbc>)
 801804a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801804c:	4b09      	ldr	r3, [pc, #36]	; (8018074 <prvHeapInit+0xc0>)
 801804e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018052:	601a      	str	r2, [r3, #0]
}
 8018054:	bf00      	nop
 8018056:	3714      	adds	r7, #20
 8018058:	46bd      	mov	sp, r7
 801805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801805e:	4770      	bx	lr
 8018060:	20001614 	.word	0x20001614
 8018064:	20005c64 	.word	0x20005c64
 8018068:	20005c6c 	.word	0x20005c6c
 801806c:	20005c74 	.word	0x20005c74
 8018070:	20005c70 	.word	0x20005c70
 8018074:	20005c80 	.word	0x20005c80

08018078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018078:	b480      	push	{r7}
 801807a:	b085      	sub	sp, #20
 801807c:	af00      	add	r7, sp, #0
 801807e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018080:	4b28      	ldr	r3, [pc, #160]	; (8018124 <prvInsertBlockIntoFreeList+0xac>)
 8018082:	60fb      	str	r3, [r7, #12]
 8018084:	e002      	b.n	801808c <prvInsertBlockIntoFreeList+0x14>
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	60fb      	str	r3, [r7, #12]
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	687a      	ldr	r2, [r7, #4]
 8018092:	429a      	cmp	r2, r3
 8018094:	d8f7      	bhi.n	8018086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	685b      	ldr	r3, [r3, #4]
 801809e:	68ba      	ldr	r2, [r7, #8]
 80180a0:	4413      	add	r3, r2
 80180a2:	687a      	ldr	r2, [r7, #4]
 80180a4:	429a      	cmp	r2, r3
 80180a6:	d108      	bne.n	80180ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	685a      	ldr	r2, [r3, #4]
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	685b      	ldr	r3, [r3, #4]
 80180b0:	441a      	add	r2, r3
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	685b      	ldr	r3, [r3, #4]
 80180c2:	68ba      	ldr	r2, [r7, #8]
 80180c4:	441a      	add	r2, r3
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	429a      	cmp	r2, r3
 80180cc:	d118      	bne.n	8018100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	681a      	ldr	r2, [r3, #0]
 80180d2:	4b15      	ldr	r3, [pc, #84]	; (8018128 <prvInsertBlockIntoFreeList+0xb0>)
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	429a      	cmp	r2, r3
 80180d8:	d00d      	beq.n	80180f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	685a      	ldr	r2, [r3, #4]
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	685b      	ldr	r3, [r3, #4]
 80180e4:	441a      	add	r2, r3
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	681a      	ldr	r2, [r3, #0]
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	601a      	str	r2, [r3, #0]
 80180f4:	e008      	b.n	8018108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80180f6:	4b0c      	ldr	r3, [pc, #48]	; (8018128 <prvInsertBlockIntoFreeList+0xb0>)
 80180f8:	681a      	ldr	r2, [r3, #0]
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	601a      	str	r2, [r3, #0]
 80180fe:	e003      	b.n	8018108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	681a      	ldr	r2, [r3, #0]
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018108:	68fa      	ldr	r2, [r7, #12]
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	429a      	cmp	r2, r3
 801810e:	d002      	beq.n	8018116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	687a      	ldr	r2, [r7, #4]
 8018114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018116:	bf00      	nop
 8018118:	3714      	adds	r7, #20
 801811a:	46bd      	mov	sp, r7
 801811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018120:	4770      	bx	lr
 8018122:	bf00      	nop
 8018124:	20005c64 	.word	0x20005c64
 8018128:	20005c6c 	.word	0x20005c6c

0801812c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018130:	2200      	movs	r2, #0
 8018132:	4912      	ldr	r1, [pc, #72]	; (801817c <MX_USB_DEVICE_Init+0x50>)
 8018134:	4812      	ldr	r0, [pc, #72]	; (8018180 <MX_USB_DEVICE_Init+0x54>)
 8018136:	f7f8 fc2f 	bl	8010998 <USBD_Init>
 801813a:	4603      	mov	r3, r0
 801813c:	2b00      	cmp	r3, #0
 801813e:	d001      	beq.n	8018144 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018140:	f7ea fc28 	bl	8002994 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018144:	490f      	ldr	r1, [pc, #60]	; (8018184 <MX_USB_DEVICE_Init+0x58>)
 8018146:	480e      	ldr	r0, [pc, #56]	; (8018180 <MX_USB_DEVICE_Init+0x54>)
 8018148:	f7f8 fc56 	bl	80109f8 <USBD_RegisterClass>
 801814c:	4603      	mov	r3, r0
 801814e:	2b00      	cmp	r3, #0
 8018150:	d001      	beq.n	8018156 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018152:	f7ea fc1f 	bl	8002994 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018156:	490c      	ldr	r1, [pc, #48]	; (8018188 <MX_USB_DEVICE_Init+0x5c>)
 8018158:	4809      	ldr	r0, [pc, #36]	; (8018180 <MX_USB_DEVICE_Init+0x54>)
 801815a:	f7f8 fba7 	bl	80108ac <USBD_CDC_RegisterInterface>
 801815e:	4603      	mov	r3, r0
 8018160:	2b00      	cmp	r3, #0
 8018162:	d001      	beq.n	8018168 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018164:	f7ea fc16 	bl	8002994 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018168:	4805      	ldr	r0, [pc, #20]	; (8018180 <MX_USB_DEVICE_Init+0x54>)
 801816a:	f7f8 fc6c 	bl	8010a46 <USBD_Start>
 801816e:	4603      	mov	r3, r0
 8018170:	2b00      	cmp	r3, #0
 8018172:	d001      	beq.n	8018178 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018174:	f7ea fc0e 	bl	8002994 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018178:	bf00      	nop
 801817a:	bd80      	pop	{r7, pc}
 801817c:	20000180 	.word	0x20000180
 8018180:	200076b4 	.word	0x200076b4
 8018184:	20000064 	.word	0x20000064
 8018188:	2000016c 	.word	0x2000016c

0801818c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801818c:	b580      	push	{r7, lr}
 801818e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018190:	2200      	movs	r2, #0
 8018192:	4905      	ldr	r1, [pc, #20]	; (80181a8 <CDC_Init_FS+0x1c>)
 8018194:	4805      	ldr	r0, [pc, #20]	; (80181ac <CDC_Init_FS+0x20>)
 8018196:	f7f8 fb9e 	bl	80108d6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801819a:	4905      	ldr	r1, [pc, #20]	; (80181b0 <CDC_Init_FS+0x24>)
 801819c:	4803      	ldr	r0, [pc, #12]	; (80181ac <CDC_Init_FS+0x20>)
 801819e:	f7f8 fbb8 	bl	8010912 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80181a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80181a4:	4618      	mov	r0, r3
 80181a6:	bd80      	pop	{r7, pc}
 80181a8:	20008184 	.word	0x20008184
 80181ac:	200076b4 	.word	0x200076b4
 80181b0:	20007984 	.word	0x20007984

080181b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80181b4:	b480      	push	{r7}
 80181b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80181b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80181ba:	4618      	mov	r0, r3
 80181bc:	46bd      	mov	sp, r7
 80181be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c2:	4770      	bx	lr

080181c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80181c4:	b480      	push	{r7}
 80181c6:	b083      	sub	sp, #12
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	4603      	mov	r3, r0
 80181cc:	6039      	str	r1, [r7, #0]
 80181ce:	71fb      	strb	r3, [r7, #7]
 80181d0:	4613      	mov	r3, r2
 80181d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80181d4:	79fb      	ldrb	r3, [r7, #7]
 80181d6:	2b23      	cmp	r3, #35	; 0x23
 80181d8:	d84a      	bhi.n	8018270 <CDC_Control_FS+0xac>
 80181da:	a201      	add	r2, pc, #4	; (adr r2, 80181e0 <CDC_Control_FS+0x1c>)
 80181dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181e0:	08018271 	.word	0x08018271
 80181e4:	08018271 	.word	0x08018271
 80181e8:	08018271 	.word	0x08018271
 80181ec:	08018271 	.word	0x08018271
 80181f0:	08018271 	.word	0x08018271
 80181f4:	08018271 	.word	0x08018271
 80181f8:	08018271 	.word	0x08018271
 80181fc:	08018271 	.word	0x08018271
 8018200:	08018271 	.word	0x08018271
 8018204:	08018271 	.word	0x08018271
 8018208:	08018271 	.word	0x08018271
 801820c:	08018271 	.word	0x08018271
 8018210:	08018271 	.word	0x08018271
 8018214:	08018271 	.word	0x08018271
 8018218:	08018271 	.word	0x08018271
 801821c:	08018271 	.word	0x08018271
 8018220:	08018271 	.word	0x08018271
 8018224:	08018271 	.word	0x08018271
 8018228:	08018271 	.word	0x08018271
 801822c:	08018271 	.word	0x08018271
 8018230:	08018271 	.word	0x08018271
 8018234:	08018271 	.word	0x08018271
 8018238:	08018271 	.word	0x08018271
 801823c:	08018271 	.word	0x08018271
 8018240:	08018271 	.word	0x08018271
 8018244:	08018271 	.word	0x08018271
 8018248:	08018271 	.word	0x08018271
 801824c:	08018271 	.word	0x08018271
 8018250:	08018271 	.word	0x08018271
 8018254:	08018271 	.word	0x08018271
 8018258:	08018271 	.word	0x08018271
 801825c:	08018271 	.word	0x08018271
 8018260:	08018271 	.word	0x08018271
 8018264:	08018271 	.word	0x08018271
 8018268:	08018271 	.word	0x08018271
 801826c:	08018271 	.word	0x08018271
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018270:	bf00      	nop
  }

  return (USBD_OK);
 8018272:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018274:	4618      	mov	r0, r3
 8018276:	370c      	adds	r7, #12
 8018278:	46bd      	mov	sp, r7
 801827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801827e:	4770      	bx	lr

08018280 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018280:	b580      	push	{r7, lr}
 8018282:	b082      	sub	sp, #8
 8018284:	af00      	add	r7, sp, #0
 8018286:	6078      	str	r0, [r7, #4]
 8018288:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801828a:	6879      	ldr	r1, [r7, #4]
 801828c:	4805      	ldr	r0, [pc, #20]	; (80182a4 <CDC_Receive_FS+0x24>)
 801828e:	f7f8 fb40 	bl	8010912 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018292:	4804      	ldr	r0, [pc, #16]	; (80182a4 <CDC_Receive_FS+0x24>)
 8018294:	f7f8 fb56 	bl	8010944 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018298:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801829a:	4618      	mov	r0, r3
 801829c:	3708      	adds	r7, #8
 801829e:	46bd      	mov	sp, r7
 80182a0:	bd80      	pop	{r7, pc}
 80182a2:	bf00      	nop
 80182a4:	200076b4 	.word	0x200076b4

080182a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80182a8:	b480      	push	{r7}
 80182aa:	b087      	sub	sp, #28
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	60f8      	str	r0, [r7, #12]
 80182b0:	60b9      	str	r1, [r7, #8]
 80182b2:	4613      	mov	r3, r2
 80182b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80182b6:	2300      	movs	r3, #0
 80182b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80182ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80182be:	4618      	mov	r0, r3
 80182c0:	371c      	adds	r7, #28
 80182c2:	46bd      	mov	sp, r7
 80182c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182c8:	4770      	bx	lr
	...

080182cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80182cc:	b480      	push	{r7}
 80182ce:	b083      	sub	sp, #12
 80182d0:	af00      	add	r7, sp, #0
 80182d2:	4603      	mov	r3, r0
 80182d4:	6039      	str	r1, [r7, #0]
 80182d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80182d8:	683b      	ldr	r3, [r7, #0]
 80182da:	2212      	movs	r2, #18
 80182dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80182de:	4b03      	ldr	r3, [pc, #12]	; (80182ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80182e0:	4618      	mov	r0, r3
 80182e2:	370c      	adds	r7, #12
 80182e4:	46bd      	mov	sp, r7
 80182e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ea:	4770      	bx	lr
 80182ec:	2000019c 	.word	0x2000019c

080182f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80182f0:	b480      	push	{r7}
 80182f2:	b083      	sub	sp, #12
 80182f4:	af00      	add	r7, sp, #0
 80182f6:	4603      	mov	r3, r0
 80182f8:	6039      	str	r1, [r7, #0]
 80182fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80182fc:	683b      	ldr	r3, [r7, #0]
 80182fe:	2204      	movs	r2, #4
 8018300:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018302:	4b03      	ldr	r3, [pc, #12]	; (8018310 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018304:	4618      	mov	r0, r3
 8018306:	370c      	adds	r7, #12
 8018308:	46bd      	mov	sp, r7
 801830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801830e:	4770      	bx	lr
 8018310:	200001b0 	.word	0x200001b0

08018314 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018314:	b580      	push	{r7, lr}
 8018316:	b082      	sub	sp, #8
 8018318:	af00      	add	r7, sp, #0
 801831a:	4603      	mov	r3, r0
 801831c:	6039      	str	r1, [r7, #0]
 801831e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018320:	79fb      	ldrb	r3, [r7, #7]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d105      	bne.n	8018332 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018326:	683a      	ldr	r2, [r7, #0]
 8018328:	4907      	ldr	r1, [pc, #28]	; (8018348 <USBD_FS_ProductStrDescriptor+0x34>)
 801832a:	4808      	ldr	r0, [pc, #32]	; (801834c <USBD_FS_ProductStrDescriptor+0x38>)
 801832c:	f7f9 fbbd 	bl	8011aaa <USBD_GetString>
 8018330:	e004      	b.n	801833c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018332:	683a      	ldr	r2, [r7, #0]
 8018334:	4904      	ldr	r1, [pc, #16]	; (8018348 <USBD_FS_ProductStrDescriptor+0x34>)
 8018336:	4805      	ldr	r0, [pc, #20]	; (801834c <USBD_FS_ProductStrDescriptor+0x38>)
 8018338:	f7f9 fbb7 	bl	8011aaa <USBD_GetString>
  }
  return USBD_StrDesc;
 801833c:	4b02      	ldr	r3, [pc, #8]	; (8018348 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801833e:	4618      	mov	r0, r3
 8018340:	3708      	adds	r7, #8
 8018342:	46bd      	mov	sp, r7
 8018344:	bd80      	pop	{r7, pc}
 8018346:	bf00      	nop
 8018348:	20008984 	.word	0x20008984
 801834c:	08020ab8 	.word	0x08020ab8

08018350 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018350:	b580      	push	{r7, lr}
 8018352:	b082      	sub	sp, #8
 8018354:	af00      	add	r7, sp, #0
 8018356:	4603      	mov	r3, r0
 8018358:	6039      	str	r1, [r7, #0]
 801835a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801835c:	683a      	ldr	r2, [r7, #0]
 801835e:	4904      	ldr	r1, [pc, #16]	; (8018370 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018360:	4804      	ldr	r0, [pc, #16]	; (8018374 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018362:	f7f9 fba2 	bl	8011aaa <USBD_GetString>
  return USBD_StrDesc;
 8018366:	4b02      	ldr	r3, [pc, #8]	; (8018370 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018368:	4618      	mov	r0, r3
 801836a:	3708      	adds	r7, #8
 801836c:	46bd      	mov	sp, r7
 801836e:	bd80      	pop	{r7, pc}
 8018370:	20008984 	.word	0x20008984
 8018374:	08020ad0 	.word	0x08020ad0

08018378 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b082      	sub	sp, #8
 801837c:	af00      	add	r7, sp, #0
 801837e:	4603      	mov	r3, r0
 8018380:	6039      	str	r1, [r7, #0]
 8018382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018384:	683b      	ldr	r3, [r7, #0]
 8018386:	221a      	movs	r2, #26
 8018388:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801838a:	f000 f843 	bl	8018414 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801838e:	4b02      	ldr	r3, [pc, #8]	; (8018398 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018390:	4618      	mov	r0, r3
 8018392:	3708      	adds	r7, #8
 8018394:	46bd      	mov	sp, r7
 8018396:	bd80      	pop	{r7, pc}
 8018398:	200001b4 	.word	0x200001b4

0801839c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801839c:	b580      	push	{r7, lr}
 801839e:	b082      	sub	sp, #8
 80183a0:	af00      	add	r7, sp, #0
 80183a2:	4603      	mov	r3, r0
 80183a4:	6039      	str	r1, [r7, #0]
 80183a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80183a8:	79fb      	ldrb	r3, [r7, #7]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d105      	bne.n	80183ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80183ae:	683a      	ldr	r2, [r7, #0]
 80183b0:	4907      	ldr	r1, [pc, #28]	; (80183d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80183b2:	4808      	ldr	r0, [pc, #32]	; (80183d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80183b4:	f7f9 fb79 	bl	8011aaa <USBD_GetString>
 80183b8:	e004      	b.n	80183c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80183ba:	683a      	ldr	r2, [r7, #0]
 80183bc:	4904      	ldr	r1, [pc, #16]	; (80183d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80183be:	4805      	ldr	r0, [pc, #20]	; (80183d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80183c0:	f7f9 fb73 	bl	8011aaa <USBD_GetString>
  }
  return USBD_StrDesc;
 80183c4:	4b02      	ldr	r3, [pc, #8]	; (80183d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80183c6:	4618      	mov	r0, r3
 80183c8:	3708      	adds	r7, #8
 80183ca:	46bd      	mov	sp, r7
 80183cc:	bd80      	pop	{r7, pc}
 80183ce:	bf00      	nop
 80183d0:	20008984 	.word	0x20008984
 80183d4:	08020ae4 	.word	0x08020ae4

080183d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80183d8:	b580      	push	{r7, lr}
 80183da:	b082      	sub	sp, #8
 80183dc:	af00      	add	r7, sp, #0
 80183de:	4603      	mov	r3, r0
 80183e0:	6039      	str	r1, [r7, #0]
 80183e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80183e4:	79fb      	ldrb	r3, [r7, #7]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d105      	bne.n	80183f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80183ea:	683a      	ldr	r2, [r7, #0]
 80183ec:	4907      	ldr	r1, [pc, #28]	; (801840c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80183ee:	4808      	ldr	r0, [pc, #32]	; (8018410 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80183f0:	f7f9 fb5b 	bl	8011aaa <USBD_GetString>
 80183f4:	e004      	b.n	8018400 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80183f6:	683a      	ldr	r2, [r7, #0]
 80183f8:	4904      	ldr	r1, [pc, #16]	; (801840c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80183fa:	4805      	ldr	r0, [pc, #20]	; (8018410 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80183fc:	f7f9 fb55 	bl	8011aaa <USBD_GetString>
  }
  return USBD_StrDesc;
 8018400:	4b02      	ldr	r3, [pc, #8]	; (801840c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018402:	4618      	mov	r0, r3
 8018404:	3708      	adds	r7, #8
 8018406:	46bd      	mov	sp, r7
 8018408:	bd80      	pop	{r7, pc}
 801840a:	bf00      	nop
 801840c:	20008984 	.word	0x20008984
 8018410:	08020af0 	.word	0x08020af0

08018414 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018414:	b580      	push	{r7, lr}
 8018416:	b084      	sub	sp, #16
 8018418:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801841a:	4b0f      	ldr	r3, [pc, #60]	; (8018458 <Get_SerialNum+0x44>)
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018420:	4b0e      	ldr	r3, [pc, #56]	; (801845c <Get_SerialNum+0x48>)
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018426:	4b0e      	ldr	r3, [pc, #56]	; (8018460 <Get_SerialNum+0x4c>)
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801842c:	68fa      	ldr	r2, [r7, #12]
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	4413      	add	r3, r2
 8018432:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d009      	beq.n	801844e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801843a:	2208      	movs	r2, #8
 801843c:	4909      	ldr	r1, [pc, #36]	; (8018464 <Get_SerialNum+0x50>)
 801843e:	68f8      	ldr	r0, [r7, #12]
 8018440:	f000 f814 	bl	801846c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018444:	2204      	movs	r2, #4
 8018446:	4908      	ldr	r1, [pc, #32]	; (8018468 <Get_SerialNum+0x54>)
 8018448:	68b8      	ldr	r0, [r7, #8]
 801844a:	f000 f80f 	bl	801846c <IntToUnicode>
  }
}
 801844e:	bf00      	nop
 8018450:	3710      	adds	r7, #16
 8018452:	46bd      	mov	sp, r7
 8018454:	bd80      	pop	{r7, pc}
 8018456:	bf00      	nop
 8018458:	1fff7a10 	.word	0x1fff7a10
 801845c:	1fff7a14 	.word	0x1fff7a14
 8018460:	1fff7a18 	.word	0x1fff7a18
 8018464:	200001b6 	.word	0x200001b6
 8018468:	200001c6 	.word	0x200001c6

0801846c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801846c:	b480      	push	{r7}
 801846e:	b087      	sub	sp, #28
 8018470:	af00      	add	r7, sp, #0
 8018472:	60f8      	str	r0, [r7, #12]
 8018474:	60b9      	str	r1, [r7, #8]
 8018476:	4613      	mov	r3, r2
 8018478:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801847a:	2300      	movs	r3, #0
 801847c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801847e:	2300      	movs	r3, #0
 8018480:	75fb      	strb	r3, [r7, #23]
 8018482:	e027      	b.n	80184d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	0f1b      	lsrs	r3, r3, #28
 8018488:	2b09      	cmp	r3, #9
 801848a:	d80b      	bhi.n	80184a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	0f1b      	lsrs	r3, r3, #28
 8018490:	b2da      	uxtb	r2, r3
 8018492:	7dfb      	ldrb	r3, [r7, #23]
 8018494:	005b      	lsls	r3, r3, #1
 8018496:	4619      	mov	r1, r3
 8018498:	68bb      	ldr	r3, [r7, #8]
 801849a:	440b      	add	r3, r1
 801849c:	3230      	adds	r2, #48	; 0x30
 801849e:	b2d2      	uxtb	r2, r2
 80184a0:	701a      	strb	r2, [r3, #0]
 80184a2:	e00a      	b.n	80184ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	0f1b      	lsrs	r3, r3, #28
 80184a8:	b2da      	uxtb	r2, r3
 80184aa:	7dfb      	ldrb	r3, [r7, #23]
 80184ac:	005b      	lsls	r3, r3, #1
 80184ae:	4619      	mov	r1, r3
 80184b0:	68bb      	ldr	r3, [r7, #8]
 80184b2:	440b      	add	r3, r1
 80184b4:	3237      	adds	r2, #55	; 0x37
 80184b6:	b2d2      	uxtb	r2, r2
 80184b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	011b      	lsls	r3, r3, #4
 80184be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80184c0:	7dfb      	ldrb	r3, [r7, #23]
 80184c2:	005b      	lsls	r3, r3, #1
 80184c4:	3301      	adds	r3, #1
 80184c6:	68ba      	ldr	r2, [r7, #8]
 80184c8:	4413      	add	r3, r2
 80184ca:	2200      	movs	r2, #0
 80184cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80184ce:	7dfb      	ldrb	r3, [r7, #23]
 80184d0:	3301      	adds	r3, #1
 80184d2:	75fb      	strb	r3, [r7, #23]
 80184d4:	7dfa      	ldrb	r2, [r7, #23]
 80184d6:	79fb      	ldrb	r3, [r7, #7]
 80184d8:	429a      	cmp	r2, r3
 80184da:	d3d3      	bcc.n	8018484 <IntToUnicode+0x18>
  }
}
 80184dc:	bf00      	nop
 80184de:	bf00      	nop
 80184e0:	371c      	adds	r7, #28
 80184e2:	46bd      	mov	sp, r7
 80184e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e8:	4770      	bx	lr
	...

080184ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80184ec:	b580      	push	{r7, lr}
 80184ee:	b08a      	sub	sp, #40	; 0x28
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80184f4:	f107 0314 	add.w	r3, r7, #20
 80184f8:	2200      	movs	r2, #0
 80184fa:	601a      	str	r2, [r3, #0]
 80184fc:	605a      	str	r2, [r3, #4]
 80184fe:	609a      	str	r2, [r3, #8]
 8018500:	60da      	str	r2, [r3, #12]
 8018502:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801850c:	d147      	bne.n	801859e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801850e:	2300      	movs	r3, #0
 8018510:	613b      	str	r3, [r7, #16]
 8018512:	4b25      	ldr	r3, [pc, #148]	; (80185a8 <HAL_PCD_MspInit+0xbc>)
 8018514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018516:	4a24      	ldr	r2, [pc, #144]	; (80185a8 <HAL_PCD_MspInit+0xbc>)
 8018518:	f043 0301 	orr.w	r3, r3, #1
 801851c:	6313      	str	r3, [r2, #48]	; 0x30
 801851e:	4b22      	ldr	r3, [pc, #136]	; (80185a8 <HAL_PCD_MspInit+0xbc>)
 8018520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018522:	f003 0301 	and.w	r3, r3, #1
 8018526:	613b      	str	r3, [r7, #16]
 8018528:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801852a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801852e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018530:	2300      	movs	r3, #0
 8018532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018534:	2300      	movs	r3, #0
 8018536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018538:	f107 0314 	add.w	r3, r7, #20
 801853c:	4619      	mov	r1, r3
 801853e:	481b      	ldr	r0, [pc, #108]	; (80185ac <HAL_PCD_MspInit+0xc0>)
 8018540:	f7ef f89a 	bl	8007678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018544:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801854a:	2302      	movs	r3, #2
 801854c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801854e:	2300      	movs	r3, #0
 8018550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018552:	2303      	movs	r3, #3
 8018554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018556:	230a      	movs	r3, #10
 8018558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801855a:	f107 0314 	add.w	r3, r7, #20
 801855e:	4619      	mov	r1, r3
 8018560:	4812      	ldr	r0, [pc, #72]	; (80185ac <HAL_PCD_MspInit+0xc0>)
 8018562:	f7ef f889 	bl	8007678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018566:	4b10      	ldr	r3, [pc, #64]	; (80185a8 <HAL_PCD_MspInit+0xbc>)
 8018568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801856a:	4a0f      	ldr	r2, [pc, #60]	; (80185a8 <HAL_PCD_MspInit+0xbc>)
 801856c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018570:	6353      	str	r3, [r2, #52]	; 0x34
 8018572:	2300      	movs	r3, #0
 8018574:	60fb      	str	r3, [r7, #12]
 8018576:	4b0c      	ldr	r3, [pc, #48]	; (80185a8 <HAL_PCD_MspInit+0xbc>)
 8018578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801857a:	4a0b      	ldr	r2, [pc, #44]	; (80185a8 <HAL_PCD_MspInit+0xbc>)
 801857c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018580:	6453      	str	r3, [r2, #68]	; 0x44
 8018582:	4b09      	ldr	r3, [pc, #36]	; (80185a8 <HAL_PCD_MspInit+0xbc>)
 8018584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801858a:	60fb      	str	r3, [r7, #12]
 801858c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801858e:	2200      	movs	r2, #0
 8018590:	2105      	movs	r1, #5
 8018592:	2043      	movs	r0, #67	; 0x43
 8018594:	f7ef f838 	bl	8007608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018598:	2043      	movs	r0, #67	; 0x43
 801859a:	f7ef f851 	bl	8007640 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801859e:	bf00      	nop
 80185a0:	3728      	adds	r7, #40	; 0x28
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bd80      	pop	{r7, pc}
 80185a6:	bf00      	nop
 80185a8:	40023800 	.word	0x40023800
 80185ac:	40020000 	.word	0x40020000

080185b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b082      	sub	sp, #8
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80185c4:	4619      	mov	r1, r3
 80185c6:	4610      	mov	r0, r2
 80185c8:	f7f8 fa88 	bl	8010adc <USBD_LL_SetupStage>
}
 80185cc:	bf00      	nop
 80185ce:	3708      	adds	r7, #8
 80185d0:	46bd      	mov	sp, r7
 80185d2:	bd80      	pop	{r7, pc}

080185d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80185d4:	b580      	push	{r7, lr}
 80185d6:	b082      	sub	sp, #8
 80185d8:	af00      	add	r7, sp, #0
 80185da:	6078      	str	r0, [r7, #4]
 80185dc:	460b      	mov	r3, r1
 80185de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80185e6:	78fa      	ldrb	r2, [r7, #3]
 80185e8:	6879      	ldr	r1, [r7, #4]
 80185ea:	4613      	mov	r3, r2
 80185ec:	00db      	lsls	r3, r3, #3
 80185ee:	1a9b      	subs	r3, r3, r2
 80185f0:	009b      	lsls	r3, r3, #2
 80185f2:	440b      	add	r3, r1
 80185f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80185f8:	681a      	ldr	r2, [r3, #0]
 80185fa:	78fb      	ldrb	r3, [r7, #3]
 80185fc:	4619      	mov	r1, r3
 80185fe:	f7f8 fac2 	bl	8010b86 <USBD_LL_DataOutStage>
}
 8018602:	bf00      	nop
 8018604:	3708      	adds	r7, #8
 8018606:	46bd      	mov	sp, r7
 8018608:	bd80      	pop	{r7, pc}

0801860a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801860a:	b580      	push	{r7, lr}
 801860c:	b082      	sub	sp, #8
 801860e:	af00      	add	r7, sp, #0
 8018610:	6078      	str	r0, [r7, #4]
 8018612:	460b      	mov	r3, r1
 8018614:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801861c:	78fa      	ldrb	r2, [r7, #3]
 801861e:	6879      	ldr	r1, [r7, #4]
 8018620:	4613      	mov	r3, r2
 8018622:	00db      	lsls	r3, r3, #3
 8018624:	1a9b      	subs	r3, r3, r2
 8018626:	009b      	lsls	r3, r3, #2
 8018628:	440b      	add	r3, r1
 801862a:	3348      	adds	r3, #72	; 0x48
 801862c:	681a      	ldr	r2, [r3, #0]
 801862e:	78fb      	ldrb	r3, [r7, #3]
 8018630:	4619      	mov	r1, r3
 8018632:	f7f8 fb0b 	bl	8010c4c <USBD_LL_DataInStage>
}
 8018636:	bf00      	nop
 8018638:	3708      	adds	r7, #8
 801863a:	46bd      	mov	sp, r7
 801863c:	bd80      	pop	{r7, pc}

0801863e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801863e:	b580      	push	{r7, lr}
 8018640:	b082      	sub	sp, #8
 8018642:	af00      	add	r7, sp, #0
 8018644:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801864c:	4618      	mov	r0, r3
 801864e:	f7f8 fc1f 	bl	8010e90 <USBD_LL_SOF>
}
 8018652:	bf00      	nop
 8018654:	3708      	adds	r7, #8
 8018656:	46bd      	mov	sp, r7
 8018658:	bd80      	pop	{r7, pc}

0801865a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801865a:	b580      	push	{r7, lr}
 801865c:	b084      	sub	sp, #16
 801865e:	af00      	add	r7, sp, #0
 8018660:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018662:	2301      	movs	r3, #1
 8018664:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	68db      	ldr	r3, [r3, #12]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d102      	bne.n	8018674 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801866e:	2300      	movs	r3, #0
 8018670:	73fb      	strb	r3, [r7, #15]
 8018672:	e008      	b.n	8018686 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	68db      	ldr	r3, [r3, #12]
 8018678:	2b02      	cmp	r3, #2
 801867a:	d102      	bne.n	8018682 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801867c:	2301      	movs	r3, #1
 801867e:	73fb      	strb	r3, [r7, #15]
 8018680:	e001      	b.n	8018686 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018682:	f7ea f987 	bl	8002994 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801868c:	7bfa      	ldrb	r2, [r7, #15]
 801868e:	4611      	mov	r1, r2
 8018690:	4618      	mov	r0, r3
 8018692:	f7f8 fbbf 	bl	8010e14 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801869c:	4618      	mov	r0, r3
 801869e:	f7f8 fb6b 	bl	8010d78 <USBD_LL_Reset>
}
 80186a2:	bf00      	nop
 80186a4:	3710      	adds	r7, #16
 80186a6:	46bd      	mov	sp, r7
 80186a8:	bd80      	pop	{r7, pc}
	...

080186ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	b082      	sub	sp, #8
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80186ba:	4618      	mov	r0, r3
 80186bc:	f7f8 fbba 	bl	8010e34 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	687a      	ldr	r2, [r7, #4]
 80186cc:	6812      	ldr	r2, [r2, #0]
 80186ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80186d2:	f043 0301 	orr.w	r3, r3, #1
 80186d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	6a1b      	ldr	r3, [r3, #32]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d005      	beq.n	80186ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80186e0:	4b04      	ldr	r3, [pc, #16]	; (80186f4 <HAL_PCD_SuspendCallback+0x48>)
 80186e2:	691b      	ldr	r3, [r3, #16]
 80186e4:	4a03      	ldr	r2, [pc, #12]	; (80186f4 <HAL_PCD_SuspendCallback+0x48>)
 80186e6:	f043 0306 	orr.w	r3, r3, #6
 80186ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80186ec:	bf00      	nop
 80186ee:	3708      	adds	r7, #8
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bd80      	pop	{r7, pc}
 80186f4:	e000ed00 	.word	0xe000ed00

080186f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b082      	sub	sp, #8
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018706:	4618      	mov	r0, r3
 8018708:	f7f8 fbaa 	bl	8010e60 <USBD_LL_Resume>
}
 801870c:	bf00      	nop
 801870e:	3708      	adds	r7, #8
 8018710:	46bd      	mov	sp, r7
 8018712:	bd80      	pop	{r7, pc}

08018714 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018714:	b580      	push	{r7, lr}
 8018716:	b082      	sub	sp, #8
 8018718:	af00      	add	r7, sp, #0
 801871a:	6078      	str	r0, [r7, #4]
 801871c:	460b      	mov	r3, r1
 801871e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018726:	78fa      	ldrb	r2, [r7, #3]
 8018728:	4611      	mov	r1, r2
 801872a:	4618      	mov	r0, r3
 801872c:	f7f8 fbf8 	bl	8010f20 <USBD_LL_IsoOUTIncomplete>
}
 8018730:	bf00      	nop
 8018732:	3708      	adds	r7, #8
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}

08018738 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b082      	sub	sp, #8
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
 8018740:	460b      	mov	r3, r1
 8018742:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801874a:	78fa      	ldrb	r2, [r7, #3]
 801874c:	4611      	mov	r1, r2
 801874e:	4618      	mov	r0, r3
 8018750:	f7f8 fbc0 	bl	8010ed4 <USBD_LL_IsoINIncomplete>
}
 8018754:	bf00      	nop
 8018756:	3708      	adds	r7, #8
 8018758:	46bd      	mov	sp, r7
 801875a:	bd80      	pop	{r7, pc}

0801875c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801875c:	b580      	push	{r7, lr}
 801875e:	b082      	sub	sp, #8
 8018760:	af00      	add	r7, sp, #0
 8018762:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801876a:	4618      	mov	r0, r3
 801876c:	f7f8 fbfe 	bl	8010f6c <USBD_LL_DevConnected>
}
 8018770:	bf00      	nop
 8018772:	3708      	adds	r7, #8
 8018774:	46bd      	mov	sp, r7
 8018776:	bd80      	pop	{r7, pc}

08018778 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018778:	b580      	push	{r7, lr}
 801877a:	b082      	sub	sp, #8
 801877c:	af00      	add	r7, sp, #0
 801877e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018786:	4618      	mov	r0, r3
 8018788:	f7f8 fbfb 	bl	8010f82 <USBD_LL_DevDisconnected>
}
 801878c:	bf00      	nop
 801878e:	3708      	adds	r7, #8
 8018790:	46bd      	mov	sp, r7
 8018792:	bd80      	pop	{r7, pc}

08018794 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018794:	b580      	push	{r7, lr}
 8018796:	b082      	sub	sp, #8
 8018798:	af00      	add	r7, sp, #0
 801879a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	781b      	ldrb	r3, [r3, #0]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d13c      	bne.n	801881e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80187a4:	4a20      	ldr	r2, [pc, #128]	; (8018828 <USBD_LL_Init+0x94>)
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	4a1e      	ldr	r2, [pc, #120]	; (8018828 <USBD_LL_Init+0x94>)
 80187b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80187b4:	4b1c      	ldr	r3, [pc, #112]	; (8018828 <USBD_LL_Init+0x94>)
 80187b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80187ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80187bc:	4b1a      	ldr	r3, [pc, #104]	; (8018828 <USBD_LL_Init+0x94>)
 80187be:	2204      	movs	r2, #4
 80187c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80187c2:	4b19      	ldr	r3, [pc, #100]	; (8018828 <USBD_LL_Init+0x94>)
 80187c4:	2202      	movs	r2, #2
 80187c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80187c8:	4b17      	ldr	r3, [pc, #92]	; (8018828 <USBD_LL_Init+0x94>)
 80187ca:	2200      	movs	r2, #0
 80187cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80187ce:	4b16      	ldr	r3, [pc, #88]	; (8018828 <USBD_LL_Init+0x94>)
 80187d0:	2202      	movs	r2, #2
 80187d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80187d4:	4b14      	ldr	r3, [pc, #80]	; (8018828 <USBD_LL_Init+0x94>)
 80187d6:	2200      	movs	r2, #0
 80187d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80187da:	4b13      	ldr	r3, [pc, #76]	; (8018828 <USBD_LL_Init+0x94>)
 80187dc:	2200      	movs	r2, #0
 80187de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80187e0:	4b11      	ldr	r3, [pc, #68]	; (8018828 <USBD_LL_Init+0x94>)
 80187e2:	2200      	movs	r2, #0
 80187e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80187e6:	4b10      	ldr	r3, [pc, #64]	; (8018828 <USBD_LL_Init+0x94>)
 80187e8:	2201      	movs	r2, #1
 80187ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80187ec:	4b0e      	ldr	r3, [pc, #56]	; (8018828 <USBD_LL_Init+0x94>)
 80187ee:	2200      	movs	r2, #0
 80187f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80187f2:	480d      	ldr	r0, [pc, #52]	; (8018828 <USBD_LL_Init+0x94>)
 80187f4:	f7f0 f9a6 	bl	8008b44 <HAL_PCD_Init>
 80187f8:	4603      	mov	r3, r0
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d001      	beq.n	8018802 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80187fe:	f7ea f8c9 	bl	8002994 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018802:	2180      	movs	r1, #128	; 0x80
 8018804:	4808      	ldr	r0, [pc, #32]	; (8018828 <USBD_LL_Init+0x94>)
 8018806:	f7f1 fb04 	bl	8009e12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801880a:	2240      	movs	r2, #64	; 0x40
 801880c:	2100      	movs	r1, #0
 801880e:	4806      	ldr	r0, [pc, #24]	; (8018828 <USBD_LL_Init+0x94>)
 8018810:	f7f1 fab8 	bl	8009d84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018814:	2280      	movs	r2, #128	; 0x80
 8018816:	2101      	movs	r1, #1
 8018818:	4803      	ldr	r0, [pc, #12]	; (8018828 <USBD_LL_Init+0x94>)
 801881a:	f7f1 fab3 	bl	8009d84 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801881e:	2300      	movs	r3, #0
}
 8018820:	4618      	mov	r0, r3
 8018822:	3708      	adds	r7, #8
 8018824:	46bd      	mov	sp, r7
 8018826:	bd80      	pop	{r7, pc}
 8018828:	20008b84 	.word	0x20008b84

0801882c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801882c:	b580      	push	{r7, lr}
 801882e:	b084      	sub	sp, #16
 8018830:	af00      	add	r7, sp, #0
 8018832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018834:	2300      	movs	r3, #0
 8018836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018838:	2300      	movs	r3, #0
 801883a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018842:	4618      	mov	r0, r3
 8018844:	f7f0 fa9b 	bl	8008d7e <HAL_PCD_Start>
 8018848:	4603      	mov	r3, r0
 801884a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801884c:	7bfb      	ldrb	r3, [r7, #15]
 801884e:	4618      	mov	r0, r3
 8018850:	f000 f942 	bl	8018ad8 <USBD_Get_USB_Status>
 8018854:	4603      	mov	r3, r0
 8018856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018858:	7bbb      	ldrb	r3, [r7, #14]
}
 801885a:	4618      	mov	r0, r3
 801885c:	3710      	adds	r7, #16
 801885e:	46bd      	mov	sp, r7
 8018860:	bd80      	pop	{r7, pc}

08018862 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018862:	b580      	push	{r7, lr}
 8018864:	b084      	sub	sp, #16
 8018866:	af00      	add	r7, sp, #0
 8018868:	6078      	str	r0, [r7, #4]
 801886a:	4608      	mov	r0, r1
 801886c:	4611      	mov	r1, r2
 801886e:	461a      	mov	r2, r3
 8018870:	4603      	mov	r3, r0
 8018872:	70fb      	strb	r3, [r7, #3]
 8018874:	460b      	mov	r3, r1
 8018876:	70bb      	strb	r3, [r7, #2]
 8018878:	4613      	mov	r3, r2
 801887a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801887c:	2300      	movs	r3, #0
 801887e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018880:	2300      	movs	r3, #0
 8018882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801888a:	78bb      	ldrb	r3, [r7, #2]
 801888c:	883a      	ldrh	r2, [r7, #0]
 801888e:	78f9      	ldrb	r1, [r7, #3]
 8018890:	f7f0 fe7f 	bl	8009592 <HAL_PCD_EP_Open>
 8018894:	4603      	mov	r3, r0
 8018896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018898:	7bfb      	ldrb	r3, [r7, #15]
 801889a:	4618      	mov	r0, r3
 801889c:	f000 f91c 	bl	8018ad8 <USBD_Get_USB_Status>
 80188a0:	4603      	mov	r3, r0
 80188a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80188a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80188a6:	4618      	mov	r0, r3
 80188a8:	3710      	adds	r7, #16
 80188aa:	46bd      	mov	sp, r7
 80188ac:	bd80      	pop	{r7, pc}

080188ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80188ae:	b580      	push	{r7, lr}
 80188b0:	b084      	sub	sp, #16
 80188b2:	af00      	add	r7, sp, #0
 80188b4:	6078      	str	r0, [r7, #4]
 80188b6:	460b      	mov	r3, r1
 80188b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80188ba:	2300      	movs	r3, #0
 80188bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80188be:	2300      	movs	r3, #0
 80188c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80188c8:	78fa      	ldrb	r2, [r7, #3]
 80188ca:	4611      	mov	r1, r2
 80188cc:	4618      	mov	r0, r3
 80188ce:	f7f0 fec8 	bl	8009662 <HAL_PCD_EP_Close>
 80188d2:	4603      	mov	r3, r0
 80188d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80188d6:	7bfb      	ldrb	r3, [r7, #15]
 80188d8:	4618      	mov	r0, r3
 80188da:	f000 f8fd 	bl	8018ad8 <USBD_Get_USB_Status>
 80188de:	4603      	mov	r3, r0
 80188e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80188e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80188e4:	4618      	mov	r0, r3
 80188e6:	3710      	adds	r7, #16
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd80      	pop	{r7, pc}

080188ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b084      	sub	sp, #16
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
 80188f4:	460b      	mov	r3, r1
 80188f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80188f8:	2300      	movs	r3, #0
 80188fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80188fc:	2300      	movs	r3, #0
 80188fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018906:	78fa      	ldrb	r2, [r7, #3]
 8018908:	4611      	mov	r1, r2
 801890a:	4618      	mov	r0, r3
 801890c:	f7f0 ffa0 	bl	8009850 <HAL_PCD_EP_SetStall>
 8018910:	4603      	mov	r3, r0
 8018912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018914:	7bfb      	ldrb	r3, [r7, #15]
 8018916:	4618      	mov	r0, r3
 8018918:	f000 f8de 	bl	8018ad8 <USBD_Get_USB_Status>
 801891c:	4603      	mov	r3, r0
 801891e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018920:	7bbb      	ldrb	r3, [r7, #14]
}
 8018922:	4618      	mov	r0, r3
 8018924:	3710      	adds	r7, #16
 8018926:	46bd      	mov	sp, r7
 8018928:	bd80      	pop	{r7, pc}

0801892a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801892a:	b580      	push	{r7, lr}
 801892c:	b084      	sub	sp, #16
 801892e:	af00      	add	r7, sp, #0
 8018930:	6078      	str	r0, [r7, #4]
 8018932:	460b      	mov	r3, r1
 8018934:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018936:	2300      	movs	r3, #0
 8018938:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801893a:	2300      	movs	r3, #0
 801893c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018944:	78fa      	ldrb	r2, [r7, #3]
 8018946:	4611      	mov	r1, r2
 8018948:	4618      	mov	r0, r3
 801894a:	f7f0 ffe5 	bl	8009918 <HAL_PCD_EP_ClrStall>
 801894e:	4603      	mov	r3, r0
 8018950:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018952:	7bfb      	ldrb	r3, [r7, #15]
 8018954:	4618      	mov	r0, r3
 8018956:	f000 f8bf 	bl	8018ad8 <USBD_Get_USB_Status>
 801895a:	4603      	mov	r3, r0
 801895c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801895e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018960:	4618      	mov	r0, r3
 8018962:	3710      	adds	r7, #16
 8018964:	46bd      	mov	sp, r7
 8018966:	bd80      	pop	{r7, pc}

08018968 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018968:	b480      	push	{r7}
 801896a:	b085      	sub	sp, #20
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
 8018970:	460b      	mov	r3, r1
 8018972:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801897a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801897c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018980:	2b00      	cmp	r3, #0
 8018982:	da0b      	bge.n	801899c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018984:	78fb      	ldrb	r3, [r7, #3]
 8018986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801898a:	68f9      	ldr	r1, [r7, #12]
 801898c:	4613      	mov	r3, r2
 801898e:	00db      	lsls	r3, r3, #3
 8018990:	1a9b      	subs	r3, r3, r2
 8018992:	009b      	lsls	r3, r3, #2
 8018994:	440b      	add	r3, r1
 8018996:	333e      	adds	r3, #62	; 0x3e
 8018998:	781b      	ldrb	r3, [r3, #0]
 801899a:	e00b      	b.n	80189b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801899c:	78fb      	ldrb	r3, [r7, #3]
 801899e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80189a2:	68f9      	ldr	r1, [r7, #12]
 80189a4:	4613      	mov	r3, r2
 80189a6:	00db      	lsls	r3, r3, #3
 80189a8:	1a9b      	subs	r3, r3, r2
 80189aa:	009b      	lsls	r3, r3, #2
 80189ac:	440b      	add	r3, r1
 80189ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80189b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80189b4:	4618      	mov	r0, r3
 80189b6:	3714      	adds	r7, #20
 80189b8:	46bd      	mov	sp, r7
 80189ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189be:	4770      	bx	lr

080189c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80189c0:	b580      	push	{r7, lr}
 80189c2:	b084      	sub	sp, #16
 80189c4:	af00      	add	r7, sp, #0
 80189c6:	6078      	str	r0, [r7, #4]
 80189c8:	460b      	mov	r3, r1
 80189ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80189cc:	2300      	movs	r3, #0
 80189ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80189d0:	2300      	movs	r3, #0
 80189d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80189da:	78fa      	ldrb	r2, [r7, #3]
 80189dc:	4611      	mov	r1, r2
 80189de:	4618      	mov	r0, r3
 80189e0:	f7f0 fdb2 	bl	8009548 <HAL_PCD_SetAddress>
 80189e4:	4603      	mov	r3, r0
 80189e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80189e8:	7bfb      	ldrb	r3, [r7, #15]
 80189ea:	4618      	mov	r0, r3
 80189ec:	f000 f874 	bl	8018ad8 <USBD_Get_USB_Status>
 80189f0:	4603      	mov	r3, r0
 80189f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80189f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80189f6:	4618      	mov	r0, r3
 80189f8:	3710      	adds	r7, #16
 80189fa:	46bd      	mov	sp, r7
 80189fc:	bd80      	pop	{r7, pc}

080189fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80189fe:	b580      	push	{r7, lr}
 8018a00:	b086      	sub	sp, #24
 8018a02:	af00      	add	r7, sp, #0
 8018a04:	60f8      	str	r0, [r7, #12]
 8018a06:	607a      	str	r2, [r7, #4]
 8018a08:	603b      	str	r3, [r7, #0]
 8018a0a:	460b      	mov	r3, r1
 8018a0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a0e:	2300      	movs	r3, #0
 8018a10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a12:	2300      	movs	r3, #0
 8018a14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018a1c:	7af9      	ldrb	r1, [r7, #11]
 8018a1e:	683b      	ldr	r3, [r7, #0]
 8018a20:	687a      	ldr	r2, [r7, #4]
 8018a22:	f7f0 fecb 	bl	80097bc <HAL_PCD_EP_Transmit>
 8018a26:	4603      	mov	r3, r0
 8018a28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a2a:	7dfb      	ldrb	r3, [r7, #23]
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	f000 f853 	bl	8018ad8 <USBD_Get_USB_Status>
 8018a32:	4603      	mov	r3, r0
 8018a34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018a36:	7dbb      	ldrb	r3, [r7, #22]
}
 8018a38:	4618      	mov	r0, r3
 8018a3a:	3718      	adds	r7, #24
 8018a3c:	46bd      	mov	sp, r7
 8018a3e:	bd80      	pop	{r7, pc}

08018a40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b086      	sub	sp, #24
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	60f8      	str	r0, [r7, #12]
 8018a48:	607a      	str	r2, [r7, #4]
 8018a4a:	603b      	str	r3, [r7, #0]
 8018a4c:	460b      	mov	r3, r1
 8018a4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a50:	2300      	movs	r3, #0
 8018a52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a54:	2300      	movs	r3, #0
 8018a56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018a5e:	7af9      	ldrb	r1, [r7, #11]
 8018a60:	683b      	ldr	r3, [r7, #0]
 8018a62:	687a      	ldr	r2, [r7, #4]
 8018a64:	f7f0 fe47 	bl	80096f6 <HAL_PCD_EP_Receive>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a6c:	7dfb      	ldrb	r3, [r7, #23]
 8018a6e:	4618      	mov	r0, r3
 8018a70:	f000 f832 	bl	8018ad8 <USBD_Get_USB_Status>
 8018a74:	4603      	mov	r3, r0
 8018a76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018a78:	7dbb      	ldrb	r3, [r7, #22]
}
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	3718      	adds	r7, #24
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	bd80      	pop	{r7, pc}

08018a82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018a82:	b580      	push	{r7, lr}
 8018a84:	b082      	sub	sp, #8
 8018a86:	af00      	add	r7, sp, #0
 8018a88:	6078      	str	r0, [r7, #4]
 8018a8a:	460b      	mov	r3, r1
 8018a8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018a94:	78fa      	ldrb	r2, [r7, #3]
 8018a96:	4611      	mov	r1, r2
 8018a98:	4618      	mov	r0, r3
 8018a9a:	f7f0 fe77 	bl	800978c <HAL_PCD_EP_GetRxCount>
 8018a9e:	4603      	mov	r3, r0
}
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	3708      	adds	r7, #8
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}

08018aa8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018aa8:	b480      	push	{r7}
 8018aaa:	b083      	sub	sp, #12
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018ab0:	4b03      	ldr	r3, [pc, #12]	; (8018ac0 <USBD_static_malloc+0x18>)
}
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	370c      	adds	r7, #12
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018abc:	4770      	bx	lr
 8018abe:	bf00      	nop
 8018ac0:	20005c84 	.word	0x20005c84

08018ac4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018ac4:	b480      	push	{r7}
 8018ac6:	b083      	sub	sp, #12
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	6078      	str	r0, [r7, #4]

}
 8018acc:	bf00      	nop
 8018ace:	370c      	adds	r7, #12
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad6:	4770      	bx	lr

08018ad8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018ad8:	b480      	push	{r7}
 8018ada:	b085      	sub	sp, #20
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	4603      	mov	r3, r0
 8018ae0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018ae6:	79fb      	ldrb	r3, [r7, #7]
 8018ae8:	2b03      	cmp	r3, #3
 8018aea:	d817      	bhi.n	8018b1c <USBD_Get_USB_Status+0x44>
 8018aec:	a201      	add	r2, pc, #4	; (adr r2, 8018af4 <USBD_Get_USB_Status+0x1c>)
 8018aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018af2:	bf00      	nop
 8018af4:	08018b05 	.word	0x08018b05
 8018af8:	08018b0b 	.word	0x08018b0b
 8018afc:	08018b11 	.word	0x08018b11
 8018b00:	08018b17 	.word	0x08018b17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018b04:	2300      	movs	r3, #0
 8018b06:	73fb      	strb	r3, [r7, #15]
    break;
 8018b08:	e00b      	b.n	8018b22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018b0a:	2303      	movs	r3, #3
 8018b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8018b0e:	e008      	b.n	8018b22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018b10:	2301      	movs	r3, #1
 8018b12:	73fb      	strb	r3, [r7, #15]
    break;
 8018b14:	e005      	b.n	8018b22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018b16:	2303      	movs	r3, #3
 8018b18:	73fb      	strb	r3, [r7, #15]
    break;
 8018b1a:	e002      	b.n	8018b22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018b1c:	2303      	movs	r3, #3
 8018b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8018b20:	bf00      	nop
  }
  return usb_status;
 8018b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b24:	4618      	mov	r0, r3
 8018b26:	3714      	adds	r7, #20
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b2e:	4770      	bx	lr

08018b30 <__cxa_pure_virtual>:
 8018b30:	b508      	push	{r3, lr}
 8018b32:	f000 f80d 	bl	8018b50 <_ZSt9terminatev>

08018b36 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8018b36:	b508      	push	{r3, lr}
 8018b38:	4780      	blx	r0
 8018b3a:	f000 ffc3 	bl	8019ac4 <abort>
	...

08018b40 <_ZSt13get_terminatev>:
 8018b40:	4b02      	ldr	r3, [pc, #8]	; (8018b4c <_ZSt13get_terminatev+0xc>)
 8018b42:	6818      	ldr	r0, [r3, #0]
 8018b44:	f3bf 8f5b 	dmb	ish
 8018b48:	4770      	bx	lr
 8018b4a:	bf00      	nop
 8018b4c:	200001d0 	.word	0x200001d0

08018b50 <_ZSt9terminatev>:
 8018b50:	b508      	push	{r3, lr}
 8018b52:	f7ff fff5 	bl	8018b40 <_ZSt13get_terminatev>
 8018b56:	f7ff ffee 	bl	8018b36 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08018b5c <pow>:
 8018b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b60:	ec59 8b10 	vmov	r8, r9, d0
 8018b64:	ec57 6b11 	vmov	r6, r7, d1
 8018b68:	f000 f8a6 	bl	8018cb8 <__ieee754_pow>
 8018b6c:	4b4e      	ldr	r3, [pc, #312]	; (8018ca8 <pow+0x14c>)
 8018b6e:	f993 3000 	ldrsb.w	r3, [r3]
 8018b72:	3301      	adds	r3, #1
 8018b74:	ec55 4b10 	vmov	r4, r5, d0
 8018b78:	d015      	beq.n	8018ba6 <pow+0x4a>
 8018b7a:	4632      	mov	r2, r6
 8018b7c:	463b      	mov	r3, r7
 8018b7e:	4630      	mov	r0, r6
 8018b80:	4639      	mov	r1, r7
 8018b82:	f7e7 ffe3 	bl	8000b4c <__aeabi_dcmpun>
 8018b86:	b970      	cbnz	r0, 8018ba6 <pow+0x4a>
 8018b88:	4642      	mov	r2, r8
 8018b8a:	464b      	mov	r3, r9
 8018b8c:	4640      	mov	r0, r8
 8018b8e:	4649      	mov	r1, r9
 8018b90:	f7e7 ffdc 	bl	8000b4c <__aeabi_dcmpun>
 8018b94:	2200      	movs	r2, #0
 8018b96:	2300      	movs	r3, #0
 8018b98:	b148      	cbz	r0, 8018bae <pow+0x52>
 8018b9a:	4630      	mov	r0, r6
 8018b9c:	4639      	mov	r1, r7
 8018b9e:	f7e7 ffa3 	bl	8000ae8 <__aeabi_dcmpeq>
 8018ba2:	2800      	cmp	r0, #0
 8018ba4:	d17d      	bne.n	8018ca2 <pow+0x146>
 8018ba6:	ec45 4b10 	vmov	d0, r4, r5
 8018baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bae:	4640      	mov	r0, r8
 8018bb0:	4649      	mov	r1, r9
 8018bb2:	f7e7 ff99 	bl	8000ae8 <__aeabi_dcmpeq>
 8018bb6:	b1e0      	cbz	r0, 8018bf2 <pow+0x96>
 8018bb8:	2200      	movs	r2, #0
 8018bba:	2300      	movs	r3, #0
 8018bbc:	4630      	mov	r0, r6
 8018bbe:	4639      	mov	r1, r7
 8018bc0:	f7e7 ff92 	bl	8000ae8 <__aeabi_dcmpeq>
 8018bc4:	2800      	cmp	r0, #0
 8018bc6:	d16c      	bne.n	8018ca2 <pow+0x146>
 8018bc8:	ec47 6b10 	vmov	d0, r6, r7
 8018bcc:	f000 fe53 	bl	8019876 <finite>
 8018bd0:	2800      	cmp	r0, #0
 8018bd2:	d0e8      	beq.n	8018ba6 <pow+0x4a>
 8018bd4:	2200      	movs	r2, #0
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	4630      	mov	r0, r6
 8018bda:	4639      	mov	r1, r7
 8018bdc:	f7e7 ff8e 	bl	8000afc <__aeabi_dcmplt>
 8018be0:	2800      	cmp	r0, #0
 8018be2:	d0e0      	beq.n	8018ba6 <pow+0x4a>
 8018be4:	f000 ff76 	bl	8019ad4 <__errno>
 8018be8:	2321      	movs	r3, #33	; 0x21
 8018bea:	6003      	str	r3, [r0, #0]
 8018bec:	2400      	movs	r4, #0
 8018bee:	4d2f      	ldr	r5, [pc, #188]	; (8018cac <pow+0x150>)
 8018bf0:	e7d9      	b.n	8018ba6 <pow+0x4a>
 8018bf2:	ec45 4b10 	vmov	d0, r4, r5
 8018bf6:	f000 fe3e 	bl	8019876 <finite>
 8018bfa:	bbb8      	cbnz	r0, 8018c6c <pow+0x110>
 8018bfc:	ec49 8b10 	vmov	d0, r8, r9
 8018c00:	f000 fe39 	bl	8019876 <finite>
 8018c04:	b390      	cbz	r0, 8018c6c <pow+0x110>
 8018c06:	ec47 6b10 	vmov	d0, r6, r7
 8018c0a:	f000 fe34 	bl	8019876 <finite>
 8018c0e:	b368      	cbz	r0, 8018c6c <pow+0x110>
 8018c10:	4622      	mov	r2, r4
 8018c12:	462b      	mov	r3, r5
 8018c14:	4620      	mov	r0, r4
 8018c16:	4629      	mov	r1, r5
 8018c18:	f7e7 ff98 	bl	8000b4c <__aeabi_dcmpun>
 8018c1c:	b160      	cbz	r0, 8018c38 <pow+0xdc>
 8018c1e:	f000 ff59 	bl	8019ad4 <__errno>
 8018c22:	2321      	movs	r3, #33	; 0x21
 8018c24:	6003      	str	r3, [r0, #0]
 8018c26:	2200      	movs	r2, #0
 8018c28:	2300      	movs	r3, #0
 8018c2a:	4610      	mov	r0, r2
 8018c2c:	4619      	mov	r1, r3
 8018c2e:	f7e7 fe1d 	bl	800086c <__aeabi_ddiv>
 8018c32:	4604      	mov	r4, r0
 8018c34:	460d      	mov	r5, r1
 8018c36:	e7b6      	b.n	8018ba6 <pow+0x4a>
 8018c38:	f000 ff4c 	bl	8019ad4 <__errno>
 8018c3c:	2322      	movs	r3, #34	; 0x22
 8018c3e:	6003      	str	r3, [r0, #0]
 8018c40:	2200      	movs	r2, #0
 8018c42:	2300      	movs	r3, #0
 8018c44:	4640      	mov	r0, r8
 8018c46:	4649      	mov	r1, r9
 8018c48:	f7e7 ff58 	bl	8000afc <__aeabi_dcmplt>
 8018c4c:	2400      	movs	r4, #0
 8018c4e:	b158      	cbz	r0, 8018c68 <pow+0x10c>
 8018c50:	ec47 6b10 	vmov	d0, r6, r7
 8018c54:	f000 fe24 	bl	80198a0 <rint>
 8018c58:	4632      	mov	r2, r6
 8018c5a:	ec51 0b10 	vmov	r0, r1, d0
 8018c5e:	463b      	mov	r3, r7
 8018c60:	f7e7 ff42 	bl	8000ae8 <__aeabi_dcmpeq>
 8018c64:	2800      	cmp	r0, #0
 8018c66:	d0c2      	beq.n	8018bee <pow+0x92>
 8018c68:	4d11      	ldr	r5, [pc, #68]	; (8018cb0 <pow+0x154>)
 8018c6a:	e79c      	b.n	8018ba6 <pow+0x4a>
 8018c6c:	2200      	movs	r2, #0
 8018c6e:	2300      	movs	r3, #0
 8018c70:	4620      	mov	r0, r4
 8018c72:	4629      	mov	r1, r5
 8018c74:	f7e7 ff38 	bl	8000ae8 <__aeabi_dcmpeq>
 8018c78:	2800      	cmp	r0, #0
 8018c7a:	d094      	beq.n	8018ba6 <pow+0x4a>
 8018c7c:	ec49 8b10 	vmov	d0, r8, r9
 8018c80:	f000 fdf9 	bl	8019876 <finite>
 8018c84:	2800      	cmp	r0, #0
 8018c86:	d08e      	beq.n	8018ba6 <pow+0x4a>
 8018c88:	ec47 6b10 	vmov	d0, r6, r7
 8018c8c:	f000 fdf3 	bl	8019876 <finite>
 8018c90:	2800      	cmp	r0, #0
 8018c92:	d088      	beq.n	8018ba6 <pow+0x4a>
 8018c94:	f000 ff1e 	bl	8019ad4 <__errno>
 8018c98:	2322      	movs	r3, #34	; 0x22
 8018c9a:	6003      	str	r3, [r0, #0]
 8018c9c:	2400      	movs	r4, #0
 8018c9e:	2500      	movs	r5, #0
 8018ca0:	e781      	b.n	8018ba6 <pow+0x4a>
 8018ca2:	4d04      	ldr	r5, [pc, #16]	; (8018cb4 <pow+0x158>)
 8018ca4:	2400      	movs	r4, #0
 8018ca6:	e77e      	b.n	8018ba6 <pow+0x4a>
 8018ca8:	200001d4 	.word	0x200001d4
 8018cac:	fff00000 	.word	0xfff00000
 8018cb0:	7ff00000 	.word	0x7ff00000
 8018cb4:	3ff00000 	.word	0x3ff00000

08018cb8 <__ieee754_pow>:
 8018cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cbc:	ed2d 8b06 	vpush	{d8-d10}
 8018cc0:	b08d      	sub	sp, #52	; 0x34
 8018cc2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8018cc6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8018cca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8018cce:	ea56 0100 	orrs.w	r1, r6, r0
 8018cd2:	ec53 2b10 	vmov	r2, r3, d0
 8018cd6:	f000 84d1 	beq.w	801967c <__ieee754_pow+0x9c4>
 8018cda:	497f      	ldr	r1, [pc, #508]	; (8018ed8 <__ieee754_pow+0x220>)
 8018cdc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8018ce0:	428c      	cmp	r4, r1
 8018ce2:	ee10 8a10 	vmov	r8, s0
 8018ce6:	4699      	mov	r9, r3
 8018ce8:	dc09      	bgt.n	8018cfe <__ieee754_pow+0x46>
 8018cea:	d103      	bne.n	8018cf4 <__ieee754_pow+0x3c>
 8018cec:	b97a      	cbnz	r2, 8018d0e <__ieee754_pow+0x56>
 8018cee:	42a6      	cmp	r6, r4
 8018cf0:	dd02      	ble.n	8018cf8 <__ieee754_pow+0x40>
 8018cf2:	e00c      	b.n	8018d0e <__ieee754_pow+0x56>
 8018cf4:	428e      	cmp	r6, r1
 8018cf6:	dc02      	bgt.n	8018cfe <__ieee754_pow+0x46>
 8018cf8:	428e      	cmp	r6, r1
 8018cfa:	d110      	bne.n	8018d1e <__ieee754_pow+0x66>
 8018cfc:	b178      	cbz	r0, 8018d1e <__ieee754_pow+0x66>
 8018cfe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018d02:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018d06:	ea54 0308 	orrs.w	r3, r4, r8
 8018d0a:	f000 84b7 	beq.w	801967c <__ieee754_pow+0x9c4>
 8018d0e:	4873      	ldr	r0, [pc, #460]	; (8018edc <__ieee754_pow+0x224>)
 8018d10:	b00d      	add	sp, #52	; 0x34
 8018d12:	ecbd 8b06 	vpop	{d8-d10}
 8018d16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d1a:	f000 bdb9 	b.w	8019890 <nan>
 8018d1e:	f1b9 0f00 	cmp.w	r9, #0
 8018d22:	da36      	bge.n	8018d92 <__ieee754_pow+0xda>
 8018d24:	496e      	ldr	r1, [pc, #440]	; (8018ee0 <__ieee754_pow+0x228>)
 8018d26:	428e      	cmp	r6, r1
 8018d28:	dc51      	bgt.n	8018dce <__ieee754_pow+0x116>
 8018d2a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8018d2e:	428e      	cmp	r6, r1
 8018d30:	f340 84af 	ble.w	8019692 <__ieee754_pow+0x9da>
 8018d34:	1531      	asrs	r1, r6, #20
 8018d36:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8018d3a:	2914      	cmp	r1, #20
 8018d3c:	dd0f      	ble.n	8018d5e <__ieee754_pow+0xa6>
 8018d3e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8018d42:	fa20 fc01 	lsr.w	ip, r0, r1
 8018d46:	fa0c f101 	lsl.w	r1, ip, r1
 8018d4a:	4281      	cmp	r1, r0
 8018d4c:	f040 84a1 	bne.w	8019692 <__ieee754_pow+0x9da>
 8018d50:	f00c 0c01 	and.w	ip, ip, #1
 8018d54:	f1cc 0102 	rsb	r1, ip, #2
 8018d58:	9100      	str	r1, [sp, #0]
 8018d5a:	b180      	cbz	r0, 8018d7e <__ieee754_pow+0xc6>
 8018d5c:	e059      	b.n	8018e12 <__ieee754_pow+0x15a>
 8018d5e:	2800      	cmp	r0, #0
 8018d60:	d155      	bne.n	8018e0e <__ieee754_pow+0x156>
 8018d62:	f1c1 0114 	rsb	r1, r1, #20
 8018d66:	fa46 fc01 	asr.w	ip, r6, r1
 8018d6a:	fa0c f101 	lsl.w	r1, ip, r1
 8018d6e:	42b1      	cmp	r1, r6
 8018d70:	f040 848c 	bne.w	801968c <__ieee754_pow+0x9d4>
 8018d74:	f00c 0c01 	and.w	ip, ip, #1
 8018d78:	f1cc 0102 	rsb	r1, ip, #2
 8018d7c:	9100      	str	r1, [sp, #0]
 8018d7e:	4959      	ldr	r1, [pc, #356]	; (8018ee4 <__ieee754_pow+0x22c>)
 8018d80:	428e      	cmp	r6, r1
 8018d82:	d12d      	bne.n	8018de0 <__ieee754_pow+0x128>
 8018d84:	2f00      	cmp	r7, #0
 8018d86:	da79      	bge.n	8018e7c <__ieee754_pow+0x1c4>
 8018d88:	4956      	ldr	r1, [pc, #344]	; (8018ee4 <__ieee754_pow+0x22c>)
 8018d8a:	2000      	movs	r0, #0
 8018d8c:	f7e7 fd6e 	bl	800086c <__aeabi_ddiv>
 8018d90:	e016      	b.n	8018dc0 <__ieee754_pow+0x108>
 8018d92:	2100      	movs	r1, #0
 8018d94:	9100      	str	r1, [sp, #0]
 8018d96:	2800      	cmp	r0, #0
 8018d98:	d13b      	bne.n	8018e12 <__ieee754_pow+0x15a>
 8018d9a:	494f      	ldr	r1, [pc, #316]	; (8018ed8 <__ieee754_pow+0x220>)
 8018d9c:	428e      	cmp	r6, r1
 8018d9e:	d1ee      	bne.n	8018d7e <__ieee754_pow+0xc6>
 8018da0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8018da4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018da8:	ea53 0308 	orrs.w	r3, r3, r8
 8018dac:	f000 8466 	beq.w	801967c <__ieee754_pow+0x9c4>
 8018db0:	4b4d      	ldr	r3, [pc, #308]	; (8018ee8 <__ieee754_pow+0x230>)
 8018db2:	429c      	cmp	r4, r3
 8018db4:	dd0d      	ble.n	8018dd2 <__ieee754_pow+0x11a>
 8018db6:	2f00      	cmp	r7, #0
 8018db8:	f280 8464 	bge.w	8019684 <__ieee754_pow+0x9cc>
 8018dbc:	2000      	movs	r0, #0
 8018dbe:	2100      	movs	r1, #0
 8018dc0:	ec41 0b10 	vmov	d0, r0, r1
 8018dc4:	b00d      	add	sp, #52	; 0x34
 8018dc6:	ecbd 8b06 	vpop	{d8-d10}
 8018dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dce:	2102      	movs	r1, #2
 8018dd0:	e7e0      	b.n	8018d94 <__ieee754_pow+0xdc>
 8018dd2:	2f00      	cmp	r7, #0
 8018dd4:	daf2      	bge.n	8018dbc <__ieee754_pow+0x104>
 8018dd6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8018dda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018dde:	e7ef      	b.n	8018dc0 <__ieee754_pow+0x108>
 8018de0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8018de4:	d104      	bne.n	8018df0 <__ieee754_pow+0x138>
 8018de6:	4610      	mov	r0, r2
 8018de8:	4619      	mov	r1, r3
 8018dea:	f7e7 fc15 	bl	8000618 <__aeabi_dmul>
 8018dee:	e7e7      	b.n	8018dc0 <__ieee754_pow+0x108>
 8018df0:	493e      	ldr	r1, [pc, #248]	; (8018eec <__ieee754_pow+0x234>)
 8018df2:	428f      	cmp	r7, r1
 8018df4:	d10d      	bne.n	8018e12 <__ieee754_pow+0x15a>
 8018df6:	f1b9 0f00 	cmp.w	r9, #0
 8018dfa:	db0a      	blt.n	8018e12 <__ieee754_pow+0x15a>
 8018dfc:	ec43 2b10 	vmov	d0, r2, r3
 8018e00:	b00d      	add	sp, #52	; 0x34
 8018e02:	ecbd 8b06 	vpop	{d8-d10}
 8018e06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e0a:	f000 bc77 	b.w	80196fc <__ieee754_sqrt>
 8018e0e:	2100      	movs	r1, #0
 8018e10:	9100      	str	r1, [sp, #0]
 8018e12:	ec43 2b10 	vmov	d0, r2, r3
 8018e16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018e1a:	f000 fd23 	bl	8019864 <fabs>
 8018e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018e22:	ec51 0b10 	vmov	r0, r1, d0
 8018e26:	f1b8 0f00 	cmp.w	r8, #0
 8018e2a:	d12a      	bne.n	8018e82 <__ieee754_pow+0x1ca>
 8018e2c:	b12c      	cbz	r4, 8018e3a <__ieee754_pow+0x182>
 8018e2e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8018ee4 <__ieee754_pow+0x22c>
 8018e32:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8018e36:	45e6      	cmp	lr, ip
 8018e38:	d123      	bne.n	8018e82 <__ieee754_pow+0x1ca>
 8018e3a:	2f00      	cmp	r7, #0
 8018e3c:	da05      	bge.n	8018e4a <__ieee754_pow+0x192>
 8018e3e:	4602      	mov	r2, r0
 8018e40:	460b      	mov	r3, r1
 8018e42:	2000      	movs	r0, #0
 8018e44:	4927      	ldr	r1, [pc, #156]	; (8018ee4 <__ieee754_pow+0x22c>)
 8018e46:	f7e7 fd11 	bl	800086c <__aeabi_ddiv>
 8018e4a:	f1b9 0f00 	cmp.w	r9, #0
 8018e4e:	dab7      	bge.n	8018dc0 <__ieee754_pow+0x108>
 8018e50:	9b00      	ldr	r3, [sp, #0]
 8018e52:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018e56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018e5a:	4323      	orrs	r3, r4
 8018e5c:	d108      	bne.n	8018e70 <__ieee754_pow+0x1b8>
 8018e5e:	4602      	mov	r2, r0
 8018e60:	460b      	mov	r3, r1
 8018e62:	4610      	mov	r0, r2
 8018e64:	4619      	mov	r1, r3
 8018e66:	f7e7 fa1f 	bl	80002a8 <__aeabi_dsub>
 8018e6a:	4602      	mov	r2, r0
 8018e6c:	460b      	mov	r3, r1
 8018e6e:	e78d      	b.n	8018d8c <__ieee754_pow+0xd4>
 8018e70:	9b00      	ldr	r3, [sp, #0]
 8018e72:	2b01      	cmp	r3, #1
 8018e74:	d1a4      	bne.n	8018dc0 <__ieee754_pow+0x108>
 8018e76:	4602      	mov	r2, r0
 8018e78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018e7c:	4610      	mov	r0, r2
 8018e7e:	4619      	mov	r1, r3
 8018e80:	e79e      	b.n	8018dc0 <__ieee754_pow+0x108>
 8018e82:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8018e86:	f10c 35ff 	add.w	r5, ip, #4294967295
 8018e8a:	950a      	str	r5, [sp, #40]	; 0x28
 8018e8c:	9d00      	ldr	r5, [sp, #0]
 8018e8e:	46ac      	mov	ip, r5
 8018e90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018e92:	ea5c 0505 	orrs.w	r5, ip, r5
 8018e96:	d0e4      	beq.n	8018e62 <__ieee754_pow+0x1aa>
 8018e98:	4b15      	ldr	r3, [pc, #84]	; (8018ef0 <__ieee754_pow+0x238>)
 8018e9a:	429e      	cmp	r6, r3
 8018e9c:	f340 80fc 	ble.w	8019098 <__ieee754_pow+0x3e0>
 8018ea0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018ea4:	429e      	cmp	r6, r3
 8018ea6:	4b10      	ldr	r3, [pc, #64]	; (8018ee8 <__ieee754_pow+0x230>)
 8018ea8:	dd07      	ble.n	8018eba <__ieee754_pow+0x202>
 8018eaa:	429c      	cmp	r4, r3
 8018eac:	dc0a      	bgt.n	8018ec4 <__ieee754_pow+0x20c>
 8018eae:	2f00      	cmp	r7, #0
 8018eb0:	da84      	bge.n	8018dbc <__ieee754_pow+0x104>
 8018eb2:	a307      	add	r3, pc, #28	; (adr r3, 8018ed0 <__ieee754_pow+0x218>)
 8018eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eb8:	e795      	b.n	8018de6 <__ieee754_pow+0x12e>
 8018eba:	429c      	cmp	r4, r3
 8018ebc:	dbf7      	blt.n	8018eae <__ieee754_pow+0x1f6>
 8018ebe:	4b09      	ldr	r3, [pc, #36]	; (8018ee4 <__ieee754_pow+0x22c>)
 8018ec0:	429c      	cmp	r4, r3
 8018ec2:	dd17      	ble.n	8018ef4 <__ieee754_pow+0x23c>
 8018ec4:	2f00      	cmp	r7, #0
 8018ec6:	dcf4      	bgt.n	8018eb2 <__ieee754_pow+0x1fa>
 8018ec8:	e778      	b.n	8018dbc <__ieee754_pow+0x104>
 8018eca:	bf00      	nop
 8018ecc:	f3af 8000 	nop.w
 8018ed0:	8800759c 	.word	0x8800759c
 8018ed4:	7e37e43c 	.word	0x7e37e43c
 8018ed8:	7ff00000 	.word	0x7ff00000
 8018edc:	08020f5b 	.word	0x08020f5b
 8018ee0:	433fffff 	.word	0x433fffff
 8018ee4:	3ff00000 	.word	0x3ff00000
 8018ee8:	3fefffff 	.word	0x3fefffff
 8018eec:	3fe00000 	.word	0x3fe00000
 8018ef0:	41e00000 	.word	0x41e00000
 8018ef4:	4b64      	ldr	r3, [pc, #400]	; (8019088 <__ieee754_pow+0x3d0>)
 8018ef6:	2200      	movs	r2, #0
 8018ef8:	f7e7 f9d6 	bl	80002a8 <__aeabi_dsub>
 8018efc:	a356      	add	r3, pc, #344	; (adr r3, 8019058 <__ieee754_pow+0x3a0>)
 8018efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f02:	4604      	mov	r4, r0
 8018f04:	460d      	mov	r5, r1
 8018f06:	f7e7 fb87 	bl	8000618 <__aeabi_dmul>
 8018f0a:	a355      	add	r3, pc, #340	; (adr r3, 8019060 <__ieee754_pow+0x3a8>)
 8018f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f10:	4606      	mov	r6, r0
 8018f12:	460f      	mov	r7, r1
 8018f14:	4620      	mov	r0, r4
 8018f16:	4629      	mov	r1, r5
 8018f18:	f7e7 fb7e 	bl	8000618 <__aeabi_dmul>
 8018f1c:	4b5b      	ldr	r3, [pc, #364]	; (801908c <__ieee754_pow+0x3d4>)
 8018f1e:	4682      	mov	sl, r0
 8018f20:	468b      	mov	fp, r1
 8018f22:	2200      	movs	r2, #0
 8018f24:	4620      	mov	r0, r4
 8018f26:	4629      	mov	r1, r5
 8018f28:	f7e7 fb76 	bl	8000618 <__aeabi_dmul>
 8018f2c:	4602      	mov	r2, r0
 8018f2e:	460b      	mov	r3, r1
 8018f30:	a14d      	add	r1, pc, #308	; (adr r1, 8019068 <__ieee754_pow+0x3b0>)
 8018f32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f36:	f7e7 f9b7 	bl	80002a8 <__aeabi_dsub>
 8018f3a:	4622      	mov	r2, r4
 8018f3c:	462b      	mov	r3, r5
 8018f3e:	f7e7 fb6b 	bl	8000618 <__aeabi_dmul>
 8018f42:	4602      	mov	r2, r0
 8018f44:	460b      	mov	r3, r1
 8018f46:	2000      	movs	r0, #0
 8018f48:	4951      	ldr	r1, [pc, #324]	; (8019090 <__ieee754_pow+0x3d8>)
 8018f4a:	f7e7 f9ad 	bl	80002a8 <__aeabi_dsub>
 8018f4e:	4622      	mov	r2, r4
 8018f50:	4680      	mov	r8, r0
 8018f52:	4689      	mov	r9, r1
 8018f54:	462b      	mov	r3, r5
 8018f56:	4620      	mov	r0, r4
 8018f58:	4629      	mov	r1, r5
 8018f5a:	f7e7 fb5d 	bl	8000618 <__aeabi_dmul>
 8018f5e:	4602      	mov	r2, r0
 8018f60:	460b      	mov	r3, r1
 8018f62:	4640      	mov	r0, r8
 8018f64:	4649      	mov	r1, r9
 8018f66:	f7e7 fb57 	bl	8000618 <__aeabi_dmul>
 8018f6a:	a341      	add	r3, pc, #260	; (adr r3, 8019070 <__ieee754_pow+0x3b8>)
 8018f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f70:	f7e7 fb52 	bl	8000618 <__aeabi_dmul>
 8018f74:	4602      	mov	r2, r0
 8018f76:	460b      	mov	r3, r1
 8018f78:	4650      	mov	r0, sl
 8018f7a:	4659      	mov	r1, fp
 8018f7c:	f7e7 f994 	bl	80002a8 <__aeabi_dsub>
 8018f80:	4602      	mov	r2, r0
 8018f82:	460b      	mov	r3, r1
 8018f84:	4680      	mov	r8, r0
 8018f86:	4689      	mov	r9, r1
 8018f88:	4630      	mov	r0, r6
 8018f8a:	4639      	mov	r1, r7
 8018f8c:	f7e7 f98e 	bl	80002ac <__adddf3>
 8018f90:	2400      	movs	r4, #0
 8018f92:	4632      	mov	r2, r6
 8018f94:	463b      	mov	r3, r7
 8018f96:	4620      	mov	r0, r4
 8018f98:	460d      	mov	r5, r1
 8018f9a:	f7e7 f985 	bl	80002a8 <__aeabi_dsub>
 8018f9e:	4602      	mov	r2, r0
 8018fa0:	460b      	mov	r3, r1
 8018fa2:	4640      	mov	r0, r8
 8018fa4:	4649      	mov	r1, r9
 8018fa6:	f7e7 f97f 	bl	80002a8 <__aeabi_dsub>
 8018faa:	9b00      	ldr	r3, [sp, #0]
 8018fac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018fae:	3b01      	subs	r3, #1
 8018fb0:	4313      	orrs	r3, r2
 8018fb2:	4682      	mov	sl, r0
 8018fb4:	468b      	mov	fp, r1
 8018fb6:	f040 81f1 	bne.w	801939c <__ieee754_pow+0x6e4>
 8018fba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8019078 <__ieee754_pow+0x3c0>
 8018fbe:	eeb0 8a47 	vmov.f32	s16, s14
 8018fc2:	eef0 8a67 	vmov.f32	s17, s15
 8018fc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018fca:	2600      	movs	r6, #0
 8018fcc:	4632      	mov	r2, r6
 8018fce:	463b      	mov	r3, r7
 8018fd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018fd4:	f7e7 f968 	bl	80002a8 <__aeabi_dsub>
 8018fd8:	4622      	mov	r2, r4
 8018fda:	462b      	mov	r3, r5
 8018fdc:	f7e7 fb1c 	bl	8000618 <__aeabi_dmul>
 8018fe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018fe4:	4680      	mov	r8, r0
 8018fe6:	4689      	mov	r9, r1
 8018fe8:	4650      	mov	r0, sl
 8018fea:	4659      	mov	r1, fp
 8018fec:	f7e7 fb14 	bl	8000618 <__aeabi_dmul>
 8018ff0:	4602      	mov	r2, r0
 8018ff2:	460b      	mov	r3, r1
 8018ff4:	4640      	mov	r0, r8
 8018ff6:	4649      	mov	r1, r9
 8018ff8:	f7e7 f958 	bl	80002ac <__adddf3>
 8018ffc:	4632      	mov	r2, r6
 8018ffe:	463b      	mov	r3, r7
 8019000:	4680      	mov	r8, r0
 8019002:	4689      	mov	r9, r1
 8019004:	4620      	mov	r0, r4
 8019006:	4629      	mov	r1, r5
 8019008:	f7e7 fb06 	bl	8000618 <__aeabi_dmul>
 801900c:	460b      	mov	r3, r1
 801900e:	4604      	mov	r4, r0
 8019010:	460d      	mov	r5, r1
 8019012:	4602      	mov	r2, r0
 8019014:	4649      	mov	r1, r9
 8019016:	4640      	mov	r0, r8
 8019018:	f7e7 f948 	bl	80002ac <__adddf3>
 801901c:	4b1d      	ldr	r3, [pc, #116]	; (8019094 <__ieee754_pow+0x3dc>)
 801901e:	4299      	cmp	r1, r3
 8019020:	ec45 4b19 	vmov	d9, r4, r5
 8019024:	4606      	mov	r6, r0
 8019026:	460f      	mov	r7, r1
 8019028:	468b      	mov	fp, r1
 801902a:	f340 82fe 	ble.w	801962a <__ieee754_pow+0x972>
 801902e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019032:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019036:	4303      	orrs	r3, r0
 8019038:	f000 81f0 	beq.w	801941c <__ieee754_pow+0x764>
 801903c:	a310      	add	r3, pc, #64	; (adr r3, 8019080 <__ieee754_pow+0x3c8>)
 801903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019042:	ec51 0b18 	vmov	r0, r1, d8
 8019046:	f7e7 fae7 	bl	8000618 <__aeabi_dmul>
 801904a:	a30d      	add	r3, pc, #52	; (adr r3, 8019080 <__ieee754_pow+0x3c8>)
 801904c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019050:	e6cb      	b.n	8018dea <__ieee754_pow+0x132>
 8019052:	bf00      	nop
 8019054:	f3af 8000 	nop.w
 8019058:	60000000 	.word	0x60000000
 801905c:	3ff71547 	.word	0x3ff71547
 8019060:	f85ddf44 	.word	0xf85ddf44
 8019064:	3e54ae0b 	.word	0x3e54ae0b
 8019068:	55555555 	.word	0x55555555
 801906c:	3fd55555 	.word	0x3fd55555
 8019070:	652b82fe 	.word	0x652b82fe
 8019074:	3ff71547 	.word	0x3ff71547
 8019078:	00000000 	.word	0x00000000
 801907c:	bff00000 	.word	0xbff00000
 8019080:	8800759c 	.word	0x8800759c
 8019084:	7e37e43c 	.word	0x7e37e43c
 8019088:	3ff00000 	.word	0x3ff00000
 801908c:	3fd00000 	.word	0x3fd00000
 8019090:	3fe00000 	.word	0x3fe00000
 8019094:	408fffff 	.word	0x408fffff
 8019098:	4bd7      	ldr	r3, [pc, #860]	; (80193f8 <__ieee754_pow+0x740>)
 801909a:	ea03 0309 	and.w	r3, r3, r9
 801909e:	2200      	movs	r2, #0
 80190a0:	b92b      	cbnz	r3, 80190ae <__ieee754_pow+0x3f6>
 80190a2:	4bd6      	ldr	r3, [pc, #856]	; (80193fc <__ieee754_pow+0x744>)
 80190a4:	f7e7 fab8 	bl	8000618 <__aeabi_dmul>
 80190a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80190ac:	460c      	mov	r4, r1
 80190ae:	1523      	asrs	r3, r4, #20
 80190b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80190b4:	4413      	add	r3, r2
 80190b6:	9309      	str	r3, [sp, #36]	; 0x24
 80190b8:	4bd1      	ldr	r3, [pc, #836]	; (8019400 <__ieee754_pow+0x748>)
 80190ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80190be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80190c2:	429c      	cmp	r4, r3
 80190c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80190c8:	dd08      	ble.n	80190dc <__ieee754_pow+0x424>
 80190ca:	4bce      	ldr	r3, [pc, #824]	; (8019404 <__ieee754_pow+0x74c>)
 80190cc:	429c      	cmp	r4, r3
 80190ce:	f340 8163 	ble.w	8019398 <__ieee754_pow+0x6e0>
 80190d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190d4:	3301      	adds	r3, #1
 80190d6:	9309      	str	r3, [sp, #36]	; 0x24
 80190d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80190dc:	2400      	movs	r4, #0
 80190de:	00e3      	lsls	r3, r4, #3
 80190e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80190e2:	4bc9      	ldr	r3, [pc, #804]	; (8019408 <__ieee754_pow+0x750>)
 80190e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80190e8:	ed93 7b00 	vldr	d7, [r3]
 80190ec:	4629      	mov	r1, r5
 80190ee:	ec53 2b17 	vmov	r2, r3, d7
 80190f2:	eeb0 8a47 	vmov.f32	s16, s14
 80190f6:	eef0 8a67 	vmov.f32	s17, s15
 80190fa:	4682      	mov	sl, r0
 80190fc:	f7e7 f8d4 	bl	80002a8 <__aeabi_dsub>
 8019100:	4652      	mov	r2, sl
 8019102:	4606      	mov	r6, r0
 8019104:	460f      	mov	r7, r1
 8019106:	462b      	mov	r3, r5
 8019108:	ec51 0b18 	vmov	r0, r1, d8
 801910c:	f7e7 f8ce 	bl	80002ac <__adddf3>
 8019110:	4602      	mov	r2, r0
 8019112:	460b      	mov	r3, r1
 8019114:	2000      	movs	r0, #0
 8019116:	49bd      	ldr	r1, [pc, #756]	; (801940c <__ieee754_pow+0x754>)
 8019118:	f7e7 fba8 	bl	800086c <__aeabi_ddiv>
 801911c:	ec41 0b19 	vmov	d9, r0, r1
 8019120:	4602      	mov	r2, r0
 8019122:	460b      	mov	r3, r1
 8019124:	4630      	mov	r0, r6
 8019126:	4639      	mov	r1, r7
 8019128:	f7e7 fa76 	bl	8000618 <__aeabi_dmul>
 801912c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019130:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019134:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019138:	2300      	movs	r3, #0
 801913a:	9304      	str	r3, [sp, #16]
 801913c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8019140:	46ab      	mov	fp, r5
 8019142:	106d      	asrs	r5, r5, #1
 8019144:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019148:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801914c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019150:	2200      	movs	r2, #0
 8019152:	4640      	mov	r0, r8
 8019154:	4649      	mov	r1, r9
 8019156:	4614      	mov	r4, r2
 8019158:	461d      	mov	r5, r3
 801915a:	f7e7 fa5d 	bl	8000618 <__aeabi_dmul>
 801915e:	4602      	mov	r2, r0
 8019160:	460b      	mov	r3, r1
 8019162:	4630      	mov	r0, r6
 8019164:	4639      	mov	r1, r7
 8019166:	f7e7 f89f 	bl	80002a8 <__aeabi_dsub>
 801916a:	ec53 2b18 	vmov	r2, r3, d8
 801916e:	4606      	mov	r6, r0
 8019170:	460f      	mov	r7, r1
 8019172:	4620      	mov	r0, r4
 8019174:	4629      	mov	r1, r5
 8019176:	f7e7 f897 	bl	80002a8 <__aeabi_dsub>
 801917a:	4602      	mov	r2, r0
 801917c:	460b      	mov	r3, r1
 801917e:	4650      	mov	r0, sl
 8019180:	4659      	mov	r1, fp
 8019182:	f7e7 f891 	bl	80002a8 <__aeabi_dsub>
 8019186:	4642      	mov	r2, r8
 8019188:	464b      	mov	r3, r9
 801918a:	f7e7 fa45 	bl	8000618 <__aeabi_dmul>
 801918e:	4602      	mov	r2, r0
 8019190:	460b      	mov	r3, r1
 8019192:	4630      	mov	r0, r6
 8019194:	4639      	mov	r1, r7
 8019196:	f7e7 f887 	bl	80002a8 <__aeabi_dsub>
 801919a:	ec53 2b19 	vmov	r2, r3, d9
 801919e:	f7e7 fa3b 	bl	8000618 <__aeabi_dmul>
 80191a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80191a6:	ec41 0b18 	vmov	d8, r0, r1
 80191aa:	4610      	mov	r0, r2
 80191ac:	4619      	mov	r1, r3
 80191ae:	f7e7 fa33 	bl	8000618 <__aeabi_dmul>
 80191b2:	a37d      	add	r3, pc, #500	; (adr r3, 80193a8 <__ieee754_pow+0x6f0>)
 80191b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191b8:	4604      	mov	r4, r0
 80191ba:	460d      	mov	r5, r1
 80191bc:	f7e7 fa2c 	bl	8000618 <__aeabi_dmul>
 80191c0:	a37b      	add	r3, pc, #492	; (adr r3, 80193b0 <__ieee754_pow+0x6f8>)
 80191c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191c6:	f7e7 f871 	bl	80002ac <__adddf3>
 80191ca:	4622      	mov	r2, r4
 80191cc:	462b      	mov	r3, r5
 80191ce:	f7e7 fa23 	bl	8000618 <__aeabi_dmul>
 80191d2:	a379      	add	r3, pc, #484	; (adr r3, 80193b8 <__ieee754_pow+0x700>)
 80191d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191d8:	f7e7 f868 	bl	80002ac <__adddf3>
 80191dc:	4622      	mov	r2, r4
 80191de:	462b      	mov	r3, r5
 80191e0:	f7e7 fa1a 	bl	8000618 <__aeabi_dmul>
 80191e4:	a376      	add	r3, pc, #472	; (adr r3, 80193c0 <__ieee754_pow+0x708>)
 80191e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191ea:	f7e7 f85f 	bl	80002ac <__adddf3>
 80191ee:	4622      	mov	r2, r4
 80191f0:	462b      	mov	r3, r5
 80191f2:	f7e7 fa11 	bl	8000618 <__aeabi_dmul>
 80191f6:	a374      	add	r3, pc, #464	; (adr r3, 80193c8 <__ieee754_pow+0x710>)
 80191f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191fc:	f7e7 f856 	bl	80002ac <__adddf3>
 8019200:	4622      	mov	r2, r4
 8019202:	462b      	mov	r3, r5
 8019204:	f7e7 fa08 	bl	8000618 <__aeabi_dmul>
 8019208:	a371      	add	r3, pc, #452	; (adr r3, 80193d0 <__ieee754_pow+0x718>)
 801920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801920e:	f7e7 f84d 	bl	80002ac <__adddf3>
 8019212:	4622      	mov	r2, r4
 8019214:	4606      	mov	r6, r0
 8019216:	460f      	mov	r7, r1
 8019218:	462b      	mov	r3, r5
 801921a:	4620      	mov	r0, r4
 801921c:	4629      	mov	r1, r5
 801921e:	f7e7 f9fb 	bl	8000618 <__aeabi_dmul>
 8019222:	4602      	mov	r2, r0
 8019224:	460b      	mov	r3, r1
 8019226:	4630      	mov	r0, r6
 8019228:	4639      	mov	r1, r7
 801922a:	f7e7 f9f5 	bl	8000618 <__aeabi_dmul>
 801922e:	4642      	mov	r2, r8
 8019230:	4604      	mov	r4, r0
 8019232:	460d      	mov	r5, r1
 8019234:	464b      	mov	r3, r9
 8019236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801923a:	f7e7 f837 	bl	80002ac <__adddf3>
 801923e:	ec53 2b18 	vmov	r2, r3, d8
 8019242:	f7e7 f9e9 	bl	8000618 <__aeabi_dmul>
 8019246:	4622      	mov	r2, r4
 8019248:	462b      	mov	r3, r5
 801924a:	f7e7 f82f 	bl	80002ac <__adddf3>
 801924e:	4642      	mov	r2, r8
 8019250:	4682      	mov	sl, r0
 8019252:	468b      	mov	fp, r1
 8019254:	464b      	mov	r3, r9
 8019256:	4640      	mov	r0, r8
 8019258:	4649      	mov	r1, r9
 801925a:	f7e7 f9dd 	bl	8000618 <__aeabi_dmul>
 801925e:	4b6c      	ldr	r3, [pc, #432]	; (8019410 <__ieee754_pow+0x758>)
 8019260:	2200      	movs	r2, #0
 8019262:	4606      	mov	r6, r0
 8019264:	460f      	mov	r7, r1
 8019266:	f7e7 f821 	bl	80002ac <__adddf3>
 801926a:	4652      	mov	r2, sl
 801926c:	465b      	mov	r3, fp
 801926e:	f7e7 f81d 	bl	80002ac <__adddf3>
 8019272:	9c04      	ldr	r4, [sp, #16]
 8019274:	460d      	mov	r5, r1
 8019276:	4622      	mov	r2, r4
 8019278:	460b      	mov	r3, r1
 801927a:	4640      	mov	r0, r8
 801927c:	4649      	mov	r1, r9
 801927e:	f7e7 f9cb 	bl	8000618 <__aeabi_dmul>
 8019282:	4b63      	ldr	r3, [pc, #396]	; (8019410 <__ieee754_pow+0x758>)
 8019284:	4680      	mov	r8, r0
 8019286:	4689      	mov	r9, r1
 8019288:	2200      	movs	r2, #0
 801928a:	4620      	mov	r0, r4
 801928c:	4629      	mov	r1, r5
 801928e:	f7e7 f80b 	bl	80002a8 <__aeabi_dsub>
 8019292:	4632      	mov	r2, r6
 8019294:	463b      	mov	r3, r7
 8019296:	f7e7 f807 	bl	80002a8 <__aeabi_dsub>
 801929a:	4602      	mov	r2, r0
 801929c:	460b      	mov	r3, r1
 801929e:	4650      	mov	r0, sl
 80192a0:	4659      	mov	r1, fp
 80192a2:	f7e7 f801 	bl	80002a8 <__aeabi_dsub>
 80192a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80192aa:	f7e7 f9b5 	bl	8000618 <__aeabi_dmul>
 80192ae:	4622      	mov	r2, r4
 80192b0:	4606      	mov	r6, r0
 80192b2:	460f      	mov	r7, r1
 80192b4:	462b      	mov	r3, r5
 80192b6:	ec51 0b18 	vmov	r0, r1, d8
 80192ba:	f7e7 f9ad 	bl	8000618 <__aeabi_dmul>
 80192be:	4602      	mov	r2, r0
 80192c0:	460b      	mov	r3, r1
 80192c2:	4630      	mov	r0, r6
 80192c4:	4639      	mov	r1, r7
 80192c6:	f7e6 fff1 	bl	80002ac <__adddf3>
 80192ca:	4606      	mov	r6, r0
 80192cc:	460f      	mov	r7, r1
 80192ce:	4602      	mov	r2, r0
 80192d0:	460b      	mov	r3, r1
 80192d2:	4640      	mov	r0, r8
 80192d4:	4649      	mov	r1, r9
 80192d6:	f7e6 ffe9 	bl	80002ac <__adddf3>
 80192da:	9c04      	ldr	r4, [sp, #16]
 80192dc:	a33e      	add	r3, pc, #248	; (adr r3, 80193d8 <__ieee754_pow+0x720>)
 80192de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192e2:	4620      	mov	r0, r4
 80192e4:	460d      	mov	r5, r1
 80192e6:	f7e7 f997 	bl	8000618 <__aeabi_dmul>
 80192ea:	4642      	mov	r2, r8
 80192ec:	ec41 0b18 	vmov	d8, r0, r1
 80192f0:	464b      	mov	r3, r9
 80192f2:	4620      	mov	r0, r4
 80192f4:	4629      	mov	r1, r5
 80192f6:	f7e6 ffd7 	bl	80002a8 <__aeabi_dsub>
 80192fa:	4602      	mov	r2, r0
 80192fc:	460b      	mov	r3, r1
 80192fe:	4630      	mov	r0, r6
 8019300:	4639      	mov	r1, r7
 8019302:	f7e6 ffd1 	bl	80002a8 <__aeabi_dsub>
 8019306:	a336      	add	r3, pc, #216	; (adr r3, 80193e0 <__ieee754_pow+0x728>)
 8019308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801930c:	f7e7 f984 	bl	8000618 <__aeabi_dmul>
 8019310:	a335      	add	r3, pc, #212	; (adr r3, 80193e8 <__ieee754_pow+0x730>)
 8019312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019316:	4606      	mov	r6, r0
 8019318:	460f      	mov	r7, r1
 801931a:	4620      	mov	r0, r4
 801931c:	4629      	mov	r1, r5
 801931e:	f7e7 f97b 	bl	8000618 <__aeabi_dmul>
 8019322:	4602      	mov	r2, r0
 8019324:	460b      	mov	r3, r1
 8019326:	4630      	mov	r0, r6
 8019328:	4639      	mov	r1, r7
 801932a:	f7e6 ffbf 	bl	80002ac <__adddf3>
 801932e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019330:	4b38      	ldr	r3, [pc, #224]	; (8019414 <__ieee754_pow+0x75c>)
 8019332:	4413      	add	r3, r2
 8019334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019338:	f7e6 ffb8 	bl	80002ac <__adddf3>
 801933c:	4682      	mov	sl, r0
 801933e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019340:	468b      	mov	fp, r1
 8019342:	f7e7 f8ff 	bl	8000544 <__aeabi_i2d>
 8019346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019348:	4b33      	ldr	r3, [pc, #204]	; (8019418 <__ieee754_pow+0x760>)
 801934a:	4413      	add	r3, r2
 801934c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019350:	4606      	mov	r6, r0
 8019352:	460f      	mov	r7, r1
 8019354:	4652      	mov	r2, sl
 8019356:	465b      	mov	r3, fp
 8019358:	ec51 0b18 	vmov	r0, r1, d8
 801935c:	f7e6 ffa6 	bl	80002ac <__adddf3>
 8019360:	4642      	mov	r2, r8
 8019362:	464b      	mov	r3, r9
 8019364:	f7e6 ffa2 	bl	80002ac <__adddf3>
 8019368:	4632      	mov	r2, r6
 801936a:	463b      	mov	r3, r7
 801936c:	f7e6 ff9e 	bl	80002ac <__adddf3>
 8019370:	9c04      	ldr	r4, [sp, #16]
 8019372:	4632      	mov	r2, r6
 8019374:	463b      	mov	r3, r7
 8019376:	4620      	mov	r0, r4
 8019378:	460d      	mov	r5, r1
 801937a:	f7e6 ff95 	bl	80002a8 <__aeabi_dsub>
 801937e:	4642      	mov	r2, r8
 8019380:	464b      	mov	r3, r9
 8019382:	f7e6 ff91 	bl	80002a8 <__aeabi_dsub>
 8019386:	ec53 2b18 	vmov	r2, r3, d8
 801938a:	f7e6 ff8d 	bl	80002a8 <__aeabi_dsub>
 801938e:	4602      	mov	r2, r0
 8019390:	460b      	mov	r3, r1
 8019392:	4650      	mov	r0, sl
 8019394:	4659      	mov	r1, fp
 8019396:	e606      	b.n	8018fa6 <__ieee754_pow+0x2ee>
 8019398:	2401      	movs	r4, #1
 801939a:	e6a0      	b.n	80190de <__ieee754_pow+0x426>
 801939c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80193f0 <__ieee754_pow+0x738>
 80193a0:	e60d      	b.n	8018fbe <__ieee754_pow+0x306>
 80193a2:	bf00      	nop
 80193a4:	f3af 8000 	nop.w
 80193a8:	4a454eef 	.word	0x4a454eef
 80193ac:	3fca7e28 	.word	0x3fca7e28
 80193b0:	93c9db65 	.word	0x93c9db65
 80193b4:	3fcd864a 	.word	0x3fcd864a
 80193b8:	a91d4101 	.word	0xa91d4101
 80193bc:	3fd17460 	.word	0x3fd17460
 80193c0:	518f264d 	.word	0x518f264d
 80193c4:	3fd55555 	.word	0x3fd55555
 80193c8:	db6fabff 	.word	0xdb6fabff
 80193cc:	3fdb6db6 	.word	0x3fdb6db6
 80193d0:	33333303 	.word	0x33333303
 80193d4:	3fe33333 	.word	0x3fe33333
 80193d8:	e0000000 	.word	0xe0000000
 80193dc:	3feec709 	.word	0x3feec709
 80193e0:	dc3a03fd 	.word	0xdc3a03fd
 80193e4:	3feec709 	.word	0x3feec709
 80193e8:	145b01f5 	.word	0x145b01f5
 80193ec:	be3e2fe0 	.word	0xbe3e2fe0
 80193f0:	00000000 	.word	0x00000000
 80193f4:	3ff00000 	.word	0x3ff00000
 80193f8:	7ff00000 	.word	0x7ff00000
 80193fc:	43400000 	.word	0x43400000
 8019400:	0003988e 	.word	0x0003988e
 8019404:	000bb679 	.word	0x000bb679
 8019408:	08020cf0 	.word	0x08020cf0
 801940c:	3ff00000 	.word	0x3ff00000
 8019410:	40080000 	.word	0x40080000
 8019414:	08020d10 	.word	0x08020d10
 8019418:	08020d00 	.word	0x08020d00
 801941c:	a3b5      	add	r3, pc, #724	; (adr r3, 80196f4 <__ieee754_pow+0xa3c>)
 801941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019422:	4640      	mov	r0, r8
 8019424:	4649      	mov	r1, r9
 8019426:	f7e6 ff41 	bl	80002ac <__adddf3>
 801942a:	4622      	mov	r2, r4
 801942c:	ec41 0b1a 	vmov	d10, r0, r1
 8019430:	462b      	mov	r3, r5
 8019432:	4630      	mov	r0, r6
 8019434:	4639      	mov	r1, r7
 8019436:	f7e6 ff37 	bl	80002a8 <__aeabi_dsub>
 801943a:	4602      	mov	r2, r0
 801943c:	460b      	mov	r3, r1
 801943e:	ec51 0b1a 	vmov	r0, r1, d10
 8019442:	f7e7 fb79 	bl	8000b38 <__aeabi_dcmpgt>
 8019446:	2800      	cmp	r0, #0
 8019448:	f47f adf8 	bne.w	801903c <__ieee754_pow+0x384>
 801944c:	4aa4      	ldr	r2, [pc, #656]	; (80196e0 <__ieee754_pow+0xa28>)
 801944e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019452:	4293      	cmp	r3, r2
 8019454:	f340 810b 	ble.w	801966e <__ieee754_pow+0x9b6>
 8019458:	151b      	asrs	r3, r3, #20
 801945a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801945e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8019462:	fa4a f303 	asr.w	r3, sl, r3
 8019466:	445b      	add	r3, fp
 8019468:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801946c:	4e9d      	ldr	r6, [pc, #628]	; (80196e4 <__ieee754_pow+0xa2c>)
 801946e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8019472:	4116      	asrs	r6, r2
 8019474:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019478:	2000      	movs	r0, #0
 801947a:	ea23 0106 	bic.w	r1, r3, r6
 801947e:	f1c2 0214 	rsb	r2, r2, #20
 8019482:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8019486:	fa4a fa02 	asr.w	sl, sl, r2
 801948a:	f1bb 0f00 	cmp.w	fp, #0
 801948e:	4602      	mov	r2, r0
 8019490:	460b      	mov	r3, r1
 8019492:	4620      	mov	r0, r4
 8019494:	4629      	mov	r1, r5
 8019496:	bfb8      	it	lt
 8019498:	f1ca 0a00 	rsblt	sl, sl, #0
 801949c:	f7e6 ff04 	bl	80002a8 <__aeabi_dsub>
 80194a0:	ec41 0b19 	vmov	d9, r0, r1
 80194a4:	4642      	mov	r2, r8
 80194a6:	464b      	mov	r3, r9
 80194a8:	ec51 0b19 	vmov	r0, r1, d9
 80194ac:	f7e6 fefe 	bl	80002ac <__adddf3>
 80194b0:	2400      	movs	r4, #0
 80194b2:	a379      	add	r3, pc, #484	; (adr r3, 8019698 <__ieee754_pow+0x9e0>)
 80194b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194b8:	4620      	mov	r0, r4
 80194ba:	460d      	mov	r5, r1
 80194bc:	f7e7 f8ac 	bl	8000618 <__aeabi_dmul>
 80194c0:	ec53 2b19 	vmov	r2, r3, d9
 80194c4:	4606      	mov	r6, r0
 80194c6:	460f      	mov	r7, r1
 80194c8:	4620      	mov	r0, r4
 80194ca:	4629      	mov	r1, r5
 80194cc:	f7e6 feec 	bl	80002a8 <__aeabi_dsub>
 80194d0:	4602      	mov	r2, r0
 80194d2:	460b      	mov	r3, r1
 80194d4:	4640      	mov	r0, r8
 80194d6:	4649      	mov	r1, r9
 80194d8:	f7e6 fee6 	bl	80002a8 <__aeabi_dsub>
 80194dc:	a370      	add	r3, pc, #448	; (adr r3, 80196a0 <__ieee754_pow+0x9e8>)
 80194de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194e2:	f7e7 f899 	bl	8000618 <__aeabi_dmul>
 80194e6:	a370      	add	r3, pc, #448	; (adr r3, 80196a8 <__ieee754_pow+0x9f0>)
 80194e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194ec:	4680      	mov	r8, r0
 80194ee:	4689      	mov	r9, r1
 80194f0:	4620      	mov	r0, r4
 80194f2:	4629      	mov	r1, r5
 80194f4:	f7e7 f890 	bl	8000618 <__aeabi_dmul>
 80194f8:	4602      	mov	r2, r0
 80194fa:	460b      	mov	r3, r1
 80194fc:	4640      	mov	r0, r8
 80194fe:	4649      	mov	r1, r9
 8019500:	f7e6 fed4 	bl	80002ac <__adddf3>
 8019504:	4604      	mov	r4, r0
 8019506:	460d      	mov	r5, r1
 8019508:	4602      	mov	r2, r0
 801950a:	460b      	mov	r3, r1
 801950c:	4630      	mov	r0, r6
 801950e:	4639      	mov	r1, r7
 8019510:	f7e6 fecc 	bl	80002ac <__adddf3>
 8019514:	4632      	mov	r2, r6
 8019516:	463b      	mov	r3, r7
 8019518:	4680      	mov	r8, r0
 801951a:	4689      	mov	r9, r1
 801951c:	f7e6 fec4 	bl	80002a8 <__aeabi_dsub>
 8019520:	4602      	mov	r2, r0
 8019522:	460b      	mov	r3, r1
 8019524:	4620      	mov	r0, r4
 8019526:	4629      	mov	r1, r5
 8019528:	f7e6 febe 	bl	80002a8 <__aeabi_dsub>
 801952c:	4642      	mov	r2, r8
 801952e:	4606      	mov	r6, r0
 8019530:	460f      	mov	r7, r1
 8019532:	464b      	mov	r3, r9
 8019534:	4640      	mov	r0, r8
 8019536:	4649      	mov	r1, r9
 8019538:	f7e7 f86e 	bl	8000618 <__aeabi_dmul>
 801953c:	a35c      	add	r3, pc, #368	; (adr r3, 80196b0 <__ieee754_pow+0x9f8>)
 801953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019542:	4604      	mov	r4, r0
 8019544:	460d      	mov	r5, r1
 8019546:	f7e7 f867 	bl	8000618 <__aeabi_dmul>
 801954a:	a35b      	add	r3, pc, #364	; (adr r3, 80196b8 <__ieee754_pow+0xa00>)
 801954c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019550:	f7e6 feaa 	bl	80002a8 <__aeabi_dsub>
 8019554:	4622      	mov	r2, r4
 8019556:	462b      	mov	r3, r5
 8019558:	f7e7 f85e 	bl	8000618 <__aeabi_dmul>
 801955c:	a358      	add	r3, pc, #352	; (adr r3, 80196c0 <__ieee754_pow+0xa08>)
 801955e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019562:	f7e6 fea3 	bl	80002ac <__adddf3>
 8019566:	4622      	mov	r2, r4
 8019568:	462b      	mov	r3, r5
 801956a:	f7e7 f855 	bl	8000618 <__aeabi_dmul>
 801956e:	a356      	add	r3, pc, #344	; (adr r3, 80196c8 <__ieee754_pow+0xa10>)
 8019570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019574:	f7e6 fe98 	bl	80002a8 <__aeabi_dsub>
 8019578:	4622      	mov	r2, r4
 801957a:	462b      	mov	r3, r5
 801957c:	f7e7 f84c 	bl	8000618 <__aeabi_dmul>
 8019580:	a353      	add	r3, pc, #332	; (adr r3, 80196d0 <__ieee754_pow+0xa18>)
 8019582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019586:	f7e6 fe91 	bl	80002ac <__adddf3>
 801958a:	4622      	mov	r2, r4
 801958c:	462b      	mov	r3, r5
 801958e:	f7e7 f843 	bl	8000618 <__aeabi_dmul>
 8019592:	4602      	mov	r2, r0
 8019594:	460b      	mov	r3, r1
 8019596:	4640      	mov	r0, r8
 8019598:	4649      	mov	r1, r9
 801959a:	f7e6 fe85 	bl	80002a8 <__aeabi_dsub>
 801959e:	4604      	mov	r4, r0
 80195a0:	460d      	mov	r5, r1
 80195a2:	4602      	mov	r2, r0
 80195a4:	460b      	mov	r3, r1
 80195a6:	4640      	mov	r0, r8
 80195a8:	4649      	mov	r1, r9
 80195aa:	f7e7 f835 	bl	8000618 <__aeabi_dmul>
 80195ae:	2200      	movs	r2, #0
 80195b0:	ec41 0b19 	vmov	d9, r0, r1
 80195b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80195b8:	4620      	mov	r0, r4
 80195ba:	4629      	mov	r1, r5
 80195bc:	f7e6 fe74 	bl	80002a8 <__aeabi_dsub>
 80195c0:	4602      	mov	r2, r0
 80195c2:	460b      	mov	r3, r1
 80195c4:	ec51 0b19 	vmov	r0, r1, d9
 80195c8:	f7e7 f950 	bl	800086c <__aeabi_ddiv>
 80195cc:	4632      	mov	r2, r6
 80195ce:	4604      	mov	r4, r0
 80195d0:	460d      	mov	r5, r1
 80195d2:	463b      	mov	r3, r7
 80195d4:	4640      	mov	r0, r8
 80195d6:	4649      	mov	r1, r9
 80195d8:	f7e7 f81e 	bl	8000618 <__aeabi_dmul>
 80195dc:	4632      	mov	r2, r6
 80195de:	463b      	mov	r3, r7
 80195e0:	f7e6 fe64 	bl	80002ac <__adddf3>
 80195e4:	4602      	mov	r2, r0
 80195e6:	460b      	mov	r3, r1
 80195e8:	4620      	mov	r0, r4
 80195ea:	4629      	mov	r1, r5
 80195ec:	f7e6 fe5c 	bl	80002a8 <__aeabi_dsub>
 80195f0:	4642      	mov	r2, r8
 80195f2:	464b      	mov	r3, r9
 80195f4:	f7e6 fe58 	bl	80002a8 <__aeabi_dsub>
 80195f8:	460b      	mov	r3, r1
 80195fa:	4602      	mov	r2, r0
 80195fc:	493a      	ldr	r1, [pc, #232]	; (80196e8 <__ieee754_pow+0xa30>)
 80195fe:	2000      	movs	r0, #0
 8019600:	f7e6 fe52 	bl	80002a8 <__aeabi_dsub>
 8019604:	e9cd 0100 	strd	r0, r1, [sp]
 8019608:	9b01      	ldr	r3, [sp, #4]
 801960a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801960e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019612:	da2f      	bge.n	8019674 <__ieee754_pow+0x9bc>
 8019614:	4650      	mov	r0, sl
 8019616:	ed9d 0b00 	vldr	d0, [sp]
 801961a:	f000 f9cd 	bl	80199b8 <scalbn>
 801961e:	ec51 0b10 	vmov	r0, r1, d0
 8019622:	ec53 2b18 	vmov	r2, r3, d8
 8019626:	f7ff bbe0 	b.w	8018dea <__ieee754_pow+0x132>
 801962a:	4b30      	ldr	r3, [pc, #192]	; (80196ec <__ieee754_pow+0xa34>)
 801962c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019630:	429e      	cmp	r6, r3
 8019632:	f77f af0b 	ble.w	801944c <__ieee754_pow+0x794>
 8019636:	4b2e      	ldr	r3, [pc, #184]	; (80196f0 <__ieee754_pow+0xa38>)
 8019638:	440b      	add	r3, r1
 801963a:	4303      	orrs	r3, r0
 801963c:	d00b      	beq.n	8019656 <__ieee754_pow+0x99e>
 801963e:	a326      	add	r3, pc, #152	; (adr r3, 80196d8 <__ieee754_pow+0xa20>)
 8019640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019644:	ec51 0b18 	vmov	r0, r1, d8
 8019648:	f7e6 ffe6 	bl	8000618 <__aeabi_dmul>
 801964c:	a322      	add	r3, pc, #136	; (adr r3, 80196d8 <__ieee754_pow+0xa20>)
 801964e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019652:	f7ff bbca 	b.w	8018dea <__ieee754_pow+0x132>
 8019656:	4622      	mov	r2, r4
 8019658:	462b      	mov	r3, r5
 801965a:	f7e6 fe25 	bl	80002a8 <__aeabi_dsub>
 801965e:	4642      	mov	r2, r8
 8019660:	464b      	mov	r3, r9
 8019662:	f7e7 fa5f 	bl	8000b24 <__aeabi_dcmpge>
 8019666:	2800      	cmp	r0, #0
 8019668:	f43f aef0 	beq.w	801944c <__ieee754_pow+0x794>
 801966c:	e7e7      	b.n	801963e <__ieee754_pow+0x986>
 801966e:	f04f 0a00 	mov.w	sl, #0
 8019672:	e717      	b.n	80194a4 <__ieee754_pow+0x7ec>
 8019674:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019678:	4619      	mov	r1, r3
 801967a:	e7d2      	b.n	8019622 <__ieee754_pow+0x96a>
 801967c:	491a      	ldr	r1, [pc, #104]	; (80196e8 <__ieee754_pow+0xa30>)
 801967e:	2000      	movs	r0, #0
 8019680:	f7ff bb9e 	b.w	8018dc0 <__ieee754_pow+0x108>
 8019684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019688:	f7ff bb9a 	b.w	8018dc0 <__ieee754_pow+0x108>
 801968c:	9000      	str	r0, [sp, #0]
 801968e:	f7ff bb76 	b.w	8018d7e <__ieee754_pow+0xc6>
 8019692:	2100      	movs	r1, #0
 8019694:	f7ff bb60 	b.w	8018d58 <__ieee754_pow+0xa0>
 8019698:	00000000 	.word	0x00000000
 801969c:	3fe62e43 	.word	0x3fe62e43
 80196a0:	fefa39ef 	.word	0xfefa39ef
 80196a4:	3fe62e42 	.word	0x3fe62e42
 80196a8:	0ca86c39 	.word	0x0ca86c39
 80196ac:	be205c61 	.word	0xbe205c61
 80196b0:	72bea4d0 	.word	0x72bea4d0
 80196b4:	3e663769 	.word	0x3e663769
 80196b8:	c5d26bf1 	.word	0xc5d26bf1
 80196bc:	3ebbbd41 	.word	0x3ebbbd41
 80196c0:	af25de2c 	.word	0xaf25de2c
 80196c4:	3f11566a 	.word	0x3f11566a
 80196c8:	16bebd93 	.word	0x16bebd93
 80196cc:	3f66c16c 	.word	0x3f66c16c
 80196d0:	5555553e 	.word	0x5555553e
 80196d4:	3fc55555 	.word	0x3fc55555
 80196d8:	c2f8f359 	.word	0xc2f8f359
 80196dc:	01a56e1f 	.word	0x01a56e1f
 80196e0:	3fe00000 	.word	0x3fe00000
 80196e4:	000fffff 	.word	0x000fffff
 80196e8:	3ff00000 	.word	0x3ff00000
 80196ec:	4090cbff 	.word	0x4090cbff
 80196f0:	3f6f3400 	.word	0x3f6f3400
 80196f4:	652b82fe 	.word	0x652b82fe
 80196f8:	3c971547 	.word	0x3c971547

080196fc <__ieee754_sqrt>:
 80196fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019700:	ec55 4b10 	vmov	r4, r5, d0
 8019704:	4e56      	ldr	r6, [pc, #344]	; (8019860 <__ieee754_sqrt+0x164>)
 8019706:	43ae      	bics	r6, r5
 8019708:	ee10 0a10 	vmov	r0, s0
 801970c:	ee10 3a10 	vmov	r3, s0
 8019710:	4629      	mov	r1, r5
 8019712:	462a      	mov	r2, r5
 8019714:	d110      	bne.n	8019738 <__ieee754_sqrt+0x3c>
 8019716:	ee10 2a10 	vmov	r2, s0
 801971a:	462b      	mov	r3, r5
 801971c:	f7e6 ff7c 	bl	8000618 <__aeabi_dmul>
 8019720:	4602      	mov	r2, r0
 8019722:	460b      	mov	r3, r1
 8019724:	4620      	mov	r0, r4
 8019726:	4629      	mov	r1, r5
 8019728:	f7e6 fdc0 	bl	80002ac <__adddf3>
 801972c:	4604      	mov	r4, r0
 801972e:	460d      	mov	r5, r1
 8019730:	ec45 4b10 	vmov	d0, r4, r5
 8019734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019738:	2d00      	cmp	r5, #0
 801973a:	dc10      	bgt.n	801975e <__ieee754_sqrt+0x62>
 801973c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019740:	4330      	orrs	r0, r6
 8019742:	d0f5      	beq.n	8019730 <__ieee754_sqrt+0x34>
 8019744:	b15d      	cbz	r5, 801975e <__ieee754_sqrt+0x62>
 8019746:	ee10 2a10 	vmov	r2, s0
 801974a:	462b      	mov	r3, r5
 801974c:	ee10 0a10 	vmov	r0, s0
 8019750:	f7e6 fdaa 	bl	80002a8 <__aeabi_dsub>
 8019754:	4602      	mov	r2, r0
 8019756:	460b      	mov	r3, r1
 8019758:	f7e7 f888 	bl	800086c <__aeabi_ddiv>
 801975c:	e7e6      	b.n	801972c <__ieee754_sqrt+0x30>
 801975e:	1509      	asrs	r1, r1, #20
 8019760:	d076      	beq.n	8019850 <__ieee754_sqrt+0x154>
 8019762:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019766:	07ce      	lsls	r6, r1, #31
 8019768:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801976c:	bf5e      	ittt	pl
 801976e:	0fda      	lsrpl	r2, r3, #31
 8019770:	005b      	lslpl	r3, r3, #1
 8019772:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8019776:	0fda      	lsrs	r2, r3, #31
 8019778:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801977c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019780:	2000      	movs	r0, #0
 8019782:	106d      	asrs	r5, r5, #1
 8019784:	005b      	lsls	r3, r3, #1
 8019786:	f04f 0e16 	mov.w	lr, #22
 801978a:	4684      	mov	ip, r0
 801978c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019790:	eb0c 0401 	add.w	r4, ip, r1
 8019794:	4294      	cmp	r4, r2
 8019796:	bfde      	ittt	le
 8019798:	1b12      	suble	r2, r2, r4
 801979a:	eb04 0c01 	addle.w	ip, r4, r1
 801979e:	1840      	addle	r0, r0, r1
 80197a0:	0052      	lsls	r2, r2, #1
 80197a2:	f1be 0e01 	subs.w	lr, lr, #1
 80197a6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80197aa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80197ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80197b2:	d1ed      	bne.n	8019790 <__ieee754_sqrt+0x94>
 80197b4:	4671      	mov	r1, lr
 80197b6:	2720      	movs	r7, #32
 80197b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80197bc:	4562      	cmp	r2, ip
 80197be:	eb04 060e 	add.w	r6, r4, lr
 80197c2:	dc02      	bgt.n	80197ca <__ieee754_sqrt+0xce>
 80197c4:	d113      	bne.n	80197ee <__ieee754_sqrt+0xf2>
 80197c6:	429e      	cmp	r6, r3
 80197c8:	d811      	bhi.n	80197ee <__ieee754_sqrt+0xf2>
 80197ca:	2e00      	cmp	r6, #0
 80197cc:	eb06 0e04 	add.w	lr, r6, r4
 80197d0:	da43      	bge.n	801985a <__ieee754_sqrt+0x15e>
 80197d2:	f1be 0f00 	cmp.w	lr, #0
 80197d6:	db40      	blt.n	801985a <__ieee754_sqrt+0x15e>
 80197d8:	f10c 0801 	add.w	r8, ip, #1
 80197dc:	eba2 020c 	sub.w	r2, r2, ip
 80197e0:	429e      	cmp	r6, r3
 80197e2:	bf88      	it	hi
 80197e4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80197e8:	1b9b      	subs	r3, r3, r6
 80197ea:	4421      	add	r1, r4
 80197ec:	46c4      	mov	ip, r8
 80197ee:	0052      	lsls	r2, r2, #1
 80197f0:	3f01      	subs	r7, #1
 80197f2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80197f6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80197fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80197fe:	d1dd      	bne.n	80197bc <__ieee754_sqrt+0xc0>
 8019800:	4313      	orrs	r3, r2
 8019802:	d006      	beq.n	8019812 <__ieee754_sqrt+0x116>
 8019804:	1c4c      	adds	r4, r1, #1
 8019806:	bf13      	iteet	ne
 8019808:	3101      	addne	r1, #1
 801980a:	3001      	addeq	r0, #1
 801980c:	4639      	moveq	r1, r7
 801980e:	f021 0101 	bicne.w	r1, r1, #1
 8019812:	1043      	asrs	r3, r0, #1
 8019814:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8019818:	0849      	lsrs	r1, r1, #1
 801981a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801981e:	07c2      	lsls	r2, r0, #31
 8019820:	bf48      	it	mi
 8019822:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8019826:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801982a:	460c      	mov	r4, r1
 801982c:	463d      	mov	r5, r7
 801982e:	e77f      	b.n	8019730 <__ieee754_sqrt+0x34>
 8019830:	0ada      	lsrs	r2, r3, #11
 8019832:	3815      	subs	r0, #21
 8019834:	055b      	lsls	r3, r3, #21
 8019836:	2a00      	cmp	r2, #0
 8019838:	d0fa      	beq.n	8019830 <__ieee754_sqrt+0x134>
 801983a:	02d7      	lsls	r7, r2, #11
 801983c:	d50a      	bpl.n	8019854 <__ieee754_sqrt+0x158>
 801983e:	f1c1 0420 	rsb	r4, r1, #32
 8019842:	fa23 f404 	lsr.w	r4, r3, r4
 8019846:	1e4d      	subs	r5, r1, #1
 8019848:	408b      	lsls	r3, r1
 801984a:	4322      	orrs	r2, r4
 801984c:	1b41      	subs	r1, r0, r5
 801984e:	e788      	b.n	8019762 <__ieee754_sqrt+0x66>
 8019850:	4608      	mov	r0, r1
 8019852:	e7f0      	b.n	8019836 <__ieee754_sqrt+0x13a>
 8019854:	0052      	lsls	r2, r2, #1
 8019856:	3101      	adds	r1, #1
 8019858:	e7ef      	b.n	801983a <__ieee754_sqrt+0x13e>
 801985a:	46e0      	mov	r8, ip
 801985c:	e7be      	b.n	80197dc <__ieee754_sqrt+0xe0>
 801985e:	bf00      	nop
 8019860:	7ff00000 	.word	0x7ff00000

08019864 <fabs>:
 8019864:	ec51 0b10 	vmov	r0, r1, d0
 8019868:	ee10 2a10 	vmov	r2, s0
 801986c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019870:	ec43 2b10 	vmov	d0, r2, r3
 8019874:	4770      	bx	lr

08019876 <finite>:
 8019876:	b082      	sub	sp, #8
 8019878:	ed8d 0b00 	vstr	d0, [sp]
 801987c:	9801      	ldr	r0, [sp, #4]
 801987e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8019882:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019886:	0fc0      	lsrs	r0, r0, #31
 8019888:	b002      	add	sp, #8
 801988a:	4770      	bx	lr
 801988c:	0000      	movs	r0, r0
	...

08019890 <nan>:
 8019890:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019898 <nan+0x8>
 8019894:	4770      	bx	lr
 8019896:	bf00      	nop
 8019898:	00000000 	.word	0x00000000
 801989c:	7ff80000 	.word	0x7ff80000

080198a0 <rint>:
 80198a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80198a2:	ec51 0b10 	vmov	r0, r1, d0
 80198a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80198aa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80198ae:	2e13      	cmp	r6, #19
 80198b0:	ee10 4a10 	vmov	r4, s0
 80198b4:	460b      	mov	r3, r1
 80198b6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80198ba:	dc58      	bgt.n	801996e <rint+0xce>
 80198bc:	2e00      	cmp	r6, #0
 80198be:	da2b      	bge.n	8019918 <rint+0x78>
 80198c0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80198c4:	4302      	orrs	r2, r0
 80198c6:	d023      	beq.n	8019910 <rint+0x70>
 80198c8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80198cc:	4302      	orrs	r2, r0
 80198ce:	4254      	negs	r4, r2
 80198d0:	4314      	orrs	r4, r2
 80198d2:	0c4b      	lsrs	r3, r1, #17
 80198d4:	0b24      	lsrs	r4, r4, #12
 80198d6:	045b      	lsls	r3, r3, #17
 80198d8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80198dc:	ea44 0103 	orr.w	r1, r4, r3
 80198e0:	4b32      	ldr	r3, [pc, #200]	; (80199ac <rint+0x10c>)
 80198e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80198e6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80198ea:	4602      	mov	r2, r0
 80198ec:	460b      	mov	r3, r1
 80198ee:	4630      	mov	r0, r6
 80198f0:	4639      	mov	r1, r7
 80198f2:	f7e6 fcdb 	bl	80002ac <__adddf3>
 80198f6:	e9cd 0100 	strd	r0, r1, [sp]
 80198fa:	463b      	mov	r3, r7
 80198fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019900:	4632      	mov	r2, r6
 8019902:	f7e6 fcd1 	bl	80002a8 <__aeabi_dsub>
 8019906:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801990a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801990e:	4639      	mov	r1, r7
 8019910:	ec41 0b10 	vmov	d0, r0, r1
 8019914:	b003      	add	sp, #12
 8019916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019918:	4a25      	ldr	r2, [pc, #148]	; (80199b0 <rint+0x110>)
 801991a:	4132      	asrs	r2, r6
 801991c:	ea01 0702 	and.w	r7, r1, r2
 8019920:	4307      	orrs	r7, r0
 8019922:	d0f5      	beq.n	8019910 <rint+0x70>
 8019924:	0851      	lsrs	r1, r2, #1
 8019926:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801992a:	4314      	orrs	r4, r2
 801992c:	d00c      	beq.n	8019948 <rint+0xa8>
 801992e:	ea23 0201 	bic.w	r2, r3, r1
 8019932:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8019936:	2e13      	cmp	r6, #19
 8019938:	fa43 f606 	asr.w	r6, r3, r6
 801993c:	bf0c      	ite	eq
 801993e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8019942:	2400      	movne	r4, #0
 8019944:	ea42 0306 	orr.w	r3, r2, r6
 8019948:	4918      	ldr	r1, [pc, #96]	; (80199ac <rint+0x10c>)
 801994a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801994e:	4622      	mov	r2, r4
 8019950:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019954:	4620      	mov	r0, r4
 8019956:	4629      	mov	r1, r5
 8019958:	f7e6 fca8 	bl	80002ac <__adddf3>
 801995c:	e9cd 0100 	strd	r0, r1, [sp]
 8019960:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019964:	4622      	mov	r2, r4
 8019966:	462b      	mov	r3, r5
 8019968:	f7e6 fc9e 	bl	80002a8 <__aeabi_dsub>
 801996c:	e7d0      	b.n	8019910 <rint+0x70>
 801996e:	2e33      	cmp	r6, #51	; 0x33
 8019970:	dd07      	ble.n	8019982 <rint+0xe2>
 8019972:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019976:	d1cb      	bne.n	8019910 <rint+0x70>
 8019978:	ee10 2a10 	vmov	r2, s0
 801997c:	f7e6 fc96 	bl	80002ac <__adddf3>
 8019980:	e7c6      	b.n	8019910 <rint+0x70>
 8019982:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8019986:	f04f 36ff 	mov.w	r6, #4294967295
 801998a:	40d6      	lsrs	r6, r2
 801998c:	4230      	tst	r0, r6
 801998e:	d0bf      	beq.n	8019910 <rint+0x70>
 8019990:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8019994:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8019998:	bf1f      	itttt	ne
 801999a:	ea24 0101 	bicne.w	r1, r4, r1
 801999e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80199a2:	fa44 f202 	asrne.w	r2, r4, r2
 80199a6:	ea41 0402 	orrne.w	r4, r1, r2
 80199aa:	e7cd      	b.n	8019948 <rint+0xa8>
 80199ac:	08020d20 	.word	0x08020d20
 80199b0:	000fffff 	.word	0x000fffff
 80199b4:	00000000 	.word	0x00000000

080199b8 <scalbn>:
 80199b8:	b570      	push	{r4, r5, r6, lr}
 80199ba:	ec55 4b10 	vmov	r4, r5, d0
 80199be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80199c2:	4606      	mov	r6, r0
 80199c4:	462b      	mov	r3, r5
 80199c6:	b99a      	cbnz	r2, 80199f0 <scalbn+0x38>
 80199c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80199cc:	4323      	orrs	r3, r4
 80199ce:	d036      	beq.n	8019a3e <scalbn+0x86>
 80199d0:	4b39      	ldr	r3, [pc, #228]	; (8019ab8 <scalbn+0x100>)
 80199d2:	4629      	mov	r1, r5
 80199d4:	ee10 0a10 	vmov	r0, s0
 80199d8:	2200      	movs	r2, #0
 80199da:	f7e6 fe1d 	bl	8000618 <__aeabi_dmul>
 80199de:	4b37      	ldr	r3, [pc, #220]	; (8019abc <scalbn+0x104>)
 80199e0:	429e      	cmp	r6, r3
 80199e2:	4604      	mov	r4, r0
 80199e4:	460d      	mov	r5, r1
 80199e6:	da10      	bge.n	8019a0a <scalbn+0x52>
 80199e8:	a32b      	add	r3, pc, #172	; (adr r3, 8019a98 <scalbn+0xe0>)
 80199ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ee:	e03a      	b.n	8019a66 <scalbn+0xae>
 80199f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80199f4:	428a      	cmp	r2, r1
 80199f6:	d10c      	bne.n	8019a12 <scalbn+0x5a>
 80199f8:	ee10 2a10 	vmov	r2, s0
 80199fc:	4620      	mov	r0, r4
 80199fe:	4629      	mov	r1, r5
 8019a00:	f7e6 fc54 	bl	80002ac <__adddf3>
 8019a04:	4604      	mov	r4, r0
 8019a06:	460d      	mov	r5, r1
 8019a08:	e019      	b.n	8019a3e <scalbn+0x86>
 8019a0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019a0e:	460b      	mov	r3, r1
 8019a10:	3a36      	subs	r2, #54	; 0x36
 8019a12:	4432      	add	r2, r6
 8019a14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019a18:	428a      	cmp	r2, r1
 8019a1a:	dd08      	ble.n	8019a2e <scalbn+0x76>
 8019a1c:	2d00      	cmp	r5, #0
 8019a1e:	a120      	add	r1, pc, #128	; (adr r1, 8019aa0 <scalbn+0xe8>)
 8019a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a24:	da1c      	bge.n	8019a60 <scalbn+0xa8>
 8019a26:	a120      	add	r1, pc, #128	; (adr r1, 8019aa8 <scalbn+0xf0>)
 8019a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a2c:	e018      	b.n	8019a60 <scalbn+0xa8>
 8019a2e:	2a00      	cmp	r2, #0
 8019a30:	dd08      	ble.n	8019a44 <scalbn+0x8c>
 8019a32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019a36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019a3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019a3e:	ec45 4b10 	vmov	d0, r4, r5
 8019a42:	bd70      	pop	{r4, r5, r6, pc}
 8019a44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019a48:	da19      	bge.n	8019a7e <scalbn+0xc6>
 8019a4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019a4e:	429e      	cmp	r6, r3
 8019a50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8019a54:	dd0a      	ble.n	8019a6c <scalbn+0xb4>
 8019a56:	a112      	add	r1, pc, #72	; (adr r1, 8019aa0 <scalbn+0xe8>)
 8019a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d1e2      	bne.n	8019a26 <scalbn+0x6e>
 8019a60:	a30f      	add	r3, pc, #60	; (adr r3, 8019aa0 <scalbn+0xe8>)
 8019a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a66:	f7e6 fdd7 	bl	8000618 <__aeabi_dmul>
 8019a6a:	e7cb      	b.n	8019a04 <scalbn+0x4c>
 8019a6c:	a10a      	add	r1, pc, #40	; (adr r1, 8019a98 <scalbn+0xe0>)
 8019a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d0b8      	beq.n	80199e8 <scalbn+0x30>
 8019a76:	a10e      	add	r1, pc, #56	; (adr r1, 8019ab0 <scalbn+0xf8>)
 8019a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a7c:	e7b4      	b.n	80199e8 <scalbn+0x30>
 8019a7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019a82:	3236      	adds	r2, #54	; 0x36
 8019a84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019a88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019a8c:	4620      	mov	r0, r4
 8019a8e:	4b0c      	ldr	r3, [pc, #48]	; (8019ac0 <scalbn+0x108>)
 8019a90:	2200      	movs	r2, #0
 8019a92:	e7e8      	b.n	8019a66 <scalbn+0xae>
 8019a94:	f3af 8000 	nop.w
 8019a98:	c2f8f359 	.word	0xc2f8f359
 8019a9c:	01a56e1f 	.word	0x01a56e1f
 8019aa0:	8800759c 	.word	0x8800759c
 8019aa4:	7e37e43c 	.word	0x7e37e43c
 8019aa8:	8800759c 	.word	0x8800759c
 8019aac:	fe37e43c 	.word	0xfe37e43c
 8019ab0:	c2f8f359 	.word	0xc2f8f359
 8019ab4:	81a56e1f 	.word	0x81a56e1f
 8019ab8:	43500000 	.word	0x43500000
 8019abc:	ffff3cb0 	.word	0xffff3cb0
 8019ac0:	3c900000 	.word	0x3c900000

08019ac4 <abort>:
 8019ac4:	b508      	push	{r3, lr}
 8019ac6:	2006      	movs	r0, #6
 8019ac8:	f001 f9c2 	bl	801ae50 <raise>
 8019acc:	2001      	movs	r0, #1
 8019ace:	f7e9 fb55 	bl	800317c <_exit>
	...

08019ad4 <__errno>:
 8019ad4:	4b01      	ldr	r3, [pc, #4]	; (8019adc <__errno+0x8>)
 8019ad6:	6818      	ldr	r0, [r3, #0]
 8019ad8:	4770      	bx	lr
 8019ada:	bf00      	nop
 8019adc:	200001d8 	.word	0x200001d8

08019ae0 <std>:
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	b510      	push	{r4, lr}
 8019ae4:	4604      	mov	r4, r0
 8019ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8019aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019aee:	6083      	str	r3, [r0, #8]
 8019af0:	8181      	strh	r1, [r0, #12]
 8019af2:	6643      	str	r3, [r0, #100]	; 0x64
 8019af4:	81c2      	strh	r2, [r0, #14]
 8019af6:	6183      	str	r3, [r0, #24]
 8019af8:	4619      	mov	r1, r3
 8019afa:	2208      	movs	r2, #8
 8019afc:	305c      	adds	r0, #92	; 0x5c
 8019afe:	f000 f945 	bl	8019d8c <memset>
 8019b02:	4b05      	ldr	r3, [pc, #20]	; (8019b18 <std+0x38>)
 8019b04:	6263      	str	r3, [r4, #36]	; 0x24
 8019b06:	4b05      	ldr	r3, [pc, #20]	; (8019b1c <std+0x3c>)
 8019b08:	62a3      	str	r3, [r4, #40]	; 0x28
 8019b0a:	4b05      	ldr	r3, [pc, #20]	; (8019b20 <std+0x40>)
 8019b0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019b0e:	4b05      	ldr	r3, [pc, #20]	; (8019b24 <std+0x44>)
 8019b10:	6224      	str	r4, [r4, #32]
 8019b12:	6323      	str	r3, [r4, #48]	; 0x30
 8019b14:	bd10      	pop	{r4, pc}
 8019b16:	bf00      	nop
 8019b18:	0801af21 	.word	0x0801af21
 8019b1c:	0801af47 	.word	0x0801af47
 8019b20:	0801af7f 	.word	0x0801af7f
 8019b24:	0801afa3 	.word	0x0801afa3

08019b28 <_cleanup_r>:
 8019b28:	4901      	ldr	r1, [pc, #4]	; (8019b30 <_cleanup_r+0x8>)
 8019b2a:	f000 b8af 	b.w	8019c8c <_fwalk_reent>
 8019b2e:	bf00      	nop
 8019b30:	0801cec5 	.word	0x0801cec5

08019b34 <__sfmoreglue>:
 8019b34:	b570      	push	{r4, r5, r6, lr}
 8019b36:	1e4a      	subs	r2, r1, #1
 8019b38:	2568      	movs	r5, #104	; 0x68
 8019b3a:	4355      	muls	r5, r2
 8019b3c:	460e      	mov	r6, r1
 8019b3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019b42:	f000 f97b 	bl	8019e3c <_malloc_r>
 8019b46:	4604      	mov	r4, r0
 8019b48:	b140      	cbz	r0, 8019b5c <__sfmoreglue+0x28>
 8019b4a:	2100      	movs	r1, #0
 8019b4c:	e9c0 1600 	strd	r1, r6, [r0]
 8019b50:	300c      	adds	r0, #12
 8019b52:	60a0      	str	r0, [r4, #8]
 8019b54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019b58:	f000 f918 	bl	8019d8c <memset>
 8019b5c:	4620      	mov	r0, r4
 8019b5e:	bd70      	pop	{r4, r5, r6, pc}

08019b60 <__sfp_lock_acquire>:
 8019b60:	4801      	ldr	r0, [pc, #4]	; (8019b68 <__sfp_lock_acquire+0x8>)
 8019b62:	f000 b8d8 	b.w	8019d16 <__retarget_lock_acquire_recursive>
 8019b66:	bf00      	nop
 8019b68:	20008f94 	.word	0x20008f94

08019b6c <__sfp_lock_release>:
 8019b6c:	4801      	ldr	r0, [pc, #4]	; (8019b74 <__sfp_lock_release+0x8>)
 8019b6e:	f000 b8d3 	b.w	8019d18 <__retarget_lock_release_recursive>
 8019b72:	bf00      	nop
 8019b74:	20008f94 	.word	0x20008f94

08019b78 <__sinit_lock_acquire>:
 8019b78:	4801      	ldr	r0, [pc, #4]	; (8019b80 <__sinit_lock_acquire+0x8>)
 8019b7a:	f000 b8cc 	b.w	8019d16 <__retarget_lock_acquire_recursive>
 8019b7e:	bf00      	nop
 8019b80:	20008f8f 	.word	0x20008f8f

08019b84 <__sinit_lock_release>:
 8019b84:	4801      	ldr	r0, [pc, #4]	; (8019b8c <__sinit_lock_release+0x8>)
 8019b86:	f000 b8c7 	b.w	8019d18 <__retarget_lock_release_recursive>
 8019b8a:	bf00      	nop
 8019b8c:	20008f8f 	.word	0x20008f8f

08019b90 <__sinit>:
 8019b90:	b510      	push	{r4, lr}
 8019b92:	4604      	mov	r4, r0
 8019b94:	f7ff fff0 	bl	8019b78 <__sinit_lock_acquire>
 8019b98:	69a3      	ldr	r3, [r4, #24]
 8019b9a:	b11b      	cbz	r3, 8019ba4 <__sinit+0x14>
 8019b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ba0:	f7ff bff0 	b.w	8019b84 <__sinit_lock_release>
 8019ba4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019ba8:	6523      	str	r3, [r4, #80]	; 0x50
 8019baa:	4b13      	ldr	r3, [pc, #76]	; (8019bf8 <__sinit+0x68>)
 8019bac:	4a13      	ldr	r2, [pc, #76]	; (8019bfc <__sinit+0x6c>)
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8019bb2:	42a3      	cmp	r3, r4
 8019bb4:	bf04      	itt	eq
 8019bb6:	2301      	moveq	r3, #1
 8019bb8:	61a3      	streq	r3, [r4, #24]
 8019bba:	4620      	mov	r0, r4
 8019bbc:	f000 f820 	bl	8019c00 <__sfp>
 8019bc0:	6060      	str	r0, [r4, #4]
 8019bc2:	4620      	mov	r0, r4
 8019bc4:	f000 f81c 	bl	8019c00 <__sfp>
 8019bc8:	60a0      	str	r0, [r4, #8]
 8019bca:	4620      	mov	r0, r4
 8019bcc:	f000 f818 	bl	8019c00 <__sfp>
 8019bd0:	2200      	movs	r2, #0
 8019bd2:	60e0      	str	r0, [r4, #12]
 8019bd4:	2104      	movs	r1, #4
 8019bd6:	6860      	ldr	r0, [r4, #4]
 8019bd8:	f7ff ff82 	bl	8019ae0 <std>
 8019bdc:	68a0      	ldr	r0, [r4, #8]
 8019bde:	2201      	movs	r2, #1
 8019be0:	2109      	movs	r1, #9
 8019be2:	f7ff ff7d 	bl	8019ae0 <std>
 8019be6:	68e0      	ldr	r0, [r4, #12]
 8019be8:	2202      	movs	r2, #2
 8019bea:	2112      	movs	r1, #18
 8019bec:	f7ff ff78 	bl	8019ae0 <std>
 8019bf0:	2301      	movs	r3, #1
 8019bf2:	61a3      	str	r3, [r4, #24]
 8019bf4:	e7d2      	b.n	8019b9c <__sinit+0xc>
 8019bf6:	bf00      	nop
 8019bf8:	08020e94 	.word	0x08020e94
 8019bfc:	08019b29 	.word	0x08019b29

08019c00 <__sfp>:
 8019c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c02:	4607      	mov	r7, r0
 8019c04:	f7ff ffac 	bl	8019b60 <__sfp_lock_acquire>
 8019c08:	4b1e      	ldr	r3, [pc, #120]	; (8019c84 <__sfp+0x84>)
 8019c0a:	681e      	ldr	r6, [r3, #0]
 8019c0c:	69b3      	ldr	r3, [r6, #24]
 8019c0e:	b913      	cbnz	r3, 8019c16 <__sfp+0x16>
 8019c10:	4630      	mov	r0, r6
 8019c12:	f7ff ffbd 	bl	8019b90 <__sinit>
 8019c16:	3648      	adds	r6, #72	; 0x48
 8019c18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019c1c:	3b01      	subs	r3, #1
 8019c1e:	d503      	bpl.n	8019c28 <__sfp+0x28>
 8019c20:	6833      	ldr	r3, [r6, #0]
 8019c22:	b30b      	cbz	r3, 8019c68 <__sfp+0x68>
 8019c24:	6836      	ldr	r6, [r6, #0]
 8019c26:	e7f7      	b.n	8019c18 <__sfp+0x18>
 8019c28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019c2c:	b9d5      	cbnz	r5, 8019c64 <__sfp+0x64>
 8019c2e:	4b16      	ldr	r3, [pc, #88]	; (8019c88 <__sfp+0x88>)
 8019c30:	60e3      	str	r3, [r4, #12]
 8019c32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019c36:	6665      	str	r5, [r4, #100]	; 0x64
 8019c38:	f000 f86c 	bl	8019d14 <__retarget_lock_init_recursive>
 8019c3c:	f7ff ff96 	bl	8019b6c <__sfp_lock_release>
 8019c40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019c44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019c48:	6025      	str	r5, [r4, #0]
 8019c4a:	61a5      	str	r5, [r4, #24]
 8019c4c:	2208      	movs	r2, #8
 8019c4e:	4629      	mov	r1, r5
 8019c50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019c54:	f000 f89a 	bl	8019d8c <memset>
 8019c58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019c5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019c60:	4620      	mov	r0, r4
 8019c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c64:	3468      	adds	r4, #104	; 0x68
 8019c66:	e7d9      	b.n	8019c1c <__sfp+0x1c>
 8019c68:	2104      	movs	r1, #4
 8019c6a:	4638      	mov	r0, r7
 8019c6c:	f7ff ff62 	bl	8019b34 <__sfmoreglue>
 8019c70:	4604      	mov	r4, r0
 8019c72:	6030      	str	r0, [r6, #0]
 8019c74:	2800      	cmp	r0, #0
 8019c76:	d1d5      	bne.n	8019c24 <__sfp+0x24>
 8019c78:	f7ff ff78 	bl	8019b6c <__sfp_lock_release>
 8019c7c:	230c      	movs	r3, #12
 8019c7e:	603b      	str	r3, [r7, #0]
 8019c80:	e7ee      	b.n	8019c60 <__sfp+0x60>
 8019c82:	bf00      	nop
 8019c84:	08020e94 	.word	0x08020e94
 8019c88:	ffff0001 	.word	0xffff0001

08019c8c <_fwalk_reent>:
 8019c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c90:	4606      	mov	r6, r0
 8019c92:	4688      	mov	r8, r1
 8019c94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019c98:	2700      	movs	r7, #0
 8019c9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019c9e:	f1b9 0901 	subs.w	r9, r9, #1
 8019ca2:	d505      	bpl.n	8019cb0 <_fwalk_reent+0x24>
 8019ca4:	6824      	ldr	r4, [r4, #0]
 8019ca6:	2c00      	cmp	r4, #0
 8019ca8:	d1f7      	bne.n	8019c9a <_fwalk_reent+0xe>
 8019caa:	4638      	mov	r0, r7
 8019cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cb0:	89ab      	ldrh	r3, [r5, #12]
 8019cb2:	2b01      	cmp	r3, #1
 8019cb4:	d907      	bls.n	8019cc6 <_fwalk_reent+0x3a>
 8019cb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019cba:	3301      	adds	r3, #1
 8019cbc:	d003      	beq.n	8019cc6 <_fwalk_reent+0x3a>
 8019cbe:	4629      	mov	r1, r5
 8019cc0:	4630      	mov	r0, r6
 8019cc2:	47c0      	blx	r8
 8019cc4:	4307      	orrs	r7, r0
 8019cc6:	3568      	adds	r5, #104	; 0x68
 8019cc8:	e7e9      	b.n	8019c9e <_fwalk_reent+0x12>
	...

08019ccc <__libc_init_array>:
 8019ccc:	b570      	push	{r4, r5, r6, lr}
 8019cce:	4d0d      	ldr	r5, [pc, #52]	; (8019d04 <__libc_init_array+0x38>)
 8019cd0:	4c0d      	ldr	r4, [pc, #52]	; (8019d08 <__libc_init_array+0x3c>)
 8019cd2:	1b64      	subs	r4, r4, r5
 8019cd4:	10a4      	asrs	r4, r4, #2
 8019cd6:	2600      	movs	r6, #0
 8019cd8:	42a6      	cmp	r6, r4
 8019cda:	d109      	bne.n	8019cf0 <__libc_init_array+0x24>
 8019cdc:	4d0b      	ldr	r5, [pc, #44]	; (8019d0c <__libc_init_array+0x40>)
 8019cde:	4c0c      	ldr	r4, [pc, #48]	; (8019d10 <__libc_init_array+0x44>)
 8019ce0:	f005 f8c8 	bl	801ee74 <_init>
 8019ce4:	1b64      	subs	r4, r4, r5
 8019ce6:	10a4      	asrs	r4, r4, #2
 8019ce8:	2600      	movs	r6, #0
 8019cea:	42a6      	cmp	r6, r4
 8019cec:	d105      	bne.n	8019cfa <__libc_init_array+0x2e>
 8019cee:	bd70      	pop	{r4, r5, r6, pc}
 8019cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cf4:	4798      	blx	r3
 8019cf6:	3601      	adds	r6, #1
 8019cf8:	e7ee      	b.n	8019cd8 <__libc_init_array+0xc>
 8019cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cfe:	4798      	blx	r3
 8019d00:	3601      	adds	r6, #1
 8019d02:	e7f2      	b.n	8019cea <__libc_init_array+0x1e>
 8019d04:	08021200 	.word	0x08021200
 8019d08:	08021200 	.word	0x08021200
 8019d0c:	08021200 	.word	0x08021200
 8019d10:	08021208 	.word	0x08021208

08019d14 <__retarget_lock_init_recursive>:
 8019d14:	4770      	bx	lr

08019d16 <__retarget_lock_acquire_recursive>:
 8019d16:	4770      	bx	lr

08019d18 <__retarget_lock_release_recursive>:
 8019d18:	4770      	bx	lr
	...

08019d1c <malloc>:
 8019d1c:	4b02      	ldr	r3, [pc, #8]	; (8019d28 <malloc+0xc>)
 8019d1e:	4601      	mov	r1, r0
 8019d20:	6818      	ldr	r0, [r3, #0]
 8019d22:	f000 b88b 	b.w	8019e3c <_malloc_r>
 8019d26:	bf00      	nop
 8019d28:	200001d8 	.word	0x200001d8

08019d2c <free>:
 8019d2c:	4b02      	ldr	r3, [pc, #8]	; (8019d38 <free+0xc>)
 8019d2e:	4601      	mov	r1, r0
 8019d30:	6818      	ldr	r0, [r3, #0]
 8019d32:	f000 b833 	b.w	8019d9c <_free_r>
 8019d36:	bf00      	nop
 8019d38:	200001d8 	.word	0x200001d8

08019d3c <memcpy>:
 8019d3c:	440a      	add	r2, r1
 8019d3e:	4291      	cmp	r1, r2
 8019d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8019d44:	d100      	bne.n	8019d48 <memcpy+0xc>
 8019d46:	4770      	bx	lr
 8019d48:	b510      	push	{r4, lr}
 8019d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019d52:	4291      	cmp	r1, r2
 8019d54:	d1f9      	bne.n	8019d4a <memcpy+0xe>
 8019d56:	bd10      	pop	{r4, pc}

08019d58 <memmove>:
 8019d58:	4288      	cmp	r0, r1
 8019d5a:	b510      	push	{r4, lr}
 8019d5c:	eb01 0402 	add.w	r4, r1, r2
 8019d60:	d902      	bls.n	8019d68 <memmove+0x10>
 8019d62:	4284      	cmp	r4, r0
 8019d64:	4623      	mov	r3, r4
 8019d66:	d807      	bhi.n	8019d78 <memmove+0x20>
 8019d68:	1e43      	subs	r3, r0, #1
 8019d6a:	42a1      	cmp	r1, r4
 8019d6c:	d008      	beq.n	8019d80 <memmove+0x28>
 8019d6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019d72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019d76:	e7f8      	b.n	8019d6a <memmove+0x12>
 8019d78:	4402      	add	r2, r0
 8019d7a:	4601      	mov	r1, r0
 8019d7c:	428a      	cmp	r2, r1
 8019d7e:	d100      	bne.n	8019d82 <memmove+0x2a>
 8019d80:	bd10      	pop	{r4, pc}
 8019d82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019d86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019d8a:	e7f7      	b.n	8019d7c <memmove+0x24>

08019d8c <memset>:
 8019d8c:	4402      	add	r2, r0
 8019d8e:	4603      	mov	r3, r0
 8019d90:	4293      	cmp	r3, r2
 8019d92:	d100      	bne.n	8019d96 <memset+0xa>
 8019d94:	4770      	bx	lr
 8019d96:	f803 1b01 	strb.w	r1, [r3], #1
 8019d9a:	e7f9      	b.n	8019d90 <memset+0x4>

08019d9c <_free_r>:
 8019d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d9e:	2900      	cmp	r1, #0
 8019da0:	d048      	beq.n	8019e34 <_free_r+0x98>
 8019da2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019da6:	9001      	str	r0, [sp, #4]
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	f1a1 0404 	sub.w	r4, r1, #4
 8019dae:	bfb8      	it	lt
 8019db0:	18e4      	addlt	r4, r4, r3
 8019db2:	f003 fcd1 	bl	801d758 <__malloc_lock>
 8019db6:	4a20      	ldr	r2, [pc, #128]	; (8019e38 <_free_r+0x9c>)
 8019db8:	9801      	ldr	r0, [sp, #4]
 8019dba:	6813      	ldr	r3, [r2, #0]
 8019dbc:	4615      	mov	r5, r2
 8019dbe:	b933      	cbnz	r3, 8019dce <_free_r+0x32>
 8019dc0:	6063      	str	r3, [r4, #4]
 8019dc2:	6014      	str	r4, [r2, #0]
 8019dc4:	b003      	add	sp, #12
 8019dc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019dca:	f003 bccb 	b.w	801d764 <__malloc_unlock>
 8019dce:	42a3      	cmp	r3, r4
 8019dd0:	d90b      	bls.n	8019dea <_free_r+0x4e>
 8019dd2:	6821      	ldr	r1, [r4, #0]
 8019dd4:	1862      	adds	r2, r4, r1
 8019dd6:	4293      	cmp	r3, r2
 8019dd8:	bf04      	itt	eq
 8019dda:	681a      	ldreq	r2, [r3, #0]
 8019ddc:	685b      	ldreq	r3, [r3, #4]
 8019dde:	6063      	str	r3, [r4, #4]
 8019de0:	bf04      	itt	eq
 8019de2:	1852      	addeq	r2, r2, r1
 8019de4:	6022      	streq	r2, [r4, #0]
 8019de6:	602c      	str	r4, [r5, #0]
 8019de8:	e7ec      	b.n	8019dc4 <_free_r+0x28>
 8019dea:	461a      	mov	r2, r3
 8019dec:	685b      	ldr	r3, [r3, #4]
 8019dee:	b10b      	cbz	r3, 8019df4 <_free_r+0x58>
 8019df0:	42a3      	cmp	r3, r4
 8019df2:	d9fa      	bls.n	8019dea <_free_r+0x4e>
 8019df4:	6811      	ldr	r1, [r2, #0]
 8019df6:	1855      	adds	r5, r2, r1
 8019df8:	42a5      	cmp	r5, r4
 8019dfa:	d10b      	bne.n	8019e14 <_free_r+0x78>
 8019dfc:	6824      	ldr	r4, [r4, #0]
 8019dfe:	4421      	add	r1, r4
 8019e00:	1854      	adds	r4, r2, r1
 8019e02:	42a3      	cmp	r3, r4
 8019e04:	6011      	str	r1, [r2, #0]
 8019e06:	d1dd      	bne.n	8019dc4 <_free_r+0x28>
 8019e08:	681c      	ldr	r4, [r3, #0]
 8019e0a:	685b      	ldr	r3, [r3, #4]
 8019e0c:	6053      	str	r3, [r2, #4]
 8019e0e:	4421      	add	r1, r4
 8019e10:	6011      	str	r1, [r2, #0]
 8019e12:	e7d7      	b.n	8019dc4 <_free_r+0x28>
 8019e14:	d902      	bls.n	8019e1c <_free_r+0x80>
 8019e16:	230c      	movs	r3, #12
 8019e18:	6003      	str	r3, [r0, #0]
 8019e1a:	e7d3      	b.n	8019dc4 <_free_r+0x28>
 8019e1c:	6825      	ldr	r5, [r4, #0]
 8019e1e:	1961      	adds	r1, r4, r5
 8019e20:	428b      	cmp	r3, r1
 8019e22:	bf04      	itt	eq
 8019e24:	6819      	ldreq	r1, [r3, #0]
 8019e26:	685b      	ldreq	r3, [r3, #4]
 8019e28:	6063      	str	r3, [r4, #4]
 8019e2a:	bf04      	itt	eq
 8019e2c:	1949      	addeq	r1, r1, r5
 8019e2e:	6021      	streq	r1, [r4, #0]
 8019e30:	6054      	str	r4, [r2, #4]
 8019e32:	e7c7      	b.n	8019dc4 <_free_r+0x28>
 8019e34:	b003      	add	sp, #12
 8019e36:	bd30      	pop	{r4, r5, pc}
 8019e38:	20005ea4 	.word	0x20005ea4

08019e3c <_malloc_r>:
 8019e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e3e:	1ccd      	adds	r5, r1, #3
 8019e40:	f025 0503 	bic.w	r5, r5, #3
 8019e44:	3508      	adds	r5, #8
 8019e46:	2d0c      	cmp	r5, #12
 8019e48:	bf38      	it	cc
 8019e4a:	250c      	movcc	r5, #12
 8019e4c:	2d00      	cmp	r5, #0
 8019e4e:	4606      	mov	r6, r0
 8019e50:	db01      	blt.n	8019e56 <_malloc_r+0x1a>
 8019e52:	42a9      	cmp	r1, r5
 8019e54:	d903      	bls.n	8019e5e <_malloc_r+0x22>
 8019e56:	230c      	movs	r3, #12
 8019e58:	6033      	str	r3, [r6, #0]
 8019e5a:	2000      	movs	r0, #0
 8019e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e5e:	f003 fc7b 	bl	801d758 <__malloc_lock>
 8019e62:	4921      	ldr	r1, [pc, #132]	; (8019ee8 <_malloc_r+0xac>)
 8019e64:	680a      	ldr	r2, [r1, #0]
 8019e66:	4614      	mov	r4, r2
 8019e68:	b99c      	cbnz	r4, 8019e92 <_malloc_r+0x56>
 8019e6a:	4f20      	ldr	r7, [pc, #128]	; (8019eec <_malloc_r+0xb0>)
 8019e6c:	683b      	ldr	r3, [r7, #0]
 8019e6e:	b923      	cbnz	r3, 8019e7a <_malloc_r+0x3e>
 8019e70:	4621      	mov	r1, r4
 8019e72:	4630      	mov	r0, r6
 8019e74:	f000 ffae 	bl	801add4 <_sbrk_r>
 8019e78:	6038      	str	r0, [r7, #0]
 8019e7a:	4629      	mov	r1, r5
 8019e7c:	4630      	mov	r0, r6
 8019e7e:	f000 ffa9 	bl	801add4 <_sbrk_r>
 8019e82:	1c43      	adds	r3, r0, #1
 8019e84:	d123      	bne.n	8019ece <_malloc_r+0x92>
 8019e86:	230c      	movs	r3, #12
 8019e88:	6033      	str	r3, [r6, #0]
 8019e8a:	4630      	mov	r0, r6
 8019e8c:	f003 fc6a 	bl	801d764 <__malloc_unlock>
 8019e90:	e7e3      	b.n	8019e5a <_malloc_r+0x1e>
 8019e92:	6823      	ldr	r3, [r4, #0]
 8019e94:	1b5b      	subs	r3, r3, r5
 8019e96:	d417      	bmi.n	8019ec8 <_malloc_r+0x8c>
 8019e98:	2b0b      	cmp	r3, #11
 8019e9a:	d903      	bls.n	8019ea4 <_malloc_r+0x68>
 8019e9c:	6023      	str	r3, [r4, #0]
 8019e9e:	441c      	add	r4, r3
 8019ea0:	6025      	str	r5, [r4, #0]
 8019ea2:	e004      	b.n	8019eae <_malloc_r+0x72>
 8019ea4:	6863      	ldr	r3, [r4, #4]
 8019ea6:	42a2      	cmp	r2, r4
 8019ea8:	bf0c      	ite	eq
 8019eaa:	600b      	streq	r3, [r1, #0]
 8019eac:	6053      	strne	r3, [r2, #4]
 8019eae:	4630      	mov	r0, r6
 8019eb0:	f003 fc58 	bl	801d764 <__malloc_unlock>
 8019eb4:	f104 000b 	add.w	r0, r4, #11
 8019eb8:	1d23      	adds	r3, r4, #4
 8019eba:	f020 0007 	bic.w	r0, r0, #7
 8019ebe:	1ac2      	subs	r2, r0, r3
 8019ec0:	d0cc      	beq.n	8019e5c <_malloc_r+0x20>
 8019ec2:	1a1b      	subs	r3, r3, r0
 8019ec4:	50a3      	str	r3, [r4, r2]
 8019ec6:	e7c9      	b.n	8019e5c <_malloc_r+0x20>
 8019ec8:	4622      	mov	r2, r4
 8019eca:	6864      	ldr	r4, [r4, #4]
 8019ecc:	e7cc      	b.n	8019e68 <_malloc_r+0x2c>
 8019ece:	1cc4      	adds	r4, r0, #3
 8019ed0:	f024 0403 	bic.w	r4, r4, #3
 8019ed4:	42a0      	cmp	r0, r4
 8019ed6:	d0e3      	beq.n	8019ea0 <_malloc_r+0x64>
 8019ed8:	1a21      	subs	r1, r4, r0
 8019eda:	4630      	mov	r0, r6
 8019edc:	f000 ff7a 	bl	801add4 <_sbrk_r>
 8019ee0:	3001      	adds	r0, #1
 8019ee2:	d1dd      	bne.n	8019ea0 <_malloc_r+0x64>
 8019ee4:	e7cf      	b.n	8019e86 <_malloc_r+0x4a>
 8019ee6:	bf00      	nop
 8019ee8:	20005ea4 	.word	0x20005ea4
 8019eec:	20005ea8 	.word	0x20005ea8

08019ef0 <__cvt>:
 8019ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019ef4:	ec55 4b10 	vmov	r4, r5, d0
 8019ef8:	2d00      	cmp	r5, #0
 8019efa:	460e      	mov	r6, r1
 8019efc:	4619      	mov	r1, r3
 8019efe:	462b      	mov	r3, r5
 8019f00:	bfbb      	ittet	lt
 8019f02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019f06:	461d      	movlt	r5, r3
 8019f08:	2300      	movge	r3, #0
 8019f0a:	232d      	movlt	r3, #45	; 0x2d
 8019f0c:	700b      	strb	r3, [r1, #0]
 8019f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019f10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019f14:	4691      	mov	r9, r2
 8019f16:	f023 0820 	bic.w	r8, r3, #32
 8019f1a:	bfbc      	itt	lt
 8019f1c:	4622      	movlt	r2, r4
 8019f1e:	4614      	movlt	r4, r2
 8019f20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019f24:	d005      	beq.n	8019f32 <__cvt+0x42>
 8019f26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019f2a:	d100      	bne.n	8019f2e <__cvt+0x3e>
 8019f2c:	3601      	adds	r6, #1
 8019f2e:	2102      	movs	r1, #2
 8019f30:	e000      	b.n	8019f34 <__cvt+0x44>
 8019f32:	2103      	movs	r1, #3
 8019f34:	ab03      	add	r3, sp, #12
 8019f36:	9301      	str	r3, [sp, #4]
 8019f38:	ab02      	add	r3, sp, #8
 8019f3a:	9300      	str	r3, [sp, #0]
 8019f3c:	ec45 4b10 	vmov	d0, r4, r5
 8019f40:	4653      	mov	r3, sl
 8019f42:	4632      	mov	r2, r6
 8019f44:	f002 f94c 	bl	801c1e0 <_dtoa_r>
 8019f48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019f4c:	4607      	mov	r7, r0
 8019f4e:	d102      	bne.n	8019f56 <__cvt+0x66>
 8019f50:	f019 0f01 	tst.w	r9, #1
 8019f54:	d022      	beq.n	8019f9c <__cvt+0xac>
 8019f56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019f5a:	eb07 0906 	add.w	r9, r7, r6
 8019f5e:	d110      	bne.n	8019f82 <__cvt+0x92>
 8019f60:	783b      	ldrb	r3, [r7, #0]
 8019f62:	2b30      	cmp	r3, #48	; 0x30
 8019f64:	d10a      	bne.n	8019f7c <__cvt+0x8c>
 8019f66:	2200      	movs	r2, #0
 8019f68:	2300      	movs	r3, #0
 8019f6a:	4620      	mov	r0, r4
 8019f6c:	4629      	mov	r1, r5
 8019f6e:	f7e6 fdbb 	bl	8000ae8 <__aeabi_dcmpeq>
 8019f72:	b918      	cbnz	r0, 8019f7c <__cvt+0x8c>
 8019f74:	f1c6 0601 	rsb	r6, r6, #1
 8019f78:	f8ca 6000 	str.w	r6, [sl]
 8019f7c:	f8da 3000 	ldr.w	r3, [sl]
 8019f80:	4499      	add	r9, r3
 8019f82:	2200      	movs	r2, #0
 8019f84:	2300      	movs	r3, #0
 8019f86:	4620      	mov	r0, r4
 8019f88:	4629      	mov	r1, r5
 8019f8a:	f7e6 fdad 	bl	8000ae8 <__aeabi_dcmpeq>
 8019f8e:	b108      	cbz	r0, 8019f94 <__cvt+0xa4>
 8019f90:	f8cd 900c 	str.w	r9, [sp, #12]
 8019f94:	2230      	movs	r2, #48	; 0x30
 8019f96:	9b03      	ldr	r3, [sp, #12]
 8019f98:	454b      	cmp	r3, r9
 8019f9a:	d307      	bcc.n	8019fac <__cvt+0xbc>
 8019f9c:	9b03      	ldr	r3, [sp, #12]
 8019f9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019fa0:	1bdb      	subs	r3, r3, r7
 8019fa2:	4638      	mov	r0, r7
 8019fa4:	6013      	str	r3, [r2, #0]
 8019fa6:	b004      	add	sp, #16
 8019fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fac:	1c59      	adds	r1, r3, #1
 8019fae:	9103      	str	r1, [sp, #12]
 8019fb0:	701a      	strb	r2, [r3, #0]
 8019fb2:	e7f0      	b.n	8019f96 <__cvt+0xa6>

08019fb4 <__exponent>:
 8019fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019fb6:	4603      	mov	r3, r0
 8019fb8:	2900      	cmp	r1, #0
 8019fba:	bfb8      	it	lt
 8019fbc:	4249      	neglt	r1, r1
 8019fbe:	f803 2b02 	strb.w	r2, [r3], #2
 8019fc2:	bfb4      	ite	lt
 8019fc4:	222d      	movlt	r2, #45	; 0x2d
 8019fc6:	222b      	movge	r2, #43	; 0x2b
 8019fc8:	2909      	cmp	r1, #9
 8019fca:	7042      	strb	r2, [r0, #1]
 8019fcc:	dd2a      	ble.n	801a024 <__exponent+0x70>
 8019fce:	f10d 0407 	add.w	r4, sp, #7
 8019fd2:	46a4      	mov	ip, r4
 8019fd4:	270a      	movs	r7, #10
 8019fd6:	46a6      	mov	lr, r4
 8019fd8:	460a      	mov	r2, r1
 8019fda:	fb91 f6f7 	sdiv	r6, r1, r7
 8019fde:	fb07 1516 	mls	r5, r7, r6, r1
 8019fe2:	3530      	adds	r5, #48	; 0x30
 8019fe4:	2a63      	cmp	r2, #99	; 0x63
 8019fe6:	f104 34ff 	add.w	r4, r4, #4294967295
 8019fea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019fee:	4631      	mov	r1, r6
 8019ff0:	dcf1      	bgt.n	8019fd6 <__exponent+0x22>
 8019ff2:	3130      	adds	r1, #48	; 0x30
 8019ff4:	f1ae 0502 	sub.w	r5, lr, #2
 8019ff8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019ffc:	1c44      	adds	r4, r0, #1
 8019ffe:	4629      	mov	r1, r5
 801a000:	4561      	cmp	r1, ip
 801a002:	d30a      	bcc.n	801a01a <__exponent+0x66>
 801a004:	f10d 0209 	add.w	r2, sp, #9
 801a008:	eba2 020e 	sub.w	r2, r2, lr
 801a00c:	4565      	cmp	r5, ip
 801a00e:	bf88      	it	hi
 801a010:	2200      	movhi	r2, #0
 801a012:	4413      	add	r3, r2
 801a014:	1a18      	subs	r0, r3, r0
 801a016:	b003      	add	sp, #12
 801a018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a01a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a01e:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a022:	e7ed      	b.n	801a000 <__exponent+0x4c>
 801a024:	2330      	movs	r3, #48	; 0x30
 801a026:	3130      	adds	r1, #48	; 0x30
 801a028:	7083      	strb	r3, [r0, #2]
 801a02a:	70c1      	strb	r1, [r0, #3]
 801a02c:	1d03      	adds	r3, r0, #4
 801a02e:	e7f1      	b.n	801a014 <__exponent+0x60>

0801a030 <_printf_float>:
 801a030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a034:	ed2d 8b02 	vpush	{d8}
 801a038:	b08d      	sub	sp, #52	; 0x34
 801a03a:	460c      	mov	r4, r1
 801a03c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a040:	4616      	mov	r6, r2
 801a042:	461f      	mov	r7, r3
 801a044:	4605      	mov	r5, r0
 801a046:	f003 fafb 	bl	801d640 <_localeconv_r>
 801a04a:	f8d0 a000 	ldr.w	sl, [r0]
 801a04e:	4650      	mov	r0, sl
 801a050:	f7e6 f8ce 	bl	80001f0 <strlen>
 801a054:	2300      	movs	r3, #0
 801a056:	930a      	str	r3, [sp, #40]	; 0x28
 801a058:	6823      	ldr	r3, [r4, #0]
 801a05a:	9305      	str	r3, [sp, #20]
 801a05c:	f8d8 3000 	ldr.w	r3, [r8]
 801a060:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a064:	3307      	adds	r3, #7
 801a066:	f023 0307 	bic.w	r3, r3, #7
 801a06a:	f103 0208 	add.w	r2, r3, #8
 801a06e:	f8c8 2000 	str.w	r2, [r8]
 801a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a076:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a07a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a07e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a082:	9307      	str	r3, [sp, #28]
 801a084:	f8cd 8018 	str.w	r8, [sp, #24]
 801a088:	ee08 0a10 	vmov	s16, r0
 801a08c:	4b9f      	ldr	r3, [pc, #636]	; (801a30c <_printf_float+0x2dc>)
 801a08e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a092:	f04f 32ff 	mov.w	r2, #4294967295
 801a096:	f7e6 fd59 	bl	8000b4c <__aeabi_dcmpun>
 801a09a:	bb88      	cbnz	r0, 801a100 <_printf_float+0xd0>
 801a09c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a0a0:	4b9a      	ldr	r3, [pc, #616]	; (801a30c <_printf_float+0x2dc>)
 801a0a2:	f04f 32ff 	mov.w	r2, #4294967295
 801a0a6:	f7e6 fd33 	bl	8000b10 <__aeabi_dcmple>
 801a0aa:	bb48      	cbnz	r0, 801a100 <_printf_float+0xd0>
 801a0ac:	2200      	movs	r2, #0
 801a0ae:	2300      	movs	r3, #0
 801a0b0:	4640      	mov	r0, r8
 801a0b2:	4649      	mov	r1, r9
 801a0b4:	f7e6 fd22 	bl	8000afc <__aeabi_dcmplt>
 801a0b8:	b110      	cbz	r0, 801a0c0 <_printf_float+0x90>
 801a0ba:	232d      	movs	r3, #45	; 0x2d
 801a0bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a0c0:	4b93      	ldr	r3, [pc, #588]	; (801a310 <_printf_float+0x2e0>)
 801a0c2:	4894      	ldr	r0, [pc, #592]	; (801a314 <_printf_float+0x2e4>)
 801a0c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a0c8:	bf94      	ite	ls
 801a0ca:	4698      	movls	r8, r3
 801a0cc:	4680      	movhi	r8, r0
 801a0ce:	2303      	movs	r3, #3
 801a0d0:	6123      	str	r3, [r4, #16]
 801a0d2:	9b05      	ldr	r3, [sp, #20]
 801a0d4:	f023 0204 	bic.w	r2, r3, #4
 801a0d8:	6022      	str	r2, [r4, #0]
 801a0da:	f04f 0900 	mov.w	r9, #0
 801a0de:	9700      	str	r7, [sp, #0]
 801a0e0:	4633      	mov	r3, r6
 801a0e2:	aa0b      	add	r2, sp, #44	; 0x2c
 801a0e4:	4621      	mov	r1, r4
 801a0e6:	4628      	mov	r0, r5
 801a0e8:	f000 f9d8 	bl	801a49c <_printf_common>
 801a0ec:	3001      	adds	r0, #1
 801a0ee:	f040 8090 	bne.w	801a212 <_printf_float+0x1e2>
 801a0f2:	f04f 30ff 	mov.w	r0, #4294967295
 801a0f6:	b00d      	add	sp, #52	; 0x34
 801a0f8:	ecbd 8b02 	vpop	{d8}
 801a0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a100:	4642      	mov	r2, r8
 801a102:	464b      	mov	r3, r9
 801a104:	4640      	mov	r0, r8
 801a106:	4649      	mov	r1, r9
 801a108:	f7e6 fd20 	bl	8000b4c <__aeabi_dcmpun>
 801a10c:	b140      	cbz	r0, 801a120 <_printf_float+0xf0>
 801a10e:	464b      	mov	r3, r9
 801a110:	2b00      	cmp	r3, #0
 801a112:	bfbc      	itt	lt
 801a114:	232d      	movlt	r3, #45	; 0x2d
 801a116:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a11a:	487f      	ldr	r0, [pc, #508]	; (801a318 <_printf_float+0x2e8>)
 801a11c:	4b7f      	ldr	r3, [pc, #508]	; (801a31c <_printf_float+0x2ec>)
 801a11e:	e7d1      	b.n	801a0c4 <_printf_float+0x94>
 801a120:	6863      	ldr	r3, [r4, #4]
 801a122:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a126:	9206      	str	r2, [sp, #24]
 801a128:	1c5a      	adds	r2, r3, #1
 801a12a:	d13f      	bne.n	801a1ac <_printf_float+0x17c>
 801a12c:	2306      	movs	r3, #6
 801a12e:	6063      	str	r3, [r4, #4]
 801a130:	9b05      	ldr	r3, [sp, #20]
 801a132:	6861      	ldr	r1, [r4, #4]
 801a134:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a138:	2300      	movs	r3, #0
 801a13a:	9303      	str	r3, [sp, #12]
 801a13c:	ab0a      	add	r3, sp, #40	; 0x28
 801a13e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a142:	ab09      	add	r3, sp, #36	; 0x24
 801a144:	ec49 8b10 	vmov	d0, r8, r9
 801a148:	9300      	str	r3, [sp, #0]
 801a14a:	6022      	str	r2, [r4, #0]
 801a14c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a150:	4628      	mov	r0, r5
 801a152:	f7ff fecd 	bl	8019ef0 <__cvt>
 801a156:	9b06      	ldr	r3, [sp, #24]
 801a158:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a15a:	2b47      	cmp	r3, #71	; 0x47
 801a15c:	4680      	mov	r8, r0
 801a15e:	d108      	bne.n	801a172 <_printf_float+0x142>
 801a160:	1cc8      	adds	r0, r1, #3
 801a162:	db02      	blt.n	801a16a <_printf_float+0x13a>
 801a164:	6863      	ldr	r3, [r4, #4]
 801a166:	4299      	cmp	r1, r3
 801a168:	dd41      	ble.n	801a1ee <_printf_float+0x1be>
 801a16a:	f1ab 0b02 	sub.w	fp, fp, #2
 801a16e:	fa5f fb8b 	uxtb.w	fp, fp
 801a172:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a176:	d820      	bhi.n	801a1ba <_printf_float+0x18a>
 801a178:	3901      	subs	r1, #1
 801a17a:	465a      	mov	r2, fp
 801a17c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a180:	9109      	str	r1, [sp, #36]	; 0x24
 801a182:	f7ff ff17 	bl	8019fb4 <__exponent>
 801a186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a188:	1813      	adds	r3, r2, r0
 801a18a:	2a01      	cmp	r2, #1
 801a18c:	4681      	mov	r9, r0
 801a18e:	6123      	str	r3, [r4, #16]
 801a190:	dc02      	bgt.n	801a198 <_printf_float+0x168>
 801a192:	6822      	ldr	r2, [r4, #0]
 801a194:	07d2      	lsls	r2, r2, #31
 801a196:	d501      	bpl.n	801a19c <_printf_float+0x16c>
 801a198:	3301      	adds	r3, #1
 801a19a:	6123      	str	r3, [r4, #16]
 801a19c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d09c      	beq.n	801a0de <_printf_float+0xae>
 801a1a4:	232d      	movs	r3, #45	; 0x2d
 801a1a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a1aa:	e798      	b.n	801a0de <_printf_float+0xae>
 801a1ac:	9a06      	ldr	r2, [sp, #24]
 801a1ae:	2a47      	cmp	r2, #71	; 0x47
 801a1b0:	d1be      	bne.n	801a130 <_printf_float+0x100>
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d1bc      	bne.n	801a130 <_printf_float+0x100>
 801a1b6:	2301      	movs	r3, #1
 801a1b8:	e7b9      	b.n	801a12e <_printf_float+0xfe>
 801a1ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a1be:	d118      	bne.n	801a1f2 <_printf_float+0x1c2>
 801a1c0:	2900      	cmp	r1, #0
 801a1c2:	6863      	ldr	r3, [r4, #4]
 801a1c4:	dd0b      	ble.n	801a1de <_printf_float+0x1ae>
 801a1c6:	6121      	str	r1, [r4, #16]
 801a1c8:	b913      	cbnz	r3, 801a1d0 <_printf_float+0x1a0>
 801a1ca:	6822      	ldr	r2, [r4, #0]
 801a1cc:	07d0      	lsls	r0, r2, #31
 801a1ce:	d502      	bpl.n	801a1d6 <_printf_float+0x1a6>
 801a1d0:	3301      	adds	r3, #1
 801a1d2:	440b      	add	r3, r1
 801a1d4:	6123      	str	r3, [r4, #16]
 801a1d6:	65a1      	str	r1, [r4, #88]	; 0x58
 801a1d8:	f04f 0900 	mov.w	r9, #0
 801a1dc:	e7de      	b.n	801a19c <_printf_float+0x16c>
 801a1de:	b913      	cbnz	r3, 801a1e6 <_printf_float+0x1b6>
 801a1e0:	6822      	ldr	r2, [r4, #0]
 801a1e2:	07d2      	lsls	r2, r2, #31
 801a1e4:	d501      	bpl.n	801a1ea <_printf_float+0x1ba>
 801a1e6:	3302      	adds	r3, #2
 801a1e8:	e7f4      	b.n	801a1d4 <_printf_float+0x1a4>
 801a1ea:	2301      	movs	r3, #1
 801a1ec:	e7f2      	b.n	801a1d4 <_printf_float+0x1a4>
 801a1ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a1f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a1f4:	4299      	cmp	r1, r3
 801a1f6:	db05      	blt.n	801a204 <_printf_float+0x1d4>
 801a1f8:	6823      	ldr	r3, [r4, #0]
 801a1fa:	6121      	str	r1, [r4, #16]
 801a1fc:	07d8      	lsls	r0, r3, #31
 801a1fe:	d5ea      	bpl.n	801a1d6 <_printf_float+0x1a6>
 801a200:	1c4b      	adds	r3, r1, #1
 801a202:	e7e7      	b.n	801a1d4 <_printf_float+0x1a4>
 801a204:	2900      	cmp	r1, #0
 801a206:	bfd4      	ite	le
 801a208:	f1c1 0202 	rsble	r2, r1, #2
 801a20c:	2201      	movgt	r2, #1
 801a20e:	4413      	add	r3, r2
 801a210:	e7e0      	b.n	801a1d4 <_printf_float+0x1a4>
 801a212:	6823      	ldr	r3, [r4, #0]
 801a214:	055a      	lsls	r2, r3, #21
 801a216:	d407      	bmi.n	801a228 <_printf_float+0x1f8>
 801a218:	6923      	ldr	r3, [r4, #16]
 801a21a:	4642      	mov	r2, r8
 801a21c:	4631      	mov	r1, r6
 801a21e:	4628      	mov	r0, r5
 801a220:	47b8      	blx	r7
 801a222:	3001      	adds	r0, #1
 801a224:	d12c      	bne.n	801a280 <_printf_float+0x250>
 801a226:	e764      	b.n	801a0f2 <_printf_float+0xc2>
 801a228:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a22c:	f240 80e0 	bls.w	801a3f0 <_printf_float+0x3c0>
 801a230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a234:	2200      	movs	r2, #0
 801a236:	2300      	movs	r3, #0
 801a238:	f7e6 fc56 	bl	8000ae8 <__aeabi_dcmpeq>
 801a23c:	2800      	cmp	r0, #0
 801a23e:	d034      	beq.n	801a2aa <_printf_float+0x27a>
 801a240:	4a37      	ldr	r2, [pc, #220]	; (801a320 <_printf_float+0x2f0>)
 801a242:	2301      	movs	r3, #1
 801a244:	4631      	mov	r1, r6
 801a246:	4628      	mov	r0, r5
 801a248:	47b8      	blx	r7
 801a24a:	3001      	adds	r0, #1
 801a24c:	f43f af51 	beq.w	801a0f2 <_printf_float+0xc2>
 801a250:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a254:	429a      	cmp	r2, r3
 801a256:	db02      	blt.n	801a25e <_printf_float+0x22e>
 801a258:	6823      	ldr	r3, [r4, #0]
 801a25a:	07d8      	lsls	r0, r3, #31
 801a25c:	d510      	bpl.n	801a280 <_printf_float+0x250>
 801a25e:	ee18 3a10 	vmov	r3, s16
 801a262:	4652      	mov	r2, sl
 801a264:	4631      	mov	r1, r6
 801a266:	4628      	mov	r0, r5
 801a268:	47b8      	blx	r7
 801a26a:	3001      	adds	r0, #1
 801a26c:	f43f af41 	beq.w	801a0f2 <_printf_float+0xc2>
 801a270:	f04f 0800 	mov.w	r8, #0
 801a274:	f104 091a 	add.w	r9, r4, #26
 801a278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a27a:	3b01      	subs	r3, #1
 801a27c:	4543      	cmp	r3, r8
 801a27e:	dc09      	bgt.n	801a294 <_printf_float+0x264>
 801a280:	6823      	ldr	r3, [r4, #0]
 801a282:	079b      	lsls	r3, r3, #30
 801a284:	f100 8105 	bmi.w	801a492 <_printf_float+0x462>
 801a288:	68e0      	ldr	r0, [r4, #12]
 801a28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a28c:	4298      	cmp	r0, r3
 801a28e:	bfb8      	it	lt
 801a290:	4618      	movlt	r0, r3
 801a292:	e730      	b.n	801a0f6 <_printf_float+0xc6>
 801a294:	2301      	movs	r3, #1
 801a296:	464a      	mov	r2, r9
 801a298:	4631      	mov	r1, r6
 801a29a:	4628      	mov	r0, r5
 801a29c:	47b8      	blx	r7
 801a29e:	3001      	adds	r0, #1
 801a2a0:	f43f af27 	beq.w	801a0f2 <_printf_float+0xc2>
 801a2a4:	f108 0801 	add.w	r8, r8, #1
 801a2a8:	e7e6      	b.n	801a278 <_printf_float+0x248>
 801a2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	dc39      	bgt.n	801a324 <_printf_float+0x2f4>
 801a2b0:	4a1b      	ldr	r2, [pc, #108]	; (801a320 <_printf_float+0x2f0>)
 801a2b2:	2301      	movs	r3, #1
 801a2b4:	4631      	mov	r1, r6
 801a2b6:	4628      	mov	r0, r5
 801a2b8:	47b8      	blx	r7
 801a2ba:	3001      	adds	r0, #1
 801a2bc:	f43f af19 	beq.w	801a0f2 <_printf_float+0xc2>
 801a2c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a2c4:	4313      	orrs	r3, r2
 801a2c6:	d102      	bne.n	801a2ce <_printf_float+0x29e>
 801a2c8:	6823      	ldr	r3, [r4, #0]
 801a2ca:	07d9      	lsls	r1, r3, #31
 801a2cc:	d5d8      	bpl.n	801a280 <_printf_float+0x250>
 801a2ce:	ee18 3a10 	vmov	r3, s16
 801a2d2:	4652      	mov	r2, sl
 801a2d4:	4631      	mov	r1, r6
 801a2d6:	4628      	mov	r0, r5
 801a2d8:	47b8      	blx	r7
 801a2da:	3001      	adds	r0, #1
 801a2dc:	f43f af09 	beq.w	801a0f2 <_printf_float+0xc2>
 801a2e0:	f04f 0900 	mov.w	r9, #0
 801a2e4:	f104 0a1a 	add.w	sl, r4, #26
 801a2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2ea:	425b      	negs	r3, r3
 801a2ec:	454b      	cmp	r3, r9
 801a2ee:	dc01      	bgt.n	801a2f4 <_printf_float+0x2c4>
 801a2f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a2f2:	e792      	b.n	801a21a <_printf_float+0x1ea>
 801a2f4:	2301      	movs	r3, #1
 801a2f6:	4652      	mov	r2, sl
 801a2f8:	4631      	mov	r1, r6
 801a2fa:	4628      	mov	r0, r5
 801a2fc:	47b8      	blx	r7
 801a2fe:	3001      	adds	r0, #1
 801a300:	f43f aef7 	beq.w	801a0f2 <_printf_float+0xc2>
 801a304:	f109 0901 	add.w	r9, r9, #1
 801a308:	e7ee      	b.n	801a2e8 <_printf_float+0x2b8>
 801a30a:	bf00      	nop
 801a30c:	7fefffff 	.word	0x7fefffff
 801a310:	08020e98 	.word	0x08020e98
 801a314:	08020e9c 	.word	0x08020e9c
 801a318:	08020ea4 	.word	0x08020ea4
 801a31c:	08020ea0 	.word	0x08020ea0
 801a320:	080211e1 	.word	0x080211e1
 801a324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a326:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a328:	429a      	cmp	r2, r3
 801a32a:	bfa8      	it	ge
 801a32c:	461a      	movge	r2, r3
 801a32e:	2a00      	cmp	r2, #0
 801a330:	4691      	mov	r9, r2
 801a332:	dc37      	bgt.n	801a3a4 <_printf_float+0x374>
 801a334:	f04f 0b00 	mov.w	fp, #0
 801a338:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a33c:	f104 021a 	add.w	r2, r4, #26
 801a340:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a342:	9305      	str	r3, [sp, #20]
 801a344:	eba3 0309 	sub.w	r3, r3, r9
 801a348:	455b      	cmp	r3, fp
 801a34a:	dc33      	bgt.n	801a3b4 <_printf_float+0x384>
 801a34c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a350:	429a      	cmp	r2, r3
 801a352:	db3b      	blt.n	801a3cc <_printf_float+0x39c>
 801a354:	6823      	ldr	r3, [r4, #0]
 801a356:	07da      	lsls	r2, r3, #31
 801a358:	d438      	bmi.n	801a3cc <_printf_float+0x39c>
 801a35a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a35c:	9b05      	ldr	r3, [sp, #20]
 801a35e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a360:	1ad3      	subs	r3, r2, r3
 801a362:	eba2 0901 	sub.w	r9, r2, r1
 801a366:	4599      	cmp	r9, r3
 801a368:	bfa8      	it	ge
 801a36a:	4699      	movge	r9, r3
 801a36c:	f1b9 0f00 	cmp.w	r9, #0
 801a370:	dc35      	bgt.n	801a3de <_printf_float+0x3ae>
 801a372:	f04f 0800 	mov.w	r8, #0
 801a376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a37a:	f104 0a1a 	add.w	sl, r4, #26
 801a37e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a382:	1a9b      	subs	r3, r3, r2
 801a384:	eba3 0309 	sub.w	r3, r3, r9
 801a388:	4543      	cmp	r3, r8
 801a38a:	f77f af79 	ble.w	801a280 <_printf_float+0x250>
 801a38e:	2301      	movs	r3, #1
 801a390:	4652      	mov	r2, sl
 801a392:	4631      	mov	r1, r6
 801a394:	4628      	mov	r0, r5
 801a396:	47b8      	blx	r7
 801a398:	3001      	adds	r0, #1
 801a39a:	f43f aeaa 	beq.w	801a0f2 <_printf_float+0xc2>
 801a39e:	f108 0801 	add.w	r8, r8, #1
 801a3a2:	e7ec      	b.n	801a37e <_printf_float+0x34e>
 801a3a4:	4613      	mov	r3, r2
 801a3a6:	4631      	mov	r1, r6
 801a3a8:	4642      	mov	r2, r8
 801a3aa:	4628      	mov	r0, r5
 801a3ac:	47b8      	blx	r7
 801a3ae:	3001      	adds	r0, #1
 801a3b0:	d1c0      	bne.n	801a334 <_printf_float+0x304>
 801a3b2:	e69e      	b.n	801a0f2 <_printf_float+0xc2>
 801a3b4:	2301      	movs	r3, #1
 801a3b6:	4631      	mov	r1, r6
 801a3b8:	4628      	mov	r0, r5
 801a3ba:	9205      	str	r2, [sp, #20]
 801a3bc:	47b8      	blx	r7
 801a3be:	3001      	adds	r0, #1
 801a3c0:	f43f ae97 	beq.w	801a0f2 <_printf_float+0xc2>
 801a3c4:	9a05      	ldr	r2, [sp, #20]
 801a3c6:	f10b 0b01 	add.w	fp, fp, #1
 801a3ca:	e7b9      	b.n	801a340 <_printf_float+0x310>
 801a3cc:	ee18 3a10 	vmov	r3, s16
 801a3d0:	4652      	mov	r2, sl
 801a3d2:	4631      	mov	r1, r6
 801a3d4:	4628      	mov	r0, r5
 801a3d6:	47b8      	blx	r7
 801a3d8:	3001      	adds	r0, #1
 801a3da:	d1be      	bne.n	801a35a <_printf_float+0x32a>
 801a3dc:	e689      	b.n	801a0f2 <_printf_float+0xc2>
 801a3de:	9a05      	ldr	r2, [sp, #20]
 801a3e0:	464b      	mov	r3, r9
 801a3e2:	4442      	add	r2, r8
 801a3e4:	4631      	mov	r1, r6
 801a3e6:	4628      	mov	r0, r5
 801a3e8:	47b8      	blx	r7
 801a3ea:	3001      	adds	r0, #1
 801a3ec:	d1c1      	bne.n	801a372 <_printf_float+0x342>
 801a3ee:	e680      	b.n	801a0f2 <_printf_float+0xc2>
 801a3f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a3f2:	2a01      	cmp	r2, #1
 801a3f4:	dc01      	bgt.n	801a3fa <_printf_float+0x3ca>
 801a3f6:	07db      	lsls	r3, r3, #31
 801a3f8:	d538      	bpl.n	801a46c <_printf_float+0x43c>
 801a3fa:	2301      	movs	r3, #1
 801a3fc:	4642      	mov	r2, r8
 801a3fe:	4631      	mov	r1, r6
 801a400:	4628      	mov	r0, r5
 801a402:	47b8      	blx	r7
 801a404:	3001      	adds	r0, #1
 801a406:	f43f ae74 	beq.w	801a0f2 <_printf_float+0xc2>
 801a40a:	ee18 3a10 	vmov	r3, s16
 801a40e:	4652      	mov	r2, sl
 801a410:	4631      	mov	r1, r6
 801a412:	4628      	mov	r0, r5
 801a414:	47b8      	blx	r7
 801a416:	3001      	adds	r0, #1
 801a418:	f43f ae6b 	beq.w	801a0f2 <_printf_float+0xc2>
 801a41c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a420:	2200      	movs	r2, #0
 801a422:	2300      	movs	r3, #0
 801a424:	f7e6 fb60 	bl	8000ae8 <__aeabi_dcmpeq>
 801a428:	b9d8      	cbnz	r0, 801a462 <_printf_float+0x432>
 801a42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a42c:	f108 0201 	add.w	r2, r8, #1
 801a430:	3b01      	subs	r3, #1
 801a432:	4631      	mov	r1, r6
 801a434:	4628      	mov	r0, r5
 801a436:	47b8      	blx	r7
 801a438:	3001      	adds	r0, #1
 801a43a:	d10e      	bne.n	801a45a <_printf_float+0x42a>
 801a43c:	e659      	b.n	801a0f2 <_printf_float+0xc2>
 801a43e:	2301      	movs	r3, #1
 801a440:	4652      	mov	r2, sl
 801a442:	4631      	mov	r1, r6
 801a444:	4628      	mov	r0, r5
 801a446:	47b8      	blx	r7
 801a448:	3001      	adds	r0, #1
 801a44a:	f43f ae52 	beq.w	801a0f2 <_printf_float+0xc2>
 801a44e:	f108 0801 	add.w	r8, r8, #1
 801a452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a454:	3b01      	subs	r3, #1
 801a456:	4543      	cmp	r3, r8
 801a458:	dcf1      	bgt.n	801a43e <_printf_float+0x40e>
 801a45a:	464b      	mov	r3, r9
 801a45c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a460:	e6dc      	b.n	801a21c <_printf_float+0x1ec>
 801a462:	f04f 0800 	mov.w	r8, #0
 801a466:	f104 0a1a 	add.w	sl, r4, #26
 801a46a:	e7f2      	b.n	801a452 <_printf_float+0x422>
 801a46c:	2301      	movs	r3, #1
 801a46e:	4642      	mov	r2, r8
 801a470:	e7df      	b.n	801a432 <_printf_float+0x402>
 801a472:	2301      	movs	r3, #1
 801a474:	464a      	mov	r2, r9
 801a476:	4631      	mov	r1, r6
 801a478:	4628      	mov	r0, r5
 801a47a:	47b8      	blx	r7
 801a47c:	3001      	adds	r0, #1
 801a47e:	f43f ae38 	beq.w	801a0f2 <_printf_float+0xc2>
 801a482:	f108 0801 	add.w	r8, r8, #1
 801a486:	68e3      	ldr	r3, [r4, #12]
 801a488:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a48a:	1a5b      	subs	r3, r3, r1
 801a48c:	4543      	cmp	r3, r8
 801a48e:	dcf0      	bgt.n	801a472 <_printf_float+0x442>
 801a490:	e6fa      	b.n	801a288 <_printf_float+0x258>
 801a492:	f04f 0800 	mov.w	r8, #0
 801a496:	f104 0919 	add.w	r9, r4, #25
 801a49a:	e7f4      	b.n	801a486 <_printf_float+0x456>

0801a49c <_printf_common>:
 801a49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4a0:	4616      	mov	r6, r2
 801a4a2:	4699      	mov	r9, r3
 801a4a4:	688a      	ldr	r2, [r1, #8]
 801a4a6:	690b      	ldr	r3, [r1, #16]
 801a4a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a4ac:	4293      	cmp	r3, r2
 801a4ae:	bfb8      	it	lt
 801a4b0:	4613      	movlt	r3, r2
 801a4b2:	6033      	str	r3, [r6, #0]
 801a4b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a4b8:	4607      	mov	r7, r0
 801a4ba:	460c      	mov	r4, r1
 801a4bc:	b10a      	cbz	r2, 801a4c2 <_printf_common+0x26>
 801a4be:	3301      	adds	r3, #1
 801a4c0:	6033      	str	r3, [r6, #0]
 801a4c2:	6823      	ldr	r3, [r4, #0]
 801a4c4:	0699      	lsls	r1, r3, #26
 801a4c6:	bf42      	ittt	mi
 801a4c8:	6833      	ldrmi	r3, [r6, #0]
 801a4ca:	3302      	addmi	r3, #2
 801a4cc:	6033      	strmi	r3, [r6, #0]
 801a4ce:	6825      	ldr	r5, [r4, #0]
 801a4d0:	f015 0506 	ands.w	r5, r5, #6
 801a4d4:	d106      	bne.n	801a4e4 <_printf_common+0x48>
 801a4d6:	f104 0a19 	add.w	sl, r4, #25
 801a4da:	68e3      	ldr	r3, [r4, #12]
 801a4dc:	6832      	ldr	r2, [r6, #0]
 801a4de:	1a9b      	subs	r3, r3, r2
 801a4e0:	42ab      	cmp	r3, r5
 801a4e2:	dc26      	bgt.n	801a532 <_printf_common+0x96>
 801a4e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a4e8:	1e13      	subs	r3, r2, #0
 801a4ea:	6822      	ldr	r2, [r4, #0]
 801a4ec:	bf18      	it	ne
 801a4ee:	2301      	movne	r3, #1
 801a4f0:	0692      	lsls	r2, r2, #26
 801a4f2:	d42b      	bmi.n	801a54c <_printf_common+0xb0>
 801a4f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a4f8:	4649      	mov	r1, r9
 801a4fa:	4638      	mov	r0, r7
 801a4fc:	47c0      	blx	r8
 801a4fe:	3001      	adds	r0, #1
 801a500:	d01e      	beq.n	801a540 <_printf_common+0xa4>
 801a502:	6823      	ldr	r3, [r4, #0]
 801a504:	68e5      	ldr	r5, [r4, #12]
 801a506:	6832      	ldr	r2, [r6, #0]
 801a508:	f003 0306 	and.w	r3, r3, #6
 801a50c:	2b04      	cmp	r3, #4
 801a50e:	bf08      	it	eq
 801a510:	1aad      	subeq	r5, r5, r2
 801a512:	68a3      	ldr	r3, [r4, #8]
 801a514:	6922      	ldr	r2, [r4, #16]
 801a516:	bf0c      	ite	eq
 801a518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a51c:	2500      	movne	r5, #0
 801a51e:	4293      	cmp	r3, r2
 801a520:	bfc4      	itt	gt
 801a522:	1a9b      	subgt	r3, r3, r2
 801a524:	18ed      	addgt	r5, r5, r3
 801a526:	2600      	movs	r6, #0
 801a528:	341a      	adds	r4, #26
 801a52a:	42b5      	cmp	r5, r6
 801a52c:	d11a      	bne.n	801a564 <_printf_common+0xc8>
 801a52e:	2000      	movs	r0, #0
 801a530:	e008      	b.n	801a544 <_printf_common+0xa8>
 801a532:	2301      	movs	r3, #1
 801a534:	4652      	mov	r2, sl
 801a536:	4649      	mov	r1, r9
 801a538:	4638      	mov	r0, r7
 801a53a:	47c0      	blx	r8
 801a53c:	3001      	adds	r0, #1
 801a53e:	d103      	bne.n	801a548 <_printf_common+0xac>
 801a540:	f04f 30ff 	mov.w	r0, #4294967295
 801a544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a548:	3501      	adds	r5, #1
 801a54a:	e7c6      	b.n	801a4da <_printf_common+0x3e>
 801a54c:	18e1      	adds	r1, r4, r3
 801a54e:	1c5a      	adds	r2, r3, #1
 801a550:	2030      	movs	r0, #48	; 0x30
 801a552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a556:	4422      	add	r2, r4
 801a558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a55c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a560:	3302      	adds	r3, #2
 801a562:	e7c7      	b.n	801a4f4 <_printf_common+0x58>
 801a564:	2301      	movs	r3, #1
 801a566:	4622      	mov	r2, r4
 801a568:	4649      	mov	r1, r9
 801a56a:	4638      	mov	r0, r7
 801a56c:	47c0      	blx	r8
 801a56e:	3001      	adds	r0, #1
 801a570:	d0e6      	beq.n	801a540 <_printf_common+0xa4>
 801a572:	3601      	adds	r6, #1
 801a574:	e7d9      	b.n	801a52a <_printf_common+0x8e>
	...

0801a578 <_printf_i>:
 801a578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a57c:	460c      	mov	r4, r1
 801a57e:	4691      	mov	r9, r2
 801a580:	7e27      	ldrb	r7, [r4, #24]
 801a582:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a584:	2f78      	cmp	r7, #120	; 0x78
 801a586:	4680      	mov	r8, r0
 801a588:	469a      	mov	sl, r3
 801a58a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a58e:	d807      	bhi.n	801a5a0 <_printf_i+0x28>
 801a590:	2f62      	cmp	r7, #98	; 0x62
 801a592:	d80a      	bhi.n	801a5aa <_printf_i+0x32>
 801a594:	2f00      	cmp	r7, #0
 801a596:	f000 80d8 	beq.w	801a74a <_printf_i+0x1d2>
 801a59a:	2f58      	cmp	r7, #88	; 0x58
 801a59c:	f000 80a3 	beq.w	801a6e6 <_printf_i+0x16e>
 801a5a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a5a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a5a8:	e03a      	b.n	801a620 <_printf_i+0xa8>
 801a5aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a5ae:	2b15      	cmp	r3, #21
 801a5b0:	d8f6      	bhi.n	801a5a0 <_printf_i+0x28>
 801a5b2:	a001      	add	r0, pc, #4	; (adr r0, 801a5b8 <_printf_i+0x40>)
 801a5b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a5b8:	0801a611 	.word	0x0801a611
 801a5bc:	0801a625 	.word	0x0801a625
 801a5c0:	0801a5a1 	.word	0x0801a5a1
 801a5c4:	0801a5a1 	.word	0x0801a5a1
 801a5c8:	0801a5a1 	.word	0x0801a5a1
 801a5cc:	0801a5a1 	.word	0x0801a5a1
 801a5d0:	0801a625 	.word	0x0801a625
 801a5d4:	0801a5a1 	.word	0x0801a5a1
 801a5d8:	0801a5a1 	.word	0x0801a5a1
 801a5dc:	0801a5a1 	.word	0x0801a5a1
 801a5e0:	0801a5a1 	.word	0x0801a5a1
 801a5e4:	0801a731 	.word	0x0801a731
 801a5e8:	0801a655 	.word	0x0801a655
 801a5ec:	0801a713 	.word	0x0801a713
 801a5f0:	0801a5a1 	.word	0x0801a5a1
 801a5f4:	0801a5a1 	.word	0x0801a5a1
 801a5f8:	0801a753 	.word	0x0801a753
 801a5fc:	0801a5a1 	.word	0x0801a5a1
 801a600:	0801a655 	.word	0x0801a655
 801a604:	0801a5a1 	.word	0x0801a5a1
 801a608:	0801a5a1 	.word	0x0801a5a1
 801a60c:	0801a71b 	.word	0x0801a71b
 801a610:	680b      	ldr	r3, [r1, #0]
 801a612:	1d1a      	adds	r2, r3, #4
 801a614:	681b      	ldr	r3, [r3, #0]
 801a616:	600a      	str	r2, [r1, #0]
 801a618:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a61c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a620:	2301      	movs	r3, #1
 801a622:	e0a3      	b.n	801a76c <_printf_i+0x1f4>
 801a624:	6825      	ldr	r5, [r4, #0]
 801a626:	6808      	ldr	r0, [r1, #0]
 801a628:	062e      	lsls	r6, r5, #24
 801a62a:	f100 0304 	add.w	r3, r0, #4
 801a62e:	d50a      	bpl.n	801a646 <_printf_i+0xce>
 801a630:	6805      	ldr	r5, [r0, #0]
 801a632:	600b      	str	r3, [r1, #0]
 801a634:	2d00      	cmp	r5, #0
 801a636:	da03      	bge.n	801a640 <_printf_i+0xc8>
 801a638:	232d      	movs	r3, #45	; 0x2d
 801a63a:	426d      	negs	r5, r5
 801a63c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a640:	485e      	ldr	r0, [pc, #376]	; (801a7bc <_printf_i+0x244>)
 801a642:	230a      	movs	r3, #10
 801a644:	e019      	b.n	801a67a <_printf_i+0x102>
 801a646:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a64a:	6805      	ldr	r5, [r0, #0]
 801a64c:	600b      	str	r3, [r1, #0]
 801a64e:	bf18      	it	ne
 801a650:	b22d      	sxthne	r5, r5
 801a652:	e7ef      	b.n	801a634 <_printf_i+0xbc>
 801a654:	680b      	ldr	r3, [r1, #0]
 801a656:	6825      	ldr	r5, [r4, #0]
 801a658:	1d18      	adds	r0, r3, #4
 801a65a:	6008      	str	r0, [r1, #0]
 801a65c:	0628      	lsls	r0, r5, #24
 801a65e:	d501      	bpl.n	801a664 <_printf_i+0xec>
 801a660:	681d      	ldr	r5, [r3, #0]
 801a662:	e002      	b.n	801a66a <_printf_i+0xf2>
 801a664:	0669      	lsls	r1, r5, #25
 801a666:	d5fb      	bpl.n	801a660 <_printf_i+0xe8>
 801a668:	881d      	ldrh	r5, [r3, #0]
 801a66a:	4854      	ldr	r0, [pc, #336]	; (801a7bc <_printf_i+0x244>)
 801a66c:	2f6f      	cmp	r7, #111	; 0x6f
 801a66e:	bf0c      	ite	eq
 801a670:	2308      	moveq	r3, #8
 801a672:	230a      	movne	r3, #10
 801a674:	2100      	movs	r1, #0
 801a676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a67a:	6866      	ldr	r6, [r4, #4]
 801a67c:	60a6      	str	r6, [r4, #8]
 801a67e:	2e00      	cmp	r6, #0
 801a680:	bfa2      	ittt	ge
 801a682:	6821      	ldrge	r1, [r4, #0]
 801a684:	f021 0104 	bicge.w	r1, r1, #4
 801a688:	6021      	strge	r1, [r4, #0]
 801a68a:	b90d      	cbnz	r5, 801a690 <_printf_i+0x118>
 801a68c:	2e00      	cmp	r6, #0
 801a68e:	d04d      	beq.n	801a72c <_printf_i+0x1b4>
 801a690:	4616      	mov	r6, r2
 801a692:	fbb5 f1f3 	udiv	r1, r5, r3
 801a696:	fb03 5711 	mls	r7, r3, r1, r5
 801a69a:	5dc7      	ldrb	r7, [r0, r7]
 801a69c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a6a0:	462f      	mov	r7, r5
 801a6a2:	42bb      	cmp	r3, r7
 801a6a4:	460d      	mov	r5, r1
 801a6a6:	d9f4      	bls.n	801a692 <_printf_i+0x11a>
 801a6a8:	2b08      	cmp	r3, #8
 801a6aa:	d10b      	bne.n	801a6c4 <_printf_i+0x14c>
 801a6ac:	6823      	ldr	r3, [r4, #0]
 801a6ae:	07df      	lsls	r7, r3, #31
 801a6b0:	d508      	bpl.n	801a6c4 <_printf_i+0x14c>
 801a6b2:	6923      	ldr	r3, [r4, #16]
 801a6b4:	6861      	ldr	r1, [r4, #4]
 801a6b6:	4299      	cmp	r1, r3
 801a6b8:	bfde      	ittt	le
 801a6ba:	2330      	movle	r3, #48	; 0x30
 801a6bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a6c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a6c4:	1b92      	subs	r2, r2, r6
 801a6c6:	6122      	str	r2, [r4, #16]
 801a6c8:	f8cd a000 	str.w	sl, [sp]
 801a6cc:	464b      	mov	r3, r9
 801a6ce:	aa03      	add	r2, sp, #12
 801a6d0:	4621      	mov	r1, r4
 801a6d2:	4640      	mov	r0, r8
 801a6d4:	f7ff fee2 	bl	801a49c <_printf_common>
 801a6d8:	3001      	adds	r0, #1
 801a6da:	d14c      	bne.n	801a776 <_printf_i+0x1fe>
 801a6dc:	f04f 30ff 	mov.w	r0, #4294967295
 801a6e0:	b004      	add	sp, #16
 801a6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6e6:	4835      	ldr	r0, [pc, #212]	; (801a7bc <_printf_i+0x244>)
 801a6e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a6ec:	6823      	ldr	r3, [r4, #0]
 801a6ee:	680e      	ldr	r6, [r1, #0]
 801a6f0:	061f      	lsls	r7, r3, #24
 801a6f2:	f856 5b04 	ldr.w	r5, [r6], #4
 801a6f6:	600e      	str	r6, [r1, #0]
 801a6f8:	d514      	bpl.n	801a724 <_printf_i+0x1ac>
 801a6fa:	07d9      	lsls	r1, r3, #31
 801a6fc:	bf44      	itt	mi
 801a6fe:	f043 0320 	orrmi.w	r3, r3, #32
 801a702:	6023      	strmi	r3, [r4, #0]
 801a704:	b91d      	cbnz	r5, 801a70e <_printf_i+0x196>
 801a706:	6823      	ldr	r3, [r4, #0]
 801a708:	f023 0320 	bic.w	r3, r3, #32
 801a70c:	6023      	str	r3, [r4, #0]
 801a70e:	2310      	movs	r3, #16
 801a710:	e7b0      	b.n	801a674 <_printf_i+0xfc>
 801a712:	6823      	ldr	r3, [r4, #0]
 801a714:	f043 0320 	orr.w	r3, r3, #32
 801a718:	6023      	str	r3, [r4, #0]
 801a71a:	2378      	movs	r3, #120	; 0x78
 801a71c:	4828      	ldr	r0, [pc, #160]	; (801a7c0 <_printf_i+0x248>)
 801a71e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a722:	e7e3      	b.n	801a6ec <_printf_i+0x174>
 801a724:	065e      	lsls	r6, r3, #25
 801a726:	bf48      	it	mi
 801a728:	b2ad      	uxthmi	r5, r5
 801a72a:	e7e6      	b.n	801a6fa <_printf_i+0x182>
 801a72c:	4616      	mov	r6, r2
 801a72e:	e7bb      	b.n	801a6a8 <_printf_i+0x130>
 801a730:	680b      	ldr	r3, [r1, #0]
 801a732:	6826      	ldr	r6, [r4, #0]
 801a734:	6960      	ldr	r0, [r4, #20]
 801a736:	1d1d      	adds	r5, r3, #4
 801a738:	600d      	str	r5, [r1, #0]
 801a73a:	0635      	lsls	r5, r6, #24
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	d501      	bpl.n	801a744 <_printf_i+0x1cc>
 801a740:	6018      	str	r0, [r3, #0]
 801a742:	e002      	b.n	801a74a <_printf_i+0x1d2>
 801a744:	0671      	lsls	r1, r6, #25
 801a746:	d5fb      	bpl.n	801a740 <_printf_i+0x1c8>
 801a748:	8018      	strh	r0, [r3, #0]
 801a74a:	2300      	movs	r3, #0
 801a74c:	6123      	str	r3, [r4, #16]
 801a74e:	4616      	mov	r6, r2
 801a750:	e7ba      	b.n	801a6c8 <_printf_i+0x150>
 801a752:	680b      	ldr	r3, [r1, #0]
 801a754:	1d1a      	adds	r2, r3, #4
 801a756:	600a      	str	r2, [r1, #0]
 801a758:	681e      	ldr	r6, [r3, #0]
 801a75a:	6862      	ldr	r2, [r4, #4]
 801a75c:	2100      	movs	r1, #0
 801a75e:	4630      	mov	r0, r6
 801a760:	f7e5 fd4e 	bl	8000200 <memchr>
 801a764:	b108      	cbz	r0, 801a76a <_printf_i+0x1f2>
 801a766:	1b80      	subs	r0, r0, r6
 801a768:	6060      	str	r0, [r4, #4]
 801a76a:	6863      	ldr	r3, [r4, #4]
 801a76c:	6123      	str	r3, [r4, #16]
 801a76e:	2300      	movs	r3, #0
 801a770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a774:	e7a8      	b.n	801a6c8 <_printf_i+0x150>
 801a776:	6923      	ldr	r3, [r4, #16]
 801a778:	4632      	mov	r2, r6
 801a77a:	4649      	mov	r1, r9
 801a77c:	4640      	mov	r0, r8
 801a77e:	47d0      	blx	sl
 801a780:	3001      	adds	r0, #1
 801a782:	d0ab      	beq.n	801a6dc <_printf_i+0x164>
 801a784:	6823      	ldr	r3, [r4, #0]
 801a786:	079b      	lsls	r3, r3, #30
 801a788:	d413      	bmi.n	801a7b2 <_printf_i+0x23a>
 801a78a:	68e0      	ldr	r0, [r4, #12]
 801a78c:	9b03      	ldr	r3, [sp, #12]
 801a78e:	4298      	cmp	r0, r3
 801a790:	bfb8      	it	lt
 801a792:	4618      	movlt	r0, r3
 801a794:	e7a4      	b.n	801a6e0 <_printf_i+0x168>
 801a796:	2301      	movs	r3, #1
 801a798:	4632      	mov	r2, r6
 801a79a:	4649      	mov	r1, r9
 801a79c:	4640      	mov	r0, r8
 801a79e:	47d0      	blx	sl
 801a7a0:	3001      	adds	r0, #1
 801a7a2:	d09b      	beq.n	801a6dc <_printf_i+0x164>
 801a7a4:	3501      	adds	r5, #1
 801a7a6:	68e3      	ldr	r3, [r4, #12]
 801a7a8:	9903      	ldr	r1, [sp, #12]
 801a7aa:	1a5b      	subs	r3, r3, r1
 801a7ac:	42ab      	cmp	r3, r5
 801a7ae:	dcf2      	bgt.n	801a796 <_printf_i+0x21e>
 801a7b0:	e7eb      	b.n	801a78a <_printf_i+0x212>
 801a7b2:	2500      	movs	r5, #0
 801a7b4:	f104 0619 	add.w	r6, r4, #25
 801a7b8:	e7f5      	b.n	801a7a6 <_printf_i+0x22e>
 801a7ba:	bf00      	nop
 801a7bc:	08020ea8 	.word	0x08020ea8
 801a7c0:	08020eb9 	.word	0x08020eb9

0801a7c4 <_scanf_float>:
 801a7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7c8:	b087      	sub	sp, #28
 801a7ca:	4617      	mov	r7, r2
 801a7cc:	9303      	str	r3, [sp, #12]
 801a7ce:	688b      	ldr	r3, [r1, #8]
 801a7d0:	1e5a      	subs	r2, r3, #1
 801a7d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a7d6:	bf83      	ittte	hi
 801a7d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a7dc:	195b      	addhi	r3, r3, r5
 801a7de:	9302      	strhi	r3, [sp, #8]
 801a7e0:	2300      	movls	r3, #0
 801a7e2:	bf86      	itte	hi
 801a7e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a7e8:	608b      	strhi	r3, [r1, #8]
 801a7ea:	9302      	strls	r3, [sp, #8]
 801a7ec:	680b      	ldr	r3, [r1, #0]
 801a7ee:	468b      	mov	fp, r1
 801a7f0:	2500      	movs	r5, #0
 801a7f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a7f6:	f84b 3b1c 	str.w	r3, [fp], #28
 801a7fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a7fe:	4680      	mov	r8, r0
 801a800:	460c      	mov	r4, r1
 801a802:	465e      	mov	r6, fp
 801a804:	46aa      	mov	sl, r5
 801a806:	46a9      	mov	r9, r5
 801a808:	9501      	str	r5, [sp, #4]
 801a80a:	68a2      	ldr	r2, [r4, #8]
 801a80c:	b152      	cbz	r2, 801a824 <_scanf_float+0x60>
 801a80e:	683b      	ldr	r3, [r7, #0]
 801a810:	781b      	ldrb	r3, [r3, #0]
 801a812:	2b4e      	cmp	r3, #78	; 0x4e
 801a814:	d864      	bhi.n	801a8e0 <_scanf_float+0x11c>
 801a816:	2b40      	cmp	r3, #64	; 0x40
 801a818:	d83c      	bhi.n	801a894 <_scanf_float+0xd0>
 801a81a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a81e:	b2c8      	uxtb	r0, r1
 801a820:	280e      	cmp	r0, #14
 801a822:	d93a      	bls.n	801a89a <_scanf_float+0xd6>
 801a824:	f1b9 0f00 	cmp.w	r9, #0
 801a828:	d003      	beq.n	801a832 <_scanf_float+0x6e>
 801a82a:	6823      	ldr	r3, [r4, #0]
 801a82c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a830:	6023      	str	r3, [r4, #0]
 801a832:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a836:	f1ba 0f01 	cmp.w	sl, #1
 801a83a:	f200 8113 	bhi.w	801aa64 <_scanf_float+0x2a0>
 801a83e:	455e      	cmp	r6, fp
 801a840:	f200 8105 	bhi.w	801aa4e <_scanf_float+0x28a>
 801a844:	2501      	movs	r5, #1
 801a846:	4628      	mov	r0, r5
 801a848:	b007      	add	sp, #28
 801a84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a84e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a852:	2a0d      	cmp	r2, #13
 801a854:	d8e6      	bhi.n	801a824 <_scanf_float+0x60>
 801a856:	a101      	add	r1, pc, #4	; (adr r1, 801a85c <_scanf_float+0x98>)
 801a858:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a85c:	0801a99b 	.word	0x0801a99b
 801a860:	0801a825 	.word	0x0801a825
 801a864:	0801a825 	.word	0x0801a825
 801a868:	0801a825 	.word	0x0801a825
 801a86c:	0801a9fb 	.word	0x0801a9fb
 801a870:	0801a9d3 	.word	0x0801a9d3
 801a874:	0801a825 	.word	0x0801a825
 801a878:	0801a825 	.word	0x0801a825
 801a87c:	0801a9a9 	.word	0x0801a9a9
 801a880:	0801a825 	.word	0x0801a825
 801a884:	0801a825 	.word	0x0801a825
 801a888:	0801a825 	.word	0x0801a825
 801a88c:	0801a825 	.word	0x0801a825
 801a890:	0801a961 	.word	0x0801a961
 801a894:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a898:	e7db      	b.n	801a852 <_scanf_float+0x8e>
 801a89a:	290e      	cmp	r1, #14
 801a89c:	d8c2      	bhi.n	801a824 <_scanf_float+0x60>
 801a89e:	a001      	add	r0, pc, #4	; (adr r0, 801a8a4 <_scanf_float+0xe0>)
 801a8a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a8a4:	0801a953 	.word	0x0801a953
 801a8a8:	0801a825 	.word	0x0801a825
 801a8ac:	0801a953 	.word	0x0801a953
 801a8b0:	0801a9e7 	.word	0x0801a9e7
 801a8b4:	0801a825 	.word	0x0801a825
 801a8b8:	0801a901 	.word	0x0801a901
 801a8bc:	0801a93d 	.word	0x0801a93d
 801a8c0:	0801a93d 	.word	0x0801a93d
 801a8c4:	0801a93d 	.word	0x0801a93d
 801a8c8:	0801a93d 	.word	0x0801a93d
 801a8cc:	0801a93d 	.word	0x0801a93d
 801a8d0:	0801a93d 	.word	0x0801a93d
 801a8d4:	0801a93d 	.word	0x0801a93d
 801a8d8:	0801a93d 	.word	0x0801a93d
 801a8dc:	0801a93d 	.word	0x0801a93d
 801a8e0:	2b6e      	cmp	r3, #110	; 0x6e
 801a8e2:	d809      	bhi.n	801a8f8 <_scanf_float+0x134>
 801a8e4:	2b60      	cmp	r3, #96	; 0x60
 801a8e6:	d8b2      	bhi.n	801a84e <_scanf_float+0x8a>
 801a8e8:	2b54      	cmp	r3, #84	; 0x54
 801a8ea:	d077      	beq.n	801a9dc <_scanf_float+0x218>
 801a8ec:	2b59      	cmp	r3, #89	; 0x59
 801a8ee:	d199      	bne.n	801a824 <_scanf_float+0x60>
 801a8f0:	2d07      	cmp	r5, #7
 801a8f2:	d197      	bne.n	801a824 <_scanf_float+0x60>
 801a8f4:	2508      	movs	r5, #8
 801a8f6:	e029      	b.n	801a94c <_scanf_float+0x188>
 801a8f8:	2b74      	cmp	r3, #116	; 0x74
 801a8fa:	d06f      	beq.n	801a9dc <_scanf_float+0x218>
 801a8fc:	2b79      	cmp	r3, #121	; 0x79
 801a8fe:	e7f6      	b.n	801a8ee <_scanf_float+0x12a>
 801a900:	6821      	ldr	r1, [r4, #0]
 801a902:	05c8      	lsls	r0, r1, #23
 801a904:	d51a      	bpl.n	801a93c <_scanf_float+0x178>
 801a906:	9b02      	ldr	r3, [sp, #8]
 801a908:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a90c:	6021      	str	r1, [r4, #0]
 801a90e:	f109 0901 	add.w	r9, r9, #1
 801a912:	b11b      	cbz	r3, 801a91c <_scanf_float+0x158>
 801a914:	3b01      	subs	r3, #1
 801a916:	3201      	adds	r2, #1
 801a918:	9302      	str	r3, [sp, #8]
 801a91a:	60a2      	str	r2, [r4, #8]
 801a91c:	68a3      	ldr	r3, [r4, #8]
 801a91e:	3b01      	subs	r3, #1
 801a920:	60a3      	str	r3, [r4, #8]
 801a922:	6923      	ldr	r3, [r4, #16]
 801a924:	3301      	adds	r3, #1
 801a926:	6123      	str	r3, [r4, #16]
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	3b01      	subs	r3, #1
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	607b      	str	r3, [r7, #4]
 801a930:	f340 8084 	ble.w	801aa3c <_scanf_float+0x278>
 801a934:	683b      	ldr	r3, [r7, #0]
 801a936:	3301      	adds	r3, #1
 801a938:	603b      	str	r3, [r7, #0]
 801a93a:	e766      	b.n	801a80a <_scanf_float+0x46>
 801a93c:	eb1a 0f05 	cmn.w	sl, r5
 801a940:	f47f af70 	bne.w	801a824 <_scanf_float+0x60>
 801a944:	6822      	ldr	r2, [r4, #0]
 801a946:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a94a:	6022      	str	r2, [r4, #0]
 801a94c:	f806 3b01 	strb.w	r3, [r6], #1
 801a950:	e7e4      	b.n	801a91c <_scanf_float+0x158>
 801a952:	6822      	ldr	r2, [r4, #0]
 801a954:	0610      	lsls	r0, r2, #24
 801a956:	f57f af65 	bpl.w	801a824 <_scanf_float+0x60>
 801a95a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a95e:	e7f4      	b.n	801a94a <_scanf_float+0x186>
 801a960:	f1ba 0f00 	cmp.w	sl, #0
 801a964:	d10e      	bne.n	801a984 <_scanf_float+0x1c0>
 801a966:	f1b9 0f00 	cmp.w	r9, #0
 801a96a:	d10e      	bne.n	801a98a <_scanf_float+0x1c6>
 801a96c:	6822      	ldr	r2, [r4, #0]
 801a96e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a972:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a976:	d108      	bne.n	801a98a <_scanf_float+0x1c6>
 801a978:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a97c:	6022      	str	r2, [r4, #0]
 801a97e:	f04f 0a01 	mov.w	sl, #1
 801a982:	e7e3      	b.n	801a94c <_scanf_float+0x188>
 801a984:	f1ba 0f02 	cmp.w	sl, #2
 801a988:	d055      	beq.n	801aa36 <_scanf_float+0x272>
 801a98a:	2d01      	cmp	r5, #1
 801a98c:	d002      	beq.n	801a994 <_scanf_float+0x1d0>
 801a98e:	2d04      	cmp	r5, #4
 801a990:	f47f af48 	bne.w	801a824 <_scanf_float+0x60>
 801a994:	3501      	adds	r5, #1
 801a996:	b2ed      	uxtb	r5, r5
 801a998:	e7d8      	b.n	801a94c <_scanf_float+0x188>
 801a99a:	f1ba 0f01 	cmp.w	sl, #1
 801a99e:	f47f af41 	bne.w	801a824 <_scanf_float+0x60>
 801a9a2:	f04f 0a02 	mov.w	sl, #2
 801a9a6:	e7d1      	b.n	801a94c <_scanf_float+0x188>
 801a9a8:	b97d      	cbnz	r5, 801a9ca <_scanf_float+0x206>
 801a9aa:	f1b9 0f00 	cmp.w	r9, #0
 801a9ae:	f47f af3c 	bne.w	801a82a <_scanf_float+0x66>
 801a9b2:	6822      	ldr	r2, [r4, #0]
 801a9b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a9b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a9bc:	f47f af39 	bne.w	801a832 <_scanf_float+0x6e>
 801a9c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a9c4:	6022      	str	r2, [r4, #0]
 801a9c6:	2501      	movs	r5, #1
 801a9c8:	e7c0      	b.n	801a94c <_scanf_float+0x188>
 801a9ca:	2d03      	cmp	r5, #3
 801a9cc:	d0e2      	beq.n	801a994 <_scanf_float+0x1d0>
 801a9ce:	2d05      	cmp	r5, #5
 801a9d0:	e7de      	b.n	801a990 <_scanf_float+0x1cc>
 801a9d2:	2d02      	cmp	r5, #2
 801a9d4:	f47f af26 	bne.w	801a824 <_scanf_float+0x60>
 801a9d8:	2503      	movs	r5, #3
 801a9da:	e7b7      	b.n	801a94c <_scanf_float+0x188>
 801a9dc:	2d06      	cmp	r5, #6
 801a9de:	f47f af21 	bne.w	801a824 <_scanf_float+0x60>
 801a9e2:	2507      	movs	r5, #7
 801a9e4:	e7b2      	b.n	801a94c <_scanf_float+0x188>
 801a9e6:	6822      	ldr	r2, [r4, #0]
 801a9e8:	0591      	lsls	r1, r2, #22
 801a9ea:	f57f af1b 	bpl.w	801a824 <_scanf_float+0x60>
 801a9ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a9f2:	6022      	str	r2, [r4, #0]
 801a9f4:	f8cd 9004 	str.w	r9, [sp, #4]
 801a9f8:	e7a8      	b.n	801a94c <_scanf_float+0x188>
 801a9fa:	6822      	ldr	r2, [r4, #0]
 801a9fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801aa00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801aa04:	d006      	beq.n	801aa14 <_scanf_float+0x250>
 801aa06:	0550      	lsls	r0, r2, #21
 801aa08:	f57f af0c 	bpl.w	801a824 <_scanf_float+0x60>
 801aa0c:	f1b9 0f00 	cmp.w	r9, #0
 801aa10:	f43f af0f 	beq.w	801a832 <_scanf_float+0x6e>
 801aa14:	0591      	lsls	r1, r2, #22
 801aa16:	bf58      	it	pl
 801aa18:	9901      	ldrpl	r1, [sp, #4]
 801aa1a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801aa1e:	bf58      	it	pl
 801aa20:	eba9 0101 	subpl.w	r1, r9, r1
 801aa24:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801aa28:	bf58      	it	pl
 801aa2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801aa2e:	6022      	str	r2, [r4, #0]
 801aa30:	f04f 0900 	mov.w	r9, #0
 801aa34:	e78a      	b.n	801a94c <_scanf_float+0x188>
 801aa36:	f04f 0a03 	mov.w	sl, #3
 801aa3a:	e787      	b.n	801a94c <_scanf_float+0x188>
 801aa3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801aa40:	4639      	mov	r1, r7
 801aa42:	4640      	mov	r0, r8
 801aa44:	4798      	blx	r3
 801aa46:	2800      	cmp	r0, #0
 801aa48:	f43f aedf 	beq.w	801a80a <_scanf_float+0x46>
 801aa4c:	e6ea      	b.n	801a824 <_scanf_float+0x60>
 801aa4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801aa52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801aa56:	463a      	mov	r2, r7
 801aa58:	4640      	mov	r0, r8
 801aa5a:	4798      	blx	r3
 801aa5c:	6923      	ldr	r3, [r4, #16]
 801aa5e:	3b01      	subs	r3, #1
 801aa60:	6123      	str	r3, [r4, #16]
 801aa62:	e6ec      	b.n	801a83e <_scanf_float+0x7a>
 801aa64:	1e6b      	subs	r3, r5, #1
 801aa66:	2b06      	cmp	r3, #6
 801aa68:	d825      	bhi.n	801aab6 <_scanf_float+0x2f2>
 801aa6a:	2d02      	cmp	r5, #2
 801aa6c:	d836      	bhi.n	801aadc <_scanf_float+0x318>
 801aa6e:	455e      	cmp	r6, fp
 801aa70:	f67f aee8 	bls.w	801a844 <_scanf_float+0x80>
 801aa74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801aa78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801aa7c:	463a      	mov	r2, r7
 801aa7e:	4640      	mov	r0, r8
 801aa80:	4798      	blx	r3
 801aa82:	6923      	ldr	r3, [r4, #16]
 801aa84:	3b01      	subs	r3, #1
 801aa86:	6123      	str	r3, [r4, #16]
 801aa88:	e7f1      	b.n	801aa6e <_scanf_float+0x2aa>
 801aa8a:	9802      	ldr	r0, [sp, #8]
 801aa8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801aa90:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801aa94:	9002      	str	r0, [sp, #8]
 801aa96:	463a      	mov	r2, r7
 801aa98:	4640      	mov	r0, r8
 801aa9a:	4798      	blx	r3
 801aa9c:	6923      	ldr	r3, [r4, #16]
 801aa9e:	3b01      	subs	r3, #1
 801aaa0:	6123      	str	r3, [r4, #16]
 801aaa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aaa6:	fa5f fa8a 	uxtb.w	sl, sl
 801aaaa:	f1ba 0f02 	cmp.w	sl, #2
 801aaae:	d1ec      	bne.n	801aa8a <_scanf_float+0x2c6>
 801aab0:	3d03      	subs	r5, #3
 801aab2:	b2ed      	uxtb	r5, r5
 801aab4:	1b76      	subs	r6, r6, r5
 801aab6:	6823      	ldr	r3, [r4, #0]
 801aab8:	05da      	lsls	r2, r3, #23
 801aaba:	d52f      	bpl.n	801ab1c <_scanf_float+0x358>
 801aabc:	055b      	lsls	r3, r3, #21
 801aabe:	d510      	bpl.n	801aae2 <_scanf_float+0x31e>
 801aac0:	455e      	cmp	r6, fp
 801aac2:	f67f aebf 	bls.w	801a844 <_scanf_float+0x80>
 801aac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801aaca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801aace:	463a      	mov	r2, r7
 801aad0:	4640      	mov	r0, r8
 801aad2:	4798      	blx	r3
 801aad4:	6923      	ldr	r3, [r4, #16]
 801aad6:	3b01      	subs	r3, #1
 801aad8:	6123      	str	r3, [r4, #16]
 801aada:	e7f1      	b.n	801aac0 <_scanf_float+0x2fc>
 801aadc:	46aa      	mov	sl, r5
 801aade:	9602      	str	r6, [sp, #8]
 801aae0:	e7df      	b.n	801aaa2 <_scanf_float+0x2de>
 801aae2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801aae6:	6923      	ldr	r3, [r4, #16]
 801aae8:	2965      	cmp	r1, #101	; 0x65
 801aaea:	f103 33ff 	add.w	r3, r3, #4294967295
 801aaee:	f106 35ff 	add.w	r5, r6, #4294967295
 801aaf2:	6123      	str	r3, [r4, #16]
 801aaf4:	d00c      	beq.n	801ab10 <_scanf_float+0x34c>
 801aaf6:	2945      	cmp	r1, #69	; 0x45
 801aaf8:	d00a      	beq.n	801ab10 <_scanf_float+0x34c>
 801aafa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801aafe:	463a      	mov	r2, r7
 801ab00:	4640      	mov	r0, r8
 801ab02:	4798      	blx	r3
 801ab04:	6923      	ldr	r3, [r4, #16]
 801ab06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801ab0a:	3b01      	subs	r3, #1
 801ab0c:	1eb5      	subs	r5, r6, #2
 801ab0e:	6123      	str	r3, [r4, #16]
 801ab10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ab14:	463a      	mov	r2, r7
 801ab16:	4640      	mov	r0, r8
 801ab18:	4798      	blx	r3
 801ab1a:	462e      	mov	r6, r5
 801ab1c:	6825      	ldr	r5, [r4, #0]
 801ab1e:	f015 0510 	ands.w	r5, r5, #16
 801ab22:	d158      	bne.n	801abd6 <_scanf_float+0x412>
 801ab24:	7035      	strb	r5, [r6, #0]
 801ab26:	6823      	ldr	r3, [r4, #0]
 801ab28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ab2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ab30:	d11c      	bne.n	801ab6c <_scanf_float+0x3a8>
 801ab32:	9b01      	ldr	r3, [sp, #4]
 801ab34:	454b      	cmp	r3, r9
 801ab36:	eba3 0209 	sub.w	r2, r3, r9
 801ab3a:	d124      	bne.n	801ab86 <_scanf_float+0x3c2>
 801ab3c:	2200      	movs	r2, #0
 801ab3e:	4659      	mov	r1, fp
 801ab40:	4640      	mov	r0, r8
 801ab42:	f001 f873 	bl	801bc2c <_strtod_r>
 801ab46:	9b03      	ldr	r3, [sp, #12]
 801ab48:	6821      	ldr	r1, [r4, #0]
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	f011 0f02 	tst.w	r1, #2
 801ab50:	ec57 6b10 	vmov	r6, r7, d0
 801ab54:	f103 0204 	add.w	r2, r3, #4
 801ab58:	d020      	beq.n	801ab9c <_scanf_float+0x3d8>
 801ab5a:	9903      	ldr	r1, [sp, #12]
 801ab5c:	600a      	str	r2, [r1, #0]
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	e9c3 6700 	strd	r6, r7, [r3]
 801ab64:	68e3      	ldr	r3, [r4, #12]
 801ab66:	3301      	adds	r3, #1
 801ab68:	60e3      	str	r3, [r4, #12]
 801ab6a:	e66c      	b.n	801a846 <_scanf_float+0x82>
 801ab6c:	9b04      	ldr	r3, [sp, #16]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d0e4      	beq.n	801ab3c <_scanf_float+0x378>
 801ab72:	9905      	ldr	r1, [sp, #20]
 801ab74:	230a      	movs	r3, #10
 801ab76:	462a      	mov	r2, r5
 801ab78:	3101      	adds	r1, #1
 801ab7a:	4640      	mov	r0, r8
 801ab7c:	f001 f8e0 	bl	801bd40 <_strtol_r>
 801ab80:	9b04      	ldr	r3, [sp, #16]
 801ab82:	9e05      	ldr	r6, [sp, #20]
 801ab84:	1ac2      	subs	r2, r0, r3
 801ab86:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801ab8a:	429e      	cmp	r6, r3
 801ab8c:	bf28      	it	cs
 801ab8e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801ab92:	4912      	ldr	r1, [pc, #72]	; (801abdc <_scanf_float+0x418>)
 801ab94:	4630      	mov	r0, r6
 801ab96:	f000 f977 	bl	801ae88 <siprintf>
 801ab9a:	e7cf      	b.n	801ab3c <_scanf_float+0x378>
 801ab9c:	f011 0f04 	tst.w	r1, #4
 801aba0:	9903      	ldr	r1, [sp, #12]
 801aba2:	600a      	str	r2, [r1, #0]
 801aba4:	d1db      	bne.n	801ab5e <_scanf_float+0x39a>
 801aba6:	f8d3 8000 	ldr.w	r8, [r3]
 801abaa:	ee10 2a10 	vmov	r2, s0
 801abae:	ee10 0a10 	vmov	r0, s0
 801abb2:	463b      	mov	r3, r7
 801abb4:	4639      	mov	r1, r7
 801abb6:	f7e5 ffc9 	bl	8000b4c <__aeabi_dcmpun>
 801abba:	b128      	cbz	r0, 801abc8 <_scanf_float+0x404>
 801abbc:	4808      	ldr	r0, [pc, #32]	; (801abe0 <_scanf_float+0x41c>)
 801abbe:	f000 f919 	bl	801adf4 <nanf>
 801abc2:	ed88 0a00 	vstr	s0, [r8]
 801abc6:	e7cd      	b.n	801ab64 <_scanf_float+0x3a0>
 801abc8:	4630      	mov	r0, r6
 801abca:	4639      	mov	r1, r7
 801abcc:	f7e6 f81c 	bl	8000c08 <__aeabi_d2f>
 801abd0:	f8c8 0000 	str.w	r0, [r8]
 801abd4:	e7c6      	b.n	801ab64 <_scanf_float+0x3a0>
 801abd6:	2500      	movs	r5, #0
 801abd8:	e635      	b.n	801a846 <_scanf_float+0x82>
 801abda:	bf00      	nop
 801abdc:	08020eca 	.word	0x08020eca
 801abe0:	08020f5b 	.word	0x08020f5b

0801abe4 <iprintf>:
 801abe4:	b40f      	push	{r0, r1, r2, r3}
 801abe6:	4b0a      	ldr	r3, [pc, #40]	; (801ac10 <iprintf+0x2c>)
 801abe8:	b513      	push	{r0, r1, r4, lr}
 801abea:	681c      	ldr	r4, [r3, #0]
 801abec:	b124      	cbz	r4, 801abf8 <iprintf+0x14>
 801abee:	69a3      	ldr	r3, [r4, #24]
 801abf0:	b913      	cbnz	r3, 801abf8 <iprintf+0x14>
 801abf2:	4620      	mov	r0, r4
 801abf4:	f7fe ffcc 	bl	8019b90 <__sinit>
 801abf8:	ab05      	add	r3, sp, #20
 801abfa:	9a04      	ldr	r2, [sp, #16]
 801abfc:	68a1      	ldr	r1, [r4, #8]
 801abfe:	9301      	str	r3, [sp, #4]
 801ac00:	4620      	mov	r0, r4
 801ac02:	f003 fdfd 	bl	801e800 <_vfiprintf_r>
 801ac06:	b002      	add	sp, #8
 801ac08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac0c:	b004      	add	sp, #16
 801ac0e:	4770      	bx	lr
 801ac10:	200001d8 	.word	0x200001d8

0801ac14 <_puts_r>:
 801ac14:	b570      	push	{r4, r5, r6, lr}
 801ac16:	460e      	mov	r6, r1
 801ac18:	4605      	mov	r5, r0
 801ac1a:	b118      	cbz	r0, 801ac24 <_puts_r+0x10>
 801ac1c:	6983      	ldr	r3, [r0, #24]
 801ac1e:	b90b      	cbnz	r3, 801ac24 <_puts_r+0x10>
 801ac20:	f7fe ffb6 	bl	8019b90 <__sinit>
 801ac24:	69ab      	ldr	r3, [r5, #24]
 801ac26:	68ac      	ldr	r4, [r5, #8]
 801ac28:	b913      	cbnz	r3, 801ac30 <_puts_r+0x1c>
 801ac2a:	4628      	mov	r0, r5
 801ac2c:	f7fe ffb0 	bl	8019b90 <__sinit>
 801ac30:	4b2c      	ldr	r3, [pc, #176]	; (801ace4 <_puts_r+0xd0>)
 801ac32:	429c      	cmp	r4, r3
 801ac34:	d120      	bne.n	801ac78 <_puts_r+0x64>
 801ac36:	686c      	ldr	r4, [r5, #4]
 801ac38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ac3a:	07db      	lsls	r3, r3, #31
 801ac3c:	d405      	bmi.n	801ac4a <_puts_r+0x36>
 801ac3e:	89a3      	ldrh	r3, [r4, #12]
 801ac40:	0598      	lsls	r0, r3, #22
 801ac42:	d402      	bmi.n	801ac4a <_puts_r+0x36>
 801ac44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ac46:	f7ff f866 	bl	8019d16 <__retarget_lock_acquire_recursive>
 801ac4a:	89a3      	ldrh	r3, [r4, #12]
 801ac4c:	0719      	lsls	r1, r3, #28
 801ac4e:	d51d      	bpl.n	801ac8c <_puts_r+0x78>
 801ac50:	6923      	ldr	r3, [r4, #16]
 801ac52:	b1db      	cbz	r3, 801ac8c <_puts_r+0x78>
 801ac54:	3e01      	subs	r6, #1
 801ac56:	68a3      	ldr	r3, [r4, #8]
 801ac58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ac5c:	3b01      	subs	r3, #1
 801ac5e:	60a3      	str	r3, [r4, #8]
 801ac60:	bb39      	cbnz	r1, 801acb2 <_puts_r+0x9e>
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	da38      	bge.n	801acd8 <_puts_r+0xc4>
 801ac66:	4622      	mov	r2, r4
 801ac68:	210a      	movs	r1, #10
 801ac6a:	4628      	mov	r0, r5
 801ac6c:	f001 f92c 	bl	801bec8 <__swbuf_r>
 801ac70:	3001      	adds	r0, #1
 801ac72:	d011      	beq.n	801ac98 <_puts_r+0x84>
 801ac74:	250a      	movs	r5, #10
 801ac76:	e011      	b.n	801ac9c <_puts_r+0x88>
 801ac78:	4b1b      	ldr	r3, [pc, #108]	; (801ace8 <_puts_r+0xd4>)
 801ac7a:	429c      	cmp	r4, r3
 801ac7c:	d101      	bne.n	801ac82 <_puts_r+0x6e>
 801ac7e:	68ac      	ldr	r4, [r5, #8]
 801ac80:	e7da      	b.n	801ac38 <_puts_r+0x24>
 801ac82:	4b1a      	ldr	r3, [pc, #104]	; (801acec <_puts_r+0xd8>)
 801ac84:	429c      	cmp	r4, r3
 801ac86:	bf08      	it	eq
 801ac88:	68ec      	ldreq	r4, [r5, #12]
 801ac8a:	e7d5      	b.n	801ac38 <_puts_r+0x24>
 801ac8c:	4621      	mov	r1, r4
 801ac8e:	4628      	mov	r0, r5
 801ac90:	f001 f97e 	bl	801bf90 <__swsetup_r>
 801ac94:	2800      	cmp	r0, #0
 801ac96:	d0dd      	beq.n	801ac54 <_puts_r+0x40>
 801ac98:	f04f 35ff 	mov.w	r5, #4294967295
 801ac9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ac9e:	07da      	lsls	r2, r3, #31
 801aca0:	d405      	bmi.n	801acae <_puts_r+0x9a>
 801aca2:	89a3      	ldrh	r3, [r4, #12]
 801aca4:	059b      	lsls	r3, r3, #22
 801aca6:	d402      	bmi.n	801acae <_puts_r+0x9a>
 801aca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801acaa:	f7ff f835 	bl	8019d18 <__retarget_lock_release_recursive>
 801acae:	4628      	mov	r0, r5
 801acb0:	bd70      	pop	{r4, r5, r6, pc}
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	da04      	bge.n	801acc0 <_puts_r+0xac>
 801acb6:	69a2      	ldr	r2, [r4, #24]
 801acb8:	429a      	cmp	r2, r3
 801acba:	dc06      	bgt.n	801acca <_puts_r+0xb6>
 801acbc:	290a      	cmp	r1, #10
 801acbe:	d004      	beq.n	801acca <_puts_r+0xb6>
 801acc0:	6823      	ldr	r3, [r4, #0]
 801acc2:	1c5a      	adds	r2, r3, #1
 801acc4:	6022      	str	r2, [r4, #0]
 801acc6:	7019      	strb	r1, [r3, #0]
 801acc8:	e7c5      	b.n	801ac56 <_puts_r+0x42>
 801acca:	4622      	mov	r2, r4
 801accc:	4628      	mov	r0, r5
 801acce:	f001 f8fb 	bl	801bec8 <__swbuf_r>
 801acd2:	3001      	adds	r0, #1
 801acd4:	d1bf      	bne.n	801ac56 <_puts_r+0x42>
 801acd6:	e7df      	b.n	801ac98 <_puts_r+0x84>
 801acd8:	6823      	ldr	r3, [r4, #0]
 801acda:	250a      	movs	r5, #10
 801acdc:	1c5a      	adds	r2, r3, #1
 801acde:	6022      	str	r2, [r4, #0]
 801ace0:	701d      	strb	r5, [r3, #0]
 801ace2:	e7db      	b.n	801ac9c <_puts_r+0x88>
 801ace4:	08020e54 	.word	0x08020e54
 801ace8:	08020e74 	.word	0x08020e74
 801acec:	08020e34 	.word	0x08020e34

0801acf0 <puts>:
 801acf0:	4b02      	ldr	r3, [pc, #8]	; (801acfc <puts+0xc>)
 801acf2:	4601      	mov	r1, r0
 801acf4:	6818      	ldr	r0, [r3, #0]
 801acf6:	f7ff bf8d 	b.w	801ac14 <_puts_r>
 801acfa:	bf00      	nop
 801acfc:	200001d8 	.word	0x200001d8

0801ad00 <cleanup_glue>:
 801ad00:	b538      	push	{r3, r4, r5, lr}
 801ad02:	460c      	mov	r4, r1
 801ad04:	6809      	ldr	r1, [r1, #0]
 801ad06:	4605      	mov	r5, r0
 801ad08:	b109      	cbz	r1, 801ad0e <cleanup_glue+0xe>
 801ad0a:	f7ff fff9 	bl	801ad00 <cleanup_glue>
 801ad0e:	4621      	mov	r1, r4
 801ad10:	4628      	mov	r0, r5
 801ad12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ad16:	f7ff b841 	b.w	8019d9c <_free_r>
	...

0801ad1c <_reclaim_reent>:
 801ad1c:	4b2c      	ldr	r3, [pc, #176]	; (801add0 <_reclaim_reent+0xb4>)
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	4283      	cmp	r3, r0
 801ad22:	b570      	push	{r4, r5, r6, lr}
 801ad24:	4604      	mov	r4, r0
 801ad26:	d051      	beq.n	801adcc <_reclaim_reent+0xb0>
 801ad28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ad2a:	b143      	cbz	r3, 801ad3e <_reclaim_reent+0x22>
 801ad2c:	68db      	ldr	r3, [r3, #12]
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d14a      	bne.n	801adc8 <_reclaim_reent+0xac>
 801ad32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ad34:	6819      	ldr	r1, [r3, #0]
 801ad36:	b111      	cbz	r1, 801ad3e <_reclaim_reent+0x22>
 801ad38:	4620      	mov	r0, r4
 801ad3a:	f7ff f82f 	bl	8019d9c <_free_r>
 801ad3e:	6961      	ldr	r1, [r4, #20]
 801ad40:	b111      	cbz	r1, 801ad48 <_reclaim_reent+0x2c>
 801ad42:	4620      	mov	r0, r4
 801ad44:	f7ff f82a 	bl	8019d9c <_free_r>
 801ad48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ad4a:	b111      	cbz	r1, 801ad52 <_reclaim_reent+0x36>
 801ad4c:	4620      	mov	r0, r4
 801ad4e:	f7ff f825 	bl	8019d9c <_free_r>
 801ad52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ad54:	b111      	cbz	r1, 801ad5c <_reclaim_reent+0x40>
 801ad56:	4620      	mov	r0, r4
 801ad58:	f7ff f820 	bl	8019d9c <_free_r>
 801ad5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ad5e:	b111      	cbz	r1, 801ad66 <_reclaim_reent+0x4a>
 801ad60:	4620      	mov	r0, r4
 801ad62:	f7ff f81b 	bl	8019d9c <_free_r>
 801ad66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ad68:	b111      	cbz	r1, 801ad70 <_reclaim_reent+0x54>
 801ad6a:	4620      	mov	r0, r4
 801ad6c:	f7ff f816 	bl	8019d9c <_free_r>
 801ad70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ad72:	b111      	cbz	r1, 801ad7a <_reclaim_reent+0x5e>
 801ad74:	4620      	mov	r0, r4
 801ad76:	f7ff f811 	bl	8019d9c <_free_r>
 801ad7a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801ad7c:	b111      	cbz	r1, 801ad84 <_reclaim_reent+0x68>
 801ad7e:	4620      	mov	r0, r4
 801ad80:	f7ff f80c 	bl	8019d9c <_free_r>
 801ad84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ad86:	b111      	cbz	r1, 801ad8e <_reclaim_reent+0x72>
 801ad88:	4620      	mov	r0, r4
 801ad8a:	f7ff f807 	bl	8019d9c <_free_r>
 801ad8e:	69a3      	ldr	r3, [r4, #24]
 801ad90:	b1e3      	cbz	r3, 801adcc <_reclaim_reent+0xb0>
 801ad92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ad94:	4620      	mov	r0, r4
 801ad96:	4798      	blx	r3
 801ad98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ad9a:	b1b9      	cbz	r1, 801adcc <_reclaim_reent+0xb0>
 801ad9c:	4620      	mov	r0, r4
 801ad9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ada2:	f7ff bfad 	b.w	801ad00 <cleanup_glue>
 801ada6:	5949      	ldr	r1, [r1, r5]
 801ada8:	b941      	cbnz	r1, 801adbc <_reclaim_reent+0xa0>
 801adaa:	3504      	adds	r5, #4
 801adac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801adae:	2d80      	cmp	r5, #128	; 0x80
 801adb0:	68d9      	ldr	r1, [r3, #12]
 801adb2:	d1f8      	bne.n	801ada6 <_reclaim_reent+0x8a>
 801adb4:	4620      	mov	r0, r4
 801adb6:	f7fe fff1 	bl	8019d9c <_free_r>
 801adba:	e7ba      	b.n	801ad32 <_reclaim_reent+0x16>
 801adbc:	680e      	ldr	r6, [r1, #0]
 801adbe:	4620      	mov	r0, r4
 801adc0:	f7fe ffec 	bl	8019d9c <_free_r>
 801adc4:	4631      	mov	r1, r6
 801adc6:	e7ef      	b.n	801ada8 <_reclaim_reent+0x8c>
 801adc8:	2500      	movs	r5, #0
 801adca:	e7ef      	b.n	801adac <_reclaim_reent+0x90>
 801adcc:	bd70      	pop	{r4, r5, r6, pc}
 801adce:	bf00      	nop
 801add0:	200001d8 	.word	0x200001d8

0801add4 <_sbrk_r>:
 801add4:	b538      	push	{r3, r4, r5, lr}
 801add6:	4d06      	ldr	r5, [pc, #24]	; (801adf0 <_sbrk_r+0x1c>)
 801add8:	2300      	movs	r3, #0
 801adda:	4604      	mov	r4, r0
 801addc:	4608      	mov	r0, r1
 801adde:	602b      	str	r3, [r5, #0]
 801ade0:	f7e8 fa44 	bl	800326c <_sbrk>
 801ade4:	1c43      	adds	r3, r0, #1
 801ade6:	d102      	bne.n	801adee <_sbrk_r+0x1a>
 801ade8:	682b      	ldr	r3, [r5, #0]
 801adea:	b103      	cbz	r3, 801adee <_sbrk_r+0x1a>
 801adec:	6023      	str	r3, [r4, #0]
 801adee:	bd38      	pop	{r3, r4, r5, pc}
 801adf0:	20008f98 	.word	0x20008f98

0801adf4 <nanf>:
 801adf4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801adfc <nanf+0x8>
 801adf8:	4770      	bx	lr
 801adfa:	bf00      	nop
 801adfc:	7fc00000 	.word	0x7fc00000

0801ae00 <_raise_r>:
 801ae00:	291f      	cmp	r1, #31
 801ae02:	b538      	push	{r3, r4, r5, lr}
 801ae04:	4604      	mov	r4, r0
 801ae06:	460d      	mov	r5, r1
 801ae08:	d904      	bls.n	801ae14 <_raise_r+0x14>
 801ae0a:	2316      	movs	r3, #22
 801ae0c:	6003      	str	r3, [r0, #0]
 801ae0e:	f04f 30ff 	mov.w	r0, #4294967295
 801ae12:	bd38      	pop	{r3, r4, r5, pc}
 801ae14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ae16:	b112      	cbz	r2, 801ae1e <_raise_r+0x1e>
 801ae18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ae1c:	b94b      	cbnz	r3, 801ae32 <_raise_r+0x32>
 801ae1e:	4620      	mov	r0, r4
 801ae20:	f000 f830 	bl	801ae84 <_getpid_r>
 801ae24:	462a      	mov	r2, r5
 801ae26:	4601      	mov	r1, r0
 801ae28:	4620      	mov	r0, r4
 801ae2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae2e:	f000 b817 	b.w	801ae60 <_kill_r>
 801ae32:	2b01      	cmp	r3, #1
 801ae34:	d00a      	beq.n	801ae4c <_raise_r+0x4c>
 801ae36:	1c59      	adds	r1, r3, #1
 801ae38:	d103      	bne.n	801ae42 <_raise_r+0x42>
 801ae3a:	2316      	movs	r3, #22
 801ae3c:	6003      	str	r3, [r0, #0]
 801ae3e:	2001      	movs	r0, #1
 801ae40:	e7e7      	b.n	801ae12 <_raise_r+0x12>
 801ae42:	2400      	movs	r4, #0
 801ae44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ae48:	4628      	mov	r0, r5
 801ae4a:	4798      	blx	r3
 801ae4c:	2000      	movs	r0, #0
 801ae4e:	e7e0      	b.n	801ae12 <_raise_r+0x12>

0801ae50 <raise>:
 801ae50:	4b02      	ldr	r3, [pc, #8]	; (801ae5c <raise+0xc>)
 801ae52:	4601      	mov	r1, r0
 801ae54:	6818      	ldr	r0, [r3, #0]
 801ae56:	f7ff bfd3 	b.w	801ae00 <_raise_r>
 801ae5a:	bf00      	nop
 801ae5c:	200001d8 	.word	0x200001d8

0801ae60 <_kill_r>:
 801ae60:	b538      	push	{r3, r4, r5, lr}
 801ae62:	4d07      	ldr	r5, [pc, #28]	; (801ae80 <_kill_r+0x20>)
 801ae64:	2300      	movs	r3, #0
 801ae66:	4604      	mov	r4, r0
 801ae68:	4608      	mov	r0, r1
 801ae6a:	4611      	mov	r1, r2
 801ae6c:	602b      	str	r3, [r5, #0]
 801ae6e:	f7e8 f975 	bl	800315c <_kill>
 801ae72:	1c43      	adds	r3, r0, #1
 801ae74:	d102      	bne.n	801ae7c <_kill_r+0x1c>
 801ae76:	682b      	ldr	r3, [r5, #0]
 801ae78:	b103      	cbz	r3, 801ae7c <_kill_r+0x1c>
 801ae7a:	6023      	str	r3, [r4, #0]
 801ae7c:	bd38      	pop	{r3, r4, r5, pc}
 801ae7e:	bf00      	nop
 801ae80:	20008f98 	.word	0x20008f98

0801ae84 <_getpid_r>:
 801ae84:	f7e8 b962 	b.w	800314c <_getpid>

0801ae88 <siprintf>:
 801ae88:	b40e      	push	{r1, r2, r3}
 801ae8a:	b500      	push	{lr}
 801ae8c:	b09c      	sub	sp, #112	; 0x70
 801ae8e:	ab1d      	add	r3, sp, #116	; 0x74
 801ae90:	9002      	str	r0, [sp, #8]
 801ae92:	9006      	str	r0, [sp, #24]
 801ae94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ae98:	4809      	ldr	r0, [pc, #36]	; (801aec0 <siprintf+0x38>)
 801ae9a:	9107      	str	r1, [sp, #28]
 801ae9c:	9104      	str	r1, [sp, #16]
 801ae9e:	4909      	ldr	r1, [pc, #36]	; (801aec4 <siprintf+0x3c>)
 801aea0:	f853 2b04 	ldr.w	r2, [r3], #4
 801aea4:	9105      	str	r1, [sp, #20]
 801aea6:	6800      	ldr	r0, [r0, #0]
 801aea8:	9301      	str	r3, [sp, #4]
 801aeaa:	a902      	add	r1, sp, #8
 801aeac:	f003 f9ac 	bl	801e208 <_svfiprintf_r>
 801aeb0:	9b02      	ldr	r3, [sp, #8]
 801aeb2:	2200      	movs	r2, #0
 801aeb4:	701a      	strb	r2, [r3, #0]
 801aeb6:	b01c      	add	sp, #112	; 0x70
 801aeb8:	f85d eb04 	ldr.w	lr, [sp], #4
 801aebc:	b003      	add	sp, #12
 801aebe:	4770      	bx	lr
 801aec0:	200001d8 	.word	0x200001d8
 801aec4:	ffff0208 	.word	0xffff0208

0801aec8 <siscanf>:
 801aec8:	b40e      	push	{r1, r2, r3}
 801aeca:	b510      	push	{r4, lr}
 801aecc:	b09f      	sub	sp, #124	; 0x7c
 801aece:	ac21      	add	r4, sp, #132	; 0x84
 801aed0:	f44f 7101 	mov.w	r1, #516	; 0x204
 801aed4:	f854 2b04 	ldr.w	r2, [r4], #4
 801aed8:	9201      	str	r2, [sp, #4]
 801aeda:	f8ad 101c 	strh.w	r1, [sp, #28]
 801aede:	9004      	str	r0, [sp, #16]
 801aee0:	9008      	str	r0, [sp, #32]
 801aee2:	f7e5 f985 	bl	80001f0 <strlen>
 801aee6:	4b0c      	ldr	r3, [pc, #48]	; (801af18 <siscanf+0x50>)
 801aee8:	9005      	str	r0, [sp, #20]
 801aeea:	9009      	str	r0, [sp, #36]	; 0x24
 801aeec:	930d      	str	r3, [sp, #52]	; 0x34
 801aeee:	480b      	ldr	r0, [pc, #44]	; (801af1c <siscanf+0x54>)
 801aef0:	9a01      	ldr	r2, [sp, #4]
 801aef2:	6800      	ldr	r0, [r0, #0]
 801aef4:	9403      	str	r4, [sp, #12]
 801aef6:	2300      	movs	r3, #0
 801aef8:	9311      	str	r3, [sp, #68]	; 0x44
 801aefa:	9316      	str	r3, [sp, #88]	; 0x58
 801aefc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af00:	f8ad 301e 	strh.w	r3, [sp, #30]
 801af04:	a904      	add	r1, sp, #16
 801af06:	4623      	mov	r3, r4
 801af08:	f003 fad8 	bl	801e4bc <__ssvfiscanf_r>
 801af0c:	b01f      	add	sp, #124	; 0x7c
 801af0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af12:	b003      	add	sp, #12
 801af14:	4770      	bx	lr
 801af16:	bf00      	nop
 801af18:	0801af43 	.word	0x0801af43
 801af1c:	200001d8 	.word	0x200001d8

0801af20 <__sread>:
 801af20:	b510      	push	{r4, lr}
 801af22:	460c      	mov	r4, r1
 801af24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af28:	f003 fee6 	bl	801ecf8 <_read_r>
 801af2c:	2800      	cmp	r0, #0
 801af2e:	bfab      	itete	ge
 801af30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801af32:	89a3      	ldrhlt	r3, [r4, #12]
 801af34:	181b      	addge	r3, r3, r0
 801af36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801af3a:	bfac      	ite	ge
 801af3c:	6563      	strge	r3, [r4, #84]	; 0x54
 801af3e:	81a3      	strhlt	r3, [r4, #12]
 801af40:	bd10      	pop	{r4, pc}

0801af42 <__seofread>:
 801af42:	2000      	movs	r0, #0
 801af44:	4770      	bx	lr

0801af46 <__swrite>:
 801af46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af4a:	461f      	mov	r7, r3
 801af4c:	898b      	ldrh	r3, [r1, #12]
 801af4e:	05db      	lsls	r3, r3, #23
 801af50:	4605      	mov	r5, r0
 801af52:	460c      	mov	r4, r1
 801af54:	4616      	mov	r6, r2
 801af56:	d505      	bpl.n	801af64 <__swrite+0x1e>
 801af58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af5c:	2302      	movs	r3, #2
 801af5e:	2200      	movs	r2, #0
 801af60:	f002 fb72 	bl	801d648 <_lseek_r>
 801af64:	89a3      	ldrh	r3, [r4, #12]
 801af66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801af6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801af6e:	81a3      	strh	r3, [r4, #12]
 801af70:	4632      	mov	r2, r6
 801af72:	463b      	mov	r3, r7
 801af74:	4628      	mov	r0, r5
 801af76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af7a:	f000 bff7 	b.w	801bf6c <_write_r>

0801af7e <__sseek>:
 801af7e:	b510      	push	{r4, lr}
 801af80:	460c      	mov	r4, r1
 801af82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af86:	f002 fb5f 	bl	801d648 <_lseek_r>
 801af8a:	1c43      	adds	r3, r0, #1
 801af8c:	89a3      	ldrh	r3, [r4, #12]
 801af8e:	bf15      	itete	ne
 801af90:	6560      	strne	r0, [r4, #84]	; 0x54
 801af92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801af96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801af9a:	81a3      	strheq	r3, [r4, #12]
 801af9c:	bf18      	it	ne
 801af9e:	81a3      	strhne	r3, [r4, #12]
 801afa0:	bd10      	pop	{r4, pc}

0801afa2 <__sclose>:
 801afa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801afa6:	f001 b87f 	b.w	801c0a8 <_close_r>

0801afaa <strcpy>:
 801afaa:	4603      	mov	r3, r0
 801afac:	f811 2b01 	ldrb.w	r2, [r1], #1
 801afb0:	f803 2b01 	strb.w	r2, [r3], #1
 801afb4:	2a00      	cmp	r2, #0
 801afb6:	d1f9      	bne.n	801afac <strcpy+0x2>
 801afb8:	4770      	bx	lr

0801afba <strncmp>:
 801afba:	b510      	push	{r4, lr}
 801afbc:	b16a      	cbz	r2, 801afda <strncmp+0x20>
 801afbe:	3901      	subs	r1, #1
 801afc0:	1884      	adds	r4, r0, r2
 801afc2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801afc6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801afca:	4293      	cmp	r3, r2
 801afcc:	d103      	bne.n	801afd6 <strncmp+0x1c>
 801afce:	42a0      	cmp	r0, r4
 801afd0:	d001      	beq.n	801afd6 <strncmp+0x1c>
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d1f5      	bne.n	801afc2 <strncmp+0x8>
 801afd6:	1a98      	subs	r0, r3, r2
 801afd8:	bd10      	pop	{r4, pc}
 801afda:	4610      	mov	r0, r2
 801afdc:	e7fc      	b.n	801afd8 <strncmp+0x1e>

0801afde <sulp>:
 801afde:	b570      	push	{r4, r5, r6, lr}
 801afe0:	4604      	mov	r4, r0
 801afe2:	460d      	mov	r5, r1
 801afe4:	ec45 4b10 	vmov	d0, r4, r5
 801afe8:	4616      	mov	r6, r2
 801afea:	f002 ff2d 	bl	801de48 <__ulp>
 801afee:	ec51 0b10 	vmov	r0, r1, d0
 801aff2:	b17e      	cbz	r6, 801b014 <sulp+0x36>
 801aff4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801aff8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801affc:	2b00      	cmp	r3, #0
 801affe:	dd09      	ble.n	801b014 <sulp+0x36>
 801b000:	051b      	lsls	r3, r3, #20
 801b002:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b006:	2400      	movs	r4, #0
 801b008:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b00c:	4622      	mov	r2, r4
 801b00e:	462b      	mov	r3, r5
 801b010:	f7e5 fb02 	bl	8000618 <__aeabi_dmul>
 801b014:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b018 <_strtod_l>:
 801b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b01c:	b0a3      	sub	sp, #140	; 0x8c
 801b01e:	461f      	mov	r7, r3
 801b020:	2300      	movs	r3, #0
 801b022:	931e      	str	r3, [sp, #120]	; 0x78
 801b024:	4ba4      	ldr	r3, [pc, #656]	; (801b2b8 <_strtod_l+0x2a0>)
 801b026:	9219      	str	r2, [sp, #100]	; 0x64
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	9307      	str	r3, [sp, #28]
 801b02c:	4604      	mov	r4, r0
 801b02e:	4618      	mov	r0, r3
 801b030:	4688      	mov	r8, r1
 801b032:	f7e5 f8dd 	bl	80001f0 <strlen>
 801b036:	f04f 0a00 	mov.w	sl, #0
 801b03a:	4605      	mov	r5, r0
 801b03c:	f04f 0b00 	mov.w	fp, #0
 801b040:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b046:	781a      	ldrb	r2, [r3, #0]
 801b048:	2a2b      	cmp	r2, #43	; 0x2b
 801b04a:	d04c      	beq.n	801b0e6 <_strtod_l+0xce>
 801b04c:	d839      	bhi.n	801b0c2 <_strtod_l+0xaa>
 801b04e:	2a0d      	cmp	r2, #13
 801b050:	d832      	bhi.n	801b0b8 <_strtod_l+0xa0>
 801b052:	2a08      	cmp	r2, #8
 801b054:	d832      	bhi.n	801b0bc <_strtod_l+0xa4>
 801b056:	2a00      	cmp	r2, #0
 801b058:	d03c      	beq.n	801b0d4 <_strtod_l+0xbc>
 801b05a:	2300      	movs	r3, #0
 801b05c:	930e      	str	r3, [sp, #56]	; 0x38
 801b05e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801b060:	7833      	ldrb	r3, [r6, #0]
 801b062:	2b30      	cmp	r3, #48	; 0x30
 801b064:	f040 80b4 	bne.w	801b1d0 <_strtod_l+0x1b8>
 801b068:	7873      	ldrb	r3, [r6, #1]
 801b06a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b06e:	2b58      	cmp	r3, #88	; 0x58
 801b070:	d16c      	bne.n	801b14c <_strtod_l+0x134>
 801b072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b074:	9301      	str	r3, [sp, #4]
 801b076:	ab1e      	add	r3, sp, #120	; 0x78
 801b078:	9702      	str	r7, [sp, #8]
 801b07a:	9300      	str	r3, [sp, #0]
 801b07c:	4a8f      	ldr	r2, [pc, #572]	; (801b2bc <_strtod_l+0x2a4>)
 801b07e:	ab1f      	add	r3, sp, #124	; 0x7c
 801b080:	a91d      	add	r1, sp, #116	; 0x74
 801b082:	4620      	mov	r0, r4
 801b084:	f001 ffd4 	bl	801d030 <__gethex>
 801b088:	f010 0707 	ands.w	r7, r0, #7
 801b08c:	4605      	mov	r5, r0
 801b08e:	d005      	beq.n	801b09c <_strtod_l+0x84>
 801b090:	2f06      	cmp	r7, #6
 801b092:	d12a      	bne.n	801b0ea <_strtod_l+0xd2>
 801b094:	3601      	adds	r6, #1
 801b096:	2300      	movs	r3, #0
 801b098:	961d      	str	r6, [sp, #116]	; 0x74
 801b09a:	930e      	str	r3, [sp, #56]	; 0x38
 801b09c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	f040 8596 	bne.w	801bbd0 <_strtod_l+0xbb8>
 801b0a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0a6:	b1db      	cbz	r3, 801b0e0 <_strtod_l+0xc8>
 801b0a8:	4652      	mov	r2, sl
 801b0aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b0ae:	ec43 2b10 	vmov	d0, r2, r3
 801b0b2:	b023      	add	sp, #140	; 0x8c
 801b0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0b8:	2a20      	cmp	r2, #32
 801b0ba:	d1ce      	bne.n	801b05a <_strtod_l+0x42>
 801b0bc:	3301      	adds	r3, #1
 801b0be:	931d      	str	r3, [sp, #116]	; 0x74
 801b0c0:	e7c0      	b.n	801b044 <_strtod_l+0x2c>
 801b0c2:	2a2d      	cmp	r2, #45	; 0x2d
 801b0c4:	d1c9      	bne.n	801b05a <_strtod_l+0x42>
 801b0c6:	2201      	movs	r2, #1
 801b0c8:	920e      	str	r2, [sp, #56]	; 0x38
 801b0ca:	1c5a      	adds	r2, r3, #1
 801b0cc:	921d      	str	r2, [sp, #116]	; 0x74
 801b0ce:	785b      	ldrb	r3, [r3, #1]
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d1c4      	bne.n	801b05e <_strtod_l+0x46>
 801b0d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b0d6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	f040 8576 	bne.w	801bbcc <_strtod_l+0xbb4>
 801b0e0:	4652      	mov	r2, sl
 801b0e2:	465b      	mov	r3, fp
 801b0e4:	e7e3      	b.n	801b0ae <_strtod_l+0x96>
 801b0e6:	2200      	movs	r2, #0
 801b0e8:	e7ee      	b.n	801b0c8 <_strtod_l+0xb0>
 801b0ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b0ec:	b13a      	cbz	r2, 801b0fe <_strtod_l+0xe6>
 801b0ee:	2135      	movs	r1, #53	; 0x35
 801b0f0:	a820      	add	r0, sp, #128	; 0x80
 801b0f2:	f002 ffb4 	bl	801e05e <__copybits>
 801b0f6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b0f8:	4620      	mov	r0, r4
 801b0fa:	f002 fb79 	bl	801d7f0 <_Bfree>
 801b0fe:	3f01      	subs	r7, #1
 801b100:	2f05      	cmp	r7, #5
 801b102:	d807      	bhi.n	801b114 <_strtod_l+0xfc>
 801b104:	e8df f007 	tbb	[pc, r7]
 801b108:	1d180b0e 	.word	0x1d180b0e
 801b10c:	030e      	.short	0x030e
 801b10e:	f04f 0b00 	mov.w	fp, #0
 801b112:	46da      	mov	sl, fp
 801b114:	0728      	lsls	r0, r5, #28
 801b116:	d5c1      	bpl.n	801b09c <_strtod_l+0x84>
 801b118:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801b11c:	e7be      	b.n	801b09c <_strtod_l+0x84>
 801b11e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801b122:	e7f7      	b.n	801b114 <_strtod_l+0xfc>
 801b124:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801b128:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801b12a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801b12e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b132:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801b136:	e7ed      	b.n	801b114 <_strtod_l+0xfc>
 801b138:	f8df b184 	ldr.w	fp, [pc, #388]	; 801b2c0 <_strtod_l+0x2a8>
 801b13c:	f04f 0a00 	mov.w	sl, #0
 801b140:	e7e8      	b.n	801b114 <_strtod_l+0xfc>
 801b142:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801b146:	f04f 3aff 	mov.w	sl, #4294967295
 801b14a:	e7e3      	b.n	801b114 <_strtod_l+0xfc>
 801b14c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b14e:	1c5a      	adds	r2, r3, #1
 801b150:	921d      	str	r2, [sp, #116]	; 0x74
 801b152:	785b      	ldrb	r3, [r3, #1]
 801b154:	2b30      	cmp	r3, #48	; 0x30
 801b156:	d0f9      	beq.n	801b14c <_strtod_l+0x134>
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d09f      	beq.n	801b09c <_strtod_l+0x84>
 801b15c:	2301      	movs	r3, #1
 801b15e:	f04f 0900 	mov.w	r9, #0
 801b162:	9304      	str	r3, [sp, #16]
 801b164:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b166:	930a      	str	r3, [sp, #40]	; 0x28
 801b168:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b16c:	464f      	mov	r7, r9
 801b16e:	220a      	movs	r2, #10
 801b170:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b172:	7806      	ldrb	r6, [r0, #0]
 801b174:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801b178:	b2d9      	uxtb	r1, r3
 801b17a:	2909      	cmp	r1, #9
 801b17c:	d92a      	bls.n	801b1d4 <_strtod_l+0x1bc>
 801b17e:	9907      	ldr	r1, [sp, #28]
 801b180:	462a      	mov	r2, r5
 801b182:	f7ff ff1a 	bl	801afba <strncmp>
 801b186:	b398      	cbz	r0, 801b1f0 <_strtod_l+0x1d8>
 801b188:	2000      	movs	r0, #0
 801b18a:	4633      	mov	r3, r6
 801b18c:	463d      	mov	r5, r7
 801b18e:	9007      	str	r0, [sp, #28]
 801b190:	4602      	mov	r2, r0
 801b192:	2b65      	cmp	r3, #101	; 0x65
 801b194:	d001      	beq.n	801b19a <_strtod_l+0x182>
 801b196:	2b45      	cmp	r3, #69	; 0x45
 801b198:	d118      	bne.n	801b1cc <_strtod_l+0x1b4>
 801b19a:	b91d      	cbnz	r5, 801b1a4 <_strtod_l+0x18c>
 801b19c:	9b04      	ldr	r3, [sp, #16]
 801b19e:	4303      	orrs	r3, r0
 801b1a0:	d098      	beq.n	801b0d4 <_strtod_l+0xbc>
 801b1a2:	2500      	movs	r5, #0
 801b1a4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801b1a8:	f108 0301 	add.w	r3, r8, #1
 801b1ac:	931d      	str	r3, [sp, #116]	; 0x74
 801b1ae:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b1b2:	2b2b      	cmp	r3, #43	; 0x2b
 801b1b4:	d075      	beq.n	801b2a2 <_strtod_l+0x28a>
 801b1b6:	2b2d      	cmp	r3, #45	; 0x2d
 801b1b8:	d07b      	beq.n	801b2b2 <_strtod_l+0x29a>
 801b1ba:	f04f 0c00 	mov.w	ip, #0
 801b1be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801b1c2:	2909      	cmp	r1, #9
 801b1c4:	f240 8082 	bls.w	801b2cc <_strtod_l+0x2b4>
 801b1c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b1cc:	2600      	movs	r6, #0
 801b1ce:	e09d      	b.n	801b30c <_strtod_l+0x2f4>
 801b1d0:	2300      	movs	r3, #0
 801b1d2:	e7c4      	b.n	801b15e <_strtod_l+0x146>
 801b1d4:	2f08      	cmp	r7, #8
 801b1d6:	bfd8      	it	le
 801b1d8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801b1da:	f100 0001 	add.w	r0, r0, #1
 801b1de:	bfda      	itte	le
 801b1e0:	fb02 3301 	mlale	r3, r2, r1, r3
 801b1e4:	9309      	strle	r3, [sp, #36]	; 0x24
 801b1e6:	fb02 3909 	mlagt	r9, r2, r9, r3
 801b1ea:	3701      	adds	r7, #1
 801b1ec:	901d      	str	r0, [sp, #116]	; 0x74
 801b1ee:	e7bf      	b.n	801b170 <_strtod_l+0x158>
 801b1f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b1f2:	195a      	adds	r2, r3, r5
 801b1f4:	921d      	str	r2, [sp, #116]	; 0x74
 801b1f6:	5d5b      	ldrb	r3, [r3, r5]
 801b1f8:	2f00      	cmp	r7, #0
 801b1fa:	d037      	beq.n	801b26c <_strtod_l+0x254>
 801b1fc:	9007      	str	r0, [sp, #28]
 801b1fe:	463d      	mov	r5, r7
 801b200:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801b204:	2a09      	cmp	r2, #9
 801b206:	d912      	bls.n	801b22e <_strtod_l+0x216>
 801b208:	2201      	movs	r2, #1
 801b20a:	e7c2      	b.n	801b192 <_strtod_l+0x17a>
 801b20c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b20e:	1c5a      	adds	r2, r3, #1
 801b210:	921d      	str	r2, [sp, #116]	; 0x74
 801b212:	785b      	ldrb	r3, [r3, #1]
 801b214:	3001      	adds	r0, #1
 801b216:	2b30      	cmp	r3, #48	; 0x30
 801b218:	d0f8      	beq.n	801b20c <_strtod_l+0x1f4>
 801b21a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801b21e:	2a08      	cmp	r2, #8
 801b220:	f200 84db 	bhi.w	801bbda <_strtod_l+0xbc2>
 801b224:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b226:	9007      	str	r0, [sp, #28]
 801b228:	2000      	movs	r0, #0
 801b22a:	920a      	str	r2, [sp, #40]	; 0x28
 801b22c:	4605      	mov	r5, r0
 801b22e:	3b30      	subs	r3, #48	; 0x30
 801b230:	f100 0201 	add.w	r2, r0, #1
 801b234:	d014      	beq.n	801b260 <_strtod_l+0x248>
 801b236:	9907      	ldr	r1, [sp, #28]
 801b238:	4411      	add	r1, r2
 801b23a:	9107      	str	r1, [sp, #28]
 801b23c:	462a      	mov	r2, r5
 801b23e:	eb00 0e05 	add.w	lr, r0, r5
 801b242:	210a      	movs	r1, #10
 801b244:	4572      	cmp	r2, lr
 801b246:	d113      	bne.n	801b270 <_strtod_l+0x258>
 801b248:	182a      	adds	r2, r5, r0
 801b24a:	2a08      	cmp	r2, #8
 801b24c:	f105 0501 	add.w	r5, r5, #1
 801b250:	4405      	add	r5, r0
 801b252:	dc1c      	bgt.n	801b28e <_strtod_l+0x276>
 801b254:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b256:	220a      	movs	r2, #10
 801b258:	fb02 3301 	mla	r3, r2, r1, r3
 801b25c:	9309      	str	r3, [sp, #36]	; 0x24
 801b25e:	2200      	movs	r2, #0
 801b260:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b262:	1c59      	adds	r1, r3, #1
 801b264:	911d      	str	r1, [sp, #116]	; 0x74
 801b266:	785b      	ldrb	r3, [r3, #1]
 801b268:	4610      	mov	r0, r2
 801b26a:	e7c9      	b.n	801b200 <_strtod_l+0x1e8>
 801b26c:	4638      	mov	r0, r7
 801b26e:	e7d2      	b.n	801b216 <_strtod_l+0x1fe>
 801b270:	2a08      	cmp	r2, #8
 801b272:	dc04      	bgt.n	801b27e <_strtod_l+0x266>
 801b274:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b276:	434e      	muls	r6, r1
 801b278:	9609      	str	r6, [sp, #36]	; 0x24
 801b27a:	3201      	adds	r2, #1
 801b27c:	e7e2      	b.n	801b244 <_strtod_l+0x22c>
 801b27e:	f102 0c01 	add.w	ip, r2, #1
 801b282:	f1bc 0f10 	cmp.w	ip, #16
 801b286:	bfd8      	it	le
 801b288:	fb01 f909 	mulle.w	r9, r1, r9
 801b28c:	e7f5      	b.n	801b27a <_strtod_l+0x262>
 801b28e:	2d10      	cmp	r5, #16
 801b290:	bfdc      	itt	le
 801b292:	220a      	movle	r2, #10
 801b294:	fb02 3909 	mlale	r9, r2, r9, r3
 801b298:	e7e1      	b.n	801b25e <_strtod_l+0x246>
 801b29a:	2300      	movs	r3, #0
 801b29c:	9307      	str	r3, [sp, #28]
 801b29e:	2201      	movs	r2, #1
 801b2a0:	e77c      	b.n	801b19c <_strtod_l+0x184>
 801b2a2:	f04f 0c00 	mov.w	ip, #0
 801b2a6:	f108 0302 	add.w	r3, r8, #2
 801b2aa:	931d      	str	r3, [sp, #116]	; 0x74
 801b2ac:	f898 3002 	ldrb.w	r3, [r8, #2]
 801b2b0:	e785      	b.n	801b1be <_strtod_l+0x1a6>
 801b2b2:	f04f 0c01 	mov.w	ip, #1
 801b2b6:	e7f6      	b.n	801b2a6 <_strtod_l+0x28e>
 801b2b8:	0802105c 	.word	0x0802105c
 801b2bc:	08020ed0 	.word	0x08020ed0
 801b2c0:	7ff00000 	.word	0x7ff00000
 801b2c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b2c6:	1c59      	adds	r1, r3, #1
 801b2c8:	911d      	str	r1, [sp, #116]	; 0x74
 801b2ca:	785b      	ldrb	r3, [r3, #1]
 801b2cc:	2b30      	cmp	r3, #48	; 0x30
 801b2ce:	d0f9      	beq.n	801b2c4 <_strtod_l+0x2ac>
 801b2d0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801b2d4:	2908      	cmp	r1, #8
 801b2d6:	f63f af79 	bhi.w	801b1cc <_strtod_l+0x1b4>
 801b2da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801b2de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b2e0:	9308      	str	r3, [sp, #32]
 801b2e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b2e4:	1c59      	adds	r1, r3, #1
 801b2e6:	911d      	str	r1, [sp, #116]	; 0x74
 801b2e8:	785b      	ldrb	r3, [r3, #1]
 801b2ea:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801b2ee:	2e09      	cmp	r6, #9
 801b2f0:	d937      	bls.n	801b362 <_strtod_l+0x34a>
 801b2f2:	9e08      	ldr	r6, [sp, #32]
 801b2f4:	1b89      	subs	r1, r1, r6
 801b2f6:	2908      	cmp	r1, #8
 801b2f8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801b2fc:	dc02      	bgt.n	801b304 <_strtod_l+0x2ec>
 801b2fe:	4576      	cmp	r6, lr
 801b300:	bfa8      	it	ge
 801b302:	4676      	movge	r6, lr
 801b304:	f1bc 0f00 	cmp.w	ip, #0
 801b308:	d000      	beq.n	801b30c <_strtod_l+0x2f4>
 801b30a:	4276      	negs	r6, r6
 801b30c:	2d00      	cmp	r5, #0
 801b30e:	d14f      	bne.n	801b3b0 <_strtod_l+0x398>
 801b310:	9904      	ldr	r1, [sp, #16]
 801b312:	4301      	orrs	r1, r0
 801b314:	f47f aec2 	bne.w	801b09c <_strtod_l+0x84>
 801b318:	2a00      	cmp	r2, #0
 801b31a:	f47f aedb 	bne.w	801b0d4 <_strtod_l+0xbc>
 801b31e:	2b69      	cmp	r3, #105	; 0x69
 801b320:	d027      	beq.n	801b372 <_strtod_l+0x35a>
 801b322:	dc24      	bgt.n	801b36e <_strtod_l+0x356>
 801b324:	2b49      	cmp	r3, #73	; 0x49
 801b326:	d024      	beq.n	801b372 <_strtod_l+0x35a>
 801b328:	2b4e      	cmp	r3, #78	; 0x4e
 801b32a:	f47f aed3 	bne.w	801b0d4 <_strtod_l+0xbc>
 801b32e:	499e      	ldr	r1, [pc, #632]	; (801b5a8 <_strtod_l+0x590>)
 801b330:	a81d      	add	r0, sp, #116	; 0x74
 801b332:	f002 f8d5 	bl	801d4e0 <__match>
 801b336:	2800      	cmp	r0, #0
 801b338:	f43f aecc 	beq.w	801b0d4 <_strtod_l+0xbc>
 801b33c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b33e:	781b      	ldrb	r3, [r3, #0]
 801b340:	2b28      	cmp	r3, #40	; 0x28
 801b342:	d12d      	bne.n	801b3a0 <_strtod_l+0x388>
 801b344:	4999      	ldr	r1, [pc, #612]	; (801b5ac <_strtod_l+0x594>)
 801b346:	aa20      	add	r2, sp, #128	; 0x80
 801b348:	a81d      	add	r0, sp, #116	; 0x74
 801b34a:	f002 f8dd 	bl	801d508 <__hexnan>
 801b34e:	2805      	cmp	r0, #5
 801b350:	d126      	bne.n	801b3a0 <_strtod_l+0x388>
 801b352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b354:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801b358:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b35c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b360:	e69c      	b.n	801b09c <_strtod_l+0x84>
 801b362:	210a      	movs	r1, #10
 801b364:	fb01 3e0e 	mla	lr, r1, lr, r3
 801b368:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801b36c:	e7b9      	b.n	801b2e2 <_strtod_l+0x2ca>
 801b36e:	2b6e      	cmp	r3, #110	; 0x6e
 801b370:	e7db      	b.n	801b32a <_strtod_l+0x312>
 801b372:	498f      	ldr	r1, [pc, #572]	; (801b5b0 <_strtod_l+0x598>)
 801b374:	a81d      	add	r0, sp, #116	; 0x74
 801b376:	f002 f8b3 	bl	801d4e0 <__match>
 801b37a:	2800      	cmp	r0, #0
 801b37c:	f43f aeaa 	beq.w	801b0d4 <_strtod_l+0xbc>
 801b380:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b382:	498c      	ldr	r1, [pc, #560]	; (801b5b4 <_strtod_l+0x59c>)
 801b384:	3b01      	subs	r3, #1
 801b386:	a81d      	add	r0, sp, #116	; 0x74
 801b388:	931d      	str	r3, [sp, #116]	; 0x74
 801b38a:	f002 f8a9 	bl	801d4e0 <__match>
 801b38e:	b910      	cbnz	r0, 801b396 <_strtod_l+0x37e>
 801b390:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b392:	3301      	adds	r3, #1
 801b394:	931d      	str	r3, [sp, #116]	; 0x74
 801b396:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801b5c4 <_strtod_l+0x5ac>
 801b39a:	f04f 0a00 	mov.w	sl, #0
 801b39e:	e67d      	b.n	801b09c <_strtod_l+0x84>
 801b3a0:	4885      	ldr	r0, [pc, #532]	; (801b5b8 <_strtod_l+0x5a0>)
 801b3a2:	f7fe fa75 	bl	8019890 <nan>
 801b3a6:	ed8d 0b04 	vstr	d0, [sp, #16]
 801b3aa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801b3ae:	e675      	b.n	801b09c <_strtod_l+0x84>
 801b3b0:	9b07      	ldr	r3, [sp, #28]
 801b3b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b3b4:	1af3      	subs	r3, r6, r3
 801b3b6:	2f00      	cmp	r7, #0
 801b3b8:	bf08      	it	eq
 801b3ba:	462f      	moveq	r7, r5
 801b3bc:	2d10      	cmp	r5, #16
 801b3be:	9308      	str	r3, [sp, #32]
 801b3c0:	46a8      	mov	r8, r5
 801b3c2:	bfa8      	it	ge
 801b3c4:	f04f 0810 	movge.w	r8, #16
 801b3c8:	f7e5 f8ac 	bl	8000524 <__aeabi_ui2d>
 801b3cc:	2d09      	cmp	r5, #9
 801b3ce:	4682      	mov	sl, r0
 801b3d0:	468b      	mov	fp, r1
 801b3d2:	dd13      	ble.n	801b3fc <_strtod_l+0x3e4>
 801b3d4:	4b79      	ldr	r3, [pc, #484]	; (801b5bc <_strtod_l+0x5a4>)
 801b3d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b3da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b3de:	f7e5 f91b 	bl	8000618 <__aeabi_dmul>
 801b3e2:	4682      	mov	sl, r0
 801b3e4:	4648      	mov	r0, r9
 801b3e6:	468b      	mov	fp, r1
 801b3e8:	f7e5 f89c 	bl	8000524 <__aeabi_ui2d>
 801b3ec:	4602      	mov	r2, r0
 801b3ee:	460b      	mov	r3, r1
 801b3f0:	4650      	mov	r0, sl
 801b3f2:	4659      	mov	r1, fp
 801b3f4:	f7e4 ff5a 	bl	80002ac <__adddf3>
 801b3f8:	4682      	mov	sl, r0
 801b3fa:	468b      	mov	fp, r1
 801b3fc:	2d0f      	cmp	r5, #15
 801b3fe:	dc38      	bgt.n	801b472 <_strtod_l+0x45a>
 801b400:	9b08      	ldr	r3, [sp, #32]
 801b402:	2b00      	cmp	r3, #0
 801b404:	f43f ae4a 	beq.w	801b09c <_strtod_l+0x84>
 801b408:	dd24      	ble.n	801b454 <_strtod_l+0x43c>
 801b40a:	2b16      	cmp	r3, #22
 801b40c:	dc0b      	bgt.n	801b426 <_strtod_l+0x40e>
 801b40e:	4d6b      	ldr	r5, [pc, #428]	; (801b5bc <_strtod_l+0x5a4>)
 801b410:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801b414:	e9d5 0100 	ldrd	r0, r1, [r5]
 801b418:	4652      	mov	r2, sl
 801b41a:	465b      	mov	r3, fp
 801b41c:	f7e5 f8fc 	bl	8000618 <__aeabi_dmul>
 801b420:	4682      	mov	sl, r0
 801b422:	468b      	mov	fp, r1
 801b424:	e63a      	b.n	801b09c <_strtod_l+0x84>
 801b426:	9a08      	ldr	r2, [sp, #32]
 801b428:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801b42c:	4293      	cmp	r3, r2
 801b42e:	db20      	blt.n	801b472 <_strtod_l+0x45a>
 801b430:	4c62      	ldr	r4, [pc, #392]	; (801b5bc <_strtod_l+0x5a4>)
 801b432:	f1c5 050f 	rsb	r5, r5, #15
 801b436:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801b43a:	4652      	mov	r2, sl
 801b43c:	465b      	mov	r3, fp
 801b43e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b442:	f7e5 f8e9 	bl	8000618 <__aeabi_dmul>
 801b446:	9b08      	ldr	r3, [sp, #32]
 801b448:	1b5d      	subs	r5, r3, r5
 801b44a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801b44e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b452:	e7e3      	b.n	801b41c <_strtod_l+0x404>
 801b454:	9b08      	ldr	r3, [sp, #32]
 801b456:	3316      	adds	r3, #22
 801b458:	db0b      	blt.n	801b472 <_strtod_l+0x45a>
 801b45a:	9b07      	ldr	r3, [sp, #28]
 801b45c:	4a57      	ldr	r2, [pc, #348]	; (801b5bc <_strtod_l+0x5a4>)
 801b45e:	1b9e      	subs	r6, r3, r6
 801b460:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b464:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b468:	4650      	mov	r0, sl
 801b46a:	4659      	mov	r1, fp
 801b46c:	f7e5 f9fe 	bl	800086c <__aeabi_ddiv>
 801b470:	e7d6      	b.n	801b420 <_strtod_l+0x408>
 801b472:	9b08      	ldr	r3, [sp, #32]
 801b474:	eba5 0808 	sub.w	r8, r5, r8
 801b478:	4498      	add	r8, r3
 801b47a:	f1b8 0f00 	cmp.w	r8, #0
 801b47e:	dd71      	ble.n	801b564 <_strtod_l+0x54c>
 801b480:	f018 030f 	ands.w	r3, r8, #15
 801b484:	d00a      	beq.n	801b49c <_strtod_l+0x484>
 801b486:	494d      	ldr	r1, [pc, #308]	; (801b5bc <_strtod_l+0x5a4>)
 801b488:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b48c:	4652      	mov	r2, sl
 801b48e:	465b      	mov	r3, fp
 801b490:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b494:	f7e5 f8c0 	bl	8000618 <__aeabi_dmul>
 801b498:	4682      	mov	sl, r0
 801b49a:	468b      	mov	fp, r1
 801b49c:	f038 080f 	bics.w	r8, r8, #15
 801b4a0:	d04d      	beq.n	801b53e <_strtod_l+0x526>
 801b4a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b4a6:	dd22      	ble.n	801b4ee <_strtod_l+0x4d6>
 801b4a8:	2500      	movs	r5, #0
 801b4aa:	462e      	mov	r6, r5
 801b4ac:	9509      	str	r5, [sp, #36]	; 0x24
 801b4ae:	9507      	str	r5, [sp, #28]
 801b4b0:	2322      	movs	r3, #34	; 0x22
 801b4b2:	f8df b110 	ldr.w	fp, [pc, #272]	; 801b5c4 <_strtod_l+0x5ac>
 801b4b6:	6023      	str	r3, [r4, #0]
 801b4b8:	f04f 0a00 	mov.w	sl, #0
 801b4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	f43f adec 	beq.w	801b09c <_strtod_l+0x84>
 801b4c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b4c6:	4620      	mov	r0, r4
 801b4c8:	f002 f992 	bl	801d7f0 <_Bfree>
 801b4cc:	9907      	ldr	r1, [sp, #28]
 801b4ce:	4620      	mov	r0, r4
 801b4d0:	f002 f98e 	bl	801d7f0 <_Bfree>
 801b4d4:	4631      	mov	r1, r6
 801b4d6:	4620      	mov	r0, r4
 801b4d8:	f002 f98a 	bl	801d7f0 <_Bfree>
 801b4dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b4de:	4620      	mov	r0, r4
 801b4e0:	f002 f986 	bl	801d7f0 <_Bfree>
 801b4e4:	4629      	mov	r1, r5
 801b4e6:	4620      	mov	r0, r4
 801b4e8:	f002 f982 	bl	801d7f0 <_Bfree>
 801b4ec:	e5d6      	b.n	801b09c <_strtod_l+0x84>
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	ea4f 1828 	mov.w	r8, r8, asr #4
 801b4f4:	4650      	mov	r0, sl
 801b4f6:	4659      	mov	r1, fp
 801b4f8:	4699      	mov	r9, r3
 801b4fa:	f1b8 0f01 	cmp.w	r8, #1
 801b4fe:	dc21      	bgt.n	801b544 <_strtod_l+0x52c>
 801b500:	b10b      	cbz	r3, 801b506 <_strtod_l+0x4ee>
 801b502:	4682      	mov	sl, r0
 801b504:	468b      	mov	fp, r1
 801b506:	4b2e      	ldr	r3, [pc, #184]	; (801b5c0 <_strtod_l+0x5a8>)
 801b508:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b50c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801b510:	4652      	mov	r2, sl
 801b512:	465b      	mov	r3, fp
 801b514:	e9d9 0100 	ldrd	r0, r1, [r9]
 801b518:	f7e5 f87e 	bl	8000618 <__aeabi_dmul>
 801b51c:	4b29      	ldr	r3, [pc, #164]	; (801b5c4 <_strtod_l+0x5ac>)
 801b51e:	460a      	mov	r2, r1
 801b520:	400b      	ands	r3, r1
 801b522:	4929      	ldr	r1, [pc, #164]	; (801b5c8 <_strtod_l+0x5b0>)
 801b524:	428b      	cmp	r3, r1
 801b526:	4682      	mov	sl, r0
 801b528:	d8be      	bhi.n	801b4a8 <_strtod_l+0x490>
 801b52a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b52e:	428b      	cmp	r3, r1
 801b530:	bf86      	itte	hi
 801b532:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801b5cc <_strtod_l+0x5b4>
 801b536:	f04f 3aff 	movhi.w	sl, #4294967295
 801b53a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b53e:	2300      	movs	r3, #0
 801b540:	9304      	str	r3, [sp, #16]
 801b542:	e081      	b.n	801b648 <_strtod_l+0x630>
 801b544:	f018 0f01 	tst.w	r8, #1
 801b548:	d007      	beq.n	801b55a <_strtod_l+0x542>
 801b54a:	4b1d      	ldr	r3, [pc, #116]	; (801b5c0 <_strtod_l+0x5a8>)
 801b54c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b554:	f7e5 f860 	bl	8000618 <__aeabi_dmul>
 801b558:	2301      	movs	r3, #1
 801b55a:	f109 0901 	add.w	r9, r9, #1
 801b55e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b562:	e7ca      	b.n	801b4fa <_strtod_l+0x4e2>
 801b564:	d0eb      	beq.n	801b53e <_strtod_l+0x526>
 801b566:	f1c8 0800 	rsb	r8, r8, #0
 801b56a:	f018 020f 	ands.w	r2, r8, #15
 801b56e:	d00a      	beq.n	801b586 <_strtod_l+0x56e>
 801b570:	4b12      	ldr	r3, [pc, #72]	; (801b5bc <_strtod_l+0x5a4>)
 801b572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b576:	4650      	mov	r0, sl
 801b578:	4659      	mov	r1, fp
 801b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b57e:	f7e5 f975 	bl	800086c <__aeabi_ddiv>
 801b582:	4682      	mov	sl, r0
 801b584:	468b      	mov	fp, r1
 801b586:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b58a:	d0d8      	beq.n	801b53e <_strtod_l+0x526>
 801b58c:	f1b8 0f1f 	cmp.w	r8, #31
 801b590:	dd1e      	ble.n	801b5d0 <_strtod_l+0x5b8>
 801b592:	2500      	movs	r5, #0
 801b594:	462e      	mov	r6, r5
 801b596:	9509      	str	r5, [sp, #36]	; 0x24
 801b598:	9507      	str	r5, [sp, #28]
 801b59a:	2322      	movs	r3, #34	; 0x22
 801b59c:	f04f 0a00 	mov.w	sl, #0
 801b5a0:	f04f 0b00 	mov.w	fp, #0
 801b5a4:	6023      	str	r3, [r4, #0]
 801b5a6:	e789      	b.n	801b4bc <_strtod_l+0x4a4>
 801b5a8:	08020ea5 	.word	0x08020ea5
 801b5ac:	08020ee4 	.word	0x08020ee4
 801b5b0:	08020e9d 	.word	0x08020e9d
 801b5b4:	08020f5f 	.word	0x08020f5f
 801b5b8:	08020f5b 	.word	0x08020f5b
 801b5bc:	080210f8 	.word	0x080210f8
 801b5c0:	080210d0 	.word	0x080210d0
 801b5c4:	7ff00000 	.word	0x7ff00000
 801b5c8:	7ca00000 	.word	0x7ca00000
 801b5cc:	7fefffff 	.word	0x7fefffff
 801b5d0:	f018 0310 	ands.w	r3, r8, #16
 801b5d4:	bf18      	it	ne
 801b5d6:	236a      	movne	r3, #106	; 0x6a
 801b5d8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801b990 <_strtod_l+0x978>
 801b5dc:	9304      	str	r3, [sp, #16]
 801b5de:	4650      	mov	r0, sl
 801b5e0:	4659      	mov	r1, fp
 801b5e2:	2300      	movs	r3, #0
 801b5e4:	f018 0f01 	tst.w	r8, #1
 801b5e8:	d004      	beq.n	801b5f4 <_strtod_l+0x5dc>
 801b5ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b5ee:	f7e5 f813 	bl	8000618 <__aeabi_dmul>
 801b5f2:	2301      	movs	r3, #1
 801b5f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801b5f8:	f109 0908 	add.w	r9, r9, #8
 801b5fc:	d1f2      	bne.n	801b5e4 <_strtod_l+0x5cc>
 801b5fe:	b10b      	cbz	r3, 801b604 <_strtod_l+0x5ec>
 801b600:	4682      	mov	sl, r0
 801b602:	468b      	mov	fp, r1
 801b604:	9b04      	ldr	r3, [sp, #16]
 801b606:	b1bb      	cbz	r3, 801b638 <_strtod_l+0x620>
 801b608:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801b60c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b610:	2b00      	cmp	r3, #0
 801b612:	4659      	mov	r1, fp
 801b614:	dd10      	ble.n	801b638 <_strtod_l+0x620>
 801b616:	2b1f      	cmp	r3, #31
 801b618:	f340 8128 	ble.w	801b86c <_strtod_l+0x854>
 801b61c:	2b34      	cmp	r3, #52	; 0x34
 801b61e:	bfde      	ittt	le
 801b620:	3b20      	suble	r3, #32
 801b622:	f04f 32ff 	movle.w	r2, #4294967295
 801b626:	fa02 f303 	lslle.w	r3, r2, r3
 801b62a:	f04f 0a00 	mov.w	sl, #0
 801b62e:	bfcc      	ite	gt
 801b630:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b634:	ea03 0b01 	andle.w	fp, r3, r1
 801b638:	2200      	movs	r2, #0
 801b63a:	2300      	movs	r3, #0
 801b63c:	4650      	mov	r0, sl
 801b63e:	4659      	mov	r1, fp
 801b640:	f7e5 fa52 	bl	8000ae8 <__aeabi_dcmpeq>
 801b644:	2800      	cmp	r0, #0
 801b646:	d1a4      	bne.n	801b592 <_strtod_l+0x57a>
 801b648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b64a:	9300      	str	r3, [sp, #0]
 801b64c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b64e:	462b      	mov	r3, r5
 801b650:	463a      	mov	r2, r7
 801b652:	4620      	mov	r0, r4
 801b654:	f002 f938 	bl	801d8c8 <__s2b>
 801b658:	9009      	str	r0, [sp, #36]	; 0x24
 801b65a:	2800      	cmp	r0, #0
 801b65c:	f43f af24 	beq.w	801b4a8 <_strtod_l+0x490>
 801b660:	9b07      	ldr	r3, [sp, #28]
 801b662:	1b9e      	subs	r6, r3, r6
 801b664:	9b08      	ldr	r3, [sp, #32]
 801b666:	2b00      	cmp	r3, #0
 801b668:	bfb4      	ite	lt
 801b66a:	4633      	movlt	r3, r6
 801b66c:	2300      	movge	r3, #0
 801b66e:	9310      	str	r3, [sp, #64]	; 0x40
 801b670:	9b08      	ldr	r3, [sp, #32]
 801b672:	2500      	movs	r5, #0
 801b674:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b678:	9318      	str	r3, [sp, #96]	; 0x60
 801b67a:	462e      	mov	r6, r5
 801b67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b67e:	4620      	mov	r0, r4
 801b680:	6859      	ldr	r1, [r3, #4]
 801b682:	f002 f875 	bl	801d770 <_Balloc>
 801b686:	9007      	str	r0, [sp, #28]
 801b688:	2800      	cmp	r0, #0
 801b68a:	f43f af11 	beq.w	801b4b0 <_strtod_l+0x498>
 801b68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b690:	691a      	ldr	r2, [r3, #16]
 801b692:	3202      	adds	r2, #2
 801b694:	f103 010c 	add.w	r1, r3, #12
 801b698:	0092      	lsls	r2, r2, #2
 801b69a:	300c      	adds	r0, #12
 801b69c:	f7fe fb4e 	bl	8019d3c <memcpy>
 801b6a0:	ec4b ab10 	vmov	d0, sl, fp
 801b6a4:	aa20      	add	r2, sp, #128	; 0x80
 801b6a6:	a91f      	add	r1, sp, #124	; 0x7c
 801b6a8:	4620      	mov	r0, r4
 801b6aa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801b6ae:	f002 fc47 	bl	801df40 <__d2b>
 801b6b2:	901e      	str	r0, [sp, #120]	; 0x78
 801b6b4:	2800      	cmp	r0, #0
 801b6b6:	f43f aefb 	beq.w	801b4b0 <_strtod_l+0x498>
 801b6ba:	2101      	movs	r1, #1
 801b6bc:	4620      	mov	r0, r4
 801b6be:	f002 f99d 	bl	801d9fc <__i2b>
 801b6c2:	4606      	mov	r6, r0
 801b6c4:	2800      	cmp	r0, #0
 801b6c6:	f43f aef3 	beq.w	801b4b0 <_strtod_l+0x498>
 801b6ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b6cc:	9904      	ldr	r1, [sp, #16]
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	bfab      	itete	ge
 801b6d2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801b6d4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801b6d6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801b6d8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801b6dc:	bfac      	ite	ge
 801b6de:	eb03 0902 	addge.w	r9, r3, r2
 801b6e2:	1ad7      	sublt	r7, r2, r3
 801b6e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b6e6:	eba3 0801 	sub.w	r8, r3, r1
 801b6ea:	4490      	add	r8, r2
 801b6ec:	4ba3      	ldr	r3, [pc, #652]	; (801b97c <_strtod_l+0x964>)
 801b6ee:	f108 38ff 	add.w	r8, r8, #4294967295
 801b6f2:	4598      	cmp	r8, r3
 801b6f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b6f8:	f280 80cc 	bge.w	801b894 <_strtod_l+0x87c>
 801b6fc:	eba3 0308 	sub.w	r3, r3, r8
 801b700:	2b1f      	cmp	r3, #31
 801b702:	eba2 0203 	sub.w	r2, r2, r3
 801b706:	f04f 0101 	mov.w	r1, #1
 801b70a:	f300 80b6 	bgt.w	801b87a <_strtod_l+0x862>
 801b70e:	fa01 f303 	lsl.w	r3, r1, r3
 801b712:	9311      	str	r3, [sp, #68]	; 0x44
 801b714:	2300      	movs	r3, #0
 801b716:	930c      	str	r3, [sp, #48]	; 0x30
 801b718:	eb09 0802 	add.w	r8, r9, r2
 801b71c:	9b04      	ldr	r3, [sp, #16]
 801b71e:	45c1      	cmp	r9, r8
 801b720:	4417      	add	r7, r2
 801b722:	441f      	add	r7, r3
 801b724:	464b      	mov	r3, r9
 801b726:	bfa8      	it	ge
 801b728:	4643      	movge	r3, r8
 801b72a:	42bb      	cmp	r3, r7
 801b72c:	bfa8      	it	ge
 801b72e:	463b      	movge	r3, r7
 801b730:	2b00      	cmp	r3, #0
 801b732:	bfc2      	ittt	gt
 801b734:	eba8 0803 	subgt.w	r8, r8, r3
 801b738:	1aff      	subgt	r7, r7, r3
 801b73a:	eba9 0903 	subgt.w	r9, r9, r3
 801b73e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b740:	2b00      	cmp	r3, #0
 801b742:	dd17      	ble.n	801b774 <_strtod_l+0x75c>
 801b744:	4631      	mov	r1, r6
 801b746:	461a      	mov	r2, r3
 801b748:	4620      	mov	r0, r4
 801b74a:	f002 fa13 	bl	801db74 <__pow5mult>
 801b74e:	4606      	mov	r6, r0
 801b750:	2800      	cmp	r0, #0
 801b752:	f43f aead 	beq.w	801b4b0 <_strtod_l+0x498>
 801b756:	4601      	mov	r1, r0
 801b758:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b75a:	4620      	mov	r0, r4
 801b75c:	f002 f964 	bl	801da28 <__multiply>
 801b760:	900f      	str	r0, [sp, #60]	; 0x3c
 801b762:	2800      	cmp	r0, #0
 801b764:	f43f aea4 	beq.w	801b4b0 <_strtod_l+0x498>
 801b768:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b76a:	4620      	mov	r0, r4
 801b76c:	f002 f840 	bl	801d7f0 <_Bfree>
 801b770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b772:	931e      	str	r3, [sp, #120]	; 0x78
 801b774:	f1b8 0f00 	cmp.w	r8, #0
 801b778:	f300 8091 	bgt.w	801b89e <_strtod_l+0x886>
 801b77c:	9b08      	ldr	r3, [sp, #32]
 801b77e:	2b00      	cmp	r3, #0
 801b780:	dd08      	ble.n	801b794 <_strtod_l+0x77c>
 801b782:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b784:	9907      	ldr	r1, [sp, #28]
 801b786:	4620      	mov	r0, r4
 801b788:	f002 f9f4 	bl	801db74 <__pow5mult>
 801b78c:	9007      	str	r0, [sp, #28]
 801b78e:	2800      	cmp	r0, #0
 801b790:	f43f ae8e 	beq.w	801b4b0 <_strtod_l+0x498>
 801b794:	2f00      	cmp	r7, #0
 801b796:	dd08      	ble.n	801b7aa <_strtod_l+0x792>
 801b798:	9907      	ldr	r1, [sp, #28]
 801b79a:	463a      	mov	r2, r7
 801b79c:	4620      	mov	r0, r4
 801b79e:	f002 fa43 	bl	801dc28 <__lshift>
 801b7a2:	9007      	str	r0, [sp, #28]
 801b7a4:	2800      	cmp	r0, #0
 801b7a6:	f43f ae83 	beq.w	801b4b0 <_strtod_l+0x498>
 801b7aa:	f1b9 0f00 	cmp.w	r9, #0
 801b7ae:	dd08      	ble.n	801b7c2 <_strtod_l+0x7aa>
 801b7b0:	4631      	mov	r1, r6
 801b7b2:	464a      	mov	r2, r9
 801b7b4:	4620      	mov	r0, r4
 801b7b6:	f002 fa37 	bl	801dc28 <__lshift>
 801b7ba:	4606      	mov	r6, r0
 801b7bc:	2800      	cmp	r0, #0
 801b7be:	f43f ae77 	beq.w	801b4b0 <_strtod_l+0x498>
 801b7c2:	9a07      	ldr	r2, [sp, #28]
 801b7c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b7c6:	4620      	mov	r0, r4
 801b7c8:	f002 fab6 	bl	801dd38 <__mdiff>
 801b7cc:	4605      	mov	r5, r0
 801b7ce:	2800      	cmp	r0, #0
 801b7d0:	f43f ae6e 	beq.w	801b4b0 <_strtod_l+0x498>
 801b7d4:	68c3      	ldr	r3, [r0, #12]
 801b7d6:	930f      	str	r3, [sp, #60]	; 0x3c
 801b7d8:	2300      	movs	r3, #0
 801b7da:	60c3      	str	r3, [r0, #12]
 801b7dc:	4631      	mov	r1, r6
 801b7de:	f002 fa8f 	bl	801dd00 <__mcmp>
 801b7e2:	2800      	cmp	r0, #0
 801b7e4:	da65      	bge.n	801b8b2 <_strtod_l+0x89a>
 801b7e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b7e8:	ea53 030a 	orrs.w	r3, r3, sl
 801b7ec:	f040 8087 	bne.w	801b8fe <_strtod_l+0x8e6>
 801b7f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	f040 8082 	bne.w	801b8fe <_strtod_l+0x8e6>
 801b7fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b7fe:	0d1b      	lsrs	r3, r3, #20
 801b800:	051b      	lsls	r3, r3, #20
 801b802:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b806:	d97a      	bls.n	801b8fe <_strtod_l+0x8e6>
 801b808:	696b      	ldr	r3, [r5, #20]
 801b80a:	b913      	cbnz	r3, 801b812 <_strtod_l+0x7fa>
 801b80c:	692b      	ldr	r3, [r5, #16]
 801b80e:	2b01      	cmp	r3, #1
 801b810:	dd75      	ble.n	801b8fe <_strtod_l+0x8e6>
 801b812:	4629      	mov	r1, r5
 801b814:	2201      	movs	r2, #1
 801b816:	4620      	mov	r0, r4
 801b818:	f002 fa06 	bl	801dc28 <__lshift>
 801b81c:	4631      	mov	r1, r6
 801b81e:	4605      	mov	r5, r0
 801b820:	f002 fa6e 	bl	801dd00 <__mcmp>
 801b824:	2800      	cmp	r0, #0
 801b826:	dd6a      	ble.n	801b8fe <_strtod_l+0x8e6>
 801b828:	9904      	ldr	r1, [sp, #16]
 801b82a:	4a55      	ldr	r2, [pc, #340]	; (801b980 <_strtod_l+0x968>)
 801b82c:	465b      	mov	r3, fp
 801b82e:	2900      	cmp	r1, #0
 801b830:	f000 8085 	beq.w	801b93e <_strtod_l+0x926>
 801b834:	ea02 010b 	and.w	r1, r2, fp
 801b838:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b83c:	dc7f      	bgt.n	801b93e <_strtod_l+0x926>
 801b83e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b842:	f77f aeaa 	ble.w	801b59a <_strtod_l+0x582>
 801b846:	4a4f      	ldr	r2, [pc, #316]	; (801b984 <_strtod_l+0x96c>)
 801b848:	2300      	movs	r3, #0
 801b84a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801b84e:	4650      	mov	r0, sl
 801b850:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801b854:	4659      	mov	r1, fp
 801b856:	f7e4 fedf 	bl	8000618 <__aeabi_dmul>
 801b85a:	460b      	mov	r3, r1
 801b85c:	4303      	orrs	r3, r0
 801b85e:	bf08      	it	eq
 801b860:	2322      	moveq	r3, #34	; 0x22
 801b862:	4682      	mov	sl, r0
 801b864:	468b      	mov	fp, r1
 801b866:	bf08      	it	eq
 801b868:	6023      	streq	r3, [r4, #0]
 801b86a:	e62b      	b.n	801b4c4 <_strtod_l+0x4ac>
 801b86c:	f04f 32ff 	mov.w	r2, #4294967295
 801b870:	fa02 f303 	lsl.w	r3, r2, r3
 801b874:	ea03 0a0a 	and.w	sl, r3, sl
 801b878:	e6de      	b.n	801b638 <_strtod_l+0x620>
 801b87a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801b87e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801b882:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801b886:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801b88a:	fa01 f308 	lsl.w	r3, r1, r8
 801b88e:	930c      	str	r3, [sp, #48]	; 0x30
 801b890:	9111      	str	r1, [sp, #68]	; 0x44
 801b892:	e741      	b.n	801b718 <_strtod_l+0x700>
 801b894:	2300      	movs	r3, #0
 801b896:	930c      	str	r3, [sp, #48]	; 0x30
 801b898:	2301      	movs	r3, #1
 801b89a:	9311      	str	r3, [sp, #68]	; 0x44
 801b89c:	e73c      	b.n	801b718 <_strtod_l+0x700>
 801b89e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b8a0:	4642      	mov	r2, r8
 801b8a2:	4620      	mov	r0, r4
 801b8a4:	f002 f9c0 	bl	801dc28 <__lshift>
 801b8a8:	901e      	str	r0, [sp, #120]	; 0x78
 801b8aa:	2800      	cmp	r0, #0
 801b8ac:	f47f af66 	bne.w	801b77c <_strtod_l+0x764>
 801b8b0:	e5fe      	b.n	801b4b0 <_strtod_l+0x498>
 801b8b2:	465f      	mov	r7, fp
 801b8b4:	d16e      	bne.n	801b994 <_strtod_l+0x97c>
 801b8b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b8b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b8bc:	b342      	cbz	r2, 801b910 <_strtod_l+0x8f8>
 801b8be:	4a32      	ldr	r2, [pc, #200]	; (801b988 <_strtod_l+0x970>)
 801b8c0:	4293      	cmp	r3, r2
 801b8c2:	d128      	bne.n	801b916 <_strtod_l+0x8fe>
 801b8c4:	9b04      	ldr	r3, [sp, #16]
 801b8c6:	4650      	mov	r0, sl
 801b8c8:	b1eb      	cbz	r3, 801b906 <_strtod_l+0x8ee>
 801b8ca:	4a2d      	ldr	r2, [pc, #180]	; (801b980 <_strtod_l+0x968>)
 801b8cc:	403a      	ands	r2, r7
 801b8ce:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801b8d2:	f04f 31ff 	mov.w	r1, #4294967295
 801b8d6:	d819      	bhi.n	801b90c <_strtod_l+0x8f4>
 801b8d8:	0d12      	lsrs	r2, r2, #20
 801b8da:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b8de:	fa01 f303 	lsl.w	r3, r1, r3
 801b8e2:	4298      	cmp	r0, r3
 801b8e4:	d117      	bne.n	801b916 <_strtod_l+0x8fe>
 801b8e6:	4b29      	ldr	r3, [pc, #164]	; (801b98c <_strtod_l+0x974>)
 801b8e8:	429f      	cmp	r7, r3
 801b8ea:	d102      	bne.n	801b8f2 <_strtod_l+0x8da>
 801b8ec:	3001      	adds	r0, #1
 801b8ee:	f43f addf 	beq.w	801b4b0 <_strtod_l+0x498>
 801b8f2:	4b23      	ldr	r3, [pc, #140]	; (801b980 <_strtod_l+0x968>)
 801b8f4:	403b      	ands	r3, r7
 801b8f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b8fa:	f04f 0a00 	mov.w	sl, #0
 801b8fe:	9b04      	ldr	r3, [sp, #16]
 801b900:	2b00      	cmp	r3, #0
 801b902:	d1a0      	bne.n	801b846 <_strtod_l+0x82e>
 801b904:	e5de      	b.n	801b4c4 <_strtod_l+0x4ac>
 801b906:	f04f 33ff 	mov.w	r3, #4294967295
 801b90a:	e7ea      	b.n	801b8e2 <_strtod_l+0x8ca>
 801b90c:	460b      	mov	r3, r1
 801b90e:	e7e8      	b.n	801b8e2 <_strtod_l+0x8ca>
 801b910:	ea53 030a 	orrs.w	r3, r3, sl
 801b914:	d088      	beq.n	801b828 <_strtod_l+0x810>
 801b916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b918:	b1db      	cbz	r3, 801b952 <_strtod_l+0x93a>
 801b91a:	423b      	tst	r3, r7
 801b91c:	d0ef      	beq.n	801b8fe <_strtod_l+0x8e6>
 801b91e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b920:	9a04      	ldr	r2, [sp, #16]
 801b922:	4650      	mov	r0, sl
 801b924:	4659      	mov	r1, fp
 801b926:	b1c3      	cbz	r3, 801b95a <_strtod_l+0x942>
 801b928:	f7ff fb59 	bl	801afde <sulp>
 801b92c:	4602      	mov	r2, r0
 801b92e:	460b      	mov	r3, r1
 801b930:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b934:	f7e4 fcba 	bl	80002ac <__adddf3>
 801b938:	4682      	mov	sl, r0
 801b93a:	468b      	mov	fp, r1
 801b93c:	e7df      	b.n	801b8fe <_strtod_l+0x8e6>
 801b93e:	4013      	ands	r3, r2
 801b940:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b944:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b948:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b94c:	f04f 3aff 	mov.w	sl, #4294967295
 801b950:	e7d5      	b.n	801b8fe <_strtod_l+0x8e6>
 801b952:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b954:	ea13 0f0a 	tst.w	r3, sl
 801b958:	e7e0      	b.n	801b91c <_strtod_l+0x904>
 801b95a:	f7ff fb40 	bl	801afde <sulp>
 801b95e:	4602      	mov	r2, r0
 801b960:	460b      	mov	r3, r1
 801b962:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b966:	f7e4 fc9f 	bl	80002a8 <__aeabi_dsub>
 801b96a:	2200      	movs	r2, #0
 801b96c:	2300      	movs	r3, #0
 801b96e:	4682      	mov	sl, r0
 801b970:	468b      	mov	fp, r1
 801b972:	f7e5 f8b9 	bl	8000ae8 <__aeabi_dcmpeq>
 801b976:	2800      	cmp	r0, #0
 801b978:	d0c1      	beq.n	801b8fe <_strtod_l+0x8e6>
 801b97a:	e60e      	b.n	801b59a <_strtod_l+0x582>
 801b97c:	fffffc02 	.word	0xfffffc02
 801b980:	7ff00000 	.word	0x7ff00000
 801b984:	39500000 	.word	0x39500000
 801b988:	000fffff 	.word	0x000fffff
 801b98c:	7fefffff 	.word	0x7fefffff
 801b990:	08020ef8 	.word	0x08020ef8
 801b994:	4631      	mov	r1, r6
 801b996:	4628      	mov	r0, r5
 801b998:	f002 fb2e 	bl	801dff8 <__ratio>
 801b99c:	ec59 8b10 	vmov	r8, r9, d0
 801b9a0:	ee10 0a10 	vmov	r0, s0
 801b9a4:	2200      	movs	r2, #0
 801b9a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b9aa:	4649      	mov	r1, r9
 801b9ac:	f7e5 f8b0 	bl	8000b10 <__aeabi_dcmple>
 801b9b0:	2800      	cmp	r0, #0
 801b9b2:	d07c      	beq.n	801baae <_strtod_l+0xa96>
 801b9b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	d04c      	beq.n	801ba54 <_strtod_l+0xa3c>
 801b9ba:	4b95      	ldr	r3, [pc, #596]	; (801bc10 <_strtod_l+0xbf8>)
 801b9bc:	2200      	movs	r2, #0
 801b9be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b9c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801bc10 <_strtod_l+0xbf8>
 801b9c6:	f04f 0800 	mov.w	r8, #0
 801b9ca:	4b92      	ldr	r3, [pc, #584]	; (801bc14 <_strtod_l+0xbfc>)
 801b9cc:	403b      	ands	r3, r7
 801b9ce:	9311      	str	r3, [sp, #68]	; 0x44
 801b9d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b9d2:	4b91      	ldr	r3, [pc, #580]	; (801bc18 <_strtod_l+0xc00>)
 801b9d4:	429a      	cmp	r2, r3
 801b9d6:	f040 80b2 	bne.w	801bb3e <_strtod_l+0xb26>
 801b9da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b9de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b9e2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b9e6:	ec4b ab10 	vmov	d0, sl, fp
 801b9ea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801b9ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b9f2:	f002 fa29 	bl	801de48 <__ulp>
 801b9f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b9fa:	ec53 2b10 	vmov	r2, r3, d0
 801b9fe:	f7e4 fe0b 	bl	8000618 <__aeabi_dmul>
 801ba02:	4652      	mov	r2, sl
 801ba04:	465b      	mov	r3, fp
 801ba06:	f7e4 fc51 	bl	80002ac <__adddf3>
 801ba0a:	460b      	mov	r3, r1
 801ba0c:	4981      	ldr	r1, [pc, #516]	; (801bc14 <_strtod_l+0xbfc>)
 801ba0e:	4a83      	ldr	r2, [pc, #524]	; (801bc1c <_strtod_l+0xc04>)
 801ba10:	4019      	ands	r1, r3
 801ba12:	4291      	cmp	r1, r2
 801ba14:	4682      	mov	sl, r0
 801ba16:	d95e      	bls.n	801bad6 <_strtod_l+0xabe>
 801ba18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ba1a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801ba1e:	4293      	cmp	r3, r2
 801ba20:	d103      	bne.n	801ba2a <_strtod_l+0xa12>
 801ba22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba24:	3301      	adds	r3, #1
 801ba26:	f43f ad43 	beq.w	801b4b0 <_strtod_l+0x498>
 801ba2a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801bc28 <_strtod_l+0xc10>
 801ba2e:	f04f 3aff 	mov.w	sl, #4294967295
 801ba32:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ba34:	4620      	mov	r0, r4
 801ba36:	f001 fedb 	bl	801d7f0 <_Bfree>
 801ba3a:	9907      	ldr	r1, [sp, #28]
 801ba3c:	4620      	mov	r0, r4
 801ba3e:	f001 fed7 	bl	801d7f0 <_Bfree>
 801ba42:	4631      	mov	r1, r6
 801ba44:	4620      	mov	r0, r4
 801ba46:	f001 fed3 	bl	801d7f0 <_Bfree>
 801ba4a:	4629      	mov	r1, r5
 801ba4c:	4620      	mov	r0, r4
 801ba4e:	f001 fecf 	bl	801d7f0 <_Bfree>
 801ba52:	e613      	b.n	801b67c <_strtod_l+0x664>
 801ba54:	f1ba 0f00 	cmp.w	sl, #0
 801ba58:	d11b      	bne.n	801ba92 <_strtod_l+0xa7a>
 801ba5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ba5e:	b9f3      	cbnz	r3, 801ba9e <_strtod_l+0xa86>
 801ba60:	4b6b      	ldr	r3, [pc, #428]	; (801bc10 <_strtod_l+0xbf8>)
 801ba62:	2200      	movs	r2, #0
 801ba64:	4640      	mov	r0, r8
 801ba66:	4649      	mov	r1, r9
 801ba68:	f7e5 f848 	bl	8000afc <__aeabi_dcmplt>
 801ba6c:	b9d0      	cbnz	r0, 801baa4 <_strtod_l+0xa8c>
 801ba6e:	4640      	mov	r0, r8
 801ba70:	4649      	mov	r1, r9
 801ba72:	4b6b      	ldr	r3, [pc, #428]	; (801bc20 <_strtod_l+0xc08>)
 801ba74:	2200      	movs	r2, #0
 801ba76:	f7e4 fdcf 	bl	8000618 <__aeabi_dmul>
 801ba7a:	4680      	mov	r8, r0
 801ba7c:	4689      	mov	r9, r1
 801ba7e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ba82:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801ba86:	931b      	str	r3, [sp, #108]	; 0x6c
 801ba88:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801ba8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801ba90:	e79b      	b.n	801b9ca <_strtod_l+0x9b2>
 801ba92:	f1ba 0f01 	cmp.w	sl, #1
 801ba96:	d102      	bne.n	801ba9e <_strtod_l+0xa86>
 801ba98:	2f00      	cmp	r7, #0
 801ba9a:	f43f ad7e 	beq.w	801b59a <_strtod_l+0x582>
 801ba9e:	4b61      	ldr	r3, [pc, #388]	; (801bc24 <_strtod_l+0xc0c>)
 801baa0:	2200      	movs	r2, #0
 801baa2:	e78c      	b.n	801b9be <_strtod_l+0x9a6>
 801baa4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801bc20 <_strtod_l+0xc08>
 801baa8:	f04f 0800 	mov.w	r8, #0
 801baac:	e7e7      	b.n	801ba7e <_strtod_l+0xa66>
 801baae:	4b5c      	ldr	r3, [pc, #368]	; (801bc20 <_strtod_l+0xc08>)
 801bab0:	4640      	mov	r0, r8
 801bab2:	4649      	mov	r1, r9
 801bab4:	2200      	movs	r2, #0
 801bab6:	f7e4 fdaf 	bl	8000618 <__aeabi_dmul>
 801baba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801babc:	4680      	mov	r8, r0
 801babe:	4689      	mov	r9, r1
 801bac0:	b933      	cbnz	r3, 801bad0 <_strtod_l+0xab8>
 801bac2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bac6:	9012      	str	r0, [sp, #72]	; 0x48
 801bac8:	9313      	str	r3, [sp, #76]	; 0x4c
 801baca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801bace:	e7dd      	b.n	801ba8c <_strtod_l+0xa74>
 801bad0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801bad4:	e7f9      	b.n	801baca <_strtod_l+0xab2>
 801bad6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801bada:	9b04      	ldr	r3, [sp, #16]
 801badc:	2b00      	cmp	r3, #0
 801bade:	d1a8      	bne.n	801ba32 <_strtod_l+0xa1a>
 801bae0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bae4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bae6:	0d1b      	lsrs	r3, r3, #20
 801bae8:	051b      	lsls	r3, r3, #20
 801baea:	429a      	cmp	r2, r3
 801baec:	d1a1      	bne.n	801ba32 <_strtod_l+0xa1a>
 801baee:	4640      	mov	r0, r8
 801baf0:	4649      	mov	r1, r9
 801baf2:	f7e5 f8f1 	bl	8000cd8 <__aeabi_d2lz>
 801baf6:	f7e4 fd61 	bl	80005bc <__aeabi_l2d>
 801bafa:	4602      	mov	r2, r0
 801bafc:	460b      	mov	r3, r1
 801bafe:	4640      	mov	r0, r8
 801bb00:	4649      	mov	r1, r9
 801bb02:	f7e4 fbd1 	bl	80002a8 <__aeabi_dsub>
 801bb06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bb08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bb0c:	ea43 030a 	orr.w	r3, r3, sl
 801bb10:	4313      	orrs	r3, r2
 801bb12:	4680      	mov	r8, r0
 801bb14:	4689      	mov	r9, r1
 801bb16:	d053      	beq.n	801bbc0 <_strtod_l+0xba8>
 801bb18:	a335      	add	r3, pc, #212	; (adr r3, 801bbf0 <_strtod_l+0xbd8>)
 801bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb1e:	f7e4 ffed 	bl	8000afc <__aeabi_dcmplt>
 801bb22:	2800      	cmp	r0, #0
 801bb24:	f47f acce 	bne.w	801b4c4 <_strtod_l+0x4ac>
 801bb28:	a333      	add	r3, pc, #204	; (adr r3, 801bbf8 <_strtod_l+0xbe0>)
 801bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb2e:	4640      	mov	r0, r8
 801bb30:	4649      	mov	r1, r9
 801bb32:	f7e5 f801 	bl	8000b38 <__aeabi_dcmpgt>
 801bb36:	2800      	cmp	r0, #0
 801bb38:	f43f af7b 	beq.w	801ba32 <_strtod_l+0xa1a>
 801bb3c:	e4c2      	b.n	801b4c4 <_strtod_l+0x4ac>
 801bb3e:	9b04      	ldr	r3, [sp, #16]
 801bb40:	b333      	cbz	r3, 801bb90 <_strtod_l+0xb78>
 801bb42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bb44:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801bb48:	d822      	bhi.n	801bb90 <_strtod_l+0xb78>
 801bb4a:	a32d      	add	r3, pc, #180	; (adr r3, 801bc00 <_strtod_l+0xbe8>)
 801bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb50:	4640      	mov	r0, r8
 801bb52:	4649      	mov	r1, r9
 801bb54:	f7e4 ffdc 	bl	8000b10 <__aeabi_dcmple>
 801bb58:	b1a0      	cbz	r0, 801bb84 <_strtod_l+0xb6c>
 801bb5a:	4649      	mov	r1, r9
 801bb5c:	4640      	mov	r0, r8
 801bb5e:	f7e5 f833 	bl	8000bc8 <__aeabi_d2uiz>
 801bb62:	2801      	cmp	r0, #1
 801bb64:	bf38      	it	cc
 801bb66:	2001      	movcc	r0, #1
 801bb68:	f7e4 fcdc 	bl	8000524 <__aeabi_ui2d>
 801bb6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb6e:	4680      	mov	r8, r0
 801bb70:	4689      	mov	r9, r1
 801bb72:	bb13      	cbnz	r3, 801bbba <_strtod_l+0xba2>
 801bb74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bb78:	9014      	str	r0, [sp, #80]	; 0x50
 801bb7a:	9315      	str	r3, [sp, #84]	; 0x54
 801bb7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801bb80:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801bb84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bb88:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801bb8c:	1a9b      	subs	r3, r3, r2
 801bb8e:	930d      	str	r3, [sp, #52]	; 0x34
 801bb90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bb94:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801bb98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801bb9c:	f002 f954 	bl	801de48 <__ulp>
 801bba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bba4:	ec53 2b10 	vmov	r2, r3, d0
 801bba8:	f7e4 fd36 	bl	8000618 <__aeabi_dmul>
 801bbac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bbb0:	f7e4 fb7c 	bl	80002ac <__adddf3>
 801bbb4:	4682      	mov	sl, r0
 801bbb6:	468b      	mov	fp, r1
 801bbb8:	e78f      	b.n	801bada <_strtod_l+0xac2>
 801bbba:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801bbbe:	e7dd      	b.n	801bb7c <_strtod_l+0xb64>
 801bbc0:	a311      	add	r3, pc, #68	; (adr r3, 801bc08 <_strtod_l+0xbf0>)
 801bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbc6:	f7e4 ff99 	bl	8000afc <__aeabi_dcmplt>
 801bbca:	e7b4      	b.n	801bb36 <_strtod_l+0xb1e>
 801bbcc:	2300      	movs	r3, #0
 801bbce:	930e      	str	r3, [sp, #56]	; 0x38
 801bbd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801bbd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bbd4:	6013      	str	r3, [r2, #0]
 801bbd6:	f7ff ba65 	b.w	801b0a4 <_strtod_l+0x8c>
 801bbda:	2b65      	cmp	r3, #101	; 0x65
 801bbdc:	f43f ab5d 	beq.w	801b29a <_strtod_l+0x282>
 801bbe0:	2b45      	cmp	r3, #69	; 0x45
 801bbe2:	f43f ab5a 	beq.w	801b29a <_strtod_l+0x282>
 801bbe6:	2201      	movs	r2, #1
 801bbe8:	f7ff bb92 	b.w	801b310 <_strtod_l+0x2f8>
 801bbec:	f3af 8000 	nop.w
 801bbf0:	94a03595 	.word	0x94a03595
 801bbf4:	3fdfffff 	.word	0x3fdfffff
 801bbf8:	35afe535 	.word	0x35afe535
 801bbfc:	3fe00000 	.word	0x3fe00000
 801bc00:	ffc00000 	.word	0xffc00000
 801bc04:	41dfffff 	.word	0x41dfffff
 801bc08:	94a03595 	.word	0x94a03595
 801bc0c:	3fcfffff 	.word	0x3fcfffff
 801bc10:	3ff00000 	.word	0x3ff00000
 801bc14:	7ff00000 	.word	0x7ff00000
 801bc18:	7fe00000 	.word	0x7fe00000
 801bc1c:	7c9fffff 	.word	0x7c9fffff
 801bc20:	3fe00000 	.word	0x3fe00000
 801bc24:	bff00000 	.word	0xbff00000
 801bc28:	7fefffff 	.word	0x7fefffff

0801bc2c <_strtod_r>:
 801bc2c:	4b01      	ldr	r3, [pc, #4]	; (801bc34 <_strtod_r+0x8>)
 801bc2e:	f7ff b9f3 	b.w	801b018 <_strtod_l>
 801bc32:	bf00      	nop
 801bc34:	20000240 	.word	0x20000240

0801bc38 <_strtol_l.isra.0>:
 801bc38:	2b01      	cmp	r3, #1
 801bc3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc3e:	d001      	beq.n	801bc44 <_strtol_l.isra.0+0xc>
 801bc40:	2b24      	cmp	r3, #36	; 0x24
 801bc42:	d906      	bls.n	801bc52 <_strtol_l.isra.0+0x1a>
 801bc44:	f7fd ff46 	bl	8019ad4 <__errno>
 801bc48:	2316      	movs	r3, #22
 801bc4a:	6003      	str	r3, [r0, #0]
 801bc4c:	2000      	movs	r0, #0
 801bc4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc52:	4f3a      	ldr	r7, [pc, #232]	; (801bd3c <_strtol_l.isra.0+0x104>)
 801bc54:	468e      	mov	lr, r1
 801bc56:	4676      	mov	r6, lr
 801bc58:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801bc5c:	5de5      	ldrb	r5, [r4, r7]
 801bc5e:	f015 0508 	ands.w	r5, r5, #8
 801bc62:	d1f8      	bne.n	801bc56 <_strtol_l.isra.0+0x1e>
 801bc64:	2c2d      	cmp	r4, #45	; 0x2d
 801bc66:	d134      	bne.n	801bcd2 <_strtol_l.isra.0+0x9a>
 801bc68:	f89e 4000 	ldrb.w	r4, [lr]
 801bc6c:	f04f 0801 	mov.w	r8, #1
 801bc70:	f106 0e02 	add.w	lr, r6, #2
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d05c      	beq.n	801bd32 <_strtol_l.isra.0+0xfa>
 801bc78:	2b10      	cmp	r3, #16
 801bc7a:	d10c      	bne.n	801bc96 <_strtol_l.isra.0+0x5e>
 801bc7c:	2c30      	cmp	r4, #48	; 0x30
 801bc7e:	d10a      	bne.n	801bc96 <_strtol_l.isra.0+0x5e>
 801bc80:	f89e 4000 	ldrb.w	r4, [lr]
 801bc84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801bc88:	2c58      	cmp	r4, #88	; 0x58
 801bc8a:	d14d      	bne.n	801bd28 <_strtol_l.isra.0+0xf0>
 801bc8c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801bc90:	2310      	movs	r3, #16
 801bc92:	f10e 0e02 	add.w	lr, lr, #2
 801bc96:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801bc9a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801bc9e:	2600      	movs	r6, #0
 801bca0:	fbbc f9f3 	udiv	r9, ip, r3
 801bca4:	4635      	mov	r5, r6
 801bca6:	fb03 ca19 	mls	sl, r3, r9, ip
 801bcaa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801bcae:	2f09      	cmp	r7, #9
 801bcb0:	d818      	bhi.n	801bce4 <_strtol_l.isra.0+0xac>
 801bcb2:	463c      	mov	r4, r7
 801bcb4:	42a3      	cmp	r3, r4
 801bcb6:	dd24      	ble.n	801bd02 <_strtol_l.isra.0+0xca>
 801bcb8:	2e00      	cmp	r6, #0
 801bcba:	db1f      	blt.n	801bcfc <_strtol_l.isra.0+0xc4>
 801bcbc:	45a9      	cmp	r9, r5
 801bcbe:	d31d      	bcc.n	801bcfc <_strtol_l.isra.0+0xc4>
 801bcc0:	d101      	bne.n	801bcc6 <_strtol_l.isra.0+0x8e>
 801bcc2:	45a2      	cmp	sl, r4
 801bcc4:	db1a      	blt.n	801bcfc <_strtol_l.isra.0+0xc4>
 801bcc6:	fb05 4503 	mla	r5, r5, r3, r4
 801bcca:	2601      	movs	r6, #1
 801bccc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801bcd0:	e7eb      	b.n	801bcaa <_strtol_l.isra.0+0x72>
 801bcd2:	2c2b      	cmp	r4, #43	; 0x2b
 801bcd4:	bf08      	it	eq
 801bcd6:	f89e 4000 	ldrbeq.w	r4, [lr]
 801bcda:	46a8      	mov	r8, r5
 801bcdc:	bf08      	it	eq
 801bcde:	f106 0e02 	addeq.w	lr, r6, #2
 801bce2:	e7c7      	b.n	801bc74 <_strtol_l.isra.0+0x3c>
 801bce4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801bce8:	2f19      	cmp	r7, #25
 801bcea:	d801      	bhi.n	801bcf0 <_strtol_l.isra.0+0xb8>
 801bcec:	3c37      	subs	r4, #55	; 0x37
 801bcee:	e7e1      	b.n	801bcb4 <_strtol_l.isra.0+0x7c>
 801bcf0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801bcf4:	2f19      	cmp	r7, #25
 801bcf6:	d804      	bhi.n	801bd02 <_strtol_l.isra.0+0xca>
 801bcf8:	3c57      	subs	r4, #87	; 0x57
 801bcfa:	e7db      	b.n	801bcb4 <_strtol_l.isra.0+0x7c>
 801bcfc:	f04f 36ff 	mov.w	r6, #4294967295
 801bd00:	e7e4      	b.n	801bccc <_strtol_l.isra.0+0x94>
 801bd02:	2e00      	cmp	r6, #0
 801bd04:	da05      	bge.n	801bd12 <_strtol_l.isra.0+0xda>
 801bd06:	2322      	movs	r3, #34	; 0x22
 801bd08:	6003      	str	r3, [r0, #0]
 801bd0a:	4665      	mov	r5, ip
 801bd0c:	b942      	cbnz	r2, 801bd20 <_strtol_l.isra.0+0xe8>
 801bd0e:	4628      	mov	r0, r5
 801bd10:	e79d      	b.n	801bc4e <_strtol_l.isra.0+0x16>
 801bd12:	f1b8 0f00 	cmp.w	r8, #0
 801bd16:	d000      	beq.n	801bd1a <_strtol_l.isra.0+0xe2>
 801bd18:	426d      	negs	r5, r5
 801bd1a:	2a00      	cmp	r2, #0
 801bd1c:	d0f7      	beq.n	801bd0e <_strtol_l.isra.0+0xd6>
 801bd1e:	b10e      	cbz	r6, 801bd24 <_strtol_l.isra.0+0xec>
 801bd20:	f10e 31ff 	add.w	r1, lr, #4294967295
 801bd24:	6011      	str	r1, [r2, #0]
 801bd26:	e7f2      	b.n	801bd0e <_strtol_l.isra.0+0xd6>
 801bd28:	2430      	movs	r4, #48	; 0x30
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d1b3      	bne.n	801bc96 <_strtol_l.isra.0+0x5e>
 801bd2e:	2308      	movs	r3, #8
 801bd30:	e7b1      	b.n	801bc96 <_strtol_l.isra.0+0x5e>
 801bd32:	2c30      	cmp	r4, #48	; 0x30
 801bd34:	d0a4      	beq.n	801bc80 <_strtol_l.isra.0+0x48>
 801bd36:	230a      	movs	r3, #10
 801bd38:	e7ad      	b.n	801bc96 <_strtol_l.isra.0+0x5e>
 801bd3a:	bf00      	nop
 801bd3c:	08020d31 	.word	0x08020d31

0801bd40 <_strtol_r>:
 801bd40:	f7ff bf7a 	b.w	801bc38 <_strtol_l.isra.0>

0801bd44 <strtol>:
 801bd44:	4613      	mov	r3, r2
 801bd46:	460a      	mov	r2, r1
 801bd48:	4601      	mov	r1, r0
 801bd4a:	4802      	ldr	r0, [pc, #8]	; (801bd54 <strtol+0x10>)
 801bd4c:	6800      	ldr	r0, [r0, #0]
 801bd4e:	f7ff bf73 	b.w	801bc38 <_strtol_l.isra.0>
 801bd52:	bf00      	nop
 801bd54:	200001d8 	.word	0x200001d8

0801bd58 <_strtoul_l.isra.0>:
 801bd58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd5c:	4e3b      	ldr	r6, [pc, #236]	; (801be4c <_strtoul_l.isra.0+0xf4>)
 801bd5e:	4686      	mov	lr, r0
 801bd60:	468c      	mov	ip, r1
 801bd62:	4660      	mov	r0, ip
 801bd64:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801bd68:	5da5      	ldrb	r5, [r4, r6]
 801bd6a:	f015 0508 	ands.w	r5, r5, #8
 801bd6e:	d1f8      	bne.n	801bd62 <_strtoul_l.isra.0+0xa>
 801bd70:	2c2d      	cmp	r4, #45	; 0x2d
 801bd72:	d134      	bne.n	801bdde <_strtoul_l.isra.0+0x86>
 801bd74:	f89c 4000 	ldrb.w	r4, [ip]
 801bd78:	f04f 0801 	mov.w	r8, #1
 801bd7c:	f100 0c02 	add.w	ip, r0, #2
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d05e      	beq.n	801be42 <_strtoul_l.isra.0+0xea>
 801bd84:	2b10      	cmp	r3, #16
 801bd86:	d10c      	bne.n	801bda2 <_strtoul_l.isra.0+0x4a>
 801bd88:	2c30      	cmp	r4, #48	; 0x30
 801bd8a:	d10a      	bne.n	801bda2 <_strtoul_l.isra.0+0x4a>
 801bd8c:	f89c 0000 	ldrb.w	r0, [ip]
 801bd90:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801bd94:	2858      	cmp	r0, #88	; 0x58
 801bd96:	d14f      	bne.n	801be38 <_strtoul_l.isra.0+0xe0>
 801bd98:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801bd9c:	2310      	movs	r3, #16
 801bd9e:	f10c 0c02 	add.w	ip, ip, #2
 801bda2:	f04f 37ff 	mov.w	r7, #4294967295
 801bda6:	2500      	movs	r5, #0
 801bda8:	fbb7 f7f3 	udiv	r7, r7, r3
 801bdac:	fb03 f907 	mul.w	r9, r3, r7
 801bdb0:	ea6f 0909 	mvn.w	r9, r9
 801bdb4:	4628      	mov	r0, r5
 801bdb6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801bdba:	2e09      	cmp	r6, #9
 801bdbc:	d818      	bhi.n	801bdf0 <_strtoul_l.isra.0+0x98>
 801bdbe:	4634      	mov	r4, r6
 801bdc0:	42a3      	cmp	r3, r4
 801bdc2:	dd24      	ble.n	801be0e <_strtoul_l.isra.0+0xb6>
 801bdc4:	2d00      	cmp	r5, #0
 801bdc6:	db1f      	blt.n	801be08 <_strtoul_l.isra.0+0xb0>
 801bdc8:	4287      	cmp	r7, r0
 801bdca:	d31d      	bcc.n	801be08 <_strtoul_l.isra.0+0xb0>
 801bdcc:	d101      	bne.n	801bdd2 <_strtoul_l.isra.0+0x7a>
 801bdce:	45a1      	cmp	r9, r4
 801bdd0:	db1a      	blt.n	801be08 <_strtoul_l.isra.0+0xb0>
 801bdd2:	fb00 4003 	mla	r0, r0, r3, r4
 801bdd6:	2501      	movs	r5, #1
 801bdd8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801bddc:	e7eb      	b.n	801bdb6 <_strtoul_l.isra.0+0x5e>
 801bdde:	2c2b      	cmp	r4, #43	; 0x2b
 801bde0:	bf08      	it	eq
 801bde2:	f89c 4000 	ldrbeq.w	r4, [ip]
 801bde6:	46a8      	mov	r8, r5
 801bde8:	bf08      	it	eq
 801bdea:	f100 0c02 	addeq.w	ip, r0, #2
 801bdee:	e7c7      	b.n	801bd80 <_strtoul_l.isra.0+0x28>
 801bdf0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801bdf4:	2e19      	cmp	r6, #25
 801bdf6:	d801      	bhi.n	801bdfc <_strtoul_l.isra.0+0xa4>
 801bdf8:	3c37      	subs	r4, #55	; 0x37
 801bdfa:	e7e1      	b.n	801bdc0 <_strtoul_l.isra.0+0x68>
 801bdfc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801be00:	2e19      	cmp	r6, #25
 801be02:	d804      	bhi.n	801be0e <_strtoul_l.isra.0+0xb6>
 801be04:	3c57      	subs	r4, #87	; 0x57
 801be06:	e7db      	b.n	801bdc0 <_strtoul_l.isra.0+0x68>
 801be08:	f04f 35ff 	mov.w	r5, #4294967295
 801be0c:	e7e4      	b.n	801bdd8 <_strtoul_l.isra.0+0x80>
 801be0e:	2d00      	cmp	r5, #0
 801be10:	da07      	bge.n	801be22 <_strtoul_l.isra.0+0xca>
 801be12:	2322      	movs	r3, #34	; 0x22
 801be14:	f8ce 3000 	str.w	r3, [lr]
 801be18:	f04f 30ff 	mov.w	r0, #4294967295
 801be1c:	b942      	cbnz	r2, 801be30 <_strtoul_l.isra.0+0xd8>
 801be1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be22:	f1b8 0f00 	cmp.w	r8, #0
 801be26:	d000      	beq.n	801be2a <_strtoul_l.isra.0+0xd2>
 801be28:	4240      	negs	r0, r0
 801be2a:	2a00      	cmp	r2, #0
 801be2c:	d0f7      	beq.n	801be1e <_strtoul_l.isra.0+0xc6>
 801be2e:	b10d      	cbz	r5, 801be34 <_strtoul_l.isra.0+0xdc>
 801be30:	f10c 31ff 	add.w	r1, ip, #4294967295
 801be34:	6011      	str	r1, [r2, #0]
 801be36:	e7f2      	b.n	801be1e <_strtoul_l.isra.0+0xc6>
 801be38:	2430      	movs	r4, #48	; 0x30
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	d1b1      	bne.n	801bda2 <_strtoul_l.isra.0+0x4a>
 801be3e:	2308      	movs	r3, #8
 801be40:	e7af      	b.n	801bda2 <_strtoul_l.isra.0+0x4a>
 801be42:	2c30      	cmp	r4, #48	; 0x30
 801be44:	d0a2      	beq.n	801bd8c <_strtoul_l.isra.0+0x34>
 801be46:	230a      	movs	r3, #10
 801be48:	e7ab      	b.n	801bda2 <_strtoul_l.isra.0+0x4a>
 801be4a:	bf00      	nop
 801be4c:	08020d31 	.word	0x08020d31

0801be50 <_strtoul_r>:
 801be50:	f7ff bf82 	b.w	801bd58 <_strtoul_l.isra.0>

0801be54 <_vsniprintf_r>:
 801be54:	b530      	push	{r4, r5, lr}
 801be56:	1e14      	subs	r4, r2, #0
 801be58:	4605      	mov	r5, r0
 801be5a:	b09b      	sub	sp, #108	; 0x6c
 801be5c:	4618      	mov	r0, r3
 801be5e:	da05      	bge.n	801be6c <_vsniprintf_r+0x18>
 801be60:	238b      	movs	r3, #139	; 0x8b
 801be62:	602b      	str	r3, [r5, #0]
 801be64:	f04f 30ff 	mov.w	r0, #4294967295
 801be68:	b01b      	add	sp, #108	; 0x6c
 801be6a:	bd30      	pop	{r4, r5, pc}
 801be6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801be70:	f8ad 300c 	strh.w	r3, [sp, #12]
 801be74:	bf14      	ite	ne
 801be76:	f104 33ff 	addne.w	r3, r4, #4294967295
 801be7a:	4623      	moveq	r3, r4
 801be7c:	9302      	str	r3, [sp, #8]
 801be7e:	9305      	str	r3, [sp, #20]
 801be80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801be84:	9100      	str	r1, [sp, #0]
 801be86:	9104      	str	r1, [sp, #16]
 801be88:	f8ad 300e 	strh.w	r3, [sp, #14]
 801be8c:	4602      	mov	r2, r0
 801be8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801be90:	4669      	mov	r1, sp
 801be92:	4628      	mov	r0, r5
 801be94:	f002 f9b8 	bl	801e208 <_svfiprintf_r>
 801be98:	1c43      	adds	r3, r0, #1
 801be9a:	bfbc      	itt	lt
 801be9c:	238b      	movlt	r3, #139	; 0x8b
 801be9e:	602b      	strlt	r3, [r5, #0]
 801bea0:	2c00      	cmp	r4, #0
 801bea2:	d0e1      	beq.n	801be68 <_vsniprintf_r+0x14>
 801bea4:	9b00      	ldr	r3, [sp, #0]
 801bea6:	2200      	movs	r2, #0
 801bea8:	701a      	strb	r2, [r3, #0]
 801beaa:	e7dd      	b.n	801be68 <_vsniprintf_r+0x14>

0801beac <vsniprintf>:
 801beac:	b507      	push	{r0, r1, r2, lr}
 801beae:	9300      	str	r3, [sp, #0]
 801beb0:	4613      	mov	r3, r2
 801beb2:	460a      	mov	r2, r1
 801beb4:	4601      	mov	r1, r0
 801beb6:	4803      	ldr	r0, [pc, #12]	; (801bec4 <vsniprintf+0x18>)
 801beb8:	6800      	ldr	r0, [r0, #0]
 801beba:	f7ff ffcb 	bl	801be54 <_vsniprintf_r>
 801bebe:	b003      	add	sp, #12
 801bec0:	f85d fb04 	ldr.w	pc, [sp], #4
 801bec4:	200001d8 	.word	0x200001d8

0801bec8 <__swbuf_r>:
 801bec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801beca:	460e      	mov	r6, r1
 801becc:	4614      	mov	r4, r2
 801bece:	4605      	mov	r5, r0
 801bed0:	b118      	cbz	r0, 801beda <__swbuf_r+0x12>
 801bed2:	6983      	ldr	r3, [r0, #24]
 801bed4:	b90b      	cbnz	r3, 801beda <__swbuf_r+0x12>
 801bed6:	f7fd fe5b 	bl	8019b90 <__sinit>
 801beda:	4b21      	ldr	r3, [pc, #132]	; (801bf60 <__swbuf_r+0x98>)
 801bedc:	429c      	cmp	r4, r3
 801bede:	d12b      	bne.n	801bf38 <__swbuf_r+0x70>
 801bee0:	686c      	ldr	r4, [r5, #4]
 801bee2:	69a3      	ldr	r3, [r4, #24]
 801bee4:	60a3      	str	r3, [r4, #8]
 801bee6:	89a3      	ldrh	r3, [r4, #12]
 801bee8:	071a      	lsls	r2, r3, #28
 801beea:	d52f      	bpl.n	801bf4c <__swbuf_r+0x84>
 801beec:	6923      	ldr	r3, [r4, #16]
 801beee:	b36b      	cbz	r3, 801bf4c <__swbuf_r+0x84>
 801bef0:	6923      	ldr	r3, [r4, #16]
 801bef2:	6820      	ldr	r0, [r4, #0]
 801bef4:	1ac0      	subs	r0, r0, r3
 801bef6:	6963      	ldr	r3, [r4, #20]
 801bef8:	b2f6      	uxtb	r6, r6
 801befa:	4283      	cmp	r3, r0
 801befc:	4637      	mov	r7, r6
 801befe:	dc04      	bgt.n	801bf0a <__swbuf_r+0x42>
 801bf00:	4621      	mov	r1, r4
 801bf02:	4628      	mov	r0, r5
 801bf04:	f000 ffde 	bl	801cec4 <_fflush_r>
 801bf08:	bb30      	cbnz	r0, 801bf58 <__swbuf_r+0x90>
 801bf0a:	68a3      	ldr	r3, [r4, #8]
 801bf0c:	3b01      	subs	r3, #1
 801bf0e:	60a3      	str	r3, [r4, #8]
 801bf10:	6823      	ldr	r3, [r4, #0]
 801bf12:	1c5a      	adds	r2, r3, #1
 801bf14:	6022      	str	r2, [r4, #0]
 801bf16:	701e      	strb	r6, [r3, #0]
 801bf18:	6963      	ldr	r3, [r4, #20]
 801bf1a:	3001      	adds	r0, #1
 801bf1c:	4283      	cmp	r3, r0
 801bf1e:	d004      	beq.n	801bf2a <__swbuf_r+0x62>
 801bf20:	89a3      	ldrh	r3, [r4, #12]
 801bf22:	07db      	lsls	r3, r3, #31
 801bf24:	d506      	bpl.n	801bf34 <__swbuf_r+0x6c>
 801bf26:	2e0a      	cmp	r6, #10
 801bf28:	d104      	bne.n	801bf34 <__swbuf_r+0x6c>
 801bf2a:	4621      	mov	r1, r4
 801bf2c:	4628      	mov	r0, r5
 801bf2e:	f000 ffc9 	bl	801cec4 <_fflush_r>
 801bf32:	b988      	cbnz	r0, 801bf58 <__swbuf_r+0x90>
 801bf34:	4638      	mov	r0, r7
 801bf36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf38:	4b0a      	ldr	r3, [pc, #40]	; (801bf64 <__swbuf_r+0x9c>)
 801bf3a:	429c      	cmp	r4, r3
 801bf3c:	d101      	bne.n	801bf42 <__swbuf_r+0x7a>
 801bf3e:	68ac      	ldr	r4, [r5, #8]
 801bf40:	e7cf      	b.n	801bee2 <__swbuf_r+0x1a>
 801bf42:	4b09      	ldr	r3, [pc, #36]	; (801bf68 <__swbuf_r+0xa0>)
 801bf44:	429c      	cmp	r4, r3
 801bf46:	bf08      	it	eq
 801bf48:	68ec      	ldreq	r4, [r5, #12]
 801bf4a:	e7ca      	b.n	801bee2 <__swbuf_r+0x1a>
 801bf4c:	4621      	mov	r1, r4
 801bf4e:	4628      	mov	r0, r5
 801bf50:	f000 f81e 	bl	801bf90 <__swsetup_r>
 801bf54:	2800      	cmp	r0, #0
 801bf56:	d0cb      	beq.n	801bef0 <__swbuf_r+0x28>
 801bf58:	f04f 37ff 	mov.w	r7, #4294967295
 801bf5c:	e7ea      	b.n	801bf34 <__swbuf_r+0x6c>
 801bf5e:	bf00      	nop
 801bf60:	08020e54 	.word	0x08020e54
 801bf64:	08020e74 	.word	0x08020e74
 801bf68:	08020e34 	.word	0x08020e34

0801bf6c <_write_r>:
 801bf6c:	b538      	push	{r3, r4, r5, lr}
 801bf6e:	4d07      	ldr	r5, [pc, #28]	; (801bf8c <_write_r+0x20>)
 801bf70:	4604      	mov	r4, r0
 801bf72:	4608      	mov	r0, r1
 801bf74:	4611      	mov	r1, r2
 801bf76:	2200      	movs	r2, #0
 801bf78:	602a      	str	r2, [r5, #0]
 801bf7a:	461a      	mov	r2, r3
 801bf7c:	f7e7 f925 	bl	80031ca <_write>
 801bf80:	1c43      	adds	r3, r0, #1
 801bf82:	d102      	bne.n	801bf8a <_write_r+0x1e>
 801bf84:	682b      	ldr	r3, [r5, #0]
 801bf86:	b103      	cbz	r3, 801bf8a <_write_r+0x1e>
 801bf88:	6023      	str	r3, [r4, #0]
 801bf8a:	bd38      	pop	{r3, r4, r5, pc}
 801bf8c:	20008f98 	.word	0x20008f98

0801bf90 <__swsetup_r>:
 801bf90:	4b32      	ldr	r3, [pc, #200]	; (801c05c <__swsetup_r+0xcc>)
 801bf92:	b570      	push	{r4, r5, r6, lr}
 801bf94:	681d      	ldr	r5, [r3, #0]
 801bf96:	4606      	mov	r6, r0
 801bf98:	460c      	mov	r4, r1
 801bf9a:	b125      	cbz	r5, 801bfa6 <__swsetup_r+0x16>
 801bf9c:	69ab      	ldr	r3, [r5, #24]
 801bf9e:	b913      	cbnz	r3, 801bfa6 <__swsetup_r+0x16>
 801bfa0:	4628      	mov	r0, r5
 801bfa2:	f7fd fdf5 	bl	8019b90 <__sinit>
 801bfa6:	4b2e      	ldr	r3, [pc, #184]	; (801c060 <__swsetup_r+0xd0>)
 801bfa8:	429c      	cmp	r4, r3
 801bfaa:	d10f      	bne.n	801bfcc <__swsetup_r+0x3c>
 801bfac:	686c      	ldr	r4, [r5, #4]
 801bfae:	89a3      	ldrh	r3, [r4, #12]
 801bfb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bfb4:	0719      	lsls	r1, r3, #28
 801bfb6:	d42c      	bmi.n	801c012 <__swsetup_r+0x82>
 801bfb8:	06dd      	lsls	r5, r3, #27
 801bfba:	d411      	bmi.n	801bfe0 <__swsetup_r+0x50>
 801bfbc:	2309      	movs	r3, #9
 801bfbe:	6033      	str	r3, [r6, #0]
 801bfc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bfc4:	81a3      	strh	r3, [r4, #12]
 801bfc6:	f04f 30ff 	mov.w	r0, #4294967295
 801bfca:	e03e      	b.n	801c04a <__swsetup_r+0xba>
 801bfcc:	4b25      	ldr	r3, [pc, #148]	; (801c064 <__swsetup_r+0xd4>)
 801bfce:	429c      	cmp	r4, r3
 801bfd0:	d101      	bne.n	801bfd6 <__swsetup_r+0x46>
 801bfd2:	68ac      	ldr	r4, [r5, #8]
 801bfd4:	e7eb      	b.n	801bfae <__swsetup_r+0x1e>
 801bfd6:	4b24      	ldr	r3, [pc, #144]	; (801c068 <__swsetup_r+0xd8>)
 801bfd8:	429c      	cmp	r4, r3
 801bfda:	bf08      	it	eq
 801bfdc:	68ec      	ldreq	r4, [r5, #12]
 801bfde:	e7e6      	b.n	801bfae <__swsetup_r+0x1e>
 801bfe0:	0758      	lsls	r0, r3, #29
 801bfe2:	d512      	bpl.n	801c00a <__swsetup_r+0x7a>
 801bfe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bfe6:	b141      	cbz	r1, 801bffa <__swsetup_r+0x6a>
 801bfe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bfec:	4299      	cmp	r1, r3
 801bfee:	d002      	beq.n	801bff6 <__swsetup_r+0x66>
 801bff0:	4630      	mov	r0, r6
 801bff2:	f7fd fed3 	bl	8019d9c <_free_r>
 801bff6:	2300      	movs	r3, #0
 801bff8:	6363      	str	r3, [r4, #52]	; 0x34
 801bffa:	89a3      	ldrh	r3, [r4, #12]
 801bffc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c000:	81a3      	strh	r3, [r4, #12]
 801c002:	2300      	movs	r3, #0
 801c004:	6063      	str	r3, [r4, #4]
 801c006:	6923      	ldr	r3, [r4, #16]
 801c008:	6023      	str	r3, [r4, #0]
 801c00a:	89a3      	ldrh	r3, [r4, #12]
 801c00c:	f043 0308 	orr.w	r3, r3, #8
 801c010:	81a3      	strh	r3, [r4, #12]
 801c012:	6923      	ldr	r3, [r4, #16]
 801c014:	b94b      	cbnz	r3, 801c02a <__swsetup_r+0x9a>
 801c016:	89a3      	ldrh	r3, [r4, #12]
 801c018:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c01c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c020:	d003      	beq.n	801c02a <__swsetup_r+0x9a>
 801c022:	4621      	mov	r1, r4
 801c024:	4630      	mov	r0, r6
 801c026:	f001 fb45 	bl	801d6b4 <__smakebuf_r>
 801c02a:	89a0      	ldrh	r0, [r4, #12]
 801c02c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c030:	f010 0301 	ands.w	r3, r0, #1
 801c034:	d00a      	beq.n	801c04c <__swsetup_r+0xbc>
 801c036:	2300      	movs	r3, #0
 801c038:	60a3      	str	r3, [r4, #8]
 801c03a:	6963      	ldr	r3, [r4, #20]
 801c03c:	425b      	negs	r3, r3
 801c03e:	61a3      	str	r3, [r4, #24]
 801c040:	6923      	ldr	r3, [r4, #16]
 801c042:	b943      	cbnz	r3, 801c056 <__swsetup_r+0xc6>
 801c044:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c048:	d1ba      	bne.n	801bfc0 <__swsetup_r+0x30>
 801c04a:	bd70      	pop	{r4, r5, r6, pc}
 801c04c:	0781      	lsls	r1, r0, #30
 801c04e:	bf58      	it	pl
 801c050:	6963      	ldrpl	r3, [r4, #20]
 801c052:	60a3      	str	r3, [r4, #8]
 801c054:	e7f4      	b.n	801c040 <__swsetup_r+0xb0>
 801c056:	2000      	movs	r0, #0
 801c058:	e7f7      	b.n	801c04a <__swsetup_r+0xba>
 801c05a:	bf00      	nop
 801c05c:	200001d8 	.word	0x200001d8
 801c060:	08020e54 	.word	0x08020e54
 801c064:	08020e74 	.word	0x08020e74
 801c068:	08020e34 	.word	0x08020e34

0801c06c <__assert_func>:
 801c06c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c06e:	4614      	mov	r4, r2
 801c070:	461a      	mov	r2, r3
 801c072:	4b09      	ldr	r3, [pc, #36]	; (801c098 <__assert_func+0x2c>)
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	4605      	mov	r5, r0
 801c078:	68d8      	ldr	r0, [r3, #12]
 801c07a:	b14c      	cbz	r4, 801c090 <__assert_func+0x24>
 801c07c:	4b07      	ldr	r3, [pc, #28]	; (801c09c <__assert_func+0x30>)
 801c07e:	9100      	str	r1, [sp, #0]
 801c080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c084:	4906      	ldr	r1, [pc, #24]	; (801c0a0 <__assert_func+0x34>)
 801c086:	462b      	mov	r3, r5
 801c088:	f000 ff58 	bl	801cf3c <fiprintf>
 801c08c:	f7fd fd1a 	bl	8019ac4 <abort>
 801c090:	4b04      	ldr	r3, [pc, #16]	; (801c0a4 <__assert_func+0x38>)
 801c092:	461c      	mov	r4, r3
 801c094:	e7f3      	b.n	801c07e <__assert_func+0x12>
 801c096:	bf00      	nop
 801c098:	200001d8 	.word	0x200001d8
 801c09c:	08020f20 	.word	0x08020f20
 801c0a0:	08020f2d 	.word	0x08020f2d
 801c0a4:	08020f5b 	.word	0x08020f5b

0801c0a8 <_close_r>:
 801c0a8:	b538      	push	{r3, r4, r5, lr}
 801c0aa:	4d06      	ldr	r5, [pc, #24]	; (801c0c4 <_close_r+0x1c>)
 801c0ac:	2300      	movs	r3, #0
 801c0ae:	4604      	mov	r4, r0
 801c0b0:	4608      	mov	r0, r1
 801c0b2:	602b      	str	r3, [r5, #0]
 801c0b4:	f7e7 f8a5 	bl	8003202 <_close>
 801c0b8:	1c43      	adds	r3, r0, #1
 801c0ba:	d102      	bne.n	801c0c2 <_close_r+0x1a>
 801c0bc:	682b      	ldr	r3, [r5, #0]
 801c0be:	b103      	cbz	r3, 801c0c2 <_close_r+0x1a>
 801c0c0:	6023      	str	r3, [r4, #0]
 801c0c2:	bd38      	pop	{r3, r4, r5, pc}
 801c0c4:	20008f98 	.word	0x20008f98

0801c0c8 <quorem>:
 801c0c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0cc:	6903      	ldr	r3, [r0, #16]
 801c0ce:	690c      	ldr	r4, [r1, #16]
 801c0d0:	42a3      	cmp	r3, r4
 801c0d2:	4607      	mov	r7, r0
 801c0d4:	f2c0 8081 	blt.w	801c1da <quorem+0x112>
 801c0d8:	3c01      	subs	r4, #1
 801c0da:	f101 0814 	add.w	r8, r1, #20
 801c0de:	f100 0514 	add.w	r5, r0, #20
 801c0e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c0e6:	9301      	str	r3, [sp, #4]
 801c0e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c0ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c0f0:	3301      	adds	r3, #1
 801c0f2:	429a      	cmp	r2, r3
 801c0f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c0f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c0fc:	fbb2 f6f3 	udiv	r6, r2, r3
 801c100:	d331      	bcc.n	801c166 <quorem+0x9e>
 801c102:	f04f 0e00 	mov.w	lr, #0
 801c106:	4640      	mov	r0, r8
 801c108:	46ac      	mov	ip, r5
 801c10a:	46f2      	mov	sl, lr
 801c10c:	f850 2b04 	ldr.w	r2, [r0], #4
 801c110:	b293      	uxth	r3, r2
 801c112:	fb06 e303 	mla	r3, r6, r3, lr
 801c116:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c11a:	b29b      	uxth	r3, r3
 801c11c:	ebaa 0303 	sub.w	r3, sl, r3
 801c120:	0c12      	lsrs	r2, r2, #16
 801c122:	f8dc a000 	ldr.w	sl, [ip]
 801c126:	fb06 e202 	mla	r2, r6, r2, lr
 801c12a:	fa13 f38a 	uxtah	r3, r3, sl
 801c12e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c132:	fa1f fa82 	uxth.w	sl, r2
 801c136:	f8dc 2000 	ldr.w	r2, [ip]
 801c13a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801c13e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c142:	b29b      	uxth	r3, r3
 801c144:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c148:	4581      	cmp	r9, r0
 801c14a:	f84c 3b04 	str.w	r3, [ip], #4
 801c14e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c152:	d2db      	bcs.n	801c10c <quorem+0x44>
 801c154:	f855 300b 	ldr.w	r3, [r5, fp]
 801c158:	b92b      	cbnz	r3, 801c166 <quorem+0x9e>
 801c15a:	9b01      	ldr	r3, [sp, #4]
 801c15c:	3b04      	subs	r3, #4
 801c15e:	429d      	cmp	r5, r3
 801c160:	461a      	mov	r2, r3
 801c162:	d32e      	bcc.n	801c1c2 <quorem+0xfa>
 801c164:	613c      	str	r4, [r7, #16]
 801c166:	4638      	mov	r0, r7
 801c168:	f001 fdca 	bl	801dd00 <__mcmp>
 801c16c:	2800      	cmp	r0, #0
 801c16e:	db24      	blt.n	801c1ba <quorem+0xf2>
 801c170:	3601      	adds	r6, #1
 801c172:	4628      	mov	r0, r5
 801c174:	f04f 0c00 	mov.w	ip, #0
 801c178:	f858 2b04 	ldr.w	r2, [r8], #4
 801c17c:	f8d0 e000 	ldr.w	lr, [r0]
 801c180:	b293      	uxth	r3, r2
 801c182:	ebac 0303 	sub.w	r3, ip, r3
 801c186:	0c12      	lsrs	r2, r2, #16
 801c188:	fa13 f38e 	uxtah	r3, r3, lr
 801c18c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c190:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c194:	b29b      	uxth	r3, r3
 801c196:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c19a:	45c1      	cmp	r9, r8
 801c19c:	f840 3b04 	str.w	r3, [r0], #4
 801c1a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c1a4:	d2e8      	bcs.n	801c178 <quorem+0xb0>
 801c1a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c1aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c1ae:	b922      	cbnz	r2, 801c1ba <quorem+0xf2>
 801c1b0:	3b04      	subs	r3, #4
 801c1b2:	429d      	cmp	r5, r3
 801c1b4:	461a      	mov	r2, r3
 801c1b6:	d30a      	bcc.n	801c1ce <quorem+0x106>
 801c1b8:	613c      	str	r4, [r7, #16]
 801c1ba:	4630      	mov	r0, r6
 801c1bc:	b003      	add	sp, #12
 801c1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1c2:	6812      	ldr	r2, [r2, #0]
 801c1c4:	3b04      	subs	r3, #4
 801c1c6:	2a00      	cmp	r2, #0
 801c1c8:	d1cc      	bne.n	801c164 <quorem+0x9c>
 801c1ca:	3c01      	subs	r4, #1
 801c1cc:	e7c7      	b.n	801c15e <quorem+0x96>
 801c1ce:	6812      	ldr	r2, [r2, #0]
 801c1d0:	3b04      	subs	r3, #4
 801c1d2:	2a00      	cmp	r2, #0
 801c1d4:	d1f0      	bne.n	801c1b8 <quorem+0xf0>
 801c1d6:	3c01      	subs	r4, #1
 801c1d8:	e7eb      	b.n	801c1b2 <quorem+0xea>
 801c1da:	2000      	movs	r0, #0
 801c1dc:	e7ee      	b.n	801c1bc <quorem+0xf4>
	...

0801c1e0 <_dtoa_r>:
 801c1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1e4:	ed2d 8b02 	vpush	{d8}
 801c1e8:	ec57 6b10 	vmov	r6, r7, d0
 801c1ec:	b095      	sub	sp, #84	; 0x54
 801c1ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c1f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c1f4:	9105      	str	r1, [sp, #20]
 801c1f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801c1fa:	4604      	mov	r4, r0
 801c1fc:	9209      	str	r2, [sp, #36]	; 0x24
 801c1fe:	930f      	str	r3, [sp, #60]	; 0x3c
 801c200:	b975      	cbnz	r5, 801c220 <_dtoa_r+0x40>
 801c202:	2010      	movs	r0, #16
 801c204:	f7fd fd8a 	bl	8019d1c <malloc>
 801c208:	4602      	mov	r2, r0
 801c20a:	6260      	str	r0, [r4, #36]	; 0x24
 801c20c:	b920      	cbnz	r0, 801c218 <_dtoa_r+0x38>
 801c20e:	4bb2      	ldr	r3, [pc, #712]	; (801c4d8 <_dtoa_r+0x2f8>)
 801c210:	21ea      	movs	r1, #234	; 0xea
 801c212:	48b2      	ldr	r0, [pc, #712]	; (801c4dc <_dtoa_r+0x2fc>)
 801c214:	f7ff ff2a 	bl	801c06c <__assert_func>
 801c218:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c21c:	6005      	str	r5, [r0, #0]
 801c21e:	60c5      	str	r5, [r0, #12]
 801c220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c222:	6819      	ldr	r1, [r3, #0]
 801c224:	b151      	cbz	r1, 801c23c <_dtoa_r+0x5c>
 801c226:	685a      	ldr	r2, [r3, #4]
 801c228:	604a      	str	r2, [r1, #4]
 801c22a:	2301      	movs	r3, #1
 801c22c:	4093      	lsls	r3, r2
 801c22e:	608b      	str	r3, [r1, #8]
 801c230:	4620      	mov	r0, r4
 801c232:	f001 fadd 	bl	801d7f0 <_Bfree>
 801c236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c238:	2200      	movs	r2, #0
 801c23a:	601a      	str	r2, [r3, #0]
 801c23c:	1e3b      	subs	r3, r7, #0
 801c23e:	bfb9      	ittee	lt
 801c240:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c244:	9303      	strlt	r3, [sp, #12]
 801c246:	2300      	movge	r3, #0
 801c248:	f8c8 3000 	strge.w	r3, [r8]
 801c24c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801c250:	4ba3      	ldr	r3, [pc, #652]	; (801c4e0 <_dtoa_r+0x300>)
 801c252:	bfbc      	itt	lt
 801c254:	2201      	movlt	r2, #1
 801c256:	f8c8 2000 	strlt.w	r2, [r8]
 801c25a:	ea33 0309 	bics.w	r3, r3, r9
 801c25e:	d11b      	bne.n	801c298 <_dtoa_r+0xb8>
 801c260:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c262:	f242 730f 	movw	r3, #9999	; 0x270f
 801c266:	6013      	str	r3, [r2, #0]
 801c268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c26c:	4333      	orrs	r3, r6
 801c26e:	f000 857a 	beq.w	801cd66 <_dtoa_r+0xb86>
 801c272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c274:	b963      	cbnz	r3, 801c290 <_dtoa_r+0xb0>
 801c276:	4b9b      	ldr	r3, [pc, #620]	; (801c4e4 <_dtoa_r+0x304>)
 801c278:	e024      	b.n	801c2c4 <_dtoa_r+0xe4>
 801c27a:	4b9b      	ldr	r3, [pc, #620]	; (801c4e8 <_dtoa_r+0x308>)
 801c27c:	9300      	str	r3, [sp, #0]
 801c27e:	3308      	adds	r3, #8
 801c280:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c282:	6013      	str	r3, [r2, #0]
 801c284:	9800      	ldr	r0, [sp, #0]
 801c286:	b015      	add	sp, #84	; 0x54
 801c288:	ecbd 8b02 	vpop	{d8}
 801c28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c290:	4b94      	ldr	r3, [pc, #592]	; (801c4e4 <_dtoa_r+0x304>)
 801c292:	9300      	str	r3, [sp, #0]
 801c294:	3303      	adds	r3, #3
 801c296:	e7f3      	b.n	801c280 <_dtoa_r+0xa0>
 801c298:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c29c:	2200      	movs	r2, #0
 801c29e:	ec51 0b17 	vmov	r0, r1, d7
 801c2a2:	2300      	movs	r3, #0
 801c2a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801c2a8:	f7e4 fc1e 	bl	8000ae8 <__aeabi_dcmpeq>
 801c2ac:	4680      	mov	r8, r0
 801c2ae:	b158      	cbz	r0, 801c2c8 <_dtoa_r+0xe8>
 801c2b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c2b2:	2301      	movs	r3, #1
 801c2b4:	6013      	str	r3, [r2, #0]
 801c2b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	f000 8551 	beq.w	801cd60 <_dtoa_r+0xb80>
 801c2be:	488b      	ldr	r0, [pc, #556]	; (801c4ec <_dtoa_r+0x30c>)
 801c2c0:	6018      	str	r0, [r3, #0]
 801c2c2:	1e43      	subs	r3, r0, #1
 801c2c4:	9300      	str	r3, [sp, #0]
 801c2c6:	e7dd      	b.n	801c284 <_dtoa_r+0xa4>
 801c2c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c2cc:	aa12      	add	r2, sp, #72	; 0x48
 801c2ce:	a913      	add	r1, sp, #76	; 0x4c
 801c2d0:	4620      	mov	r0, r4
 801c2d2:	f001 fe35 	bl	801df40 <__d2b>
 801c2d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c2da:	4683      	mov	fp, r0
 801c2dc:	2d00      	cmp	r5, #0
 801c2de:	d07c      	beq.n	801c3da <_dtoa_r+0x1fa>
 801c2e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c2e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801c2e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c2ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801c2ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801c2f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801c2f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c2fa:	4b7d      	ldr	r3, [pc, #500]	; (801c4f0 <_dtoa_r+0x310>)
 801c2fc:	2200      	movs	r2, #0
 801c2fe:	4630      	mov	r0, r6
 801c300:	4639      	mov	r1, r7
 801c302:	f7e3 ffd1 	bl	80002a8 <__aeabi_dsub>
 801c306:	a36e      	add	r3, pc, #440	; (adr r3, 801c4c0 <_dtoa_r+0x2e0>)
 801c308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c30c:	f7e4 f984 	bl	8000618 <__aeabi_dmul>
 801c310:	a36d      	add	r3, pc, #436	; (adr r3, 801c4c8 <_dtoa_r+0x2e8>)
 801c312:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c316:	f7e3 ffc9 	bl	80002ac <__adddf3>
 801c31a:	4606      	mov	r6, r0
 801c31c:	4628      	mov	r0, r5
 801c31e:	460f      	mov	r7, r1
 801c320:	f7e4 f910 	bl	8000544 <__aeabi_i2d>
 801c324:	a36a      	add	r3, pc, #424	; (adr r3, 801c4d0 <_dtoa_r+0x2f0>)
 801c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c32a:	f7e4 f975 	bl	8000618 <__aeabi_dmul>
 801c32e:	4602      	mov	r2, r0
 801c330:	460b      	mov	r3, r1
 801c332:	4630      	mov	r0, r6
 801c334:	4639      	mov	r1, r7
 801c336:	f7e3 ffb9 	bl	80002ac <__adddf3>
 801c33a:	4606      	mov	r6, r0
 801c33c:	460f      	mov	r7, r1
 801c33e:	f7e4 fc1b 	bl	8000b78 <__aeabi_d2iz>
 801c342:	2200      	movs	r2, #0
 801c344:	4682      	mov	sl, r0
 801c346:	2300      	movs	r3, #0
 801c348:	4630      	mov	r0, r6
 801c34a:	4639      	mov	r1, r7
 801c34c:	f7e4 fbd6 	bl	8000afc <__aeabi_dcmplt>
 801c350:	b148      	cbz	r0, 801c366 <_dtoa_r+0x186>
 801c352:	4650      	mov	r0, sl
 801c354:	f7e4 f8f6 	bl	8000544 <__aeabi_i2d>
 801c358:	4632      	mov	r2, r6
 801c35a:	463b      	mov	r3, r7
 801c35c:	f7e4 fbc4 	bl	8000ae8 <__aeabi_dcmpeq>
 801c360:	b908      	cbnz	r0, 801c366 <_dtoa_r+0x186>
 801c362:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c366:	f1ba 0f16 	cmp.w	sl, #22
 801c36a:	d854      	bhi.n	801c416 <_dtoa_r+0x236>
 801c36c:	4b61      	ldr	r3, [pc, #388]	; (801c4f4 <_dtoa_r+0x314>)
 801c36e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c372:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c37a:	f7e4 fbbf 	bl	8000afc <__aeabi_dcmplt>
 801c37e:	2800      	cmp	r0, #0
 801c380:	d04b      	beq.n	801c41a <_dtoa_r+0x23a>
 801c382:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c386:	2300      	movs	r3, #0
 801c388:	930e      	str	r3, [sp, #56]	; 0x38
 801c38a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c38c:	1b5d      	subs	r5, r3, r5
 801c38e:	1e6b      	subs	r3, r5, #1
 801c390:	9304      	str	r3, [sp, #16]
 801c392:	bf43      	ittte	mi
 801c394:	2300      	movmi	r3, #0
 801c396:	f1c5 0801 	rsbmi	r8, r5, #1
 801c39a:	9304      	strmi	r3, [sp, #16]
 801c39c:	f04f 0800 	movpl.w	r8, #0
 801c3a0:	f1ba 0f00 	cmp.w	sl, #0
 801c3a4:	db3b      	blt.n	801c41e <_dtoa_r+0x23e>
 801c3a6:	9b04      	ldr	r3, [sp, #16]
 801c3a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801c3ac:	4453      	add	r3, sl
 801c3ae:	9304      	str	r3, [sp, #16]
 801c3b0:	2300      	movs	r3, #0
 801c3b2:	9306      	str	r3, [sp, #24]
 801c3b4:	9b05      	ldr	r3, [sp, #20]
 801c3b6:	2b09      	cmp	r3, #9
 801c3b8:	d869      	bhi.n	801c48e <_dtoa_r+0x2ae>
 801c3ba:	2b05      	cmp	r3, #5
 801c3bc:	bfc4      	itt	gt
 801c3be:	3b04      	subgt	r3, #4
 801c3c0:	9305      	strgt	r3, [sp, #20]
 801c3c2:	9b05      	ldr	r3, [sp, #20]
 801c3c4:	f1a3 0302 	sub.w	r3, r3, #2
 801c3c8:	bfcc      	ite	gt
 801c3ca:	2500      	movgt	r5, #0
 801c3cc:	2501      	movle	r5, #1
 801c3ce:	2b03      	cmp	r3, #3
 801c3d0:	d869      	bhi.n	801c4a6 <_dtoa_r+0x2c6>
 801c3d2:	e8df f003 	tbb	[pc, r3]
 801c3d6:	4e2c      	.short	0x4e2c
 801c3d8:	5a4c      	.short	0x5a4c
 801c3da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801c3de:	441d      	add	r5, r3
 801c3e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c3e4:	2b20      	cmp	r3, #32
 801c3e6:	bfc1      	itttt	gt
 801c3e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c3ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801c3f0:	fa09 f303 	lslgt.w	r3, r9, r3
 801c3f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 801c3f8:	bfda      	itte	le
 801c3fa:	f1c3 0320 	rsble	r3, r3, #32
 801c3fe:	fa06 f003 	lslle.w	r0, r6, r3
 801c402:	4318      	orrgt	r0, r3
 801c404:	f7e4 f88e 	bl	8000524 <__aeabi_ui2d>
 801c408:	2301      	movs	r3, #1
 801c40a:	4606      	mov	r6, r0
 801c40c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801c410:	3d01      	subs	r5, #1
 801c412:	9310      	str	r3, [sp, #64]	; 0x40
 801c414:	e771      	b.n	801c2fa <_dtoa_r+0x11a>
 801c416:	2301      	movs	r3, #1
 801c418:	e7b6      	b.n	801c388 <_dtoa_r+0x1a8>
 801c41a:	900e      	str	r0, [sp, #56]	; 0x38
 801c41c:	e7b5      	b.n	801c38a <_dtoa_r+0x1aa>
 801c41e:	f1ca 0300 	rsb	r3, sl, #0
 801c422:	9306      	str	r3, [sp, #24]
 801c424:	2300      	movs	r3, #0
 801c426:	eba8 080a 	sub.w	r8, r8, sl
 801c42a:	930d      	str	r3, [sp, #52]	; 0x34
 801c42c:	e7c2      	b.n	801c3b4 <_dtoa_r+0x1d4>
 801c42e:	2300      	movs	r3, #0
 801c430:	9308      	str	r3, [sp, #32]
 801c432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c434:	2b00      	cmp	r3, #0
 801c436:	dc39      	bgt.n	801c4ac <_dtoa_r+0x2cc>
 801c438:	f04f 0901 	mov.w	r9, #1
 801c43c:	f8cd 9004 	str.w	r9, [sp, #4]
 801c440:	464b      	mov	r3, r9
 801c442:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801c446:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c448:	2200      	movs	r2, #0
 801c44a:	6042      	str	r2, [r0, #4]
 801c44c:	2204      	movs	r2, #4
 801c44e:	f102 0614 	add.w	r6, r2, #20
 801c452:	429e      	cmp	r6, r3
 801c454:	6841      	ldr	r1, [r0, #4]
 801c456:	d92f      	bls.n	801c4b8 <_dtoa_r+0x2d8>
 801c458:	4620      	mov	r0, r4
 801c45a:	f001 f989 	bl	801d770 <_Balloc>
 801c45e:	9000      	str	r0, [sp, #0]
 801c460:	2800      	cmp	r0, #0
 801c462:	d14b      	bne.n	801c4fc <_dtoa_r+0x31c>
 801c464:	4b24      	ldr	r3, [pc, #144]	; (801c4f8 <_dtoa_r+0x318>)
 801c466:	4602      	mov	r2, r0
 801c468:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801c46c:	e6d1      	b.n	801c212 <_dtoa_r+0x32>
 801c46e:	2301      	movs	r3, #1
 801c470:	e7de      	b.n	801c430 <_dtoa_r+0x250>
 801c472:	2300      	movs	r3, #0
 801c474:	9308      	str	r3, [sp, #32]
 801c476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c478:	eb0a 0903 	add.w	r9, sl, r3
 801c47c:	f109 0301 	add.w	r3, r9, #1
 801c480:	2b01      	cmp	r3, #1
 801c482:	9301      	str	r3, [sp, #4]
 801c484:	bfb8      	it	lt
 801c486:	2301      	movlt	r3, #1
 801c488:	e7dd      	b.n	801c446 <_dtoa_r+0x266>
 801c48a:	2301      	movs	r3, #1
 801c48c:	e7f2      	b.n	801c474 <_dtoa_r+0x294>
 801c48e:	2501      	movs	r5, #1
 801c490:	2300      	movs	r3, #0
 801c492:	9305      	str	r3, [sp, #20]
 801c494:	9508      	str	r5, [sp, #32]
 801c496:	f04f 39ff 	mov.w	r9, #4294967295
 801c49a:	2200      	movs	r2, #0
 801c49c:	f8cd 9004 	str.w	r9, [sp, #4]
 801c4a0:	2312      	movs	r3, #18
 801c4a2:	9209      	str	r2, [sp, #36]	; 0x24
 801c4a4:	e7cf      	b.n	801c446 <_dtoa_r+0x266>
 801c4a6:	2301      	movs	r3, #1
 801c4a8:	9308      	str	r3, [sp, #32]
 801c4aa:	e7f4      	b.n	801c496 <_dtoa_r+0x2b6>
 801c4ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c4b0:	f8cd 9004 	str.w	r9, [sp, #4]
 801c4b4:	464b      	mov	r3, r9
 801c4b6:	e7c6      	b.n	801c446 <_dtoa_r+0x266>
 801c4b8:	3101      	adds	r1, #1
 801c4ba:	6041      	str	r1, [r0, #4]
 801c4bc:	0052      	lsls	r2, r2, #1
 801c4be:	e7c6      	b.n	801c44e <_dtoa_r+0x26e>
 801c4c0:	636f4361 	.word	0x636f4361
 801c4c4:	3fd287a7 	.word	0x3fd287a7
 801c4c8:	8b60c8b3 	.word	0x8b60c8b3
 801c4cc:	3fc68a28 	.word	0x3fc68a28
 801c4d0:	509f79fb 	.word	0x509f79fb
 801c4d4:	3fd34413 	.word	0x3fd34413
 801c4d8:	08020f69 	.word	0x08020f69
 801c4dc:	08020f80 	.word	0x08020f80
 801c4e0:	7ff00000 	.word	0x7ff00000
 801c4e4:	08020f65 	.word	0x08020f65
 801c4e8:	08020f5c 	.word	0x08020f5c
 801c4ec:	080211e2 	.word	0x080211e2
 801c4f0:	3ff80000 	.word	0x3ff80000
 801c4f4:	080210f8 	.word	0x080210f8
 801c4f8:	08020fdf 	.word	0x08020fdf
 801c4fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c4fe:	9a00      	ldr	r2, [sp, #0]
 801c500:	601a      	str	r2, [r3, #0]
 801c502:	9b01      	ldr	r3, [sp, #4]
 801c504:	2b0e      	cmp	r3, #14
 801c506:	f200 80ad 	bhi.w	801c664 <_dtoa_r+0x484>
 801c50a:	2d00      	cmp	r5, #0
 801c50c:	f000 80aa 	beq.w	801c664 <_dtoa_r+0x484>
 801c510:	f1ba 0f00 	cmp.w	sl, #0
 801c514:	dd36      	ble.n	801c584 <_dtoa_r+0x3a4>
 801c516:	4ac3      	ldr	r2, [pc, #780]	; (801c824 <_dtoa_r+0x644>)
 801c518:	f00a 030f 	and.w	r3, sl, #15
 801c51c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c520:	ed93 7b00 	vldr	d7, [r3]
 801c524:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801c528:	ea4f 172a 	mov.w	r7, sl, asr #4
 801c52c:	eeb0 8a47 	vmov.f32	s16, s14
 801c530:	eef0 8a67 	vmov.f32	s17, s15
 801c534:	d016      	beq.n	801c564 <_dtoa_r+0x384>
 801c536:	4bbc      	ldr	r3, [pc, #752]	; (801c828 <_dtoa_r+0x648>)
 801c538:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c53c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c540:	f7e4 f994 	bl	800086c <__aeabi_ddiv>
 801c544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c548:	f007 070f 	and.w	r7, r7, #15
 801c54c:	2503      	movs	r5, #3
 801c54e:	4eb6      	ldr	r6, [pc, #728]	; (801c828 <_dtoa_r+0x648>)
 801c550:	b957      	cbnz	r7, 801c568 <_dtoa_r+0x388>
 801c552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c556:	ec53 2b18 	vmov	r2, r3, d8
 801c55a:	f7e4 f987 	bl	800086c <__aeabi_ddiv>
 801c55e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c562:	e029      	b.n	801c5b8 <_dtoa_r+0x3d8>
 801c564:	2502      	movs	r5, #2
 801c566:	e7f2      	b.n	801c54e <_dtoa_r+0x36e>
 801c568:	07f9      	lsls	r1, r7, #31
 801c56a:	d508      	bpl.n	801c57e <_dtoa_r+0x39e>
 801c56c:	ec51 0b18 	vmov	r0, r1, d8
 801c570:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c574:	f7e4 f850 	bl	8000618 <__aeabi_dmul>
 801c578:	ec41 0b18 	vmov	d8, r0, r1
 801c57c:	3501      	adds	r5, #1
 801c57e:	107f      	asrs	r7, r7, #1
 801c580:	3608      	adds	r6, #8
 801c582:	e7e5      	b.n	801c550 <_dtoa_r+0x370>
 801c584:	f000 80a6 	beq.w	801c6d4 <_dtoa_r+0x4f4>
 801c588:	f1ca 0600 	rsb	r6, sl, #0
 801c58c:	4ba5      	ldr	r3, [pc, #660]	; (801c824 <_dtoa_r+0x644>)
 801c58e:	4fa6      	ldr	r7, [pc, #664]	; (801c828 <_dtoa_r+0x648>)
 801c590:	f006 020f 	and.w	r2, r6, #15
 801c594:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c59c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c5a0:	f7e4 f83a 	bl	8000618 <__aeabi_dmul>
 801c5a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c5a8:	1136      	asrs	r6, r6, #4
 801c5aa:	2300      	movs	r3, #0
 801c5ac:	2502      	movs	r5, #2
 801c5ae:	2e00      	cmp	r6, #0
 801c5b0:	f040 8085 	bne.w	801c6be <_dtoa_r+0x4de>
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	d1d2      	bne.n	801c55e <_dtoa_r+0x37e>
 801c5b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	f000 808c 	beq.w	801c6d8 <_dtoa_r+0x4f8>
 801c5c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c5c4:	4b99      	ldr	r3, [pc, #612]	; (801c82c <_dtoa_r+0x64c>)
 801c5c6:	2200      	movs	r2, #0
 801c5c8:	4630      	mov	r0, r6
 801c5ca:	4639      	mov	r1, r7
 801c5cc:	f7e4 fa96 	bl	8000afc <__aeabi_dcmplt>
 801c5d0:	2800      	cmp	r0, #0
 801c5d2:	f000 8081 	beq.w	801c6d8 <_dtoa_r+0x4f8>
 801c5d6:	9b01      	ldr	r3, [sp, #4]
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d07d      	beq.n	801c6d8 <_dtoa_r+0x4f8>
 801c5dc:	f1b9 0f00 	cmp.w	r9, #0
 801c5e0:	dd3c      	ble.n	801c65c <_dtoa_r+0x47c>
 801c5e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 801c5e6:	9307      	str	r3, [sp, #28]
 801c5e8:	2200      	movs	r2, #0
 801c5ea:	4b91      	ldr	r3, [pc, #580]	; (801c830 <_dtoa_r+0x650>)
 801c5ec:	4630      	mov	r0, r6
 801c5ee:	4639      	mov	r1, r7
 801c5f0:	f7e4 f812 	bl	8000618 <__aeabi_dmul>
 801c5f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c5f8:	3501      	adds	r5, #1
 801c5fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801c5fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c602:	4628      	mov	r0, r5
 801c604:	f7e3 ff9e 	bl	8000544 <__aeabi_i2d>
 801c608:	4632      	mov	r2, r6
 801c60a:	463b      	mov	r3, r7
 801c60c:	f7e4 f804 	bl	8000618 <__aeabi_dmul>
 801c610:	4b88      	ldr	r3, [pc, #544]	; (801c834 <_dtoa_r+0x654>)
 801c612:	2200      	movs	r2, #0
 801c614:	f7e3 fe4a 	bl	80002ac <__adddf3>
 801c618:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801c61c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c620:	9303      	str	r3, [sp, #12]
 801c622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c624:	2b00      	cmp	r3, #0
 801c626:	d15c      	bne.n	801c6e2 <_dtoa_r+0x502>
 801c628:	4b83      	ldr	r3, [pc, #524]	; (801c838 <_dtoa_r+0x658>)
 801c62a:	2200      	movs	r2, #0
 801c62c:	4630      	mov	r0, r6
 801c62e:	4639      	mov	r1, r7
 801c630:	f7e3 fe3a 	bl	80002a8 <__aeabi_dsub>
 801c634:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c638:	4606      	mov	r6, r0
 801c63a:	460f      	mov	r7, r1
 801c63c:	f7e4 fa7c 	bl	8000b38 <__aeabi_dcmpgt>
 801c640:	2800      	cmp	r0, #0
 801c642:	f040 8296 	bne.w	801cb72 <_dtoa_r+0x992>
 801c646:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801c64a:	4630      	mov	r0, r6
 801c64c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c650:	4639      	mov	r1, r7
 801c652:	f7e4 fa53 	bl	8000afc <__aeabi_dcmplt>
 801c656:	2800      	cmp	r0, #0
 801c658:	f040 8288 	bne.w	801cb6c <_dtoa_r+0x98c>
 801c65c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c660:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c666:	2b00      	cmp	r3, #0
 801c668:	f2c0 8158 	blt.w	801c91c <_dtoa_r+0x73c>
 801c66c:	f1ba 0f0e 	cmp.w	sl, #14
 801c670:	f300 8154 	bgt.w	801c91c <_dtoa_r+0x73c>
 801c674:	4b6b      	ldr	r3, [pc, #428]	; (801c824 <_dtoa_r+0x644>)
 801c676:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c67a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c680:	2b00      	cmp	r3, #0
 801c682:	f280 80e3 	bge.w	801c84c <_dtoa_r+0x66c>
 801c686:	9b01      	ldr	r3, [sp, #4]
 801c688:	2b00      	cmp	r3, #0
 801c68a:	f300 80df 	bgt.w	801c84c <_dtoa_r+0x66c>
 801c68e:	f040 826d 	bne.w	801cb6c <_dtoa_r+0x98c>
 801c692:	4b69      	ldr	r3, [pc, #420]	; (801c838 <_dtoa_r+0x658>)
 801c694:	2200      	movs	r2, #0
 801c696:	4640      	mov	r0, r8
 801c698:	4649      	mov	r1, r9
 801c69a:	f7e3 ffbd 	bl	8000618 <__aeabi_dmul>
 801c69e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c6a2:	f7e4 fa3f 	bl	8000b24 <__aeabi_dcmpge>
 801c6a6:	9e01      	ldr	r6, [sp, #4]
 801c6a8:	4637      	mov	r7, r6
 801c6aa:	2800      	cmp	r0, #0
 801c6ac:	f040 8243 	bne.w	801cb36 <_dtoa_r+0x956>
 801c6b0:	9d00      	ldr	r5, [sp, #0]
 801c6b2:	2331      	movs	r3, #49	; 0x31
 801c6b4:	f805 3b01 	strb.w	r3, [r5], #1
 801c6b8:	f10a 0a01 	add.w	sl, sl, #1
 801c6bc:	e23f      	b.n	801cb3e <_dtoa_r+0x95e>
 801c6be:	07f2      	lsls	r2, r6, #31
 801c6c0:	d505      	bpl.n	801c6ce <_dtoa_r+0x4ee>
 801c6c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c6c6:	f7e3 ffa7 	bl	8000618 <__aeabi_dmul>
 801c6ca:	3501      	adds	r5, #1
 801c6cc:	2301      	movs	r3, #1
 801c6ce:	1076      	asrs	r6, r6, #1
 801c6d0:	3708      	adds	r7, #8
 801c6d2:	e76c      	b.n	801c5ae <_dtoa_r+0x3ce>
 801c6d4:	2502      	movs	r5, #2
 801c6d6:	e76f      	b.n	801c5b8 <_dtoa_r+0x3d8>
 801c6d8:	9b01      	ldr	r3, [sp, #4]
 801c6da:	f8cd a01c 	str.w	sl, [sp, #28]
 801c6de:	930c      	str	r3, [sp, #48]	; 0x30
 801c6e0:	e78d      	b.n	801c5fe <_dtoa_r+0x41e>
 801c6e2:	9900      	ldr	r1, [sp, #0]
 801c6e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c6e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c6e8:	4b4e      	ldr	r3, [pc, #312]	; (801c824 <_dtoa_r+0x644>)
 801c6ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c6ee:	4401      	add	r1, r0
 801c6f0:	9102      	str	r1, [sp, #8]
 801c6f2:	9908      	ldr	r1, [sp, #32]
 801c6f4:	eeb0 8a47 	vmov.f32	s16, s14
 801c6f8:	eef0 8a67 	vmov.f32	s17, s15
 801c6fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c700:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c704:	2900      	cmp	r1, #0
 801c706:	d045      	beq.n	801c794 <_dtoa_r+0x5b4>
 801c708:	494c      	ldr	r1, [pc, #304]	; (801c83c <_dtoa_r+0x65c>)
 801c70a:	2000      	movs	r0, #0
 801c70c:	f7e4 f8ae 	bl	800086c <__aeabi_ddiv>
 801c710:	ec53 2b18 	vmov	r2, r3, d8
 801c714:	f7e3 fdc8 	bl	80002a8 <__aeabi_dsub>
 801c718:	9d00      	ldr	r5, [sp, #0]
 801c71a:	ec41 0b18 	vmov	d8, r0, r1
 801c71e:	4639      	mov	r1, r7
 801c720:	4630      	mov	r0, r6
 801c722:	f7e4 fa29 	bl	8000b78 <__aeabi_d2iz>
 801c726:	900c      	str	r0, [sp, #48]	; 0x30
 801c728:	f7e3 ff0c 	bl	8000544 <__aeabi_i2d>
 801c72c:	4602      	mov	r2, r0
 801c72e:	460b      	mov	r3, r1
 801c730:	4630      	mov	r0, r6
 801c732:	4639      	mov	r1, r7
 801c734:	f7e3 fdb8 	bl	80002a8 <__aeabi_dsub>
 801c738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c73a:	3330      	adds	r3, #48	; 0x30
 801c73c:	f805 3b01 	strb.w	r3, [r5], #1
 801c740:	ec53 2b18 	vmov	r2, r3, d8
 801c744:	4606      	mov	r6, r0
 801c746:	460f      	mov	r7, r1
 801c748:	f7e4 f9d8 	bl	8000afc <__aeabi_dcmplt>
 801c74c:	2800      	cmp	r0, #0
 801c74e:	d165      	bne.n	801c81c <_dtoa_r+0x63c>
 801c750:	4632      	mov	r2, r6
 801c752:	463b      	mov	r3, r7
 801c754:	4935      	ldr	r1, [pc, #212]	; (801c82c <_dtoa_r+0x64c>)
 801c756:	2000      	movs	r0, #0
 801c758:	f7e3 fda6 	bl	80002a8 <__aeabi_dsub>
 801c75c:	ec53 2b18 	vmov	r2, r3, d8
 801c760:	f7e4 f9cc 	bl	8000afc <__aeabi_dcmplt>
 801c764:	2800      	cmp	r0, #0
 801c766:	f040 80b9 	bne.w	801c8dc <_dtoa_r+0x6fc>
 801c76a:	9b02      	ldr	r3, [sp, #8]
 801c76c:	429d      	cmp	r5, r3
 801c76e:	f43f af75 	beq.w	801c65c <_dtoa_r+0x47c>
 801c772:	4b2f      	ldr	r3, [pc, #188]	; (801c830 <_dtoa_r+0x650>)
 801c774:	ec51 0b18 	vmov	r0, r1, d8
 801c778:	2200      	movs	r2, #0
 801c77a:	f7e3 ff4d 	bl	8000618 <__aeabi_dmul>
 801c77e:	4b2c      	ldr	r3, [pc, #176]	; (801c830 <_dtoa_r+0x650>)
 801c780:	ec41 0b18 	vmov	d8, r0, r1
 801c784:	2200      	movs	r2, #0
 801c786:	4630      	mov	r0, r6
 801c788:	4639      	mov	r1, r7
 801c78a:	f7e3 ff45 	bl	8000618 <__aeabi_dmul>
 801c78e:	4606      	mov	r6, r0
 801c790:	460f      	mov	r7, r1
 801c792:	e7c4      	b.n	801c71e <_dtoa_r+0x53e>
 801c794:	ec51 0b17 	vmov	r0, r1, d7
 801c798:	f7e3 ff3e 	bl	8000618 <__aeabi_dmul>
 801c79c:	9b02      	ldr	r3, [sp, #8]
 801c79e:	9d00      	ldr	r5, [sp, #0]
 801c7a0:	930c      	str	r3, [sp, #48]	; 0x30
 801c7a2:	ec41 0b18 	vmov	d8, r0, r1
 801c7a6:	4639      	mov	r1, r7
 801c7a8:	4630      	mov	r0, r6
 801c7aa:	f7e4 f9e5 	bl	8000b78 <__aeabi_d2iz>
 801c7ae:	9011      	str	r0, [sp, #68]	; 0x44
 801c7b0:	f7e3 fec8 	bl	8000544 <__aeabi_i2d>
 801c7b4:	4602      	mov	r2, r0
 801c7b6:	460b      	mov	r3, r1
 801c7b8:	4630      	mov	r0, r6
 801c7ba:	4639      	mov	r1, r7
 801c7bc:	f7e3 fd74 	bl	80002a8 <__aeabi_dsub>
 801c7c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c7c2:	3330      	adds	r3, #48	; 0x30
 801c7c4:	f805 3b01 	strb.w	r3, [r5], #1
 801c7c8:	9b02      	ldr	r3, [sp, #8]
 801c7ca:	429d      	cmp	r5, r3
 801c7cc:	4606      	mov	r6, r0
 801c7ce:	460f      	mov	r7, r1
 801c7d0:	f04f 0200 	mov.w	r2, #0
 801c7d4:	d134      	bne.n	801c840 <_dtoa_r+0x660>
 801c7d6:	4b19      	ldr	r3, [pc, #100]	; (801c83c <_dtoa_r+0x65c>)
 801c7d8:	ec51 0b18 	vmov	r0, r1, d8
 801c7dc:	f7e3 fd66 	bl	80002ac <__adddf3>
 801c7e0:	4602      	mov	r2, r0
 801c7e2:	460b      	mov	r3, r1
 801c7e4:	4630      	mov	r0, r6
 801c7e6:	4639      	mov	r1, r7
 801c7e8:	f7e4 f9a6 	bl	8000b38 <__aeabi_dcmpgt>
 801c7ec:	2800      	cmp	r0, #0
 801c7ee:	d175      	bne.n	801c8dc <_dtoa_r+0x6fc>
 801c7f0:	ec53 2b18 	vmov	r2, r3, d8
 801c7f4:	4911      	ldr	r1, [pc, #68]	; (801c83c <_dtoa_r+0x65c>)
 801c7f6:	2000      	movs	r0, #0
 801c7f8:	f7e3 fd56 	bl	80002a8 <__aeabi_dsub>
 801c7fc:	4602      	mov	r2, r0
 801c7fe:	460b      	mov	r3, r1
 801c800:	4630      	mov	r0, r6
 801c802:	4639      	mov	r1, r7
 801c804:	f7e4 f97a 	bl	8000afc <__aeabi_dcmplt>
 801c808:	2800      	cmp	r0, #0
 801c80a:	f43f af27 	beq.w	801c65c <_dtoa_r+0x47c>
 801c80e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c810:	1e6b      	subs	r3, r5, #1
 801c812:	930c      	str	r3, [sp, #48]	; 0x30
 801c814:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c818:	2b30      	cmp	r3, #48	; 0x30
 801c81a:	d0f8      	beq.n	801c80e <_dtoa_r+0x62e>
 801c81c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c820:	e04a      	b.n	801c8b8 <_dtoa_r+0x6d8>
 801c822:	bf00      	nop
 801c824:	080210f8 	.word	0x080210f8
 801c828:	080210d0 	.word	0x080210d0
 801c82c:	3ff00000 	.word	0x3ff00000
 801c830:	40240000 	.word	0x40240000
 801c834:	401c0000 	.word	0x401c0000
 801c838:	40140000 	.word	0x40140000
 801c83c:	3fe00000 	.word	0x3fe00000
 801c840:	4baf      	ldr	r3, [pc, #700]	; (801cb00 <_dtoa_r+0x920>)
 801c842:	f7e3 fee9 	bl	8000618 <__aeabi_dmul>
 801c846:	4606      	mov	r6, r0
 801c848:	460f      	mov	r7, r1
 801c84a:	e7ac      	b.n	801c7a6 <_dtoa_r+0x5c6>
 801c84c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c850:	9d00      	ldr	r5, [sp, #0]
 801c852:	4642      	mov	r2, r8
 801c854:	464b      	mov	r3, r9
 801c856:	4630      	mov	r0, r6
 801c858:	4639      	mov	r1, r7
 801c85a:	f7e4 f807 	bl	800086c <__aeabi_ddiv>
 801c85e:	f7e4 f98b 	bl	8000b78 <__aeabi_d2iz>
 801c862:	9002      	str	r0, [sp, #8]
 801c864:	f7e3 fe6e 	bl	8000544 <__aeabi_i2d>
 801c868:	4642      	mov	r2, r8
 801c86a:	464b      	mov	r3, r9
 801c86c:	f7e3 fed4 	bl	8000618 <__aeabi_dmul>
 801c870:	4602      	mov	r2, r0
 801c872:	460b      	mov	r3, r1
 801c874:	4630      	mov	r0, r6
 801c876:	4639      	mov	r1, r7
 801c878:	f7e3 fd16 	bl	80002a8 <__aeabi_dsub>
 801c87c:	9e02      	ldr	r6, [sp, #8]
 801c87e:	9f01      	ldr	r7, [sp, #4]
 801c880:	3630      	adds	r6, #48	; 0x30
 801c882:	f805 6b01 	strb.w	r6, [r5], #1
 801c886:	9e00      	ldr	r6, [sp, #0]
 801c888:	1bae      	subs	r6, r5, r6
 801c88a:	42b7      	cmp	r7, r6
 801c88c:	4602      	mov	r2, r0
 801c88e:	460b      	mov	r3, r1
 801c890:	d137      	bne.n	801c902 <_dtoa_r+0x722>
 801c892:	f7e3 fd0b 	bl	80002ac <__adddf3>
 801c896:	4642      	mov	r2, r8
 801c898:	464b      	mov	r3, r9
 801c89a:	4606      	mov	r6, r0
 801c89c:	460f      	mov	r7, r1
 801c89e:	f7e4 f94b 	bl	8000b38 <__aeabi_dcmpgt>
 801c8a2:	b9c8      	cbnz	r0, 801c8d8 <_dtoa_r+0x6f8>
 801c8a4:	4642      	mov	r2, r8
 801c8a6:	464b      	mov	r3, r9
 801c8a8:	4630      	mov	r0, r6
 801c8aa:	4639      	mov	r1, r7
 801c8ac:	f7e4 f91c 	bl	8000ae8 <__aeabi_dcmpeq>
 801c8b0:	b110      	cbz	r0, 801c8b8 <_dtoa_r+0x6d8>
 801c8b2:	9b02      	ldr	r3, [sp, #8]
 801c8b4:	07d9      	lsls	r1, r3, #31
 801c8b6:	d40f      	bmi.n	801c8d8 <_dtoa_r+0x6f8>
 801c8b8:	4620      	mov	r0, r4
 801c8ba:	4659      	mov	r1, fp
 801c8bc:	f000 ff98 	bl	801d7f0 <_Bfree>
 801c8c0:	2300      	movs	r3, #0
 801c8c2:	702b      	strb	r3, [r5, #0]
 801c8c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c8c6:	f10a 0001 	add.w	r0, sl, #1
 801c8ca:	6018      	str	r0, [r3, #0]
 801c8cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	f43f acd8 	beq.w	801c284 <_dtoa_r+0xa4>
 801c8d4:	601d      	str	r5, [r3, #0]
 801c8d6:	e4d5      	b.n	801c284 <_dtoa_r+0xa4>
 801c8d8:	f8cd a01c 	str.w	sl, [sp, #28]
 801c8dc:	462b      	mov	r3, r5
 801c8de:	461d      	mov	r5, r3
 801c8e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c8e4:	2a39      	cmp	r2, #57	; 0x39
 801c8e6:	d108      	bne.n	801c8fa <_dtoa_r+0x71a>
 801c8e8:	9a00      	ldr	r2, [sp, #0]
 801c8ea:	429a      	cmp	r2, r3
 801c8ec:	d1f7      	bne.n	801c8de <_dtoa_r+0x6fe>
 801c8ee:	9a07      	ldr	r2, [sp, #28]
 801c8f0:	9900      	ldr	r1, [sp, #0]
 801c8f2:	3201      	adds	r2, #1
 801c8f4:	9207      	str	r2, [sp, #28]
 801c8f6:	2230      	movs	r2, #48	; 0x30
 801c8f8:	700a      	strb	r2, [r1, #0]
 801c8fa:	781a      	ldrb	r2, [r3, #0]
 801c8fc:	3201      	adds	r2, #1
 801c8fe:	701a      	strb	r2, [r3, #0]
 801c900:	e78c      	b.n	801c81c <_dtoa_r+0x63c>
 801c902:	4b7f      	ldr	r3, [pc, #508]	; (801cb00 <_dtoa_r+0x920>)
 801c904:	2200      	movs	r2, #0
 801c906:	f7e3 fe87 	bl	8000618 <__aeabi_dmul>
 801c90a:	2200      	movs	r2, #0
 801c90c:	2300      	movs	r3, #0
 801c90e:	4606      	mov	r6, r0
 801c910:	460f      	mov	r7, r1
 801c912:	f7e4 f8e9 	bl	8000ae8 <__aeabi_dcmpeq>
 801c916:	2800      	cmp	r0, #0
 801c918:	d09b      	beq.n	801c852 <_dtoa_r+0x672>
 801c91a:	e7cd      	b.n	801c8b8 <_dtoa_r+0x6d8>
 801c91c:	9a08      	ldr	r2, [sp, #32]
 801c91e:	2a00      	cmp	r2, #0
 801c920:	f000 80c4 	beq.w	801caac <_dtoa_r+0x8cc>
 801c924:	9a05      	ldr	r2, [sp, #20]
 801c926:	2a01      	cmp	r2, #1
 801c928:	f300 80a8 	bgt.w	801ca7c <_dtoa_r+0x89c>
 801c92c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c92e:	2a00      	cmp	r2, #0
 801c930:	f000 80a0 	beq.w	801ca74 <_dtoa_r+0x894>
 801c934:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c938:	9e06      	ldr	r6, [sp, #24]
 801c93a:	4645      	mov	r5, r8
 801c93c:	9a04      	ldr	r2, [sp, #16]
 801c93e:	2101      	movs	r1, #1
 801c940:	441a      	add	r2, r3
 801c942:	4620      	mov	r0, r4
 801c944:	4498      	add	r8, r3
 801c946:	9204      	str	r2, [sp, #16]
 801c948:	f001 f858 	bl	801d9fc <__i2b>
 801c94c:	4607      	mov	r7, r0
 801c94e:	2d00      	cmp	r5, #0
 801c950:	dd0b      	ble.n	801c96a <_dtoa_r+0x78a>
 801c952:	9b04      	ldr	r3, [sp, #16]
 801c954:	2b00      	cmp	r3, #0
 801c956:	dd08      	ble.n	801c96a <_dtoa_r+0x78a>
 801c958:	42ab      	cmp	r3, r5
 801c95a:	9a04      	ldr	r2, [sp, #16]
 801c95c:	bfa8      	it	ge
 801c95e:	462b      	movge	r3, r5
 801c960:	eba8 0803 	sub.w	r8, r8, r3
 801c964:	1aed      	subs	r5, r5, r3
 801c966:	1ad3      	subs	r3, r2, r3
 801c968:	9304      	str	r3, [sp, #16]
 801c96a:	9b06      	ldr	r3, [sp, #24]
 801c96c:	b1fb      	cbz	r3, 801c9ae <_dtoa_r+0x7ce>
 801c96e:	9b08      	ldr	r3, [sp, #32]
 801c970:	2b00      	cmp	r3, #0
 801c972:	f000 809f 	beq.w	801cab4 <_dtoa_r+0x8d4>
 801c976:	2e00      	cmp	r6, #0
 801c978:	dd11      	ble.n	801c99e <_dtoa_r+0x7be>
 801c97a:	4639      	mov	r1, r7
 801c97c:	4632      	mov	r2, r6
 801c97e:	4620      	mov	r0, r4
 801c980:	f001 f8f8 	bl	801db74 <__pow5mult>
 801c984:	465a      	mov	r2, fp
 801c986:	4601      	mov	r1, r0
 801c988:	4607      	mov	r7, r0
 801c98a:	4620      	mov	r0, r4
 801c98c:	f001 f84c 	bl	801da28 <__multiply>
 801c990:	4659      	mov	r1, fp
 801c992:	9007      	str	r0, [sp, #28]
 801c994:	4620      	mov	r0, r4
 801c996:	f000 ff2b 	bl	801d7f0 <_Bfree>
 801c99a:	9b07      	ldr	r3, [sp, #28]
 801c99c:	469b      	mov	fp, r3
 801c99e:	9b06      	ldr	r3, [sp, #24]
 801c9a0:	1b9a      	subs	r2, r3, r6
 801c9a2:	d004      	beq.n	801c9ae <_dtoa_r+0x7ce>
 801c9a4:	4659      	mov	r1, fp
 801c9a6:	4620      	mov	r0, r4
 801c9a8:	f001 f8e4 	bl	801db74 <__pow5mult>
 801c9ac:	4683      	mov	fp, r0
 801c9ae:	2101      	movs	r1, #1
 801c9b0:	4620      	mov	r0, r4
 801c9b2:	f001 f823 	bl	801d9fc <__i2b>
 801c9b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c9b8:	2b00      	cmp	r3, #0
 801c9ba:	4606      	mov	r6, r0
 801c9bc:	dd7c      	ble.n	801cab8 <_dtoa_r+0x8d8>
 801c9be:	461a      	mov	r2, r3
 801c9c0:	4601      	mov	r1, r0
 801c9c2:	4620      	mov	r0, r4
 801c9c4:	f001 f8d6 	bl	801db74 <__pow5mult>
 801c9c8:	9b05      	ldr	r3, [sp, #20]
 801c9ca:	2b01      	cmp	r3, #1
 801c9cc:	4606      	mov	r6, r0
 801c9ce:	dd76      	ble.n	801cabe <_dtoa_r+0x8de>
 801c9d0:	2300      	movs	r3, #0
 801c9d2:	9306      	str	r3, [sp, #24]
 801c9d4:	6933      	ldr	r3, [r6, #16]
 801c9d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c9da:	6918      	ldr	r0, [r3, #16]
 801c9dc:	f000 ffbe 	bl	801d95c <__hi0bits>
 801c9e0:	f1c0 0020 	rsb	r0, r0, #32
 801c9e4:	9b04      	ldr	r3, [sp, #16]
 801c9e6:	4418      	add	r0, r3
 801c9e8:	f010 001f 	ands.w	r0, r0, #31
 801c9ec:	f000 8086 	beq.w	801cafc <_dtoa_r+0x91c>
 801c9f0:	f1c0 0320 	rsb	r3, r0, #32
 801c9f4:	2b04      	cmp	r3, #4
 801c9f6:	dd7f      	ble.n	801caf8 <_dtoa_r+0x918>
 801c9f8:	f1c0 001c 	rsb	r0, r0, #28
 801c9fc:	9b04      	ldr	r3, [sp, #16]
 801c9fe:	4403      	add	r3, r0
 801ca00:	4480      	add	r8, r0
 801ca02:	4405      	add	r5, r0
 801ca04:	9304      	str	r3, [sp, #16]
 801ca06:	f1b8 0f00 	cmp.w	r8, #0
 801ca0a:	dd05      	ble.n	801ca18 <_dtoa_r+0x838>
 801ca0c:	4659      	mov	r1, fp
 801ca0e:	4642      	mov	r2, r8
 801ca10:	4620      	mov	r0, r4
 801ca12:	f001 f909 	bl	801dc28 <__lshift>
 801ca16:	4683      	mov	fp, r0
 801ca18:	9b04      	ldr	r3, [sp, #16]
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	dd05      	ble.n	801ca2a <_dtoa_r+0x84a>
 801ca1e:	4631      	mov	r1, r6
 801ca20:	461a      	mov	r2, r3
 801ca22:	4620      	mov	r0, r4
 801ca24:	f001 f900 	bl	801dc28 <__lshift>
 801ca28:	4606      	mov	r6, r0
 801ca2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d069      	beq.n	801cb04 <_dtoa_r+0x924>
 801ca30:	4631      	mov	r1, r6
 801ca32:	4658      	mov	r0, fp
 801ca34:	f001 f964 	bl	801dd00 <__mcmp>
 801ca38:	2800      	cmp	r0, #0
 801ca3a:	da63      	bge.n	801cb04 <_dtoa_r+0x924>
 801ca3c:	2300      	movs	r3, #0
 801ca3e:	4659      	mov	r1, fp
 801ca40:	220a      	movs	r2, #10
 801ca42:	4620      	mov	r0, r4
 801ca44:	f000 fef6 	bl	801d834 <__multadd>
 801ca48:	9b08      	ldr	r3, [sp, #32]
 801ca4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ca4e:	4683      	mov	fp, r0
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	f000 818f 	beq.w	801cd74 <_dtoa_r+0xb94>
 801ca56:	4639      	mov	r1, r7
 801ca58:	2300      	movs	r3, #0
 801ca5a:	220a      	movs	r2, #10
 801ca5c:	4620      	mov	r0, r4
 801ca5e:	f000 fee9 	bl	801d834 <__multadd>
 801ca62:	f1b9 0f00 	cmp.w	r9, #0
 801ca66:	4607      	mov	r7, r0
 801ca68:	f300 808e 	bgt.w	801cb88 <_dtoa_r+0x9a8>
 801ca6c:	9b05      	ldr	r3, [sp, #20]
 801ca6e:	2b02      	cmp	r3, #2
 801ca70:	dc50      	bgt.n	801cb14 <_dtoa_r+0x934>
 801ca72:	e089      	b.n	801cb88 <_dtoa_r+0x9a8>
 801ca74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ca76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ca7a:	e75d      	b.n	801c938 <_dtoa_r+0x758>
 801ca7c:	9b01      	ldr	r3, [sp, #4]
 801ca7e:	1e5e      	subs	r6, r3, #1
 801ca80:	9b06      	ldr	r3, [sp, #24]
 801ca82:	42b3      	cmp	r3, r6
 801ca84:	bfbf      	itttt	lt
 801ca86:	9b06      	ldrlt	r3, [sp, #24]
 801ca88:	9606      	strlt	r6, [sp, #24]
 801ca8a:	1af2      	sublt	r2, r6, r3
 801ca8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801ca8e:	bfb6      	itet	lt
 801ca90:	189b      	addlt	r3, r3, r2
 801ca92:	1b9e      	subge	r6, r3, r6
 801ca94:	930d      	strlt	r3, [sp, #52]	; 0x34
 801ca96:	9b01      	ldr	r3, [sp, #4]
 801ca98:	bfb8      	it	lt
 801ca9a:	2600      	movlt	r6, #0
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	bfb5      	itete	lt
 801caa0:	eba8 0503 	sublt.w	r5, r8, r3
 801caa4:	9b01      	ldrge	r3, [sp, #4]
 801caa6:	2300      	movlt	r3, #0
 801caa8:	4645      	movge	r5, r8
 801caaa:	e747      	b.n	801c93c <_dtoa_r+0x75c>
 801caac:	9e06      	ldr	r6, [sp, #24]
 801caae:	9f08      	ldr	r7, [sp, #32]
 801cab0:	4645      	mov	r5, r8
 801cab2:	e74c      	b.n	801c94e <_dtoa_r+0x76e>
 801cab4:	9a06      	ldr	r2, [sp, #24]
 801cab6:	e775      	b.n	801c9a4 <_dtoa_r+0x7c4>
 801cab8:	9b05      	ldr	r3, [sp, #20]
 801caba:	2b01      	cmp	r3, #1
 801cabc:	dc18      	bgt.n	801caf0 <_dtoa_r+0x910>
 801cabe:	9b02      	ldr	r3, [sp, #8]
 801cac0:	b9b3      	cbnz	r3, 801caf0 <_dtoa_r+0x910>
 801cac2:	9b03      	ldr	r3, [sp, #12]
 801cac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cac8:	b9a3      	cbnz	r3, 801caf4 <_dtoa_r+0x914>
 801caca:	9b03      	ldr	r3, [sp, #12]
 801cacc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cad0:	0d1b      	lsrs	r3, r3, #20
 801cad2:	051b      	lsls	r3, r3, #20
 801cad4:	b12b      	cbz	r3, 801cae2 <_dtoa_r+0x902>
 801cad6:	9b04      	ldr	r3, [sp, #16]
 801cad8:	3301      	adds	r3, #1
 801cada:	9304      	str	r3, [sp, #16]
 801cadc:	f108 0801 	add.w	r8, r8, #1
 801cae0:	2301      	movs	r3, #1
 801cae2:	9306      	str	r3, [sp, #24]
 801cae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	f47f af74 	bne.w	801c9d4 <_dtoa_r+0x7f4>
 801caec:	2001      	movs	r0, #1
 801caee:	e779      	b.n	801c9e4 <_dtoa_r+0x804>
 801caf0:	2300      	movs	r3, #0
 801caf2:	e7f6      	b.n	801cae2 <_dtoa_r+0x902>
 801caf4:	9b02      	ldr	r3, [sp, #8]
 801caf6:	e7f4      	b.n	801cae2 <_dtoa_r+0x902>
 801caf8:	d085      	beq.n	801ca06 <_dtoa_r+0x826>
 801cafa:	4618      	mov	r0, r3
 801cafc:	301c      	adds	r0, #28
 801cafe:	e77d      	b.n	801c9fc <_dtoa_r+0x81c>
 801cb00:	40240000 	.word	0x40240000
 801cb04:	9b01      	ldr	r3, [sp, #4]
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	dc38      	bgt.n	801cb7c <_dtoa_r+0x99c>
 801cb0a:	9b05      	ldr	r3, [sp, #20]
 801cb0c:	2b02      	cmp	r3, #2
 801cb0e:	dd35      	ble.n	801cb7c <_dtoa_r+0x99c>
 801cb10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801cb14:	f1b9 0f00 	cmp.w	r9, #0
 801cb18:	d10d      	bne.n	801cb36 <_dtoa_r+0x956>
 801cb1a:	4631      	mov	r1, r6
 801cb1c:	464b      	mov	r3, r9
 801cb1e:	2205      	movs	r2, #5
 801cb20:	4620      	mov	r0, r4
 801cb22:	f000 fe87 	bl	801d834 <__multadd>
 801cb26:	4601      	mov	r1, r0
 801cb28:	4606      	mov	r6, r0
 801cb2a:	4658      	mov	r0, fp
 801cb2c:	f001 f8e8 	bl	801dd00 <__mcmp>
 801cb30:	2800      	cmp	r0, #0
 801cb32:	f73f adbd 	bgt.w	801c6b0 <_dtoa_r+0x4d0>
 801cb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb38:	9d00      	ldr	r5, [sp, #0]
 801cb3a:	ea6f 0a03 	mvn.w	sl, r3
 801cb3e:	f04f 0800 	mov.w	r8, #0
 801cb42:	4631      	mov	r1, r6
 801cb44:	4620      	mov	r0, r4
 801cb46:	f000 fe53 	bl	801d7f0 <_Bfree>
 801cb4a:	2f00      	cmp	r7, #0
 801cb4c:	f43f aeb4 	beq.w	801c8b8 <_dtoa_r+0x6d8>
 801cb50:	f1b8 0f00 	cmp.w	r8, #0
 801cb54:	d005      	beq.n	801cb62 <_dtoa_r+0x982>
 801cb56:	45b8      	cmp	r8, r7
 801cb58:	d003      	beq.n	801cb62 <_dtoa_r+0x982>
 801cb5a:	4641      	mov	r1, r8
 801cb5c:	4620      	mov	r0, r4
 801cb5e:	f000 fe47 	bl	801d7f0 <_Bfree>
 801cb62:	4639      	mov	r1, r7
 801cb64:	4620      	mov	r0, r4
 801cb66:	f000 fe43 	bl	801d7f0 <_Bfree>
 801cb6a:	e6a5      	b.n	801c8b8 <_dtoa_r+0x6d8>
 801cb6c:	2600      	movs	r6, #0
 801cb6e:	4637      	mov	r7, r6
 801cb70:	e7e1      	b.n	801cb36 <_dtoa_r+0x956>
 801cb72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801cb74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801cb78:	4637      	mov	r7, r6
 801cb7a:	e599      	b.n	801c6b0 <_dtoa_r+0x4d0>
 801cb7c:	9b08      	ldr	r3, [sp, #32]
 801cb7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	f000 80fd 	beq.w	801cd82 <_dtoa_r+0xba2>
 801cb88:	2d00      	cmp	r5, #0
 801cb8a:	dd05      	ble.n	801cb98 <_dtoa_r+0x9b8>
 801cb8c:	4639      	mov	r1, r7
 801cb8e:	462a      	mov	r2, r5
 801cb90:	4620      	mov	r0, r4
 801cb92:	f001 f849 	bl	801dc28 <__lshift>
 801cb96:	4607      	mov	r7, r0
 801cb98:	9b06      	ldr	r3, [sp, #24]
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d05c      	beq.n	801cc58 <_dtoa_r+0xa78>
 801cb9e:	6879      	ldr	r1, [r7, #4]
 801cba0:	4620      	mov	r0, r4
 801cba2:	f000 fde5 	bl	801d770 <_Balloc>
 801cba6:	4605      	mov	r5, r0
 801cba8:	b928      	cbnz	r0, 801cbb6 <_dtoa_r+0x9d6>
 801cbaa:	4b80      	ldr	r3, [pc, #512]	; (801cdac <_dtoa_r+0xbcc>)
 801cbac:	4602      	mov	r2, r0
 801cbae:	f240 21ea 	movw	r1, #746	; 0x2ea
 801cbb2:	f7ff bb2e 	b.w	801c212 <_dtoa_r+0x32>
 801cbb6:	693a      	ldr	r2, [r7, #16]
 801cbb8:	3202      	adds	r2, #2
 801cbba:	0092      	lsls	r2, r2, #2
 801cbbc:	f107 010c 	add.w	r1, r7, #12
 801cbc0:	300c      	adds	r0, #12
 801cbc2:	f7fd f8bb 	bl	8019d3c <memcpy>
 801cbc6:	2201      	movs	r2, #1
 801cbc8:	4629      	mov	r1, r5
 801cbca:	4620      	mov	r0, r4
 801cbcc:	f001 f82c 	bl	801dc28 <__lshift>
 801cbd0:	9b00      	ldr	r3, [sp, #0]
 801cbd2:	3301      	adds	r3, #1
 801cbd4:	9301      	str	r3, [sp, #4]
 801cbd6:	9b00      	ldr	r3, [sp, #0]
 801cbd8:	444b      	add	r3, r9
 801cbda:	9307      	str	r3, [sp, #28]
 801cbdc:	9b02      	ldr	r3, [sp, #8]
 801cbde:	f003 0301 	and.w	r3, r3, #1
 801cbe2:	46b8      	mov	r8, r7
 801cbe4:	9306      	str	r3, [sp, #24]
 801cbe6:	4607      	mov	r7, r0
 801cbe8:	9b01      	ldr	r3, [sp, #4]
 801cbea:	4631      	mov	r1, r6
 801cbec:	3b01      	subs	r3, #1
 801cbee:	4658      	mov	r0, fp
 801cbf0:	9302      	str	r3, [sp, #8]
 801cbf2:	f7ff fa69 	bl	801c0c8 <quorem>
 801cbf6:	4603      	mov	r3, r0
 801cbf8:	3330      	adds	r3, #48	; 0x30
 801cbfa:	9004      	str	r0, [sp, #16]
 801cbfc:	4641      	mov	r1, r8
 801cbfe:	4658      	mov	r0, fp
 801cc00:	9308      	str	r3, [sp, #32]
 801cc02:	f001 f87d 	bl	801dd00 <__mcmp>
 801cc06:	463a      	mov	r2, r7
 801cc08:	4681      	mov	r9, r0
 801cc0a:	4631      	mov	r1, r6
 801cc0c:	4620      	mov	r0, r4
 801cc0e:	f001 f893 	bl	801dd38 <__mdiff>
 801cc12:	68c2      	ldr	r2, [r0, #12]
 801cc14:	9b08      	ldr	r3, [sp, #32]
 801cc16:	4605      	mov	r5, r0
 801cc18:	bb02      	cbnz	r2, 801cc5c <_dtoa_r+0xa7c>
 801cc1a:	4601      	mov	r1, r0
 801cc1c:	4658      	mov	r0, fp
 801cc1e:	f001 f86f 	bl	801dd00 <__mcmp>
 801cc22:	9b08      	ldr	r3, [sp, #32]
 801cc24:	4602      	mov	r2, r0
 801cc26:	4629      	mov	r1, r5
 801cc28:	4620      	mov	r0, r4
 801cc2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801cc2e:	f000 fddf 	bl	801d7f0 <_Bfree>
 801cc32:	9b05      	ldr	r3, [sp, #20]
 801cc34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cc36:	9d01      	ldr	r5, [sp, #4]
 801cc38:	ea43 0102 	orr.w	r1, r3, r2
 801cc3c:	9b06      	ldr	r3, [sp, #24]
 801cc3e:	430b      	orrs	r3, r1
 801cc40:	9b08      	ldr	r3, [sp, #32]
 801cc42:	d10d      	bne.n	801cc60 <_dtoa_r+0xa80>
 801cc44:	2b39      	cmp	r3, #57	; 0x39
 801cc46:	d029      	beq.n	801cc9c <_dtoa_r+0xabc>
 801cc48:	f1b9 0f00 	cmp.w	r9, #0
 801cc4c:	dd01      	ble.n	801cc52 <_dtoa_r+0xa72>
 801cc4e:	9b04      	ldr	r3, [sp, #16]
 801cc50:	3331      	adds	r3, #49	; 0x31
 801cc52:	9a02      	ldr	r2, [sp, #8]
 801cc54:	7013      	strb	r3, [r2, #0]
 801cc56:	e774      	b.n	801cb42 <_dtoa_r+0x962>
 801cc58:	4638      	mov	r0, r7
 801cc5a:	e7b9      	b.n	801cbd0 <_dtoa_r+0x9f0>
 801cc5c:	2201      	movs	r2, #1
 801cc5e:	e7e2      	b.n	801cc26 <_dtoa_r+0xa46>
 801cc60:	f1b9 0f00 	cmp.w	r9, #0
 801cc64:	db06      	blt.n	801cc74 <_dtoa_r+0xa94>
 801cc66:	9905      	ldr	r1, [sp, #20]
 801cc68:	ea41 0909 	orr.w	r9, r1, r9
 801cc6c:	9906      	ldr	r1, [sp, #24]
 801cc6e:	ea59 0101 	orrs.w	r1, r9, r1
 801cc72:	d120      	bne.n	801ccb6 <_dtoa_r+0xad6>
 801cc74:	2a00      	cmp	r2, #0
 801cc76:	ddec      	ble.n	801cc52 <_dtoa_r+0xa72>
 801cc78:	4659      	mov	r1, fp
 801cc7a:	2201      	movs	r2, #1
 801cc7c:	4620      	mov	r0, r4
 801cc7e:	9301      	str	r3, [sp, #4]
 801cc80:	f000 ffd2 	bl	801dc28 <__lshift>
 801cc84:	4631      	mov	r1, r6
 801cc86:	4683      	mov	fp, r0
 801cc88:	f001 f83a 	bl	801dd00 <__mcmp>
 801cc8c:	2800      	cmp	r0, #0
 801cc8e:	9b01      	ldr	r3, [sp, #4]
 801cc90:	dc02      	bgt.n	801cc98 <_dtoa_r+0xab8>
 801cc92:	d1de      	bne.n	801cc52 <_dtoa_r+0xa72>
 801cc94:	07da      	lsls	r2, r3, #31
 801cc96:	d5dc      	bpl.n	801cc52 <_dtoa_r+0xa72>
 801cc98:	2b39      	cmp	r3, #57	; 0x39
 801cc9a:	d1d8      	bne.n	801cc4e <_dtoa_r+0xa6e>
 801cc9c:	9a02      	ldr	r2, [sp, #8]
 801cc9e:	2339      	movs	r3, #57	; 0x39
 801cca0:	7013      	strb	r3, [r2, #0]
 801cca2:	462b      	mov	r3, r5
 801cca4:	461d      	mov	r5, r3
 801cca6:	3b01      	subs	r3, #1
 801cca8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ccac:	2a39      	cmp	r2, #57	; 0x39
 801ccae:	d050      	beq.n	801cd52 <_dtoa_r+0xb72>
 801ccb0:	3201      	adds	r2, #1
 801ccb2:	701a      	strb	r2, [r3, #0]
 801ccb4:	e745      	b.n	801cb42 <_dtoa_r+0x962>
 801ccb6:	2a00      	cmp	r2, #0
 801ccb8:	dd03      	ble.n	801ccc2 <_dtoa_r+0xae2>
 801ccba:	2b39      	cmp	r3, #57	; 0x39
 801ccbc:	d0ee      	beq.n	801cc9c <_dtoa_r+0xabc>
 801ccbe:	3301      	adds	r3, #1
 801ccc0:	e7c7      	b.n	801cc52 <_dtoa_r+0xa72>
 801ccc2:	9a01      	ldr	r2, [sp, #4]
 801ccc4:	9907      	ldr	r1, [sp, #28]
 801ccc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ccca:	428a      	cmp	r2, r1
 801cccc:	d02a      	beq.n	801cd24 <_dtoa_r+0xb44>
 801ccce:	4659      	mov	r1, fp
 801ccd0:	2300      	movs	r3, #0
 801ccd2:	220a      	movs	r2, #10
 801ccd4:	4620      	mov	r0, r4
 801ccd6:	f000 fdad 	bl	801d834 <__multadd>
 801ccda:	45b8      	cmp	r8, r7
 801ccdc:	4683      	mov	fp, r0
 801ccde:	f04f 0300 	mov.w	r3, #0
 801cce2:	f04f 020a 	mov.w	r2, #10
 801cce6:	4641      	mov	r1, r8
 801cce8:	4620      	mov	r0, r4
 801ccea:	d107      	bne.n	801ccfc <_dtoa_r+0xb1c>
 801ccec:	f000 fda2 	bl	801d834 <__multadd>
 801ccf0:	4680      	mov	r8, r0
 801ccf2:	4607      	mov	r7, r0
 801ccf4:	9b01      	ldr	r3, [sp, #4]
 801ccf6:	3301      	adds	r3, #1
 801ccf8:	9301      	str	r3, [sp, #4]
 801ccfa:	e775      	b.n	801cbe8 <_dtoa_r+0xa08>
 801ccfc:	f000 fd9a 	bl	801d834 <__multadd>
 801cd00:	4639      	mov	r1, r7
 801cd02:	4680      	mov	r8, r0
 801cd04:	2300      	movs	r3, #0
 801cd06:	220a      	movs	r2, #10
 801cd08:	4620      	mov	r0, r4
 801cd0a:	f000 fd93 	bl	801d834 <__multadd>
 801cd0e:	4607      	mov	r7, r0
 801cd10:	e7f0      	b.n	801ccf4 <_dtoa_r+0xb14>
 801cd12:	f1b9 0f00 	cmp.w	r9, #0
 801cd16:	9a00      	ldr	r2, [sp, #0]
 801cd18:	bfcc      	ite	gt
 801cd1a:	464d      	movgt	r5, r9
 801cd1c:	2501      	movle	r5, #1
 801cd1e:	4415      	add	r5, r2
 801cd20:	f04f 0800 	mov.w	r8, #0
 801cd24:	4659      	mov	r1, fp
 801cd26:	2201      	movs	r2, #1
 801cd28:	4620      	mov	r0, r4
 801cd2a:	9301      	str	r3, [sp, #4]
 801cd2c:	f000 ff7c 	bl	801dc28 <__lshift>
 801cd30:	4631      	mov	r1, r6
 801cd32:	4683      	mov	fp, r0
 801cd34:	f000 ffe4 	bl	801dd00 <__mcmp>
 801cd38:	2800      	cmp	r0, #0
 801cd3a:	dcb2      	bgt.n	801cca2 <_dtoa_r+0xac2>
 801cd3c:	d102      	bne.n	801cd44 <_dtoa_r+0xb64>
 801cd3e:	9b01      	ldr	r3, [sp, #4]
 801cd40:	07db      	lsls	r3, r3, #31
 801cd42:	d4ae      	bmi.n	801cca2 <_dtoa_r+0xac2>
 801cd44:	462b      	mov	r3, r5
 801cd46:	461d      	mov	r5, r3
 801cd48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cd4c:	2a30      	cmp	r2, #48	; 0x30
 801cd4e:	d0fa      	beq.n	801cd46 <_dtoa_r+0xb66>
 801cd50:	e6f7      	b.n	801cb42 <_dtoa_r+0x962>
 801cd52:	9a00      	ldr	r2, [sp, #0]
 801cd54:	429a      	cmp	r2, r3
 801cd56:	d1a5      	bne.n	801cca4 <_dtoa_r+0xac4>
 801cd58:	f10a 0a01 	add.w	sl, sl, #1
 801cd5c:	2331      	movs	r3, #49	; 0x31
 801cd5e:	e779      	b.n	801cc54 <_dtoa_r+0xa74>
 801cd60:	4b13      	ldr	r3, [pc, #76]	; (801cdb0 <_dtoa_r+0xbd0>)
 801cd62:	f7ff baaf 	b.w	801c2c4 <_dtoa_r+0xe4>
 801cd66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	f47f aa86 	bne.w	801c27a <_dtoa_r+0x9a>
 801cd6e:	4b11      	ldr	r3, [pc, #68]	; (801cdb4 <_dtoa_r+0xbd4>)
 801cd70:	f7ff baa8 	b.w	801c2c4 <_dtoa_r+0xe4>
 801cd74:	f1b9 0f00 	cmp.w	r9, #0
 801cd78:	dc03      	bgt.n	801cd82 <_dtoa_r+0xba2>
 801cd7a:	9b05      	ldr	r3, [sp, #20]
 801cd7c:	2b02      	cmp	r3, #2
 801cd7e:	f73f aec9 	bgt.w	801cb14 <_dtoa_r+0x934>
 801cd82:	9d00      	ldr	r5, [sp, #0]
 801cd84:	4631      	mov	r1, r6
 801cd86:	4658      	mov	r0, fp
 801cd88:	f7ff f99e 	bl	801c0c8 <quorem>
 801cd8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801cd90:	f805 3b01 	strb.w	r3, [r5], #1
 801cd94:	9a00      	ldr	r2, [sp, #0]
 801cd96:	1aaa      	subs	r2, r5, r2
 801cd98:	4591      	cmp	r9, r2
 801cd9a:	ddba      	ble.n	801cd12 <_dtoa_r+0xb32>
 801cd9c:	4659      	mov	r1, fp
 801cd9e:	2300      	movs	r3, #0
 801cda0:	220a      	movs	r2, #10
 801cda2:	4620      	mov	r0, r4
 801cda4:	f000 fd46 	bl	801d834 <__multadd>
 801cda8:	4683      	mov	fp, r0
 801cdaa:	e7eb      	b.n	801cd84 <_dtoa_r+0xba4>
 801cdac:	08020fdf 	.word	0x08020fdf
 801cdb0:	080211e1 	.word	0x080211e1
 801cdb4:	08020f5c 	.word	0x08020f5c

0801cdb8 <__sflush_r>:
 801cdb8:	898a      	ldrh	r2, [r1, #12]
 801cdba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cdbe:	4605      	mov	r5, r0
 801cdc0:	0710      	lsls	r0, r2, #28
 801cdc2:	460c      	mov	r4, r1
 801cdc4:	d458      	bmi.n	801ce78 <__sflush_r+0xc0>
 801cdc6:	684b      	ldr	r3, [r1, #4]
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	dc05      	bgt.n	801cdd8 <__sflush_r+0x20>
 801cdcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	dc02      	bgt.n	801cdd8 <__sflush_r+0x20>
 801cdd2:	2000      	movs	r0, #0
 801cdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cdda:	2e00      	cmp	r6, #0
 801cddc:	d0f9      	beq.n	801cdd2 <__sflush_r+0x1a>
 801cdde:	2300      	movs	r3, #0
 801cde0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cde4:	682f      	ldr	r7, [r5, #0]
 801cde6:	602b      	str	r3, [r5, #0]
 801cde8:	d032      	beq.n	801ce50 <__sflush_r+0x98>
 801cdea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cdec:	89a3      	ldrh	r3, [r4, #12]
 801cdee:	075a      	lsls	r2, r3, #29
 801cdf0:	d505      	bpl.n	801cdfe <__sflush_r+0x46>
 801cdf2:	6863      	ldr	r3, [r4, #4]
 801cdf4:	1ac0      	subs	r0, r0, r3
 801cdf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cdf8:	b10b      	cbz	r3, 801cdfe <__sflush_r+0x46>
 801cdfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cdfc:	1ac0      	subs	r0, r0, r3
 801cdfe:	2300      	movs	r3, #0
 801ce00:	4602      	mov	r2, r0
 801ce02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ce04:	6a21      	ldr	r1, [r4, #32]
 801ce06:	4628      	mov	r0, r5
 801ce08:	47b0      	blx	r6
 801ce0a:	1c43      	adds	r3, r0, #1
 801ce0c:	89a3      	ldrh	r3, [r4, #12]
 801ce0e:	d106      	bne.n	801ce1e <__sflush_r+0x66>
 801ce10:	6829      	ldr	r1, [r5, #0]
 801ce12:	291d      	cmp	r1, #29
 801ce14:	d82c      	bhi.n	801ce70 <__sflush_r+0xb8>
 801ce16:	4a2a      	ldr	r2, [pc, #168]	; (801cec0 <__sflush_r+0x108>)
 801ce18:	40ca      	lsrs	r2, r1
 801ce1a:	07d6      	lsls	r6, r2, #31
 801ce1c:	d528      	bpl.n	801ce70 <__sflush_r+0xb8>
 801ce1e:	2200      	movs	r2, #0
 801ce20:	6062      	str	r2, [r4, #4]
 801ce22:	04d9      	lsls	r1, r3, #19
 801ce24:	6922      	ldr	r2, [r4, #16]
 801ce26:	6022      	str	r2, [r4, #0]
 801ce28:	d504      	bpl.n	801ce34 <__sflush_r+0x7c>
 801ce2a:	1c42      	adds	r2, r0, #1
 801ce2c:	d101      	bne.n	801ce32 <__sflush_r+0x7a>
 801ce2e:	682b      	ldr	r3, [r5, #0]
 801ce30:	b903      	cbnz	r3, 801ce34 <__sflush_r+0x7c>
 801ce32:	6560      	str	r0, [r4, #84]	; 0x54
 801ce34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ce36:	602f      	str	r7, [r5, #0]
 801ce38:	2900      	cmp	r1, #0
 801ce3a:	d0ca      	beq.n	801cdd2 <__sflush_r+0x1a>
 801ce3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ce40:	4299      	cmp	r1, r3
 801ce42:	d002      	beq.n	801ce4a <__sflush_r+0x92>
 801ce44:	4628      	mov	r0, r5
 801ce46:	f7fc ffa9 	bl	8019d9c <_free_r>
 801ce4a:	2000      	movs	r0, #0
 801ce4c:	6360      	str	r0, [r4, #52]	; 0x34
 801ce4e:	e7c1      	b.n	801cdd4 <__sflush_r+0x1c>
 801ce50:	6a21      	ldr	r1, [r4, #32]
 801ce52:	2301      	movs	r3, #1
 801ce54:	4628      	mov	r0, r5
 801ce56:	47b0      	blx	r6
 801ce58:	1c41      	adds	r1, r0, #1
 801ce5a:	d1c7      	bne.n	801cdec <__sflush_r+0x34>
 801ce5c:	682b      	ldr	r3, [r5, #0]
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d0c4      	beq.n	801cdec <__sflush_r+0x34>
 801ce62:	2b1d      	cmp	r3, #29
 801ce64:	d001      	beq.n	801ce6a <__sflush_r+0xb2>
 801ce66:	2b16      	cmp	r3, #22
 801ce68:	d101      	bne.n	801ce6e <__sflush_r+0xb6>
 801ce6a:	602f      	str	r7, [r5, #0]
 801ce6c:	e7b1      	b.n	801cdd2 <__sflush_r+0x1a>
 801ce6e:	89a3      	ldrh	r3, [r4, #12]
 801ce70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce74:	81a3      	strh	r3, [r4, #12]
 801ce76:	e7ad      	b.n	801cdd4 <__sflush_r+0x1c>
 801ce78:	690f      	ldr	r7, [r1, #16]
 801ce7a:	2f00      	cmp	r7, #0
 801ce7c:	d0a9      	beq.n	801cdd2 <__sflush_r+0x1a>
 801ce7e:	0793      	lsls	r3, r2, #30
 801ce80:	680e      	ldr	r6, [r1, #0]
 801ce82:	bf08      	it	eq
 801ce84:	694b      	ldreq	r3, [r1, #20]
 801ce86:	600f      	str	r7, [r1, #0]
 801ce88:	bf18      	it	ne
 801ce8a:	2300      	movne	r3, #0
 801ce8c:	eba6 0807 	sub.w	r8, r6, r7
 801ce90:	608b      	str	r3, [r1, #8]
 801ce92:	f1b8 0f00 	cmp.w	r8, #0
 801ce96:	dd9c      	ble.n	801cdd2 <__sflush_r+0x1a>
 801ce98:	6a21      	ldr	r1, [r4, #32]
 801ce9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ce9c:	4643      	mov	r3, r8
 801ce9e:	463a      	mov	r2, r7
 801cea0:	4628      	mov	r0, r5
 801cea2:	47b0      	blx	r6
 801cea4:	2800      	cmp	r0, #0
 801cea6:	dc06      	bgt.n	801ceb6 <__sflush_r+0xfe>
 801cea8:	89a3      	ldrh	r3, [r4, #12]
 801ceaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ceae:	81a3      	strh	r3, [r4, #12]
 801ceb0:	f04f 30ff 	mov.w	r0, #4294967295
 801ceb4:	e78e      	b.n	801cdd4 <__sflush_r+0x1c>
 801ceb6:	4407      	add	r7, r0
 801ceb8:	eba8 0800 	sub.w	r8, r8, r0
 801cebc:	e7e9      	b.n	801ce92 <__sflush_r+0xda>
 801cebe:	bf00      	nop
 801cec0:	20400001 	.word	0x20400001

0801cec4 <_fflush_r>:
 801cec4:	b538      	push	{r3, r4, r5, lr}
 801cec6:	690b      	ldr	r3, [r1, #16]
 801cec8:	4605      	mov	r5, r0
 801ceca:	460c      	mov	r4, r1
 801cecc:	b913      	cbnz	r3, 801ced4 <_fflush_r+0x10>
 801cece:	2500      	movs	r5, #0
 801ced0:	4628      	mov	r0, r5
 801ced2:	bd38      	pop	{r3, r4, r5, pc}
 801ced4:	b118      	cbz	r0, 801cede <_fflush_r+0x1a>
 801ced6:	6983      	ldr	r3, [r0, #24]
 801ced8:	b90b      	cbnz	r3, 801cede <_fflush_r+0x1a>
 801ceda:	f7fc fe59 	bl	8019b90 <__sinit>
 801cede:	4b14      	ldr	r3, [pc, #80]	; (801cf30 <_fflush_r+0x6c>)
 801cee0:	429c      	cmp	r4, r3
 801cee2:	d11b      	bne.n	801cf1c <_fflush_r+0x58>
 801cee4:	686c      	ldr	r4, [r5, #4]
 801cee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d0ef      	beq.n	801cece <_fflush_r+0xa>
 801ceee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cef0:	07d0      	lsls	r0, r2, #31
 801cef2:	d404      	bmi.n	801cefe <_fflush_r+0x3a>
 801cef4:	0599      	lsls	r1, r3, #22
 801cef6:	d402      	bmi.n	801cefe <_fflush_r+0x3a>
 801cef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cefa:	f7fc ff0c 	bl	8019d16 <__retarget_lock_acquire_recursive>
 801cefe:	4628      	mov	r0, r5
 801cf00:	4621      	mov	r1, r4
 801cf02:	f7ff ff59 	bl	801cdb8 <__sflush_r>
 801cf06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cf08:	07da      	lsls	r2, r3, #31
 801cf0a:	4605      	mov	r5, r0
 801cf0c:	d4e0      	bmi.n	801ced0 <_fflush_r+0xc>
 801cf0e:	89a3      	ldrh	r3, [r4, #12]
 801cf10:	059b      	lsls	r3, r3, #22
 801cf12:	d4dd      	bmi.n	801ced0 <_fflush_r+0xc>
 801cf14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cf16:	f7fc feff 	bl	8019d18 <__retarget_lock_release_recursive>
 801cf1a:	e7d9      	b.n	801ced0 <_fflush_r+0xc>
 801cf1c:	4b05      	ldr	r3, [pc, #20]	; (801cf34 <_fflush_r+0x70>)
 801cf1e:	429c      	cmp	r4, r3
 801cf20:	d101      	bne.n	801cf26 <_fflush_r+0x62>
 801cf22:	68ac      	ldr	r4, [r5, #8]
 801cf24:	e7df      	b.n	801cee6 <_fflush_r+0x22>
 801cf26:	4b04      	ldr	r3, [pc, #16]	; (801cf38 <_fflush_r+0x74>)
 801cf28:	429c      	cmp	r4, r3
 801cf2a:	bf08      	it	eq
 801cf2c:	68ec      	ldreq	r4, [r5, #12]
 801cf2e:	e7da      	b.n	801cee6 <_fflush_r+0x22>
 801cf30:	08020e54 	.word	0x08020e54
 801cf34:	08020e74 	.word	0x08020e74
 801cf38:	08020e34 	.word	0x08020e34

0801cf3c <fiprintf>:
 801cf3c:	b40e      	push	{r1, r2, r3}
 801cf3e:	b503      	push	{r0, r1, lr}
 801cf40:	4601      	mov	r1, r0
 801cf42:	ab03      	add	r3, sp, #12
 801cf44:	4805      	ldr	r0, [pc, #20]	; (801cf5c <fiprintf+0x20>)
 801cf46:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf4a:	6800      	ldr	r0, [r0, #0]
 801cf4c:	9301      	str	r3, [sp, #4]
 801cf4e:	f001 fc57 	bl	801e800 <_vfiprintf_r>
 801cf52:	b002      	add	sp, #8
 801cf54:	f85d eb04 	ldr.w	lr, [sp], #4
 801cf58:	b003      	add	sp, #12
 801cf5a:	4770      	bx	lr
 801cf5c:	200001d8 	.word	0x200001d8

0801cf60 <rshift>:
 801cf60:	6903      	ldr	r3, [r0, #16]
 801cf62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801cf66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cf6a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801cf6e:	f100 0414 	add.w	r4, r0, #20
 801cf72:	dd45      	ble.n	801d000 <rshift+0xa0>
 801cf74:	f011 011f 	ands.w	r1, r1, #31
 801cf78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801cf7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801cf80:	d10c      	bne.n	801cf9c <rshift+0x3c>
 801cf82:	f100 0710 	add.w	r7, r0, #16
 801cf86:	4629      	mov	r1, r5
 801cf88:	42b1      	cmp	r1, r6
 801cf8a:	d334      	bcc.n	801cff6 <rshift+0x96>
 801cf8c:	1a9b      	subs	r3, r3, r2
 801cf8e:	009b      	lsls	r3, r3, #2
 801cf90:	1eea      	subs	r2, r5, #3
 801cf92:	4296      	cmp	r6, r2
 801cf94:	bf38      	it	cc
 801cf96:	2300      	movcc	r3, #0
 801cf98:	4423      	add	r3, r4
 801cf9a:	e015      	b.n	801cfc8 <rshift+0x68>
 801cf9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801cfa0:	f1c1 0820 	rsb	r8, r1, #32
 801cfa4:	40cf      	lsrs	r7, r1
 801cfa6:	f105 0e04 	add.w	lr, r5, #4
 801cfaa:	46a1      	mov	r9, r4
 801cfac:	4576      	cmp	r6, lr
 801cfae:	46f4      	mov	ip, lr
 801cfb0:	d815      	bhi.n	801cfde <rshift+0x7e>
 801cfb2:	1a9b      	subs	r3, r3, r2
 801cfb4:	009a      	lsls	r2, r3, #2
 801cfb6:	3a04      	subs	r2, #4
 801cfb8:	3501      	adds	r5, #1
 801cfba:	42ae      	cmp	r6, r5
 801cfbc:	bf38      	it	cc
 801cfbe:	2200      	movcc	r2, #0
 801cfc0:	18a3      	adds	r3, r4, r2
 801cfc2:	50a7      	str	r7, [r4, r2]
 801cfc4:	b107      	cbz	r7, 801cfc8 <rshift+0x68>
 801cfc6:	3304      	adds	r3, #4
 801cfc8:	1b1a      	subs	r2, r3, r4
 801cfca:	42a3      	cmp	r3, r4
 801cfcc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801cfd0:	bf08      	it	eq
 801cfd2:	2300      	moveq	r3, #0
 801cfd4:	6102      	str	r2, [r0, #16]
 801cfd6:	bf08      	it	eq
 801cfd8:	6143      	streq	r3, [r0, #20]
 801cfda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cfde:	f8dc c000 	ldr.w	ip, [ip]
 801cfe2:	fa0c fc08 	lsl.w	ip, ip, r8
 801cfe6:	ea4c 0707 	orr.w	r7, ip, r7
 801cfea:	f849 7b04 	str.w	r7, [r9], #4
 801cfee:	f85e 7b04 	ldr.w	r7, [lr], #4
 801cff2:	40cf      	lsrs	r7, r1
 801cff4:	e7da      	b.n	801cfac <rshift+0x4c>
 801cff6:	f851 cb04 	ldr.w	ip, [r1], #4
 801cffa:	f847 cf04 	str.w	ip, [r7, #4]!
 801cffe:	e7c3      	b.n	801cf88 <rshift+0x28>
 801d000:	4623      	mov	r3, r4
 801d002:	e7e1      	b.n	801cfc8 <rshift+0x68>

0801d004 <__hexdig_fun>:
 801d004:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d008:	2b09      	cmp	r3, #9
 801d00a:	d802      	bhi.n	801d012 <__hexdig_fun+0xe>
 801d00c:	3820      	subs	r0, #32
 801d00e:	b2c0      	uxtb	r0, r0
 801d010:	4770      	bx	lr
 801d012:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d016:	2b05      	cmp	r3, #5
 801d018:	d801      	bhi.n	801d01e <__hexdig_fun+0x1a>
 801d01a:	3847      	subs	r0, #71	; 0x47
 801d01c:	e7f7      	b.n	801d00e <__hexdig_fun+0xa>
 801d01e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d022:	2b05      	cmp	r3, #5
 801d024:	d801      	bhi.n	801d02a <__hexdig_fun+0x26>
 801d026:	3827      	subs	r0, #39	; 0x27
 801d028:	e7f1      	b.n	801d00e <__hexdig_fun+0xa>
 801d02a:	2000      	movs	r0, #0
 801d02c:	4770      	bx	lr
	...

0801d030 <__gethex>:
 801d030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d034:	ed2d 8b02 	vpush	{d8}
 801d038:	b089      	sub	sp, #36	; 0x24
 801d03a:	ee08 0a10 	vmov	s16, r0
 801d03e:	9304      	str	r3, [sp, #16]
 801d040:	4bbc      	ldr	r3, [pc, #752]	; (801d334 <__gethex+0x304>)
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	9301      	str	r3, [sp, #4]
 801d046:	4618      	mov	r0, r3
 801d048:	468b      	mov	fp, r1
 801d04a:	4690      	mov	r8, r2
 801d04c:	f7e3 f8d0 	bl	80001f0 <strlen>
 801d050:	9b01      	ldr	r3, [sp, #4]
 801d052:	f8db 2000 	ldr.w	r2, [fp]
 801d056:	4403      	add	r3, r0
 801d058:	4682      	mov	sl, r0
 801d05a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d05e:	9305      	str	r3, [sp, #20]
 801d060:	1c93      	adds	r3, r2, #2
 801d062:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d066:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d06a:	32fe      	adds	r2, #254	; 0xfe
 801d06c:	18d1      	adds	r1, r2, r3
 801d06e:	461f      	mov	r7, r3
 801d070:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d074:	9100      	str	r1, [sp, #0]
 801d076:	2830      	cmp	r0, #48	; 0x30
 801d078:	d0f8      	beq.n	801d06c <__gethex+0x3c>
 801d07a:	f7ff ffc3 	bl	801d004 <__hexdig_fun>
 801d07e:	4604      	mov	r4, r0
 801d080:	2800      	cmp	r0, #0
 801d082:	d13a      	bne.n	801d0fa <__gethex+0xca>
 801d084:	9901      	ldr	r1, [sp, #4]
 801d086:	4652      	mov	r2, sl
 801d088:	4638      	mov	r0, r7
 801d08a:	f7fd ff96 	bl	801afba <strncmp>
 801d08e:	4605      	mov	r5, r0
 801d090:	2800      	cmp	r0, #0
 801d092:	d168      	bne.n	801d166 <__gethex+0x136>
 801d094:	f817 000a 	ldrb.w	r0, [r7, sl]
 801d098:	eb07 060a 	add.w	r6, r7, sl
 801d09c:	f7ff ffb2 	bl	801d004 <__hexdig_fun>
 801d0a0:	2800      	cmp	r0, #0
 801d0a2:	d062      	beq.n	801d16a <__gethex+0x13a>
 801d0a4:	4633      	mov	r3, r6
 801d0a6:	7818      	ldrb	r0, [r3, #0]
 801d0a8:	2830      	cmp	r0, #48	; 0x30
 801d0aa:	461f      	mov	r7, r3
 801d0ac:	f103 0301 	add.w	r3, r3, #1
 801d0b0:	d0f9      	beq.n	801d0a6 <__gethex+0x76>
 801d0b2:	f7ff ffa7 	bl	801d004 <__hexdig_fun>
 801d0b6:	2301      	movs	r3, #1
 801d0b8:	fab0 f480 	clz	r4, r0
 801d0bc:	0964      	lsrs	r4, r4, #5
 801d0be:	4635      	mov	r5, r6
 801d0c0:	9300      	str	r3, [sp, #0]
 801d0c2:	463a      	mov	r2, r7
 801d0c4:	4616      	mov	r6, r2
 801d0c6:	3201      	adds	r2, #1
 801d0c8:	7830      	ldrb	r0, [r6, #0]
 801d0ca:	f7ff ff9b 	bl	801d004 <__hexdig_fun>
 801d0ce:	2800      	cmp	r0, #0
 801d0d0:	d1f8      	bne.n	801d0c4 <__gethex+0x94>
 801d0d2:	9901      	ldr	r1, [sp, #4]
 801d0d4:	4652      	mov	r2, sl
 801d0d6:	4630      	mov	r0, r6
 801d0d8:	f7fd ff6f 	bl	801afba <strncmp>
 801d0dc:	b980      	cbnz	r0, 801d100 <__gethex+0xd0>
 801d0de:	b94d      	cbnz	r5, 801d0f4 <__gethex+0xc4>
 801d0e0:	eb06 050a 	add.w	r5, r6, sl
 801d0e4:	462a      	mov	r2, r5
 801d0e6:	4616      	mov	r6, r2
 801d0e8:	3201      	adds	r2, #1
 801d0ea:	7830      	ldrb	r0, [r6, #0]
 801d0ec:	f7ff ff8a 	bl	801d004 <__hexdig_fun>
 801d0f0:	2800      	cmp	r0, #0
 801d0f2:	d1f8      	bne.n	801d0e6 <__gethex+0xb6>
 801d0f4:	1bad      	subs	r5, r5, r6
 801d0f6:	00ad      	lsls	r5, r5, #2
 801d0f8:	e004      	b.n	801d104 <__gethex+0xd4>
 801d0fa:	2400      	movs	r4, #0
 801d0fc:	4625      	mov	r5, r4
 801d0fe:	e7e0      	b.n	801d0c2 <__gethex+0x92>
 801d100:	2d00      	cmp	r5, #0
 801d102:	d1f7      	bne.n	801d0f4 <__gethex+0xc4>
 801d104:	7833      	ldrb	r3, [r6, #0]
 801d106:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d10a:	2b50      	cmp	r3, #80	; 0x50
 801d10c:	d13b      	bne.n	801d186 <__gethex+0x156>
 801d10e:	7873      	ldrb	r3, [r6, #1]
 801d110:	2b2b      	cmp	r3, #43	; 0x2b
 801d112:	d02c      	beq.n	801d16e <__gethex+0x13e>
 801d114:	2b2d      	cmp	r3, #45	; 0x2d
 801d116:	d02e      	beq.n	801d176 <__gethex+0x146>
 801d118:	1c71      	adds	r1, r6, #1
 801d11a:	f04f 0900 	mov.w	r9, #0
 801d11e:	7808      	ldrb	r0, [r1, #0]
 801d120:	f7ff ff70 	bl	801d004 <__hexdig_fun>
 801d124:	1e43      	subs	r3, r0, #1
 801d126:	b2db      	uxtb	r3, r3
 801d128:	2b18      	cmp	r3, #24
 801d12a:	d82c      	bhi.n	801d186 <__gethex+0x156>
 801d12c:	f1a0 0210 	sub.w	r2, r0, #16
 801d130:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d134:	f7ff ff66 	bl	801d004 <__hexdig_fun>
 801d138:	1e43      	subs	r3, r0, #1
 801d13a:	b2db      	uxtb	r3, r3
 801d13c:	2b18      	cmp	r3, #24
 801d13e:	d91d      	bls.n	801d17c <__gethex+0x14c>
 801d140:	f1b9 0f00 	cmp.w	r9, #0
 801d144:	d000      	beq.n	801d148 <__gethex+0x118>
 801d146:	4252      	negs	r2, r2
 801d148:	4415      	add	r5, r2
 801d14a:	f8cb 1000 	str.w	r1, [fp]
 801d14e:	b1e4      	cbz	r4, 801d18a <__gethex+0x15a>
 801d150:	9b00      	ldr	r3, [sp, #0]
 801d152:	2b00      	cmp	r3, #0
 801d154:	bf14      	ite	ne
 801d156:	2700      	movne	r7, #0
 801d158:	2706      	moveq	r7, #6
 801d15a:	4638      	mov	r0, r7
 801d15c:	b009      	add	sp, #36	; 0x24
 801d15e:	ecbd 8b02 	vpop	{d8}
 801d162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d166:	463e      	mov	r6, r7
 801d168:	4625      	mov	r5, r4
 801d16a:	2401      	movs	r4, #1
 801d16c:	e7ca      	b.n	801d104 <__gethex+0xd4>
 801d16e:	f04f 0900 	mov.w	r9, #0
 801d172:	1cb1      	adds	r1, r6, #2
 801d174:	e7d3      	b.n	801d11e <__gethex+0xee>
 801d176:	f04f 0901 	mov.w	r9, #1
 801d17a:	e7fa      	b.n	801d172 <__gethex+0x142>
 801d17c:	230a      	movs	r3, #10
 801d17e:	fb03 0202 	mla	r2, r3, r2, r0
 801d182:	3a10      	subs	r2, #16
 801d184:	e7d4      	b.n	801d130 <__gethex+0x100>
 801d186:	4631      	mov	r1, r6
 801d188:	e7df      	b.n	801d14a <__gethex+0x11a>
 801d18a:	1bf3      	subs	r3, r6, r7
 801d18c:	3b01      	subs	r3, #1
 801d18e:	4621      	mov	r1, r4
 801d190:	2b07      	cmp	r3, #7
 801d192:	dc0b      	bgt.n	801d1ac <__gethex+0x17c>
 801d194:	ee18 0a10 	vmov	r0, s16
 801d198:	f000 faea 	bl	801d770 <_Balloc>
 801d19c:	4604      	mov	r4, r0
 801d19e:	b940      	cbnz	r0, 801d1b2 <__gethex+0x182>
 801d1a0:	4b65      	ldr	r3, [pc, #404]	; (801d338 <__gethex+0x308>)
 801d1a2:	4602      	mov	r2, r0
 801d1a4:	21de      	movs	r1, #222	; 0xde
 801d1a6:	4865      	ldr	r0, [pc, #404]	; (801d33c <__gethex+0x30c>)
 801d1a8:	f7fe ff60 	bl	801c06c <__assert_func>
 801d1ac:	3101      	adds	r1, #1
 801d1ae:	105b      	asrs	r3, r3, #1
 801d1b0:	e7ee      	b.n	801d190 <__gethex+0x160>
 801d1b2:	f100 0914 	add.w	r9, r0, #20
 801d1b6:	f04f 0b00 	mov.w	fp, #0
 801d1ba:	f1ca 0301 	rsb	r3, sl, #1
 801d1be:	f8cd 9008 	str.w	r9, [sp, #8]
 801d1c2:	f8cd b000 	str.w	fp, [sp]
 801d1c6:	9306      	str	r3, [sp, #24]
 801d1c8:	42b7      	cmp	r7, r6
 801d1ca:	d340      	bcc.n	801d24e <__gethex+0x21e>
 801d1cc:	9802      	ldr	r0, [sp, #8]
 801d1ce:	9b00      	ldr	r3, [sp, #0]
 801d1d0:	f840 3b04 	str.w	r3, [r0], #4
 801d1d4:	eba0 0009 	sub.w	r0, r0, r9
 801d1d8:	1080      	asrs	r0, r0, #2
 801d1da:	0146      	lsls	r6, r0, #5
 801d1dc:	6120      	str	r0, [r4, #16]
 801d1de:	4618      	mov	r0, r3
 801d1e0:	f000 fbbc 	bl	801d95c <__hi0bits>
 801d1e4:	1a30      	subs	r0, r6, r0
 801d1e6:	f8d8 6000 	ldr.w	r6, [r8]
 801d1ea:	42b0      	cmp	r0, r6
 801d1ec:	dd63      	ble.n	801d2b6 <__gethex+0x286>
 801d1ee:	1b87      	subs	r7, r0, r6
 801d1f0:	4639      	mov	r1, r7
 801d1f2:	4620      	mov	r0, r4
 801d1f4:	f000 ff56 	bl	801e0a4 <__any_on>
 801d1f8:	4682      	mov	sl, r0
 801d1fa:	b1a8      	cbz	r0, 801d228 <__gethex+0x1f8>
 801d1fc:	1e7b      	subs	r3, r7, #1
 801d1fe:	1159      	asrs	r1, r3, #5
 801d200:	f003 021f 	and.w	r2, r3, #31
 801d204:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d208:	f04f 0a01 	mov.w	sl, #1
 801d20c:	fa0a f202 	lsl.w	r2, sl, r2
 801d210:	420a      	tst	r2, r1
 801d212:	d009      	beq.n	801d228 <__gethex+0x1f8>
 801d214:	4553      	cmp	r3, sl
 801d216:	dd05      	ble.n	801d224 <__gethex+0x1f4>
 801d218:	1eb9      	subs	r1, r7, #2
 801d21a:	4620      	mov	r0, r4
 801d21c:	f000 ff42 	bl	801e0a4 <__any_on>
 801d220:	2800      	cmp	r0, #0
 801d222:	d145      	bne.n	801d2b0 <__gethex+0x280>
 801d224:	f04f 0a02 	mov.w	sl, #2
 801d228:	4639      	mov	r1, r7
 801d22a:	4620      	mov	r0, r4
 801d22c:	f7ff fe98 	bl	801cf60 <rshift>
 801d230:	443d      	add	r5, r7
 801d232:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d236:	42ab      	cmp	r3, r5
 801d238:	da4c      	bge.n	801d2d4 <__gethex+0x2a4>
 801d23a:	ee18 0a10 	vmov	r0, s16
 801d23e:	4621      	mov	r1, r4
 801d240:	f000 fad6 	bl	801d7f0 <_Bfree>
 801d244:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d246:	2300      	movs	r3, #0
 801d248:	6013      	str	r3, [r2, #0]
 801d24a:	27a3      	movs	r7, #163	; 0xa3
 801d24c:	e785      	b.n	801d15a <__gethex+0x12a>
 801d24e:	1e73      	subs	r3, r6, #1
 801d250:	9a05      	ldr	r2, [sp, #20]
 801d252:	9303      	str	r3, [sp, #12]
 801d254:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d258:	4293      	cmp	r3, r2
 801d25a:	d019      	beq.n	801d290 <__gethex+0x260>
 801d25c:	f1bb 0f20 	cmp.w	fp, #32
 801d260:	d107      	bne.n	801d272 <__gethex+0x242>
 801d262:	9b02      	ldr	r3, [sp, #8]
 801d264:	9a00      	ldr	r2, [sp, #0]
 801d266:	f843 2b04 	str.w	r2, [r3], #4
 801d26a:	9302      	str	r3, [sp, #8]
 801d26c:	2300      	movs	r3, #0
 801d26e:	9300      	str	r3, [sp, #0]
 801d270:	469b      	mov	fp, r3
 801d272:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d276:	f7ff fec5 	bl	801d004 <__hexdig_fun>
 801d27a:	9b00      	ldr	r3, [sp, #0]
 801d27c:	f000 000f 	and.w	r0, r0, #15
 801d280:	fa00 f00b 	lsl.w	r0, r0, fp
 801d284:	4303      	orrs	r3, r0
 801d286:	9300      	str	r3, [sp, #0]
 801d288:	f10b 0b04 	add.w	fp, fp, #4
 801d28c:	9b03      	ldr	r3, [sp, #12]
 801d28e:	e00d      	b.n	801d2ac <__gethex+0x27c>
 801d290:	9b03      	ldr	r3, [sp, #12]
 801d292:	9a06      	ldr	r2, [sp, #24]
 801d294:	4413      	add	r3, r2
 801d296:	42bb      	cmp	r3, r7
 801d298:	d3e0      	bcc.n	801d25c <__gethex+0x22c>
 801d29a:	4618      	mov	r0, r3
 801d29c:	9901      	ldr	r1, [sp, #4]
 801d29e:	9307      	str	r3, [sp, #28]
 801d2a0:	4652      	mov	r2, sl
 801d2a2:	f7fd fe8a 	bl	801afba <strncmp>
 801d2a6:	9b07      	ldr	r3, [sp, #28]
 801d2a8:	2800      	cmp	r0, #0
 801d2aa:	d1d7      	bne.n	801d25c <__gethex+0x22c>
 801d2ac:	461e      	mov	r6, r3
 801d2ae:	e78b      	b.n	801d1c8 <__gethex+0x198>
 801d2b0:	f04f 0a03 	mov.w	sl, #3
 801d2b4:	e7b8      	b.n	801d228 <__gethex+0x1f8>
 801d2b6:	da0a      	bge.n	801d2ce <__gethex+0x29e>
 801d2b8:	1a37      	subs	r7, r6, r0
 801d2ba:	4621      	mov	r1, r4
 801d2bc:	ee18 0a10 	vmov	r0, s16
 801d2c0:	463a      	mov	r2, r7
 801d2c2:	f000 fcb1 	bl	801dc28 <__lshift>
 801d2c6:	1bed      	subs	r5, r5, r7
 801d2c8:	4604      	mov	r4, r0
 801d2ca:	f100 0914 	add.w	r9, r0, #20
 801d2ce:	f04f 0a00 	mov.w	sl, #0
 801d2d2:	e7ae      	b.n	801d232 <__gethex+0x202>
 801d2d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d2d8:	42a8      	cmp	r0, r5
 801d2da:	dd72      	ble.n	801d3c2 <__gethex+0x392>
 801d2dc:	1b45      	subs	r5, r0, r5
 801d2de:	42ae      	cmp	r6, r5
 801d2e0:	dc36      	bgt.n	801d350 <__gethex+0x320>
 801d2e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d2e6:	2b02      	cmp	r3, #2
 801d2e8:	d02a      	beq.n	801d340 <__gethex+0x310>
 801d2ea:	2b03      	cmp	r3, #3
 801d2ec:	d02c      	beq.n	801d348 <__gethex+0x318>
 801d2ee:	2b01      	cmp	r3, #1
 801d2f0:	d115      	bne.n	801d31e <__gethex+0x2ee>
 801d2f2:	42ae      	cmp	r6, r5
 801d2f4:	d113      	bne.n	801d31e <__gethex+0x2ee>
 801d2f6:	2e01      	cmp	r6, #1
 801d2f8:	d10b      	bne.n	801d312 <__gethex+0x2e2>
 801d2fa:	9a04      	ldr	r2, [sp, #16]
 801d2fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d300:	6013      	str	r3, [r2, #0]
 801d302:	2301      	movs	r3, #1
 801d304:	6123      	str	r3, [r4, #16]
 801d306:	f8c9 3000 	str.w	r3, [r9]
 801d30a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d30c:	2762      	movs	r7, #98	; 0x62
 801d30e:	601c      	str	r4, [r3, #0]
 801d310:	e723      	b.n	801d15a <__gethex+0x12a>
 801d312:	1e71      	subs	r1, r6, #1
 801d314:	4620      	mov	r0, r4
 801d316:	f000 fec5 	bl	801e0a4 <__any_on>
 801d31a:	2800      	cmp	r0, #0
 801d31c:	d1ed      	bne.n	801d2fa <__gethex+0x2ca>
 801d31e:	ee18 0a10 	vmov	r0, s16
 801d322:	4621      	mov	r1, r4
 801d324:	f000 fa64 	bl	801d7f0 <_Bfree>
 801d328:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d32a:	2300      	movs	r3, #0
 801d32c:	6013      	str	r3, [r2, #0]
 801d32e:	2750      	movs	r7, #80	; 0x50
 801d330:	e713      	b.n	801d15a <__gethex+0x12a>
 801d332:	bf00      	nop
 801d334:	0802105c 	.word	0x0802105c
 801d338:	08020fdf 	.word	0x08020fdf
 801d33c:	08020ff0 	.word	0x08020ff0
 801d340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d342:	2b00      	cmp	r3, #0
 801d344:	d1eb      	bne.n	801d31e <__gethex+0x2ee>
 801d346:	e7d8      	b.n	801d2fa <__gethex+0x2ca>
 801d348:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d1d5      	bne.n	801d2fa <__gethex+0x2ca>
 801d34e:	e7e6      	b.n	801d31e <__gethex+0x2ee>
 801d350:	1e6f      	subs	r7, r5, #1
 801d352:	f1ba 0f00 	cmp.w	sl, #0
 801d356:	d131      	bne.n	801d3bc <__gethex+0x38c>
 801d358:	b127      	cbz	r7, 801d364 <__gethex+0x334>
 801d35a:	4639      	mov	r1, r7
 801d35c:	4620      	mov	r0, r4
 801d35e:	f000 fea1 	bl	801e0a4 <__any_on>
 801d362:	4682      	mov	sl, r0
 801d364:	117b      	asrs	r3, r7, #5
 801d366:	2101      	movs	r1, #1
 801d368:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d36c:	f007 071f 	and.w	r7, r7, #31
 801d370:	fa01 f707 	lsl.w	r7, r1, r7
 801d374:	421f      	tst	r7, r3
 801d376:	4629      	mov	r1, r5
 801d378:	4620      	mov	r0, r4
 801d37a:	bf18      	it	ne
 801d37c:	f04a 0a02 	orrne.w	sl, sl, #2
 801d380:	1b76      	subs	r6, r6, r5
 801d382:	f7ff fded 	bl	801cf60 <rshift>
 801d386:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d38a:	2702      	movs	r7, #2
 801d38c:	f1ba 0f00 	cmp.w	sl, #0
 801d390:	d048      	beq.n	801d424 <__gethex+0x3f4>
 801d392:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d396:	2b02      	cmp	r3, #2
 801d398:	d015      	beq.n	801d3c6 <__gethex+0x396>
 801d39a:	2b03      	cmp	r3, #3
 801d39c:	d017      	beq.n	801d3ce <__gethex+0x39e>
 801d39e:	2b01      	cmp	r3, #1
 801d3a0:	d109      	bne.n	801d3b6 <__gethex+0x386>
 801d3a2:	f01a 0f02 	tst.w	sl, #2
 801d3a6:	d006      	beq.n	801d3b6 <__gethex+0x386>
 801d3a8:	f8d9 0000 	ldr.w	r0, [r9]
 801d3ac:	ea4a 0a00 	orr.w	sl, sl, r0
 801d3b0:	f01a 0f01 	tst.w	sl, #1
 801d3b4:	d10e      	bne.n	801d3d4 <__gethex+0x3a4>
 801d3b6:	f047 0710 	orr.w	r7, r7, #16
 801d3ba:	e033      	b.n	801d424 <__gethex+0x3f4>
 801d3bc:	f04f 0a01 	mov.w	sl, #1
 801d3c0:	e7d0      	b.n	801d364 <__gethex+0x334>
 801d3c2:	2701      	movs	r7, #1
 801d3c4:	e7e2      	b.n	801d38c <__gethex+0x35c>
 801d3c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d3c8:	f1c3 0301 	rsb	r3, r3, #1
 801d3cc:	9315      	str	r3, [sp, #84]	; 0x54
 801d3ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	d0f0      	beq.n	801d3b6 <__gethex+0x386>
 801d3d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d3d8:	f104 0314 	add.w	r3, r4, #20
 801d3dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d3e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d3e4:	f04f 0c00 	mov.w	ip, #0
 801d3e8:	4618      	mov	r0, r3
 801d3ea:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3ee:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d3f2:	d01c      	beq.n	801d42e <__gethex+0x3fe>
 801d3f4:	3201      	adds	r2, #1
 801d3f6:	6002      	str	r2, [r0, #0]
 801d3f8:	2f02      	cmp	r7, #2
 801d3fa:	f104 0314 	add.w	r3, r4, #20
 801d3fe:	d13f      	bne.n	801d480 <__gethex+0x450>
 801d400:	f8d8 2000 	ldr.w	r2, [r8]
 801d404:	3a01      	subs	r2, #1
 801d406:	42b2      	cmp	r2, r6
 801d408:	d10a      	bne.n	801d420 <__gethex+0x3f0>
 801d40a:	1171      	asrs	r1, r6, #5
 801d40c:	2201      	movs	r2, #1
 801d40e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d412:	f006 061f 	and.w	r6, r6, #31
 801d416:	fa02 f606 	lsl.w	r6, r2, r6
 801d41a:	421e      	tst	r6, r3
 801d41c:	bf18      	it	ne
 801d41e:	4617      	movne	r7, r2
 801d420:	f047 0720 	orr.w	r7, r7, #32
 801d424:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d426:	601c      	str	r4, [r3, #0]
 801d428:	9b04      	ldr	r3, [sp, #16]
 801d42a:	601d      	str	r5, [r3, #0]
 801d42c:	e695      	b.n	801d15a <__gethex+0x12a>
 801d42e:	4299      	cmp	r1, r3
 801d430:	f843 cc04 	str.w	ip, [r3, #-4]
 801d434:	d8d8      	bhi.n	801d3e8 <__gethex+0x3b8>
 801d436:	68a3      	ldr	r3, [r4, #8]
 801d438:	459b      	cmp	fp, r3
 801d43a:	db19      	blt.n	801d470 <__gethex+0x440>
 801d43c:	6861      	ldr	r1, [r4, #4]
 801d43e:	ee18 0a10 	vmov	r0, s16
 801d442:	3101      	adds	r1, #1
 801d444:	f000 f994 	bl	801d770 <_Balloc>
 801d448:	4681      	mov	r9, r0
 801d44a:	b918      	cbnz	r0, 801d454 <__gethex+0x424>
 801d44c:	4b1a      	ldr	r3, [pc, #104]	; (801d4b8 <__gethex+0x488>)
 801d44e:	4602      	mov	r2, r0
 801d450:	2184      	movs	r1, #132	; 0x84
 801d452:	e6a8      	b.n	801d1a6 <__gethex+0x176>
 801d454:	6922      	ldr	r2, [r4, #16]
 801d456:	3202      	adds	r2, #2
 801d458:	f104 010c 	add.w	r1, r4, #12
 801d45c:	0092      	lsls	r2, r2, #2
 801d45e:	300c      	adds	r0, #12
 801d460:	f7fc fc6c 	bl	8019d3c <memcpy>
 801d464:	4621      	mov	r1, r4
 801d466:	ee18 0a10 	vmov	r0, s16
 801d46a:	f000 f9c1 	bl	801d7f0 <_Bfree>
 801d46e:	464c      	mov	r4, r9
 801d470:	6923      	ldr	r3, [r4, #16]
 801d472:	1c5a      	adds	r2, r3, #1
 801d474:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d478:	6122      	str	r2, [r4, #16]
 801d47a:	2201      	movs	r2, #1
 801d47c:	615a      	str	r2, [r3, #20]
 801d47e:	e7bb      	b.n	801d3f8 <__gethex+0x3c8>
 801d480:	6922      	ldr	r2, [r4, #16]
 801d482:	455a      	cmp	r2, fp
 801d484:	dd0b      	ble.n	801d49e <__gethex+0x46e>
 801d486:	2101      	movs	r1, #1
 801d488:	4620      	mov	r0, r4
 801d48a:	f7ff fd69 	bl	801cf60 <rshift>
 801d48e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d492:	3501      	adds	r5, #1
 801d494:	42ab      	cmp	r3, r5
 801d496:	f6ff aed0 	blt.w	801d23a <__gethex+0x20a>
 801d49a:	2701      	movs	r7, #1
 801d49c:	e7c0      	b.n	801d420 <__gethex+0x3f0>
 801d49e:	f016 061f 	ands.w	r6, r6, #31
 801d4a2:	d0fa      	beq.n	801d49a <__gethex+0x46a>
 801d4a4:	449a      	add	sl, r3
 801d4a6:	f1c6 0620 	rsb	r6, r6, #32
 801d4aa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801d4ae:	f000 fa55 	bl	801d95c <__hi0bits>
 801d4b2:	42b0      	cmp	r0, r6
 801d4b4:	dbe7      	blt.n	801d486 <__gethex+0x456>
 801d4b6:	e7f0      	b.n	801d49a <__gethex+0x46a>
 801d4b8:	08020fdf 	.word	0x08020fdf

0801d4bc <L_shift>:
 801d4bc:	f1c2 0208 	rsb	r2, r2, #8
 801d4c0:	0092      	lsls	r2, r2, #2
 801d4c2:	b570      	push	{r4, r5, r6, lr}
 801d4c4:	f1c2 0620 	rsb	r6, r2, #32
 801d4c8:	6843      	ldr	r3, [r0, #4]
 801d4ca:	6804      	ldr	r4, [r0, #0]
 801d4cc:	fa03 f506 	lsl.w	r5, r3, r6
 801d4d0:	432c      	orrs	r4, r5
 801d4d2:	40d3      	lsrs	r3, r2
 801d4d4:	6004      	str	r4, [r0, #0]
 801d4d6:	f840 3f04 	str.w	r3, [r0, #4]!
 801d4da:	4288      	cmp	r0, r1
 801d4dc:	d3f4      	bcc.n	801d4c8 <L_shift+0xc>
 801d4de:	bd70      	pop	{r4, r5, r6, pc}

0801d4e0 <__match>:
 801d4e0:	b530      	push	{r4, r5, lr}
 801d4e2:	6803      	ldr	r3, [r0, #0]
 801d4e4:	3301      	adds	r3, #1
 801d4e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d4ea:	b914      	cbnz	r4, 801d4f2 <__match+0x12>
 801d4ec:	6003      	str	r3, [r0, #0]
 801d4ee:	2001      	movs	r0, #1
 801d4f0:	bd30      	pop	{r4, r5, pc}
 801d4f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d4fa:	2d19      	cmp	r5, #25
 801d4fc:	bf98      	it	ls
 801d4fe:	3220      	addls	r2, #32
 801d500:	42a2      	cmp	r2, r4
 801d502:	d0f0      	beq.n	801d4e6 <__match+0x6>
 801d504:	2000      	movs	r0, #0
 801d506:	e7f3      	b.n	801d4f0 <__match+0x10>

0801d508 <__hexnan>:
 801d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d50c:	680b      	ldr	r3, [r1, #0]
 801d50e:	6801      	ldr	r1, [r0, #0]
 801d510:	115e      	asrs	r6, r3, #5
 801d512:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d516:	f013 031f 	ands.w	r3, r3, #31
 801d51a:	b087      	sub	sp, #28
 801d51c:	bf18      	it	ne
 801d51e:	3604      	addne	r6, #4
 801d520:	2500      	movs	r5, #0
 801d522:	1f37      	subs	r7, r6, #4
 801d524:	4682      	mov	sl, r0
 801d526:	4690      	mov	r8, r2
 801d528:	9301      	str	r3, [sp, #4]
 801d52a:	f846 5c04 	str.w	r5, [r6, #-4]
 801d52e:	46b9      	mov	r9, r7
 801d530:	463c      	mov	r4, r7
 801d532:	9502      	str	r5, [sp, #8]
 801d534:	46ab      	mov	fp, r5
 801d536:	784a      	ldrb	r2, [r1, #1]
 801d538:	1c4b      	adds	r3, r1, #1
 801d53a:	9303      	str	r3, [sp, #12]
 801d53c:	b342      	cbz	r2, 801d590 <__hexnan+0x88>
 801d53e:	4610      	mov	r0, r2
 801d540:	9105      	str	r1, [sp, #20]
 801d542:	9204      	str	r2, [sp, #16]
 801d544:	f7ff fd5e 	bl	801d004 <__hexdig_fun>
 801d548:	2800      	cmp	r0, #0
 801d54a:	d14f      	bne.n	801d5ec <__hexnan+0xe4>
 801d54c:	9a04      	ldr	r2, [sp, #16]
 801d54e:	9905      	ldr	r1, [sp, #20]
 801d550:	2a20      	cmp	r2, #32
 801d552:	d818      	bhi.n	801d586 <__hexnan+0x7e>
 801d554:	9b02      	ldr	r3, [sp, #8]
 801d556:	459b      	cmp	fp, r3
 801d558:	dd13      	ble.n	801d582 <__hexnan+0x7a>
 801d55a:	454c      	cmp	r4, r9
 801d55c:	d206      	bcs.n	801d56c <__hexnan+0x64>
 801d55e:	2d07      	cmp	r5, #7
 801d560:	dc04      	bgt.n	801d56c <__hexnan+0x64>
 801d562:	462a      	mov	r2, r5
 801d564:	4649      	mov	r1, r9
 801d566:	4620      	mov	r0, r4
 801d568:	f7ff ffa8 	bl	801d4bc <L_shift>
 801d56c:	4544      	cmp	r4, r8
 801d56e:	d950      	bls.n	801d612 <__hexnan+0x10a>
 801d570:	2300      	movs	r3, #0
 801d572:	f1a4 0904 	sub.w	r9, r4, #4
 801d576:	f844 3c04 	str.w	r3, [r4, #-4]
 801d57a:	f8cd b008 	str.w	fp, [sp, #8]
 801d57e:	464c      	mov	r4, r9
 801d580:	461d      	mov	r5, r3
 801d582:	9903      	ldr	r1, [sp, #12]
 801d584:	e7d7      	b.n	801d536 <__hexnan+0x2e>
 801d586:	2a29      	cmp	r2, #41	; 0x29
 801d588:	d156      	bne.n	801d638 <__hexnan+0x130>
 801d58a:	3102      	adds	r1, #2
 801d58c:	f8ca 1000 	str.w	r1, [sl]
 801d590:	f1bb 0f00 	cmp.w	fp, #0
 801d594:	d050      	beq.n	801d638 <__hexnan+0x130>
 801d596:	454c      	cmp	r4, r9
 801d598:	d206      	bcs.n	801d5a8 <__hexnan+0xa0>
 801d59a:	2d07      	cmp	r5, #7
 801d59c:	dc04      	bgt.n	801d5a8 <__hexnan+0xa0>
 801d59e:	462a      	mov	r2, r5
 801d5a0:	4649      	mov	r1, r9
 801d5a2:	4620      	mov	r0, r4
 801d5a4:	f7ff ff8a 	bl	801d4bc <L_shift>
 801d5a8:	4544      	cmp	r4, r8
 801d5aa:	d934      	bls.n	801d616 <__hexnan+0x10e>
 801d5ac:	f1a8 0204 	sub.w	r2, r8, #4
 801d5b0:	4623      	mov	r3, r4
 801d5b2:	f853 1b04 	ldr.w	r1, [r3], #4
 801d5b6:	f842 1f04 	str.w	r1, [r2, #4]!
 801d5ba:	429f      	cmp	r7, r3
 801d5bc:	d2f9      	bcs.n	801d5b2 <__hexnan+0xaa>
 801d5be:	1b3b      	subs	r3, r7, r4
 801d5c0:	f023 0303 	bic.w	r3, r3, #3
 801d5c4:	3304      	adds	r3, #4
 801d5c6:	3401      	adds	r4, #1
 801d5c8:	3e03      	subs	r6, #3
 801d5ca:	42b4      	cmp	r4, r6
 801d5cc:	bf88      	it	hi
 801d5ce:	2304      	movhi	r3, #4
 801d5d0:	4443      	add	r3, r8
 801d5d2:	2200      	movs	r2, #0
 801d5d4:	f843 2b04 	str.w	r2, [r3], #4
 801d5d8:	429f      	cmp	r7, r3
 801d5da:	d2fb      	bcs.n	801d5d4 <__hexnan+0xcc>
 801d5dc:	683b      	ldr	r3, [r7, #0]
 801d5de:	b91b      	cbnz	r3, 801d5e8 <__hexnan+0xe0>
 801d5e0:	4547      	cmp	r7, r8
 801d5e2:	d127      	bne.n	801d634 <__hexnan+0x12c>
 801d5e4:	2301      	movs	r3, #1
 801d5e6:	603b      	str	r3, [r7, #0]
 801d5e8:	2005      	movs	r0, #5
 801d5ea:	e026      	b.n	801d63a <__hexnan+0x132>
 801d5ec:	3501      	adds	r5, #1
 801d5ee:	2d08      	cmp	r5, #8
 801d5f0:	f10b 0b01 	add.w	fp, fp, #1
 801d5f4:	dd06      	ble.n	801d604 <__hexnan+0xfc>
 801d5f6:	4544      	cmp	r4, r8
 801d5f8:	d9c3      	bls.n	801d582 <__hexnan+0x7a>
 801d5fa:	2300      	movs	r3, #0
 801d5fc:	f844 3c04 	str.w	r3, [r4, #-4]
 801d600:	2501      	movs	r5, #1
 801d602:	3c04      	subs	r4, #4
 801d604:	6822      	ldr	r2, [r4, #0]
 801d606:	f000 000f 	and.w	r0, r0, #15
 801d60a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801d60e:	6022      	str	r2, [r4, #0]
 801d610:	e7b7      	b.n	801d582 <__hexnan+0x7a>
 801d612:	2508      	movs	r5, #8
 801d614:	e7b5      	b.n	801d582 <__hexnan+0x7a>
 801d616:	9b01      	ldr	r3, [sp, #4]
 801d618:	2b00      	cmp	r3, #0
 801d61a:	d0df      	beq.n	801d5dc <__hexnan+0xd4>
 801d61c:	f04f 32ff 	mov.w	r2, #4294967295
 801d620:	f1c3 0320 	rsb	r3, r3, #32
 801d624:	fa22 f303 	lsr.w	r3, r2, r3
 801d628:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d62c:	401a      	ands	r2, r3
 801d62e:	f846 2c04 	str.w	r2, [r6, #-4]
 801d632:	e7d3      	b.n	801d5dc <__hexnan+0xd4>
 801d634:	3f04      	subs	r7, #4
 801d636:	e7d1      	b.n	801d5dc <__hexnan+0xd4>
 801d638:	2004      	movs	r0, #4
 801d63a:	b007      	add	sp, #28
 801d63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d640 <_localeconv_r>:
 801d640:	4800      	ldr	r0, [pc, #0]	; (801d644 <_localeconv_r+0x4>)
 801d642:	4770      	bx	lr
 801d644:	20000330 	.word	0x20000330

0801d648 <_lseek_r>:
 801d648:	b538      	push	{r3, r4, r5, lr}
 801d64a:	4d07      	ldr	r5, [pc, #28]	; (801d668 <_lseek_r+0x20>)
 801d64c:	4604      	mov	r4, r0
 801d64e:	4608      	mov	r0, r1
 801d650:	4611      	mov	r1, r2
 801d652:	2200      	movs	r2, #0
 801d654:	602a      	str	r2, [r5, #0]
 801d656:	461a      	mov	r2, r3
 801d658:	f7e5 fdfa 	bl	8003250 <_lseek>
 801d65c:	1c43      	adds	r3, r0, #1
 801d65e:	d102      	bne.n	801d666 <_lseek_r+0x1e>
 801d660:	682b      	ldr	r3, [r5, #0]
 801d662:	b103      	cbz	r3, 801d666 <_lseek_r+0x1e>
 801d664:	6023      	str	r3, [r4, #0]
 801d666:	bd38      	pop	{r3, r4, r5, pc}
 801d668:	20008f98 	.word	0x20008f98

0801d66c <__swhatbuf_r>:
 801d66c:	b570      	push	{r4, r5, r6, lr}
 801d66e:	460e      	mov	r6, r1
 801d670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d674:	2900      	cmp	r1, #0
 801d676:	b096      	sub	sp, #88	; 0x58
 801d678:	4614      	mov	r4, r2
 801d67a:	461d      	mov	r5, r3
 801d67c:	da07      	bge.n	801d68e <__swhatbuf_r+0x22>
 801d67e:	2300      	movs	r3, #0
 801d680:	602b      	str	r3, [r5, #0]
 801d682:	89b3      	ldrh	r3, [r6, #12]
 801d684:	061a      	lsls	r2, r3, #24
 801d686:	d410      	bmi.n	801d6aa <__swhatbuf_r+0x3e>
 801d688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d68c:	e00e      	b.n	801d6ac <__swhatbuf_r+0x40>
 801d68e:	466a      	mov	r2, sp
 801d690:	f001 fbc6 	bl	801ee20 <_fstat_r>
 801d694:	2800      	cmp	r0, #0
 801d696:	dbf2      	blt.n	801d67e <__swhatbuf_r+0x12>
 801d698:	9a01      	ldr	r2, [sp, #4]
 801d69a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d69e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d6a2:	425a      	negs	r2, r3
 801d6a4:	415a      	adcs	r2, r3
 801d6a6:	602a      	str	r2, [r5, #0]
 801d6a8:	e7ee      	b.n	801d688 <__swhatbuf_r+0x1c>
 801d6aa:	2340      	movs	r3, #64	; 0x40
 801d6ac:	2000      	movs	r0, #0
 801d6ae:	6023      	str	r3, [r4, #0]
 801d6b0:	b016      	add	sp, #88	; 0x58
 801d6b2:	bd70      	pop	{r4, r5, r6, pc}

0801d6b4 <__smakebuf_r>:
 801d6b4:	898b      	ldrh	r3, [r1, #12]
 801d6b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d6b8:	079d      	lsls	r5, r3, #30
 801d6ba:	4606      	mov	r6, r0
 801d6bc:	460c      	mov	r4, r1
 801d6be:	d507      	bpl.n	801d6d0 <__smakebuf_r+0x1c>
 801d6c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d6c4:	6023      	str	r3, [r4, #0]
 801d6c6:	6123      	str	r3, [r4, #16]
 801d6c8:	2301      	movs	r3, #1
 801d6ca:	6163      	str	r3, [r4, #20]
 801d6cc:	b002      	add	sp, #8
 801d6ce:	bd70      	pop	{r4, r5, r6, pc}
 801d6d0:	ab01      	add	r3, sp, #4
 801d6d2:	466a      	mov	r2, sp
 801d6d4:	f7ff ffca 	bl	801d66c <__swhatbuf_r>
 801d6d8:	9900      	ldr	r1, [sp, #0]
 801d6da:	4605      	mov	r5, r0
 801d6dc:	4630      	mov	r0, r6
 801d6de:	f7fc fbad 	bl	8019e3c <_malloc_r>
 801d6e2:	b948      	cbnz	r0, 801d6f8 <__smakebuf_r+0x44>
 801d6e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d6e8:	059a      	lsls	r2, r3, #22
 801d6ea:	d4ef      	bmi.n	801d6cc <__smakebuf_r+0x18>
 801d6ec:	f023 0303 	bic.w	r3, r3, #3
 801d6f0:	f043 0302 	orr.w	r3, r3, #2
 801d6f4:	81a3      	strh	r3, [r4, #12]
 801d6f6:	e7e3      	b.n	801d6c0 <__smakebuf_r+0xc>
 801d6f8:	4b0d      	ldr	r3, [pc, #52]	; (801d730 <__smakebuf_r+0x7c>)
 801d6fa:	62b3      	str	r3, [r6, #40]	; 0x28
 801d6fc:	89a3      	ldrh	r3, [r4, #12]
 801d6fe:	6020      	str	r0, [r4, #0]
 801d700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d704:	81a3      	strh	r3, [r4, #12]
 801d706:	9b00      	ldr	r3, [sp, #0]
 801d708:	6163      	str	r3, [r4, #20]
 801d70a:	9b01      	ldr	r3, [sp, #4]
 801d70c:	6120      	str	r0, [r4, #16]
 801d70e:	b15b      	cbz	r3, 801d728 <__smakebuf_r+0x74>
 801d710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d714:	4630      	mov	r0, r6
 801d716:	f001 fb95 	bl	801ee44 <_isatty_r>
 801d71a:	b128      	cbz	r0, 801d728 <__smakebuf_r+0x74>
 801d71c:	89a3      	ldrh	r3, [r4, #12]
 801d71e:	f023 0303 	bic.w	r3, r3, #3
 801d722:	f043 0301 	orr.w	r3, r3, #1
 801d726:	81a3      	strh	r3, [r4, #12]
 801d728:	89a0      	ldrh	r0, [r4, #12]
 801d72a:	4305      	orrs	r5, r0
 801d72c:	81a5      	strh	r5, [r4, #12]
 801d72e:	e7cd      	b.n	801d6cc <__smakebuf_r+0x18>
 801d730:	08019b29 	.word	0x08019b29

0801d734 <__ascii_mbtowc>:
 801d734:	b082      	sub	sp, #8
 801d736:	b901      	cbnz	r1, 801d73a <__ascii_mbtowc+0x6>
 801d738:	a901      	add	r1, sp, #4
 801d73a:	b142      	cbz	r2, 801d74e <__ascii_mbtowc+0x1a>
 801d73c:	b14b      	cbz	r3, 801d752 <__ascii_mbtowc+0x1e>
 801d73e:	7813      	ldrb	r3, [r2, #0]
 801d740:	600b      	str	r3, [r1, #0]
 801d742:	7812      	ldrb	r2, [r2, #0]
 801d744:	1e10      	subs	r0, r2, #0
 801d746:	bf18      	it	ne
 801d748:	2001      	movne	r0, #1
 801d74a:	b002      	add	sp, #8
 801d74c:	4770      	bx	lr
 801d74e:	4610      	mov	r0, r2
 801d750:	e7fb      	b.n	801d74a <__ascii_mbtowc+0x16>
 801d752:	f06f 0001 	mvn.w	r0, #1
 801d756:	e7f8      	b.n	801d74a <__ascii_mbtowc+0x16>

0801d758 <__malloc_lock>:
 801d758:	4801      	ldr	r0, [pc, #4]	; (801d760 <__malloc_lock+0x8>)
 801d75a:	f7fc badc 	b.w	8019d16 <__retarget_lock_acquire_recursive>
 801d75e:	bf00      	nop
 801d760:	20008f90 	.word	0x20008f90

0801d764 <__malloc_unlock>:
 801d764:	4801      	ldr	r0, [pc, #4]	; (801d76c <__malloc_unlock+0x8>)
 801d766:	f7fc bad7 	b.w	8019d18 <__retarget_lock_release_recursive>
 801d76a:	bf00      	nop
 801d76c:	20008f90 	.word	0x20008f90

0801d770 <_Balloc>:
 801d770:	b570      	push	{r4, r5, r6, lr}
 801d772:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d774:	4604      	mov	r4, r0
 801d776:	460d      	mov	r5, r1
 801d778:	b976      	cbnz	r6, 801d798 <_Balloc+0x28>
 801d77a:	2010      	movs	r0, #16
 801d77c:	f7fc face 	bl	8019d1c <malloc>
 801d780:	4602      	mov	r2, r0
 801d782:	6260      	str	r0, [r4, #36]	; 0x24
 801d784:	b920      	cbnz	r0, 801d790 <_Balloc+0x20>
 801d786:	4b18      	ldr	r3, [pc, #96]	; (801d7e8 <_Balloc+0x78>)
 801d788:	4818      	ldr	r0, [pc, #96]	; (801d7ec <_Balloc+0x7c>)
 801d78a:	2166      	movs	r1, #102	; 0x66
 801d78c:	f7fe fc6e 	bl	801c06c <__assert_func>
 801d790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d794:	6006      	str	r6, [r0, #0]
 801d796:	60c6      	str	r6, [r0, #12]
 801d798:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d79a:	68f3      	ldr	r3, [r6, #12]
 801d79c:	b183      	cbz	r3, 801d7c0 <_Balloc+0x50>
 801d79e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d7a0:	68db      	ldr	r3, [r3, #12]
 801d7a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d7a6:	b9b8      	cbnz	r0, 801d7d8 <_Balloc+0x68>
 801d7a8:	2101      	movs	r1, #1
 801d7aa:	fa01 f605 	lsl.w	r6, r1, r5
 801d7ae:	1d72      	adds	r2, r6, #5
 801d7b0:	0092      	lsls	r2, r2, #2
 801d7b2:	4620      	mov	r0, r4
 801d7b4:	f000 fc97 	bl	801e0e6 <_calloc_r>
 801d7b8:	b160      	cbz	r0, 801d7d4 <_Balloc+0x64>
 801d7ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d7be:	e00e      	b.n	801d7de <_Balloc+0x6e>
 801d7c0:	2221      	movs	r2, #33	; 0x21
 801d7c2:	2104      	movs	r1, #4
 801d7c4:	4620      	mov	r0, r4
 801d7c6:	f000 fc8e 	bl	801e0e6 <_calloc_r>
 801d7ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d7cc:	60f0      	str	r0, [r6, #12]
 801d7ce:	68db      	ldr	r3, [r3, #12]
 801d7d0:	2b00      	cmp	r3, #0
 801d7d2:	d1e4      	bne.n	801d79e <_Balloc+0x2e>
 801d7d4:	2000      	movs	r0, #0
 801d7d6:	bd70      	pop	{r4, r5, r6, pc}
 801d7d8:	6802      	ldr	r2, [r0, #0]
 801d7da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d7de:	2300      	movs	r3, #0
 801d7e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d7e4:	e7f7      	b.n	801d7d6 <_Balloc+0x66>
 801d7e6:	bf00      	nop
 801d7e8:	08020f69 	.word	0x08020f69
 801d7ec:	08021070 	.word	0x08021070

0801d7f0 <_Bfree>:
 801d7f0:	b570      	push	{r4, r5, r6, lr}
 801d7f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d7f4:	4605      	mov	r5, r0
 801d7f6:	460c      	mov	r4, r1
 801d7f8:	b976      	cbnz	r6, 801d818 <_Bfree+0x28>
 801d7fa:	2010      	movs	r0, #16
 801d7fc:	f7fc fa8e 	bl	8019d1c <malloc>
 801d800:	4602      	mov	r2, r0
 801d802:	6268      	str	r0, [r5, #36]	; 0x24
 801d804:	b920      	cbnz	r0, 801d810 <_Bfree+0x20>
 801d806:	4b09      	ldr	r3, [pc, #36]	; (801d82c <_Bfree+0x3c>)
 801d808:	4809      	ldr	r0, [pc, #36]	; (801d830 <_Bfree+0x40>)
 801d80a:	218a      	movs	r1, #138	; 0x8a
 801d80c:	f7fe fc2e 	bl	801c06c <__assert_func>
 801d810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d814:	6006      	str	r6, [r0, #0]
 801d816:	60c6      	str	r6, [r0, #12]
 801d818:	b13c      	cbz	r4, 801d82a <_Bfree+0x3a>
 801d81a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d81c:	6862      	ldr	r2, [r4, #4]
 801d81e:	68db      	ldr	r3, [r3, #12]
 801d820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d824:	6021      	str	r1, [r4, #0]
 801d826:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d82a:	bd70      	pop	{r4, r5, r6, pc}
 801d82c:	08020f69 	.word	0x08020f69
 801d830:	08021070 	.word	0x08021070

0801d834 <__multadd>:
 801d834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d838:	690e      	ldr	r6, [r1, #16]
 801d83a:	4607      	mov	r7, r0
 801d83c:	4698      	mov	r8, r3
 801d83e:	460c      	mov	r4, r1
 801d840:	f101 0014 	add.w	r0, r1, #20
 801d844:	2300      	movs	r3, #0
 801d846:	6805      	ldr	r5, [r0, #0]
 801d848:	b2a9      	uxth	r1, r5
 801d84a:	fb02 8101 	mla	r1, r2, r1, r8
 801d84e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801d852:	0c2d      	lsrs	r5, r5, #16
 801d854:	fb02 c505 	mla	r5, r2, r5, ip
 801d858:	b289      	uxth	r1, r1
 801d85a:	3301      	adds	r3, #1
 801d85c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801d860:	429e      	cmp	r6, r3
 801d862:	f840 1b04 	str.w	r1, [r0], #4
 801d866:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801d86a:	dcec      	bgt.n	801d846 <__multadd+0x12>
 801d86c:	f1b8 0f00 	cmp.w	r8, #0
 801d870:	d022      	beq.n	801d8b8 <__multadd+0x84>
 801d872:	68a3      	ldr	r3, [r4, #8]
 801d874:	42b3      	cmp	r3, r6
 801d876:	dc19      	bgt.n	801d8ac <__multadd+0x78>
 801d878:	6861      	ldr	r1, [r4, #4]
 801d87a:	4638      	mov	r0, r7
 801d87c:	3101      	adds	r1, #1
 801d87e:	f7ff ff77 	bl	801d770 <_Balloc>
 801d882:	4605      	mov	r5, r0
 801d884:	b928      	cbnz	r0, 801d892 <__multadd+0x5e>
 801d886:	4602      	mov	r2, r0
 801d888:	4b0d      	ldr	r3, [pc, #52]	; (801d8c0 <__multadd+0x8c>)
 801d88a:	480e      	ldr	r0, [pc, #56]	; (801d8c4 <__multadd+0x90>)
 801d88c:	21b5      	movs	r1, #181	; 0xb5
 801d88e:	f7fe fbed 	bl	801c06c <__assert_func>
 801d892:	6922      	ldr	r2, [r4, #16]
 801d894:	3202      	adds	r2, #2
 801d896:	f104 010c 	add.w	r1, r4, #12
 801d89a:	0092      	lsls	r2, r2, #2
 801d89c:	300c      	adds	r0, #12
 801d89e:	f7fc fa4d 	bl	8019d3c <memcpy>
 801d8a2:	4621      	mov	r1, r4
 801d8a4:	4638      	mov	r0, r7
 801d8a6:	f7ff ffa3 	bl	801d7f0 <_Bfree>
 801d8aa:	462c      	mov	r4, r5
 801d8ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801d8b0:	3601      	adds	r6, #1
 801d8b2:	f8c3 8014 	str.w	r8, [r3, #20]
 801d8b6:	6126      	str	r6, [r4, #16]
 801d8b8:	4620      	mov	r0, r4
 801d8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8be:	bf00      	nop
 801d8c0:	08020fdf 	.word	0x08020fdf
 801d8c4:	08021070 	.word	0x08021070

0801d8c8 <__s2b>:
 801d8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d8cc:	460c      	mov	r4, r1
 801d8ce:	4615      	mov	r5, r2
 801d8d0:	461f      	mov	r7, r3
 801d8d2:	2209      	movs	r2, #9
 801d8d4:	3308      	adds	r3, #8
 801d8d6:	4606      	mov	r6, r0
 801d8d8:	fb93 f3f2 	sdiv	r3, r3, r2
 801d8dc:	2100      	movs	r1, #0
 801d8de:	2201      	movs	r2, #1
 801d8e0:	429a      	cmp	r2, r3
 801d8e2:	db09      	blt.n	801d8f8 <__s2b+0x30>
 801d8e4:	4630      	mov	r0, r6
 801d8e6:	f7ff ff43 	bl	801d770 <_Balloc>
 801d8ea:	b940      	cbnz	r0, 801d8fe <__s2b+0x36>
 801d8ec:	4602      	mov	r2, r0
 801d8ee:	4b19      	ldr	r3, [pc, #100]	; (801d954 <__s2b+0x8c>)
 801d8f0:	4819      	ldr	r0, [pc, #100]	; (801d958 <__s2b+0x90>)
 801d8f2:	21ce      	movs	r1, #206	; 0xce
 801d8f4:	f7fe fbba 	bl	801c06c <__assert_func>
 801d8f8:	0052      	lsls	r2, r2, #1
 801d8fa:	3101      	adds	r1, #1
 801d8fc:	e7f0      	b.n	801d8e0 <__s2b+0x18>
 801d8fe:	9b08      	ldr	r3, [sp, #32]
 801d900:	6143      	str	r3, [r0, #20]
 801d902:	2d09      	cmp	r5, #9
 801d904:	f04f 0301 	mov.w	r3, #1
 801d908:	6103      	str	r3, [r0, #16]
 801d90a:	dd16      	ble.n	801d93a <__s2b+0x72>
 801d90c:	f104 0909 	add.w	r9, r4, #9
 801d910:	46c8      	mov	r8, r9
 801d912:	442c      	add	r4, r5
 801d914:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d918:	4601      	mov	r1, r0
 801d91a:	3b30      	subs	r3, #48	; 0x30
 801d91c:	220a      	movs	r2, #10
 801d91e:	4630      	mov	r0, r6
 801d920:	f7ff ff88 	bl	801d834 <__multadd>
 801d924:	45a0      	cmp	r8, r4
 801d926:	d1f5      	bne.n	801d914 <__s2b+0x4c>
 801d928:	f1a5 0408 	sub.w	r4, r5, #8
 801d92c:	444c      	add	r4, r9
 801d92e:	1b2d      	subs	r5, r5, r4
 801d930:	1963      	adds	r3, r4, r5
 801d932:	42bb      	cmp	r3, r7
 801d934:	db04      	blt.n	801d940 <__s2b+0x78>
 801d936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d93a:	340a      	adds	r4, #10
 801d93c:	2509      	movs	r5, #9
 801d93e:	e7f6      	b.n	801d92e <__s2b+0x66>
 801d940:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d944:	4601      	mov	r1, r0
 801d946:	3b30      	subs	r3, #48	; 0x30
 801d948:	220a      	movs	r2, #10
 801d94a:	4630      	mov	r0, r6
 801d94c:	f7ff ff72 	bl	801d834 <__multadd>
 801d950:	e7ee      	b.n	801d930 <__s2b+0x68>
 801d952:	bf00      	nop
 801d954:	08020fdf 	.word	0x08020fdf
 801d958:	08021070 	.word	0x08021070

0801d95c <__hi0bits>:
 801d95c:	0c03      	lsrs	r3, r0, #16
 801d95e:	041b      	lsls	r3, r3, #16
 801d960:	b9d3      	cbnz	r3, 801d998 <__hi0bits+0x3c>
 801d962:	0400      	lsls	r0, r0, #16
 801d964:	2310      	movs	r3, #16
 801d966:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d96a:	bf04      	itt	eq
 801d96c:	0200      	lsleq	r0, r0, #8
 801d96e:	3308      	addeq	r3, #8
 801d970:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d974:	bf04      	itt	eq
 801d976:	0100      	lsleq	r0, r0, #4
 801d978:	3304      	addeq	r3, #4
 801d97a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d97e:	bf04      	itt	eq
 801d980:	0080      	lsleq	r0, r0, #2
 801d982:	3302      	addeq	r3, #2
 801d984:	2800      	cmp	r0, #0
 801d986:	db05      	blt.n	801d994 <__hi0bits+0x38>
 801d988:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d98c:	f103 0301 	add.w	r3, r3, #1
 801d990:	bf08      	it	eq
 801d992:	2320      	moveq	r3, #32
 801d994:	4618      	mov	r0, r3
 801d996:	4770      	bx	lr
 801d998:	2300      	movs	r3, #0
 801d99a:	e7e4      	b.n	801d966 <__hi0bits+0xa>

0801d99c <__lo0bits>:
 801d99c:	6803      	ldr	r3, [r0, #0]
 801d99e:	f013 0207 	ands.w	r2, r3, #7
 801d9a2:	4601      	mov	r1, r0
 801d9a4:	d00b      	beq.n	801d9be <__lo0bits+0x22>
 801d9a6:	07da      	lsls	r2, r3, #31
 801d9a8:	d424      	bmi.n	801d9f4 <__lo0bits+0x58>
 801d9aa:	0798      	lsls	r0, r3, #30
 801d9ac:	bf49      	itett	mi
 801d9ae:	085b      	lsrmi	r3, r3, #1
 801d9b0:	089b      	lsrpl	r3, r3, #2
 801d9b2:	2001      	movmi	r0, #1
 801d9b4:	600b      	strmi	r3, [r1, #0]
 801d9b6:	bf5c      	itt	pl
 801d9b8:	600b      	strpl	r3, [r1, #0]
 801d9ba:	2002      	movpl	r0, #2
 801d9bc:	4770      	bx	lr
 801d9be:	b298      	uxth	r0, r3
 801d9c0:	b9b0      	cbnz	r0, 801d9f0 <__lo0bits+0x54>
 801d9c2:	0c1b      	lsrs	r3, r3, #16
 801d9c4:	2010      	movs	r0, #16
 801d9c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d9ca:	bf04      	itt	eq
 801d9cc:	0a1b      	lsreq	r3, r3, #8
 801d9ce:	3008      	addeq	r0, #8
 801d9d0:	071a      	lsls	r2, r3, #28
 801d9d2:	bf04      	itt	eq
 801d9d4:	091b      	lsreq	r3, r3, #4
 801d9d6:	3004      	addeq	r0, #4
 801d9d8:	079a      	lsls	r2, r3, #30
 801d9da:	bf04      	itt	eq
 801d9dc:	089b      	lsreq	r3, r3, #2
 801d9de:	3002      	addeq	r0, #2
 801d9e0:	07da      	lsls	r2, r3, #31
 801d9e2:	d403      	bmi.n	801d9ec <__lo0bits+0x50>
 801d9e4:	085b      	lsrs	r3, r3, #1
 801d9e6:	f100 0001 	add.w	r0, r0, #1
 801d9ea:	d005      	beq.n	801d9f8 <__lo0bits+0x5c>
 801d9ec:	600b      	str	r3, [r1, #0]
 801d9ee:	4770      	bx	lr
 801d9f0:	4610      	mov	r0, r2
 801d9f2:	e7e8      	b.n	801d9c6 <__lo0bits+0x2a>
 801d9f4:	2000      	movs	r0, #0
 801d9f6:	4770      	bx	lr
 801d9f8:	2020      	movs	r0, #32
 801d9fa:	4770      	bx	lr

0801d9fc <__i2b>:
 801d9fc:	b510      	push	{r4, lr}
 801d9fe:	460c      	mov	r4, r1
 801da00:	2101      	movs	r1, #1
 801da02:	f7ff feb5 	bl	801d770 <_Balloc>
 801da06:	4602      	mov	r2, r0
 801da08:	b928      	cbnz	r0, 801da16 <__i2b+0x1a>
 801da0a:	4b05      	ldr	r3, [pc, #20]	; (801da20 <__i2b+0x24>)
 801da0c:	4805      	ldr	r0, [pc, #20]	; (801da24 <__i2b+0x28>)
 801da0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801da12:	f7fe fb2b 	bl	801c06c <__assert_func>
 801da16:	2301      	movs	r3, #1
 801da18:	6144      	str	r4, [r0, #20]
 801da1a:	6103      	str	r3, [r0, #16]
 801da1c:	bd10      	pop	{r4, pc}
 801da1e:	bf00      	nop
 801da20:	08020fdf 	.word	0x08020fdf
 801da24:	08021070 	.word	0x08021070

0801da28 <__multiply>:
 801da28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da2c:	4614      	mov	r4, r2
 801da2e:	690a      	ldr	r2, [r1, #16]
 801da30:	6923      	ldr	r3, [r4, #16]
 801da32:	429a      	cmp	r2, r3
 801da34:	bfb8      	it	lt
 801da36:	460b      	movlt	r3, r1
 801da38:	460d      	mov	r5, r1
 801da3a:	bfbc      	itt	lt
 801da3c:	4625      	movlt	r5, r4
 801da3e:	461c      	movlt	r4, r3
 801da40:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801da44:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801da48:	68ab      	ldr	r3, [r5, #8]
 801da4a:	6869      	ldr	r1, [r5, #4]
 801da4c:	eb0a 0709 	add.w	r7, sl, r9
 801da50:	42bb      	cmp	r3, r7
 801da52:	b085      	sub	sp, #20
 801da54:	bfb8      	it	lt
 801da56:	3101      	addlt	r1, #1
 801da58:	f7ff fe8a 	bl	801d770 <_Balloc>
 801da5c:	b930      	cbnz	r0, 801da6c <__multiply+0x44>
 801da5e:	4602      	mov	r2, r0
 801da60:	4b42      	ldr	r3, [pc, #264]	; (801db6c <__multiply+0x144>)
 801da62:	4843      	ldr	r0, [pc, #268]	; (801db70 <__multiply+0x148>)
 801da64:	f240 115d 	movw	r1, #349	; 0x15d
 801da68:	f7fe fb00 	bl	801c06c <__assert_func>
 801da6c:	f100 0614 	add.w	r6, r0, #20
 801da70:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801da74:	4633      	mov	r3, r6
 801da76:	2200      	movs	r2, #0
 801da78:	4543      	cmp	r3, r8
 801da7a:	d31e      	bcc.n	801daba <__multiply+0x92>
 801da7c:	f105 0c14 	add.w	ip, r5, #20
 801da80:	f104 0314 	add.w	r3, r4, #20
 801da84:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801da88:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801da8c:	9202      	str	r2, [sp, #8]
 801da8e:	ebac 0205 	sub.w	r2, ip, r5
 801da92:	3a15      	subs	r2, #21
 801da94:	f022 0203 	bic.w	r2, r2, #3
 801da98:	3204      	adds	r2, #4
 801da9a:	f105 0115 	add.w	r1, r5, #21
 801da9e:	458c      	cmp	ip, r1
 801daa0:	bf38      	it	cc
 801daa2:	2204      	movcc	r2, #4
 801daa4:	9201      	str	r2, [sp, #4]
 801daa6:	9a02      	ldr	r2, [sp, #8]
 801daa8:	9303      	str	r3, [sp, #12]
 801daaa:	429a      	cmp	r2, r3
 801daac:	d808      	bhi.n	801dac0 <__multiply+0x98>
 801daae:	2f00      	cmp	r7, #0
 801dab0:	dc55      	bgt.n	801db5e <__multiply+0x136>
 801dab2:	6107      	str	r7, [r0, #16]
 801dab4:	b005      	add	sp, #20
 801dab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daba:	f843 2b04 	str.w	r2, [r3], #4
 801dabe:	e7db      	b.n	801da78 <__multiply+0x50>
 801dac0:	f8b3 a000 	ldrh.w	sl, [r3]
 801dac4:	f1ba 0f00 	cmp.w	sl, #0
 801dac8:	d020      	beq.n	801db0c <__multiply+0xe4>
 801daca:	f105 0e14 	add.w	lr, r5, #20
 801dace:	46b1      	mov	r9, r6
 801dad0:	2200      	movs	r2, #0
 801dad2:	f85e 4b04 	ldr.w	r4, [lr], #4
 801dad6:	f8d9 b000 	ldr.w	fp, [r9]
 801dada:	b2a1      	uxth	r1, r4
 801dadc:	fa1f fb8b 	uxth.w	fp, fp
 801dae0:	fb0a b101 	mla	r1, sl, r1, fp
 801dae4:	4411      	add	r1, r2
 801dae6:	f8d9 2000 	ldr.w	r2, [r9]
 801daea:	0c24      	lsrs	r4, r4, #16
 801daec:	0c12      	lsrs	r2, r2, #16
 801daee:	fb0a 2404 	mla	r4, sl, r4, r2
 801daf2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801daf6:	b289      	uxth	r1, r1
 801daf8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801dafc:	45f4      	cmp	ip, lr
 801dafe:	f849 1b04 	str.w	r1, [r9], #4
 801db02:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801db06:	d8e4      	bhi.n	801dad2 <__multiply+0xaa>
 801db08:	9901      	ldr	r1, [sp, #4]
 801db0a:	5072      	str	r2, [r6, r1]
 801db0c:	9a03      	ldr	r2, [sp, #12]
 801db0e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801db12:	3304      	adds	r3, #4
 801db14:	f1b9 0f00 	cmp.w	r9, #0
 801db18:	d01f      	beq.n	801db5a <__multiply+0x132>
 801db1a:	6834      	ldr	r4, [r6, #0]
 801db1c:	f105 0114 	add.w	r1, r5, #20
 801db20:	46b6      	mov	lr, r6
 801db22:	f04f 0a00 	mov.w	sl, #0
 801db26:	880a      	ldrh	r2, [r1, #0]
 801db28:	f8be b002 	ldrh.w	fp, [lr, #2]
 801db2c:	fb09 b202 	mla	r2, r9, r2, fp
 801db30:	4492      	add	sl, r2
 801db32:	b2a4      	uxth	r4, r4
 801db34:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801db38:	f84e 4b04 	str.w	r4, [lr], #4
 801db3c:	f851 4b04 	ldr.w	r4, [r1], #4
 801db40:	f8be 2000 	ldrh.w	r2, [lr]
 801db44:	0c24      	lsrs	r4, r4, #16
 801db46:	fb09 2404 	mla	r4, r9, r4, r2
 801db4a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801db4e:	458c      	cmp	ip, r1
 801db50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801db54:	d8e7      	bhi.n	801db26 <__multiply+0xfe>
 801db56:	9a01      	ldr	r2, [sp, #4]
 801db58:	50b4      	str	r4, [r6, r2]
 801db5a:	3604      	adds	r6, #4
 801db5c:	e7a3      	b.n	801daa6 <__multiply+0x7e>
 801db5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801db62:	2b00      	cmp	r3, #0
 801db64:	d1a5      	bne.n	801dab2 <__multiply+0x8a>
 801db66:	3f01      	subs	r7, #1
 801db68:	e7a1      	b.n	801daae <__multiply+0x86>
 801db6a:	bf00      	nop
 801db6c:	08020fdf 	.word	0x08020fdf
 801db70:	08021070 	.word	0x08021070

0801db74 <__pow5mult>:
 801db74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db78:	4615      	mov	r5, r2
 801db7a:	f012 0203 	ands.w	r2, r2, #3
 801db7e:	4606      	mov	r6, r0
 801db80:	460f      	mov	r7, r1
 801db82:	d007      	beq.n	801db94 <__pow5mult+0x20>
 801db84:	4c25      	ldr	r4, [pc, #148]	; (801dc1c <__pow5mult+0xa8>)
 801db86:	3a01      	subs	r2, #1
 801db88:	2300      	movs	r3, #0
 801db8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801db8e:	f7ff fe51 	bl	801d834 <__multadd>
 801db92:	4607      	mov	r7, r0
 801db94:	10ad      	asrs	r5, r5, #2
 801db96:	d03d      	beq.n	801dc14 <__pow5mult+0xa0>
 801db98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801db9a:	b97c      	cbnz	r4, 801dbbc <__pow5mult+0x48>
 801db9c:	2010      	movs	r0, #16
 801db9e:	f7fc f8bd 	bl	8019d1c <malloc>
 801dba2:	4602      	mov	r2, r0
 801dba4:	6270      	str	r0, [r6, #36]	; 0x24
 801dba6:	b928      	cbnz	r0, 801dbb4 <__pow5mult+0x40>
 801dba8:	4b1d      	ldr	r3, [pc, #116]	; (801dc20 <__pow5mult+0xac>)
 801dbaa:	481e      	ldr	r0, [pc, #120]	; (801dc24 <__pow5mult+0xb0>)
 801dbac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801dbb0:	f7fe fa5c 	bl	801c06c <__assert_func>
 801dbb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801dbb8:	6004      	str	r4, [r0, #0]
 801dbba:	60c4      	str	r4, [r0, #12]
 801dbbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801dbc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801dbc4:	b94c      	cbnz	r4, 801dbda <__pow5mult+0x66>
 801dbc6:	f240 2171 	movw	r1, #625	; 0x271
 801dbca:	4630      	mov	r0, r6
 801dbcc:	f7ff ff16 	bl	801d9fc <__i2b>
 801dbd0:	2300      	movs	r3, #0
 801dbd2:	f8c8 0008 	str.w	r0, [r8, #8]
 801dbd6:	4604      	mov	r4, r0
 801dbd8:	6003      	str	r3, [r0, #0]
 801dbda:	f04f 0900 	mov.w	r9, #0
 801dbde:	07eb      	lsls	r3, r5, #31
 801dbe0:	d50a      	bpl.n	801dbf8 <__pow5mult+0x84>
 801dbe2:	4639      	mov	r1, r7
 801dbe4:	4622      	mov	r2, r4
 801dbe6:	4630      	mov	r0, r6
 801dbe8:	f7ff ff1e 	bl	801da28 <__multiply>
 801dbec:	4639      	mov	r1, r7
 801dbee:	4680      	mov	r8, r0
 801dbf0:	4630      	mov	r0, r6
 801dbf2:	f7ff fdfd 	bl	801d7f0 <_Bfree>
 801dbf6:	4647      	mov	r7, r8
 801dbf8:	106d      	asrs	r5, r5, #1
 801dbfa:	d00b      	beq.n	801dc14 <__pow5mult+0xa0>
 801dbfc:	6820      	ldr	r0, [r4, #0]
 801dbfe:	b938      	cbnz	r0, 801dc10 <__pow5mult+0x9c>
 801dc00:	4622      	mov	r2, r4
 801dc02:	4621      	mov	r1, r4
 801dc04:	4630      	mov	r0, r6
 801dc06:	f7ff ff0f 	bl	801da28 <__multiply>
 801dc0a:	6020      	str	r0, [r4, #0]
 801dc0c:	f8c0 9000 	str.w	r9, [r0]
 801dc10:	4604      	mov	r4, r0
 801dc12:	e7e4      	b.n	801dbde <__pow5mult+0x6a>
 801dc14:	4638      	mov	r0, r7
 801dc16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dc1a:	bf00      	nop
 801dc1c:	080211c0 	.word	0x080211c0
 801dc20:	08020f69 	.word	0x08020f69
 801dc24:	08021070 	.word	0x08021070

0801dc28 <__lshift>:
 801dc28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dc2c:	460c      	mov	r4, r1
 801dc2e:	6849      	ldr	r1, [r1, #4]
 801dc30:	6923      	ldr	r3, [r4, #16]
 801dc32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801dc36:	68a3      	ldr	r3, [r4, #8]
 801dc38:	4607      	mov	r7, r0
 801dc3a:	4691      	mov	r9, r2
 801dc3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801dc40:	f108 0601 	add.w	r6, r8, #1
 801dc44:	42b3      	cmp	r3, r6
 801dc46:	db0b      	blt.n	801dc60 <__lshift+0x38>
 801dc48:	4638      	mov	r0, r7
 801dc4a:	f7ff fd91 	bl	801d770 <_Balloc>
 801dc4e:	4605      	mov	r5, r0
 801dc50:	b948      	cbnz	r0, 801dc66 <__lshift+0x3e>
 801dc52:	4602      	mov	r2, r0
 801dc54:	4b28      	ldr	r3, [pc, #160]	; (801dcf8 <__lshift+0xd0>)
 801dc56:	4829      	ldr	r0, [pc, #164]	; (801dcfc <__lshift+0xd4>)
 801dc58:	f240 11d9 	movw	r1, #473	; 0x1d9
 801dc5c:	f7fe fa06 	bl	801c06c <__assert_func>
 801dc60:	3101      	adds	r1, #1
 801dc62:	005b      	lsls	r3, r3, #1
 801dc64:	e7ee      	b.n	801dc44 <__lshift+0x1c>
 801dc66:	2300      	movs	r3, #0
 801dc68:	f100 0114 	add.w	r1, r0, #20
 801dc6c:	f100 0210 	add.w	r2, r0, #16
 801dc70:	4618      	mov	r0, r3
 801dc72:	4553      	cmp	r3, sl
 801dc74:	db33      	blt.n	801dcde <__lshift+0xb6>
 801dc76:	6920      	ldr	r0, [r4, #16]
 801dc78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801dc7c:	f104 0314 	add.w	r3, r4, #20
 801dc80:	f019 091f 	ands.w	r9, r9, #31
 801dc84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801dc88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801dc8c:	d02b      	beq.n	801dce6 <__lshift+0xbe>
 801dc8e:	f1c9 0e20 	rsb	lr, r9, #32
 801dc92:	468a      	mov	sl, r1
 801dc94:	2200      	movs	r2, #0
 801dc96:	6818      	ldr	r0, [r3, #0]
 801dc98:	fa00 f009 	lsl.w	r0, r0, r9
 801dc9c:	4302      	orrs	r2, r0
 801dc9e:	f84a 2b04 	str.w	r2, [sl], #4
 801dca2:	f853 2b04 	ldr.w	r2, [r3], #4
 801dca6:	459c      	cmp	ip, r3
 801dca8:	fa22 f20e 	lsr.w	r2, r2, lr
 801dcac:	d8f3      	bhi.n	801dc96 <__lshift+0x6e>
 801dcae:	ebac 0304 	sub.w	r3, ip, r4
 801dcb2:	3b15      	subs	r3, #21
 801dcb4:	f023 0303 	bic.w	r3, r3, #3
 801dcb8:	3304      	adds	r3, #4
 801dcba:	f104 0015 	add.w	r0, r4, #21
 801dcbe:	4584      	cmp	ip, r0
 801dcc0:	bf38      	it	cc
 801dcc2:	2304      	movcc	r3, #4
 801dcc4:	50ca      	str	r2, [r1, r3]
 801dcc6:	b10a      	cbz	r2, 801dccc <__lshift+0xa4>
 801dcc8:	f108 0602 	add.w	r6, r8, #2
 801dccc:	3e01      	subs	r6, #1
 801dcce:	4638      	mov	r0, r7
 801dcd0:	612e      	str	r6, [r5, #16]
 801dcd2:	4621      	mov	r1, r4
 801dcd4:	f7ff fd8c 	bl	801d7f0 <_Bfree>
 801dcd8:	4628      	mov	r0, r5
 801dcda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dcde:	f842 0f04 	str.w	r0, [r2, #4]!
 801dce2:	3301      	adds	r3, #1
 801dce4:	e7c5      	b.n	801dc72 <__lshift+0x4a>
 801dce6:	3904      	subs	r1, #4
 801dce8:	f853 2b04 	ldr.w	r2, [r3], #4
 801dcec:	f841 2f04 	str.w	r2, [r1, #4]!
 801dcf0:	459c      	cmp	ip, r3
 801dcf2:	d8f9      	bhi.n	801dce8 <__lshift+0xc0>
 801dcf4:	e7ea      	b.n	801dccc <__lshift+0xa4>
 801dcf6:	bf00      	nop
 801dcf8:	08020fdf 	.word	0x08020fdf
 801dcfc:	08021070 	.word	0x08021070

0801dd00 <__mcmp>:
 801dd00:	b530      	push	{r4, r5, lr}
 801dd02:	6902      	ldr	r2, [r0, #16]
 801dd04:	690c      	ldr	r4, [r1, #16]
 801dd06:	1b12      	subs	r2, r2, r4
 801dd08:	d10e      	bne.n	801dd28 <__mcmp+0x28>
 801dd0a:	f100 0314 	add.w	r3, r0, #20
 801dd0e:	3114      	adds	r1, #20
 801dd10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801dd14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801dd18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801dd1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801dd20:	42a5      	cmp	r5, r4
 801dd22:	d003      	beq.n	801dd2c <__mcmp+0x2c>
 801dd24:	d305      	bcc.n	801dd32 <__mcmp+0x32>
 801dd26:	2201      	movs	r2, #1
 801dd28:	4610      	mov	r0, r2
 801dd2a:	bd30      	pop	{r4, r5, pc}
 801dd2c:	4283      	cmp	r3, r0
 801dd2e:	d3f3      	bcc.n	801dd18 <__mcmp+0x18>
 801dd30:	e7fa      	b.n	801dd28 <__mcmp+0x28>
 801dd32:	f04f 32ff 	mov.w	r2, #4294967295
 801dd36:	e7f7      	b.n	801dd28 <__mcmp+0x28>

0801dd38 <__mdiff>:
 801dd38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd3c:	460c      	mov	r4, r1
 801dd3e:	4606      	mov	r6, r0
 801dd40:	4611      	mov	r1, r2
 801dd42:	4620      	mov	r0, r4
 801dd44:	4617      	mov	r7, r2
 801dd46:	f7ff ffdb 	bl	801dd00 <__mcmp>
 801dd4a:	1e05      	subs	r5, r0, #0
 801dd4c:	d110      	bne.n	801dd70 <__mdiff+0x38>
 801dd4e:	4629      	mov	r1, r5
 801dd50:	4630      	mov	r0, r6
 801dd52:	f7ff fd0d 	bl	801d770 <_Balloc>
 801dd56:	b930      	cbnz	r0, 801dd66 <__mdiff+0x2e>
 801dd58:	4b39      	ldr	r3, [pc, #228]	; (801de40 <__mdiff+0x108>)
 801dd5a:	4602      	mov	r2, r0
 801dd5c:	f240 2132 	movw	r1, #562	; 0x232
 801dd60:	4838      	ldr	r0, [pc, #224]	; (801de44 <__mdiff+0x10c>)
 801dd62:	f7fe f983 	bl	801c06c <__assert_func>
 801dd66:	2301      	movs	r3, #1
 801dd68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801dd6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd70:	bfa4      	itt	ge
 801dd72:	463b      	movge	r3, r7
 801dd74:	4627      	movge	r7, r4
 801dd76:	4630      	mov	r0, r6
 801dd78:	6879      	ldr	r1, [r7, #4]
 801dd7a:	bfa6      	itte	ge
 801dd7c:	461c      	movge	r4, r3
 801dd7e:	2500      	movge	r5, #0
 801dd80:	2501      	movlt	r5, #1
 801dd82:	f7ff fcf5 	bl	801d770 <_Balloc>
 801dd86:	b920      	cbnz	r0, 801dd92 <__mdiff+0x5a>
 801dd88:	4b2d      	ldr	r3, [pc, #180]	; (801de40 <__mdiff+0x108>)
 801dd8a:	4602      	mov	r2, r0
 801dd8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 801dd90:	e7e6      	b.n	801dd60 <__mdiff+0x28>
 801dd92:	693e      	ldr	r6, [r7, #16]
 801dd94:	60c5      	str	r5, [r0, #12]
 801dd96:	6925      	ldr	r5, [r4, #16]
 801dd98:	f107 0114 	add.w	r1, r7, #20
 801dd9c:	f104 0914 	add.w	r9, r4, #20
 801dda0:	f100 0e14 	add.w	lr, r0, #20
 801dda4:	f107 0210 	add.w	r2, r7, #16
 801dda8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801ddac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801ddb0:	46f2      	mov	sl, lr
 801ddb2:	2700      	movs	r7, #0
 801ddb4:	f859 3b04 	ldr.w	r3, [r9], #4
 801ddb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ddbc:	fa1f f883 	uxth.w	r8, r3
 801ddc0:	fa17 f78b 	uxtah	r7, r7, fp
 801ddc4:	0c1b      	lsrs	r3, r3, #16
 801ddc6:	eba7 0808 	sub.w	r8, r7, r8
 801ddca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ddce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ddd2:	fa1f f888 	uxth.w	r8, r8
 801ddd6:	141f      	asrs	r7, r3, #16
 801ddd8:	454d      	cmp	r5, r9
 801ddda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ddde:	f84a 3b04 	str.w	r3, [sl], #4
 801dde2:	d8e7      	bhi.n	801ddb4 <__mdiff+0x7c>
 801dde4:	1b2b      	subs	r3, r5, r4
 801dde6:	3b15      	subs	r3, #21
 801dde8:	f023 0303 	bic.w	r3, r3, #3
 801ddec:	3304      	adds	r3, #4
 801ddee:	3415      	adds	r4, #21
 801ddf0:	42a5      	cmp	r5, r4
 801ddf2:	bf38      	it	cc
 801ddf4:	2304      	movcc	r3, #4
 801ddf6:	4419      	add	r1, r3
 801ddf8:	4473      	add	r3, lr
 801ddfa:	469e      	mov	lr, r3
 801ddfc:	460d      	mov	r5, r1
 801ddfe:	4565      	cmp	r5, ip
 801de00:	d30e      	bcc.n	801de20 <__mdiff+0xe8>
 801de02:	f10c 0203 	add.w	r2, ip, #3
 801de06:	1a52      	subs	r2, r2, r1
 801de08:	f022 0203 	bic.w	r2, r2, #3
 801de0c:	3903      	subs	r1, #3
 801de0e:	458c      	cmp	ip, r1
 801de10:	bf38      	it	cc
 801de12:	2200      	movcc	r2, #0
 801de14:	441a      	add	r2, r3
 801de16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801de1a:	b17b      	cbz	r3, 801de3c <__mdiff+0x104>
 801de1c:	6106      	str	r6, [r0, #16]
 801de1e:	e7a5      	b.n	801dd6c <__mdiff+0x34>
 801de20:	f855 8b04 	ldr.w	r8, [r5], #4
 801de24:	fa17 f488 	uxtah	r4, r7, r8
 801de28:	1422      	asrs	r2, r4, #16
 801de2a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801de2e:	b2a4      	uxth	r4, r4
 801de30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801de34:	f84e 4b04 	str.w	r4, [lr], #4
 801de38:	1417      	asrs	r7, r2, #16
 801de3a:	e7e0      	b.n	801ddfe <__mdiff+0xc6>
 801de3c:	3e01      	subs	r6, #1
 801de3e:	e7ea      	b.n	801de16 <__mdiff+0xde>
 801de40:	08020fdf 	.word	0x08020fdf
 801de44:	08021070 	.word	0x08021070

0801de48 <__ulp>:
 801de48:	b082      	sub	sp, #8
 801de4a:	ed8d 0b00 	vstr	d0, [sp]
 801de4e:	9b01      	ldr	r3, [sp, #4]
 801de50:	4912      	ldr	r1, [pc, #72]	; (801de9c <__ulp+0x54>)
 801de52:	4019      	ands	r1, r3
 801de54:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801de58:	2900      	cmp	r1, #0
 801de5a:	dd05      	ble.n	801de68 <__ulp+0x20>
 801de5c:	2200      	movs	r2, #0
 801de5e:	460b      	mov	r3, r1
 801de60:	ec43 2b10 	vmov	d0, r2, r3
 801de64:	b002      	add	sp, #8
 801de66:	4770      	bx	lr
 801de68:	4249      	negs	r1, r1
 801de6a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801de6e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801de72:	f04f 0200 	mov.w	r2, #0
 801de76:	f04f 0300 	mov.w	r3, #0
 801de7a:	da04      	bge.n	801de86 <__ulp+0x3e>
 801de7c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801de80:	fa41 f300 	asr.w	r3, r1, r0
 801de84:	e7ec      	b.n	801de60 <__ulp+0x18>
 801de86:	f1a0 0114 	sub.w	r1, r0, #20
 801de8a:	291e      	cmp	r1, #30
 801de8c:	bfda      	itte	le
 801de8e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801de92:	fa20 f101 	lsrle.w	r1, r0, r1
 801de96:	2101      	movgt	r1, #1
 801de98:	460a      	mov	r2, r1
 801de9a:	e7e1      	b.n	801de60 <__ulp+0x18>
 801de9c:	7ff00000 	.word	0x7ff00000

0801dea0 <__b2d>:
 801dea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dea2:	6905      	ldr	r5, [r0, #16]
 801dea4:	f100 0714 	add.w	r7, r0, #20
 801dea8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801deac:	1f2e      	subs	r6, r5, #4
 801deae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801deb2:	4620      	mov	r0, r4
 801deb4:	f7ff fd52 	bl	801d95c <__hi0bits>
 801deb8:	f1c0 0320 	rsb	r3, r0, #32
 801debc:	280a      	cmp	r0, #10
 801debe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801df3c <__b2d+0x9c>
 801dec2:	600b      	str	r3, [r1, #0]
 801dec4:	dc14      	bgt.n	801def0 <__b2d+0x50>
 801dec6:	f1c0 0e0b 	rsb	lr, r0, #11
 801deca:	fa24 f10e 	lsr.w	r1, r4, lr
 801dece:	42b7      	cmp	r7, r6
 801ded0:	ea41 030c 	orr.w	r3, r1, ip
 801ded4:	bf34      	ite	cc
 801ded6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801deda:	2100      	movcs	r1, #0
 801dedc:	3015      	adds	r0, #21
 801dede:	fa04 f000 	lsl.w	r0, r4, r0
 801dee2:	fa21 f10e 	lsr.w	r1, r1, lr
 801dee6:	ea40 0201 	orr.w	r2, r0, r1
 801deea:	ec43 2b10 	vmov	d0, r2, r3
 801deee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801def0:	42b7      	cmp	r7, r6
 801def2:	bf3a      	itte	cc
 801def4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801def8:	f1a5 0608 	subcc.w	r6, r5, #8
 801defc:	2100      	movcs	r1, #0
 801defe:	380b      	subs	r0, #11
 801df00:	d017      	beq.n	801df32 <__b2d+0x92>
 801df02:	f1c0 0c20 	rsb	ip, r0, #32
 801df06:	fa04 f500 	lsl.w	r5, r4, r0
 801df0a:	42be      	cmp	r6, r7
 801df0c:	fa21 f40c 	lsr.w	r4, r1, ip
 801df10:	ea45 0504 	orr.w	r5, r5, r4
 801df14:	bf8c      	ite	hi
 801df16:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801df1a:	2400      	movls	r4, #0
 801df1c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801df20:	fa01 f000 	lsl.w	r0, r1, r0
 801df24:	fa24 f40c 	lsr.w	r4, r4, ip
 801df28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801df2c:	ea40 0204 	orr.w	r2, r0, r4
 801df30:	e7db      	b.n	801deea <__b2d+0x4a>
 801df32:	ea44 030c 	orr.w	r3, r4, ip
 801df36:	460a      	mov	r2, r1
 801df38:	e7d7      	b.n	801deea <__b2d+0x4a>
 801df3a:	bf00      	nop
 801df3c:	3ff00000 	.word	0x3ff00000

0801df40 <__d2b>:
 801df40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801df44:	4689      	mov	r9, r1
 801df46:	2101      	movs	r1, #1
 801df48:	ec57 6b10 	vmov	r6, r7, d0
 801df4c:	4690      	mov	r8, r2
 801df4e:	f7ff fc0f 	bl	801d770 <_Balloc>
 801df52:	4604      	mov	r4, r0
 801df54:	b930      	cbnz	r0, 801df64 <__d2b+0x24>
 801df56:	4602      	mov	r2, r0
 801df58:	4b25      	ldr	r3, [pc, #148]	; (801dff0 <__d2b+0xb0>)
 801df5a:	4826      	ldr	r0, [pc, #152]	; (801dff4 <__d2b+0xb4>)
 801df5c:	f240 310a 	movw	r1, #778	; 0x30a
 801df60:	f7fe f884 	bl	801c06c <__assert_func>
 801df64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801df68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801df6c:	bb35      	cbnz	r5, 801dfbc <__d2b+0x7c>
 801df6e:	2e00      	cmp	r6, #0
 801df70:	9301      	str	r3, [sp, #4]
 801df72:	d028      	beq.n	801dfc6 <__d2b+0x86>
 801df74:	4668      	mov	r0, sp
 801df76:	9600      	str	r6, [sp, #0]
 801df78:	f7ff fd10 	bl	801d99c <__lo0bits>
 801df7c:	9900      	ldr	r1, [sp, #0]
 801df7e:	b300      	cbz	r0, 801dfc2 <__d2b+0x82>
 801df80:	9a01      	ldr	r2, [sp, #4]
 801df82:	f1c0 0320 	rsb	r3, r0, #32
 801df86:	fa02 f303 	lsl.w	r3, r2, r3
 801df8a:	430b      	orrs	r3, r1
 801df8c:	40c2      	lsrs	r2, r0
 801df8e:	6163      	str	r3, [r4, #20]
 801df90:	9201      	str	r2, [sp, #4]
 801df92:	9b01      	ldr	r3, [sp, #4]
 801df94:	61a3      	str	r3, [r4, #24]
 801df96:	2b00      	cmp	r3, #0
 801df98:	bf14      	ite	ne
 801df9a:	2202      	movne	r2, #2
 801df9c:	2201      	moveq	r2, #1
 801df9e:	6122      	str	r2, [r4, #16]
 801dfa0:	b1d5      	cbz	r5, 801dfd8 <__d2b+0x98>
 801dfa2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801dfa6:	4405      	add	r5, r0
 801dfa8:	f8c9 5000 	str.w	r5, [r9]
 801dfac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801dfb0:	f8c8 0000 	str.w	r0, [r8]
 801dfb4:	4620      	mov	r0, r4
 801dfb6:	b003      	add	sp, #12
 801dfb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dfbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801dfc0:	e7d5      	b.n	801df6e <__d2b+0x2e>
 801dfc2:	6161      	str	r1, [r4, #20]
 801dfc4:	e7e5      	b.n	801df92 <__d2b+0x52>
 801dfc6:	a801      	add	r0, sp, #4
 801dfc8:	f7ff fce8 	bl	801d99c <__lo0bits>
 801dfcc:	9b01      	ldr	r3, [sp, #4]
 801dfce:	6163      	str	r3, [r4, #20]
 801dfd0:	2201      	movs	r2, #1
 801dfd2:	6122      	str	r2, [r4, #16]
 801dfd4:	3020      	adds	r0, #32
 801dfd6:	e7e3      	b.n	801dfa0 <__d2b+0x60>
 801dfd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801dfdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801dfe0:	f8c9 0000 	str.w	r0, [r9]
 801dfe4:	6918      	ldr	r0, [r3, #16]
 801dfe6:	f7ff fcb9 	bl	801d95c <__hi0bits>
 801dfea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801dfee:	e7df      	b.n	801dfb0 <__d2b+0x70>
 801dff0:	08020fdf 	.word	0x08020fdf
 801dff4:	08021070 	.word	0x08021070

0801dff8 <__ratio>:
 801dff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dffc:	4688      	mov	r8, r1
 801dffe:	4669      	mov	r1, sp
 801e000:	4681      	mov	r9, r0
 801e002:	f7ff ff4d 	bl	801dea0 <__b2d>
 801e006:	a901      	add	r1, sp, #4
 801e008:	4640      	mov	r0, r8
 801e00a:	ec55 4b10 	vmov	r4, r5, d0
 801e00e:	f7ff ff47 	bl	801dea0 <__b2d>
 801e012:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e016:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801e01a:	eba3 0c02 	sub.w	ip, r3, r2
 801e01e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e022:	1a9b      	subs	r3, r3, r2
 801e024:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801e028:	ec51 0b10 	vmov	r0, r1, d0
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	bfd6      	itet	le
 801e030:	460a      	movle	r2, r1
 801e032:	462a      	movgt	r2, r5
 801e034:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e038:	468b      	mov	fp, r1
 801e03a:	462f      	mov	r7, r5
 801e03c:	bfd4      	ite	le
 801e03e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801e042:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e046:	4620      	mov	r0, r4
 801e048:	ee10 2a10 	vmov	r2, s0
 801e04c:	465b      	mov	r3, fp
 801e04e:	4639      	mov	r1, r7
 801e050:	f7e2 fc0c 	bl	800086c <__aeabi_ddiv>
 801e054:	ec41 0b10 	vmov	d0, r0, r1
 801e058:	b003      	add	sp, #12
 801e05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e05e <__copybits>:
 801e05e:	3901      	subs	r1, #1
 801e060:	b570      	push	{r4, r5, r6, lr}
 801e062:	1149      	asrs	r1, r1, #5
 801e064:	6914      	ldr	r4, [r2, #16]
 801e066:	3101      	adds	r1, #1
 801e068:	f102 0314 	add.w	r3, r2, #20
 801e06c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e070:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e074:	1f05      	subs	r5, r0, #4
 801e076:	42a3      	cmp	r3, r4
 801e078:	d30c      	bcc.n	801e094 <__copybits+0x36>
 801e07a:	1aa3      	subs	r3, r4, r2
 801e07c:	3b11      	subs	r3, #17
 801e07e:	f023 0303 	bic.w	r3, r3, #3
 801e082:	3211      	adds	r2, #17
 801e084:	42a2      	cmp	r2, r4
 801e086:	bf88      	it	hi
 801e088:	2300      	movhi	r3, #0
 801e08a:	4418      	add	r0, r3
 801e08c:	2300      	movs	r3, #0
 801e08e:	4288      	cmp	r0, r1
 801e090:	d305      	bcc.n	801e09e <__copybits+0x40>
 801e092:	bd70      	pop	{r4, r5, r6, pc}
 801e094:	f853 6b04 	ldr.w	r6, [r3], #4
 801e098:	f845 6f04 	str.w	r6, [r5, #4]!
 801e09c:	e7eb      	b.n	801e076 <__copybits+0x18>
 801e09e:	f840 3b04 	str.w	r3, [r0], #4
 801e0a2:	e7f4      	b.n	801e08e <__copybits+0x30>

0801e0a4 <__any_on>:
 801e0a4:	f100 0214 	add.w	r2, r0, #20
 801e0a8:	6900      	ldr	r0, [r0, #16]
 801e0aa:	114b      	asrs	r3, r1, #5
 801e0ac:	4298      	cmp	r0, r3
 801e0ae:	b510      	push	{r4, lr}
 801e0b0:	db11      	blt.n	801e0d6 <__any_on+0x32>
 801e0b2:	dd0a      	ble.n	801e0ca <__any_on+0x26>
 801e0b4:	f011 011f 	ands.w	r1, r1, #31
 801e0b8:	d007      	beq.n	801e0ca <__any_on+0x26>
 801e0ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e0be:	fa24 f001 	lsr.w	r0, r4, r1
 801e0c2:	fa00 f101 	lsl.w	r1, r0, r1
 801e0c6:	428c      	cmp	r4, r1
 801e0c8:	d10b      	bne.n	801e0e2 <__any_on+0x3e>
 801e0ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e0ce:	4293      	cmp	r3, r2
 801e0d0:	d803      	bhi.n	801e0da <__any_on+0x36>
 801e0d2:	2000      	movs	r0, #0
 801e0d4:	bd10      	pop	{r4, pc}
 801e0d6:	4603      	mov	r3, r0
 801e0d8:	e7f7      	b.n	801e0ca <__any_on+0x26>
 801e0da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e0de:	2900      	cmp	r1, #0
 801e0e0:	d0f5      	beq.n	801e0ce <__any_on+0x2a>
 801e0e2:	2001      	movs	r0, #1
 801e0e4:	e7f6      	b.n	801e0d4 <__any_on+0x30>

0801e0e6 <_calloc_r>:
 801e0e6:	b513      	push	{r0, r1, r4, lr}
 801e0e8:	434a      	muls	r2, r1
 801e0ea:	4611      	mov	r1, r2
 801e0ec:	9201      	str	r2, [sp, #4]
 801e0ee:	f7fb fea5 	bl	8019e3c <_malloc_r>
 801e0f2:	4604      	mov	r4, r0
 801e0f4:	b118      	cbz	r0, 801e0fe <_calloc_r+0x18>
 801e0f6:	9a01      	ldr	r2, [sp, #4]
 801e0f8:	2100      	movs	r1, #0
 801e0fa:	f7fb fe47 	bl	8019d8c <memset>
 801e0fe:	4620      	mov	r0, r4
 801e100:	b002      	add	sp, #8
 801e102:	bd10      	pop	{r4, pc}

0801e104 <_realloc_r>:
 801e104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e106:	4607      	mov	r7, r0
 801e108:	4614      	mov	r4, r2
 801e10a:	460e      	mov	r6, r1
 801e10c:	b921      	cbnz	r1, 801e118 <_realloc_r+0x14>
 801e10e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e112:	4611      	mov	r1, r2
 801e114:	f7fb be92 	b.w	8019e3c <_malloc_r>
 801e118:	b922      	cbnz	r2, 801e124 <_realloc_r+0x20>
 801e11a:	f7fb fe3f 	bl	8019d9c <_free_r>
 801e11e:	4625      	mov	r5, r4
 801e120:	4628      	mov	r0, r5
 801e122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e124:	f000 fe9e 	bl	801ee64 <_malloc_usable_size_r>
 801e128:	42a0      	cmp	r0, r4
 801e12a:	d20f      	bcs.n	801e14c <_realloc_r+0x48>
 801e12c:	4621      	mov	r1, r4
 801e12e:	4638      	mov	r0, r7
 801e130:	f7fb fe84 	bl	8019e3c <_malloc_r>
 801e134:	4605      	mov	r5, r0
 801e136:	2800      	cmp	r0, #0
 801e138:	d0f2      	beq.n	801e120 <_realloc_r+0x1c>
 801e13a:	4631      	mov	r1, r6
 801e13c:	4622      	mov	r2, r4
 801e13e:	f7fb fdfd 	bl	8019d3c <memcpy>
 801e142:	4631      	mov	r1, r6
 801e144:	4638      	mov	r0, r7
 801e146:	f7fb fe29 	bl	8019d9c <_free_r>
 801e14a:	e7e9      	b.n	801e120 <_realloc_r+0x1c>
 801e14c:	4635      	mov	r5, r6
 801e14e:	e7e7      	b.n	801e120 <_realloc_r+0x1c>

0801e150 <__ssputs_r>:
 801e150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e154:	688e      	ldr	r6, [r1, #8]
 801e156:	429e      	cmp	r6, r3
 801e158:	4682      	mov	sl, r0
 801e15a:	460c      	mov	r4, r1
 801e15c:	4690      	mov	r8, r2
 801e15e:	461f      	mov	r7, r3
 801e160:	d838      	bhi.n	801e1d4 <__ssputs_r+0x84>
 801e162:	898a      	ldrh	r2, [r1, #12]
 801e164:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e168:	d032      	beq.n	801e1d0 <__ssputs_r+0x80>
 801e16a:	6825      	ldr	r5, [r4, #0]
 801e16c:	6909      	ldr	r1, [r1, #16]
 801e16e:	eba5 0901 	sub.w	r9, r5, r1
 801e172:	6965      	ldr	r5, [r4, #20]
 801e174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e178:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e17c:	3301      	adds	r3, #1
 801e17e:	444b      	add	r3, r9
 801e180:	106d      	asrs	r5, r5, #1
 801e182:	429d      	cmp	r5, r3
 801e184:	bf38      	it	cc
 801e186:	461d      	movcc	r5, r3
 801e188:	0553      	lsls	r3, r2, #21
 801e18a:	d531      	bpl.n	801e1f0 <__ssputs_r+0xa0>
 801e18c:	4629      	mov	r1, r5
 801e18e:	f7fb fe55 	bl	8019e3c <_malloc_r>
 801e192:	4606      	mov	r6, r0
 801e194:	b950      	cbnz	r0, 801e1ac <__ssputs_r+0x5c>
 801e196:	230c      	movs	r3, #12
 801e198:	f8ca 3000 	str.w	r3, [sl]
 801e19c:	89a3      	ldrh	r3, [r4, #12]
 801e19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e1a2:	81a3      	strh	r3, [r4, #12]
 801e1a4:	f04f 30ff 	mov.w	r0, #4294967295
 801e1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1ac:	6921      	ldr	r1, [r4, #16]
 801e1ae:	464a      	mov	r2, r9
 801e1b0:	f7fb fdc4 	bl	8019d3c <memcpy>
 801e1b4:	89a3      	ldrh	r3, [r4, #12]
 801e1b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e1ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e1be:	81a3      	strh	r3, [r4, #12]
 801e1c0:	6126      	str	r6, [r4, #16]
 801e1c2:	6165      	str	r5, [r4, #20]
 801e1c4:	444e      	add	r6, r9
 801e1c6:	eba5 0509 	sub.w	r5, r5, r9
 801e1ca:	6026      	str	r6, [r4, #0]
 801e1cc:	60a5      	str	r5, [r4, #8]
 801e1ce:	463e      	mov	r6, r7
 801e1d0:	42be      	cmp	r6, r7
 801e1d2:	d900      	bls.n	801e1d6 <__ssputs_r+0x86>
 801e1d4:	463e      	mov	r6, r7
 801e1d6:	4632      	mov	r2, r6
 801e1d8:	6820      	ldr	r0, [r4, #0]
 801e1da:	4641      	mov	r1, r8
 801e1dc:	f7fb fdbc 	bl	8019d58 <memmove>
 801e1e0:	68a3      	ldr	r3, [r4, #8]
 801e1e2:	6822      	ldr	r2, [r4, #0]
 801e1e4:	1b9b      	subs	r3, r3, r6
 801e1e6:	4432      	add	r2, r6
 801e1e8:	60a3      	str	r3, [r4, #8]
 801e1ea:	6022      	str	r2, [r4, #0]
 801e1ec:	2000      	movs	r0, #0
 801e1ee:	e7db      	b.n	801e1a8 <__ssputs_r+0x58>
 801e1f0:	462a      	mov	r2, r5
 801e1f2:	f7ff ff87 	bl	801e104 <_realloc_r>
 801e1f6:	4606      	mov	r6, r0
 801e1f8:	2800      	cmp	r0, #0
 801e1fa:	d1e1      	bne.n	801e1c0 <__ssputs_r+0x70>
 801e1fc:	6921      	ldr	r1, [r4, #16]
 801e1fe:	4650      	mov	r0, sl
 801e200:	f7fb fdcc 	bl	8019d9c <_free_r>
 801e204:	e7c7      	b.n	801e196 <__ssputs_r+0x46>
	...

0801e208 <_svfiprintf_r>:
 801e208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e20c:	4698      	mov	r8, r3
 801e20e:	898b      	ldrh	r3, [r1, #12]
 801e210:	061b      	lsls	r3, r3, #24
 801e212:	b09d      	sub	sp, #116	; 0x74
 801e214:	4607      	mov	r7, r0
 801e216:	460d      	mov	r5, r1
 801e218:	4614      	mov	r4, r2
 801e21a:	d50e      	bpl.n	801e23a <_svfiprintf_r+0x32>
 801e21c:	690b      	ldr	r3, [r1, #16]
 801e21e:	b963      	cbnz	r3, 801e23a <_svfiprintf_r+0x32>
 801e220:	2140      	movs	r1, #64	; 0x40
 801e222:	f7fb fe0b 	bl	8019e3c <_malloc_r>
 801e226:	6028      	str	r0, [r5, #0]
 801e228:	6128      	str	r0, [r5, #16]
 801e22a:	b920      	cbnz	r0, 801e236 <_svfiprintf_r+0x2e>
 801e22c:	230c      	movs	r3, #12
 801e22e:	603b      	str	r3, [r7, #0]
 801e230:	f04f 30ff 	mov.w	r0, #4294967295
 801e234:	e0d1      	b.n	801e3da <_svfiprintf_r+0x1d2>
 801e236:	2340      	movs	r3, #64	; 0x40
 801e238:	616b      	str	r3, [r5, #20]
 801e23a:	2300      	movs	r3, #0
 801e23c:	9309      	str	r3, [sp, #36]	; 0x24
 801e23e:	2320      	movs	r3, #32
 801e240:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e244:	f8cd 800c 	str.w	r8, [sp, #12]
 801e248:	2330      	movs	r3, #48	; 0x30
 801e24a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e3f4 <_svfiprintf_r+0x1ec>
 801e24e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e252:	f04f 0901 	mov.w	r9, #1
 801e256:	4623      	mov	r3, r4
 801e258:	469a      	mov	sl, r3
 801e25a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e25e:	b10a      	cbz	r2, 801e264 <_svfiprintf_r+0x5c>
 801e260:	2a25      	cmp	r2, #37	; 0x25
 801e262:	d1f9      	bne.n	801e258 <_svfiprintf_r+0x50>
 801e264:	ebba 0b04 	subs.w	fp, sl, r4
 801e268:	d00b      	beq.n	801e282 <_svfiprintf_r+0x7a>
 801e26a:	465b      	mov	r3, fp
 801e26c:	4622      	mov	r2, r4
 801e26e:	4629      	mov	r1, r5
 801e270:	4638      	mov	r0, r7
 801e272:	f7ff ff6d 	bl	801e150 <__ssputs_r>
 801e276:	3001      	adds	r0, #1
 801e278:	f000 80aa 	beq.w	801e3d0 <_svfiprintf_r+0x1c8>
 801e27c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e27e:	445a      	add	r2, fp
 801e280:	9209      	str	r2, [sp, #36]	; 0x24
 801e282:	f89a 3000 	ldrb.w	r3, [sl]
 801e286:	2b00      	cmp	r3, #0
 801e288:	f000 80a2 	beq.w	801e3d0 <_svfiprintf_r+0x1c8>
 801e28c:	2300      	movs	r3, #0
 801e28e:	f04f 32ff 	mov.w	r2, #4294967295
 801e292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e296:	f10a 0a01 	add.w	sl, sl, #1
 801e29a:	9304      	str	r3, [sp, #16]
 801e29c:	9307      	str	r3, [sp, #28]
 801e29e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e2a2:	931a      	str	r3, [sp, #104]	; 0x68
 801e2a4:	4654      	mov	r4, sl
 801e2a6:	2205      	movs	r2, #5
 801e2a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e2ac:	4851      	ldr	r0, [pc, #324]	; (801e3f4 <_svfiprintf_r+0x1ec>)
 801e2ae:	f7e1 ffa7 	bl	8000200 <memchr>
 801e2b2:	9a04      	ldr	r2, [sp, #16]
 801e2b4:	b9d8      	cbnz	r0, 801e2ee <_svfiprintf_r+0xe6>
 801e2b6:	06d0      	lsls	r0, r2, #27
 801e2b8:	bf44      	itt	mi
 801e2ba:	2320      	movmi	r3, #32
 801e2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e2c0:	0711      	lsls	r1, r2, #28
 801e2c2:	bf44      	itt	mi
 801e2c4:	232b      	movmi	r3, #43	; 0x2b
 801e2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e2ca:	f89a 3000 	ldrb.w	r3, [sl]
 801e2ce:	2b2a      	cmp	r3, #42	; 0x2a
 801e2d0:	d015      	beq.n	801e2fe <_svfiprintf_r+0xf6>
 801e2d2:	9a07      	ldr	r2, [sp, #28]
 801e2d4:	4654      	mov	r4, sl
 801e2d6:	2000      	movs	r0, #0
 801e2d8:	f04f 0c0a 	mov.w	ip, #10
 801e2dc:	4621      	mov	r1, r4
 801e2de:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e2e2:	3b30      	subs	r3, #48	; 0x30
 801e2e4:	2b09      	cmp	r3, #9
 801e2e6:	d94e      	bls.n	801e386 <_svfiprintf_r+0x17e>
 801e2e8:	b1b0      	cbz	r0, 801e318 <_svfiprintf_r+0x110>
 801e2ea:	9207      	str	r2, [sp, #28]
 801e2ec:	e014      	b.n	801e318 <_svfiprintf_r+0x110>
 801e2ee:	eba0 0308 	sub.w	r3, r0, r8
 801e2f2:	fa09 f303 	lsl.w	r3, r9, r3
 801e2f6:	4313      	orrs	r3, r2
 801e2f8:	9304      	str	r3, [sp, #16]
 801e2fa:	46a2      	mov	sl, r4
 801e2fc:	e7d2      	b.n	801e2a4 <_svfiprintf_r+0x9c>
 801e2fe:	9b03      	ldr	r3, [sp, #12]
 801e300:	1d19      	adds	r1, r3, #4
 801e302:	681b      	ldr	r3, [r3, #0]
 801e304:	9103      	str	r1, [sp, #12]
 801e306:	2b00      	cmp	r3, #0
 801e308:	bfbb      	ittet	lt
 801e30a:	425b      	neglt	r3, r3
 801e30c:	f042 0202 	orrlt.w	r2, r2, #2
 801e310:	9307      	strge	r3, [sp, #28]
 801e312:	9307      	strlt	r3, [sp, #28]
 801e314:	bfb8      	it	lt
 801e316:	9204      	strlt	r2, [sp, #16]
 801e318:	7823      	ldrb	r3, [r4, #0]
 801e31a:	2b2e      	cmp	r3, #46	; 0x2e
 801e31c:	d10c      	bne.n	801e338 <_svfiprintf_r+0x130>
 801e31e:	7863      	ldrb	r3, [r4, #1]
 801e320:	2b2a      	cmp	r3, #42	; 0x2a
 801e322:	d135      	bne.n	801e390 <_svfiprintf_r+0x188>
 801e324:	9b03      	ldr	r3, [sp, #12]
 801e326:	1d1a      	adds	r2, r3, #4
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	9203      	str	r2, [sp, #12]
 801e32c:	2b00      	cmp	r3, #0
 801e32e:	bfb8      	it	lt
 801e330:	f04f 33ff 	movlt.w	r3, #4294967295
 801e334:	3402      	adds	r4, #2
 801e336:	9305      	str	r3, [sp, #20]
 801e338:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e404 <_svfiprintf_r+0x1fc>
 801e33c:	7821      	ldrb	r1, [r4, #0]
 801e33e:	2203      	movs	r2, #3
 801e340:	4650      	mov	r0, sl
 801e342:	f7e1 ff5d 	bl	8000200 <memchr>
 801e346:	b140      	cbz	r0, 801e35a <_svfiprintf_r+0x152>
 801e348:	2340      	movs	r3, #64	; 0x40
 801e34a:	eba0 000a 	sub.w	r0, r0, sl
 801e34e:	fa03 f000 	lsl.w	r0, r3, r0
 801e352:	9b04      	ldr	r3, [sp, #16]
 801e354:	4303      	orrs	r3, r0
 801e356:	3401      	adds	r4, #1
 801e358:	9304      	str	r3, [sp, #16]
 801e35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e35e:	4826      	ldr	r0, [pc, #152]	; (801e3f8 <_svfiprintf_r+0x1f0>)
 801e360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e364:	2206      	movs	r2, #6
 801e366:	f7e1 ff4b 	bl	8000200 <memchr>
 801e36a:	2800      	cmp	r0, #0
 801e36c:	d038      	beq.n	801e3e0 <_svfiprintf_r+0x1d8>
 801e36e:	4b23      	ldr	r3, [pc, #140]	; (801e3fc <_svfiprintf_r+0x1f4>)
 801e370:	bb1b      	cbnz	r3, 801e3ba <_svfiprintf_r+0x1b2>
 801e372:	9b03      	ldr	r3, [sp, #12]
 801e374:	3307      	adds	r3, #7
 801e376:	f023 0307 	bic.w	r3, r3, #7
 801e37a:	3308      	adds	r3, #8
 801e37c:	9303      	str	r3, [sp, #12]
 801e37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e380:	4433      	add	r3, r6
 801e382:	9309      	str	r3, [sp, #36]	; 0x24
 801e384:	e767      	b.n	801e256 <_svfiprintf_r+0x4e>
 801e386:	fb0c 3202 	mla	r2, ip, r2, r3
 801e38a:	460c      	mov	r4, r1
 801e38c:	2001      	movs	r0, #1
 801e38e:	e7a5      	b.n	801e2dc <_svfiprintf_r+0xd4>
 801e390:	2300      	movs	r3, #0
 801e392:	3401      	adds	r4, #1
 801e394:	9305      	str	r3, [sp, #20]
 801e396:	4619      	mov	r1, r3
 801e398:	f04f 0c0a 	mov.w	ip, #10
 801e39c:	4620      	mov	r0, r4
 801e39e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e3a2:	3a30      	subs	r2, #48	; 0x30
 801e3a4:	2a09      	cmp	r2, #9
 801e3a6:	d903      	bls.n	801e3b0 <_svfiprintf_r+0x1a8>
 801e3a8:	2b00      	cmp	r3, #0
 801e3aa:	d0c5      	beq.n	801e338 <_svfiprintf_r+0x130>
 801e3ac:	9105      	str	r1, [sp, #20]
 801e3ae:	e7c3      	b.n	801e338 <_svfiprintf_r+0x130>
 801e3b0:	fb0c 2101 	mla	r1, ip, r1, r2
 801e3b4:	4604      	mov	r4, r0
 801e3b6:	2301      	movs	r3, #1
 801e3b8:	e7f0      	b.n	801e39c <_svfiprintf_r+0x194>
 801e3ba:	ab03      	add	r3, sp, #12
 801e3bc:	9300      	str	r3, [sp, #0]
 801e3be:	462a      	mov	r2, r5
 801e3c0:	4b0f      	ldr	r3, [pc, #60]	; (801e400 <_svfiprintf_r+0x1f8>)
 801e3c2:	a904      	add	r1, sp, #16
 801e3c4:	4638      	mov	r0, r7
 801e3c6:	f7fb fe33 	bl	801a030 <_printf_float>
 801e3ca:	1c42      	adds	r2, r0, #1
 801e3cc:	4606      	mov	r6, r0
 801e3ce:	d1d6      	bne.n	801e37e <_svfiprintf_r+0x176>
 801e3d0:	89ab      	ldrh	r3, [r5, #12]
 801e3d2:	065b      	lsls	r3, r3, #25
 801e3d4:	f53f af2c 	bmi.w	801e230 <_svfiprintf_r+0x28>
 801e3d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e3da:	b01d      	add	sp, #116	; 0x74
 801e3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3e0:	ab03      	add	r3, sp, #12
 801e3e2:	9300      	str	r3, [sp, #0]
 801e3e4:	462a      	mov	r2, r5
 801e3e6:	4b06      	ldr	r3, [pc, #24]	; (801e400 <_svfiprintf_r+0x1f8>)
 801e3e8:	a904      	add	r1, sp, #16
 801e3ea:	4638      	mov	r0, r7
 801e3ec:	f7fc f8c4 	bl	801a578 <_printf_i>
 801e3f0:	e7eb      	b.n	801e3ca <_svfiprintf_r+0x1c2>
 801e3f2:	bf00      	nop
 801e3f4:	080211cc 	.word	0x080211cc
 801e3f8:	080211d6 	.word	0x080211d6
 801e3fc:	0801a031 	.word	0x0801a031
 801e400:	0801e151 	.word	0x0801e151
 801e404:	080211d2 	.word	0x080211d2

0801e408 <_sungetc_r>:
 801e408:	b538      	push	{r3, r4, r5, lr}
 801e40a:	1c4b      	adds	r3, r1, #1
 801e40c:	4614      	mov	r4, r2
 801e40e:	d103      	bne.n	801e418 <_sungetc_r+0x10>
 801e410:	f04f 35ff 	mov.w	r5, #4294967295
 801e414:	4628      	mov	r0, r5
 801e416:	bd38      	pop	{r3, r4, r5, pc}
 801e418:	8993      	ldrh	r3, [r2, #12]
 801e41a:	f023 0320 	bic.w	r3, r3, #32
 801e41e:	8193      	strh	r3, [r2, #12]
 801e420:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e422:	6852      	ldr	r2, [r2, #4]
 801e424:	b2cd      	uxtb	r5, r1
 801e426:	b18b      	cbz	r3, 801e44c <_sungetc_r+0x44>
 801e428:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e42a:	4293      	cmp	r3, r2
 801e42c:	dd08      	ble.n	801e440 <_sungetc_r+0x38>
 801e42e:	6823      	ldr	r3, [r4, #0]
 801e430:	1e5a      	subs	r2, r3, #1
 801e432:	6022      	str	r2, [r4, #0]
 801e434:	f803 5c01 	strb.w	r5, [r3, #-1]
 801e438:	6863      	ldr	r3, [r4, #4]
 801e43a:	3301      	adds	r3, #1
 801e43c:	6063      	str	r3, [r4, #4]
 801e43e:	e7e9      	b.n	801e414 <_sungetc_r+0xc>
 801e440:	4621      	mov	r1, r4
 801e442:	f000 fca5 	bl	801ed90 <__submore>
 801e446:	2800      	cmp	r0, #0
 801e448:	d0f1      	beq.n	801e42e <_sungetc_r+0x26>
 801e44a:	e7e1      	b.n	801e410 <_sungetc_r+0x8>
 801e44c:	6921      	ldr	r1, [r4, #16]
 801e44e:	6823      	ldr	r3, [r4, #0]
 801e450:	b151      	cbz	r1, 801e468 <_sungetc_r+0x60>
 801e452:	4299      	cmp	r1, r3
 801e454:	d208      	bcs.n	801e468 <_sungetc_r+0x60>
 801e456:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801e45a:	42a9      	cmp	r1, r5
 801e45c:	d104      	bne.n	801e468 <_sungetc_r+0x60>
 801e45e:	3b01      	subs	r3, #1
 801e460:	3201      	adds	r2, #1
 801e462:	6023      	str	r3, [r4, #0]
 801e464:	6062      	str	r2, [r4, #4]
 801e466:	e7d5      	b.n	801e414 <_sungetc_r+0xc>
 801e468:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801e46c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e470:	6363      	str	r3, [r4, #52]	; 0x34
 801e472:	2303      	movs	r3, #3
 801e474:	63a3      	str	r3, [r4, #56]	; 0x38
 801e476:	4623      	mov	r3, r4
 801e478:	f803 5f46 	strb.w	r5, [r3, #70]!
 801e47c:	6023      	str	r3, [r4, #0]
 801e47e:	2301      	movs	r3, #1
 801e480:	e7dc      	b.n	801e43c <_sungetc_r+0x34>

0801e482 <__ssrefill_r>:
 801e482:	b510      	push	{r4, lr}
 801e484:	460c      	mov	r4, r1
 801e486:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e488:	b169      	cbz	r1, 801e4a6 <__ssrefill_r+0x24>
 801e48a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e48e:	4299      	cmp	r1, r3
 801e490:	d001      	beq.n	801e496 <__ssrefill_r+0x14>
 801e492:	f7fb fc83 	bl	8019d9c <_free_r>
 801e496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e498:	6063      	str	r3, [r4, #4]
 801e49a:	2000      	movs	r0, #0
 801e49c:	6360      	str	r0, [r4, #52]	; 0x34
 801e49e:	b113      	cbz	r3, 801e4a6 <__ssrefill_r+0x24>
 801e4a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e4a2:	6023      	str	r3, [r4, #0]
 801e4a4:	bd10      	pop	{r4, pc}
 801e4a6:	6923      	ldr	r3, [r4, #16]
 801e4a8:	6023      	str	r3, [r4, #0]
 801e4aa:	2300      	movs	r3, #0
 801e4ac:	6063      	str	r3, [r4, #4]
 801e4ae:	89a3      	ldrh	r3, [r4, #12]
 801e4b0:	f043 0320 	orr.w	r3, r3, #32
 801e4b4:	81a3      	strh	r3, [r4, #12]
 801e4b6:	f04f 30ff 	mov.w	r0, #4294967295
 801e4ba:	e7f3      	b.n	801e4a4 <__ssrefill_r+0x22>

0801e4bc <__ssvfiscanf_r>:
 801e4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4c0:	460c      	mov	r4, r1
 801e4c2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801e4c6:	2100      	movs	r1, #0
 801e4c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801e4cc:	49b2      	ldr	r1, [pc, #712]	; (801e798 <__ssvfiscanf_r+0x2dc>)
 801e4ce:	91a0      	str	r1, [sp, #640]	; 0x280
 801e4d0:	f10d 0804 	add.w	r8, sp, #4
 801e4d4:	49b1      	ldr	r1, [pc, #708]	; (801e79c <__ssvfiscanf_r+0x2e0>)
 801e4d6:	4fb2      	ldr	r7, [pc, #712]	; (801e7a0 <__ssvfiscanf_r+0x2e4>)
 801e4d8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801e7a4 <__ssvfiscanf_r+0x2e8>
 801e4dc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801e4e0:	4606      	mov	r6, r0
 801e4e2:	91a1      	str	r1, [sp, #644]	; 0x284
 801e4e4:	9300      	str	r3, [sp, #0]
 801e4e6:	f892 a000 	ldrb.w	sl, [r2]
 801e4ea:	f1ba 0f00 	cmp.w	sl, #0
 801e4ee:	f000 8151 	beq.w	801e794 <__ssvfiscanf_r+0x2d8>
 801e4f2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801e4f6:	f013 0308 	ands.w	r3, r3, #8
 801e4fa:	f102 0501 	add.w	r5, r2, #1
 801e4fe:	d019      	beq.n	801e534 <__ssvfiscanf_r+0x78>
 801e500:	6863      	ldr	r3, [r4, #4]
 801e502:	2b00      	cmp	r3, #0
 801e504:	dd0f      	ble.n	801e526 <__ssvfiscanf_r+0x6a>
 801e506:	6823      	ldr	r3, [r4, #0]
 801e508:	781a      	ldrb	r2, [r3, #0]
 801e50a:	5cba      	ldrb	r2, [r7, r2]
 801e50c:	0712      	lsls	r2, r2, #28
 801e50e:	d401      	bmi.n	801e514 <__ssvfiscanf_r+0x58>
 801e510:	462a      	mov	r2, r5
 801e512:	e7e8      	b.n	801e4e6 <__ssvfiscanf_r+0x2a>
 801e514:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e516:	3201      	adds	r2, #1
 801e518:	9245      	str	r2, [sp, #276]	; 0x114
 801e51a:	6862      	ldr	r2, [r4, #4]
 801e51c:	3301      	adds	r3, #1
 801e51e:	3a01      	subs	r2, #1
 801e520:	6062      	str	r2, [r4, #4]
 801e522:	6023      	str	r3, [r4, #0]
 801e524:	e7ec      	b.n	801e500 <__ssvfiscanf_r+0x44>
 801e526:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e528:	4621      	mov	r1, r4
 801e52a:	4630      	mov	r0, r6
 801e52c:	4798      	blx	r3
 801e52e:	2800      	cmp	r0, #0
 801e530:	d0e9      	beq.n	801e506 <__ssvfiscanf_r+0x4a>
 801e532:	e7ed      	b.n	801e510 <__ssvfiscanf_r+0x54>
 801e534:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801e538:	f040 8083 	bne.w	801e642 <__ssvfiscanf_r+0x186>
 801e53c:	9341      	str	r3, [sp, #260]	; 0x104
 801e53e:	9343      	str	r3, [sp, #268]	; 0x10c
 801e540:	7853      	ldrb	r3, [r2, #1]
 801e542:	2b2a      	cmp	r3, #42	; 0x2a
 801e544:	bf02      	ittt	eq
 801e546:	2310      	moveq	r3, #16
 801e548:	1c95      	addeq	r5, r2, #2
 801e54a:	9341      	streq	r3, [sp, #260]	; 0x104
 801e54c:	220a      	movs	r2, #10
 801e54e:	46ab      	mov	fp, r5
 801e550:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801e554:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801e558:	2b09      	cmp	r3, #9
 801e55a:	d91d      	bls.n	801e598 <__ssvfiscanf_r+0xdc>
 801e55c:	4891      	ldr	r0, [pc, #580]	; (801e7a4 <__ssvfiscanf_r+0x2e8>)
 801e55e:	2203      	movs	r2, #3
 801e560:	f7e1 fe4e 	bl	8000200 <memchr>
 801e564:	b140      	cbz	r0, 801e578 <__ssvfiscanf_r+0xbc>
 801e566:	2301      	movs	r3, #1
 801e568:	eba0 0009 	sub.w	r0, r0, r9
 801e56c:	fa03 f000 	lsl.w	r0, r3, r0
 801e570:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e572:	4318      	orrs	r0, r3
 801e574:	9041      	str	r0, [sp, #260]	; 0x104
 801e576:	465d      	mov	r5, fp
 801e578:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e57c:	2b78      	cmp	r3, #120	; 0x78
 801e57e:	d806      	bhi.n	801e58e <__ssvfiscanf_r+0xd2>
 801e580:	2b57      	cmp	r3, #87	; 0x57
 801e582:	d810      	bhi.n	801e5a6 <__ssvfiscanf_r+0xea>
 801e584:	2b25      	cmp	r3, #37	; 0x25
 801e586:	d05c      	beq.n	801e642 <__ssvfiscanf_r+0x186>
 801e588:	d856      	bhi.n	801e638 <__ssvfiscanf_r+0x17c>
 801e58a:	2b00      	cmp	r3, #0
 801e58c:	d074      	beq.n	801e678 <__ssvfiscanf_r+0x1bc>
 801e58e:	2303      	movs	r3, #3
 801e590:	9347      	str	r3, [sp, #284]	; 0x11c
 801e592:	230a      	movs	r3, #10
 801e594:	9342      	str	r3, [sp, #264]	; 0x108
 801e596:	e081      	b.n	801e69c <__ssvfiscanf_r+0x1e0>
 801e598:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801e59a:	fb02 1303 	mla	r3, r2, r3, r1
 801e59e:	3b30      	subs	r3, #48	; 0x30
 801e5a0:	9343      	str	r3, [sp, #268]	; 0x10c
 801e5a2:	465d      	mov	r5, fp
 801e5a4:	e7d3      	b.n	801e54e <__ssvfiscanf_r+0x92>
 801e5a6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801e5aa:	2a20      	cmp	r2, #32
 801e5ac:	d8ef      	bhi.n	801e58e <__ssvfiscanf_r+0xd2>
 801e5ae:	a101      	add	r1, pc, #4	; (adr r1, 801e5b4 <__ssvfiscanf_r+0xf8>)
 801e5b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e5b4:	0801e687 	.word	0x0801e687
 801e5b8:	0801e58f 	.word	0x0801e58f
 801e5bc:	0801e58f 	.word	0x0801e58f
 801e5c0:	0801e6e5 	.word	0x0801e6e5
 801e5c4:	0801e58f 	.word	0x0801e58f
 801e5c8:	0801e58f 	.word	0x0801e58f
 801e5cc:	0801e58f 	.word	0x0801e58f
 801e5d0:	0801e58f 	.word	0x0801e58f
 801e5d4:	0801e58f 	.word	0x0801e58f
 801e5d8:	0801e58f 	.word	0x0801e58f
 801e5dc:	0801e58f 	.word	0x0801e58f
 801e5e0:	0801e6fb 	.word	0x0801e6fb
 801e5e4:	0801e6d1 	.word	0x0801e6d1
 801e5e8:	0801e63f 	.word	0x0801e63f
 801e5ec:	0801e63f 	.word	0x0801e63f
 801e5f0:	0801e63f 	.word	0x0801e63f
 801e5f4:	0801e58f 	.word	0x0801e58f
 801e5f8:	0801e6d5 	.word	0x0801e6d5
 801e5fc:	0801e58f 	.word	0x0801e58f
 801e600:	0801e58f 	.word	0x0801e58f
 801e604:	0801e58f 	.word	0x0801e58f
 801e608:	0801e58f 	.word	0x0801e58f
 801e60c:	0801e70b 	.word	0x0801e70b
 801e610:	0801e6dd 	.word	0x0801e6dd
 801e614:	0801e67f 	.word	0x0801e67f
 801e618:	0801e58f 	.word	0x0801e58f
 801e61c:	0801e58f 	.word	0x0801e58f
 801e620:	0801e707 	.word	0x0801e707
 801e624:	0801e58f 	.word	0x0801e58f
 801e628:	0801e6d1 	.word	0x0801e6d1
 801e62c:	0801e58f 	.word	0x0801e58f
 801e630:	0801e58f 	.word	0x0801e58f
 801e634:	0801e687 	.word	0x0801e687
 801e638:	3b45      	subs	r3, #69	; 0x45
 801e63a:	2b02      	cmp	r3, #2
 801e63c:	d8a7      	bhi.n	801e58e <__ssvfiscanf_r+0xd2>
 801e63e:	2305      	movs	r3, #5
 801e640:	e02b      	b.n	801e69a <__ssvfiscanf_r+0x1de>
 801e642:	6863      	ldr	r3, [r4, #4]
 801e644:	2b00      	cmp	r3, #0
 801e646:	dd0d      	ble.n	801e664 <__ssvfiscanf_r+0x1a8>
 801e648:	6823      	ldr	r3, [r4, #0]
 801e64a:	781a      	ldrb	r2, [r3, #0]
 801e64c:	4552      	cmp	r2, sl
 801e64e:	f040 80a1 	bne.w	801e794 <__ssvfiscanf_r+0x2d8>
 801e652:	3301      	adds	r3, #1
 801e654:	6862      	ldr	r2, [r4, #4]
 801e656:	6023      	str	r3, [r4, #0]
 801e658:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801e65a:	3a01      	subs	r2, #1
 801e65c:	3301      	adds	r3, #1
 801e65e:	6062      	str	r2, [r4, #4]
 801e660:	9345      	str	r3, [sp, #276]	; 0x114
 801e662:	e755      	b.n	801e510 <__ssvfiscanf_r+0x54>
 801e664:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e666:	4621      	mov	r1, r4
 801e668:	4630      	mov	r0, r6
 801e66a:	4798      	blx	r3
 801e66c:	2800      	cmp	r0, #0
 801e66e:	d0eb      	beq.n	801e648 <__ssvfiscanf_r+0x18c>
 801e670:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e672:	2800      	cmp	r0, #0
 801e674:	f040 8084 	bne.w	801e780 <__ssvfiscanf_r+0x2c4>
 801e678:	f04f 30ff 	mov.w	r0, #4294967295
 801e67c:	e086      	b.n	801e78c <__ssvfiscanf_r+0x2d0>
 801e67e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e680:	f042 0220 	orr.w	r2, r2, #32
 801e684:	9241      	str	r2, [sp, #260]	; 0x104
 801e686:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e68c:	9241      	str	r2, [sp, #260]	; 0x104
 801e68e:	2210      	movs	r2, #16
 801e690:	2b6f      	cmp	r3, #111	; 0x6f
 801e692:	9242      	str	r2, [sp, #264]	; 0x108
 801e694:	bf34      	ite	cc
 801e696:	2303      	movcc	r3, #3
 801e698:	2304      	movcs	r3, #4
 801e69a:	9347      	str	r3, [sp, #284]	; 0x11c
 801e69c:	6863      	ldr	r3, [r4, #4]
 801e69e:	2b00      	cmp	r3, #0
 801e6a0:	dd41      	ble.n	801e726 <__ssvfiscanf_r+0x26a>
 801e6a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e6a4:	0659      	lsls	r1, r3, #25
 801e6a6:	d404      	bmi.n	801e6b2 <__ssvfiscanf_r+0x1f6>
 801e6a8:	6823      	ldr	r3, [r4, #0]
 801e6aa:	781a      	ldrb	r2, [r3, #0]
 801e6ac:	5cba      	ldrb	r2, [r7, r2]
 801e6ae:	0712      	lsls	r2, r2, #28
 801e6b0:	d440      	bmi.n	801e734 <__ssvfiscanf_r+0x278>
 801e6b2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801e6b4:	2b02      	cmp	r3, #2
 801e6b6:	dc4f      	bgt.n	801e758 <__ssvfiscanf_r+0x29c>
 801e6b8:	466b      	mov	r3, sp
 801e6ba:	4622      	mov	r2, r4
 801e6bc:	a941      	add	r1, sp, #260	; 0x104
 801e6be:	4630      	mov	r0, r6
 801e6c0:	f000 f9ce 	bl	801ea60 <_scanf_chars>
 801e6c4:	2801      	cmp	r0, #1
 801e6c6:	d065      	beq.n	801e794 <__ssvfiscanf_r+0x2d8>
 801e6c8:	2802      	cmp	r0, #2
 801e6ca:	f47f af21 	bne.w	801e510 <__ssvfiscanf_r+0x54>
 801e6ce:	e7cf      	b.n	801e670 <__ssvfiscanf_r+0x1b4>
 801e6d0:	220a      	movs	r2, #10
 801e6d2:	e7dd      	b.n	801e690 <__ssvfiscanf_r+0x1d4>
 801e6d4:	2300      	movs	r3, #0
 801e6d6:	9342      	str	r3, [sp, #264]	; 0x108
 801e6d8:	2303      	movs	r3, #3
 801e6da:	e7de      	b.n	801e69a <__ssvfiscanf_r+0x1de>
 801e6dc:	2308      	movs	r3, #8
 801e6de:	9342      	str	r3, [sp, #264]	; 0x108
 801e6e0:	2304      	movs	r3, #4
 801e6e2:	e7da      	b.n	801e69a <__ssvfiscanf_r+0x1de>
 801e6e4:	4629      	mov	r1, r5
 801e6e6:	4640      	mov	r0, r8
 801e6e8:	f000 fb18 	bl	801ed1c <__sccl>
 801e6ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e6ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e6f2:	9341      	str	r3, [sp, #260]	; 0x104
 801e6f4:	4605      	mov	r5, r0
 801e6f6:	2301      	movs	r3, #1
 801e6f8:	e7cf      	b.n	801e69a <__ssvfiscanf_r+0x1de>
 801e6fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e6fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e700:	9341      	str	r3, [sp, #260]	; 0x104
 801e702:	2300      	movs	r3, #0
 801e704:	e7c9      	b.n	801e69a <__ssvfiscanf_r+0x1de>
 801e706:	2302      	movs	r3, #2
 801e708:	e7c7      	b.n	801e69a <__ssvfiscanf_r+0x1de>
 801e70a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801e70c:	06c3      	lsls	r3, r0, #27
 801e70e:	f53f aeff 	bmi.w	801e510 <__ssvfiscanf_r+0x54>
 801e712:	9b00      	ldr	r3, [sp, #0]
 801e714:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e716:	1d19      	adds	r1, r3, #4
 801e718:	9100      	str	r1, [sp, #0]
 801e71a:	681b      	ldr	r3, [r3, #0]
 801e71c:	07c0      	lsls	r0, r0, #31
 801e71e:	bf4c      	ite	mi
 801e720:	801a      	strhmi	r2, [r3, #0]
 801e722:	601a      	strpl	r2, [r3, #0]
 801e724:	e6f4      	b.n	801e510 <__ssvfiscanf_r+0x54>
 801e726:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e728:	4621      	mov	r1, r4
 801e72a:	4630      	mov	r0, r6
 801e72c:	4798      	blx	r3
 801e72e:	2800      	cmp	r0, #0
 801e730:	d0b7      	beq.n	801e6a2 <__ssvfiscanf_r+0x1e6>
 801e732:	e79d      	b.n	801e670 <__ssvfiscanf_r+0x1b4>
 801e734:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e736:	3201      	adds	r2, #1
 801e738:	9245      	str	r2, [sp, #276]	; 0x114
 801e73a:	6862      	ldr	r2, [r4, #4]
 801e73c:	3a01      	subs	r2, #1
 801e73e:	2a00      	cmp	r2, #0
 801e740:	6062      	str	r2, [r4, #4]
 801e742:	dd02      	ble.n	801e74a <__ssvfiscanf_r+0x28e>
 801e744:	3301      	adds	r3, #1
 801e746:	6023      	str	r3, [r4, #0]
 801e748:	e7ae      	b.n	801e6a8 <__ssvfiscanf_r+0x1ec>
 801e74a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e74c:	4621      	mov	r1, r4
 801e74e:	4630      	mov	r0, r6
 801e750:	4798      	blx	r3
 801e752:	2800      	cmp	r0, #0
 801e754:	d0a8      	beq.n	801e6a8 <__ssvfiscanf_r+0x1ec>
 801e756:	e78b      	b.n	801e670 <__ssvfiscanf_r+0x1b4>
 801e758:	2b04      	cmp	r3, #4
 801e75a:	dc06      	bgt.n	801e76a <__ssvfiscanf_r+0x2ae>
 801e75c:	466b      	mov	r3, sp
 801e75e:	4622      	mov	r2, r4
 801e760:	a941      	add	r1, sp, #260	; 0x104
 801e762:	4630      	mov	r0, r6
 801e764:	f000 f9d4 	bl	801eb10 <_scanf_i>
 801e768:	e7ac      	b.n	801e6c4 <__ssvfiscanf_r+0x208>
 801e76a:	4b0f      	ldr	r3, [pc, #60]	; (801e7a8 <__ssvfiscanf_r+0x2ec>)
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	f43f aecf 	beq.w	801e510 <__ssvfiscanf_r+0x54>
 801e772:	466b      	mov	r3, sp
 801e774:	4622      	mov	r2, r4
 801e776:	a941      	add	r1, sp, #260	; 0x104
 801e778:	4630      	mov	r0, r6
 801e77a:	f7fc f823 	bl	801a7c4 <_scanf_float>
 801e77e:	e7a1      	b.n	801e6c4 <__ssvfiscanf_r+0x208>
 801e780:	89a3      	ldrh	r3, [r4, #12]
 801e782:	f013 0f40 	tst.w	r3, #64	; 0x40
 801e786:	bf18      	it	ne
 801e788:	f04f 30ff 	movne.w	r0, #4294967295
 801e78c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801e790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e794:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e796:	e7f9      	b.n	801e78c <__ssvfiscanf_r+0x2d0>
 801e798:	0801e409 	.word	0x0801e409
 801e79c:	0801e483 	.word	0x0801e483
 801e7a0:	08020d31 	.word	0x08020d31
 801e7a4:	080211d2 	.word	0x080211d2
 801e7a8:	0801a7c5 	.word	0x0801a7c5

0801e7ac <__sfputc_r>:
 801e7ac:	6893      	ldr	r3, [r2, #8]
 801e7ae:	3b01      	subs	r3, #1
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	b410      	push	{r4}
 801e7b4:	6093      	str	r3, [r2, #8]
 801e7b6:	da08      	bge.n	801e7ca <__sfputc_r+0x1e>
 801e7b8:	6994      	ldr	r4, [r2, #24]
 801e7ba:	42a3      	cmp	r3, r4
 801e7bc:	db01      	blt.n	801e7c2 <__sfputc_r+0x16>
 801e7be:	290a      	cmp	r1, #10
 801e7c0:	d103      	bne.n	801e7ca <__sfputc_r+0x1e>
 801e7c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7c6:	f7fd bb7f 	b.w	801bec8 <__swbuf_r>
 801e7ca:	6813      	ldr	r3, [r2, #0]
 801e7cc:	1c58      	adds	r0, r3, #1
 801e7ce:	6010      	str	r0, [r2, #0]
 801e7d0:	7019      	strb	r1, [r3, #0]
 801e7d2:	4608      	mov	r0, r1
 801e7d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7d8:	4770      	bx	lr

0801e7da <__sfputs_r>:
 801e7da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7dc:	4606      	mov	r6, r0
 801e7de:	460f      	mov	r7, r1
 801e7e0:	4614      	mov	r4, r2
 801e7e2:	18d5      	adds	r5, r2, r3
 801e7e4:	42ac      	cmp	r4, r5
 801e7e6:	d101      	bne.n	801e7ec <__sfputs_r+0x12>
 801e7e8:	2000      	movs	r0, #0
 801e7ea:	e007      	b.n	801e7fc <__sfputs_r+0x22>
 801e7ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7f0:	463a      	mov	r2, r7
 801e7f2:	4630      	mov	r0, r6
 801e7f4:	f7ff ffda 	bl	801e7ac <__sfputc_r>
 801e7f8:	1c43      	adds	r3, r0, #1
 801e7fa:	d1f3      	bne.n	801e7e4 <__sfputs_r+0xa>
 801e7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e800 <_vfiprintf_r>:
 801e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e804:	460d      	mov	r5, r1
 801e806:	b09d      	sub	sp, #116	; 0x74
 801e808:	4614      	mov	r4, r2
 801e80a:	4698      	mov	r8, r3
 801e80c:	4606      	mov	r6, r0
 801e80e:	b118      	cbz	r0, 801e818 <_vfiprintf_r+0x18>
 801e810:	6983      	ldr	r3, [r0, #24]
 801e812:	b90b      	cbnz	r3, 801e818 <_vfiprintf_r+0x18>
 801e814:	f7fb f9bc 	bl	8019b90 <__sinit>
 801e818:	4b89      	ldr	r3, [pc, #548]	; (801ea40 <_vfiprintf_r+0x240>)
 801e81a:	429d      	cmp	r5, r3
 801e81c:	d11b      	bne.n	801e856 <_vfiprintf_r+0x56>
 801e81e:	6875      	ldr	r5, [r6, #4]
 801e820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e822:	07d9      	lsls	r1, r3, #31
 801e824:	d405      	bmi.n	801e832 <_vfiprintf_r+0x32>
 801e826:	89ab      	ldrh	r3, [r5, #12]
 801e828:	059a      	lsls	r2, r3, #22
 801e82a:	d402      	bmi.n	801e832 <_vfiprintf_r+0x32>
 801e82c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e82e:	f7fb fa72 	bl	8019d16 <__retarget_lock_acquire_recursive>
 801e832:	89ab      	ldrh	r3, [r5, #12]
 801e834:	071b      	lsls	r3, r3, #28
 801e836:	d501      	bpl.n	801e83c <_vfiprintf_r+0x3c>
 801e838:	692b      	ldr	r3, [r5, #16]
 801e83a:	b9eb      	cbnz	r3, 801e878 <_vfiprintf_r+0x78>
 801e83c:	4629      	mov	r1, r5
 801e83e:	4630      	mov	r0, r6
 801e840:	f7fd fba6 	bl	801bf90 <__swsetup_r>
 801e844:	b1c0      	cbz	r0, 801e878 <_vfiprintf_r+0x78>
 801e846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e848:	07dc      	lsls	r4, r3, #31
 801e84a:	d50e      	bpl.n	801e86a <_vfiprintf_r+0x6a>
 801e84c:	f04f 30ff 	mov.w	r0, #4294967295
 801e850:	b01d      	add	sp, #116	; 0x74
 801e852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e856:	4b7b      	ldr	r3, [pc, #492]	; (801ea44 <_vfiprintf_r+0x244>)
 801e858:	429d      	cmp	r5, r3
 801e85a:	d101      	bne.n	801e860 <_vfiprintf_r+0x60>
 801e85c:	68b5      	ldr	r5, [r6, #8]
 801e85e:	e7df      	b.n	801e820 <_vfiprintf_r+0x20>
 801e860:	4b79      	ldr	r3, [pc, #484]	; (801ea48 <_vfiprintf_r+0x248>)
 801e862:	429d      	cmp	r5, r3
 801e864:	bf08      	it	eq
 801e866:	68f5      	ldreq	r5, [r6, #12]
 801e868:	e7da      	b.n	801e820 <_vfiprintf_r+0x20>
 801e86a:	89ab      	ldrh	r3, [r5, #12]
 801e86c:	0598      	lsls	r0, r3, #22
 801e86e:	d4ed      	bmi.n	801e84c <_vfiprintf_r+0x4c>
 801e870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e872:	f7fb fa51 	bl	8019d18 <__retarget_lock_release_recursive>
 801e876:	e7e9      	b.n	801e84c <_vfiprintf_r+0x4c>
 801e878:	2300      	movs	r3, #0
 801e87a:	9309      	str	r3, [sp, #36]	; 0x24
 801e87c:	2320      	movs	r3, #32
 801e87e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e882:	f8cd 800c 	str.w	r8, [sp, #12]
 801e886:	2330      	movs	r3, #48	; 0x30
 801e888:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ea4c <_vfiprintf_r+0x24c>
 801e88c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e890:	f04f 0901 	mov.w	r9, #1
 801e894:	4623      	mov	r3, r4
 801e896:	469a      	mov	sl, r3
 801e898:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e89c:	b10a      	cbz	r2, 801e8a2 <_vfiprintf_r+0xa2>
 801e89e:	2a25      	cmp	r2, #37	; 0x25
 801e8a0:	d1f9      	bne.n	801e896 <_vfiprintf_r+0x96>
 801e8a2:	ebba 0b04 	subs.w	fp, sl, r4
 801e8a6:	d00b      	beq.n	801e8c0 <_vfiprintf_r+0xc0>
 801e8a8:	465b      	mov	r3, fp
 801e8aa:	4622      	mov	r2, r4
 801e8ac:	4629      	mov	r1, r5
 801e8ae:	4630      	mov	r0, r6
 801e8b0:	f7ff ff93 	bl	801e7da <__sfputs_r>
 801e8b4:	3001      	adds	r0, #1
 801e8b6:	f000 80aa 	beq.w	801ea0e <_vfiprintf_r+0x20e>
 801e8ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e8bc:	445a      	add	r2, fp
 801e8be:	9209      	str	r2, [sp, #36]	; 0x24
 801e8c0:	f89a 3000 	ldrb.w	r3, [sl]
 801e8c4:	2b00      	cmp	r3, #0
 801e8c6:	f000 80a2 	beq.w	801ea0e <_vfiprintf_r+0x20e>
 801e8ca:	2300      	movs	r3, #0
 801e8cc:	f04f 32ff 	mov.w	r2, #4294967295
 801e8d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e8d4:	f10a 0a01 	add.w	sl, sl, #1
 801e8d8:	9304      	str	r3, [sp, #16]
 801e8da:	9307      	str	r3, [sp, #28]
 801e8dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e8e0:	931a      	str	r3, [sp, #104]	; 0x68
 801e8e2:	4654      	mov	r4, sl
 801e8e4:	2205      	movs	r2, #5
 801e8e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e8ea:	4858      	ldr	r0, [pc, #352]	; (801ea4c <_vfiprintf_r+0x24c>)
 801e8ec:	f7e1 fc88 	bl	8000200 <memchr>
 801e8f0:	9a04      	ldr	r2, [sp, #16]
 801e8f2:	b9d8      	cbnz	r0, 801e92c <_vfiprintf_r+0x12c>
 801e8f4:	06d1      	lsls	r1, r2, #27
 801e8f6:	bf44      	itt	mi
 801e8f8:	2320      	movmi	r3, #32
 801e8fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e8fe:	0713      	lsls	r3, r2, #28
 801e900:	bf44      	itt	mi
 801e902:	232b      	movmi	r3, #43	; 0x2b
 801e904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e908:	f89a 3000 	ldrb.w	r3, [sl]
 801e90c:	2b2a      	cmp	r3, #42	; 0x2a
 801e90e:	d015      	beq.n	801e93c <_vfiprintf_r+0x13c>
 801e910:	9a07      	ldr	r2, [sp, #28]
 801e912:	4654      	mov	r4, sl
 801e914:	2000      	movs	r0, #0
 801e916:	f04f 0c0a 	mov.w	ip, #10
 801e91a:	4621      	mov	r1, r4
 801e91c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e920:	3b30      	subs	r3, #48	; 0x30
 801e922:	2b09      	cmp	r3, #9
 801e924:	d94e      	bls.n	801e9c4 <_vfiprintf_r+0x1c4>
 801e926:	b1b0      	cbz	r0, 801e956 <_vfiprintf_r+0x156>
 801e928:	9207      	str	r2, [sp, #28]
 801e92a:	e014      	b.n	801e956 <_vfiprintf_r+0x156>
 801e92c:	eba0 0308 	sub.w	r3, r0, r8
 801e930:	fa09 f303 	lsl.w	r3, r9, r3
 801e934:	4313      	orrs	r3, r2
 801e936:	9304      	str	r3, [sp, #16]
 801e938:	46a2      	mov	sl, r4
 801e93a:	e7d2      	b.n	801e8e2 <_vfiprintf_r+0xe2>
 801e93c:	9b03      	ldr	r3, [sp, #12]
 801e93e:	1d19      	adds	r1, r3, #4
 801e940:	681b      	ldr	r3, [r3, #0]
 801e942:	9103      	str	r1, [sp, #12]
 801e944:	2b00      	cmp	r3, #0
 801e946:	bfbb      	ittet	lt
 801e948:	425b      	neglt	r3, r3
 801e94a:	f042 0202 	orrlt.w	r2, r2, #2
 801e94e:	9307      	strge	r3, [sp, #28]
 801e950:	9307      	strlt	r3, [sp, #28]
 801e952:	bfb8      	it	lt
 801e954:	9204      	strlt	r2, [sp, #16]
 801e956:	7823      	ldrb	r3, [r4, #0]
 801e958:	2b2e      	cmp	r3, #46	; 0x2e
 801e95a:	d10c      	bne.n	801e976 <_vfiprintf_r+0x176>
 801e95c:	7863      	ldrb	r3, [r4, #1]
 801e95e:	2b2a      	cmp	r3, #42	; 0x2a
 801e960:	d135      	bne.n	801e9ce <_vfiprintf_r+0x1ce>
 801e962:	9b03      	ldr	r3, [sp, #12]
 801e964:	1d1a      	adds	r2, r3, #4
 801e966:	681b      	ldr	r3, [r3, #0]
 801e968:	9203      	str	r2, [sp, #12]
 801e96a:	2b00      	cmp	r3, #0
 801e96c:	bfb8      	it	lt
 801e96e:	f04f 33ff 	movlt.w	r3, #4294967295
 801e972:	3402      	adds	r4, #2
 801e974:	9305      	str	r3, [sp, #20]
 801e976:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ea5c <_vfiprintf_r+0x25c>
 801e97a:	7821      	ldrb	r1, [r4, #0]
 801e97c:	2203      	movs	r2, #3
 801e97e:	4650      	mov	r0, sl
 801e980:	f7e1 fc3e 	bl	8000200 <memchr>
 801e984:	b140      	cbz	r0, 801e998 <_vfiprintf_r+0x198>
 801e986:	2340      	movs	r3, #64	; 0x40
 801e988:	eba0 000a 	sub.w	r0, r0, sl
 801e98c:	fa03 f000 	lsl.w	r0, r3, r0
 801e990:	9b04      	ldr	r3, [sp, #16]
 801e992:	4303      	orrs	r3, r0
 801e994:	3401      	adds	r4, #1
 801e996:	9304      	str	r3, [sp, #16]
 801e998:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e99c:	482c      	ldr	r0, [pc, #176]	; (801ea50 <_vfiprintf_r+0x250>)
 801e99e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e9a2:	2206      	movs	r2, #6
 801e9a4:	f7e1 fc2c 	bl	8000200 <memchr>
 801e9a8:	2800      	cmp	r0, #0
 801e9aa:	d03f      	beq.n	801ea2c <_vfiprintf_r+0x22c>
 801e9ac:	4b29      	ldr	r3, [pc, #164]	; (801ea54 <_vfiprintf_r+0x254>)
 801e9ae:	bb1b      	cbnz	r3, 801e9f8 <_vfiprintf_r+0x1f8>
 801e9b0:	9b03      	ldr	r3, [sp, #12]
 801e9b2:	3307      	adds	r3, #7
 801e9b4:	f023 0307 	bic.w	r3, r3, #7
 801e9b8:	3308      	adds	r3, #8
 801e9ba:	9303      	str	r3, [sp, #12]
 801e9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9be:	443b      	add	r3, r7
 801e9c0:	9309      	str	r3, [sp, #36]	; 0x24
 801e9c2:	e767      	b.n	801e894 <_vfiprintf_r+0x94>
 801e9c4:	fb0c 3202 	mla	r2, ip, r2, r3
 801e9c8:	460c      	mov	r4, r1
 801e9ca:	2001      	movs	r0, #1
 801e9cc:	e7a5      	b.n	801e91a <_vfiprintf_r+0x11a>
 801e9ce:	2300      	movs	r3, #0
 801e9d0:	3401      	adds	r4, #1
 801e9d2:	9305      	str	r3, [sp, #20]
 801e9d4:	4619      	mov	r1, r3
 801e9d6:	f04f 0c0a 	mov.w	ip, #10
 801e9da:	4620      	mov	r0, r4
 801e9dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e9e0:	3a30      	subs	r2, #48	; 0x30
 801e9e2:	2a09      	cmp	r2, #9
 801e9e4:	d903      	bls.n	801e9ee <_vfiprintf_r+0x1ee>
 801e9e6:	2b00      	cmp	r3, #0
 801e9e8:	d0c5      	beq.n	801e976 <_vfiprintf_r+0x176>
 801e9ea:	9105      	str	r1, [sp, #20]
 801e9ec:	e7c3      	b.n	801e976 <_vfiprintf_r+0x176>
 801e9ee:	fb0c 2101 	mla	r1, ip, r1, r2
 801e9f2:	4604      	mov	r4, r0
 801e9f4:	2301      	movs	r3, #1
 801e9f6:	e7f0      	b.n	801e9da <_vfiprintf_r+0x1da>
 801e9f8:	ab03      	add	r3, sp, #12
 801e9fa:	9300      	str	r3, [sp, #0]
 801e9fc:	462a      	mov	r2, r5
 801e9fe:	4b16      	ldr	r3, [pc, #88]	; (801ea58 <_vfiprintf_r+0x258>)
 801ea00:	a904      	add	r1, sp, #16
 801ea02:	4630      	mov	r0, r6
 801ea04:	f7fb fb14 	bl	801a030 <_printf_float>
 801ea08:	4607      	mov	r7, r0
 801ea0a:	1c78      	adds	r0, r7, #1
 801ea0c:	d1d6      	bne.n	801e9bc <_vfiprintf_r+0x1bc>
 801ea0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ea10:	07d9      	lsls	r1, r3, #31
 801ea12:	d405      	bmi.n	801ea20 <_vfiprintf_r+0x220>
 801ea14:	89ab      	ldrh	r3, [r5, #12]
 801ea16:	059a      	lsls	r2, r3, #22
 801ea18:	d402      	bmi.n	801ea20 <_vfiprintf_r+0x220>
 801ea1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ea1c:	f7fb f97c 	bl	8019d18 <__retarget_lock_release_recursive>
 801ea20:	89ab      	ldrh	r3, [r5, #12]
 801ea22:	065b      	lsls	r3, r3, #25
 801ea24:	f53f af12 	bmi.w	801e84c <_vfiprintf_r+0x4c>
 801ea28:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ea2a:	e711      	b.n	801e850 <_vfiprintf_r+0x50>
 801ea2c:	ab03      	add	r3, sp, #12
 801ea2e:	9300      	str	r3, [sp, #0]
 801ea30:	462a      	mov	r2, r5
 801ea32:	4b09      	ldr	r3, [pc, #36]	; (801ea58 <_vfiprintf_r+0x258>)
 801ea34:	a904      	add	r1, sp, #16
 801ea36:	4630      	mov	r0, r6
 801ea38:	f7fb fd9e 	bl	801a578 <_printf_i>
 801ea3c:	e7e4      	b.n	801ea08 <_vfiprintf_r+0x208>
 801ea3e:	bf00      	nop
 801ea40:	08020e54 	.word	0x08020e54
 801ea44:	08020e74 	.word	0x08020e74
 801ea48:	08020e34 	.word	0x08020e34
 801ea4c:	080211cc 	.word	0x080211cc
 801ea50:	080211d6 	.word	0x080211d6
 801ea54:	0801a031 	.word	0x0801a031
 801ea58:	0801e7db 	.word	0x0801e7db
 801ea5c:	080211d2 	.word	0x080211d2

0801ea60 <_scanf_chars>:
 801ea60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea64:	4615      	mov	r5, r2
 801ea66:	688a      	ldr	r2, [r1, #8]
 801ea68:	4680      	mov	r8, r0
 801ea6a:	460c      	mov	r4, r1
 801ea6c:	b932      	cbnz	r2, 801ea7c <_scanf_chars+0x1c>
 801ea6e:	698a      	ldr	r2, [r1, #24]
 801ea70:	2a00      	cmp	r2, #0
 801ea72:	bf0c      	ite	eq
 801ea74:	2201      	moveq	r2, #1
 801ea76:	f04f 32ff 	movne.w	r2, #4294967295
 801ea7a:	608a      	str	r2, [r1, #8]
 801ea7c:	6822      	ldr	r2, [r4, #0]
 801ea7e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801eb0c <_scanf_chars+0xac>
 801ea82:	06d1      	lsls	r1, r2, #27
 801ea84:	bf5f      	itttt	pl
 801ea86:	681a      	ldrpl	r2, [r3, #0]
 801ea88:	1d11      	addpl	r1, r2, #4
 801ea8a:	6019      	strpl	r1, [r3, #0]
 801ea8c:	6816      	ldrpl	r6, [r2, #0]
 801ea8e:	2700      	movs	r7, #0
 801ea90:	69a0      	ldr	r0, [r4, #24]
 801ea92:	b188      	cbz	r0, 801eab8 <_scanf_chars+0x58>
 801ea94:	2801      	cmp	r0, #1
 801ea96:	d107      	bne.n	801eaa8 <_scanf_chars+0x48>
 801ea98:	682b      	ldr	r3, [r5, #0]
 801ea9a:	781a      	ldrb	r2, [r3, #0]
 801ea9c:	6963      	ldr	r3, [r4, #20]
 801ea9e:	5c9b      	ldrb	r3, [r3, r2]
 801eaa0:	b953      	cbnz	r3, 801eab8 <_scanf_chars+0x58>
 801eaa2:	bb27      	cbnz	r7, 801eaee <_scanf_chars+0x8e>
 801eaa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eaa8:	2802      	cmp	r0, #2
 801eaaa:	d120      	bne.n	801eaee <_scanf_chars+0x8e>
 801eaac:	682b      	ldr	r3, [r5, #0]
 801eaae:	781b      	ldrb	r3, [r3, #0]
 801eab0:	f813 3009 	ldrb.w	r3, [r3, r9]
 801eab4:	071b      	lsls	r3, r3, #28
 801eab6:	d41a      	bmi.n	801eaee <_scanf_chars+0x8e>
 801eab8:	6823      	ldr	r3, [r4, #0]
 801eaba:	06da      	lsls	r2, r3, #27
 801eabc:	bf5e      	ittt	pl
 801eabe:	682b      	ldrpl	r3, [r5, #0]
 801eac0:	781b      	ldrbpl	r3, [r3, #0]
 801eac2:	f806 3b01 	strbpl.w	r3, [r6], #1
 801eac6:	682a      	ldr	r2, [r5, #0]
 801eac8:	686b      	ldr	r3, [r5, #4]
 801eaca:	3201      	adds	r2, #1
 801eacc:	602a      	str	r2, [r5, #0]
 801eace:	68a2      	ldr	r2, [r4, #8]
 801ead0:	3b01      	subs	r3, #1
 801ead2:	3a01      	subs	r2, #1
 801ead4:	606b      	str	r3, [r5, #4]
 801ead6:	3701      	adds	r7, #1
 801ead8:	60a2      	str	r2, [r4, #8]
 801eada:	b142      	cbz	r2, 801eaee <_scanf_chars+0x8e>
 801eadc:	2b00      	cmp	r3, #0
 801eade:	dcd7      	bgt.n	801ea90 <_scanf_chars+0x30>
 801eae0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801eae4:	4629      	mov	r1, r5
 801eae6:	4640      	mov	r0, r8
 801eae8:	4798      	blx	r3
 801eaea:	2800      	cmp	r0, #0
 801eaec:	d0d0      	beq.n	801ea90 <_scanf_chars+0x30>
 801eaee:	6823      	ldr	r3, [r4, #0]
 801eaf0:	f013 0310 	ands.w	r3, r3, #16
 801eaf4:	d105      	bne.n	801eb02 <_scanf_chars+0xa2>
 801eaf6:	68e2      	ldr	r2, [r4, #12]
 801eaf8:	3201      	adds	r2, #1
 801eafa:	60e2      	str	r2, [r4, #12]
 801eafc:	69a2      	ldr	r2, [r4, #24]
 801eafe:	b102      	cbz	r2, 801eb02 <_scanf_chars+0xa2>
 801eb00:	7033      	strb	r3, [r6, #0]
 801eb02:	6923      	ldr	r3, [r4, #16]
 801eb04:	441f      	add	r7, r3
 801eb06:	6127      	str	r7, [r4, #16]
 801eb08:	2000      	movs	r0, #0
 801eb0a:	e7cb      	b.n	801eaa4 <_scanf_chars+0x44>
 801eb0c:	08020d31 	.word	0x08020d31

0801eb10 <_scanf_i>:
 801eb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb14:	4698      	mov	r8, r3
 801eb16:	4b74      	ldr	r3, [pc, #464]	; (801ece8 <_scanf_i+0x1d8>)
 801eb18:	460c      	mov	r4, r1
 801eb1a:	4682      	mov	sl, r0
 801eb1c:	4616      	mov	r6, r2
 801eb1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801eb22:	b087      	sub	sp, #28
 801eb24:	ab03      	add	r3, sp, #12
 801eb26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801eb2a:	4b70      	ldr	r3, [pc, #448]	; (801ecec <_scanf_i+0x1dc>)
 801eb2c:	69a1      	ldr	r1, [r4, #24]
 801eb2e:	4a70      	ldr	r2, [pc, #448]	; (801ecf0 <_scanf_i+0x1e0>)
 801eb30:	2903      	cmp	r1, #3
 801eb32:	bf18      	it	ne
 801eb34:	461a      	movne	r2, r3
 801eb36:	68a3      	ldr	r3, [r4, #8]
 801eb38:	9201      	str	r2, [sp, #4]
 801eb3a:	1e5a      	subs	r2, r3, #1
 801eb3c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801eb40:	bf88      	it	hi
 801eb42:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801eb46:	4627      	mov	r7, r4
 801eb48:	bf82      	ittt	hi
 801eb4a:	eb03 0905 	addhi.w	r9, r3, r5
 801eb4e:	f240 135d 	movwhi	r3, #349	; 0x15d
 801eb52:	60a3      	strhi	r3, [r4, #8]
 801eb54:	f857 3b1c 	ldr.w	r3, [r7], #28
 801eb58:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801eb5c:	bf98      	it	ls
 801eb5e:	f04f 0900 	movls.w	r9, #0
 801eb62:	6023      	str	r3, [r4, #0]
 801eb64:	463d      	mov	r5, r7
 801eb66:	f04f 0b00 	mov.w	fp, #0
 801eb6a:	6831      	ldr	r1, [r6, #0]
 801eb6c:	ab03      	add	r3, sp, #12
 801eb6e:	7809      	ldrb	r1, [r1, #0]
 801eb70:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801eb74:	2202      	movs	r2, #2
 801eb76:	f7e1 fb43 	bl	8000200 <memchr>
 801eb7a:	b328      	cbz	r0, 801ebc8 <_scanf_i+0xb8>
 801eb7c:	f1bb 0f01 	cmp.w	fp, #1
 801eb80:	d159      	bne.n	801ec36 <_scanf_i+0x126>
 801eb82:	6862      	ldr	r2, [r4, #4]
 801eb84:	b92a      	cbnz	r2, 801eb92 <_scanf_i+0x82>
 801eb86:	6822      	ldr	r2, [r4, #0]
 801eb88:	2308      	movs	r3, #8
 801eb8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801eb8e:	6063      	str	r3, [r4, #4]
 801eb90:	6022      	str	r2, [r4, #0]
 801eb92:	6822      	ldr	r2, [r4, #0]
 801eb94:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801eb98:	6022      	str	r2, [r4, #0]
 801eb9a:	68a2      	ldr	r2, [r4, #8]
 801eb9c:	1e51      	subs	r1, r2, #1
 801eb9e:	60a1      	str	r1, [r4, #8]
 801eba0:	b192      	cbz	r2, 801ebc8 <_scanf_i+0xb8>
 801eba2:	6832      	ldr	r2, [r6, #0]
 801eba4:	1c51      	adds	r1, r2, #1
 801eba6:	6031      	str	r1, [r6, #0]
 801eba8:	7812      	ldrb	r2, [r2, #0]
 801ebaa:	f805 2b01 	strb.w	r2, [r5], #1
 801ebae:	6872      	ldr	r2, [r6, #4]
 801ebb0:	3a01      	subs	r2, #1
 801ebb2:	2a00      	cmp	r2, #0
 801ebb4:	6072      	str	r2, [r6, #4]
 801ebb6:	dc07      	bgt.n	801ebc8 <_scanf_i+0xb8>
 801ebb8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801ebbc:	4631      	mov	r1, r6
 801ebbe:	4650      	mov	r0, sl
 801ebc0:	4790      	blx	r2
 801ebc2:	2800      	cmp	r0, #0
 801ebc4:	f040 8085 	bne.w	801ecd2 <_scanf_i+0x1c2>
 801ebc8:	f10b 0b01 	add.w	fp, fp, #1
 801ebcc:	f1bb 0f03 	cmp.w	fp, #3
 801ebd0:	d1cb      	bne.n	801eb6a <_scanf_i+0x5a>
 801ebd2:	6863      	ldr	r3, [r4, #4]
 801ebd4:	b90b      	cbnz	r3, 801ebda <_scanf_i+0xca>
 801ebd6:	230a      	movs	r3, #10
 801ebd8:	6063      	str	r3, [r4, #4]
 801ebda:	6863      	ldr	r3, [r4, #4]
 801ebdc:	4945      	ldr	r1, [pc, #276]	; (801ecf4 <_scanf_i+0x1e4>)
 801ebde:	6960      	ldr	r0, [r4, #20]
 801ebe0:	1ac9      	subs	r1, r1, r3
 801ebe2:	f000 f89b 	bl	801ed1c <__sccl>
 801ebe6:	f04f 0b00 	mov.w	fp, #0
 801ebea:	68a3      	ldr	r3, [r4, #8]
 801ebec:	6822      	ldr	r2, [r4, #0]
 801ebee:	2b00      	cmp	r3, #0
 801ebf0:	d03d      	beq.n	801ec6e <_scanf_i+0x15e>
 801ebf2:	6831      	ldr	r1, [r6, #0]
 801ebf4:	6960      	ldr	r0, [r4, #20]
 801ebf6:	f891 c000 	ldrb.w	ip, [r1]
 801ebfa:	f810 000c 	ldrb.w	r0, [r0, ip]
 801ebfe:	2800      	cmp	r0, #0
 801ec00:	d035      	beq.n	801ec6e <_scanf_i+0x15e>
 801ec02:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801ec06:	d124      	bne.n	801ec52 <_scanf_i+0x142>
 801ec08:	0510      	lsls	r0, r2, #20
 801ec0a:	d522      	bpl.n	801ec52 <_scanf_i+0x142>
 801ec0c:	f10b 0b01 	add.w	fp, fp, #1
 801ec10:	f1b9 0f00 	cmp.w	r9, #0
 801ec14:	d003      	beq.n	801ec1e <_scanf_i+0x10e>
 801ec16:	3301      	adds	r3, #1
 801ec18:	f109 39ff 	add.w	r9, r9, #4294967295
 801ec1c:	60a3      	str	r3, [r4, #8]
 801ec1e:	6873      	ldr	r3, [r6, #4]
 801ec20:	3b01      	subs	r3, #1
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	6073      	str	r3, [r6, #4]
 801ec26:	dd1b      	ble.n	801ec60 <_scanf_i+0x150>
 801ec28:	6833      	ldr	r3, [r6, #0]
 801ec2a:	3301      	adds	r3, #1
 801ec2c:	6033      	str	r3, [r6, #0]
 801ec2e:	68a3      	ldr	r3, [r4, #8]
 801ec30:	3b01      	subs	r3, #1
 801ec32:	60a3      	str	r3, [r4, #8]
 801ec34:	e7d9      	b.n	801ebea <_scanf_i+0xda>
 801ec36:	f1bb 0f02 	cmp.w	fp, #2
 801ec3a:	d1ae      	bne.n	801eb9a <_scanf_i+0x8a>
 801ec3c:	6822      	ldr	r2, [r4, #0]
 801ec3e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801ec42:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801ec46:	d1bf      	bne.n	801ebc8 <_scanf_i+0xb8>
 801ec48:	2310      	movs	r3, #16
 801ec4a:	6063      	str	r3, [r4, #4]
 801ec4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ec50:	e7a2      	b.n	801eb98 <_scanf_i+0x88>
 801ec52:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801ec56:	6022      	str	r2, [r4, #0]
 801ec58:	780b      	ldrb	r3, [r1, #0]
 801ec5a:	f805 3b01 	strb.w	r3, [r5], #1
 801ec5e:	e7de      	b.n	801ec1e <_scanf_i+0x10e>
 801ec60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ec64:	4631      	mov	r1, r6
 801ec66:	4650      	mov	r0, sl
 801ec68:	4798      	blx	r3
 801ec6a:	2800      	cmp	r0, #0
 801ec6c:	d0df      	beq.n	801ec2e <_scanf_i+0x11e>
 801ec6e:	6823      	ldr	r3, [r4, #0]
 801ec70:	05d9      	lsls	r1, r3, #23
 801ec72:	d50d      	bpl.n	801ec90 <_scanf_i+0x180>
 801ec74:	42bd      	cmp	r5, r7
 801ec76:	d909      	bls.n	801ec8c <_scanf_i+0x17c>
 801ec78:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801ec7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ec80:	4632      	mov	r2, r6
 801ec82:	4650      	mov	r0, sl
 801ec84:	4798      	blx	r3
 801ec86:	f105 39ff 	add.w	r9, r5, #4294967295
 801ec8a:	464d      	mov	r5, r9
 801ec8c:	42bd      	cmp	r5, r7
 801ec8e:	d028      	beq.n	801ece2 <_scanf_i+0x1d2>
 801ec90:	6822      	ldr	r2, [r4, #0]
 801ec92:	f012 0210 	ands.w	r2, r2, #16
 801ec96:	d113      	bne.n	801ecc0 <_scanf_i+0x1b0>
 801ec98:	702a      	strb	r2, [r5, #0]
 801ec9a:	6863      	ldr	r3, [r4, #4]
 801ec9c:	9e01      	ldr	r6, [sp, #4]
 801ec9e:	4639      	mov	r1, r7
 801eca0:	4650      	mov	r0, sl
 801eca2:	47b0      	blx	r6
 801eca4:	f8d8 3000 	ldr.w	r3, [r8]
 801eca8:	6821      	ldr	r1, [r4, #0]
 801ecaa:	1d1a      	adds	r2, r3, #4
 801ecac:	f8c8 2000 	str.w	r2, [r8]
 801ecb0:	f011 0f20 	tst.w	r1, #32
 801ecb4:	681b      	ldr	r3, [r3, #0]
 801ecb6:	d00f      	beq.n	801ecd8 <_scanf_i+0x1c8>
 801ecb8:	6018      	str	r0, [r3, #0]
 801ecba:	68e3      	ldr	r3, [r4, #12]
 801ecbc:	3301      	adds	r3, #1
 801ecbe:	60e3      	str	r3, [r4, #12]
 801ecc0:	1bed      	subs	r5, r5, r7
 801ecc2:	44ab      	add	fp, r5
 801ecc4:	6925      	ldr	r5, [r4, #16]
 801ecc6:	445d      	add	r5, fp
 801ecc8:	6125      	str	r5, [r4, #16]
 801ecca:	2000      	movs	r0, #0
 801eccc:	b007      	add	sp, #28
 801ecce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecd2:	f04f 0b00 	mov.w	fp, #0
 801ecd6:	e7ca      	b.n	801ec6e <_scanf_i+0x15e>
 801ecd8:	07ca      	lsls	r2, r1, #31
 801ecda:	bf4c      	ite	mi
 801ecdc:	8018      	strhmi	r0, [r3, #0]
 801ecde:	6018      	strpl	r0, [r3, #0]
 801ece0:	e7eb      	b.n	801ecba <_scanf_i+0x1aa>
 801ece2:	2001      	movs	r0, #1
 801ece4:	e7f2      	b.n	801eccc <_scanf_i+0x1bc>
 801ece6:	bf00      	nop
 801ece8:	08020b00 	.word	0x08020b00
 801ecec:	0801be51 	.word	0x0801be51
 801ecf0:	0801bd41 	.word	0x0801bd41
 801ecf4:	080211f6 	.word	0x080211f6

0801ecf8 <_read_r>:
 801ecf8:	b538      	push	{r3, r4, r5, lr}
 801ecfa:	4d07      	ldr	r5, [pc, #28]	; (801ed18 <_read_r+0x20>)
 801ecfc:	4604      	mov	r4, r0
 801ecfe:	4608      	mov	r0, r1
 801ed00:	4611      	mov	r1, r2
 801ed02:	2200      	movs	r2, #0
 801ed04:	602a      	str	r2, [r5, #0]
 801ed06:	461a      	mov	r2, r3
 801ed08:	f7e4 fa42 	bl	8003190 <_read>
 801ed0c:	1c43      	adds	r3, r0, #1
 801ed0e:	d102      	bne.n	801ed16 <_read_r+0x1e>
 801ed10:	682b      	ldr	r3, [r5, #0]
 801ed12:	b103      	cbz	r3, 801ed16 <_read_r+0x1e>
 801ed14:	6023      	str	r3, [r4, #0]
 801ed16:	bd38      	pop	{r3, r4, r5, pc}
 801ed18:	20008f98 	.word	0x20008f98

0801ed1c <__sccl>:
 801ed1c:	b570      	push	{r4, r5, r6, lr}
 801ed1e:	780b      	ldrb	r3, [r1, #0]
 801ed20:	4604      	mov	r4, r0
 801ed22:	2b5e      	cmp	r3, #94	; 0x5e
 801ed24:	bf0b      	itete	eq
 801ed26:	784b      	ldrbeq	r3, [r1, #1]
 801ed28:	1c48      	addne	r0, r1, #1
 801ed2a:	1c88      	addeq	r0, r1, #2
 801ed2c:	2200      	movne	r2, #0
 801ed2e:	bf08      	it	eq
 801ed30:	2201      	moveq	r2, #1
 801ed32:	1e61      	subs	r1, r4, #1
 801ed34:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801ed38:	f801 2f01 	strb.w	r2, [r1, #1]!
 801ed3c:	42a9      	cmp	r1, r5
 801ed3e:	d1fb      	bne.n	801ed38 <__sccl+0x1c>
 801ed40:	b90b      	cbnz	r3, 801ed46 <__sccl+0x2a>
 801ed42:	3801      	subs	r0, #1
 801ed44:	bd70      	pop	{r4, r5, r6, pc}
 801ed46:	f082 0101 	eor.w	r1, r2, #1
 801ed4a:	54e1      	strb	r1, [r4, r3]
 801ed4c:	1c42      	adds	r2, r0, #1
 801ed4e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801ed52:	2d2d      	cmp	r5, #45	; 0x2d
 801ed54:	f102 36ff 	add.w	r6, r2, #4294967295
 801ed58:	4610      	mov	r0, r2
 801ed5a:	d006      	beq.n	801ed6a <__sccl+0x4e>
 801ed5c:	2d5d      	cmp	r5, #93	; 0x5d
 801ed5e:	d0f1      	beq.n	801ed44 <__sccl+0x28>
 801ed60:	b90d      	cbnz	r5, 801ed66 <__sccl+0x4a>
 801ed62:	4630      	mov	r0, r6
 801ed64:	e7ee      	b.n	801ed44 <__sccl+0x28>
 801ed66:	462b      	mov	r3, r5
 801ed68:	e7ef      	b.n	801ed4a <__sccl+0x2e>
 801ed6a:	7816      	ldrb	r6, [r2, #0]
 801ed6c:	2e5d      	cmp	r6, #93	; 0x5d
 801ed6e:	d0fa      	beq.n	801ed66 <__sccl+0x4a>
 801ed70:	42b3      	cmp	r3, r6
 801ed72:	dcf8      	bgt.n	801ed66 <__sccl+0x4a>
 801ed74:	4618      	mov	r0, r3
 801ed76:	3001      	adds	r0, #1
 801ed78:	4286      	cmp	r6, r0
 801ed7a:	5421      	strb	r1, [r4, r0]
 801ed7c:	dcfb      	bgt.n	801ed76 <__sccl+0x5a>
 801ed7e:	43d8      	mvns	r0, r3
 801ed80:	4430      	add	r0, r6
 801ed82:	1c5d      	adds	r5, r3, #1
 801ed84:	42b3      	cmp	r3, r6
 801ed86:	bfa8      	it	ge
 801ed88:	2000      	movge	r0, #0
 801ed8a:	182b      	adds	r3, r5, r0
 801ed8c:	3202      	adds	r2, #2
 801ed8e:	e7de      	b.n	801ed4e <__sccl+0x32>

0801ed90 <__submore>:
 801ed90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed94:	460c      	mov	r4, r1
 801ed96:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ed98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ed9c:	4299      	cmp	r1, r3
 801ed9e:	d11d      	bne.n	801eddc <__submore+0x4c>
 801eda0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801eda4:	f7fb f84a 	bl	8019e3c <_malloc_r>
 801eda8:	b918      	cbnz	r0, 801edb2 <__submore+0x22>
 801edaa:	f04f 30ff 	mov.w	r0, #4294967295
 801edae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801edb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801edb6:	63a3      	str	r3, [r4, #56]	; 0x38
 801edb8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801edbc:	6360      	str	r0, [r4, #52]	; 0x34
 801edbe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801edc2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801edc6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801edca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801edce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801edd2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801edd6:	6020      	str	r0, [r4, #0]
 801edd8:	2000      	movs	r0, #0
 801edda:	e7e8      	b.n	801edae <__submore+0x1e>
 801eddc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801edde:	0077      	lsls	r7, r6, #1
 801ede0:	463a      	mov	r2, r7
 801ede2:	f7ff f98f 	bl	801e104 <_realloc_r>
 801ede6:	4605      	mov	r5, r0
 801ede8:	2800      	cmp	r0, #0
 801edea:	d0de      	beq.n	801edaa <__submore+0x1a>
 801edec:	eb00 0806 	add.w	r8, r0, r6
 801edf0:	4601      	mov	r1, r0
 801edf2:	4632      	mov	r2, r6
 801edf4:	4640      	mov	r0, r8
 801edf6:	f7fa ffa1 	bl	8019d3c <memcpy>
 801edfa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801edfe:	f8c4 8000 	str.w	r8, [r4]
 801ee02:	e7e9      	b.n	801edd8 <__submore+0x48>

0801ee04 <__ascii_wctomb>:
 801ee04:	b149      	cbz	r1, 801ee1a <__ascii_wctomb+0x16>
 801ee06:	2aff      	cmp	r2, #255	; 0xff
 801ee08:	bf85      	ittet	hi
 801ee0a:	238a      	movhi	r3, #138	; 0x8a
 801ee0c:	6003      	strhi	r3, [r0, #0]
 801ee0e:	700a      	strbls	r2, [r1, #0]
 801ee10:	f04f 30ff 	movhi.w	r0, #4294967295
 801ee14:	bf98      	it	ls
 801ee16:	2001      	movls	r0, #1
 801ee18:	4770      	bx	lr
 801ee1a:	4608      	mov	r0, r1
 801ee1c:	4770      	bx	lr
	...

0801ee20 <_fstat_r>:
 801ee20:	b538      	push	{r3, r4, r5, lr}
 801ee22:	4d07      	ldr	r5, [pc, #28]	; (801ee40 <_fstat_r+0x20>)
 801ee24:	2300      	movs	r3, #0
 801ee26:	4604      	mov	r4, r0
 801ee28:	4608      	mov	r0, r1
 801ee2a:	4611      	mov	r1, r2
 801ee2c:	602b      	str	r3, [r5, #0]
 801ee2e:	f7e4 f9f4 	bl	800321a <_fstat>
 801ee32:	1c43      	adds	r3, r0, #1
 801ee34:	d102      	bne.n	801ee3c <_fstat_r+0x1c>
 801ee36:	682b      	ldr	r3, [r5, #0]
 801ee38:	b103      	cbz	r3, 801ee3c <_fstat_r+0x1c>
 801ee3a:	6023      	str	r3, [r4, #0]
 801ee3c:	bd38      	pop	{r3, r4, r5, pc}
 801ee3e:	bf00      	nop
 801ee40:	20008f98 	.word	0x20008f98

0801ee44 <_isatty_r>:
 801ee44:	b538      	push	{r3, r4, r5, lr}
 801ee46:	4d06      	ldr	r5, [pc, #24]	; (801ee60 <_isatty_r+0x1c>)
 801ee48:	2300      	movs	r3, #0
 801ee4a:	4604      	mov	r4, r0
 801ee4c:	4608      	mov	r0, r1
 801ee4e:	602b      	str	r3, [r5, #0]
 801ee50:	f7e4 f9f3 	bl	800323a <_isatty>
 801ee54:	1c43      	adds	r3, r0, #1
 801ee56:	d102      	bne.n	801ee5e <_isatty_r+0x1a>
 801ee58:	682b      	ldr	r3, [r5, #0]
 801ee5a:	b103      	cbz	r3, 801ee5e <_isatty_r+0x1a>
 801ee5c:	6023      	str	r3, [r4, #0]
 801ee5e:	bd38      	pop	{r3, r4, r5, pc}
 801ee60:	20008f98 	.word	0x20008f98

0801ee64 <_malloc_usable_size_r>:
 801ee64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ee68:	1f18      	subs	r0, r3, #4
 801ee6a:	2b00      	cmp	r3, #0
 801ee6c:	bfbc      	itt	lt
 801ee6e:	580b      	ldrlt	r3, [r1, r0]
 801ee70:	18c0      	addlt	r0, r0, r3
 801ee72:	4770      	bx	lr

0801ee74 <_init>:
 801ee74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee76:	bf00      	nop
 801ee78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee7a:	bc08      	pop	{r3}
 801ee7c:	469e      	mov	lr, r3
 801ee7e:	4770      	bx	lr

0801ee80 <_fini>:
 801ee80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee82:	bf00      	nop
 801ee84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee86:	bc08      	pop	{r3}
 801ee88:	469e      	mov	lr, r3
 801ee8a:	4770      	bx	lr
