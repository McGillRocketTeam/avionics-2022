
FC_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015820  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d0  080159d0  080159d0  000259d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080163a0  080163a0  0003035c  2**0
                  CONTENTS
  4 .ARM          00000008  080163a0  080163a0  000263a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080163a8  080163a8  0003035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080163a8  080163a8  000263a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080163b0  080163b0  000263b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  080163b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003035c  2**0
                  CONTENTS
 10 .bss          00006ae0  2000035c  2000035c  0003035c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20006e3c  20006e3c  0003035c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003035c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004943a  00000000  00000000  0003038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007843  00000000  00000000  000797c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ee8  00000000  00000000  00081010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002c28  00000000  00000000  00083ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000b9b1  00000000  00000000  00086b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031ad4  00000000  00000000  000924d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104216  00000000  00000000  000c3fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c81bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e054  00000000  00000000  001c8210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080159b8 	.word	0x080159b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000360 	.word	0x20000360
 80001ec:	080159b8 	.word	0x080159b8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100e:	b0a3      	sub	sp, #140	; 0x8c
 8001010:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001012:	f002 ff6d 	bl	8003ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001016:	f000 f8f9 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101a:	f000 fc8f 	bl	800193c <MX_GPIO_Init>
  MX_ADC1_Init();
 800101e:	f000 f977 	bl	8001310 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001022:	f000 f9c7 	bl	80013b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001026:	f000 fa05 	bl	8001434 <MX_I2C2_Init>
  MX_I2C3_Init();
 800102a:	f000 fa43 	bl	80014b4 <MX_I2C3_Init>
  MX_SPI2_Init();
 800102e:	f000 fb0d 	bl	800164c <MX_SPI2_Init>
  MX_SPI4_Init();
 8001032:	f000 fb41 	bl	80016b8 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001036:	f000 fb75 	bl	8001724 <MX_SPI5_Init>
  MX_TIM2_Init();
 800103a:	f000 fba9 	bl	8001790 <MX_TIM2_Init>
  MX_UART8_Init();
 800103e:	f000 fbff 	bl	8001840 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001042:	f000 fc27 	bl	8001894 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001046:	f000 fc4f 	bl	80018e8 <MX_USART6_UART_Init>
  MX_RTC_Init();
 800104a:	f000 fa73 	bl	8001534 <MX_RTC_Init>
}¸
#define HAL_UART_Transmit(u,b,size,HAL_MAX_DELAY)		CDC_Transmit_FS(b, size); //TODO if we use USB instead of huart for debugging
*/


  checkForI2CDevices(huart8,hi2c1);
 800104e:	4e53      	ldr	r6, [pc, #332]	; (800119c <main+0x190>)
 8001050:	4a53      	ldr	r2, [pc, #332]	; (80011a0 <main+0x194>)
 8001052:	ab0c      	add	r3, sp, #48	; 0x30
 8001054:	4611      	mov	r1, r2
 8001056:	2254      	movs	r2, #84	; 0x54
 8001058:	4618      	mov	r0, r3
 800105a:	f00f fce1 	bl	8010a20 <memcpy>
 800105e:	466d      	mov	r5, sp
 8001060:	f106 0410 	add.w	r4, r6, #16
 8001064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001070:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001074:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001078:	f001 fe8c 	bl	8002d94 <checkForI2CDevices>
  checkForI2CDevices(huart8,hi2c2);
 800107c:	4e47      	ldr	r6, [pc, #284]	; (800119c <main+0x190>)
 800107e:	4a49      	ldr	r2, [pc, #292]	; (80011a4 <main+0x198>)
 8001080:	ab0c      	add	r3, sp, #48	; 0x30
 8001082:	4611      	mov	r1, r2
 8001084:	2254      	movs	r2, #84	; 0x54
 8001086:	4618      	mov	r0, r3
 8001088:	f00f fcca 	bl	8010a20 <memcpy>
 800108c:	466d      	mov	r5, sp
 800108e:	f106 0410 	add.w	r4, r6, #16
 8001092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800109e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80010a2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010a6:	f001 fe75 	bl	8002d94 <checkForI2CDevices>
  checkForI2CDevices(huart8,hi2c3);
 80010aa:	4e3c      	ldr	r6, [pc, #240]	; (800119c <main+0x190>)
 80010ac:	4a3e      	ldr	r2, [pc, #248]	; (80011a8 <main+0x19c>)
 80010ae:	ab0c      	add	r3, sp, #48	; 0x30
 80010b0:	4611      	mov	r1, r2
 80010b2:	2254      	movs	r2, #84	; 0x54
 80010b4:	4618      	mov	r0, r3
 80010b6:	f00f fcb3 	bl	8010a20 <memcpy>
 80010ba:	466d      	mov	r5, sp
 80010bc:	f106 0410 	add.w	r4, r6, #16
 80010c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010cc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80010d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010d4:	f001 fe5e 	bl	8002d94 <checkForI2CDevices>

  /*
   * For ISM330DLC
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
   MRT_ISM330DLC_Setup(&dev_ctx,&hi2c3,&DEBUG_USART);
 80010d8:	4a30      	ldr	r2, [pc, #192]	; (800119c <main+0x190>)
 80010da:	4933      	ldr	r1, [pc, #204]	; (80011a8 <main+0x19c>)
 80010dc:	4833      	ldr	r0, [pc, #204]	; (80011ac <main+0x1a0>)
 80010de:	f002 fa3f 	bl	8003560 <MRT_ISM330DLC_Setup>
   /*
    * For the GPS:
    * -huart6 on v4.3
    *
    */
   GPS_init(&huart6, &huart8);
 80010e2:	492e      	ldr	r1, [pc, #184]	; (800119c <main+0x190>)
 80010e4:	4832      	ldr	r0, [pc, #200]	; (80011b0 <main+0x1a4>)
 80010e6:	f001 fe37 	bl	8002d58 <GPS_init>
   * -Define what you want in the alarms callback functions (check the MRT_RTOS_f4xx .h file)
   * -(Optional) Setup alarm A and the clock time in .ioc
   * The rest have been taken care of
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */
  MRT_SetupRTOS(DEBUG_USART,10);
 80010ea:	4e2c      	ldr	r6, [pc, #176]	; (800119c <main+0x190>)
 80010ec:	230a      	movs	r3, #10
 80010ee:	930c      	str	r3, [sp, #48]	; 0x30
 80010f0:	466d      	mov	r5, sp
 80010f2:	f106 0410 	add.w	r4, r6, #16
 80010f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001102:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001106:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800110a:	f002 fe11 	bl	8003d30 <MRT_SetupRTOS>

  HAL_UART_Transmit(&DEBUG_USART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	2213      	movs	r2, #19
 8001114:	4927      	ldr	r1, [pc, #156]	; (80011b4 <main+0x1a8>)
 8001116:	4821      	ldr	r0, [pc, #132]	; (800119c <main+0x190>)
 8001118:	f008 f87f 	bl	800921a <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800111c:	f00b fcba 	bl	800ca94 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MEMORY */
  MEMORYHandle = osMutexNew(&MEMORY_attributes);
 8001120:	4825      	ldr	r0, [pc, #148]	; (80011b8 <main+0x1ac>)
 8001122:	f00b fe07 	bl	800cd34 <osMutexNew>
 8001126:	4603      	mov	r3, r0
 8001128:	4a24      	ldr	r2, [pc, #144]	; (80011bc <main+0x1b0>)
 800112a:	6013      	str	r3, [r2, #0]

  /* creation of TELEMETRY */
  TELEMETRYHandle = osMutexNew(&TELEMETRY_attributes);
 800112c:	4824      	ldr	r0, [pc, #144]	; (80011c0 <main+0x1b4>)
 800112e:	f00b fe01 	bl	800cd34 <osMutexNew>
 8001132:	4603      	mov	r3, r0
 8001134:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <main+0x1b8>)
 8001136:	6013      	str	r3, [r2, #0]

  /* creation of SENSOR_POLLING */
  SENSOR_POLLINGHandle = osMutexNew(&SENSOR_POLLING_attributes);
 8001138:	4823      	ldr	r0, [pc, #140]	; (80011c8 <main+0x1bc>)
 800113a:	f00b fdfb 	bl	800cd34 <osMutexNew>
 800113e:	4603      	mov	r3, r0
 8001140:	4a22      	ldr	r2, [pc, #136]	; (80011cc <main+0x1c0>)
 8001142:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001144:	4a22      	ldr	r2, [pc, #136]	; (80011d0 <main+0x1c4>)
 8001146:	2100      	movs	r1, #0
 8001148:	4822      	ldr	r0, [pc, #136]	; (80011d4 <main+0x1c8>)
 800114a:	f00b fd0d 	bl	800cb68 <osThreadNew>
 800114e:	4603      	mov	r3, r0
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <main+0x1cc>)
 8001152:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001154:	4a21      	ldr	r2, [pc, #132]	; (80011dc <main+0x1d0>)
 8001156:	2100      	movs	r1, #0
 8001158:	4821      	ldr	r0, [pc, #132]	; (80011e0 <main+0x1d4>)
 800115a:	f00b fd05 	bl	800cb68 <osThreadNew>
 800115e:	4603      	mov	r3, r0
 8001160:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <main+0x1d8>)
 8001162:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 8001164:	4a20      	ldr	r2, [pc, #128]	; (80011e8 <main+0x1dc>)
 8001166:	2100      	movs	r1, #0
 8001168:	4820      	ldr	r0, [pc, #128]	; (80011ec <main+0x1e0>)
 800116a:	f00b fcfd 	bl	800cb68 <osThreadNew>
 800116e:	4603      	mov	r3, r0
 8001170:	4a1f      	ldr	r2, [pc, #124]	; (80011f0 <main+0x1e4>)
 8001172:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 8001174:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <main+0x1e8>)
 8001176:	2100      	movs	r1, #0
 8001178:	481f      	ldr	r0, [pc, #124]	; (80011f8 <main+0x1ec>)
 800117a:	f00b fcf5 	bl	800cb68 <osThreadNew>
 800117e:	4603      	mov	r3, r0
 8001180:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <main+0x1f0>)
 8001182:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 8001184:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <main+0x1f4>)
 8001186:	2100      	movs	r1, #0
 8001188:	481e      	ldr	r0, [pc, #120]	; (8001204 <main+0x1f8>)
 800118a:	f00b fced 	bl	800cb68 <osThreadNew>
 800118e:	4603      	mov	r3, r0
 8001190:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <main+0x1fc>)
 8001192:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001194:	f00b fcb2 	bl	800cafc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001198:	e7fe      	b.n	8001198 <main+0x18c>
 800119a:	bf00      	nop
 800119c:	200052d8 	.word	0x200052d8
 80011a0:	2000511c 	.word	0x2000511c
 80011a4:	20005170 	.word	0x20005170
 80011a8:	20004fb0 	.word	0x20004fb0
 80011ac:	2000505c 	.word	0x2000505c
 80011b0:	20005318 	.word	0x20005318
 80011b4:	08015a2c 	.word	0x08015a2c
 80011b8:	08015e44 	.word	0x08015e44
 80011bc:	20005210 	.word	0x20005210
 80011c0:	08015e54 	.word	0x08015e54
 80011c4:	200053c8 	.word	0x200053c8
 80011c8:	08015e64 	.word	0x08015e64
 80011cc:	2000528c 	.word	0x2000528c
 80011d0:	08015d90 	.word	0x08015d90
 80011d4:	08001c4d 	.word	0x08001c4d
 80011d8:	200051c4 	.word	0x200051c4
 80011dc:	08015db4 	.word	0x08015db4
 80011e0:	08001c5d 	.word	0x08001c5d
 80011e4:	200052cc 	.word	0x200052cc
 80011e8:	08015dd8 	.word	0x08015dd8
 80011ec:	08001c69 	.word	0x08001c69
 80011f0:	200052d4 	.word	0x200052d4
 80011f4:	08015dfc 	.word	0x08015dfc
 80011f8:	08001c75 	.word	0x08001c75
 80011fc:	2000539c 	.word	0x2000539c
 8001200:	08015e20 	.word	0x08015e20
 8001204:	08001ee5 	.word	0x08001ee5
 8001208:	200053a4 	.word	0x200053a4

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0a0      	sub	sp, #128	; 0x80
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001216:	2230      	movs	r2, #48	; 0x30
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f00f fc28 	bl	8010a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2230      	movs	r2, #48	; 0x30
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f00f fc19 	bl	8010a70 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b31      	ldr	r3, [pc, #196]	; (8001308 <SystemClock_Config+0xfc>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a30      	ldr	r2, [pc, #192]	; (8001308 <SystemClock_Config+0xfc>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <SystemClock_Config+0xfc>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b2b      	ldr	r3, [pc, #172]	; (800130c <SystemClock_Config+0x100>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001266:	4a29      	ldr	r2, [pc, #164]	; (800130c <SystemClock_Config+0x100>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <SystemClock_Config+0x100>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800127a:	2309      	movs	r3, #9
 800127c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800127e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001282:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001284:	2301      	movs	r3, #1
 8001286:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	2302      	movs	r3, #2
 800128a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001290:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001292:	2308      	movs	r3, #8
 8001294:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001296:	2348      	movs	r3, #72	; 0x48
 8001298:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800129a:	2302      	movs	r3, #2
 800129c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800129e:	2303      	movs	r3, #3
 80012a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012a6:	4618      	mov	r0, r3
 80012a8:	f005 ff0a 	bl	80070c0 <HAL_RCC_OscConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80012b2:	f000 fe2f 	bl	8001f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b6:	230f      	movs	r3, #15
 80012b8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f006 f964 	bl	80075a0 <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80012de:	f000 fe19 	bl	8001f14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012e2:	2320      	movs	r3, #32
 80012e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4618      	mov	r0, r3
 80012f2:	f006 fb81 	bl	80079f8 <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80012fc:	f000 fe0a 	bl	8001f14 <Error_Handler>
  }
}
 8001300:	bf00      	nop
 8001302:	3780      	adds	r7, #128	; 0x80
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001316:	463b      	mov	r3, r7
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001322:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <MX_ADC1_Init+0x98>)
 8001324:	4a21      	ldr	r2, [pc, #132]	; (80013ac <MX_ADC1_Init+0x9c>)
 8001326:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001328:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <MX_ADC1_Init+0x98>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800132e:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <MX_ADC1_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <MX_ADC1_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_ADC1_Init+0x98>)
 800133c:	2200      	movs	r2, #0
 800133e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <MX_ADC1_Init+0x98>)
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <MX_ADC1_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_ADC1_Init+0x98>)
 8001350:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <MX_ADC1_Init+0xa0>)
 8001352:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_ADC1_Init+0x98>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <MX_ADC1_Init+0x98>)
 800135c:	2201      	movs	r2, #1
 800135e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_ADC1_Init+0x98>)
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_ADC1_Init+0x98>)
 800136a:	2201      	movs	r2, #1
 800136c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800136e:	480e      	ldr	r0, [pc, #56]	; (80013a8 <MX_ADC1_Init+0x98>)
 8001370:	f002 fe24 	bl	8003fbc <HAL_ADC_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800137a:	f000 fdcb 	bl	8001f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800137e:	2306      	movs	r3, #6
 8001380:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001382:	2301      	movs	r3, #1
 8001384:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <MX_ADC1_Init+0x98>)
 8001390:	f002 fe58 	bl	8004044 <HAL_ADC_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800139a:	f000 fdbb 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200051c8 	.word	0x200051c8
 80013ac:	40012000 	.word	0x40012000
 80013b0:	0f000001 	.word	0x0f000001

080013b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_I2C1_Init+0x74>)
 80013ba:	4a1c      	ldr	r2, [pc, #112]	; (800142c <MX_I2C1_Init+0x78>)
 80013bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_I2C1_Init+0x74>)
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <MX_I2C1_Init+0x7c>)
 80013c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_I2C1_Init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_I2C1_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_I2C1_Init+0x74>)
 80013d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_I2C1_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <MX_I2C1_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_I2C1_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_I2C1_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f0:	480d      	ldr	r0, [pc, #52]	; (8001428 <MX_I2C1_Init+0x74>)
 80013f2:	f003 fb2f 	bl	8004a54 <HAL_I2C_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013fc:	f000 fd8a 	bl	8001f14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001400:	2100      	movs	r1, #0
 8001402:	4809      	ldr	r0, [pc, #36]	; (8001428 <MX_I2C1_Init+0x74>)
 8001404:	f004 fc49 	bl	8005c9a <HAL_I2CEx_ConfigAnalogFilter>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800140e:	f000 fd81 	bl	8001f14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001412:	2100      	movs	r1, #0
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <MX_I2C1_Init+0x74>)
 8001416:	f004 fc7c 	bl	8005d12 <HAL_I2CEx_ConfigDigitalFilter>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001420:	f000 fd78 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	2000511c 	.word	0x2000511c
 800142c:	40005400 	.word	0x40005400
 8001430:	000186a0 	.word	0x000186a0

08001434 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <MX_I2C2_Init+0x74>)
 800143a:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <MX_I2C2_Init+0x78>)
 800143c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <MX_I2C2_Init+0x7c>)
 8001442:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_I2C2_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001452:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001456:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <MX_I2C2_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001464:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_I2C2_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001472:	f003 faef 	bl	8004a54 <HAL_I2C_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800147c:	f000 fd4a 	bl	8001f14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001480:	2100      	movs	r1, #0
 8001482:	4809      	ldr	r0, [pc, #36]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001484:	f004 fc09 	bl	8005c9a <HAL_I2CEx_ConfigAnalogFilter>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800148e:	f000 fd41 	bl	8001f14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001492:	2100      	movs	r1, #0
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001496:	f004 fc3c 	bl	8005d12 <HAL_I2CEx_ConfigDigitalFilter>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80014a0:	f000 fd38 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20005170 	.word	0x20005170
 80014ac:	40005800 	.word	0x40005800
 80014b0:	000186a0 	.word	0x000186a0

080014b4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_I2C3_Init+0x74>)
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <MX_I2C3_Init+0x78>)
 80014bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_I2C3_Init+0x74>)
 80014c0:	4a1b      	ldr	r2, [pc, #108]	; (8001530 <MX_I2C3_Init+0x7c>)
 80014c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <MX_I2C3_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_I2C3_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <MX_I2C3_Init+0x74>)
 80014d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014d6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <MX_I2C3_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_I2C3_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_I2C3_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_I2C3_Init+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014f0:	480d      	ldr	r0, [pc, #52]	; (8001528 <MX_I2C3_Init+0x74>)
 80014f2:	f003 faaf 	bl	8004a54 <HAL_I2C_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014fc:	f000 fd0a 	bl	8001f14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001500:	2100      	movs	r1, #0
 8001502:	4809      	ldr	r0, [pc, #36]	; (8001528 <MX_I2C3_Init+0x74>)
 8001504:	f004 fbc9 	bl	8005c9a <HAL_I2CEx_ConfigAnalogFilter>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800150e:	f000 fd01 	bl	8001f14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001512:	2100      	movs	r1, #0
 8001514:	4804      	ldr	r0, [pc, #16]	; (8001528 <MX_I2C3_Init+0x74>)
 8001516:	f004 fbfc 	bl	8005d12 <HAL_I2CEx_ConfigDigitalFilter>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001520:	f000 fcf8 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20004fb0 	.word	0x20004fb0
 800152c:	40005c00 	.word	0x40005c00
 8001530:	000186a0 	.word	0x000186a0

08001534 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b090      	sub	sp, #64	; 0x40
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800153a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800154e:	463b      	mov	r3, r7
 8001550:	2228      	movs	r2, #40	; 0x28
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f00f fa8b 	bl	8010a70 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800155a:	4b3a      	ldr	r3, [pc, #232]	; (8001644 <MX_RTC_Init+0x110>)
 800155c:	4a3a      	ldr	r2, [pc, #232]	; (8001648 <MX_RTC_Init+0x114>)
 800155e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001560:	4b38      	ldr	r3, [pc, #224]	; (8001644 <MX_RTC_Init+0x110>)
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001566:	4b37      	ldr	r3, [pc, #220]	; (8001644 <MX_RTC_Init+0x110>)
 8001568:	227f      	movs	r2, #127	; 0x7f
 800156a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800156c:	4b35      	ldr	r3, [pc, #212]	; (8001644 <MX_RTC_Init+0x110>)
 800156e:	22ff      	movs	r2, #255	; 0xff
 8001570:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <MX_RTC_Init+0x110>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001578:	4b32      	ldr	r3, [pc, #200]	; (8001644 <MX_RTC_Init+0x110>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <MX_RTC_Init+0x110>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001584:	482f      	ldr	r0, [pc, #188]	; (8001644 <MX_RTC_Init+0x110>)
 8001586:	f006 fbf5 	bl	8007d74 <HAL_RTC_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001590:	f000 fcc0 	bl	8001f14 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800159a:	2300      	movs	r3, #0
 800159c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80015ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b2:	2201      	movs	r2, #1
 80015b4:	4619      	mov	r1, r3
 80015b6:	4823      	ldr	r0, [pc, #140]	; (8001644 <MX_RTC_Init+0x110>)
 80015b8:	f006 fc6d 	bl	8007e96 <HAL_RTC_SetTime>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80015c2:	f000 fca7 	bl	8001f14 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80015cc:	2301      	movs	r3, #1
 80015ce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80015de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e2:	2201      	movs	r2, #1
 80015e4:	4619      	mov	r1, r3
 80015e6:	4817      	ldr	r0, [pc, #92]	; (8001644 <MX_RTC_Init+0x110>)
 80015e8:	f006 fd12 	bl	8008010 <HAL_RTC_SetDate>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80015f2:	f000 fc8f 	bl	8001f14 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80015fe:	2300      	movs	r3, #0
 8001600:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001626:	463b      	mov	r3, r7
 8001628:	2201      	movs	r2, #1
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_RTC_Init+0x110>)
 800162e:	f006 fd97 	bl	8008160 <HAL_RTC_SetAlarm_IT>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001638:	f000 fc6c 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	3740      	adds	r7, #64	; 0x40
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000526c 	.word	0x2000526c
 8001648:	40002800 	.word	0x40002800

0800164c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001652:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <MX_SPI2_Init+0x68>)
 8001654:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001658:	f44f 7282 	mov.w	r2, #260	; 0x104
 800165c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_SPI2_Init+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_SPI2_Init+0x64>)
 800168c:	2200      	movs	r2, #0
 800168e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001698:	220a      	movs	r2, #10
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_SPI2_Init+0x64>)
 800169e:	f006 ffb1 	bl	8008604 <HAL_SPI_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016a8:	f000 fc34 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20005004 	.word	0x20005004
 80016b4:	40003800 	.word	0x40003800

080016b8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_SPI4_Init+0x64>)
 80016be:	4a18      	ldr	r2, [pc, #96]	; (8001720 <MX_SPI4_Init+0x68>)
 80016c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_SPI4_Init+0x64>)
 80016c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016c8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_SPI4_Init+0x64>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_SPI4_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_SPI4_Init+0x64>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_SPI4_Init+0x64>)
 80016de:	2200      	movs	r2, #0
 80016e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_SPI4_Init+0x64>)
 80016e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_SPI4_Init+0x64>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <MX_SPI4_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_SPI4_Init+0x64>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <MX_SPI4_Init+0x64>)
 80016fe:	2200      	movs	r2, #0
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_SPI4_Init+0x64>)
 8001704:	220a      	movs	r2, #10
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <MX_SPI4_Init+0x64>)
 800170a:	f006 ff7b 	bl	8008604 <HAL_SPI_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001714:	f000 fbfe 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20005214 	.word	0x20005214
 8001720:	40013400 	.word	0x40013400

08001724 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <MX_SPI5_Init+0x64>)
 800172a:	4a18      	ldr	r2, [pc, #96]	; (800178c <MX_SPI5_Init+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <MX_SPI5_Init+0x64>)
 8001730:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001734:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <MX_SPI5_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <MX_SPI5_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <MX_SPI5_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <MX_SPI5_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <MX_SPI5_Init+0x64>)
 8001750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001754:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <MX_SPI5_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <MX_SPI5_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <MX_SPI5_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <MX_SPI5_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <MX_SPI5_Init+0x64>)
 8001770:	220a      	movs	r2, #10
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <MX_SPI5_Init+0x64>)
 8001776:	f006 ff45 	bl	8008604 <HAL_SPI_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001780:	f000 fbc8 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20005070 	.word	0x20005070
 800178c:	40015000 	.word	0x40015000

08001790 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	615a      	str	r2, [r3, #20]
 80017b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <MX_TIM2_Init+0xac>)
 80017b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <MX_TIM2_Init+0xac>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <MX_TIM2_Init+0xac>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <MX_TIM2_Init+0xac>)
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_TIM2_Init+0xac>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <MX_TIM2_Init+0xac>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017da:	4818      	ldr	r0, [pc, #96]	; (800183c <MX_TIM2_Init+0xac>)
 80017dc:	f006 ffcf 	bl	800877e <HAL_TIM_PWM_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80017e6:	f000 fb95 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017f2:	f107 0320 	add.w	r3, r7, #32
 80017f6:	4619      	mov	r1, r3
 80017f8:	4810      	ldr	r0, [pc, #64]	; (800183c <MX_TIM2_Init+0xac>)
 80017fa:	f007 fc31 	bl	8009060 <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001804:	f000 fb86 	bl	8001f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001808:	2360      	movs	r3, #96	; 0x60
 800180a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2208      	movs	r2, #8
 800181c:	4619      	mov	r1, r3
 800181e:	4807      	ldr	r0, [pc, #28]	; (800183c <MX_TIM2_Init+0xac>)
 8001820:	f007 f8e0 	bl	80089e4 <HAL_TIM_PWM_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800182a:	f000 fb73 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800182e:	4803      	ldr	r0, [pc, #12]	; (800183c <MX_TIM2_Init+0xac>)
 8001830:	f000 fdac 	bl	800238c <HAL_TIM_MspPostInit>

}
 8001834:	bf00      	nop
 8001836:	3728      	adds	r7, #40	; 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2000535c 	.word	0x2000535c

08001840 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_UART8_Init+0x4c>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <MX_UART8_Init+0x50>)
 8001848:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <MX_UART8_Init+0x4c>)
 800184c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001850:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_UART8_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_UART8_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_UART8_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_UART8_Init+0x4c>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <MX_UART8_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_UART8_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_UART8_Init+0x4c>)
 8001878:	f007 fc82 	bl	8009180 <HAL_UART_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001882:	f000 fb47 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200052d8 	.word	0x200052d8
 8001890:	40007c00 	.word	0x40007c00

08001894 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <MX_USART3_UART_Init+0x50>)
 800189c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018cc:	f007 fc58 	bl	8009180 <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018d6:	f000 fb1d 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200050c8 	.word	0x200050c8
 80018e4:	40004800 	.word	0x40004800

080018e8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_USART6_UART_Init+0x4c>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	; (8001938 <MX_USART6_UART_Init+0x50>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <MX_USART6_UART_Init+0x4c>)
 80018f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_USART6_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_USART6_UART_Init+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <MX_USART6_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_USART6_UART_Init+0x4c>)
 800190e:	220c      	movs	r2, #12
 8001910:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <MX_USART6_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_USART6_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_USART6_UART_Init+0x4c>)
 8001920:	f007 fc2e 	bl	8009180 <HAL_UART_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800192a:	f000 faf3 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20005318 	.word	0x20005318
 8001938:	40011400 	.word	0x40011400

0800193c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08e      	sub	sp, #56	; 0x38
 8001940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
 8001956:	4bb4      	ldr	r3, [pc, #720]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4ab3      	ldr	r2, [pc, #716]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 800195c:	f043 0310 	orr.w	r3, r3, #16
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4bb1      	ldr	r3, [pc, #708]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	623b      	str	r3, [r7, #32]
 800196c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	4bad      	ldr	r3, [pc, #692]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4aac      	ldr	r2, [pc, #688]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4baa      	ldr	r3, [pc, #680]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	61fb      	str	r3, [r7, #28]
 8001988:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	4ba6      	ldr	r3, [pc, #664]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4aa5      	ldr	r2, [pc, #660]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 8001994:	f043 0320 	orr.w	r3, r3, #32
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4ba3      	ldr	r3, [pc, #652]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	4b9f      	ldr	r3, [pc, #636]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a9e      	ldr	r2, [pc, #632]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 80019b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b9c      	ldr	r3, [pc, #624]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b98      	ldr	r3, [pc, #608]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a97      	ldr	r2, [pc, #604]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b95      	ldr	r3, [pc, #596]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b91      	ldr	r3, [pc, #580]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a90      	ldr	r2, [pc, #576]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b8e      	ldr	r3, [pc, #568]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b8a      	ldr	r3, [pc, #552]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a89      	ldr	r2, [pc, #548]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 8001a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b87      	ldr	r3, [pc, #540]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b83      	ldr	r3, [pc, #524]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a82      	ldr	r2, [pc, #520]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b80      	ldr	r3, [pc, #512]	; (8001c28 <MX_GPIO_Init+0x2ec>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	f248 4184 	movw	r1, #33924	; 0x8484
 8001a38:	487c      	ldr	r0, [pc, #496]	; (8001c2c <MX_GPIO_Init+0x2f0>)
 8001a3a:	f002 fff1 	bl	8004a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001a44:	487a      	ldr	r0, [pc, #488]	; (8001c30 <MX_GPIO_Init+0x2f4>)
 8001a46:	f002 ffeb 	bl	8004a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001a50:	4878      	ldr	r0, [pc, #480]	; (8001c34 <MX_GPIO_Init+0x2f8>)
 8001a52:	f002 ffe5 	bl	8004a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2108      	movs	r1, #8
 8001a5a:	4877      	ldr	r0, [pc, #476]	; (8001c38 <MX_GPIO_Init+0x2fc>)
 8001a5c:	f002 ffe0 	bl	8004a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8001a60:	2200      	movs	r2, #0
 8001a62:	f645 213e 	movw	r1, #23102	; 0x5a3e
 8001a66:	4875      	ldr	r0, [pc, #468]	; (8001c3c <MX_GPIO_Init+0x300>)
 8001a68:	f002 ffda 	bl	8004a20 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a72:	4873      	ldr	r0, [pc, #460]	; (8001c40 <MX_GPIO_Init+0x304>)
 8001a74:	f002 ffd4 	bl	8004a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8001a7e:	4871      	ldr	r0, [pc, #452]	; (8001c44 <MX_GPIO_Init+0x308>)
 8001a80:	f002 ffce 	bl	8004a20 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8001a84:	f248 4384 	movw	r3, #33924	; 0x8484
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4863      	ldr	r0, [pc, #396]	; (8001c2c <MX_GPIO_Init+0x2f0>)
 8001a9e:	f002 fe13 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8001aa2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab8:	4619      	mov	r1, r3
 8001aba:	485d      	ldr	r0, [pc, #372]	; (8001c30 <MX_GPIO_Init+0x2f4>)
 8001abc:	f002 fe04 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ac4:	4b60      	ldr	r3, [pc, #384]	; (8001c48 <MX_GPIO_Init+0x30c>)
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8001acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4858      	ldr	r0, [pc, #352]	; (8001c34 <MX_GPIO_Init+0x2f8>)
 8001ad4:	f002 fdf8 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8001ad8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aee:	4619      	mov	r1, r3
 8001af0:	4850      	ldr	r0, [pc, #320]	; (8001c34 <MX_GPIO_Init+0x2f8>)
 8001af2:	f002 fde9 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001af6:	2308      	movs	r3, #8
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	484a      	ldr	r0, [pc, #296]	; (8001c38 <MX_GPIO_Init+0x2fc>)
 8001b0e:	f002 fddb 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001b12:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b24:	4619      	mov	r1, r3
 8001b26:	4843      	ldr	r0, [pc, #268]	; (8001c34 <MX_GPIO_Init+0x2f8>)
 8001b28:	f002 fdce 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8001b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4840      	ldr	r0, [pc, #256]	; (8001c40 <MX_GPIO_Init+0x304>)
 8001b40:	f002 fdc2 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8001b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b56:	4619      	mov	r1, r3
 8001b58:	4835      	ldr	r0, [pc, #212]	; (8001c30 <MX_GPIO_Init+0x2f4>)
 8001b5a:	f002 fdb5 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 8001b5e:	f242 4301 	movw	r3, #9217	; 0x2401
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b70:	4619      	mov	r1, r3
 8001b72:	4832      	ldr	r0, [pc, #200]	; (8001c3c <MX_GPIO_Init+0x300>)
 8001b74:	f002 fda8 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8001b78:	f645 233e 	movw	r3, #23102	; 0x5a3e
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8e:	4619      	mov	r1, r3
 8001b90:	482a      	ldr	r0, [pc, #168]	; (8001c3c <MX_GPIO_Init+0x300>)
 8001b92:	f002 fd99 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8001b96:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4820      	ldr	r0, [pc, #128]	; (8001c2c <MX_GPIO_Init+0x2f0>)
 8001bac:	f002 fd8c 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8001bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	481d      	ldr	r0, [pc, #116]	; (8001c40 <MX_GPIO_Init+0x304>)
 8001bca:	f002 fd7d 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001bce:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be4:	4619      	mov	r1, r3
 8001be6:	4817      	ldr	r0, [pc, #92]	; (8001c44 <MX_GPIO_Init+0x308>)
 8001be8:	f002 fd6e 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4810      	ldr	r0, [pc, #64]	; (8001c44 <MX_GPIO_Init+0x308>)
 8001c02:	f002 fd61 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 8001c06:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <MX_GPIO_Init+0x30c>)
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4808      	ldr	r0, [pc, #32]	; (8001c3c <MX_GPIO_Init+0x300>)
 8001c1c:	f002 fd54 	bl	80046c8 <HAL_GPIO_Init>

}
 8001c20:	bf00      	nop
 8001c22:	3738      	adds	r7, #56	; 0x38
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40021400 	.word	0x40021400
 8001c34:	40020800 	.word	0x40020800
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	40021800 	.word	0x40021800
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020c00 	.word	0x40020c00
 8001c48:	10110000 	.word	0x10110000

08001c4c <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001c54:	f00e f8aa 	bl	800fdac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	osThreadExit();
 8001c58:	f00b f837 	bl	800ccca <osThreadExit>

08001c5c <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	osThreadExit();
 8001c64:	f00b f831 	bl	800ccca <osThreadExit>

08001c68 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */

	osThreadExit();
 8001c70:	f00b f82b 	bl	800ccca <osThreadExit>

08001c74 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8001c74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c78:	b094      	sub	sp, #80	; 0x50
 8001c7a:	af04      	add	r7, sp, #16
 8001c7c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//osThreadExit();

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 8001c7e:	f00b f819 	bl	800ccb4 <osThreadGetId>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4a83      	ldr	r2, [pc, #524]	; (8001e94 <StartSensors3+0x220>)
 8001c86:	60d3      	str	r3, [r2, #12]
	//char* buffer = (char*) pvPortMalloc(TX_BUF_DIM);
	char buffer[TX_BUF_DIM];


	//Mutex
	while( (_SENSORS = xSemaphoreCreateMutex()) == NULL) osDelay(10);
 8001c88:	e002      	b.n	8001c90 <StartSensors3+0x1c>
 8001c8a:	200a      	movs	r0, #10
 8001c8c:	f00b f824 	bl	800ccd8 <osDelay>
 8001c90:	2001      	movs	r0, #1
 8001c92:	f00b fb2e 	bl	800d2f2 <xQueueCreateMutex>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4a7f      	ldr	r2, [pc, #508]	; (8001e98 <StartSensors3+0x224>)
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b7e      	ldr	r3, [pc, #504]	; (8001e98 <StartSensors3+0x224>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f2      	beq.n	8001c8a <StartSensors3+0x16>

  for(;;)
  {
	  while( xSemaphoreTake( _SENSORS, 0 ) == pdTRUE ) osDelay(10);
 8001ca4:	e002      	b.n	8001cac <StartSensors3+0x38>
 8001ca6:	200a      	movs	r0, #10
 8001ca8:	f00b f816 	bl	800ccd8 <osDelay>
 8001cac:	4b7a      	ldr	r3, [pc, #488]	; (8001e98 <StartSensors3+0x224>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f00b fdc6 	bl	800d844 <xQueueSemaphoreTake>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d0f3      	beq.n	8001ca6 <StartSensors3+0x32>

	  //GPS
	  memset(gps_data, 0, GPS_DATA_BUF_DIM);
 8001cbe:	2232      	movs	r2, #50	; 0x32
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4876      	ldr	r0, [pc, #472]	; (8001e9c <StartSensors3+0x228>)
 8001cc4:	f00e fed4 	bl	8010a70 <memset>
	  HAL_UART_Transmit(GPS_USART,"\r\n\r\nGPS Poll\r\n",16,HAL_MAX_DELAY);
 8001cc8:	4b75      	ldr	r3, [pc, #468]	; (8001ea0 <StartSensors3+0x22c>)
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd0:	2210      	movs	r2, #16
 8001cd2:	4974      	ldr	r1, [pc, #464]	; (8001ea4 <StartSensors3+0x230>)
 8001cd4:	f007 faa1 	bl	800921a <HAL_UART_Transmit>
	  GPS_Poll(&latitude, &longitude, &time);
 8001cd8:	4a73      	ldr	r2, [pc, #460]	; (8001ea8 <StartSensors3+0x234>)
 8001cda:	4974      	ldr	r1, [pc, #464]	; (8001eac <StartSensors3+0x238>)
 8001cdc:	4874      	ldr	r0, [pc, #464]	; (8001eb0 <StartSensors3+0x23c>)
 8001cde:	f000 fdd9 	bl	8002894 <GPS_Poll>
	  sprintf(gps_data,"Alt: %.2f   Long: %.2f   Time: %f",latitude, longitude, time);
 8001ce2:	4b73      	ldr	r3, [pc, #460]	; (8001eb0 <StartSensors3+0x23c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fc3e 	bl	8000568 <__aeabi_f2d>
 8001cec:	4680      	mov	r8, r0
 8001cee:	4689      	mov	r9, r1
 8001cf0:	4b6e      	ldr	r3, [pc, #440]	; (8001eac <StartSensors3+0x238>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fc37 	bl	8000568 <__aeabi_f2d>
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	460d      	mov	r5, r1
 8001cfe:	4b6a      	ldr	r3, [pc, #424]	; (8001ea8 <StartSensors3+0x234>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc30 	bl	8000568 <__aeabi_f2d>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d10:	e9cd 4500 	strd	r4, r5, [sp]
 8001d14:	4642      	mov	r2, r8
 8001d16:	464b      	mov	r3, r9
 8001d18:	4966      	ldr	r1, [pc, #408]	; (8001eb4 <StartSensors3+0x240>)
 8001d1a:	4860      	ldr	r0, [pc, #384]	; (8001e9c <StartSensors3+0x228>)
 8001d1c:	f00f fe98 	bl	8011a50 <siprintf>
	  HAL_UART_Transmit(&DEBUG_USART,gps_data,strlen(gps_data),HAL_MAX_DELAY);
 8001d20:	485e      	ldr	r0, [pc, #376]	; (8001e9c <StartSensors3+0x228>)
 8001d22:	f7fe fa65 	bl	80001f0 <strlen>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	495b      	ldr	r1, [pc, #364]	; (8001e9c <StartSensors3+0x228>)
 8001d30:	4861      	ldr	r0, [pc, #388]	; (8001eb8 <StartSensors3+0x244>)
 8001d32:	f007 fa72 	bl	800921a <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001d36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d3a:	f002 f91b 	bl	8003f74 <HAL_Delay>
  	  HAL_UART_Transmit(GPS_USART,"\r\nDone\r\n\r\n",10,HAL_MAX_DELAY);
 8001d3e:	4b58      	ldr	r3, [pc, #352]	; (8001ea0 <StartSensors3+0x22c>)
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	220a      	movs	r2, #10
 8001d48:	495c      	ldr	r1, [pc, #368]	; (8001ebc <StartSensors3+0x248>)
 8001d4a:	f007 fa66 	bl	800921a <HAL_UART_Transmit>


  	  //ISM330DLC
  	  memset(buffer, 0, TX_BUF_DIM);
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	2232      	movs	r2, #50	; 0x32
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f00e fe8a 	bl	8010a70 <memset>
  	  MRT_ISM330DLC_getAcceleration(data_raw_acceleration,acceleration_mg);
 8001d5c:	4958      	ldr	r1, [pc, #352]	; (8001ec0 <StartSensors3+0x24c>)
 8001d5e:	4859      	ldr	r0, [pc, #356]	; (8001ec4 <StartSensors3+0x250>)
 8001d60:	f001 fc7a 	bl	8003658 <MRT_ISM330DLC_getAcceleration>
  	  sprintf((char *)buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001d64:	4b56      	ldr	r3, [pc, #344]	; (8001ec0 <StartSensors3+0x24c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbfd 	bl	8000568 <__aeabi_f2d>
 8001d6e:	4680      	mov	r8, r0
 8001d70:	4689      	mov	r9, r1
 8001d72:	4b53      	ldr	r3, [pc, #332]	; (8001ec0 <StartSensors3+0x24c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fbf6 	bl	8000568 <__aeabi_f2d>
 8001d7c:	4604      	mov	r4, r0
 8001d7e:	460d      	mov	r5, r1
 8001d80:	4b4f      	ldr	r3, [pc, #316]	; (8001ec0 <StartSensors3+0x24c>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbef 	bl	8000568 <__aeabi_f2d>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	f107 000c 	add.w	r0, r7, #12
 8001d92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d96:	e9cd 4500 	strd	r4, r5, [sp]
 8001d9a:	4642      	mov	r2, r8
 8001d9c:	464b      	mov	r3, r9
 8001d9e:	494a      	ldr	r1, [pc, #296]	; (8001ec8 <StartSensors3+0x254>)
 8001da0:	f00f fe56 	bl	8011a50 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fa21 	bl	80001f0 <strlen>
 8001dae:	4603      	mov	r3, r0
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	f107 010c 	add.w	r1, r7, #12
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	483f      	ldr	r0, [pc, #252]	; (8001eb8 <StartSensors3+0x244>)
 8001dbc:	f007 fa2d 	bl	800921a <HAL_UART_Transmit>

  	  memset(buffer, 0, TX_BUF_DIM);
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	2232      	movs	r2, #50	; 0x32
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00e fe51 	bl	8010a70 <memset>
  	  MRT_ISM330DLC_getAngularRate(data_raw_angular_rate,angular_rate_mdps);
 8001dce:	493f      	ldr	r1, [pc, #252]	; (8001ecc <StartSensors3+0x258>)
 8001dd0:	483f      	ldr	r0, [pc, #252]	; (8001ed0 <StartSensors3+0x25c>)
 8001dd2:	f001 fcb3 	bl	800373c <MRT_ISM330DLC_getAngularRate>
  	  sprintf((char *)buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <StartSensors3+0x258>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbc4 	bl	8000568 <__aeabi_f2d>
 8001de0:	4680      	mov	r8, r0
 8001de2:	4689      	mov	r9, r1
 8001de4:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <StartSensors3+0x258>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fbbd 	bl	8000568 <__aeabi_f2d>
 8001dee:	4604      	mov	r4, r0
 8001df0:	460d      	mov	r5, r1
 8001df2:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <StartSensors3+0x258>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fbb6 	bl	8000568 <__aeabi_f2d>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	f107 000c 	add.w	r0, r7, #12
 8001e04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e08:	e9cd 4500 	strd	r4, r5, [sp]
 8001e0c:	4642      	mov	r2, r8
 8001e0e:	464b      	mov	r3, r9
 8001e10:	4930      	ldr	r1, [pc, #192]	; (8001ed4 <StartSensors3+0x260>)
 8001e12:	f00f fe1d 	bl	8011a50 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe f9e8 	bl	80001f0 <strlen>
 8001e20:	4603      	mov	r3, r0
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	f107 010c 	add.w	r1, r7, #12
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2c:	4822      	ldr	r0, [pc, #136]	; (8001eb8 <StartSensors3+0x244>)
 8001e2e:	f007 f9f4 	bl	800921a <HAL_UART_Transmit>

	  memset(buffer, 0, TX_BUF_DIM);
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	2232      	movs	r2, #50	; 0x32
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f00e fe18 	bl	8010a70 <memset>
	  MRT_ISM330DLC_getTemperature(data_raw_temperature,temperature_degC);
 8001e40:	4925      	ldr	r1, [pc, #148]	; (8001ed8 <StartSensors3+0x264>)
 8001e42:	4826      	ldr	r0, [pc, #152]	; (8001edc <StartSensors3+0x268>)
 8001e44:	f001 fc4e 	bl	80036e4 <MRT_ISM330DLC_getTemperature>
	  sprintf((char *)buffer, "Temperature [degC]:%6.2f\r\n", temperature_degC[0] );
 8001e48:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <StartSensors3+0x264>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fb8b 	bl	8000568 <__aeabi_f2d>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	f107 000c 	add.w	r0, r7, #12
 8001e5a:	4921      	ldr	r1, [pc, #132]	; (8001ee0 <StartSensors3+0x26c>)
 8001e5c:	f00f fdf8 	bl	8011a50 <siprintf>
	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe f9c3 	bl	80001f0 <strlen>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	f107 010c 	add.w	r1, r7, #12
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	4810      	ldr	r0, [pc, #64]	; (8001eb8 <StartSensors3+0x244>)
 8001e78:	f007 f9cf 	bl	800921a <HAL_UART_Transmit>


	  //Other


	  xSemaphoreGive( _SENSORS );
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <StartSensors3+0x224>)
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	2300      	movs	r3, #0
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	f00b fa67 	bl	800d358 <xQueueGenericSend>
    osDelay(1);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f00a ff24 	bl	800ccd8 <osDelay>
	  while( xSemaphoreTake( _SENSORS, 0 ) == pdTRUE ) osDelay(10);
 8001e90:	e70c      	b.n	8001cac <StartSensors3+0x38>
 8001e92:	bf00      	nop
 8001e94:	20005108 	.word	0x20005108
 8001e98:	20004fac 	.word	0x20004fac
 8001e9c:	20005294 	.word	0x20005294
 8001ea0:	20005068 	.word	0x20005068
 8001ea4:	08015a40 	.word	0x08015a40
 8001ea8:	200052c8 	.word	0x200052c8
 8001eac:	20005290 	.word	0x20005290
 8001eb0:	20005358 	.word	0x20005358
 8001eb4:	08015a50 	.word	0x08015a50
 8001eb8:	200052d8 	.word	0x200052d8
 8001ebc:	08015a74 	.word	0x08015a74
 8001ec0:	20000380 	.word	0x20000380
 8001ec4:	20000378 	.word	0x20000378
 8001ec8:	08015a80 	.word	0x08015a80
 8001ecc:	20000394 	.word	0x20000394
 8001ed0:	2000038c 	.word	0x2000038c
 8001ed4:	08015aa8 	.word	0x08015aa8
 8001ed8:	200003a4 	.word	0x200003a4
 8001edc:	200003a0 	.word	0x200003a0
 8001ee0:	08015ad0 	.word	0x08015ad0

08001ee4 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	osThreadExit();
 8001eec:	f00a feed 	bl	800ccca <osThreadExit>

08001ef0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f02:	f002 f817 	bl	8003f34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40001000 	.word	0x40001000

08001f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f38:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800

08001f74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_ADC_MspInit+0x7c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d127      	bne.n	8001fe6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_ADC_MspInit+0x80>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a15      	ldr	r2, [pc, #84]	; (8001ff4 <HAL_ADC_MspInit+0x80>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_ADC_MspInit+0x80>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_ADC_MspInit+0x80>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <HAL_ADC_MspInit+0x80>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_ADC_MspInit+0x80>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8001fce:	2340      	movs	r3, #64	; 0x40
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <HAL_ADC_MspInit+0x84>)
 8001fe2:	f002 fb71 	bl	80046c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fe6:	bf00      	nop
 8001fe8:	3728      	adds	r7, #40	; 0x28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40012000 	.word	0x40012000
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020000 	.word	0x40020000

08001ffc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08e      	sub	sp, #56	; 0x38
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a5c      	ldr	r2, [pc, #368]	; (800218c <HAL_I2C_MspInit+0x190>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d12d      	bne.n	800207a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
 8002022:	4b5b      	ldr	r3, [pc, #364]	; (8002190 <HAL_I2C_MspInit+0x194>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a5a      	ldr	r2, [pc, #360]	; (8002190 <HAL_I2C_MspInit+0x194>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b58      	ldr	r3, [pc, #352]	; (8002190 <HAL_I2C_MspInit+0x194>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	623b      	str	r3, [r7, #32]
 8002038:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800203a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002040:	2312      	movs	r3, #18
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002044:	2301      	movs	r3, #1
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800204c:	2304      	movs	r3, #4
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002054:	4619      	mov	r1, r3
 8002056:	484f      	ldr	r0, [pc, #316]	; (8002194 <HAL_I2C_MspInit+0x198>)
 8002058:	f002 fb36 	bl	80046c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	4b4b      	ldr	r3, [pc, #300]	; (8002190 <HAL_I2C_MspInit+0x194>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	4a4a      	ldr	r2, [pc, #296]	; (8002190 <HAL_I2C_MspInit+0x194>)
 8002066:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800206a:	6413      	str	r3, [r2, #64]	; 0x40
 800206c:	4b48      	ldr	r3, [pc, #288]	; (8002190 <HAL_I2C_MspInit+0x194>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002078:	e083      	b.n	8002182 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a46      	ldr	r2, [pc, #280]	; (8002198 <HAL_I2C_MspInit+0x19c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d12d      	bne.n	80020e0 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	4b41      	ldr	r3, [pc, #260]	; (8002190 <HAL_I2C_MspInit+0x194>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4a40      	ldr	r2, [pc, #256]	; (8002190 <HAL_I2C_MspInit+0x194>)
 800208e:	f043 0302 	orr.w	r3, r3, #2
 8002092:	6313      	str	r3, [r2, #48]	; 0x30
 8002094:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <HAL_I2C_MspInit+0x194>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020a6:	2312      	movs	r3, #18
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020aa:	2301      	movs	r3, #1
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020b2:	2304      	movs	r3, #4
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ba:	4619      	mov	r1, r3
 80020bc:	4835      	ldr	r0, [pc, #212]	; (8002194 <HAL_I2C_MspInit+0x198>)
 80020be:	f002 fb03 	bl	80046c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	4b32      	ldr	r3, [pc, #200]	; (8002190 <HAL_I2C_MspInit+0x194>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a31      	ldr	r2, [pc, #196]	; (8002190 <HAL_I2C_MspInit+0x194>)
 80020cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <HAL_I2C_MspInit+0x194>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697b      	ldr	r3, [r7, #20]
}
 80020de:	e050      	b.n	8002182 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a2d      	ldr	r2, [pc, #180]	; (800219c <HAL_I2C_MspInit+0x1a0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d14b      	bne.n	8002182 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	4b28      	ldr	r3, [pc, #160]	; (8002190 <HAL_I2C_MspInit+0x194>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a27      	ldr	r2, [pc, #156]	; (8002190 <HAL_I2C_MspInit+0x194>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b25      	ldr	r3, [pc, #148]	; (8002190 <HAL_I2C_MspInit+0x194>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <HAL_I2C_MspInit+0x194>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a20      	ldr	r2, [pc, #128]	; (8002190 <HAL_I2C_MspInit+0x194>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <HAL_I2C_MspInit+0x194>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002128:	2312      	movs	r3, #18
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800212c:	2301      	movs	r3, #1
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002134:	2304      	movs	r3, #4
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	4818      	ldr	r0, [pc, #96]	; (80021a0 <HAL_I2C_MspInit+0x1a4>)
 8002140:	f002 fac2 	bl	80046c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800214a:	2312      	movs	r3, #18
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800214e:	2301      	movs	r3, #1
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002152:	2303      	movs	r3, #3
 8002154:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002156:	2304      	movs	r3, #4
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215e:	4619      	mov	r1, r3
 8002160:	4810      	ldr	r0, [pc, #64]	; (80021a4 <HAL_I2C_MspInit+0x1a8>)
 8002162:	f002 fab1 	bl	80046c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_I2C_MspInit+0x194>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a08      	ldr	r2, [pc, #32]	; (8002190 <HAL_I2C_MspInit+0x194>)
 8002170:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_I2C_MspInit+0x194>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
}
 8002182:	bf00      	nop
 8002184:	3738      	adds	r7, #56	; 0x38
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40005400 	.word	0x40005400
 8002190:	40023800 	.word	0x40023800
 8002194:	40020400 	.word	0x40020400
 8002198:	40005800 	.word	0x40005800
 800219c:	40005c00 	.word	0x40005c00
 80021a0:	40020800 	.word	0x40020800
 80021a4:	40020000 	.word	0x40020000

080021a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <HAL_RTC_MspInit+0x30>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d10a      	bne.n	80021d0 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_RTC_MspInit+0x34>)
 80021bc:	2201      	movs	r2, #1
 80021be:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2100      	movs	r1, #0
 80021c4:	2029      	movs	r0, #41	; 0x29
 80021c6:	f002 fa47 	bl	8004658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80021ca:	2029      	movs	r0, #41	; 0x29
 80021cc:	f002 fa60 	bl	8004690 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40002800 	.word	0x40002800
 80021dc:	42470e3c 	.word	0x42470e3c

080021e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08e      	sub	sp, #56	; 0x38
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a4c      	ldr	r2, [pc, #304]	; (8002330 <HAL_SPI_MspInit+0x150>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d12d      	bne.n	800225e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
 8002206:	4b4b      	ldr	r3, [pc, #300]	; (8002334 <HAL_SPI_MspInit+0x154>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a4a      	ldr	r2, [pc, #296]	; (8002334 <HAL_SPI_MspInit+0x154>)
 800220c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b48      	ldr	r3, [pc, #288]	; (8002334 <HAL_SPI_MspInit+0x154>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221a:	623b      	str	r3, [r7, #32]
 800221c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	4b44      	ldr	r3, [pc, #272]	; (8002334 <HAL_SPI_MspInit+0x154>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a43      	ldr	r2, [pc, #268]	; (8002334 <HAL_SPI_MspInit+0x154>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b41      	ldr	r3, [pc, #260]	; (8002334 <HAL_SPI_MspInit+0x154>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800223a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800224c:	2305      	movs	r3, #5
 800224e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002254:	4619      	mov	r1, r3
 8002256:	4838      	ldr	r0, [pc, #224]	; (8002338 <HAL_SPI_MspInit+0x158>)
 8002258:	f002 fa36 	bl	80046c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800225c:	e064      	b.n	8002328 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a36      	ldr	r2, [pc, #216]	; (800233c <HAL_SPI_MspInit+0x15c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d12d      	bne.n	80022c4 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002268:	2300      	movs	r3, #0
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_SPI_MspInit+0x154>)
 800226e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002270:	4a30      	ldr	r2, [pc, #192]	; (8002334 <HAL_SPI_MspInit+0x154>)
 8002272:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002276:	6453      	str	r3, [r2, #68]	; 0x44
 8002278:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <HAL_SPI_MspInit+0x154>)
 800227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_SPI_MspInit+0x154>)
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	4a29      	ldr	r2, [pc, #164]	; (8002334 <HAL_SPI_MspInit+0x154>)
 800228e:	f043 0310 	orr.w	r3, r3, #16
 8002292:	6313      	str	r3, [r2, #48]	; 0x30
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_SPI_MspInit+0x154>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80022a0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ae:	2303      	movs	r3, #3
 80022b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80022b2:	2305      	movs	r3, #5
 80022b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ba:	4619      	mov	r1, r3
 80022bc:	4820      	ldr	r0, [pc, #128]	; (8002340 <HAL_SPI_MspInit+0x160>)
 80022be:	f002 fa03 	bl	80046c8 <HAL_GPIO_Init>
}
 80022c2:	e031      	b.n	8002328 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1e      	ldr	r2, [pc, #120]	; (8002344 <HAL_SPI_MspInit+0x164>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d12c      	bne.n	8002328 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	4b18      	ldr	r3, [pc, #96]	; (8002334 <HAL_SPI_MspInit+0x154>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a17      	ldr	r2, [pc, #92]	; (8002334 <HAL_SPI_MspInit+0x154>)
 80022d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_SPI_MspInit+0x154>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_SPI_MspInit+0x154>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a10      	ldr	r2, [pc, #64]	; (8002334 <HAL_SPI_MspInit+0x154>)
 80022f4:	f043 0320 	orr.w	r3, r3, #32
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <HAL_SPI_MspInit+0x154>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002306:	f44f 7360 	mov.w	r3, #896	; 0x380
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002318:	2305      	movs	r3, #5
 800231a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800231c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002320:	4619      	mov	r1, r3
 8002322:	4809      	ldr	r0, [pc, #36]	; (8002348 <HAL_SPI_MspInit+0x168>)
 8002324:	f002 f9d0 	bl	80046c8 <HAL_GPIO_Init>
}
 8002328:	bf00      	nop
 800232a:	3738      	adds	r7, #56	; 0x38
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40003800 	.word	0x40003800
 8002334:	40023800 	.word	0x40023800
 8002338:	40020400 	.word	0x40020400
 800233c:	40013400 	.word	0x40013400
 8002340:	40021000 	.word	0x40021000
 8002344:	40015000 	.word	0x40015000
 8002348:	40021400 	.word	0x40021400

0800234c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235c:	d10d      	bne.n	800237a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_TIM_PWM_MspInit+0x3c>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a08      	ldr	r2, [pc, #32]	; (8002388 <HAL_TIM_PWM_MspInit+0x3c>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_TIM_PWM_MspInit+0x3c>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800

0800238c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ac:	d11d      	bne.n	80023ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_TIM_MspPostInit+0x68>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <HAL_TIM_MspPostInit+0x68>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_TIM_MspPostInit+0x68>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80023ca:	2304      	movs	r3, #4
 80023cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023da:	2301      	movs	r3, #1
 80023dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	4619      	mov	r1, r3
 80023e4:	4804      	ldr	r0, [pc, #16]	; (80023f8 <HAL_TIM_MspPostInit+0x6c>)
 80023e6:	f002 f96f 	bl	80046c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023ea:	bf00      	nop
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000

080023fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08e      	sub	sp, #56	; 0x38
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a4b      	ldr	r2, [pc, #300]	; (8002548 <HAL_UART_MspInit+0x14c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d12c      	bne.n	8002478 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
 8002422:	4b4a      	ldr	r3, [pc, #296]	; (800254c <HAL_UART_MspInit+0x150>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a49      	ldr	r2, [pc, #292]	; (800254c <HAL_UART_MspInit+0x150>)
 8002428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_UART_MspInit+0x150>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002436:	623b      	str	r3, [r7, #32]
 8002438:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	4b43      	ldr	r3, [pc, #268]	; (800254c <HAL_UART_MspInit+0x150>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_UART_MspInit+0x150>)
 8002444:	f043 0310 	orr.w	r3, r3, #16
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b40      	ldr	r3, [pc, #256]	; (800254c <HAL_UART_MspInit+0x150>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002456:	2303      	movs	r3, #3
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800245e:	2301      	movs	r3, #1
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002462:	2303      	movs	r3, #3
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002466:	2308      	movs	r3, #8
 8002468:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800246a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246e:	4619      	mov	r1, r3
 8002470:	4837      	ldr	r0, [pc, #220]	; (8002550 <HAL_UART_MspInit+0x154>)
 8002472:	f002 f929 	bl	80046c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002476:	e063      	b.n	8002540 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a35      	ldr	r2, [pc, #212]	; (8002554 <HAL_UART_MspInit+0x158>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d12d      	bne.n	80024de <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	4b31      	ldr	r3, [pc, #196]	; (800254c <HAL_UART_MspInit+0x150>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	4a30      	ldr	r2, [pc, #192]	; (800254c <HAL_UART_MspInit+0x150>)
 800248c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002490:	6413      	str	r3, [r2, #64]	; 0x40
 8002492:	4b2e      	ldr	r3, [pc, #184]	; (800254c <HAL_UART_MspInit+0x150>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	4b2a      	ldr	r3, [pc, #168]	; (800254c <HAL_UART_MspInit+0x150>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a29      	ldr	r2, [pc, #164]	; (800254c <HAL_UART_MspInit+0x150>)
 80024a8:	f043 0308 	orr.w	r3, r3, #8
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_UART_MspInit+0x150>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 80024ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024cc:	2307      	movs	r3, #7
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d4:	4619      	mov	r1, r3
 80024d6:	4820      	ldr	r0, [pc, #128]	; (8002558 <HAL_UART_MspInit+0x15c>)
 80024d8:	f002 f8f6 	bl	80046c8 <HAL_GPIO_Init>
}
 80024dc:	e030      	b.n	8002540 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1e      	ldr	r2, [pc, #120]	; (800255c <HAL_UART_MspInit+0x160>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d12b      	bne.n	8002540 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	4b17      	ldr	r3, [pc, #92]	; (800254c <HAL_UART_MspInit+0x150>)
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	4a16      	ldr	r2, [pc, #88]	; (800254c <HAL_UART_MspInit+0x150>)
 80024f2:	f043 0320 	orr.w	r3, r3, #32
 80024f6:	6453      	str	r3, [r2, #68]	; 0x44
 80024f8:	4b14      	ldr	r3, [pc, #80]	; (800254c <HAL_UART_MspInit+0x150>)
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_UART_MspInit+0x150>)
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	4a0f      	ldr	r2, [pc, #60]	; (800254c <HAL_UART_MspInit+0x150>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	6313      	str	r3, [r2, #48]	; 0x30
 8002514:	4b0d      	ldr	r3, [pc, #52]	; (800254c <HAL_UART_MspInit+0x150>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002520:	23c0      	movs	r3, #192	; 0xc0
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252c:	2303      	movs	r3, #3
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002530:	2308      	movs	r3, #8
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002538:	4619      	mov	r1, r3
 800253a:	4809      	ldr	r0, [pc, #36]	; (8002560 <HAL_UART_MspInit+0x164>)
 800253c:	f002 f8c4 	bl	80046c8 <HAL_GPIO_Init>
}
 8002540:	bf00      	nop
 8002542:	3738      	adds	r7, #56	; 0x38
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40007c00 	.word	0x40007c00
 800254c:	40023800 	.word	0x40023800
 8002550:	40021000 	.word	0x40021000
 8002554:	40004800 	.word	0x40004800
 8002558:	40020c00 	.word	0x40020c00
 800255c:	40011400 	.word	0x40011400
 8002560:	40020800 	.word	0x40020800

08002564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	; 0x30
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002574:	2200      	movs	r2, #0
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	2036      	movs	r0, #54	; 0x36
 800257a:	f002 f86d 	bl	8004658 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800257e:	2036      	movs	r0, #54	; 0x36
 8002580:	f002 f886 	bl	8004690 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <HAL_InitTick+0xa4>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <HAL_InitTick+0xa4>)
 800258e:	f043 0310 	orr.w	r3, r3, #16
 8002592:	6413      	str	r3, [r2, #64]	; 0x40
 8002594:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <HAL_InitTick+0xa4>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025a0:	f107 0210 	add.w	r2, r7, #16
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f005 f9f2 	bl	8007994 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80025b0:	f005 f9c8 	bl	8007944 <HAL_RCC_GetPCLK1Freq>
 80025b4:	4603      	mov	r3, r0
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	4a13      	ldr	r2, [pc, #76]	; (800260c <HAL_InitTick+0xa8>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9b      	lsrs	r3, r3, #18
 80025c4:	3b01      	subs	r3, #1
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_InitTick+0xac>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <HAL_InitTick+0xb0>)
 80025cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_InitTick+0xac>)
 80025d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80025d6:	4a0e      	ldr	r2, [pc, #56]	; (8002610 <HAL_InitTick+0xac>)
 80025d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <HAL_InitTick+0xac>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_InitTick+0xac>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80025e8:	4809      	ldr	r0, [pc, #36]	; (8002610 <HAL_InitTick+0xac>)
 80025ea:	f006 f86f 	bl	80086cc <HAL_TIM_Base_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d104      	bne.n	80025fe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80025f4:	4806      	ldr	r0, [pc, #24]	; (8002610 <HAL_InitTick+0xac>)
 80025f6:	f006 f89e 	bl	8008736 <HAL_TIM_Base_Start_IT>
 80025fa:	4603      	mov	r3, r0
 80025fc:	e000      	b.n	8002600 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	3730      	adds	r7, #48	; 0x30
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	431bde83 	.word	0x431bde83
 8002610:	200053cc 	.word	0x200053cc
 8002614:	40001000 	.word	0x40001000

08002618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262a:	e7fe      	b.n	800262a <HardFault_Handler+0x4>

0800262c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002630:	e7fe      	b.n	8002630 <MemManage_Handler+0x4>

08002632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002636:	e7fe      	b.n	8002636 <BusFault_Handler+0x4>

08002638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800263c:	e7fe      	b.n	800263c <UsageFault_Handler+0x4>

0800263e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <RTC_Alarm_IRQHandler+0x10>)
 8002652:	f005 febd 	bl	80083d0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000526c 	.word	0x2000526c

08002660 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <TIM6_DAC_IRQHandler+0x10>)
 8002666:	f006 f8b5 	bl	80087d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200053cc 	.word	0x200053cc

08002674 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <OTG_FS_IRQHandler+0x10>)
 800267a:	f003 fcd9 	bl	8006030 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20006a24 	.word	0x20006a24

08002688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
	return 1;
 800268c:	2301      	movs	r3, #1
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <_kill>:

int _kill(int pid, int sig)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026a2:	f00e f889 	bl	80107b8 <__errno>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2216      	movs	r2, #22
 80026aa:	601a      	str	r2, [r3, #0]
	return -1;
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_exit>:

void _exit (int status)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026c0:	f04f 31ff 	mov.w	r1, #4294967295
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff ffe7 	bl	8002698 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026ca:	e7fe      	b.n	80026ca <_exit+0x12>

080026cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	e00a      	b.n	80026f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026de:	f3af 8000 	nop.w
 80026e2:	4601      	mov	r1, r0
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	60ba      	str	r2, [r7, #8]
 80026ea:	b2ca      	uxtb	r2, r1
 80026ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3301      	adds	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dbf0      	blt.n	80026de <_read+0x12>
	}

return len;
 80026fc:	687b      	ldr	r3, [r7, #4]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e009      	b.n	800272c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	60ba      	str	r2, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3301      	adds	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	429a      	cmp	r2, r3
 8002732:	dbf1      	blt.n	8002718 <_write+0x12>
	}
	return len;
 8002734:	687b      	ldr	r3, [r7, #4]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <_close>:

int _close(int file)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
	return -1;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002766:	605a      	str	r2, [r3, #4]
	return 0;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <_isatty>:

int _isatty(int file)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
	return 1;
 800277e:	2301      	movs	r3, #1
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
	return 0;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b0:	4a14      	ldr	r2, [pc, #80]	; (8002804 <_sbrk+0x5c>)
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <_sbrk+0x60>)
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <_sbrk+0x64>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <_sbrk+0x64>)
 80027c6:	4a12      	ldr	r2, [pc, #72]	; (8002810 <_sbrk+0x68>)
 80027c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d207      	bcs.n	80027e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027d8:	f00d ffee 	bl	80107b8 <__errno>
 80027dc:	4603      	mov	r3, r0
 80027de:	220c      	movs	r2, #12
 80027e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	e009      	b.n	80027fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <_sbrk+0x64>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <_sbrk+0x64>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	4a05      	ldr	r2, [pc, #20]	; (800280c <_sbrk+0x64>)
 80027f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027fa:	68fb      	ldr	r3, [r7, #12]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20030000 	.word	0x20030000
 8002808:	00000400 	.word	0x00000400
 800280c:	200003a8 	.word	0x200003a8
 8002810:	20006e40 	.word	0x20006e40

08002814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <SystemInit+0x28>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	4a07      	ldr	r2, [pc, #28]	; (800283c <SystemInit+0x28>)
 8002820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <SystemInit+0x28>)
 800282a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800282e:	609a      	str	r2, [r3, #8]
#endif
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002878 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002844:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002846:	e003      	b.n	8002850 <LoopCopyDataInit>

08002848 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800284a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800284c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800284e:	3104      	adds	r1, #4

08002850 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002850:	480b      	ldr	r0, [pc, #44]	; (8002880 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002854:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002856:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002858:	d3f6      	bcc.n	8002848 <CopyDataInit>
  ldr  r2, =_sbss
 800285a:	4a0b      	ldr	r2, [pc, #44]	; (8002888 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800285c:	e002      	b.n	8002864 <LoopFillZerobss>

0800285e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800285e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002860:	f842 3b04 	str.w	r3, [r2], #4

08002864 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002866:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002868:	d3f9      	bcc.n	800285e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800286a:	f7ff ffd3 	bl	8002814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800286e:	f00e f89f 	bl	80109b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002872:	f7fe fbcb 	bl	800100c <main>
  bx  lr    
 8002876:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002878:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800287c:	080163b4 	.word	0x080163b4
  ldr  r0, =_sdata
 8002880:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002884:	2000035c 	.word	0x2000035c
  ldr  r2, =_sbss
 8002888:	2000035c 	.word	0x2000035c
  ldr  r3, = _ebss
 800288c:	20006e3c 	.word	0x20006e3c

08002890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC_IRQHandler>
	...

08002894 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08c      	sub	sp, #48	; 0x30
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 80028a0:	2364      	movs	r3, #100	; 0x64
 80028a2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 80028ac:	e073      	b.n	8002996 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 80028ae:	4b3f      	ldr	r3, [pc, #252]	; (80029ac <GPS_Poll+0x118>)
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	2364      	movs	r3, #100	; 0x64
 80028b4:	2201      	movs	r2, #1
 80028b6:	493e      	ldr	r1, [pc, #248]	; (80029b0 <GPS_Poll+0x11c>)
 80028b8:	f006 fd48 	bl	800934c <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 80028bc:	4b3c      	ldr	r3, [pc, #240]	; (80029b0 <GPS_Poll+0x11c>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b0a      	cmp	r3, #10
 80028c2:	d00f      	beq.n	80028e4 <GPS_Poll+0x50>
 80028c4:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <GPS_Poll+0x120>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b63      	cmp	r3, #99	; 0x63
 80028ca:	d80b      	bhi.n	80028e4 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 80028cc:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <GPS_Poll+0x120>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	b2d1      	uxtb	r1, r2
 80028d4:	4a37      	ldr	r2, [pc, #220]	; (80029b4 <GPS_Poll+0x120>)
 80028d6:	7011      	strb	r1, [r2, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <GPS_Poll+0x11c>)
 80028dc:	7819      	ldrb	r1, [r3, #0]
 80028de:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <GPS_Poll+0x124>)
 80028e0:	5499      	strb	r1, [r3, r2]
 80028e2:	e021      	b.n	8002928 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 80028e4:	4834      	ldr	r0, [pc, #208]	; (80029b8 <GPS_Poll+0x124>)
 80028e6:	f000 f86b 	bl	80029c0 <GPS_validate>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d013      	beq.n	8002918 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 80028f0:	4831      	ldr	r0, [pc, #196]	; (80029b8 <GPS_Poll+0x124>)
 80028f2:	f000 f8c7 	bl	8002a84 <GPS_parse>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00d      	beq.n	8002918 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 80028fc:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <GPS_Poll+0x128>)
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8002904:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <GPS_Poll+0x128>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <GPS_Poll+0x128>)
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	601a      	str	r2, [r3, #0]
					done = 1;
 8002914:	2301      	movs	r3, #1
 8002916:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8002918:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <GPS_Poll+0x120>)
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 800291e:	2264      	movs	r2, #100	; 0x64
 8002920:	2100      	movs	r1, #0
 8002922:	4825      	ldr	r0, [pc, #148]	; (80029b8 <GPS_Poll+0x124>)
 8002924:	f00e f8a4 	bl	8010a70 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 8002928:	2300      	movs	r3, #0
 800292a:	623b      	str	r3, [r7, #32]
 800292c:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <GPS_Poll+0x118>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	623b      	str	r3, [r7, #32]
 8002936:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <GPS_Poll+0x118>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	623b      	str	r3, [r7, #32]
 8002940:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	4b19      	ldr	r3, [pc, #100]	; (80029ac <GPS_Poll+0x118>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	61fb      	str	r3, [r7, #28]
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <GPS_Poll+0x118>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 800295c:	2300      	movs	r3, #0
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <GPS_Poll+0x118>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <GPS_Poll+0x118>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <GPS_Poll+0x118>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <GPS_Poll+0x118>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8002990:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002992:	3301      	adds	r3, #1
 8002994:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 8002996:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002998:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800299a:	429a      	cmp	r2, r3
 800299c:	d202      	bcs.n	80029a4 <GPS_Poll+0x110>
 800299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d084      	beq.n	80028ae <GPS_Poll+0x1a>
	}
}
 80029a4:	bf00      	nop
 80029a6:	3730      	adds	r7, #48	; 0x30
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20005068 	.word	0x20005068
 80029b0:	200003ac 	.word	0x200003ac
 80029b4:	200003ad 	.word	0x200003ad
 80029b8:	20005464 	.word	0x20005464
 80029bc:	2000540c 	.word	0x2000540c

080029c0 <GPS_validate>:

int GPS_validate(char *nmeastr){
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b24      	cmp	r3, #36	; 0x24
 80029da:	d103      	bne.n	80029e4 <GPS_validate+0x24>
        i++;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	3301      	adds	r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80029e2:	e00c      	b.n	80029fe <GPS_validate+0x3e>
        return 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e047      	b.n	8002a78 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4053      	eors	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        i++;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3301      	adds	r3, #1
 80029fc:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4413      	add	r3, r2
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <GPS_validate+0x5c>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b2a      	cmp	r3, #42	; 0x2a
 8002a14:	d002      	beq.n	8002a1c <GPS_validate+0x5c>
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2b4a      	cmp	r3, #74	; 0x4a
 8002a1a:	dde5      	ble.n	80029e8 <GPS_validate+0x28>
    }

    if(i >= 75){
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2b4a      	cmp	r3, #74	; 0x4a
 8002a20:	dd01      	ble.n	8002a26 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8002a22:	2300      	movs	r3, #0
 8002a24:	e028      	b.n	8002a78 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a30:	d119      	bne.n	8002a66 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	3301      	adds	r3, #1
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	3302      	adds	r3, #2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8002a4e:	f107 0308 	add.w	r3, r7, #8
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	490a      	ldr	r1, [pc, #40]	; (8002a80 <GPS_validate+0xc0>)
 8002a56:	4618      	mov	r0, r3
 8002a58:	f00e fffa 	bl	8011a50 <siprintf>
    return((checkcalcstr[0] == check[0])
 8002a5c:	7a3a      	ldrb	r2, [r7, #8]
 8002a5e:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d108      	bne.n	8002a76 <GPS_validate+0xb6>
 8002a64:	e001      	b.n	8002a6a <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8002a66:	2300      	movs	r3, #0
 8002a68:	e006      	b.n	8002a78 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8002a6a:	7a7a      	ldrb	r2, [r7, #9]
 8002a6c:	7b7b      	ldrb	r3, [r7, #13]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d101      	bne.n	8002a76 <GPS_validate+0xb6>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <GPS_validate+0xb8>
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	08015aec 	.word	0x08015aec

08002a84 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af08      	add	r7, sp, #32
 8002a8a:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8002a8c:	2206      	movs	r2, #6
 8002a8e:	496d      	ldr	r1, [pc, #436]	; (8002c44 <GPS_parse+0x1c0>)
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f00f f86e 	bl	8011b72 <strncmp>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d139      	bne.n	8002b10 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8002a9c:	4b6a      	ldr	r3, [pc, #424]	; (8002c48 <GPS_parse+0x1c4>)
 8002a9e:	9307      	str	r3, [sp, #28]
 8002aa0:	4b6a      	ldr	r3, [pc, #424]	; (8002c4c <GPS_parse+0x1c8>)
 8002aa2:	9306      	str	r3, [sp, #24]
 8002aa4:	4b6a      	ldr	r3, [pc, #424]	; (8002c50 <GPS_parse+0x1cc>)
 8002aa6:	9305      	str	r3, [sp, #20]
 8002aa8:	4b6a      	ldr	r3, [pc, #424]	; (8002c54 <GPS_parse+0x1d0>)
 8002aaa:	9304      	str	r3, [sp, #16]
 8002aac:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <GPS_parse+0x1d4>)
 8002aae:	9303      	str	r3, [sp, #12]
 8002ab0:	4b6a      	ldr	r3, [pc, #424]	; (8002c5c <GPS_parse+0x1d8>)
 8002ab2:	9302      	str	r3, [sp, #8]
 8002ab4:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <GPS_parse+0x1dc>)
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <GPS_parse+0x1e0>)
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	4b6a      	ldr	r3, [pc, #424]	; (8002c68 <GPS_parse+0x1e4>)
 8002abe:	4a6b      	ldr	r2, [pc, #428]	; (8002c6c <GPS_parse+0x1e8>)
 8002ac0:	496b      	ldr	r1, [pc, #428]	; (8002c70 <GPS_parse+0x1ec>)
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f00e ffe4 	bl	8011a90 <siscanf>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f340 80b5 	ble.w	8002c3a <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8002ad0:	4b68      	ldr	r3, [pc, #416]	; (8002c74 <GPS_parse+0x1f0>)
 8002ad2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ad6:	4b67      	ldr	r3, [pc, #412]	; (8002c74 <GPS_parse+0x1f0>)
 8002ad8:	7e1b      	ldrb	r3, [r3, #24]
 8002ada:	4618      	mov	r0, r3
 8002adc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae0:	f000 f8ec 	bl	8002cbc <GPS_nmea_to_dec>
 8002ae4:	eef0 7a40 	vmov.f32	s15, s0
 8002ae8:	4b62      	ldr	r3, [pc, #392]	; (8002c74 <GPS_parse+0x1f0>)
 8002aea:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8002aee:	4b61      	ldr	r3, [pc, #388]	; (8002c74 <GPS_parse+0x1f0>)
 8002af0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002af4:	4b5f      	ldr	r3, [pc, #380]	; (8002c74 <GPS_parse+0x1f0>)
 8002af6:	7e5b      	ldrb	r3, [r3, #25]
 8002af8:	4618      	mov	r0, r3
 8002afa:	eeb0 0a67 	vmov.f32	s0, s15
 8002afe:	f000 f8dd 	bl	8002cbc <GPS_nmea_to_dec>
 8002b02:	eef0 7a40 	vmov.f32	s15, s0
 8002b06:	4b5b      	ldr	r3, [pc, #364]	; (8002c74 <GPS_parse+0x1f0>)
 8002b08:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e095      	b.n	8002c3c <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8002b10:	2206      	movs	r2, #6
 8002b12:	4959      	ldr	r1, [pc, #356]	; (8002c78 <GPS_parse+0x1f4>)
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f00f f82c 	bl	8011b72 <strncmp>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d134      	bne.n	8002b8a <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8002b20:	4b56      	ldr	r3, [pc, #344]	; (8002c7c <GPS_parse+0x1f8>)
 8002b22:	9305      	str	r3, [sp, #20]
 8002b24:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <GPS_parse+0x1fc>)
 8002b26:	9304      	str	r3, [sp, #16]
 8002b28:	4b56      	ldr	r3, [pc, #344]	; (8002c84 <GPS_parse+0x200>)
 8002b2a:	9303      	str	r3, [sp, #12]
 8002b2c:	4b4b      	ldr	r3, [pc, #300]	; (8002c5c <GPS_parse+0x1d8>)
 8002b2e:	9302      	str	r3, [sp, #8]
 8002b30:	4b4b      	ldr	r3, [pc, #300]	; (8002c60 <GPS_parse+0x1dc>)
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	4b4b      	ldr	r3, [pc, #300]	; (8002c64 <GPS_parse+0x1e0>)
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	4b4b      	ldr	r3, [pc, #300]	; (8002c68 <GPS_parse+0x1e4>)
 8002b3a:	4a4c      	ldr	r2, [pc, #304]	; (8002c6c <GPS_parse+0x1e8>)
 8002b3c:	4952      	ldr	r1, [pc, #328]	; (8002c88 <GPS_parse+0x204>)
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f00e ffa6 	bl	8011a90 <siscanf>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	dd77      	ble.n	8002c3a <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <GPS_parse+0x1f0>)
 8002b4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b50:	4b48      	ldr	r3, [pc, #288]	; (8002c74 <GPS_parse+0x1f0>)
 8002b52:	7e1b      	ldrb	r3, [r3, #24]
 8002b54:	4618      	mov	r0, r3
 8002b56:	eeb0 0a67 	vmov.f32	s0, s15
 8002b5a:	f000 f8af 	bl	8002cbc <GPS_nmea_to_dec>
 8002b5e:	eef0 7a40 	vmov.f32	s15, s0
 8002b62:	4b44      	ldr	r3, [pc, #272]	; (8002c74 <GPS_parse+0x1f0>)
 8002b64:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8002b68:	4b42      	ldr	r3, [pc, #264]	; (8002c74 <GPS_parse+0x1f0>)
 8002b6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b6e:	4b41      	ldr	r3, [pc, #260]	; (8002c74 <GPS_parse+0x1f0>)
 8002b70:	7e5b      	ldrb	r3, [r3, #25]
 8002b72:	4618      	mov	r0, r3
 8002b74:	eeb0 0a67 	vmov.f32	s0, s15
 8002b78:	f000 f8a0 	bl	8002cbc <GPS_nmea_to_dec>
 8002b7c:	eef0 7a40 	vmov.f32	s15, s0
 8002b80:	4b3c      	ldr	r3, [pc, #240]	; (8002c74 <GPS_parse+0x1f0>)
 8002b82:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e058      	b.n	8002c3c <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8002b8a:	2206      	movs	r2, #6
 8002b8c:	493f      	ldr	r1, [pc, #252]	; (8002c8c <GPS_parse+0x208>)
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f00e ffef 	bl	8011b72 <strncmp>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d130      	bne.n	8002bfc <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8002b9a:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <GPS_parse+0x20c>)
 8002b9c:	9303      	str	r3, [sp, #12]
 8002b9e:	4b33      	ldr	r3, [pc, #204]	; (8002c6c <GPS_parse+0x1e8>)
 8002ba0:	9302      	str	r3, [sp, #8]
 8002ba2:	4b2e      	ldr	r3, [pc, #184]	; (8002c5c <GPS_parse+0x1d8>)
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <GPS_parse+0x1dc>)
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <GPS_parse+0x1e0>)
 8002bac:	4a2e      	ldr	r2, [pc, #184]	; (8002c68 <GPS_parse+0x1e4>)
 8002bae:	4939      	ldr	r1, [pc, #228]	; (8002c94 <GPS_parse+0x210>)
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f00e ff6d 	bl	8011a90 <siscanf>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	dd3e      	ble.n	8002c3a <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <GPS_parse+0x1f0>)
 8002bbe:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bc2:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <GPS_parse+0x1f0>)
 8002bc4:	7e1b      	ldrb	r3, [r3, #24]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bcc:	f000 f876 	bl	8002cbc <GPS_nmea_to_dec>
 8002bd0:	eef0 7a40 	vmov.f32	s15, s0
 8002bd4:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <GPS_parse+0x1f0>)
 8002bd6:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <GPS_parse+0x1f0>)
 8002bdc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002be0:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <GPS_parse+0x1f0>)
 8002be2:	7e5b      	ldrb	r3, [r3, #25]
 8002be4:	4618      	mov	r0, r3
 8002be6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bea:	f000 f867 	bl	8002cbc <GPS_nmea_to_dec>
 8002bee:	eef0 7a40 	vmov.f32	s15, s0
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <GPS_parse+0x1f0>)
 8002bf4:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e01f      	b.n	8002c3c <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8002bfc:	2206      	movs	r2, #6
 8002bfe:	4926      	ldr	r1, [pc, #152]	; (8002c98 <GPS_parse+0x214>)
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f00e ffb6 	bl	8011b72 <strncmp>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d116      	bne.n	8002c3a <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8002c0c:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <GPS_parse+0x218>)
 8002c0e:	9305      	str	r3, [sp, #20]
 8002c10:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <GPS_parse+0x21c>)
 8002c12:	9304      	str	r3, [sp, #16]
 8002c14:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <GPS_parse+0x220>)
 8002c16:	9303      	str	r3, [sp, #12]
 8002c18:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <GPS_parse+0x200>)
 8002c1a:	9302      	str	r3, [sp, #8]
 8002c1c:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <GPS_parse+0x224>)
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	4b22      	ldr	r3, [pc, #136]	; (8002cac <GPS_parse+0x228>)
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <GPS_parse+0x22c>)
 8002c26:	4a23      	ldr	r2, [pc, #140]	; (8002cb4 <GPS_parse+0x230>)
 8002c28:	4923      	ldr	r1, [pc, #140]	; (8002cb8 <GPS_parse+0x234>)
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f00e ff30 	bl	8011a90 <siscanf>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	dd01      	ble.n	8002c3a <GPS_parse+0x1b6>
            return 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e000      	b.n	8002c3c <GPS_parse+0x1b8>
    }
    return 0;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	08015af4 	.word	0x08015af4
 8002c48:	20005438 	.word	0x20005438
 8002c4c:	20005434 	.word	0x20005434
 8002c50:	20005430 	.word	0x20005430
 8002c54:	2000542c 	.word	0x2000542c
 8002c58:	20005428 	.word	0x20005428
 8002c5c:	20005425 	.word	0x20005425
 8002c60:	20005418 	.word	0x20005418
 8002c64:	20005424 	.word	0x20005424
 8002c68:	2000541c 	.word	0x2000541c
 8002c6c:	20005420 	.word	0x20005420
 8002c70:	08015afc 	.word	0x08015afc
 8002c74:	2000540c 	.word	0x2000540c
 8002c78:	08015b24 	.word	0x08015b24
 8002c7c:	20005444 	.word	0x20005444
 8002c80:	20005440 	.word	0x20005440
 8002c84:	2000543c 	.word	0x2000543c
 8002c88:	08015b2c 	.word	0x08015b2c
 8002c8c:	08015b4c 	.word	0x08015b4c
 8002c90:	20005448 	.word	0x20005448
 8002c94:	08015b54 	.word	0x08015b54
 8002c98:	08015b70 	.word	0x08015b70
 8002c9c:	20005460 	.word	0x20005460
 8002ca0:	2000545c 	.word	0x2000545c
 8002ca4:	20005459 	.word	0x20005459
 8002ca8:	20005458 	.word	0x20005458
 8002cac:	20005454 	.word	0x20005454
 8002cb0:	20005450 	.word	0x20005450
 8002cb4:	2000544c 	.word	0x2000544c
 8002cb8:	08015b78 	.word	0x08015b78

08002cbc <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8002cca:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cce:	eddf 6a20 	vldr	s13, [pc, #128]	; 8002d50 <GPS_nmea_to_dec+0x94>
 8002cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cda:	ee17 3a90 	vmov	r3, s15
 8002cde:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	2264      	movs	r2, #100	; 0x64
 8002ce4:	fb02 f303 	mul.w	r3, r2, r3
 8002ce8:	ee07 3a90 	vmov	s15, r3
 8002cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cf0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf8:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8002cfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d00:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002d54 <GPS_nmea_to_dec+0x98>
 8002d04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d08:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	ee07 3a90 	vmov	s15, r3
 8002d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d16:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	2b53      	cmp	r3, #83	; 0x53
 8002d26:	d002      	beq.n	8002d2e <GPS_nmea_to_dec+0x72>
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	2b57      	cmp	r3, #87	; 0x57
 8002d2c:	d105      	bne.n	8002d3a <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8002d2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d32:	eef1 7a67 	vneg.f32	s15, s15
 8002d36:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	ee07 3a90 	vmov	s15, r3
}
 8002d40:	eeb0 0a67 	vmov.f32	s0, s15
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	42c80000 	.word	0x42c80000
 8002d54:	42700000 	.word	0x42700000

08002d58 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <GPS_init+0x30>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 8002d68:	4a08      	ldr	r2, [pc, #32]	; (8002d8c <GPS_init+0x34>)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <GPS_init+0x34>)
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	f04f 33ff 	mov.w	r3, #4294967295
 8002d76:	2210      	movs	r2, #16
 8002d78:	4905      	ldr	r1, [pc, #20]	; (8002d90 <GPS_init+0x38>)
 8002d7a:	f006 fa4e 	bl	800921a <HAL_UART_Transmit>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20005068 	.word	0x20005068
 8002d8c:	200054c8 	.word	0x200054c8
 8002d90:	08015b98 	.word	0x08015b98

08002d94 <checkForI2CDevices>:
 *      Author: Jacoby
 */
#include <stm32f4xx_hal.h>


void checkForI2CDevices(UART_HandleTypeDef uart, I2C_HandleTypeDef I2C ){
 8002d94:	b084      	sub	sp, #16
 8002d96:	b5b0      	push	{r4, r5, r7, lr}
 8002d98:	b092      	sub	sp, #72	; 0x48
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002da0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t Buffer[25] = {0};
 8002da4:	2300      	movs	r3, #0
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	611a      	str	r2, [r3, #16]
 8002db8:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 8002dba:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <checkForI2CDevices+0x108>)
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8002dbe:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <checkForI2CDevices+0x10c>)
 8002dc0:	f107 040c 	add.w	r4, r7, #12
 8002dc4:	461d      	mov	r5, r3
 8002dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002dce:	c403      	stmia	r4!, {r0, r1}
 8002dd0:	8022      	strh	r2, [r4, #0]
	uint8_t EndMSG[] = "Done! \r\n\r\n";
 8002dd2:	4a34      	ldr	r2, [pc, #208]	; (8002ea4 <checkForI2CDevices+0x110>)
 8002dd4:	463b      	mov	r3, r7
 8002dd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dd8:	c303      	stmia	r3!, {r0, r1}
 8002dda:	801a      	strh	r2, [r3, #0]
 8002ddc:	3302      	adds	r3, #2
 8002dde:	0c12      	lsrs	r2, r2, #16
 8002de0:	701a      	strb	r2, [r3, #0]

    uint8_t i = 0, ret;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    HAL_Delay(1000);
 8002de8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dec:	f001 f8c2 	bl	8003f74 <HAL_Delay>

    /*-[ I2C Bus Scanning ]-*/
    HAL_UART_Transmit(&uart, StartMSG, sizeof(StartMSG), HAL_MAX_DELAY);
 8002df0:	f107 010c 	add.w	r1, r7, #12
 8002df4:	f04f 33ff 	mov.w	r3, #4294967295
 8002df8:	221a      	movs	r2, #26
 8002dfa:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002dfe:	f006 fa0c 	bl	800921a <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 8002e02:	2301      	movs	r3, #1
 8002e04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002e08:	e035      	b.n	8002e76 <checkForI2CDevices+0xe2>
    {
        ret = HAL_I2C_IsDeviceReady(&I2C, (uint16_t)(i<<1), 3, 5);
 8002e0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	b299      	uxth	r1, r3
 8002e14:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002e18:	2305      	movs	r3, #5
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	f002 fa7e 	bl	800531c <HAL_I2C_IsDeviceReady>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        if (ret != HAL_OK) /* No ACK Received At That Address */
 8002e26:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <checkForI2CDevices+0xae>
        {
            HAL_UART_Transmit(&uart, Space, sizeof(Space), HAL_MAX_DELAY);
 8002e2e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	2204      	movs	r2, #4
 8002e38:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002e3c:	f006 f9ed 	bl	800921a <HAL_UART_Transmit>
 8002e40:	e014      	b.n	8002e6c <checkForI2CDevices+0xd8>
        }
        else if(ret == HAL_OK)
 8002e42:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d110      	bne.n	8002e6c <checkForI2CDevices+0xd8>
        {
            sprintf(Buffer, "0x%X", i);
 8002e4a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e52:	4915      	ldr	r1, [pc, #84]	; (8002ea8 <checkForI2CDevices+0x114>)
 8002e54:	4618      	mov	r0, r3
 8002e56:	f00e fdfb 	bl	8011a50 <siprintf>
            HAL_UART_Transmit(&uart, Buffer, sizeof(Buffer), HAL_MAX_DELAY);
 8002e5a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e62:	2219      	movs	r2, #25
 8002e64:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002e68:	f006 f9d7 	bl	800921a <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 8002e6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e70:	3301      	adds	r3, #1
 8002e72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002e76:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	dac5      	bge.n	8002e0a <checkForI2CDevices+0x76>
        }
    }
    HAL_UART_Transmit(&uart, EndMSG, sizeof(EndMSG), HAL_MAX_DELAY);
 8002e7e:	4639      	mov	r1, r7
 8002e80:	f04f 33ff 	mov.w	r3, #4294967295
 8002e84:	220b      	movs	r2, #11
 8002e86:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002e8a:	f006 f9c6 	bl	800921a <HAL_UART_Transmit>
    /*--[ Scanning Done ]--*/

}
 8002e8e:	bf00      	nop
 8002e90:	3748      	adds	r7, #72	; 0x48
 8002e92:	46bd      	mov	sp, r7
 8002e94:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002e98:	b004      	add	sp, #16
 8002e9a:	4770      	bx	lr
 8002e9c:	00202d20 	.word	0x00202d20
 8002ea0:	08015bb4 	.word	0x08015bb4
 8002ea4:	08015bd0 	.word	0x08015bd0
 8002ea8:	08015bac 	.word	0x08015bac

08002eac <ism330dlc_read_reg>:
  *
  */
int32_t ism330dlc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	460b      	mov	r3, r1
 8002eba:	72fb      	strb	r3, [r7, #11]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685c      	ldr	r4, [r3, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6898      	ldr	r0, [r3, #8]
 8002ec8:	893b      	ldrh	r3, [r7, #8]
 8002eca:	7af9      	ldrb	r1, [r7, #11]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	47a0      	blx	r4
 8002ed0:	6178      	str	r0, [r7, #20]

  return ret;
 8002ed2:	697b      	ldr	r3, [r7, #20]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd90      	pop	{r4, r7, pc}

08002edc <ism330dlc_write_reg>:
  *
  */
int32_t ism330dlc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	460b      	mov	r3, r1
 8002eea:	72fb      	strb	r3, [r7, #11]
 8002eec:	4613      	mov	r3, r2
 8002eee:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681c      	ldr	r4, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6898      	ldr	r0, [r3, #8]
 8002ef8:	893b      	ldrh	r3, [r7, #8]
 8002efa:	7af9      	ldrb	r1, [r7, #11]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	47a0      	blx	r4
 8002f00:	6178      	str	r0, [r7, #20]

  return ret;
 8002f02:	697b      	ldr	r3, [r7, #20]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd90      	pop	{r4, r7, pc}

08002f0c <ism330dlc_from_fs2g_to_mg>:
  * @{
  *
  */

float_t ism330dlc_from_fs2g_to_mg(int16_t lsb)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8002f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f1a:	ee07 3a90 	vmov	s15, r3
 8002f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f22:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002f38 <ism330dlc_from_fs2g_to_mg+0x2c>
 8002f26:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	3d79db23 	.word	0x3d79db23

08002f3c <ism330dlc_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t ism330dlc_from_fs2000dps_to_mdps(int16_t lsb)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8002f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f52:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002f68 <ism330dlc_from_fs2000dps_to_mdps+0x2c>
 8002f56:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	428c0000 	.word	0x428c0000

08002f6c <ism330dlc_from_lsb_to_celsius>:

float_t ism330dlc_from_lsb_to_celsius(int16_t lsb)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8002f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f82:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002fa0 <ism330dlc_from_lsb_to_celsius+0x34>
 8002f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f8a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002f8e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002f92:	eeb0 0a67 	vmov.f32	s0, s15
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	43800000 	.word	0x43800000

08002fa4 <ism330dlc_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    ism330dlc_fs_xl_t val)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8002fb0:	f107 0208 	add.w	r2, r7, #8
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	2110      	movs	r1, #16
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ff77 	bl	8002eac <ism330dlc_read_reg>
 8002fbe:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10f      	bne.n	8002fe6 <ism330dlc_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	7a3b      	ldrb	r3, [r7, #8]
 8002fd0:	f362 0383 	bfi	r3, r2, #2, #2
 8002fd4:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 8002fd6:	f107 0208 	add.w	r2, r7, #8
 8002fda:	2301      	movs	r3, #1
 8002fdc:	2110      	movs	r1, #16
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ff7c 	bl	8002edc <ism330dlc_write_reg>
 8002fe4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <ism330dlc_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   ism330dlc_odr_xl_t val)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8002ffc:	f107 0208 	add.w	r2, r7, #8
 8003000:	2301      	movs	r3, #1
 8003002:	2110      	movs	r1, #16
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff ff51 	bl	8002eac <ism330dlc_read_reg>
 800300a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10f      	bne.n	8003032 <ism330dlc_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	b2da      	uxtb	r2, r3
 800301a:	7a3b      	ldrb	r3, [r7, #8]
 800301c:	f362 1307 	bfi	r3, r2, #4, #4
 8003020:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 8003022:	f107 0208 	add.w	r2, r7, #8
 8003026:	2301      	movs	r3, #1
 8003028:	2110      	movs	r1, #16
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ff56 	bl	8002edc <ism330dlc_write_reg>
 8003030:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <ism330dlc_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_full_scale_set(stmdev_ctx_t *ctx,
                                    ism330dlc_fs_g_t val)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003048:	f107 0208 	add.w	r2, r7, #8
 800304c:	2301      	movs	r3, #1
 800304e:	2111      	movs	r1, #17
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ff2b 	bl	8002eac <ism330dlc_read_reg>
 8003056:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10f      	bne.n	800307e <ism330dlc_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	b2da      	uxtb	r2, r3
 8003066:	7a3b      	ldrb	r3, [r7, #8]
 8003068:	f362 0343 	bfi	r3, r2, #1, #3
 800306c:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800306e:	f107 0208 	add.w	r2, r7, #8
 8003072:	2301      	movs	r3, #1
 8003074:	2111      	movs	r1, #17
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff ff30 	bl	8002edc <ism330dlc_write_reg>
 800307c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800307e:	68fb      	ldr	r3, [r7, #12]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <ism330dlc_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_data_rate_set(stmdev_ctx_t *ctx,
                                   ism330dlc_odr_g_t val)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003094:	f107 0208 	add.w	r2, r7, #8
 8003098:	2301      	movs	r3, #1
 800309a:	2111      	movs	r1, #17
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff ff05 	bl	8002eac <ism330dlc_read_reg>
 80030a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <ism330dlc_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	7a3b      	ldrb	r3, [r7, #8]
 80030b4:	f362 1307 	bfi	r3, r2, #4, #4
 80030b8:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80030ba:	f107 0208 	add.w	r2, r7, #8
 80030be:	2301      	movs	r3, #1
 80030c0:	2111      	movs	r1, #17
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ff0a 	bl	8002edc <ism330dlc_write_reg>
 80030c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80030ca:	68fb      	ldr	r3, [r7, #12]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <ism330dlc_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_block_data_update_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80030e0:	f107 0208 	add.w	r2, r7, #8
 80030e4:	2301      	movs	r3, #1
 80030e6:	2112      	movs	r1, #18
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff fedf 	bl	8002eac <ism330dlc_read_reg>
 80030ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10f      	bne.n	8003116 <ism330dlc_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	7a3b      	ldrb	r3, [r7, #8]
 8003100:	f362 1386 	bfi	r3, r2, #6, #1
 8003104:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003106:	f107 0208 	add.w	r2, r7, #8
 800310a:	2301      	movs	r3, #1
 800310c:	2112      	movs	r1, #18
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fee4 	bl	8002edc <ism330dlc_write_reg>
 8003114:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <ism330dlc_status_reg_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_status_reg_get(stmdev_ctx_t *ctx,
                                 ism330dlc_status_reg_t *val)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_STATUS_REG, (uint8_t *) val, 1);
 800312a:	2301      	movs	r3, #1
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	211e      	movs	r1, #30
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff febb 	bl	8002eac <ism330dlc_read_reg>
 8003136:	60f8      	str	r0, [r7, #12]

  return ret;
 8003138:	68fb      	ldr	r3, [r7, #12]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <ism330dlc_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUT_TEMP_L, buff, 2);
 800314c:	f107 0208 	add.w	r2, r7, #8
 8003150:	2302      	movs	r3, #2
 8003152:	2120      	movs	r1, #32
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff fea9 	bl	8002eac <ism330dlc_read_reg>
 800315a:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800315c:	7a7b      	ldrb	r3, [r7, #9]
 800315e:	b21a      	sxth	r2, r3
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800316a:	b29b      	uxth	r3, r3
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	b29a      	uxth	r2, r3
 8003170:	7a3b      	ldrb	r3, [r7, #8]
 8003172:	b29b      	uxth	r3, r3
 8003174:	4413      	add	r3, r2
 8003176:	b29b      	uxth	r3, r3
 8003178:	b21a      	sxth	r2, r3
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	801a      	strh	r2, [r3, #0]

  return ret;
 800317e:	68fb      	ldr	r3, [r7, #12]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <ism330dlc_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUTX_L_G, buff, 6);
 8003192:	f107 020c 	add.w	r2, r7, #12
 8003196:	2306      	movs	r3, #6
 8003198:	2122      	movs	r1, #34	; 0x22
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fe86 	bl	8002eac <ism330dlc_read_reg>
 80031a0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80031a2:	7b7b      	ldrb	r3, [r7, #13]
 80031a4:	b21a      	sxth	r2, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	7b3b      	ldrb	r3, [r7, #12]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	b29b      	uxth	r3, r3
 80031be:	b21a      	sxth	r2, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	3302      	adds	r3, #2
 80031ca:	b212      	sxth	r2, r2
 80031cc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	3302      	adds	r3, #2
 80031d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	b29a      	uxth	r2, r3
 80031dc:	7bbb      	ldrb	r3, [r7, #14]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	3302      	adds	r3, #2
 80031e8:	b212      	sxth	r2, r2
 80031ea:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80031ec:	7c7a      	ldrb	r2, [r7, #17]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	3304      	adds	r3, #4
 80031f2:	b212      	sxth	r2, r2
 80031f4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	3304      	adds	r3, #4
 80031fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	b29a      	uxth	r2, r3
 8003204:	7c3b      	ldrb	r3, [r7, #16]
 8003206:	b29b      	uxth	r3, r3
 8003208:	4413      	add	r3, r2
 800320a:	b29a      	uxth	r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	3304      	adds	r3, #4
 8003210:	b212      	sxth	r2, r2
 8003212:	801a      	strh	r2, [r3, #0]

  return ret;
 8003214:	697b      	ldr	r3, [r7, #20]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <ism330dlc_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUTX_L_XL, buff, 6);
 8003228:	f107 020c 	add.w	r2, r7, #12
 800322c:	2306      	movs	r3, #6
 800322e:	2128      	movs	r1, #40	; 0x28
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff fe3b 	bl	8002eac <ism330dlc_read_reg>
 8003236:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003238:	7b7b      	ldrb	r3, [r7, #13]
 800323a:	b21a      	sxth	r2, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003246:	b29b      	uxth	r3, r3
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	b29a      	uxth	r2, r3
 800324c:	7b3b      	ldrb	r3, [r7, #12]
 800324e:	b29b      	uxth	r3, r3
 8003250:	4413      	add	r3, r2
 8003252:	b29b      	uxth	r3, r3
 8003254:	b21a      	sxth	r2, r3
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800325a:	7bfa      	ldrb	r2, [r7, #15]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	3302      	adds	r3, #2
 8003260:	b212      	sxth	r2, r2
 8003262:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	3302      	adds	r3, #2
 8003268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800326c:	b29b      	uxth	r3, r3
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	b29a      	uxth	r2, r3
 8003272:	7bbb      	ldrb	r3, [r7, #14]
 8003274:	b29b      	uxth	r3, r3
 8003276:	4413      	add	r3, r2
 8003278:	b29a      	uxth	r2, r3
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	3302      	adds	r3, #2
 800327e:	b212      	sxth	r2, r2
 8003280:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003282:	7c7a      	ldrb	r2, [r7, #17]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	3304      	adds	r3, #4
 8003288:	b212      	sxth	r2, r2
 800328a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	3304      	adds	r3, #4
 8003290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003294:	b29b      	uxth	r3, r3
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	b29a      	uxth	r2, r3
 800329a:	7c3b      	ldrb	r3, [r7, #16]
 800329c:	b29b      	uxth	r3, r3
 800329e:	4413      	add	r3, r2
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	3304      	adds	r3, #4
 80032a6:	b212      	sxth	r2, r2
 80032a8:	801a      	strh	r2, [r3, #0]

  return ret;
 80032aa:	697b      	ldr	r3, [r7, #20]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <ism330dlc_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_WHO_AM_I, buff, 1);
 80032be:	2301      	movs	r3, #1
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	210f      	movs	r1, #15
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff fdf1 	bl	8002eac <ism330dlc_read_reg>
 80032ca:	60f8      	str	r0, [r7, #12]

  return ret;
 80032cc:	68fb      	ldr	r3, [r7, #12]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <ism330dlc_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80032e2:	f107 0208 	add.w	r2, r7, #8
 80032e6:	2301      	movs	r3, #1
 80032e8:	2112      	movs	r1, #18
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff fdde 	bl	8002eac <ism330dlc_read_reg>
 80032f0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10f      	bne.n	8003318 <ism330dlc_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	7a3b      	ldrb	r3, [r7, #8]
 8003302:	f362 0300 	bfi	r3, r2, #0, #1
 8003306:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003308:	f107 0208 	add.w	r2, r7, #8
 800330c:	2301      	movs	r3, #1
 800330e:	2112      	movs	r1, #18
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff fde3 	bl	8002edc <ism330dlc_write_reg>
 8003316:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003318:	68fb      	ldr	r3, [r7, #12]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <ism330dlc_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800332c:	f107 0208 	add.w	r2, r7, #8
 8003330:	2301      	movs	r3, #1
 8003332:	2112      	movs	r1, #18
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff fdb9 	bl	8002eac <ism330dlc_read_reg>
 800333a:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 800333c:	7a3b      	ldrb	r3, [r7, #8]
 800333e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	701a      	strb	r2, [r3, #0]

  return ret;
 800334a:	68fb      	ldr	r3, [r7, #12]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <ism330dlc_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_filter_analog_set(stmdev_ctx_t *ctx,
                                       ism330dlc_bw0_xl_t val)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8003360:	f107 0208 	add.w	r2, r7, #8
 8003364:	2301      	movs	r3, #1
 8003366:	2110      	movs	r1, #16
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff fd9f 	bl	8002eac <ism330dlc_read_reg>
 800336e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10f      	bne.n	8003396 <ism330dlc_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	b2da      	uxtb	r2, r3
 800337e:	7a3b      	ldrb	r3, [r7, #8]
 8003380:	f362 0300 	bfi	r3, r2, #0, #1
 8003384:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 8003386:	f107 0208 	add.w	r2, r7, #8
 800338a:	2301      	movs	r3, #1
 800338c:	2110      	movs	r1, #16
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fda4 	bl	8002edc <ism330dlc_write_reg>
 8003394:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003396:	68fb      	ldr	r3, [r7, #12]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <ism330dlc_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                       ism330dlc_input_composite_t val)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL8_XL,
 80033ac:	f107 0208 	add.w	r2, r7, #8
 80033b0:	2301      	movs	r3, #1
 80033b2:	2117      	movs	r1, #23
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff fd79 	bl	8002eac <ism330dlc_read_reg>
 80033ba:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d120      	bne.n	8003404 <ism330dlc_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	7a3b      	ldrb	r3, [r7, #8]
 80033ce:	f362 03c3 	bfi	r3, r2, #3, #1
 80033d2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	7a3b      	ldrb	r3, [r7, #8]
 80033de:	f362 1346 	bfi	r3, r2, #5, #2
 80033e2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 80033e4:	7a3b      	ldrb	r3, [r7, #8]
 80033e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ea:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 80033ec:	7a3b      	ldrb	r3, [r7, #8]
 80033ee:	f36f 0382 	bfc	r3, #2, #1
 80033f2:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL8_XL,
 80033f4:	f107 0208 	add.w	r2, r7, #8
 80033f8:	2301      	movs	r3, #1
 80033fa:	2117      	movs	r1, #23
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff fd6d 	bl	8002edc <ism330dlc_write_reg>
 8003402:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8003404:	68fb      	ldr	r3, [r7, #12]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <ism330dlc_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_band_pass_set(stmdev_ctx_t *ctx,
                                   ism330dlc_lpf1_sel_g_t val)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	460b      	mov	r3, r1
 8003418:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl4_c_t ctrl4_c;
  ism330dlc_ctrl6_c_t ctrl6_c;
  ism330dlc_ctrl7_g_t ctrl7_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800341a:	f107 0208 	add.w	r2, r7, #8
 800341e:	2301      	movs	r3, #1
 8003420:	2116      	movs	r1, #22
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff fd42 	bl	8002eac <ism330dlc_read_reg>
 8003428:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d157      	bne.n	80034e0 <ism330dlc_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	b2da      	uxtb	r2, r3
 800343a:	7a3b      	ldrb	r3, [r7, #8]
 800343c:	f362 1305 	bfi	r3, r2, #4, #2
 8003440:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	09db      	lsrs	r3, r3, #7
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	b2da      	uxtb	r2, r3
 800344e:	7a3b      	ldrb	r3, [r7, #8]
 8003450:	f362 1386 	bfi	r3, r2, #6, #1
 8003454:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8003456:	f107 0208 	add.w	r2, r7, #8
 800345a:	2301      	movs	r3, #1
 800345c:	2116      	movs	r1, #22
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff fd3c 	bl	8002edc <ism330dlc_write_reg>
 8003464:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d139      	bne.n	80034e0 <ism330dlc_gy_band_pass_set+0xd2>
    {
      ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800346c:	f107 020c 	add.w	r2, r7, #12
 8003470:	2301      	movs	r3, #1
 8003472:	2115      	movs	r1, #21
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff fd19 	bl	8002eac <ism330dlc_read_reg>
 800347a:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d12e      	bne.n	80034e0 <ism330dlc_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	b2da      	uxtb	r2, r3
 800348a:	7b3b      	ldrb	r3, [r7, #12]
 800348c:	f362 0301 	bfi	r3, r2, #0, #2
 8003490:	733b      	strb	r3, [r7, #12]
        ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL6_C,
 8003492:	f107 020c 	add.w	r2, r7, #12
 8003496:	2301      	movs	r3, #1
 8003498:	2115      	movs	r1, #21
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff fd1e 	bl	8002edc <ism330dlc_write_reg>
 80034a0:	6178      	str	r0, [r7, #20]
                                  (uint8_t *)&ctrl6_c, 1);

        if (ret == 0)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d11b      	bne.n	80034e0 <ism330dlc_gy_band_pass_set+0xd2>
        {
          ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL4_C,
 80034a8:	f107 0210 	add.w	r2, r7, #16
 80034ac:	2301      	movs	r3, #1
 80034ae:	2113      	movs	r1, #19
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff fcfb 	bl	8002eac <ism330dlc_read_reg>
 80034b6:	6178      	str	r0, [r7, #20]
                                   (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d110      	bne.n	80034e0 <ism330dlc_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	08db      	lsrs	r3, r3, #3
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	7c3b      	ldrb	r3, [r7, #16]
 80034ca:	f362 0341 	bfi	r3, r2, #1, #1
 80034ce:	743b      	strb	r3, [r7, #16]
            ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL4_C,
 80034d0:	f107 0210 	add.w	r2, r7, #16
 80034d4:	2301      	movs	r3, #1
 80034d6:	2113      	movs	r1, #19
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff fcff 	bl	8002edc <ism330dlc_write_reg>
 80034de:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 80034e0:	697b      	ldr	r3, [r7, #20]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b088      	sub	sp, #32
 80034ee:	af04      	add	r7, sp, #16
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	461a      	mov	r2, r3
 80034f6:	460b      	mov	r3, r1
 80034f8:	72fb      	strb	r3, [r7, #11]
 80034fa:	4613      	mov	r3, r2
 80034fc:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, ISM330DLC_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80034fe:	7afb      	ldrb	r3, [r7, #11]
 8003500:	b29a      	uxth	r2, r3
 8003502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003506:	9302      	str	r3, [sp, #8]
 8003508:	893b      	ldrh	r3, [r7, #8]
 800350a:	9301      	str	r3, [sp, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	2301      	movs	r3, #1
 8003512:	21d5      	movs	r1, #213	; 0xd5
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f001 fbe1 	bl	8004cdc <HAL_I2C_Mem_Write>
  return 0;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af04      	add	r7, sp, #16
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	461a      	mov	r2, r3
 8003530:	460b      	mov	r3, r1
 8003532:	72fb      	strb	r3, [r7, #11]
 8003534:	4613      	mov	r3, r2
 8003536:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, ISM330DLC_I2C_ADD_L, reg,
 8003538:	7afb      	ldrb	r3, [r7, #11]
 800353a:	b29a      	uxth	r2, r3
 800353c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003540:	9302      	str	r3, [sp, #8]
 8003542:	893b      	ldrh	r3, [r7, #8]
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2301      	movs	r3, #1
 800354c:	21d5      	movs	r1, #213	; 0xd5
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f001 fcbe 	bl	8004ed0 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <MRT_ISM330DLC_Setup>:




void MRT_ISM330DLC_Setup(stmdev_ctx_t *dev_ctx, I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800356c:	4a31      	ldr	r2, [pc, #196]	; (8003634 <MRT_ISM330DLC_Setup+0xd4>)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6013      	str	r3, [r2, #0]

	  HAL_UART_Transmit(Guart,"LISM330DLC Setup Starts\n\r", 27, HAL_MAX_DELAY);
 8003572:	4b30      	ldr	r3, [pc, #192]	; (8003634 <MRT_ISM330DLC_Setup+0xd4>)
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	f04f 33ff 	mov.w	r3, #4294967295
 800357a:	221b      	movs	r2, #27
 800357c:	492e      	ldr	r1, [pc, #184]	; (8003638 <MRT_ISM330DLC_Setup+0xd8>)
 800357e:	f005 fe4c 	bl	800921a <HAL_UART_Transmit>
	  /* Initialize mems driver interface */
	  //dev_ctx->write_reg = write;
	  dev_ctx->write_reg = write;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4a2d      	ldr	r2, [pc, #180]	; (800363c <MRT_ISM330DLC_Setup+0xdc>)
 8003586:	601a      	str	r2, [r3, #0]
	  dev_ctx->read_reg = read;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4a2d      	ldr	r2, [pc, #180]	; (8003640 <MRT_ISM330DLC_Setup+0xe0>)
 800358c:	605a      	str	r2, [r3, #4]
	  dev_ctx->handle = SENSOR_BUS;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	609a      	str	r2, [r3, #8]
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 8003594:	200a      	movs	r0, #10
 8003596:	f000 fced 	bl	8003f74 <HAL_Delay>
	  /* Check device ID */
	  ism330dlc_device_id_get(dev_ctx, &whoamI);
 800359a:	492a      	ldr	r1, [pc, #168]	; (8003644 <MRT_ISM330DLC_Setup+0xe4>)
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f7ff fe89 	bl	80032b4 <ism330dlc_device_id_get>

	  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80035a2:	4b24      	ldr	r3, [pc, #144]	; (8003634 <MRT_ISM330DLC_Setup+0xd4>)
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	2215      	movs	r2, #21
 80035ac:	4926      	ldr	r1, [pc, #152]	; (8003648 <MRT_ISM330DLC_Setup+0xe8>)
 80035ae:	f005 fe34 	bl	800921a <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3,whoamI, 2, HAL_MAX_DELAY);
		  HAL_UART_Transmit(&huart3,"\n\rProgram Terminated\n\r", 26, HAL_MAX_DELAY);
		  while(1);
	  }
	  */
	  	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <MRT_ISM330DLC_Setup+0xd4>)
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ba:	2206      	movs	r2, #6
 80035bc:	4923      	ldr	r1, [pc, #140]	; (800364c <MRT_ISM330DLC_Setup+0xec>)
 80035be:	f005 fe2c 	bl	800921a <HAL_UART_Transmit>

	  /* Restore default configuration */
	  ism330dlc_reset_set(dev_ctx, PROPERTY_ENABLE);
 80035c2:	2101      	movs	r1, #1
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f7ff fe86 	bl	80032d6 <ism330dlc_reset_set>

	  do {
		ism330dlc_reset_get(dev_ctx, &rst);
 80035ca:	4921      	ldr	r1, [pc, #132]	; (8003650 <MRT_ISM330DLC_Setup+0xf0>)
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7ff fea8 	bl	8003322 <ism330dlc_reset_get>
	  } while (rst);
 80035d2:	4b1f      	ldr	r3, [pc, #124]	; (8003650 <MRT_ISM330DLC_Setup+0xf0>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f7      	bne.n	80035ca <MRT_ISM330DLC_Setup+0x6a>


	  /* Enable Block Data Update */
	    ism330dlc_block_data_update_set(dev_ctx, PROPERTY_ENABLE);
 80035da:	2101      	movs	r1, #1
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff fd79 	bl	80030d4 <ism330dlc_block_data_update_set>
	    /* Set Output Data Rate */
	    ism330dlc_xl_data_rate_set(dev_ctx, ISM330DLC_XL_ODR_12Hz5);
 80035e2:	2101      	movs	r1, #1
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f7ff fd03 	bl	8002ff0 <ism330dlc_xl_data_rate_set>
	    ism330dlc_gy_data_rate_set(dev_ctx, ISM330DLC_GY_ODR_12Hz5);
 80035ea:	2101      	movs	r1, #1
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f7ff fd4b 	bl	8003088 <ism330dlc_gy_data_rate_set>
	    /* Set full scale */
	    ism330dlc_xl_full_scale_set(dev_ctx, ISM330DLC_2g);
 80035f2:	2100      	movs	r1, #0
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f7ff fcd5 	bl	8002fa4 <ism330dlc_xl_full_scale_set>
	    ism330dlc_gy_full_scale_set(dev_ctx, ISM330DLC_2000dps);
 80035fa:	2106      	movs	r1, #6
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff fd1d 	bl	800303c <ism330dlc_gy_full_scale_set>
	    /* Configure filtering chain(No aux interface) */
	    /* Accelerometer - analog filter */
	    ism330dlc_xl_filter_analog_set(dev_ctx, ISM330DLC_XL_ANA_BW_400Hz);
 8003602:	2101      	movs	r1, #1
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f7ff fea5 	bl	8003354 <ism330dlc_xl_filter_analog_set>
	    /* Accelerometer - LPF1 path ( LPF2 not used )*/
	    //ism330dlc_xl_lp1_bandwidth_set(dev_ctx, ISM330DLC_XL_LP1_ODR_DIV_4);
	    /* Accelerometer - LPF1 + LPF2 path */
	    ism330dlc_xl_lp2_bandwidth_set(dev_ctx,
 800360a:	2111      	movs	r1, #17
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f7ff fec7 	bl	80033a0 <ism330dlc_xl_lp2_bandwidth_set>
	                                   ISM330DLC_XL_LOW_NOISE_LP_ODR_DIV_100);
	    /* Accelerometer - High Pass / Slope path */
	    //ism330dlc_xl_reference_mode_set(&dev_ctx, PROPERTY_DISABLE);
	    //ism330dlc_xl_hp_bandwidth_set(&dev_ctx, ISM330DLC_XL_HP_ODR_DIV_100);
	    /* Gyroscope - filtering chain */
	    ism330dlc_gy_band_pass_set(dev_ctx, ISM330DLC_HP_260mHz_LP1_STRONG);
 8003612:	21a8      	movs	r1, #168	; 0xa8
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7ff fefa 	bl	800340e <ism330dlc_gy_band_pass_set>
	    HAL_UART_Transmit(Guart,"LISM330DLC Setup Ends\n\r", 25, HAL_MAX_DELAY);
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <MRT_ISM330DLC_Setup+0xd4>)
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	f04f 33ff 	mov.w	r3, #4294967295
 8003622:	2219      	movs	r2, #25
 8003624:	490b      	ldr	r1, [pc, #44]	; (8003654 <MRT_ISM330DLC_Setup+0xf4>)
 8003626:	f005 fdf8 	bl	800921a <HAL_UART_Transmit>
	}
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	200052d0 	.word	0x200052d0
 8003638:	08015bdc 	.word	0x08015bdc
 800363c:	080034eb 	.word	0x080034eb
 8003640:	08003525 	.word	0x08003525
 8003644:	200003ae 	.word	0x200003ae
 8003648:	08015bf8 	.word	0x08015bf8
 800364c:	08015c10 	.word	0x08015c10
 8003650:	200003af 	.word	0x200003af
 8003654:	08015c18 	.word	0x08015c18

08003658 <MRT_ISM330DLC_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_ISM330DLC_getAcceleration(int16_t data_raw_acceleration[3],float acceleration_mg[3]){
 8003658:	b590      	push	{r4, r7, lr}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
		ism330dlc_reg_t reg;
		ism330dlc_status_reg_get(&dev_ctx, &reg.status_reg);
 8003662:	f107 030c 	add.w	r3, r7, #12
 8003666:	4619      	mov	r1, r3
 8003668:	481d      	ldr	r0, [pc, #116]	; (80036e0 <MRT_ISM330DLC_getAcceleration+0x88>)
 800366a:	f7ff fd59 	bl	8003120 <ism330dlc_status_reg_get>

		if (reg.status_reg.gda) {
 800366e:	7b3b      	ldrb	r3, [r7, #12]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d02e      	beq.n	80036d8 <MRT_ISM330DLC_getAcceleration+0x80>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800367a:	2206      	movs	r2, #6
 800367c:	2100      	movs	r1, #0
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f00d f9f6 	bl	8010a70 <memset>
        ism330dlc_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4816      	ldr	r0, [pc, #88]	; (80036e0 <MRT_ISM330DLC_getAcceleration+0x88>)
 8003688:	f7ff fdc9 	bl	800321e <ism330dlc_acceleration_raw_get>
        acceleration_mg[0] = ism330dlc_from_fs2g_to_mg(
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fc3a 	bl	8002f0c <ism330dlc_from_fs2g_to_mg>
 8003698:	eef0 7a40 	vmov.f32	s15, s0
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = ism330dlc_from_fs2g_to_mg(
                               data_raw_acceleration[1]);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3302      	adds	r3, #2
        acceleration_mg[1] = ism330dlc_from_fs2g_to_mg(
 80036a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	1d1c      	adds	r4, r3, #4
 80036ae:	4610      	mov	r0, r2
 80036b0:	f7ff fc2c 	bl	8002f0c <ism330dlc_from_fs2g_to_mg>
 80036b4:	eef0 7a40 	vmov.f32	s15, s0
 80036b8:	edc4 7a00 	vstr	s15, [r4]
        acceleration_mg[2] = ism330dlc_from_fs2g_to_mg(
                               data_raw_acceleration[2]);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3304      	adds	r3, #4
        acceleration_mg[2] = ism330dlc_from_fs2g_to_mg(
 80036c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	f103 0408 	add.w	r4, r3, #8
 80036ca:	4610      	mov	r0, r2
 80036cc:	f7ff fc1e 	bl	8002f0c <ism330dlc_from_fs2g_to_mg>
 80036d0:	eef0 7a40 	vmov.f32	s15, s0
 80036d4:	edc4 7a00 	vstr	s15, [r4]
      }
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd90      	pop	{r4, r7, pc}
 80036e0:	2000505c 	.word	0x2000505c

080036e4 <MRT_ISM330DLC_getTemperature>:


/*
 * Get temperature value
 */
void MRT_ISM330DLC_getTemperature(int16_t data_raw_temperature[1],float temperature_degC[1]){
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
	ism330dlc_reg_t reg; //For some reason, this one has to be in the loop
	ism330dlc_status_reg_get(&dev_ctx, &reg.status_reg);
 80036ee:	f107 030c 	add.w	r3, r7, #12
 80036f2:	4619      	mov	r1, r3
 80036f4:	4810      	ldr	r0, [pc, #64]	; (8003738 <MRT_ISM330DLC_getTemperature+0x54>)
 80036f6:	f7ff fd13 	bl	8003120 <ism330dlc_status_reg_get>
	if (reg.status_reg.tda) {
 80036fa:	7b3b      	ldrb	r3, [r7, #12]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d013      	beq.n	800372e <MRT_ISM330DLC_getTemperature+0x4a>
		//Read temperature data
		memset(data_raw_temperature, 0x00, sizeof(int16_t));
 8003706:	2202      	movs	r2, #2
 8003708:	2100      	movs	r1, #0
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f00d f9b0 	bl	8010a70 <memset>
		ism330dlc_temperature_raw_get(&dev_ctx, data_raw_temperature);
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4809      	ldr	r0, [pc, #36]	; (8003738 <MRT_ISM330DLC_getTemperature+0x54>)
 8003714:	f7ff fd15 	bl	8003142 <ism330dlc_temperature_raw_get>
		temperature_degC[0] = ism330dlc_from_lsb_to_celsius(data_raw_temperature[0]);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fc24 	bl	8002f6c <ism330dlc_from_lsb_to_celsius>
 8003724:	eef0 7a40 	vmov.f32	s15, s0
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	2000505c 	.word	0x2000505c

0800373c <MRT_ISM330DLC_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_ISM330DLC_getAngularRate(int16_t data_raw_angular_rate[3],float angular_rate_mdps[3]){
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
		ism330dlc_reg_t reg; //For some reason, this one has to be in the loop
		ism330dlc_status_reg_get(&dev_ctx, &reg.status_reg);
 8003746:	f107 030c 	add.w	r3, r7, #12
 800374a:	4619      	mov	r1, r3
 800374c:	481d      	ldr	r0, [pc, #116]	; (80037c4 <MRT_ISM330DLC_getAngularRate+0x88>)
 800374e:	f7ff fce7 	bl	8003120 <ism330dlc_status_reg_get>

		if (reg.status_reg.xlda) {
 8003752:	7b3b      	ldrb	r3, [r7, #12]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d02e      	beq.n	80037bc <MRT_ISM330DLC_getAngularRate+0x80>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800375e:	2206      	movs	r2, #6
 8003760:	2100      	movs	r1, #0
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f00d f984 	bl	8010a70 <memset>
		ism330dlc_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4816      	ldr	r0, [pc, #88]	; (80037c4 <MRT_ISM330DLC_getAngularRate+0x88>)
 800376c:	f7ff fd0c 	bl	8003188 <ism330dlc_angular_rate_raw_get>
		angular_rate_mdps[0] =
				ism330dlc_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fbe0 	bl	8002f3c <ism330dlc_from_fs2000dps_to_mdps>
 800377c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				ism330dlc_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3302      	adds	r3, #2
 800378a:	f9b3 2000 	ldrsh.w	r2, [r3]
		angular_rate_mdps[1] =
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	1d1c      	adds	r4, r3, #4
				ism330dlc_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8003792:	4610      	mov	r0, r2
 8003794:	f7ff fbd2 	bl	8002f3c <ism330dlc_from_fs2000dps_to_mdps>
 8003798:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 800379c:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				ism330dlc_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3304      	adds	r3, #4
 80037a4:	f9b3 2000 	ldrsh.w	r2, [r3]
		angular_rate_mdps[2] =
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f103 0408 	add.w	r4, r3, #8
				ism330dlc_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80037ae:	4610      	mov	r0, r2
 80037b0:	f7ff fbc4 	bl	8002f3c <ism330dlc_from_fs2000dps_to_mdps>
 80037b4:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 80037b8:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd90      	pop	{r4, r7, pc}
 80037c4:	2000505c 	.word	0x2000505c

080037c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
  while (size--) {
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	1e5a      	subs	r2, r3, #1
 80037dc:	607a      	str	r2, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00e      	beq.n	800380a <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	1c59      	adds	r1, r3, #1
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	4619      	mov	r1, r3
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	4790      	blx	r2
 8003800:	4602      	mov	r2, r0
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	4413      	add	r3, r2
 8003806:	617b      	str	r3, [r7, #20]
  while (size--) {
 8003808:	e7e6      	b.n	80037d8 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 800380a:	697b      	ldr	r3, [r7, #20]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	4a06      	ldr	r2, [pc, #24]	; (8003838 <_ZN5PrintC1Ev+0x24>)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	605a      	str	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	08015e94 	.word	0x08015e94

0800383c <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff ffe4 	bl	8003814 <_ZN5PrintC1Ev>
 800384c:	4a05      	ldr	r2, [pc, #20]	; (8003864 <_ZN6StreamC1Ev+0x28>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	08015ec4 	.word	0x08015ec4

08003868 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff ffe1 	bl	800383c <_ZN6StreamC1Ev>
 800387a:	4a16      	ldr	r2, [pc, #88]	; (80038d4 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3390      	adds	r3, #144	; 0x90
 800388a:	2220      	movs	r2, #32
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f00d f8ee 	bl	8010a70 <memset>
  rxBufferIndex = 0;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	08015ea4 	.word	0x08015ea4

080038d8 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d01d      	beq.n	800392a <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80038f4:	2b1f      	cmp	r3, #31
 80038f6:	d901      	bls.n	80038fc <_ZN7TwoWire5writeEh+0x24>
      return 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e028      	b.n	800394e <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003902:	4619      	mov	r1, r3
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	440b      	add	r3, r1
 800390a:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003912:	3301      	adds	r3, #1
 8003914:	b2da      	uxtb	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003928:	e010      	b.n	800394c <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f984 	bl	8003c38 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8003930:	1cfb      	adds	r3, r7, #3
 8003932:	2201      	movs	r2, #1
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f8b7 	bl	8003aaa <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f949 	bl	8003bd4 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	333c      	adds	r3, #60	; 0x3c
 8003946:	4618      	mov	r0, r3
 8003948:	f001 fe16 	bl	8005578 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 800394c:	2301      	movs	r3, #1
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	429a      	cmp	r2, r3
 8003976:	d21e      	bcs.n	80039b6 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	440a      	add	r2, r1
 8003984:	7812      	ldrb	r2, [r2, #0]
 8003986:	4611      	mov	r1, r2
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	3301      	adds	r3, #1
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	e7ed      	b.n	8003970 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f94f 	bl	8003c38 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	461a      	mov	r2, r3
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f882 	bl	8003aaa <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f914 	bl	8003bd4 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	333c      	adds	r3, #60	; 0x3c
 80039b0:	4618      	mov	r0, r3
 80039b2:	f001 fde1 	bl	8005578 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 80039b6:	687b      	ldr	r3, [r7, #4]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	1ad3      	subs	r3, r2, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  int value = -1;
 80039f0:	f04f 33ff 	mov.w	r3, #4294967295
 80039f4:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	429a      	cmp	r2, r3
 8003a08:	bf34      	ite	cc
 8003a0a:	2301      	movcc	r3, #1
 8003a0c:	2300      	movcs	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d012      	beq.n	8003a3a <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4413      	add	r3, r2
 8003a22:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003a26:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  int value = -1;
 8003a50:	f04f 33ff 	mov.w	r3, #4294967295
 8003a54:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	429a      	cmp	r2, r3
 8003a68:	bf34      	ite	cc
 8003a6a:	2301      	movcc	r3, #1
 8003a6c:	2300      	movcs	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d009      	beq.n	8003a88 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003a86:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8003a88:	68fb      	ldr	r3, [r7, #12]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <_ZN7TwoWire15i2c_slave_writeEPKci>:

    return 1;
}

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b089      	sub	sp, #36	; 0x24
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	dd41      	ble.n	8003b4a <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8003ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aca:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad6:	2b80      	cmp	r3, #128	; 0x80
 8003ad8:	bf14      	ite	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	2300      	moveq	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ed      	bne.n	8003acc <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8003af0:	f04f 33ff 	mov.w	r3, #4294967295
 8003af4:	e068      	b.n	8003bc8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	60ba      	str	r2, [r7, #8]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	611a      	str	r2, [r3, #16]
        length--;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	607b      	str	r3, [r7, #4]
        size++;
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d104      	bne.n	8003b28 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0c8      	beq.n	8003ac0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	60ba      	str	r2, [r7, #8]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	611a      	str	r2, [r3, #16]
            length--;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	607b      	str	r3, [r7, #4]
            size++;
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	3301      	adds	r3, #1
 8003b46:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8003b48:	e7ba      	b.n	8003ac0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8003b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b4e:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5e:	bf14      	ite	ne
 8003b60:	2301      	movne	r3, #1
 8003b62:	2300      	moveq	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1ec      	bne.n	8003b50 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8003b76:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7a:	e025      	b.n	8003bc8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b84:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8003b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b8a:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1ed      	bne.n	8003b8c <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8003bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb4:	e008      	b.n	8003bc8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8003bc6:	69bb      	ldr	r3, [r7, #24]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3724      	adds	r7, #36	; 0x24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <_ZN7TwoWire15enableInterruptEv+0x58>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d106      	bne.n	8003bf4 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003be6:	2049      	movs	r0, #73	; 0x49
 8003be8:	f000 fd52 	bl	8004690 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003bec:	2048      	movs	r0, #72	; 0x48
 8003bee:	f000 fd4f 	bl	8004690 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8003bf2:	e016      	b.n	8003c22 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	4a0d      	ldr	r2, [pc, #52]	; (8003c30 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d106      	bne.n	8003c0c <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003bfe:	2022      	movs	r0, #34	; 0x22
 8003c00:	f000 fd46 	bl	8004690 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003c04:	2021      	movs	r0, #33	; 0x21
 8003c06:	f000 fd43 	bl	8004690 <HAL_NVIC_EnableIRQ>
}
 8003c0a:	e00a      	b.n	8003c22 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d105      	bne.n	8003c22 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003c16:	2020      	movs	r0, #32
 8003c18:	f000 fd3a 	bl	8004690 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003c1c:	201f      	movs	r0, #31
 8003c1e:	f000 fd37 	bl	8004690 <HAL_NVIC_EnableIRQ>
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40005c00 	.word	0x40005c00
 8003c30:	40005800 	.word	0x40005800
 8003c34:	40005400 	.word	0x40005400

08003c38 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c44:	4a12      	ldr	r2, [pc, #72]	; (8003c90 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d106      	bne.n	8003c58 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8003c4a:	2049      	movs	r0, #73	; 0x49
 8003c4c:	f000 fd2e 	bl	80046ac <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8003c50:	2048      	movs	r0, #72	; 0x48
 8003c52:	f000 fd2b 	bl	80046ac <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8003c56:	e016      	b.n	8003c86 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	4a0d      	ldr	r2, [pc, #52]	; (8003c94 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d106      	bne.n	8003c70 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8003c62:	2022      	movs	r0, #34	; 0x22
 8003c64:	f000 fd22 	bl	80046ac <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8003c68:	2021      	movs	r0, #33	; 0x21
 8003c6a:	f000 fd1f 	bl	80046ac <HAL_NVIC_DisableIRQ>
}
 8003c6e:	e00a      	b.n	8003c86 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	4a08      	ldr	r2, [pc, #32]	; (8003c98 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d105      	bne.n	8003c86 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8003c7a:	2020      	movs	r0, #32
 8003c7c:	f000 fd16 	bl	80046ac <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8003c80:	201f      	movs	r0, #31
 8003c82:	f000 fd13 	bl	80046ac <HAL_NVIC_DisableIRQ>
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40005c00 	.word	0x40005c00
 8003c94:	40005800 	.word	0x40005800
 8003c98:	40005400 	.word	0x40005400

08003c9c <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d110      	bne.n	8003cce <_Z41__static_initialization_and_destruction_0ii+0x32>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d10b      	bne.n	8003cce <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8003cb6:	4908      	ldr	r1, [pc, #32]	; (8003cd8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003cb8:	4808      	ldr	r0, [pc, #32]	; (8003cdc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003cba:	f7ff fdd5 	bl	8003868 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8003cbe:	4908      	ldr	r1, [pc, #32]	; (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003cc0:	4808      	ldr	r0, [pc, #32]	; (8003ce4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003cc2:	f7ff fdd1 	bl	8003868 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8003cc6:	4908      	ldr	r1, [pc, #32]	; (8003ce8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003cc8:	4808      	ldr	r0, [pc, #32]	; (8003cec <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003cca:	f7ff fdcd 	bl	8003868 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40005400 	.word	0x40005400
 8003cdc:	200003b0 	.word	0x200003b0
 8003ce0:	40005800 	.word	0x40005800
 8003ce4:	20000468 	.word	0x20000468
 8003ce8:	40005c00 	.word	0x40005c00
 8003cec:	20000520 	.word	0x20000520

08003cf0 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f7ff ffcf 	bl	8003c9c <_Z41__static_initialization_and_destruction_0ii>
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef sDate = {0};
RTC_AlarmTypeDef sAlarm = {0};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 8003d08:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	4905      	ldr	r1, [pc, #20]	; (8003d24 <HAL_RTC_AlarmAEventCallback+0x24>)
 8003d10:	4805      	ldr	r0, [pc, #20]	; (8003d28 <HAL_RTC_AlarmAEventCallback+0x28>)
 8003d12:	f005 fa82 	bl	800921a <HAL_UART_Transmit>
	flagA = 1;
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RTC_AlarmAEventCallback+0x2c>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	08015c30 	.word	0x08015c30
 8003d28:	200054cc 	.word	0x200054cc
 8003d2c:	200005d8 	.word	0x200005d8

08003d30 <MRT_SetupRTOS>:
}




bool MRT_SetupRTOS(UART_HandleTypeDef uart,uint8_t sleepT){
 8003d30:	b084      	sub	sp, #16
 8003d32:	b5b0      	push	{r4, r5, r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	f107 0418 	add.w	r4, r7, #24
 8003d3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295
 8003d44:	2211      	movs	r2, #17
 8003d46:	4911      	ldr	r1, [pc, #68]	; (8003d8c <MRT_SetupRTOS+0x5c>)
 8003d48:	4811      	ldr	r0, [pc, #68]	; (8003d90 <MRT_SetupRTOS+0x60>)
 8003d4a:	f005 fa66 	bl	800921a <HAL_UART_Transmit>
	rtos.huart = uart;
 8003d4e:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <MRT_SetupRTOS+0x60>)
 8003d50:	461d      	mov	r5, r3
 8003d52:	f107 0418 	add.w	r4, r7, #24
 8003d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d66:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	rtos.sleepTime = sleepT;
 8003d6a:	4a09      	ldr	r2, [pc, #36]	; (8003d90 <MRT_SetupRTOS+0x60>)
 8003d6c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8003d70:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
	bool wakingUp = MRT_WUProcedure();
 8003d74:	f000 f80e 	bl	8003d94 <MRT_WUProcedure>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	71fb      	strb	r3, [r7, #7]
	return wakingUp;
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003d88:	b004      	add	sp, #16
 8003d8a:	4770      	bx	lr
 8003d8c:	08015c48 	.word	0x08015c48
 8003d90:	200054cc 	.word	0x200054cc

08003d94 <MRT_WUProcedure>:



bool MRT_WUProcedure(void){
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0

	bool wakingUp = false;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	71fb      	strb	r3, [r7, #7]

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <MRT_WUProcedure+0x5c>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d11b      	bne.n	8003de2 <MRT_WUProcedure+0x4e>
	{
		wakingUp = true;
 8003daa:	2301      	movs	r3, #1
 8003dac:	71fb      	strb	r3, [r7, #7]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8003dae:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <MRT_WUProcedure+0x5c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a0f      	ldr	r2, [pc, #60]	; (8003df0 <MRT_WUProcedure+0x5c>)
 8003db4:	f043 0308 	orr.w	r3, r3, #8
 8003db8:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 8003dba:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <MRT_WUProcedure+0x60>)
 8003dbc:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8003dbe:	6838      	ldr	r0, [r7, #0]
 8003dc0:	f7fc fa16 	bl	80001f0 <strlen>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dcc:	6839      	ldr	r1, [r7, #0]
 8003dce:	480a      	ldr	r0, [pc, #40]	; (8003df8 <MRT_WUProcedure+0x64>)
 8003dd0:	f005 fa23 	bl	800921a <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8003dd4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003dd8:	f003 f95e 	bl	8007098 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8003ddc:	4807      	ldr	r0, [pc, #28]	; (8003dfc <MRT_WUProcedure+0x68>)
 8003dde:	f004 fbaf 	bl	8008540 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 8003de2:	f000 f80d 	bl	8003e00 <MRT_ClearFlags>

	return wakingUp;
 8003de6:	79fb      	ldrb	r3, [r7, #7]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40007000 	.word	0x40007000
 8003df4:	08015c5c 	.word	0x08015c5c
 8003df8:	200054cc 	.word	0x200054cc
 8003dfc:	2000526c 	.word	0x2000526c

08003e00 <MRT_ClearFlags>:

void MRT_ClearFlags(void){
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295
 8003e08:	2214      	movs	r2, #20
 8003e0a:	4932      	ldr	r1, [pc, #200]	; (8003ed4 <MRT_ClearFlags+0xd4>)
 8003e0c:	4832      	ldr	r0, [pc, #200]	; (8003ed8 <MRT_ClearFlags+0xd8>)
 8003e0e:	f005 fa04 	bl	800921a <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8003e12:	4b32      	ldr	r3, [pc, #200]	; (8003edc <MRT_ClearFlags+0xdc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	22ca      	movs	r2, #202	; 0xca
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24
 8003e1a:	4b30      	ldr	r3, [pc, #192]	; (8003edc <MRT_ClearFlags+0xdc>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2253      	movs	r2, #83	; 0x53
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8003e22:	e00f      	b.n	8003e44 <MRT_ClearFlags+0x44>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295
 8003e28:	2217      	movs	r2, #23
 8003e2a:	492d      	ldr	r1, [pc, #180]	; (8003ee0 <MRT_ClearFlags+0xe0>)
 8003e2c:	482a      	ldr	r0, [pc, #168]	; (8003ed8 <MRT_ClearFlags+0xd8>)
 8003e2e:	f005 f9f4 	bl	800921a <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003e32:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <MRT_ClearFlags+0xdc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4b28      	ldr	r3, [pc, #160]	; (8003edc <MRT_ClearFlags+0xdc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003e42:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8003e44:	4b25      	ldr	r3, [pc, #148]	; (8003edc <MRT_ClearFlags+0xdc>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1e8      	bne.n	8003e24 <MRT_ClearFlags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8003e52:	4b22      	ldr	r3, [pc, #136]	; (8003edc <MRT_ClearFlags+0xdc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	22ff      	movs	r2, #255	; 0xff
 8003e58:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003e5a:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <MRT_ClearFlags+0xe4>)
 8003e5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e60:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8003e62:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <MRT_ClearFlags+0xdc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	22ca      	movs	r2, #202	; 0xca
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24
 8003e6a:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <MRT_ClearFlags+0xdc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2253      	movs	r2, #83	; 0x53
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8003e72:	e00f      	b.n	8003e94 <MRT_ClearFlags+0x94>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8003e74:	f04f 33ff 	mov.w	r3, #4294967295
 8003e78:	2217      	movs	r2, #23
 8003e7a:	491b      	ldr	r1, [pc, #108]	; (8003ee8 <MRT_ClearFlags+0xe8>)
 8003e7c:	4816      	ldr	r0, [pc, #88]	; (8003ed8 <MRT_ClearFlags+0xd8>)
 8003e7e:	f005 f9cc 	bl	800921a <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8003e82:	4b16      	ldr	r3, [pc, #88]	; (8003edc <MRT_ClearFlags+0xdc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <MRT_ClearFlags+0xdc>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003e92:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8003e94:	4b11      	ldr	r3, [pc, #68]	; (8003edc <MRT_ClearFlags+0xdc>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e8      	bne.n	8003e74 <MRT_ClearFlags+0x74>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <MRT_ClearFlags+0xdc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	22ff      	movs	r2, #255	; 0xff
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003eaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <MRT_ClearFlags+0xe4>)
 8003eac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003eb0:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003eb2:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <MRT_ClearFlags+0xec>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a0d      	ldr	r2, [pc, #52]	; (8003eec <MRT_ClearFlags+0xec>)
 8003eb8:	f043 0304 	orr.w	r3, r3, #4
 8003ebc:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8003ebe:	4b07      	ldr	r3, [pc, #28]	; (8003edc <MRT_ClearFlags+0xdc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <MRT_ClearFlags+0xdc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003ece:	60da      	str	r2, [r3, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	08015c7c 	.word	0x08015c7c
 8003ed8:	200054cc 	.word	0x200054cc
 8003edc:	2000526c 	.word	0x2000526c
 8003ee0:	08015c94 	.word	0x08015c94
 8003ee4:	40013c00 	.word	0x40013c00
 8003ee8:	08015cac 	.word	0x08015cac
 8003eec:	40007000 	.word	0x40007000

08003ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <HAL_Init+0x40>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0d      	ldr	r2, [pc, #52]	; (8003f30 <HAL_Init+0x40>)
 8003efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f00:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <HAL_Init+0x40>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <HAL_Init+0x40>)
 8003f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <HAL_Init+0x40>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a07      	ldr	r2, [pc, #28]	; (8003f30 <HAL_Init+0x40>)
 8003f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f18:	2003      	movs	r0, #3
 8003f1a:	f000 fb92 	bl	8004642 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f1e:	2000      	movs	r0, #0
 8003f20:	f7fe fb20 	bl	8002564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f24:	f7fd fffe 	bl	8001f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023c00 	.word	0x40023c00

08003f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_IncTick+0x20>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_IncTick+0x24>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4413      	add	r3, r2
 8003f44:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <HAL_IncTick+0x24>)
 8003f46:	6013      	str	r3, [r2, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000008 	.word	0x20000008
 8003f58:	20005510 	.word	0x20005510

08003f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f60:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <HAL_GetTick+0x14>)
 8003f62:	681b      	ldr	r3, [r3, #0]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20005510 	.word	0x20005510

08003f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f7c:	f7ff ffee 	bl	8003f5c <HAL_GetTick>
 8003f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d005      	beq.n	8003f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_Delay+0x44>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f9a:	bf00      	nop
 8003f9c:	f7ff ffde 	bl	8003f5c <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d8f7      	bhi.n	8003f9c <HAL_Delay+0x28>
  {
  }
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000008 	.word	0x20000008

08003fbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e033      	b.n	800403a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd ffca 	bl	8001f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d118      	bne.n	800402c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004002:	f023 0302 	bic.w	r3, r3, #2
 8004006:	f043 0202 	orr.w	r2, r3, #2
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f94a 	bl	80042a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	f043 0201 	orr.w	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
 800402a:	e001      	b.n	8004030 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004038:	7bfb      	ldrb	r3, [r7, #15]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x1c>
 800405c:	2302      	movs	r3, #2
 800405e:	e113      	b.n	8004288 <HAL_ADC_ConfigChannel+0x244>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b09      	cmp	r3, #9
 800406e:	d925      	bls.n	80040bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68d9      	ldr	r1, [r3, #12]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	4613      	mov	r3, r2
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	4413      	add	r3, r2
 8004084:	3b1e      	subs	r3, #30
 8004086:	2207      	movs	r2, #7
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43da      	mvns	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	400a      	ands	r2, r1
 8004094:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68d9      	ldr	r1, [r3, #12]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	4618      	mov	r0, r3
 80040a8:	4603      	mov	r3, r0
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	4403      	add	r3, r0
 80040ae:	3b1e      	subs	r3, #30
 80040b0:	409a      	lsls	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	e022      	b.n	8004102 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6919      	ldr	r1, [r3, #16]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	4613      	mov	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4413      	add	r3, r2
 80040d0:	2207      	movs	r2, #7
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43da      	mvns	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	400a      	ands	r2, r1
 80040de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6919      	ldr	r1, [r3, #16]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	4618      	mov	r0, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	4403      	add	r3, r0
 80040f8:	409a      	lsls	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b06      	cmp	r3, #6
 8004108:	d824      	bhi.n	8004154 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	3b05      	subs	r3, #5
 800411c:	221f      	movs	r2, #31
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43da      	mvns	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	400a      	ands	r2, r1
 800412a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	b29b      	uxth	r3, r3
 8004138:	4618      	mov	r0, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	3b05      	subs	r3, #5
 8004146:	fa00 f203 	lsl.w	r2, r0, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	635a      	str	r2, [r3, #52]	; 0x34
 8004152:	e04c      	b.n	80041ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b0c      	cmp	r3, #12
 800415a:	d824      	bhi.n	80041a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	3b23      	subs	r3, #35	; 0x23
 800416e:	221f      	movs	r2, #31
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	43da      	mvns	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	400a      	ands	r2, r1
 800417c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	4618      	mov	r0, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	3b23      	subs	r3, #35	; 0x23
 8004198:	fa00 f203 	lsl.w	r2, r0, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
 80041a4:	e023      	b.n	80041ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	3b41      	subs	r3, #65	; 0x41
 80041b8:	221f      	movs	r2, #31
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43da      	mvns	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	400a      	ands	r2, r1
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	4618      	mov	r0, r3
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	3b41      	subs	r3, #65	; 0x41
 80041e2:	fa00 f203 	lsl.w	r2, r0, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041ee:	4b29      	ldr	r3, [pc, #164]	; (8004294 <HAL_ADC_ConfigChannel+0x250>)
 80041f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a28      	ldr	r2, [pc, #160]	; (8004298 <HAL_ADC_ConfigChannel+0x254>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d10f      	bne.n	800421c <HAL_ADC_ConfigChannel+0x1d8>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b12      	cmp	r3, #18
 8004202:	d10b      	bne.n	800421c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1d      	ldr	r2, [pc, #116]	; (8004298 <HAL_ADC_ConfigChannel+0x254>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d12b      	bne.n	800427e <HAL_ADC_ConfigChannel+0x23a>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1c      	ldr	r2, [pc, #112]	; (800429c <HAL_ADC_ConfigChannel+0x258>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d003      	beq.n	8004238 <HAL_ADC_ConfigChannel+0x1f4>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b11      	cmp	r3, #17
 8004236:	d122      	bne.n	800427e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a11      	ldr	r2, [pc, #68]	; (800429c <HAL_ADC_ConfigChannel+0x258>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d111      	bne.n	800427e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_ADC_ConfigChannel+0x25c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a11      	ldr	r2, [pc, #68]	; (80042a4 <HAL_ADC_ConfigChannel+0x260>)
 8004260:	fba2 2303 	umull	r2, r3, r2, r3
 8004264:	0c9a      	lsrs	r2, r3, #18
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004270:	e002      	b.n	8004278 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	3b01      	subs	r3, #1
 8004276:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f9      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	40012300 	.word	0x40012300
 8004298:	40012000 	.word	0x40012000
 800429c:	10000012 	.word	0x10000012
 80042a0:	20000000 	.word	0x20000000
 80042a4:	431bde83 	.word	0x431bde83

080042a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042b0:	4b79      	ldr	r3, [pc, #484]	; (8004498 <ADC_Init+0x1f0>)
 80042b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6859      	ldr	r1, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	021a      	lsls	r2, r3, #8
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004300:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6859      	ldr	r1, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004322:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6899      	ldr	r1, [r3, #8]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433a:	4a58      	ldr	r2, [pc, #352]	; (800449c <ADC_Init+0x1f4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d022      	beq.n	8004386 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800434e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6899      	ldr	r1, [r3, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004370:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6899      	ldr	r1, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	609a      	str	r2, [r3, #8]
 8004384:	e00f      	b.n	80043a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004394:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0202 	bic.w	r2, r2, #2
 80043b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6899      	ldr	r1, [r3, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	7e1b      	ldrb	r3, [r3, #24]
 80043c0:	005a      	lsls	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01b      	beq.n	800440c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	3b01      	subs	r3, #1
 8004400:	035a      	lsls	r2, r3, #13
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
 800440a:	e007      	b.n	800441c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800441a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	3b01      	subs	r3, #1
 8004438:	051a      	lsls	r2, r3, #20
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004450:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6899      	ldr	r1, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800445e:	025a      	lsls	r2, r3, #9
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004476:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6899      	ldr	r1, [r3, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	029a      	lsls	r2, r3, #10
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	609a      	str	r2, [r3, #8]
}
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	40012300 	.word	0x40012300
 800449c:	0f000001 	.word	0x0f000001

080044a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b0:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <__NVIC_SetPriorityGrouping+0x44>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044bc:	4013      	ands	r3, r2
 80044be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044d2:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <__NVIC_SetPriorityGrouping+0x44>)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	60d3      	str	r3, [r2, #12]
}
 80044d8:	bf00      	nop
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044ec:	4b04      	ldr	r3, [pc, #16]	; (8004500 <__NVIC_GetPriorityGrouping+0x18>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	0a1b      	lsrs	r3, r3, #8
 80044f2:	f003 0307 	and.w	r3, r3, #7
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	2b00      	cmp	r3, #0
 8004514:	db0b      	blt.n	800452e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	f003 021f 	and.w	r2, r3, #31
 800451c:	4907      	ldr	r1, [pc, #28]	; (800453c <__NVIC_EnableIRQ+0x38>)
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	2001      	movs	r0, #1
 8004526:	fa00 f202 	lsl.w	r2, r0, r2
 800452a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	e000e100 	.word	0xe000e100

08004540 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800454a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454e:	2b00      	cmp	r3, #0
 8004550:	db12      	blt.n	8004578 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	f003 021f 	and.w	r2, r3, #31
 8004558:	490a      	ldr	r1, [pc, #40]	; (8004584 <__NVIC_DisableIRQ+0x44>)
 800455a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	2001      	movs	r0, #1
 8004562:	fa00 f202 	lsl.w	r2, r0, r2
 8004566:	3320      	adds	r3, #32
 8004568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800456c:	f3bf 8f4f 	dsb	sy
}
 8004570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004572:	f3bf 8f6f 	isb	sy
}
 8004576:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000e100 	.word	0xe000e100

08004588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	6039      	str	r1, [r7, #0]
 8004592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004598:	2b00      	cmp	r3, #0
 800459a:	db0a      	blt.n	80045b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	490c      	ldr	r1, [pc, #48]	; (80045d4 <__NVIC_SetPriority+0x4c>)
 80045a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a6:	0112      	lsls	r2, r2, #4
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	440b      	add	r3, r1
 80045ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045b0:	e00a      	b.n	80045c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	4908      	ldr	r1, [pc, #32]	; (80045d8 <__NVIC_SetPriority+0x50>)
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	3b04      	subs	r3, #4
 80045c0:	0112      	lsls	r2, r2, #4
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	440b      	add	r3, r1
 80045c6:	761a      	strb	r2, [r3, #24]
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	e000e100 	.word	0xe000e100
 80045d8:	e000ed00 	.word	0xe000ed00

080045dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045dc:	b480      	push	{r7}
 80045de:	b089      	sub	sp, #36	; 0x24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f1c3 0307 	rsb	r3, r3, #7
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	bf28      	it	cs
 80045fa:	2304      	movcs	r3, #4
 80045fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	3304      	adds	r3, #4
 8004602:	2b06      	cmp	r3, #6
 8004604:	d902      	bls.n	800460c <NVIC_EncodePriority+0x30>
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3b03      	subs	r3, #3
 800460a:	e000      	b.n	800460e <NVIC_EncodePriority+0x32>
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004610:	f04f 32ff 	mov.w	r2, #4294967295
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43da      	mvns	r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	401a      	ands	r2, r3
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004624:	f04f 31ff 	mov.w	r1, #4294967295
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	fa01 f303 	lsl.w	r3, r1, r3
 800462e:	43d9      	mvns	r1, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004634:	4313      	orrs	r3, r2
         );
}
 8004636:	4618      	mov	r0, r3
 8004638:	3724      	adds	r7, #36	; 0x24
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff ff28 	bl	80044a0 <__NVIC_SetPriorityGrouping>
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800466a:	f7ff ff3d 	bl	80044e8 <__NVIC_GetPriorityGrouping>
 800466e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	6978      	ldr	r0, [r7, #20]
 8004676:	f7ff ffb1 	bl	80045dc <NVIC_EncodePriority>
 800467a:	4602      	mov	r2, r0
 800467c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004680:	4611      	mov	r1, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ff80 	bl	8004588 <__NVIC_SetPriority>
}
 8004688:	bf00      	nop
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800469a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff ff30 	bl	8004504 <__NVIC_EnableIRQ>
}
 80046a4:	bf00      	nop
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff ff40 	bl	8004540 <__NVIC_DisableIRQ>
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b089      	sub	sp, #36	; 0x24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	e177      	b.n	80049d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046e4:	2201      	movs	r2, #1
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4013      	ands	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	f040 8166 	bne.w	80049ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d00b      	beq.n	8004722 <HAL_GPIO_Init+0x5a>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d007      	beq.n	8004722 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004716:	2b11      	cmp	r3, #17
 8004718:	d003      	beq.n	8004722 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b12      	cmp	r3, #18
 8004720:	d130      	bne.n	8004784 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	2203      	movs	r2, #3
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43db      	mvns	r3, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004758:	2201      	movs	r2, #1
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	f003 0201 	and.w	r2, r3, #1
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	2203      	movs	r2, #3
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d003      	beq.n	80047c4 <HAL_GPIO_Init+0xfc>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b12      	cmp	r3, #18
 80047c2:	d123      	bne.n	800480c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	08da      	lsrs	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3208      	adds	r2, #8
 80047cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	220f      	movs	r2, #15
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	08da      	lsrs	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3208      	adds	r2, #8
 8004806:	69b9      	ldr	r1, [r7, #24]
 8004808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	2203      	movs	r2, #3
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4013      	ands	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 0203 	and.w	r2, r3, #3
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4313      	orrs	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80c0 	beq.w	80049ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	4b66      	ldr	r3, [pc, #408]	; (80049ec <HAL_GPIO_Init+0x324>)
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	4a65      	ldr	r2, [pc, #404]	; (80049ec <HAL_GPIO_Init+0x324>)
 8004858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800485c:	6453      	str	r3, [r2, #68]	; 0x44
 800485e:	4b63      	ldr	r3, [pc, #396]	; (80049ec <HAL_GPIO_Init+0x324>)
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800486a:	4a61      	ldr	r2, [pc, #388]	; (80049f0 <HAL_GPIO_Init+0x328>)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	089b      	lsrs	r3, r3, #2
 8004870:	3302      	adds	r3, #2
 8004872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	220f      	movs	r2, #15
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a58      	ldr	r2, [pc, #352]	; (80049f4 <HAL_GPIO_Init+0x32c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d037      	beq.n	8004906 <HAL_GPIO_Init+0x23e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a57      	ldr	r2, [pc, #348]	; (80049f8 <HAL_GPIO_Init+0x330>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d031      	beq.n	8004902 <HAL_GPIO_Init+0x23a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a56      	ldr	r2, [pc, #344]	; (80049fc <HAL_GPIO_Init+0x334>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d02b      	beq.n	80048fe <HAL_GPIO_Init+0x236>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a55      	ldr	r2, [pc, #340]	; (8004a00 <HAL_GPIO_Init+0x338>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d025      	beq.n	80048fa <HAL_GPIO_Init+0x232>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a54      	ldr	r2, [pc, #336]	; (8004a04 <HAL_GPIO_Init+0x33c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d01f      	beq.n	80048f6 <HAL_GPIO_Init+0x22e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a53      	ldr	r2, [pc, #332]	; (8004a08 <HAL_GPIO_Init+0x340>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d019      	beq.n	80048f2 <HAL_GPIO_Init+0x22a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a52      	ldr	r2, [pc, #328]	; (8004a0c <HAL_GPIO_Init+0x344>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <HAL_GPIO_Init+0x226>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a51      	ldr	r2, [pc, #324]	; (8004a10 <HAL_GPIO_Init+0x348>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00d      	beq.n	80048ea <HAL_GPIO_Init+0x222>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a50      	ldr	r2, [pc, #320]	; (8004a14 <HAL_GPIO_Init+0x34c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d007      	beq.n	80048e6 <HAL_GPIO_Init+0x21e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a4f      	ldr	r2, [pc, #316]	; (8004a18 <HAL_GPIO_Init+0x350>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d101      	bne.n	80048e2 <HAL_GPIO_Init+0x21a>
 80048de:	2309      	movs	r3, #9
 80048e0:	e012      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048e2:	230a      	movs	r3, #10
 80048e4:	e010      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048e6:	2308      	movs	r3, #8
 80048e8:	e00e      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048ea:	2307      	movs	r3, #7
 80048ec:	e00c      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048ee:	2306      	movs	r3, #6
 80048f0:	e00a      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048f2:	2305      	movs	r3, #5
 80048f4:	e008      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048f6:	2304      	movs	r3, #4
 80048f8:	e006      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048fa:	2303      	movs	r3, #3
 80048fc:	e004      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048fe:	2302      	movs	r3, #2
 8004900:	e002      	b.n	8004908 <HAL_GPIO_Init+0x240>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <HAL_GPIO_Init+0x240>
 8004906:	2300      	movs	r3, #0
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	f002 0203 	and.w	r2, r2, #3
 800490e:	0092      	lsls	r2, r2, #2
 8004910:	4093      	lsls	r3, r2
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004918:	4935      	ldr	r1, [pc, #212]	; (80049f0 <HAL_GPIO_Init+0x328>)
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	089b      	lsrs	r3, r3, #2
 800491e:	3302      	adds	r3, #2
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004926:	4b3d      	ldr	r3, [pc, #244]	; (8004a1c <HAL_GPIO_Init+0x354>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	43db      	mvns	r3, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4013      	ands	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800494a:	4a34      	ldr	r2, [pc, #208]	; (8004a1c <HAL_GPIO_Init+0x354>)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004950:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <HAL_GPIO_Init+0x354>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	43db      	mvns	r3, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004974:	4a29      	ldr	r2, [pc, #164]	; (8004a1c <HAL_GPIO_Init+0x354>)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800497a:	4b28      	ldr	r3, [pc, #160]	; (8004a1c <HAL_GPIO_Init+0x354>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	43db      	mvns	r3, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4013      	ands	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800499e:	4a1f      	ldr	r2, [pc, #124]	; (8004a1c <HAL_GPIO_Init+0x354>)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049a4:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <HAL_GPIO_Init+0x354>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	4013      	ands	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049c8:	4a14      	ldr	r2, [pc, #80]	; (8004a1c <HAL_GPIO_Init+0x354>)
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3301      	adds	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b0f      	cmp	r3, #15
 80049d8:	f67f ae84 	bls.w	80046e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	3724      	adds	r7, #36	; 0x24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40013800 	.word	0x40013800
 80049f4:	40020000 	.word	0x40020000
 80049f8:	40020400 	.word	0x40020400
 80049fc:	40020800 	.word	0x40020800
 8004a00:	40020c00 	.word	0x40020c00
 8004a04:	40021000 	.word	0x40021000
 8004a08:	40021400 	.word	0x40021400
 8004a0c:	40021800 	.word	0x40021800
 8004a10:	40021c00 	.word	0x40021c00
 8004a14:	40022000 	.word	0x40022000
 8004a18:	40022400 	.word	0x40022400
 8004a1c:	40013c00 	.word	0x40013c00

08004a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	807b      	strh	r3, [r7, #2]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a30:	787b      	ldrb	r3, [r7, #1]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a36:	887a      	ldrh	r2, [r7, #2]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a3c:	e003      	b.n	8004a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a3e:	887b      	ldrh	r3, [r7, #2]
 8004a40:	041a      	lsls	r2, r3, #16
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	619a      	str	r2, [r3, #24]
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
	...

08004a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e12b      	b.n	8004cbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fd fabe 	bl	8001ffc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2224      	movs	r2, #36	; 0x24
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0201 	bic.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ab8:	f002 ff44 	bl	8007944 <HAL_RCC_GetPCLK1Freq>
 8004abc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	4a81      	ldr	r2, [pc, #516]	; (8004cc8 <HAL_I2C_Init+0x274>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d807      	bhi.n	8004ad8 <HAL_I2C_Init+0x84>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4a80      	ldr	r2, [pc, #512]	; (8004ccc <HAL_I2C_Init+0x278>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	bf94      	ite	ls
 8004ad0:	2301      	movls	r3, #1
 8004ad2:	2300      	movhi	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	e006      	b.n	8004ae6 <HAL_I2C_Init+0x92>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4a7d      	ldr	r2, [pc, #500]	; (8004cd0 <HAL_I2C_Init+0x27c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	bf94      	ite	ls
 8004ae0:	2301      	movls	r3, #1
 8004ae2:	2300      	movhi	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e0e7      	b.n	8004cbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4a78      	ldr	r2, [pc, #480]	; (8004cd4 <HAL_I2C_Init+0x280>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	0c9b      	lsrs	r3, r3, #18
 8004af8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4a6a      	ldr	r2, [pc, #424]	; (8004cc8 <HAL_I2C_Init+0x274>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d802      	bhi.n	8004b28 <HAL_I2C_Init+0xd4>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	3301      	adds	r3, #1
 8004b26:	e009      	b.n	8004b3c <HAL_I2C_Init+0xe8>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b2e:	fb02 f303 	mul.w	r3, r2, r3
 8004b32:	4a69      	ldr	r2, [pc, #420]	; (8004cd8 <HAL_I2C_Init+0x284>)
 8004b34:	fba2 2303 	umull	r2, r3, r2, r3
 8004b38:	099b      	lsrs	r3, r3, #6
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	430b      	orrs	r3, r1
 8004b42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	495c      	ldr	r1, [pc, #368]	; (8004cc8 <HAL_I2C_Init+0x274>)
 8004b58:	428b      	cmp	r3, r1
 8004b5a:	d819      	bhi.n	8004b90 <HAL_I2C_Init+0x13c>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1e59      	subs	r1, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b6a:	1c59      	adds	r1, r3, #1
 8004b6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b70:	400b      	ands	r3, r1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_I2C_Init+0x138>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1e59      	subs	r1, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b84:	3301      	adds	r3, #1
 8004b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b8a:	e051      	b.n	8004c30 <HAL_I2C_Init+0x1dc>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	e04f      	b.n	8004c30 <HAL_I2C_Init+0x1dc>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d111      	bne.n	8004bbc <HAL_I2C_Init+0x168>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1e58      	subs	r0, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6859      	ldr	r1, [r3, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	440b      	add	r3, r1
 8004ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004baa:	3301      	adds	r3, #1
 8004bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2301      	moveq	r3, #1
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	e012      	b.n	8004be2 <HAL_I2C_Init+0x18e>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1e58      	subs	r0, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6859      	ldr	r1, [r3, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	0099      	lsls	r1, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bf0c      	ite	eq
 8004bdc:	2301      	moveq	r3, #1
 8004bde:	2300      	movne	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_I2C_Init+0x196>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e022      	b.n	8004c30 <HAL_I2C_Init+0x1dc>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10e      	bne.n	8004c10 <HAL_I2C_Init+0x1bc>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1e58      	subs	r0, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6859      	ldr	r1, [r3, #4]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	440b      	add	r3, r1
 8004c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c04:	3301      	adds	r3, #1
 8004c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0e:	e00f      	b.n	8004c30 <HAL_I2C_Init+0x1dc>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	1e58      	subs	r0, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6859      	ldr	r1, [r3, #4]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	0099      	lsls	r1, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c26:	3301      	adds	r3, #1
 8004c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	6809      	ldr	r1, [r1, #0]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69da      	ldr	r2, [r3, #28]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6911      	ldr	r1, [r2, #16]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	68d2      	ldr	r2, [r2, #12]
 8004c6a:	4311      	orrs	r1, r2
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	430b      	orrs	r3, r1
 8004c72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	000186a0 	.word	0x000186a0
 8004ccc:	001e847f 	.word	0x001e847f
 8004cd0:	003d08ff 	.word	0x003d08ff
 8004cd4:	431bde83 	.word	0x431bde83
 8004cd8:	10624dd3 	.word	0x10624dd3

08004cdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4603      	mov	r3, r0
 8004cec:	817b      	strh	r3, [r7, #10]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	813b      	strh	r3, [r7, #8]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cf6:	f7ff f931 	bl	8003f5c <HAL_GetTick>
 8004cfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	f040 80d9 	bne.w	8004ebc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	2319      	movs	r3, #25
 8004d10:	2201      	movs	r2, #1
 8004d12:	496d      	ldr	r1, [pc, #436]	; (8004ec8 <HAL_I2C_Mem_Write+0x1ec>)
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 fde3 	bl	80058e0 <I2C_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d20:	2302      	movs	r3, #2
 8004d22:	e0cc      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_I2C_Mem_Write+0x56>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e0c5      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d007      	beq.n	8004d58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2221      	movs	r2, #33	; 0x21
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2240      	movs	r2, #64	; 0x40
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a3a      	ldr	r2, [r7, #32]
 8004d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a4d      	ldr	r2, [pc, #308]	; (8004ecc <HAL_I2C_Mem_Write+0x1f0>)
 8004d98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d9a:	88f8      	ldrh	r0, [r7, #6]
 8004d9c:	893a      	ldrh	r2, [r7, #8]
 8004d9e:	8979      	ldrh	r1, [r7, #10]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4603      	mov	r3, r0
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 fc1a 	bl	80055e4 <I2C_RequestMemoryWrite>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d052      	beq.n	8004e5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e081      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fe64 	bl	8005a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00d      	beq.n	8004de6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d107      	bne.n	8004de2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e06b      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	781a      	ldrb	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d11b      	bne.n	8004e5c <HAL_I2C_Mem_Write+0x180>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d017      	beq.n	8004e5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	781a      	ldrb	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1aa      	bne.n	8004dba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 fe50 	bl	8005b0e <I2C_WaitOnBTFFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00d      	beq.n	8004e90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d107      	bne.n	8004e8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e016      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e000      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ebc:	2302      	movs	r3, #2
  }
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	00100002 	.word	0x00100002
 8004ecc:	ffff0000 	.word	0xffff0000

08004ed0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08c      	sub	sp, #48	; 0x30
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	4608      	mov	r0, r1
 8004eda:	4611      	mov	r1, r2
 8004edc:	461a      	mov	r2, r3
 8004ede:	4603      	mov	r3, r0
 8004ee0:	817b      	strh	r3, [r7, #10]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	813b      	strh	r3, [r7, #8]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eea:	f7ff f837 	bl	8003f5c <HAL_GetTick>
 8004eee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	f040 8208 	bne.w	800530e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	2319      	movs	r3, #25
 8004f04:	2201      	movs	r2, #1
 8004f06:	497b      	ldr	r1, [pc, #492]	; (80050f4 <HAL_I2C_Mem_Read+0x224>)
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 fce9 	bl	80058e0 <I2C_WaitOnFlagUntilTimeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f14:	2302      	movs	r3, #2
 8004f16:	e1fb      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d101      	bne.n	8004f26 <HAL_I2C_Mem_Read+0x56>
 8004f22:	2302      	movs	r3, #2
 8004f24:	e1f4      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d007      	beq.n	8004f4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2222      	movs	r2, #34	; 0x22
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2240      	movs	r2, #64	; 0x40
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4a5b      	ldr	r2, [pc, #364]	; (80050f8 <HAL_I2C_Mem_Read+0x228>)
 8004f8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f8e:	88f8      	ldrh	r0, [r7, #6]
 8004f90:	893a      	ldrh	r2, [r7, #8]
 8004f92:	8979      	ldrh	r1, [r7, #10]
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 fbb6 	bl	8005710 <I2C_RequestMemoryRead>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e1b0      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d113      	bne.n	8004fde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	623b      	str	r3, [r7, #32]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	623b      	str	r3, [r7, #32]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	623b      	str	r3, [r7, #32]
 8004fca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e184      	b.n	80052e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d11b      	bne.n	800501e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	e164      	b.n	80052e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005022:	2b02      	cmp	r3, #2
 8005024:	d11b      	bne.n	800505e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005034:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005044:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	61bb      	str	r3, [r7, #24]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	e144      	b.n	80052e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005074:	e138      	b.n	80052e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507a:	2b03      	cmp	r3, #3
 800507c:	f200 80f1 	bhi.w	8005262 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005084:	2b01      	cmp	r3, #1
 8005086:	d123      	bne.n	80050d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fd7f 	bl	8005b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e139      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050ce:	e10b      	b.n	80052e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d14e      	bne.n	8005176 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050de:	2200      	movs	r2, #0
 80050e0:	4906      	ldr	r1, [pc, #24]	; (80050fc <HAL_I2C_Mem_Read+0x22c>)
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fbfc 	bl	80058e0 <I2C_WaitOnFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e10e      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
 80050f2:	bf00      	nop
 80050f4:	00100002 	.word	0x00100002
 80050f8:	ffff0000 	.word	0xffff0000
 80050fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800510e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005174:	e0b8      	b.n	80052e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	2200      	movs	r2, #0
 800517e:	4966      	ldr	r1, [pc, #408]	; (8005318 <HAL_I2C_Mem_Read+0x448>)
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 fbad 	bl	80058e0 <I2C_WaitOnFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0bf      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800519e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d8:	2200      	movs	r2, #0
 80051da:	494f      	ldr	r1, [pc, #316]	; (8005318 <HAL_I2C_Mem_Read+0x448>)
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 fb7f 	bl	80058e0 <I2C_WaitOnFlagUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e091      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005260:	e042      	b.n	80052e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005264:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 fc92 	bl	8005b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e04c      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d118      	bne.n	80052e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f47f aec2 	bne.w	8005076 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	e000      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800530e:	2302      	movs	r3, #2
  }
}
 8005310:	4618      	mov	r0, r3
 8005312:	3728      	adds	r7, #40	; 0x28
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	00010004 	.word	0x00010004

0800531c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	; 0x28
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	607a      	str	r2, [r7, #4]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	460b      	mov	r3, r1
 800532a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800532c:	f7fe fe16 	bl	8003f5c <HAL_GetTick>
 8005330:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005332:	2301      	movs	r3, #1
 8005334:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b20      	cmp	r3, #32
 8005340:	f040 8111 	bne.w	8005566 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	2319      	movs	r3, #25
 800534a:	2201      	movs	r2, #1
 800534c:	4988      	ldr	r1, [pc, #544]	; (8005570 <HAL_I2C_IsDeviceReady+0x254>)
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 fac6 	bl	80058e0 <I2C_WaitOnFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800535a:	2302      	movs	r3, #2
 800535c:	e104      	b.n	8005568 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_I2C_IsDeviceReady+0x50>
 8005368:	2302      	movs	r3, #2
 800536a:	e0fd      	b.n	8005568 <HAL_I2C_IsDeviceReady+0x24c>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b01      	cmp	r3, #1
 8005380:	d007      	beq.n	8005392 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0201 	orr.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2224      	movs	r2, #36	; 0x24
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4a70      	ldr	r2, [pc, #448]	; (8005574 <HAL_I2C_IsDeviceReady+0x258>)
 80053b4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 fa84 	bl	80058e0 <I2C_WaitOnFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00d      	beq.n	80053fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ec:	d103      	bne.n	80053f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e0b6      	b.n	8005568 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053fa:	897b      	ldrh	r3, [r7, #10]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005408:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800540a:	f7fe fda7 	bl	8003f5c <HAL_GetTick>
 800540e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b02      	cmp	r3, #2
 800541c:	bf0c      	ite	eq
 800541e:	2301      	moveq	r3, #1
 8005420:	2300      	movne	r3, #0
 8005422:	b2db      	uxtb	r3, r3
 8005424:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005434:	bf0c      	ite	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	2300      	movne	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800543e:	e025      	b.n	800548c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005440:	f7fe fd8c 	bl	8003f5c <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d302      	bcc.n	8005456 <HAL_I2C_IsDeviceReady+0x13a>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	22a0      	movs	r2, #160	; 0xa0
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b02      	cmp	r3, #2
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005482:	bf0c      	ite	eq
 8005484:	2301      	moveq	r3, #1
 8005486:	2300      	movne	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2ba0      	cmp	r3, #160	; 0xa0
 8005496:	d005      	beq.n	80054a4 <HAL_I2C_IsDeviceReady+0x188>
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d102      	bne.n	80054a4 <HAL_I2C_IsDeviceReady+0x188>
 800549e:	7dbb      	ldrb	r3, [r7, #22]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0cd      	beq.n	8005440 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d129      	bne.n	800550e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ca:	2300      	movs	r3, #0
 80054cc:	613b      	str	r3, [r7, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	2319      	movs	r3, #25
 80054e6:	2201      	movs	r2, #1
 80054e8:	4921      	ldr	r1, [pc, #132]	; (8005570 <HAL_I2C_IsDeviceReady+0x254>)
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f9f8 	bl	80058e0 <I2C_WaitOnFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e036      	b.n	8005568 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	e02c      	b.n	8005568 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005526:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	2319      	movs	r3, #25
 800552e:	2201      	movs	r2, #1
 8005530:	490f      	ldr	r1, [pc, #60]	; (8005570 <HAL_I2C_IsDeviceReady+0x254>)
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f9d4 	bl	80058e0 <I2C_WaitOnFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e012      	b.n	8005568 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	3301      	adds	r3, #1
 8005546:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	429a      	cmp	r2, r3
 800554e:	f4ff af32 	bcc.w	80053b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005566:	2302      	movs	r3, #2
  }
}
 8005568:	4618      	mov	r0, r3
 800556a:	3720      	adds	r7, #32
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	00100002 	.word	0x00100002
 8005574:	ffff0000 	.word	0xffff0000

08005578 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b20      	cmp	r3, #32
 800558a:	d124      	bne.n	80055d6 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2228      	movs	r2, #40	; 0x28
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d007      	beq.n	80055b2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0201 	orr.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055c0:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80055d0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	e000      	b.n	80055d8 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80055d6:	2302      	movs	r3, #2
  }
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	4608      	mov	r0, r1
 80055ee:	4611      	mov	r1, r2
 80055f0:	461a      	mov	r2, r3
 80055f2:	4603      	mov	r3, r0
 80055f4:	817b      	strh	r3, [r7, #10]
 80055f6:	460b      	mov	r3, r1
 80055f8:	813b      	strh	r3, [r7, #8]
 80055fa:	4613      	mov	r3, r2
 80055fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800560c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	2200      	movs	r2, #0
 8005616:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f960 	bl	80058e0 <I2C_WaitOnFlagUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00d      	beq.n	8005642 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005634:	d103      	bne.n	800563e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e05f      	b.n	8005702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005642:	897b      	ldrh	r3, [r7, #10]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005650:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	6a3a      	ldr	r2, [r7, #32]
 8005656:	492d      	ldr	r1, [pc, #180]	; (800570c <I2C_RequestMemoryWrite+0x128>)
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 f998 	bl	800598e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e04c      	b.n	8005702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800567e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005680:	6a39      	ldr	r1, [r7, #32]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 fa02 	bl	8005a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00d      	beq.n	80056aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	2b04      	cmp	r3, #4
 8005694:	d107      	bne.n	80056a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e02b      	b.n	8005702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056aa:	88fb      	ldrh	r3, [r7, #6]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d105      	bne.n	80056bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056b0:	893b      	ldrh	r3, [r7, #8]
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	611a      	str	r2, [r3, #16]
 80056ba:	e021      	b.n	8005700 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056bc:	893b      	ldrh	r3, [r7, #8]
 80056be:	0a1b      	lsrs	r3, r3, #8
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056cc:	6a39      	ldr	r1, [r7, #32]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f9dc 	bl	8005a8c <I2C_WaitOnTXEFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00d      	beq.n	80056f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d107      	bne.n	80056f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e005      	b.n	8005702 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056f6:	893b      	ldrh	r3, [r7, #8]
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	00010002 	.word	0x00010002

08005710 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af02      	add	r7, sp, #8
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	4608      	mov	r0, r1
 800571a:	4611      	mov	r1, r2
 800571c:	461a      	mov	r2, r3
 800571e:	4603      	mov	r3, r0
 8005720:	817b      	strh	r3, [r7, #10]
 8005722:	460b      	mov	r3, r1
 8005724:	813b      	strh	r3, [r7, #8]
 8005726:	4613      	mov	r3, r2
 8005728:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005738:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005748:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	2200      	movs	r2, #0
 8005752:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f8c2 	bl	80058e0 <I2C_WaitOnFlagUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00d      	beq.n	800577e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005770:	d103      	bne.n	800577a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005778:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e0aa      	b.n	80058d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800577e:	897b      	ldrh	r3, [r7, #10]
 8005780:	b2db      	uxtb	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800578c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	6a3a      	ldr	r2, [r7, #32]
 8005792:	4952      	ldr	r1, [pc, #328]	; (80058dc <I2C_RequestMemoryRead+0x1cc>)
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f8fa 	bl	800598e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e097      	b.n	80058d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057a4:	2300      	movs	r3, #0
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057bc:	6a39      	ldr	r1, [r7, #32]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 f964 	bl	8005a8c <I2C_WaitOnTXEFlagUntilTimeout>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00d      	beq.n	80057e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d107      	bne.n	80057e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e076      	b.n	80058d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d105      	bne.n	80057f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057ec:	893b      	ldrh	r3, [r7, #8]
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	611a      	str	r2, [r3, #16]
 80057f6:	e021      	b.n	800583c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057f8:	893b      	ldrh	r3, [r7, #8]
 80057fa:	0a1b      	lsrs	r3, r3, #8
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005808:	6a39      	ldr	r1, [r7, #32]
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 f93e 	bl	8005a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00d      	beq.n	8005832 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	2b04      	cmp	r3, #4
 800581c:	d107      	bne.n	800582e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800582c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e050      	b.n	80058d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005832:	893b      	ldrh	r3, [r7, #8]
 8005834:	b2da      	uxtb	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800583c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583e:	6a39      	ldr	r1, [r7, #32]
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f923 	bl	8005a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00d      	beq.n	8005868 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	2b04      	cmp	r3, #4
 8005852:	d107      	bne.n	8005864 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005862:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e035      	b.n	80058d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005876:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	2200      	movs	r2, #0
 8005880:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f82b 	bl	80058e0 <I2C_WaitOnFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00d      	beq.n	80058ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800589e:	d103      	bne.n	80058a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e013      	b.n	80058d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058ac:	897b      	ldrh	r3, [r7, #10]
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f043 0301 	orr.w	r3, r3, #1
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	6a3a      	ldr	r2, [r7, #32]
 80058c0:	4906      	ldr	r1, [pc, #24]	; (80058dc <I2C_RequestMemoryRead+0x1cc>)
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 f863 	bl	800598e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	00010002 	.word	0x00010002

080058e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	4613      	mov	r3, r2
 80058ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058f0:	e025      	b.n	800593e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f8:	d021      	beq.n	800593e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058fa:	f7fe fb2f 	bl	8003f5c <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	429a      	cmp	r2, r3
 8005908:	d302      	bcc.n	8005910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d116      	bne.n	800593e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2220      	movs	r2, #32
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f043 0220 	orr.w	r2, r3, #32
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e023      	b.n	8005986 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b01      	cmp	r3, #1
 8005946:	d10d      	bne.n	8005964 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	43da      	mvns	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4013      	ands	r3, r2
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	bf0c      	ite	eq
 800595a:	2301      	moveq	r3, #1
 800595c:	2300      	movne	r3, #0
 800595e:	b2db      	uxtb	r3, r3
 8005960:	461a      	mov	r2, r3
 8005962:	e00c      	b.n	800597e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	43da      	mvns	r2, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4013      	ands	r3, r2
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	bf0c      	ite	eq
 8005976:	2301      	moveq	r3, #1
 8005978:	2300      	movne	r3, #0
 800597a:	b2db      	uxtb	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	79fb      	ldrb	r3, [r7, #7]
 8005980:	429a      	cmp	r2, r3
 8005982:	d0b6      	beq.n	80058f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
 800599a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800599c:	e051      	b.n	8005a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ac:	d123      	bne.n	80059f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f043 0204 	orr.w	r2, r3, #4
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e046      	b.n	8005a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fc:	d021      	beq.n	8005a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059fe:	f7fe faad 	bl	8003f5c <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d302      	bcc.n	8005a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d116      	bne.n	8005a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	f043 0220 	orr.w	r2, r3, #32
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e020      	b.n	8005a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	0c1b      	lsrs	r3, r3, #16
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d10c      	bne.n	8005a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	43da      	mvns	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4013      	ands	r3, r2
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bf14      	ite	ne
 8005a5e:	2301      	movne	r3, #1
 8005a60:	2300      	moveq	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	e00b      	b.n	8005a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	43da      	mvns	r2, r3
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4013      	ands	r3, r2
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	bf14      	ite	ne
 8005a78:	2301      	movne	r3, #1
 8005a7a:	2300      	moveq	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d18d      	bne.n	800599e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a98:	e02d      	b.n	8005af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 f8ce 	bl	8005c3c <I2C_IsAcknowledgeFailed>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e02d      	b.n	8005b06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab0:	d021      	beq.n	8005af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab2:	f7fe fa53 	bl	8003f5c <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d302      	bcc.n	8005ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d116      	bne.n	8005af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	f043 0220 	orr.w	r2, r3, #32
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e007      	b.n	8005b06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b00:	2b80      	cmp	r3, #128	; 0x80
 8005b02:	d1ca      	bne.n	8005a9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b1a:	e02d      	b.n	8005b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f88d 	bl	8005c3c <I2C_IsAcknowledgeFailed>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e02d      	b.n	8005b88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d021      	beq.n	8005b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b34:	f7fe fa12 	bl	8003f5c <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d302      	bcc.n	8005b4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d116      	bne.n	8005b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	f043 0220 	orr.w	r2, r3, #32
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e007      	b.n	8005b88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d1ca      	bne.n	8005b1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b9c:	e042      	b.n	8005c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b10      	cmp	r3, #16
 8005baa:	d119      	bne.n	8005be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f06f 0210 	mvn.w	r2, #16
 8005bb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e029      	b.n	8005c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be0:	f7fe f9bc 	bl	8003f5c <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d302      	bcc.n	8005bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d116      	bne.n	8005c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	f043 0220 	orr.w	r2, r3, #32
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e007      	b.n	8005c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2e:	2b40      	cmp	r3, #64	; 0x40
 8005c30:	d1b5      	bne.n	8005b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c52:	d11b      	bne.n	8005c8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	f043 0204 	orr.w	r2, r3, #4
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d129      	bne.n	8005d04 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2224      	movs	r2, #36	; 0x24
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0201 	bic.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0210 	bic.w	r2, r2, #16
 8005cd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0201 	orr.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e000      	b.n	8005d06 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005d04:	2302      	movs	r3, #2
  }
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d12a      	bne.n	8005d82 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2224      	movs	r2, #36	; 0x24
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0201 	bic.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005d4c:	89fb      	ldrh	r3, [r7, #14]
 8005d4e:	f023 030f 	bic.w	r3, r3, #15
 8005d52:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	89fb      	ldrh	r3, [r7, #14]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	89fa      	ldrh	r2, [r7, #14]
 8005d64:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0201 	orr.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e000      	b.n	8005d84 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005d82:	2302      	movs	r3, #2
  }
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d92:	b08f      	sub	sp, #60	; 0x3c
 8005d94:	af0a      	add	r7, sp, #40	; 0x28
 8005d96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e10f      	b.n	8005fc2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d106      	bne.n	8005dc2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f00a f9d5 	bl	801016c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d102      	bne.n	8005ddc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f004 f854 	bl	8009e8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	687e      	ldr	r6, [r7, #4]
 8005dee:	466d      	mov	r5, sp
 8005df0:	f106 0410 	add.w	r4, r6, #16
 8005df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e00:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e04:	1d33      	adds	r3, r6, #4
 8005e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e08:	6838      	ldr	r0, [r7, #0]
 8005e0a:	f003 ff2b 	bl	8009c64 <USB_CoreInit>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e0d0      	b.n	8005fc2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2100      	movs	r1, #0
 8005e26:	4618      	mov	r0, r3
 8005e28:	f004 f842 	bl	8009eb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	73fb      	strb	r3, [r7, #15]
 8005e30:	e04a      	b.n	8005ec8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e32:	7bfa      	ldrb	r2, [r7, #15]
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	4613      	mov	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	440b      	add	r3, r1
 8005e40:	333d      	adds	r3, #61	; 0x3d
 8005e42:	2201      	movs	r2, #1
 8005e44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e46:	7bfa      	ldrb	r2, [r7, #15]
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	1a9b      	subs	r3, r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	440b      	add	r3, r1
 8005e54:	333c      	adds	r3, #60	; 0x3c
 8005e56:	7bfa      	ldrb	r2, [r7, #15]
 8005e58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e5a:	7bfa      	ldrb	r2, [r7, #15]
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	b298      	uxth	r0, r3
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	4613      	mov	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	1a9b      	subs	r3, r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	440b      	add	r3, r1
 8005e6c:	3342      	adds	r3, #66	; 0x42
 8005e6e:	4602      	mov	r2, r0
 8005e70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e72:	7bfa      	ldrb	r2, [r7, #15]
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	4613      	mov	r3, r2
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	1a9b      	subs	r3, r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	440b      	add	r3, r1
 8005e80:	333f      	adds	r3, #63	; 0x3f
 8005e82:	2200      	movs	r2, #0
 8005e84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e86:	7bfa      	ldrb	r2, [r7, #15]
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	3344      	adds	r3, #68	; 0x44
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e9a:	7bfa      	ldrb	r2, [r7, #15]
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	3348      	adds	r3, #72	; 0x48
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005eae:	7bfa      	ldrb	r2, [r7, #15]
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	1a9b      	subs	r3, r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	440b      	add	r3, r1
 8005ebc:	3350      	adds	r3, #80	; 0x50
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	73fb      	strb	r3, [r7, #15]
 8005ec8:	7bfa      	ldrb	r2, [r7, #15]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d3af      	bcc.n	8005e32 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]
 8005ed6:	e044      	b.n	8005f62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ed8:	7bfa      	ldrb	r2, [r7, #15]
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	4613      	mov	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	1a9b      	subs	r3, r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005eea:	2200      	movs	r2, #0
 8005eec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005eee:	7bfa      	ldrb	r2, [r7, #15]
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	1a9b      	subs	r3, r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	440b      	add	r3, r1
 8005efc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005f00:	7bfa      	ldrb	r2, [r7, #15]
 8005f02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f04:	7bfa      	ldrb	r2, [r7, #15]
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	1a9b      	subs	r3, r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	440b      	add	r3, r1
 8005f12:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005f16:	2200      	movs	r2, #0
 8005f18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f1a:	7bfa      	ldrb	r2, [r7, #15]
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	1a9b      	subs	r3, r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	440b      	add	r3, r1
 8005f28:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f30:	7bfa      	ldrb	r2, [r7, #15]
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	4613      	mov	r3, r2
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	1a9b      	subs	r3, r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f46:	7bfa      	ldrb	r2, [r7, #15]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	73fb      	strb	r3, [r7, #15]
 8005f62:	7bfa      	ldrb	r2, [r7, #15]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d3b5      	bcc.n	8005ed8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	687e      	ldr	r6, [r7, #4]
 8005f74:	466d      	mov	r5, sp
 8005f76:	f106 0410 	add.w	r4, r6, #16
 8005f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f86:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f8a:	1d33      	adds	r3, r6, #4
 8005f8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f8e:	6838      	ldr	r0, [r7, #0]
 8005f90:	f003 ffb8 	bl	8009f04 <USB_DevInit>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d005      	beq.n	8005fa6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e00d      	b.n	8005fc2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f005 f800 	bl	800afc0 <USB_DevDisconnect>

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_PCD_Start+0x1c>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e020      	b.n	8006028 <HAL_PCD_Start+0x5e>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d109      	bne.n	800600a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d005      	beq.n	800600a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f003 ff2c 	bl	8009e6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f004 ffb0 	bl	800af7e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006030:	b590      	push	{r4, r7, lr}
 8006032:	b08d      	sub	sp, #52	; 0x34
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f005 f86e 	bl	800b128 <USB_GetMode>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	f040 839d 	bne.w	800678e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4618      	mov	r0, r3
 800605a:	f004 ffd2 	bl	800b002 <USB_ReadInterrupts>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 8393 	beq.w	800678c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f004 ffc9 	bl	800b002 <USB_ReadInterrupts>
 8006070:	4603      	mov	r3, r0
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b02      	cmp	r3, #2
 8006078:	d107      	bne.n	800608a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695a      	ldr	r2, [r3, #20]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f002 0202 	and.w	r2, r2, #2
 8006088:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f004 ffb7 	bl	800b002 <USB_ReadInterrupts>
 8006094:	4603      	mov	r3, r0
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b10      	cmp	r3, #16
 800609c:	d161      	bne.n	8006162 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699a      	ldr	r2, [r3, #24]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0210 	bic.w	r2, r2, #16
 80060ac:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	f003 020f 	and.w	r2, r3, #15
 80060ba:	4613      	mov	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	1a9b      	subs	r3, r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	4413      	add	r3, r2
 80060ca:	3304      	adds	r3, #4
 80060cc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	0c5b      	lsrs	r3, r3, #17
 80060d2:	f003 030f 	and.w	r3, r3, #15
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d124      	bne.n	8006124 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80060e0:	4013      	ands	r3, r2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d035      	beq.n	8006152 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	091b      	lsrs	r3, r3, #4
 80060ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80060f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	461a      	mov	r2, r3
 80060f8:	6a38      	ldr	r0, [r7, #32]
 80060fa:	f004 fe1d 	bl	800ad38 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	091b      	lsrs	r3, r3, #4
 8006106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800610a:	441a      	add	r2, r3
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	091b      	lsrs	r3, r3, #4
 8006118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800611c:	441a      	add	r2, r3
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	619a      	str	r2, [r3, #24]
 8006122:	e016      	b.n	8006152 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	0c5b      	lsrs	r3, r3, #17
 8006128:	f003 030f 	and.w	r3, r3, #15
 800612c:	2b06      	cmp	r3, #6
 800612e:	d110      	bne.n	8006152 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006136:	2208      	movs	r2, #8
 8006138:	4619      	mov	r1, r3
 800613a:	6a38      	ldr	r0, [r7, #32]
 800613c:	f004 fdfc 	bl	800ad38 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	699a      	ldr	r2, [r3, #24]
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	091b      	lsrs	r3, r3, #4
 8006148:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800614c:	441a      	add	r2, r3
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699a      	ldr	r2, [r3, #24]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0210 	orr.w	r2, r2, #16
 8006160:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f004 ff4b 	bl	800b002 <USB_ReadInterrupts>
 800616c:	4603      	mov	r3, r0
 800616e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006172:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006176:	d16e      	bne.n	8006256 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4618      	mov	r0, r3
 8006182:	f004 ff51 	bl	800b028 <USB_ReadDevAllOutEpInterrupt>
 8006186:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006188:	e062      	b.n	8006250 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d057      	beq.n	8006244 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	4611      	mov	r1, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	f004 ff76 	bl	800b090 <USB_ReadDevOutEPInterrupt>
 80061a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00c      	beq.n	80061ca <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061bc:	461a      	mov	r2, r3
 80061be:	2301      	movs	r3, #1
 80061c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80061c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fdb1 	bl	8006d2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00c      	beq.n	80061ee <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e0:	461a      	mov	r2, r3
 80061e2:	2308      	movs	r3, #8
 80061e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80061e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 feab 	bl	8006f44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d008      	beq.n	800620a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006204:	461a      	mov	r2, r3
 8006206:	2310      	movs	r3, #16
 8006208:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006220:	461a      	mov	r2, r3
 8006222:	2320      	movs	r3, #32
 8006224:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d009      	beq.n	8006244 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623c:	461a      	mov	r2, r3
 800623e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006242:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	3301      	adds	r3, #1
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	2b00      	cmp	r3, #0
 8006254:	d199      	bne.n	800618a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4618      	mov	r0, r3
 800625c:	f004 fed1 	bl	800b002 <USB_ReadInterrupts>
 8006260:	4603      	mov	r3, r0
 8006262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006266:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800626a:	f040 80c0 	bne.w	80063ee <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f004 fef2 	bl	800b05c <USB_ReadDevAllInEpInterrupt>
 8006278:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800627e:	e0b2      	b.n	80063e6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 80a7 	beq.w	80063da <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	4611      	mov	r1, r2
 8006296:	4618      	mov	r0, r3
 8006298:	f004 ff18 	bl	800b0cc <USB_ReadDevInEPInterrupt>
 800629c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d057      	beq.n	8006358 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	f003 030f 	and.w	r3, r3, #15
 80062ae:	2201      	movs	r2, #1
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	43db      	mvns	r3, r3
 80062c2:	69f9      	ldr	r1, [r7, #28]
 80062c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062c8:	4013      	ands	r3, r2
 80062ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d8:	461a      	mov	r2, r3
 80062da:	2301      	movs	r3, #1
 80062dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d132      	bne.n	800634c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ea:	4613      	mov	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	3348      	adds	r3, #72	; 0x48
 80062f6:	6819      	ldr	r1, [r3, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fc:	4613      	mov	r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	1a9b      	subs	r3, r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4403      	add	r3, r0
 8006306:	3344      	adds	r3, #68	; 0x44
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4419      	add	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006310:	4613      	mov	r3, r2
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4403      	add	r3, r0
 800631a:	3348      	adds	r3, #72	; 0x48
 800631c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	2b00      	cmp	r3, #0
 8006322:	d113      	bne.n	800634c <HAL_PCD_IRQHandler+0x31c>
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006328:	4613      	mov	r3, r2
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	1a9b      	subs	r3, r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	440b      	add	r3, r1
 8006332:	3350      	adds	r3, #80	; 0x50
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d108      	bne.n	800634c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6818      	ldr	r0, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006344:	461a      	mov	r2, r3
 8006346:	2101      	movs	r1, #1
 8006348:	f004 ff20 	bl	800b18c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	b2db      	uxtb	r3, r3
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f009 ff99 	bl	801028a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f003 0308 	and.w	r3, r3, #8
 800635e:	2b00      	cmp	r3, #0
 8006360:	d008      	beq.n	8006374 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636e:	461a      	mov	r2, r3
 8006370:	2308      	movs	r3, #8
 8006372:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f003 0310 	and.w	r3, r3, #16
 800637a:	2b00      	cmp	r3, #0
 800637c:	d008      	beq.n	8006390 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638a:	461a      	mov	r2, r3
 800638c:	2310      	movs	r3, #16
 800638e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	d008      	beq.n	80063ac <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a6:	461a      	mov	r2, r3
 80063a8:	2340      	movs	r3, #64	; 0x40
 80063aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d008      	beq.n	80063c8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c2:	461a      	mov	r2, r3
 80063c4:	2302      	movs	r3, #2
 80063c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80063d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fc1b 	bl	8006c10 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	3301      	adds	r3, #1
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	085b      	lsrs	r3, r3, #1
 80063e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f47f af49 	bne.w	8006280 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f004 fe05 	bl	800b002 <USB_ReadInterrupts>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006402:	d122      	bne.n	800644a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006412:	f023 0301 	bic.w	r3, r3, #1
 8006416:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800641e:	2b01      	cmp	r3, #1
 8006420:	d108      	bne.n	8006434 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800642a:	2100      	movs	r1, #0
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fe27 	bl	8007080 <HAL_PCDEx_LPM_Callback>
 8006432:	e002      	b.n	800643a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f009 ff9f 	bl	8010378 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695a      	ldr	r2, [r3, #20]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006448:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f004 fdd7 	bl	800b002 <USB_ReadInterrupts>
 8006454:	4603      	mov	r3, r0
 8006456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800645a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800645e:	d112      	bne.n	8006486 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b01      	cmp	r3, #1
 800646e:	d102      	bne.n	8006476 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f009 ff5b 	bl	801032c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695a      	ldr	r2, [r3, #20]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006484:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f004 fdb9 	bl	800b002 <USB_ReadInterrupts>
 8006490:	4603      	mov	r3, r0
 8006492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649a:	f040 80c7 	bne.w	800662c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	69fa      	ldr	r2, [r7, #28]
 80064a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2110      	movs	r1, #16
 80064b8:	4618      	mov	r0, r3
 80064ba:	f003 fe87 	bl	800a1cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064be:	2300      	movs	r3, #0
 80064c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c2:	e056      	b.n	8006572 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d0:	461a      	mov	r2, r3
 80064d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064e8:	0151      	lsls	r1, r2, #5
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	440a      	add	r2, r1
 80064ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064f6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80064f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006508:	0151      	lsls	r1, r2, #5
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	440a      	add	r2, r1
 800650e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006512:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006516:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006524:	461a      	mov	r2, r3
 8006526:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800652a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	69fa      	ldr	r2, [r7, #28]
 8006540:	440a      	add	r2, r1
 8006542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006546:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800654a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	440a      	add	r2, r1
 8006562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006566:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800656a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656e:	3301      	adds	r3, #1
 8006570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006578:	429a      	cmp	r2, r3
 800657a:	d3a3      	bcc.n	80064c4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800658a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800658e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	2b00      	cmp	r3, #0
 8006596:	d016      	beq.n	80065c6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065a8:	f043 030b 	orr.w	r3, r3, #11
 80065ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065be:	f043 030b 	orr.w	r3, r3, #11
 80065c2:	6453      	str	r3, [r2, #68]	; 0x44
 80065c4:	e015      	b.n	80065f2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80065d8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80065dc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065ec:	f043 030b 	orr.w	r3, r3, #11
 80065f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006600:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006604:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006616:	461a      	mov	r2, r3
 8006618:	f004 fdb8 	bl	800b18c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	695a      	ldr	r2, [r3, #20]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800662a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4618      	mov	r0, r3
 8006632:	f004 fce6 	bl	800b002 <USB_ReadInterrupts>
 8006636:	4603      	mov	r3, r0
 8006638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800663c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006640:	d124      	bne.n	800668c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4618      	mov	r0, r3
 8006648:	f004 fd7c 	bl	800b144 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4618      	mov	r0, r3
 8006652:	f003 fe1c 	bl	800a28e <USB_GetDevSpeed>
 8006656:	4603      	mov	r3, r0
 8006658:	461a      	mov	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681c      	ldr	r4, [r3, #0]
 8006662:	f001 f963 	bl	800792c <HAL_RCC_GetHCLKFreq>
 8006666:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800666c:	b2db      	uxtb	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	4620      	mov	r0, r4
 8006672:	f003 fb59 	bl	8009d28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f009 fe2f 	bl	80102da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695a      	ldr	r2, [r3, #20]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800668a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4618      	mov	r0, r3
 8006692:	f004 fcb6 	bl	800b002 <USB_ReadInterrupts>
 8006696:	4603      	mov	r3, r0
 8006698:	f003 0308 	and.w	r3, r3, #8
 800669c:	2b08      	cmp	r3, #8
 800669e:	d10a      	bne.n	80066b6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f009 fe0c 	bl	80102be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695a      	ldr	r2, [r3, #20]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f002 0208 	and.w	r2, r2, #8
 80066b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f004 fca1 	bl	800b002 <USB_ReadInterrupts>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ca:	d10f      	bne.n	80066ec <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	4619      	mov	r1, r3
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f009 fe6e 	bl	80103b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695a      	ldr	r2, [r3, #20]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80066ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f004 fc86 	bl	800b002 <USB_ReadInterrupts>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006700:	d10f      	bne.n	8006722 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	b2db      	uxtb	r3, r3
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f009 fe41 	bl	8010394 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695a      	ldr	r2, [r3, #20]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f004 fc6b 	bl	800b002 <USB_ReadInterrupts>
 800672c:	4603      	mov	r3, r0
 800672e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006736:	d10a      	bne.n	800674e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f009 fe4f 	bl	80103dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	695a      	ldr	r2, [r3, #20]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800674c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f004 fc55 	bl	800b002 <USB_ReadInterrupts>
 8006758:	4603      	mov	r3, r0
 800675a:	f003 0304 	and.w	r3, r3, #4
 800675e:	2b04      	cmp	r3, #4
 8006760:	d115      	bne.n	800678e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f009 fe3f 	bl	80103f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6859      	ldr	r1, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	430a      	orrs	r2, r1
 8006788:	605a      	str	r2, [r3, #4]
 800678a:	e000      	b.n	800678e <HAL_PCD_IRQHandler+0x75e>
      return;
 800678c:	bf00      	nop
    }
  }
}
 800678e:	3734      	adds	r7, #52	; 0x34
 8006790:	46bd      	mov	sp, r7
 8006792:	bd90      	pop	{r4, r7, pc}

08006794 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d101      	bne.n	80067ae <HAL_PCD_SetAddress+0x1a>
 80067aa:	2302      	movs	r3, #2
 80067ac:	e013      	b.n	80067d6 <HAL_PCD_SetAddress+0x42>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	78fa      	ldrb	r2, [r7, #3]
 80067ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	78fa      	ldrb	r2, [r7, #3]
 80067c4:	4611      	mov	r1, r2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f004 fbb3 	bl	800af32 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	4608      	mov	r0, r1
 80067e8:	4611      	mov	r1, r2
 80067ea:	461a      	mov	r2, r3
 80067ec:	4603      	mov	r3, r0
 80067ee:	70fb      	strb	r3, [r7, #3]
 80067f0:	460b      	mov	r3, r1
 80067f2:	803b      	strh	r3, [r7, #0]
 80067f4:	4613      	mov	r3, r2
 80067f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80067fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006800:	2b00      	cmp	r3, #0
 8006802:	da0f      	bge.n	8006824 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	f003 020f 	and.w	r2, r3, #15
 800680a:	4613      	mov	r3, r2
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	1a9b      	subs	r3, r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	3338      	adds	r3, #56	; 0x38
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	4413      	add	r3, r2
 8006818:	3304      	adds	r3, #4
 800681a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2201      	movs	r2, #1
 8006820:	705a      	strb	r2, [r3, #1]
 8006822:	e00f      	b.n	8006844 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006824:	78fb      	ldrb	r3, [r7, #3]
 8006826:	f003 020f 	and.w	r2, r3, #15
 800682a:	4613      	mov	r3, r2
 800682c:	00db      	lsls	r3, r3, #3
 800682e:	1a9b      	subs	r3, r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	4413      	add	r3, r2
 800683a:	3304      	adds	r3, #4
 800683c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006844:	78fb      	ldrb	r3, [r7, #3]
 8006846:	f003 030f 	and.w	r3, r3, #15
 800684a:	b2da      	uxtb	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006850:	883a      	ldrh	r2, [r7, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	78ba      	ldrb	r2, [r7, #2]
 800685a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	785b      	ldrb	r3, [r3, #1]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d004      	beq.n	800686e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800686e:	78bb      	ldrb	r3, [r7, #2]
 8006870:	2b02      	cmp	r3, #2
 8006872:	d102      	bne.n	800687a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006880:	2b01      	cmp	r3, #1
 8006882:	d101      	bne.n	8006888 <HAL_PCD_EP_Open+0xaa>
 8006884:	2302      	movs	r3, #2
 8006886:	e00e      	b.n	80068a6 <HAL_PCD_EP_Open+0xc8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68f9      	ldr	r1, [r7, #12]
 8006896:	4618      	mov	r0, r3
 8006898:	f003 fd1e 	bl	800a2d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80068a4:	7afb      	ldrb	r3, [r7, #11]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	460b      	mov	r3, r1
 80068b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80068ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	da0f      	bge.n	80068e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068c2:	78fb      	ldrb	r3, [r7, #3]
 80068c4:	f003 020f 	and.w	r2, r3, #15
 80068c8:	4613      	mov	r3, r2
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	1a9b      	subs	r3, r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	3338      	adds	r3, #56	; 0x38
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	4413      	add	r3, r2
 80068d6:	3304      	adds	r3, #4
 80068d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	705a      	strb	r2, [r3, #1]
 80068e0:	e00f      	b.n	8006902 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068e2:	78fb      	ldrb	r3, [r7, #3]
 80068e4:	f003 020f 	and.w	r2, r3, #15
 80068e8:	4613      	mov	r3, r2
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	1a9b      	subs	r3, r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	4413      	add	r3, r2
 80068f8:	3304      	adds	r3, #4
 80068fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006902:	78fb      	ldrb	r3, [r7, #3]
 8006904:	f003 030f 	and.w	r3, r3, #15
 8006908:	b2da      	uxtb	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_PCD_EP_Close+0x6e>
 8006918:	2302      	movs	r3, #2
 800691a:	e00e      	b.n	800693a <HAL_PCD_EP_Close+0x8c>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68f9      	ldr	r1, [r7, #12]
 800692a:	4618      	mov	r0, r3
 800692c:	f003 fd5c 	bl	800a3e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b086      	sub	sp, #24
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	603b      	str	r3, [r7, #0]
 800694e:	460b      	mov	r3, r1
 8006950:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006952:	7afb      	ldrb	r3, [r7, #11]
 8006954:	f003 020f 	and.w	r2, r3, #15
 8006958:	4613      	mov	r3, r2
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	1a9b      	subs	r3, r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	3304      	adds	r3, #4
 800696a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	2200      	movs	r2, #0
 800697c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2200      	movs	r2, #0
 8006982:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006984:	7afb      	ldrb	r3, [r7, #11]
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	b2da      	uxtb	r2, r3
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d102      	bne.n	800699e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800699e:	7afb      	ldrb	r3, [r7, #11]
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d109      	bne.n	80069bc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	461a      	mov	r2, r3
 80069b4:	6979      	ldr	r1, [r7, #20]
 80069b6:	f004 f837 	bl	800aa28 <USB_EP0StartXfer>
 80069ba:	e008      	b.n	80069ce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6818      	ldr	r0, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	461a      	mov	r2, r3
 80069c8:	6979      	ldr	r1, [r7, #20]
 80069ca:	f003 fde9 	bl	800a5a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	f003 020f 	and.w	r2, r3, #15
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	4613      	mov	r3, r2
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	1a9b      	subs	r3, r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	440b      	add	r3, r1
 80069f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80069fa:	681b      	ldr	r3, [r3, #0]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	607a      	str	r2, [r7, #4]
 8006a12:	603b      	str	r3, [r7, #0]
 8006a14:	460b      	mov	r3, r1
 8006a16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a18:	7afb      	ldrb	r3, [r7, #11]
 8006a1a:	f003 020f 	and.w	r2, r3, #15
 8006a1e:	4613      	mov	r3, r2
 8006a20:	00db      	lsls	r3, r3, #3
 8006a22:	1a9b      	subs	r3, r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	3338      	adds	r3, #56	; 0x38
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2201      	movs	r2, #1
 8006a46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a48:	7afb      	ldrb	r3, [r7, #11]
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d102      	bne.n	8006a62 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a62:	7afb      	ldrb	r3, [r7, #11]
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d109      	bne.n	8006a80 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6818      	ldr	r0, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	461a      	mov	r2, r3
 8006a78:	6979      	ldr	r1, [r7, #20]
 8006a7a:	f003 ffd5 	bl	800aa28 <USB_EP0StartXfer>
 8006a7e:	e008      	b.n	8006a92 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	6979      	ldr	r1, [r7, #20]
 8006a8e:	f003 fd87 	bl	800a5a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	f003 020f 	and.w	r2, r3, #15
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d901      	bls.n	8006aba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e050      	b.n	8006b5c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	da0f      	bge.n	8006ae2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ac2:	78fb      	ldrb	r3, [r7, #3]
 8006ac4:	f003 020f 	and.w	r2, r3, #15
 8006ac8:	4613      	mov	r3, r2
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	1a9b      	subs	r3, r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	3338      	adds	r3, #56	; 0x38
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2201      	movs	r2, #1
 8006ade:	705a      	strb	r2, [r3, #1]
 8006ae0:	e00d      	b.n	8006afe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006ae2:	78fa      	ldrb	r2, [r7, #3]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	1a9b      	subs	r3, r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	4413      	add	r3, r2
 8006af4:	3304      	adds	r3, #4
 8006af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2201      	movs	r2, #1
 8006b02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_PCD_EP_SetStall+0x82>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e01e      	b.n	8006b5c <HAL_PCD_EP_SetStall+0xc0>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68f9      	ldr	r1, [r7, #12]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f004 f92c 	bl	800ad8a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	f003 030f 	and.w	r3, r3, #15
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	b2d9      	uxtb	r1, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	f004 fb1d 	bl	800b18c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006b70:	78fb      	ldrb	r3, [r7, #3]
 8006b72:	f003 020f 	and.w	r2, r3, #15
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d901      	bls.n	8006b82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e042      	b.n	8006c08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	da0f      	bge.n	8006baa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	f003 020f 	and.w	r2, r3, #15
 8006b90:	4613      	mov	r3, r2
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	1a9b      	subs	r3, r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	3338      	adds	r3, #56	; 0x38
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	705a      	strb	r2, [r3, #1]
 8006ba8:	e00f      	b.n	8006bca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	f003 020f 	and.w	r2, r3, #15
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	1a9b      	subs	r3, r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	f003 030f 	and.w	r3, r3, #15
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d101      	bne.n	8006bea <HAL_PCD_EP_ClrStall+0x86>
 8006be6:	2302      	movs	r3, #2
 8006be8:	e00e      	b.n	8006c08 <HAL_PCD_EP_ClrStall+0xa4>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68f9      	ldr	r1, [r7, #12]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f004 f934 	bl	800ae66 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	; 0x28
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	4613      	mov	r3, r2
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	1a9b      	subs	r3, r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	3338      	adds	r3, #56	; 0x38
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	4413      	add	r3, r2
 8006c34:	3304      	adds	r3, #4
 8006c36:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	699a      	ldr	r2, [r3, #24]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d901      	bls.n	8006c48 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e06c      	b.n	8006d22 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	695a      	ldr	r2, [r3, #20]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	69fa      	ldr	r2, [r7, #28]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d902      	bls.n	8006c64 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	3303      	adds	r3, #3
 8006c68:	089b      	lsrs	r3, r3, #2
 8006c6a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c6c:	e02b      	b.n	8006cc6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	695a      	ldr	r2, [r3, #20]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d902      	bls.n	8006c8a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	3303      	adds	r3, #3
 8006c8e:	089b      	lsrs	r3, r3, #2
 8006c90:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	68d9      	ldr	r1, [r3, #12]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	6978      	ldr	r0, [r7, #20]
 8006caa:	f004 f810 	bl	800acce <USB_WritePacket>

    ep->xfer_buff  += len;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	441a      	add	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	441a      	add	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d809      	bhi.n	8006cf0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	699a      	ldr	r2, [r3, #24]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d203      	bcs.n	8006cf0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1be      	bne.n	8006c6e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	695a      	ldr	r2, [r3, #20]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d811      	bhi.n	8006d20 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	2201      	movs	r2, #1
 8006d04:	fa02 f303 	lsl.w	r3, r2, r3
 8006d08:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	43db      	mvns	r3, r3
 8006d16:	6939      	ldr	r1, [r7, #16]
 8006d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	333c      	adds	r3, #60	; 0x3c
 8006d44:	3304      	adds	r3, #4
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	f040 80a0 	bne.w	8006ea4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d015      	beq.n	8006d9a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4a72      	ldr	r2, [pc, #456]	; (8006f3c <PCD_EP_OutXfrComplete_int+0x210>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	f240 80dd 	bls.w	8006f32 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 80d7 	beq.w	8006f32 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	461a      	mov	r2, r3
 8006d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d96:	6093      	str	r3, [r2, #8]
 8006d98:	e0cb      	b.n	8006f32 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f003 0320 	and.w	r3, r3, #32
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d009      	beq.n	8006db8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db0:	461a      	mov	r2, r3
 8006db2:	2320      	movs	r3, #32
 8006db4:	6093      	str	r3, [r2, #8]
 8006db6:	e0bc      	b.n	8006f32 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f040 80b7 	bne.w	8006f32 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4a5d      	ldr	r2, [pc, #372]	; (8006f3c <PCD_EP_OutXfrComplete_int+0x210>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d90f      	bls.n	8006dec <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de2:	461a      	mov	r2, r3
 8006de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006de8:	6093      	str	r3, [r2, #8]
 8006dea:	e0a2      	b.n	8006f32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	4613      	mov	r3, r2
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	1a9b      	subs	r3, r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	440b      	add	r3, r1
 8006dfa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006dfe:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	0159      	lsls	r1, r3, #5
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	440b      	add	r3, r1
 8006e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006e12:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	1a9b      	subs	r3, r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4403      	add	r3, r0
 8006e22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006e26:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	440b      	add	r3, r1
 8006e36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e3a:	6819      	ldr	r1, [r3, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	4613      	mov	r3, r2
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4403      	add	r3, r0
 8006e4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4419      	add	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	4613      	mov	r3, r2
 8006e58:	00db      	lsls	r3, r3, #3
 8006e5a:	1a9b      	subs	r3, r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4403      	add	r3, r0
 8006e60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e64:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d114      	bne.n	8006e96 <PCD_EP_OutXfrComplete_int+0x16a>
 8006e6c:	6879      	ldr	r1, [r7, #4]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	4613      	mov	r3, r2
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d108      	bne.n	8006e96 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6818      	ldr	r0, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e8e:	461a      	mov	r2, r3
 8006e90:	2101      	movs	r1, #1
 8006e92:	f004 f97b 	bl	800b18c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f009 f9d9 	bl	8010254 <HAL_PCD_DataOutStageCallback>
 8006ea2:	e046      	b.n	8006f32 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4a26      	ldr	r2, [pc, #152]	; (8006f40 <PCD_EP_OutXfrComplete_int+0x214>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d124      	bne.n	8006ef6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ec8:	6093      	str	r3, [r2, #8]
 8006eca:	e032      	b.n	8006f32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d008      	beq.n	8006ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	2320      	movs	r3, #32
 8006ee6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f009 f9b0 	bl	8010254 <HAL_PCD_DataOutStageCallback>
 8006ef4:	e01d      	b.n	8006f32 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d114      	bne.n	8006f26 <PCD_EP_OutXfrComplete_int+0x1fa>
 8006efc:	6879      	ldr	r1, [r7, #4]
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	4613      	mov	r3, r2
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	1a9b      	subs	r3, r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d108      	bne.n	8006f26 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6818      	ldr	r0, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f1e:	461a      	mov	r2, r3
 8006f20:	2100      	movs	r1, #0
 8006f22:	f004 f933 	bl	800b18c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f009 f991 	bl	8010254 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	4f54300a 	.word	0x4f54300a
 8006f40:	4f54310a 	.word	0x4f54310a

08006f44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	333c      	adds	r3, #60	; 0x3c
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4a15      	ldr	r2, [pc, #84]	; (8006fcc <PCD_EP_OutSetupPacket_int+0x88>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d90e      	bls.n	8006f98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d009      	beq.n	8006f98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f90:	461a      	mov	r2, r3
 8006f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f009 f949 	bl	8010230 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4a0a      	ldr	r2, [pc, #40]	; (8006fcc <PCD_EP_OutSetupPacket_int+0x88>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d90c      	bls.n	8006fc0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d108      	bne.n	8006fc0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6818      	ldr	r0, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006fb8:	461a      	mov	r2, r3
 8006fba:	2101      	movs	r1, #1
 8006fbc:	f004 f8e6 	bl	800b18c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	4f54300a 	.word	0x4f54300a

08006fd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	70fb      	strb	r3, [r7, #3]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006fe8:	78fb      	ldrb	r3, [r7, #3]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d107      	bne.n	8006ffe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006fee:	883b      	ldrh	r3, [r7, #0]
 8006ff0:	0419      	lsls	r1, r3, #16
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	629a      	str	r2, [r3, #40]	; 0x28
 8006ffc:	e028      	b.n	8007050 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007004:	0c1b      	lsrs	r3, r3, #16
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	4413      	add	r3, r2
 800700a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800700c:	2300      	movs	r3, #0
 800700e:	73fb      	strb	r3, [r7, #15]
 8007010:	e00d      	b.n	800702e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	3340      	adds	r3, #64	; 0x40
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	0c1b      	lsrs	r3, r3, #16
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	4413      	add	r3, r2
 8007026:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	3301      	adds	r3, #1
 800702c:	73fb      	strb	r3, [r7, #15]
 800702e:	7bfa      	ldrb	r2, [r7, #15]
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	3b01      	subs	r3, #1
 8007034:	429a      	cmp	r2, r3
 8007036:	d3ec      	bcc.n	8007012 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007038:	883b      	ldrh	r3, [r7, #0]
 800703a:	0418      	lsls	r0, r3, #16
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6819      	ldr	r1, [r3, #0]
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	3b01      	subs	r3, #1
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	4302      	orrs	r2, r0
 8007048:	3340      	adds	r3, #64	; 0x40
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	460b      	mov	r3, r1
 8007068:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	887a      	ldrh	r2, [r7, #2]
 8007070:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 80070a0:	4b06      	ldr	r3, [pc, #24]	; (80070bc <HAL_PWR_DisableWakeUpPin+0x24>)
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	43db      	mvns	r3, r3
 80070a8:	4904      	ldr	r1, [pc, #16]	; (80070bc <HAL_PWR_DisableWakeUpPin+0x24>)
 80070aa:	4013      	ands	r3, r2
 80070ac:	604b      	str	r3, [r1, #4]
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	40007000 	.word	0x40007000

080070c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e25b      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d075      	beq.n	80071ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070de:	4ba3      	ldr	r3, [pc, #652]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 030c 	and.w	r3, r3, #12
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	d00c      	beq.n	8007104 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070ea:	4ba0      	ldr	r3, [pc, #640]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d112      	bne.n	800711c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070f6:	4b9d      	ldr	r3, [pc, #628]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007102:	d10b      	bne.n	800711c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007104:	4b99      	ldr	r3, [pc, #612]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d05b      	beq.n	80071c8 <HAL_RCC_OscConfig+0x108>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d157      	bne.n	80071c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e236      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007124:	d106      	bne.n	8007134 <HAL_RCC_OscConfig+0x74>
 8007126:	4b91      	ldr	r3, [pc, #580]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a90      	ldr	r2, [pc, #576]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800712c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007130:	6013      	str	r3, [r2, #0]
 8007132:	e01d      	b.n	8007170 <HAL_RCC_OscConfig+0xb0>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800713c:	d10c      	bne.n	8007158 <HAL_RCC_OscConfig+0x98>
 800713e:	4b8b      	ldr	r3, [pc, #556]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a8a      	ldr	r2, [pc, #552]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007148:	6013      	str	r3, [r2, #0]
 800714a:	4b88      	ldr	r3, [pc, #544]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a87      	ldr	r2, [pc, #540]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	e00b      	b.n	8007170 <HAL_RCC_OscConfig+0xb0>
 8007158:	4b84      	ldr	r3, [pc, #528]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a83      	ldr	r2, [pc, #524]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800715e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007162:	6013      	str	r3, [r2, #0]
 8007164:	4b81      	ldr	r3, [pc, #516]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a80      	ldr	r2, [pc, #512]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800716a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800716e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d013      	beq.n	80071a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007178:	f7fc fef0 	bl	8003f5c <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007180:	f7fc feec 	bl	8003f5c <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b64      	cmp	r3, #100	; 0x64
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e1fb      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007192:	4b76      	ldr	r3, [pc, #472]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0f0      	beq.n	8007180 <HAL_RCC_OscConfig+0xc0>
 800719e:	e014      	b.n	80071ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071a0:	f7fc fedc 	bl	8003f5c <HAL_GetTick>
 80071a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071a6:	e008      	b.n	80071ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071a8:	f7fc fed8 	bl	8003f5c <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b64      	cmp	r3, #100	; 0x64
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e1e7      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071ba:	4b6c      	ldr	r3, [pc, #432]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1f0      	bne.n	80071a8 <HAL_RCC_OscConfig+0xe8>
 80071c6:	e000      	b.n	80071ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d063      	beq.n	800729e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071d6:	4b65      	ldr	r3, [pc, #404]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 030c 	and.w	r3, r3, #12
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00b      	beq.n	80071fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071e2:	4b62      	ldr	r3, [pc, #392]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071ea:	2b08      	cmp	r3, #8
 80071ec:	d11c      	bne.n	8007228 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071ee:	4b5f      	ldr	r3, [pc, #380]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d116      	bne.n	8007228 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071fa:	4b5c      	ldr	r3, [pc, #368]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <HAL_RCC_OscConfig+0x152>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d001      	beq.n	8007212 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e1bb      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007212:	4b56      	ldr	r3, [pc, #344]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	4952      	ldr	r1, [pc, #328]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007222:	4313      	orrs	r3, r2
 8007224:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007226:	e03a      	b.n	800729e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d020      	beq.n	8007272 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007230:	4b4f      	ldr	r3, [pc, #316]	; (8007370 <HAL_RCC_OscConfig+0x2b0>)
 8007232:	2201      	movs	r2, #1
 8007234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007236:	f7fc fe91 	bl	8003f5c <HAL_GetTick>
 800723a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800723c:	e008      	b.n	8007250 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800723e:	f7fc fe8d 	bl	8003f5c <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	2b02      	cmp	r3, #2
 800724a:	d901      	bls.n	8007250 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e19c      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007250:	4b46      	ldr	r3, [pc, #280]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0f0      	beq.n	800723e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800725c:	4b43      	ldr	r3, [pc, #268]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	4940      	ldr	r1, [pc, #256]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800726c:	4313      	orrs	r3, r2
 800726e:	600b      	str	r3, [r1, #0]
 8007270:	e015      	b.n	800729e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007272:	4b3f      	ldr	r3, [pc, #252]	; (8007370 <HAL_RCC_OscConfig+0x2b0>)
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007278:	f7fc fe70 	bl	8003f5c <HAL_GetTick>
 800727c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800727e:	e008      	b.n	8007292 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007280:	f7fc fe6c 	bl	8003f5c <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d901      	bls.n	8007292 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e17b      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007292:	4b36      	ldr	r3, [pc, #216]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1f0      	bne.n	8007280 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0308 	and.w	r3, r3, #8
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d030      	beq.n	800730c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d016      	beq.n	80072e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072b2:	4b30      	ldr	r3, [pc, #192]	; (8007374 <HAL_RCC_OscConfig+0x2b4>)
 80072b4:	2201      	movs	r2, #1
 80072b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072b8:	f7fc fe50 	bl	8003f5c <HAL_GetTick>
 80072bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072be:	e008      	b.n	80072d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072c0:	f7fc fe4c 	bl	8003f5c <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e15b      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072d2:	4b26      	ldr	r3, [pc, #152]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80072d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d0f0      	beq.n	80072c0 <HAL_RCC_OscConfig+0x200>
 80072de:	e015      	b.n	800730c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072e0:	4b24      	ldr	r3, [pc, #144]	; (8007374 <HAL_RCC_OscConfig+0x2b4>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072e6:	f7fc fe39 	bl	8003f5c <HAL_GetTick>
 80072ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072ec:	e008      	b.n	8007300 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072ee:	f7fc fe35 	bl	8003f5c <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d901      	bls.n	8007300 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e144      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007300:	4b1a      	ldr	r3, [pc, #104]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1f0      	bne.n	80072ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 80a0 	beq.w	800745a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800731a:	2300      	movs	r3, #0
 800731c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800731e:	4b13      	ldr	r3, [pc, #76]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10f      	bne.n	800734a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800732a:	2300      	movs	r3, #0
 800732c:	60bb      	str	r3, [r7, #8]
 800732e:	4b0f      	ldr	r3, [pc, #60]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	4a0e      	ldr	r2, [pc, #56]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007338:	6413      	str	r3, [r2, #64]	; 0x40
 800733a:	4b0c      	ldr	r3, [pc, #48]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007342:	60bb      	str	r3, [r7, #8]
 8007344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007346:	2301      	movs	r3, #1
 8007348:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800734a:	4b0b      	ldr	r3, [pc, #44]	; (8007378 <HAL_RCC_OscConfig+0x2b8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007352:	2b00      	cmp	r3, #0
 8007354:	d121      	bne.n	800739a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007356:	4b08      	ldr	r3, [pc, #32]	; (8007378 <HAL_RCC_OscConfig+0x2b8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a07      	ldr	r2, [pc, #28]	; (8007378 <HAL_RCC_OscConfig+0x2b8>)
 800735c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007362:	f7fc fdfb 	bl	8003f5c <HAL_GetTick>
 8007366:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007368:	e011      	b.n	800738e <HAL_RCC_OscConfig+0x2ce>
 800736a:	bf00      	nop
 800736c:	40023800 	.word	0x40023800
 8007370:	42470000 	.word	0x42470000
 8007374:	42470e80 	.word	0x42470e80
 8007378:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800737c:	f7fc fdee 	bl	8003f5c <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e0fd      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800738e:	4b81      	ldr	r3, [pc, #516]	; (8007594 <HAL_RCC_OscConfig+0x4d4>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0f0      	beq.n	800737c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d106      	bne.n	80073b0 <HAL_RCC_OscConfig+0x2f0>
 80073a2:	4b7d      	ldr	r3, [pc, #500]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a6:	4a7c      	ldr	r2, [pc, #496]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073a8:	f043 0301 	orr.w	r3, r3, #1
 80073ac:	6713      	str	r3, [r2, #112]	; 0x70
 80073ae:	e01c      	b.n	80073ea <HAL_RCC_OscConfig+0x32a>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	2b05      	cmp	r3, #5
 80073b6:	d10c      	bne.n	80073d2 <HAL_RCC_OscConfig+0x312>
 80073b8:	4b77      	ldr	r3, [pc, #476]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073bc:	4a76      	ldr	r2, [pc, #472]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073be:	f043 0304 	orr.w	r3, r3, #4
 80073c2:	6713      	str	r3, [r2, #112]	; 0x70
 80073c4:	4b74      	ldr	r3, [pc, #464]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c8:	4a73      	ldr	r2, [pc, #460]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073ca:	f043 0301 	orr.w	r3, r3, #1
 80073ce:	6713      	str	r3, [r2, #112]	; 0x70
 80073d0:	e00b      	b.n	80073ea <HAL_RCC_OscConfig+0x32a>
 80073d2:	4b71      	ldr	r3, [pc, #452]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d6:	4a70      	ldr	r2, [pc, #448]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073d8:	f023 0301 	bic.w	r3, r3, #1
 80073dc:	6713      	str	r3, [r2, #112]	; 0x70
 80073de:	4b6e      	ldr	r3, [pc, #440]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e2:	4a6d      	ldr	r2, [pc, #436]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073e4:	f023 0304 	bic.w	r3, r3, #4
 80073e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d015      	beq.n	800741e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f2:	f7fc fdb3 	bl	8003f5c <HAL_GetTick>
 80073f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f8:	e00a      	b.n	8007410 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073fa:	f7fc fdaf 	bl	8003f5c <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	f241 3288 	movw	r2, #5000	; 0x1388
 8007408:	4293      	cmp	r3, r2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e0bc      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007410:	4b61      	ldr	r3, [pc, #388]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 8007412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0ee      	beq.n	80073fa <HAL_RCC_OscConfig+0x33a>
 800741c:	e014      	b.n	8007448 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800741e:	f7fc fd9d 	bl	8003f5c <HAL_GetTick>
 8007422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007424:	e00a      	b.n	800743c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007426:	f7fc fd99 	bl	8003f5c <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	f241 3288 	movw	r2, #5000	; 0x1388
 8007434:	4293      	cmp	r3, r2
 8007436:	d901      	bls.n	800743c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e0a6      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800743c:	4b56      	ldr	r3, [pc, #344]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 800743e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1ee      	bne.n	8007426 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d105      	bne.n	800745a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800744e:	4b52      	ldr	r3, [pc, #328]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	4a51      	ldr	r2, [pc, #324]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 8007454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007458:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 8092 	beq.w	8007588 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007464:	4b4c      	ldr	r3, [pc, #304]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 030c 	and.w	r3, r3, #12
 800746c:	2b08      	cmp	r3, #8
 800746e:	d05c      	beq.n	800752a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	2b02      	cmp	r3, #2
 8007476:	d141      	bne.n	80074fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007478:	4b48      	ldr	r3, [pc, #288]	; (800759c <HAL_RCC_OscConfig+0x4dc>)
 800747a:	2200      	movs	r2, #0
 800747c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800747e:	f7fc fd6d 	bl	8003f5c <HAL_GetTick>
 8007482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007484:	e008      	b.n	8007498 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007486:	f7fc fd69 	bl	8003f5c <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d901      	bls.n	8007498 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e078      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007498:	4b3f      	ldr	r3, [pc, #252]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1f0      	bne.n	8007486 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	69da      	ldr	r2, [r3, #28]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	019b      	lsls	r3, r3, #6
 80074b4:	431a      	orrs	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	085b      	lsrs	r3, r3, #1
 80074bc:	3b01      	subs	r3, #1
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c6:	061b      	lsls	r3, r3, #24
 80074c8:	4933      	ldr	r1, [pc, #204]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074ce:	4b33      	ldr	r3, [pc, #204]	; (800759c <HAL_RCC_OscConfig+0x4dc>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074d4:	f7fc fd42 	bl	8003f5c <HAL_GetTick>
 80074d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074da:	e008      	b.n	80074ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074dc:	f7fc fd3e 	bl	8003f5c <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d901      	bls.n	80074ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e04d      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ee:	4b2a      	ldr	r3, [pc, #168]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0f0      	beq.n	80074dc <HAL_RCC_OscConfig+0x41c>
 80074fa:	e045      	b.n	8007588 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074fc:	4b27      	ldr	r3, [pc, #156]	; (800759c <HAL_RCC_OscConfig+0x4dc>)
 80074fe:	2200      	movs	r2, #0
 8007500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007502:	f7fc fd2b 	bl	8003f5c <HAL_GetTick>
 8007506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007508:	e008      	b.n	800751c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800750a:	f7fc fd27 	bl	8003f5c <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d901      	bls.n	800751c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e036      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800751c:	4b1e      	ldr	r3, [pc, #120]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1f0      	bne.n	800750a <HAL_RCC_OscConfig+0x44a>
 8007528:	e02e      	b.n	8007588 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e029      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007536:	4b18      	ldr	r3, [pc, #96]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	429a      	cmp	r2, r3
 8007548:	d11c      	bne.n	8007584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007554:	429a      	cmp	r2, r3
 8007556:	d115      	bne.n	8007584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800755e:	4013      	ands	r3, r2
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007564:	4293      	cmp	r3, r2
 8007566:	d10d      	bne.n	8007584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007572:	429a      	cmp	r2, r3
 8007574:	d106      	bne.n	8007584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007580:	429a      	cmp	r2, r3
 8007582:	d001      	beq.n	8007588 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e000      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	40007000 	.word	0x40007000
 8007598:	40023800 	.word	0x40023800
 800759c:	42470060 	.word	0x42470060

080075a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e0cc      	b.n	800774e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075b4:	4b68      	ldr	r3, [pc, #416]	; (8007758 <HAL_RCC_ClockConfig+0x1b8>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 030f 	and.w	r3, r3, #15
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d90c      	bls.n	80075dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075c2:	4b65      	ldr	r3, [pc, #404]	; (8007758 <HAL_RCC_ClockConfig+0x1b8>)
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	b2d2      	uxtb	r2, r2
 80075c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ca:	4b63      	ldr	r3, [pc, #396]	; (8007758 <HAL_RCC_ClockConfig+0x1b8>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d001      	beq.n	80075dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e0b8      	b.n	800774e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d020      	beq.n	800762a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075f4:	4b59      	ldr	r3, [pc, #356]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	4a58      	ldr	r2, [pc, #352]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 80075fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0308 	and.w	r3, r3, #8
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800760c:	4b53      	ldr	r3, [pc, #332]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	4a52      	ldr	r2, [pc, #328]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007618:	4b50      	ldr	r3, [pc, #320]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	494d      	ldr	r1, [pc, #308]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007626:	4313      	orrs	r3, r2
 8007628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d044      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d107      	bne.n	800764e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800763e:	4b47      	ldr	r3, [pc, #284]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d119      	bne.n	800767e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e07f      	b.n	800774e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	2b02      	cmp	r3, #2
 8007654:	d003      	beq.n	800765e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800765a:	2b03      	cmp	r3, #3
 800765c:	d107      	bne.n	800766e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800765e:	4b3f      	ldr	r3, [pc, #252]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d109      	bne.n	800767e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e06f      	b.n	800774e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800766e:	4b3b      	ldr	r3, [pc, #236]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e067      	b.n	800774e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800767e:	4b37      	ldr	r3, [pc, #220]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f023 0203 	bic.w	r2, r3, #3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	4934      	ldr	r1, [pc, #208]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 800768c:	4313      	orrs	r3, r2
 800768e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007690:	f7fc fc64 	bl	8003f5c <HAL_GetTick>
 8007694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007696:	e00a      	b.n	80076ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007698:	f7fc fc60 	bl	8003f5c <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e04f      	b.n	800774e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ae:	4b2b      	ldr	r3, [pc, #172]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f003 020c 	and.w	r2, r3, #12
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	429a      	cmp	r2, r3
 80076be:	d1eb      	bne.n	8007698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076c0:	4b25      	ldr	r3, [pc, #148]	; (8007758 <HAL_RCC_ClockConfig+0x1b8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 030f 	and.w	r3, r3, #15
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d20c      	bcs.n	80076e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ce:	4b22      	ldr	r3, [pc, #136]	; (8007758 <HAL_RCC_ClockConfig+0x1b8>)
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d6:	4b20      	ldr	r3, [pc, #128]	; (8007758 <HAL_RCC_ClockConfig+0x1b8>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d001      	beq.n	80076e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e032      	b.n	800774e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d008      	beq.n	8007706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076f4:	4b19      	ldr	r3, [pc, #100]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	4916      	ldr	r1, [pc, #88]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007702:	4313      	orrs	r3, r2
 8007704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0308 	and.w	r3, r3, #8
 800770e:	2b00      	cmp	r3, #0
 8007710:	d009      	beq.n	8007726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007712:	4b12      	ldr	r3, [pc, #72]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	00db      	lsls	r3, r3, #3
 8007720:	490e      	ldr	r1, [pc, #56]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007722:	4313      	orrs	r3, r2
 8007724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007726:	f000 f821 	bl	800776c <HAL_RCC_GetSysClockFreq>
 800772a:	4602      	mov	r2, r0
 800772c:	4b0b      	ldr	r3, [pc, #44]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	091b      	lsrs	r3, r3, #4
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	490a      	ldr	r1, [pc, #40]	; (8007760 <HAL_RCC_ClockConfig+0x1c0>)
 8007738:	5ccb      	ldrb	r3, [r1, r3]
 800773a:	fa22 f303 	lsr.w	r3, r2, r3
 800773e:	4a09      	ldr	r2, [pc, #36]	; (8007764 <HAL_RCC_ClockConfig+0x1c4>)
 8007740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007742:	4b09      	ldr	r3, [pc, #36]	; (8007768 <HAL_RCC_ClockConfig+0x1c8>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f7fa ff0c 	bl	8002564 <HAL_InitTick>

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	40023c00 	.word	0x40023c00
 800775c:	40023800 	.word	0x40023800
 8007760:	08015e74 	.word	0x08015e74
 8007764:	20000000 	.word	0x20000000
 8007768:	20000004 	.word	0x20000004

0800776c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800776c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	607b      	str	r3, [r7, #4]
 8007778:	2300      	movs	r3, #0
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	2300      	movs	r3, #0
 800777e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007784:	4b67      	ldr	r3, [pc, #412]	; (8007924 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f003 030c 	and.w	r3, r3, #12
 800778c:	2b08      	cmp	r3, #8
 800778e:	d00d      	beq.n	80077ac <HAL_RCC_GetSysClockFreq+0x40>
 8007790:	2b08      	cmp	r3, #8
 8007792:	f200 80bd 	bhi.w	8007910 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <HAL_RCC_GetSysClockFreq+0x34>
 800779a:	2b04      	cmp	r3, #4
 800779c:	d003      	beq.n	80077a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800779e:	e0b7      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077a0:	4b61      	ldr	r3, [pc, #388]	; (8007928 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80077a2:	60bb      	str	r3, [r7, #8]
       break;
 80077a4:	e0b7      	b.n	8007916 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077a6:	4b60      	ldr	r3, [pc, #384]	; (8007928 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80077a8:	60bb      	str	r3, [r7, #8]
      break;
 80077aa:	e0b4      	b.n	8007916 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077ac:	4b5d      	ldr	r3, [pc, #372]	; (8007924 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077b6:	4b5b      	ldr	r3, [pc, #364]	; (8007924 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d04d      	beq.n	800785e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077c2:	4b58      	ldr	r3, [pc, #352]	; (8007924 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	099b      	lsrs	r3, r3, #6
 80077c8:	461a      	mov	r2, r3
 80077ca:	f04f 0300 	mov.w	r3, #0
 80077ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80077d2:	f04f 0100 	mov.w	r1, #0
 80077d6:	ea02 0800 	and.w	r8, r2, r0
 80077da:	ea03 0901 	and.w	r9, r3, r1
 80077de:	4640      	mov	r0, r8
 80077e0:	4649      	mov	r1, r9
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	f04f 0300 	mov.w	r3, #0
 80077ea:	014b      	lsls	r3, r1, #5
 80077ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80077f0:	0142      	lsls	r2, r0, #5
 80077f2:	4610      	mov	r0, r2
 80077f4:	4619      	mov	r1, r3
 80077f6:	ebb0 0008 	subs.w	r0, r0, r8
 80077fa:	eb61 0109 	sbc.w	r1, r1, r9
 80077fe:	f04f 0200 	mov.w	r2, #0
 8007802:	f04f 0300 	mov.w	r3, #0
 8007806:	018b      	lsls	r3, r1, #6
 8007808:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800780c:	0182      	lsls	r2, r0, #6
 800780e:	1a12      	subs	r2, r2, r0
 8007810:	eb63 0301 	sbc.w	r3, r3, r1
 8007814:	f04f 0000 	mov.w	r0, #0
 8007818:	f04f 0100 	mov.w	r1, #0
 800781c:	00d9      	lsls	r1, r3, #3
 800781e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007822:	00d0      	lsls	r0, r2, #3
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	eb12 0208 	adds.w	r2, r2, r8
 800782c:	eb43 0309 	adc.w	r3, r3, r9
 8007830:	f04f 0000 	mov.w	r0, #0
 8007834:	f04f 0100 	mov.w	r1, #0
 8007838:	0299      	lsls	r1, r3, #10
 800783a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800783e:	0290      	lsls	r0, r2, #10
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4610      	mov	r0, r2
 8007846:	4619      	mov	r1, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	461a      	mov	r2, r3
 800784c:	f04f 0300 	mov.w	r3, #0
 8007850:	f7f9 fa2a 	bl	8000ca8 <__aeabi_uldivmod>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4613      	mov	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	e04a      	b.n	80078f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800785e:	4b31      	ldr	r3, [pc, #196]	; (8007924 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	099b      	lsrs	r3, r3, #6
 8007864:	461a      	mov	r2, r3
 8007866:	f04f 0300 	mov.w	r3, #0
 800786a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800786e:	f04f 0100 	mov.w	r1, #0
 8007872:	ea02 0400 	and.w	r4, r2, r0
 8007876:	ea03 0501 	and.w	r5, r3, r1
 800787a:	4620      	mov	r0, r4
 800787c:	4629      	mov	r1, r5
 800787e:	f04f 0200 	mov.w	r2, #0
 8007882:	f04f 0300 	mov.w	r3, #0
 8007886:	014b      	lsls	r3, r1, #5
 8007888:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800788c:	0142      	lsls	r2, r0, #5
 800788e:	4610      	mov	r0, r2
 8007890:	4619      	mov	r1, r3
 8007892:	1b00      	subs	r0, r0, r4
 8007894:	eb61 0105 	sbc.w	r1, r1, r5
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	018b      	lsls	r3, r1, #6
 80078a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80078a6:	0182      	lsls	r2, r0, #6
 80078a8:	1a12      	subs	r2, r2, r0
 80078aa:	eb63 0301 	sbc.w	r3, r3, r1
 80078ae:	f04f 0000 	mov.w	r0, #0
 80078b2:	f04f 0100 	mov.w	r1, #0
 80078b6:	00d9      	lsls	r1, r3, #3
 80078b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80078bc:	00d0      	lsls	r0, r2, #3
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	1912      	adds	r2, r2, r4
 80078c4:	eb45 0303 	adc.w	r3, r5, r3
 80078c8:	f04f 0000 	mov.w	r0, #0
 80078cc:	f04f 0100 	mov.w	r1, #0
 80078d0:	0299      	lsls	r1, r3, #10
 80078d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80078d6:	0290      	lsls	r0, r2, #10
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4610      	mov	r0, r2
 80078de:	4619      	mov	r1, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	461a      	mov	r2, r3
 80078e4:	f04f 0300 	mov.w	r3, #0
 80078e8:	f7f9 f9de 	bl	8000ca8 <__aeabi_uldivmod>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4613      	mov	r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078f4:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	0c1b      	lsrs	r3, r3, #16
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	3301      	adds	r3, #1
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	fbb2 f3f3 	udiv	r3, r2, r3
 800790c:	60bb      	str	r3, [r7, #8]
      break;
 800790e:	e002      	b.n	8007916 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007910:	4b05      	ldr	r3, [pc, #20]	; (8007928 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007912:	60bb      	str	r3, [r7, #8]
      break;
 8007914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007916:	68bb      	ldr	r3, [r7, #8]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007922:	bf00      	nop
 8007924:	40023800 	.word	0x40023800
 8007928:	00f42400 	.word	0x00f42400

0800792c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007930:	4b03      	ldr	r3, [pc, #12]	; (8007940 <HAL_RCC_GetHCLKFreq+0x14>)
 8007932:	681b      	ldr	r3, [r3, #0]
}
 8007934:	4618      	mov	r0, r3
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	20000000 	.word	0x20000000

08007944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007948:	f7ff fff0 	bl	800792c <HAL_RCC_GetHCLKFreq>
 800794c:	4602      	mov	r2, r0
 800794e:	4b05      	ldr	r3, [pc, #20]	; (8007964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	0a9b      	lsrs	r3, r3, #10
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	4903      	ldr	r1, [pc, #12]	; (8007968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800795a:	5ccb      	ldrb	r3, [r1, r3]
 800795c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007960:	4618      	mov	r0, r3
 8007962:	bd80      	pop	{r7, pc}
 8007964:	40023800 	.word	0x40023800
 8007968:	08015e84 	.word	0x08015e84

0800796c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007970:	f7ff ffdc 	bl	800792c <HAL_RCC_GetHCLKFreq>
 8007974:	4602      	mov	r2, r0
 8007976:	4b05      	ldr	r3, [pc, #20]	; (800798c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	0b5b      	lsrs	r3, r3, #13
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	4903      	ldr	r1, [pc, #12]	; (8007990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007982:	5ccb      	ldrb	r3, [r1, r3]
 8007984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007988:	4618      	mov	r0, r3
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40023800 	.word	0x40023800
 8007990:	08015e84 	.word	0x08015e84

08007994 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	220f      	movs	r2, #15
 80079a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079a4:	4b12      	ldr	r3, [pc, #72]	; (80079f0 <HAL_RCC_GetClockConfig+0x5c>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 0203 	and.w	r2, r3, #3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80079b0:	4b0f      	ldr	r3, [pc, #60]	; (80079f0 <HAL_RCC_GetClockConfig+0x5c>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80079bc:	4b0c      	ldr	r3, [pc, #48]	; (80079f0 <HAL_RCC_GetClockConfig+0x5c>)
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80079c8:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <HAL_RCC_GetClockConfig+0x5c>)
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	08db      	lsrs	r3, r3, #3
 80079ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80079d6:	4b07      	ldr	r3, [pc, #28]	; (80079f4 <HAL_RCC_GetClockConfig+0x60>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 020f 	and.w	r2, r3, #15
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	601a      	str	r2, [r3, #0]
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	40023800 	.word	0x40023800
 80079f4:	40023c00 	.word	0x40023c00

080079f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10b      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d105      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d075      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a2c:	4bad      	ldr	r3, [pc, #692]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a32:	f7fc fa93 	bl	8003f5c <HAL_GetTick>
 8007a36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a38:	e008      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a3a:	f7fc fa8f 	bl	8003f5c <HAL_GetTick>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d901      	bls.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e18b      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a4c:	4ba6      	ldr	r3, [pc, #664]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1f0      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d009      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	019a      	lsls	r2, r3, #6
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	071b      	lsls	r3, r3, #28
 8007a70:	499d      	ldr	r1, [pc, #628]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d01f      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a84:	4b98      	ldr	r3, [pc, #608]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a8a:	0f1b      	lsrs	r3, r3, #28
 8007a8c:	f003 0307 	and.w	r3, r3, #7
 8007a90:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	019a      	lsls	r2, r3, #6
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	061b      	lsls	r3, r3, #24
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	071b      	lsls	r3, r3, #28
 8007aa4:	4990      	ldr	r1, [pc, #576]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007aac:	4b8e      	ldr	r3, [pc, #568]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab2:	f023 021f 	bic.w	r2, r3, #31
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	498a      	ldr	r1, [pc, #552]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00d      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	019a      	lsls	r2, r3, #6
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	061b      	lsls	r3, r3, #24
 8007adc:	431a      	orrs	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	071b      	lsls	r3, r3, #28
 8007ae4:	4980      	ldr	r1, [pc, #512]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007aec:	4b7d      	ldr	r3, [pc, #500]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007aee:	2201      	movs	r2, #1
 8007af0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007af2:	f7fc fa33 	bl	8003f5c <HAL_GetTick>
 8007af6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007af8:	e008      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007afa:	f7fc fa2f 	bl	8003f5c <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e12b      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b0c:	4b76      	ldr	r3, [pc, #472]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0f0      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d105      	bne.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d079      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007b30:	4b6e      	ldr	r3, [pc, #440]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b36:	f7fc fa11 	bl	8003f5c <HAL_GetTick>
 8007b3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b3c:	e008      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007b3e:	f7fc fa0d 	bl	8003f5c <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d901      	bls.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e109      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b50:	4b65      	ldr	r3, [pc, #404]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b5c:	d0ef      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0304 	and.w	r3, r3, #4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d020      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007b6a:	4b5f      	ldr	r3, [pc, #380]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b70:	0f1b      	lsrs	r3, r3, #28
 8007b72:	f003 0307 	and.w	r3, r3, #7
 8007b76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	019a      	lsls	r2, r3, #6
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	061b      	lsls	r3, r3, #24
 8007b84:	431a      	orrs	r2, r3
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	071b      	lsls	r3, r3, #28
 8007b8a:	4957      	ldr	r1, [pc, #348]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007b92:	4b55      	ldr	r3, [pc, #340]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	4950      	ldr	r1, [pc, #320]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0308 	and.w	r3, r3, #8
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01e      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007bb8:	4b4b      	ldr	r3, [pc, #300]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bbe:	0e1b      	lsrs	r3, r3, #24
 8007bc0:	f003 030f 	and.w	r3, r3, #15
 8007bc4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	019a      	lsls	r2, r3, #6
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	061b      	lsls	r3, r3, #24
 8007bd0:	431a      	orrs	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	071b      	lsls	r3, r3, #28
 8007bd8:	4943      	ldr	r1, [pc, #268]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007be0:	4b41      	ldr	r3, [pc, #260]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007be6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	493e      	ldr	r1, [pc, #248]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007bf6:	4b3d      	ldr	r3, [pc, #244]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bfc:	f7fc f9ae 	bl	8003f5c <HAL_GetTick>
 8007c00:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c02:	e008      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007c04:	f7fc f9aa 	bl	8003f5c <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d901      	bls.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e0a6      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c16:	4b34      	ldr	r3, [pc, #208]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c22:	d1ef      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0320 	and.w	r3, r3, #32
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 808d 	beq.w	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	4b2c      	ldr	r3, [pc, #176]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	4a2b      	ldr	r2, [pc, #172]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c40:	6413      	str	r3, [r2, #64]	; 0x40
 8007c42:	4b29      	ldr	r3, [pc, #164]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007c4e:	4b28      	ldr	r3, [pc, #160]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a27      	ldr	r2, [pc, #156]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c5a:	f7fc f97f 	bl	8003f5c <HAL_GetTick>
 8007c5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c60:	e008      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007c62:	f7fc f97b 	bl	8003f5c <HAL_GetTick>
 8007c66:	4602      	mov	r2, r0
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d901      	bls.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e077      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c74:	4b1e      	ldr	r3, [pc, #120]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d0f0      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c80:	4b19      	ldr	r3, [pc, #100]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c88:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d039      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d032      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c9e:	4b12      	ldr	r3, [pc, #72]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ca6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ca8:	4b12      	ldr	r3, [pc, #72]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007caa:	2201      	movs	r2, #1
 8007cac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007cae:	4b11      	ldr	r3, [pc, #68]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007cb4:	4a0c      	ldr	r2, [pc, #48]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007cba:	4b0b      	ldr	r3, [pc, #44]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d11e      	bne.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007cc6:	f7fc f949 	bl	8003f5c <HAL_GetTick>
 8007cca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ccc:	e014      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cce:	f7fc f945 	bl	8003f5c <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d90b      	bls.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e03f      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007ce4:	42470068 	.word	0x42470068
 8007ce8:	40023800 	.word	0x40023800
 8007cec:	42470070 	.word	0x42470070
 8007cf0:	40007000 	.word	0x40007000
 8007cf4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cf8:	4b1c      	ldr	r3, [pc, #112]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0e4      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d10:	d10d      	bne.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007d12:	4b16      	ldr	r3, [pc, #88]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d26:	4911      	ldr	r1, [pc, #68]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	608b      	str	r3, [r1, #8]
 8007d2c:	e005      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007d2e:	4b0f      	ldr	r3, [pc, #60]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	4a0e      	ldr	r2, [pc, #56]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007d38:	6093      	str	r3, [r2, #8]
 8007d3a:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d46:	4909      	ldr	r1, [pc, #36]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0310 	and.w	r3, r3, #16
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d004      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007d5e:	4b04      	ldr	r3, [pc, #16]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007d60:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	40023800 	.word	0x40023800
 8007d70:	424711e0 	.word	0x424711e0

08007d74 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e083      	b.n	8007e8e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	7f5b      	ldrb	r3, [r3, #29]
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d105      	bne.n	8007d9c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7fa fa06 	bl	80021a8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	22ca      	movs	r2, #202	; 0xca
 8007da8:	625a      	str	r2, [r3, #36]	; 0x24
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2253      	movs	r2, #83	; 0x53
 8007db0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fb7a 	bl	80084ac <RTC_EnterInitMode>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d008      	beq.n	8007dd0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	22ff      	movs	r2, #255	; 0xff
 8007dc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2204      	movs	r2, #4
 8007dca:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e05e      	b.n	8007e8e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6812      	ldr	r2, [r2, #0]
 8007dda:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007de2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6899      	ldr	r1, [r3, #8]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	431a      	orrs	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	68d2      	ldr	r2, [r2, #12]
 8007e0a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6919      	ldr	r1, [r3, #16]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	041a      	lsls	r2, r3, #16
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e2e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10e      	bne.n	8007e5c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fb0c 	bl	800845c <HAL_RTC_WaitForSynchro>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d008      	beq.n	8007e5c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	22ff      	movs	r2, #255	; 0xff
 8007e50:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2204      	movs	r2, #4
 8007e56:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e018      	b.n	8007e8e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e6a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699a      	ldr	r2, [r3, #24]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	22ff      	movs	r2, #255	; 0xff
 8007e84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
  }
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007e96:	b590      	push	{r4, r7, lr}
 8007e98:	b087      	sub	sp, #28
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	7f1b      	ldrb	r3, [r3, #28]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d101      	bne.n	8007eb2 <HAL_RTC_SetTime+0x1c>
 8007eae:	2302      	movs	r3, #2
 8007eb0:	e0aa      	b.n	8008008 <HAL_RTC_SetTime+0x172>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d126      	bne.n	8007f12 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d102      	bne.n	8007ed8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 fb11 	bl	8008504 <RTC_ByteToBcd2>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	785b      	ldrb	r3, [r3, #1]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fb0a 	bl	8008504 <RTC_ByteToBcd2>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007ef4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	789b      	ldrb	r3, [r3, #2]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fb02 	bl	8008504 <RTC_ByteToBcd2>
 8007f00:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007f02:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	78db      	ldrb	r3, [r3, #3]
 8007f0a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	617b      	str	r3, [r7, #20]
 8007f10:	e018      	b.n	8007f44 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d102      	bne.n	8007f26 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2200      	movs	r2, #0
 8007f24:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	785b      	ldrb	r3, [r3, #1]
 8007f30:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007f32:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007f38:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	78db      	ldrb	r3, [r3, #3]
 8007f3e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007f40:	4313      	orrs	r3, r2
 8007f42:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	22ca      	movs	r2, #202	; 0xca
 8007f4a:	625a      	str	r2, [r3, #36]	; 0x24
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2253      	movs	r2, #83	; 0x53
 8007f52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 faa9 	bl	80084ac <RTC_EnterInitMode>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00b      	beq.n	8007f78 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	22ff      	movs	r2, #255	; 0xff
 8007f66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2204      	movs	r2, #4
 8007f6c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e047      	b.n	8008008 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007f82:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007f86:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f96:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6899      	ldr	r1, [r3, #8]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fbe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f003 0320 	and.w	r3, r3, #32
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d111      	bne.n	8007ff2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 fa44 	bl	800845c <HAL_RTC_WaitForSynchro>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00b      	beq.n	8007ff2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	22ff      	movs	r2, #255	; 0xff
 8007fe0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2204      	movs	r2, #4
 8007fe6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e00a      	b.n	8008008 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	22ff      	movs	r2, #255	; 0xff
 8007ff8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008006:	2300      	movs	r3, #0
  }
}
 8008008:	4618      	mov	r0, r3
 800800a:	371c      	adds	r7, #28
 800800c:	46bd      	mov	sp, r7
 800800e:	bd90      	pop	{r4, r7, pc}

08008010 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008010:	b590      	push	{r4, r7, lr}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	7f1b      	ldrb	r3, [r3, #28]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d101      	bne.n	800802c <HAL_RTC_SetDate+0x1c>
 8008028:	2302      	movs	r3, #2
 800802a:	e094      	b.n	8008156 <HAL_RTC_SetDate+0x146>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2201      	movs	r2, #1
 8008030:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2202      	movs	r2, #2
 8008036:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10e      	bne.n	800805c <HAL_RTC_SetDate+0x4c>
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	785b      	ldrb	r3, [r3, #1]
 8008042:	f003 0310 	and.w	r3, r3, #16
 8008046:	2b00      	cmp	r3, #0
 8008048:	d008      	beq.n	800805c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	f023 0310 	bic.w	r3, r3, #16
 8008052:	b2db      	uxtb	r3, r3
 8008054:	330a      	adds	r3, #10
 8008056:	b2da      	uxtb	r2, r3
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d11c      	bne.n	800809c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	78db      	ldrb	r3, [r3, #3]
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fa4c 	bl	8008504 <RTC_ByteToBcd2>
 800806c:	4603      	mov	r3, r0
 800806e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	785b      	ldrb	r3, [r3, #1]
 8008074:	4618      	mov	r0, r3
 8008076:	f000 fa45 	bl	8008504 <RTC_ByteToBcd2>
 800807a:	4603      	mov	r3, r0
 800807c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800807e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	789b      	ldrb	r3, [r3, #2]
 8008084:	4618      	mov	r0, r3
 8008086:	f000 fa3d 	bl	8008504 <RTC_ByteToBcd2>
 800808a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800808c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]
 800809a:	e00e      	b.n	80080ba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	78db      	ldrb	r3, [r3, #3]
 80080a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	785b      	ldrb	r3, [r3, #1]
 80080a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80080a8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80080ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80080b6:	4313      	orrs	r3, r2
 80080b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	22ca      	movs	r2, #202	; 0xca
 80080c0:	625a      	str	r2, [r3, #36]	; 0x24
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2253      	movs	r2, #83	; 0x53
 80080c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 f9ee 	bl	80084ac <RTC_EnterInitMode>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00b      	beq.n	80080ee <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	22ff      	movs	r2, #255	; 0xff
 80080dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2204      	movs	r2, #4
 80080e2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e033      	b.n	8008156 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80080f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80080fc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800810c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b00      	cmp	r3, #0
 800811a:	d111      	bne.n	8008140 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 f99d 	bl	800845c <HAL_RTC_WaitForSynchro>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00b      	beq.n	8008140 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	22ff      	movs	r2, #255	; 0xff
 800812e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2204      	movs	r2, #4
 8008134:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e00a      	b.n	8008156 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	22ff      	movs	r2, #255	; 0xff
 8008146:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2201      	movs	r2, #1
 800814c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008154:	2300      	movs	r3, #0
  }
}
 8008156:	4618      	mov	r0, r3
 8008158:	371c      	adds	r7, #28
 800815a:	46bd      	mov	sp, r7
 800815c:	bd90      	pop	{r4, r7, pc}
	...

08008160 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008160:	b590      	push	{r4, r7, lr}
 8008162:	b089      	sub	sp, #36	; 0x24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	61fb      	str	r3, [r7, #28]
 8008170:	2300      	movs	r3, #0
 8008172:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8008174:	4b93      	ldr	r3, [pc, #588]	; (80083c4 <HAL_RTC_SetAlarm_IT+0x264>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a93      	ldr	r2, [pc, #588]	; (80083c8 <HAL_RTC_SetAlarm_IT+0x268>)
 800817a:	fba2 2303 	umull	r2, r3, r2, r3
 800817e:	0adb      	lsrs	r3, r3, #11
 8008180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008184:	fb02 f303 	mul.w	r3, r2, r3
 8008188:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	7f1b      	ldrb	r3, [r3, #28]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <HAL_RTC_SetAlarm_IT+0x36>
 8008192:	2302      	movs	r3, #2
 8008194:	e111      	b.n	80083ba <HAL_RTC_SetAlarm_IT+0x25a>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2202      	movs	r2, #2
 80081a0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d137      	bne.n	8008218 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d102      	bne.n	80081bc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2200      	movs	r2, #0
 80081ba:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 f99f 	bl	8008504 <RTC_ByteToBcd2>
 80081c6:	4603      	mov	r3, r0
 80081c8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	785b      	ldrb	r3, [r3, #1]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 f998 	bl	8008504 <RTC_ByteToBcd2>
 80081d4:	4603      	mov	r3, r0
 80081d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80081d8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	789b      	ldrb	r3, [r3, #2]
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 f990 	bl	8008504 <RTC_ByteToBcd2>
 80081e4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80081e6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	78db      	ldrb	r3, [r3, #3]
 80081ee:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80081f0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 f982 	bl	8008504 <RTC_ByteToBcd2>
 8008200:	4603      	mov	r3, r0
 8008202:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008204:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800820c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008212:	4313      	orrs	r3, r2
 8008214:	61fb      	str	r3, [r7, #28]
 8008216:	e023      	b.n	8008260 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	d102      	bne.n	800822c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2200      	movs	r2, #0
 800822a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	785b      	ldrb	r3, [r3, #1]
 8008236:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008238:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800823e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	78db      	ldrb	r3, [r3, #3]
 8008244:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008246:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800824e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008250:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008256:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800825c:	4313      	orrs	r3, r2
 800825e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	4313      	orrs	r3, r2
 800826a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	22ca      	movs	r2, #202	; 0xca
 8008272:	625a      	str	r2, [r3, #36]	; 0x24
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2253      	movs	r2, #83	; 0x53
 800827a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008284:	d141      	bne.n	800830a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	689a      	ldr	r2, [r3, #8]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008294:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	b2da      	uxtb	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80082a6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	1e5a      	subs	r2, r3, #1
 80082ac:	617a      	str	r2, [r7, #20]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10b      	bne.n	80082ca <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	22ff      	movs	r2, #255	; 0xff
 80082b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2203      	movs	r2, #3
 80082be:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e077      	b.n	80083ba <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d0e7      	beq.n	80082a8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	69fa      	ldr	r2, [r7, #28]
 80082de:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689a      	ldr	r2, [r3, #8]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082f6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689a      	ldr	r2, [r3, #8]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008306:	609a      	str	r2, [r3, #8]
 8008308:	e040      	b.n	800838c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689a      	ldr	r2, [r3, #8]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008318:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	b2da      	uxtb	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f462 7220 	orn	r2, r2, #640	; 0x280
 800832a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	1e5a      	subs	r2, r3, #1
 8008330:	617a      	str	r2, [r7, #20]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10b      	bne.n	800834e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	22ff      	movs	r2, #255	; 0xff
 800833c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2203      	movs	r2, #3
 8008342:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e035      	b.n	80083ba <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	f003 0302 	and.w	r3, r3, #2
 8008358:	2b00      	cmp	r3, #0
 800835a:	d0e7      	beq.n	800832c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69fa      	ldr	r2, [r7, #28]
 8008362:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	69ba      	ldr	r2, [r7, #24]
 800836a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689a      	ldr	r2, [r3, #8]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800837a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800838a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800838c:	4b0f      	ldr	r3, [pc, #60]	; (80083cc <HAL_RTC_SetAlarm_IT+0x26c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a0e      	ldr	r2, [pc, #56]	; (80083cc <HAL_RTC_SetAlarm_IT+0x26c>)
 8008392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008396:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8008398:	4b0c      	ldr	r3, [pc, #48]	; (80083cc <HAL_RTC_SetAlarm_IT+0x26c>)
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	4a0b      	ldr	r2, [pc, #44]	; (80083cc <HAL_RTC_SetAlarm_IT+0x26c>)
 800839e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083a2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	22ff      	movs	r2, #255	; 0xff
 80083aa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2201      	movs	r2, #1
 80083b0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3724      	adds	r7, #36	; 0x24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd90      	pop	{r4, r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20000000 	.word	0x20000000
 80083c8:	10624dd3 	.word	0x10624dd3
 80083cc:	40013c00 	.word	0x40013c00

080083d0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d012      	beq.n	800840c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00b      	beq.n	800840c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7fb fc83 	bl	8003d00 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	b2da      	uxtb	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800840a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d012      	beq.n	8008440 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00b      	beq.n	8008440 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f8e1 	bl	80085f0 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	b2da      	uxtb	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800843e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008440:	4b05      	ldr	r3, [pc, #20]	; (8008458 <HAL_RTC_AlarmIRQHandler+0x88>)
 8008442:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008446:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	775a      	strb	r2, [r3, #29]
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	40013c00 	.word	0x40013c00

0800845c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68da      	ldr	r2, [r3, #12]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008476:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008478:	f7fb fd70 	bl	8003f5c <HAL_GetTick>
 800847c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800847e:	e009      	b.n	8008494 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008480:	f7fb fd6c 	bl	8003f5c <HAL_GetTick>
 8008484:	4602      	mov	r2, r0
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800848e:	d901      	bls.n	8008494 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008490:	2303      	movs	r3, #3
 8008492:	e007      	b.n	80084a4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0ee      	beq.n	8008480 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d119      	bne.n	80084fa <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f04f 32ff 	mov.w	r2, #4294967295
 80084ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80084d0:	f7fb fd44 	bl	8003f5c <HAL_GetTick>
 80084d4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80084d6:	e009      	b.n	80084ec <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80084d8:	f7fb fd40 	bl	8003f5c <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084e6:	d901      	bls.n	80084ec <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e007      	b.n	80084fc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d0ee      	beq.n	80084d8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	4603      	mov	r3, r0
 800850c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008512:	e005      	b.n	8008520 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	3301      	adds	r3, #1
 8008518:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800851a:	79fb      	ldrb	r3, [r7, #7]
 800851c:	3b0a      	subs	r3, #10
 800851e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008520:	79fb      	ldrb	r3, [r7, #7]
 8008522:	2b09      	cmp	r3, #9
 8008524:	d8f6      	bhi.n	8008514 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	b2db      	uxtb	r3, r3
 800852a:	011b      	lsls	r3, r3, #4
 800852c:	b2da      	uxtb	r2, r3
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	4313      	orrs	r3, r2
 8008532:	b2db      	uxtb	r3, r3
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008548:	2300      	movs	r3, #0
 800854a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	7f1b      	ldrb	r3, [r3, #28]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d101      	bne.n	8008558 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8008554:	2302      	movs	r3, #2
 8008556:	e047      	b.n	80085e8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2202      	movs	r2, #2
 8008562:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	22ca      	movs	r2, #202	; 0xca
 800856a:	625a      	str	r2, [r3, #36]	; 0x24
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2253      	movs	r2, #83	; 0x53
 8008572:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689a      	ldr	r2, [r3, #8]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008582:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008592:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008594:	f7fb fce2 	bl	8003f5c <HAL_GetTick>
 8008598:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800859a:	e013      	b.n	80085c4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800859c:	f7fb fcde 	bl	8003f5c <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085aa:	d90b      	bls.n	80085c4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	22ff      	movs	r2, #255	; 0xff
 80085b2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2203      	movs	r2, #3
 80085b8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e011      	b.n	80085e8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	f003 0304 	and.w	r3, r3, #4
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0e4      	beq.n	800859c <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	22ff      	movs	r2, #255	; 0xff
 80085d8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e056      	b.n	80086c4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d106      	bne.n	8008636 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7f9 fdd5 	bl	80021e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2202      	movs	r2, #2
 800863a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800864c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	431a      	orrs	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	431a      	orrs	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	431a      	orrs	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	431a      	orrs	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008672:	431a      	orrs	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	69db      	ldr	r3, [r3, #28]
 8008678:	431a      	orrs	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	ea42 0103 	orr.w	r1, r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	0c1b      	lsrs	r3, r3, #16
 8008694:	f003 0104 	and.w	r1, r3, #4
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	430a      	orrs	r2, r1
 80086a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	69da      	ldr	r2, [r3, #28]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e01d      	b.n	800871a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d106      	bne.n	80086f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f815 	bl	8008722 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2202      	movs	r2, #2
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	3304      	adds	r3, #4
 8008708:	4619      	mov	r1, r3
 800870a:	4610      	mov	r0, r2
 800870c:	f000 fa58 	bl	8008bc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800872a:	bf00      	nop
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008736:	b480      	push	{r7}
 8008738:	b085      	sub	sp, #20
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68da      	ldr	r2, [r3, #12]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f042 0201 	orr.w	r2, r2, #1
 800874c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f003 0307 	and.w	r3, r3, #7
 8008758:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2b06      	cmp	r3, #6
 800875e:	d007      	beq.n	8008770 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0201 	orr.w	r2, r2, #1
 800876e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b082      	sub	sp, #8
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d101      	bne.n	8008790 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	e01d      	b.n	80087cc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b00      	cmp	r3, #0
 800879a:	d106      	bne.n	80087aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f7f9 fdd1 	bl	800234c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2202      	movs	r2, #2
 80087ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	3304      	adds	r3, #4
 80087ba:	4619      	mov	r1, r3
 80087bc:	4610      	mov	r0, r2
 80087be:	f000 f9ff 	bl	8008bc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d122      	bne.n	8008830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d11b      	bne.n	8008830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f06f 0202 	mvn.w	r2, #2
 8008800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	f003 0303 	and.w	r3, r3, #3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f9b4 	bl	8008b84 <HAL_TIM_IC_CaptureCallback>
 800881c:	e005      	b.n	800882a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f9a6 	bl	8008b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f9b7 	bl	8008b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	f003 0304 	and.w	r3, r3, #4
 800883a:	2b04      	cmp	r3, #4
 800883c:	d122      	bne.n	8008884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b04      	cmp	r3, #4
 800884a:	d11b      	bne.n	8008884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f06f 0204 	mvn.w	r2, #4
 8008854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2202      	movs	r2, #2
 800885a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f98a 	bl	8008b84 <HAL_TIM_IC_CaptureCallback>
 8008870:	e005      	b.n	800887e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f97c 	bl	8008b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f98d 	bl	8008b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b08      	cmp	r3, #8
 8008890:	d122      	bne.n	80088d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f003 0308 	and.w	r3, r3, #8
 800889c:	2b08      	cmp	r3, #8
 800889e:	d11b      	bne.n	80088d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f06f 0208 	mvn.w	r2, #8
 80088a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2204      	movs	r2, #4
 80088ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f960 	bl	8008b84 <HAL_TIM_IC_CaptureCallback>
 80088c4:	e005      	b.n	80088d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f952 	bl	8008b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f963 	bl	8008b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	f003 0310 	and.w	r3, r3, #16
 80088e2:	2b10      	cmp	r3, #16
 80088e4:	d122      	bne.n	800892c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f003 0310 	and.w	r3, r3, #16
 80088f0:	2b10      	cmp	r3, #16
 80088f2:	d11b      	bne.n	800892c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f06f 0210 	mvn.w	r2, #16
 80088fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2208      	movs	r2, #8
 8008902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f936 	bl	8008b84 <HAL_TIM_IC_CaptureCallback>
 8008918:	e005      	b.n	8008926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f928 	bl	8008b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f939 	bl	8008b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b01      	cmp	r3, #1
 8008938:	d10e      	bne.n	8008958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b01      	cmp	r3, #1
 8008946:	d107      	bne.n	8008958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f06f 0201 	mvn.w	r2, #1
 8008950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7f9 facc 	bl	8001ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008962:	2b80      	cmp	r3, #128	; 0x80
 8008964:	d10e      	bne.n	8008984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008970:	2b80      	cmp	r3, #128	; 0x80
 8008972:	d107      	bne.n	8008984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800897c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fbf4 	bl	800916c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898e:	2b40      	cmp	r3, #64	; 0x40
 8008990:	d10e      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899c:	2b40      	cmp	r3, #64	; 0x40
 800899e:	d107      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f8fe 	bl	8008bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b20      	cmp	r3, #32
 80089bc:	d10e      	bne.n	80089dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f003 0320 	and.w	r3, r3, #32
 80089c8:	2b20      	cmp	r3, #32
 80089ca:	d107      	bne.n	80089dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f06f 0220 	mvn.w	r2, #32
 80089d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fbbe 	bl	8009158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d101      	bne.n	80089fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80089fa:	2302      	movs	r3, #2
 80089fc:	e0b4      	b.n	8008b68 <HAL_TIM_PWM_ConfigChannel+0x184>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2202      	movs	r2, #2
 8008a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2b0c      	cmp	r3, #12
 8008a12:	f200 809f 	bhi.w	8008b54 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008a16:	a201      	add	r2, pc, #4	; (adr r2, 8008a1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008a51 	.word	0x08008a51
 8008a20:	08008b55 	.word	0x08008b55
 8008a24:	08008b55 	.word	0x08008b55
 8008a28:	08008b55 	.word	0x08008b55
 8008a2c:	08008a91 	.word	0x08008a91
 8008a30:	08008b55 	.word	0x08008b55
 8008a34:	08008b55 	.word	0x08008b55
 8008a38:	08008b55 	.word	0x08008b55
 8008a3c:	08008ad3 	.word	0x08008ad3
 8008a40:	08008b55 	.word	0x08008b55
 8008a44:	08008b55 	.word	0x08008b55
 8008a48:	08008b55 	.word	0x08008b55
 8008a4c:	08008b13 	.word	0x08008b13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68b9      	ldr	r1, [r7, #8]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 f952 	bl	8008d00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	699a      	ldr	r2, [r3, #24]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f042 0208 	orr.w	r2, r2, #8
 8008a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	699a      	ldr	r2, [r3, #24]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0204 	bic.w	r2, r2, #4
 8008a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6999      	ldr	r1, [r3, #24]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	691a      	ldr	r2, [r3, #16]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	619a      	str	r2, [r3, #24]
      break;
 8008a8e:	e062      	b.n	8008b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68b9      	ldr	r1, [r7, #8]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 f9a2 	bl	8008de0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	699a      	ldr	r2, [r3, #24]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699a      	ldr	r2, [r3, #24]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6999      	ldr	r1, [r3, #24]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	021a      	lsls	r2, r3, #8
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	430a      	orrs	r2, r1
 8008ace:	619a      	str	r2, [r3, #24]
      break;
 8008ad0:	e041      	b.n	8008b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68b9      	ldr	r1, [r7, #8]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 f9f7 	bl	8008ecc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	69da      	ldr	r2, [r3, #28]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f042 0208 	orr.w	r2, r2, #8
 8008aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	69da      	ldr	r2, [r3, #28]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f022 0204 	bic.w	r2, r2, #4
 8008afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	69d9      	ldr	r1, [r3, #28]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	691a      	ldr	r2, [r3, #16]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	61da      	str	r2, [r3, #28]
      break;
 8008b10:	e021      	b.n	8008b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68b9      	ldr	r1, [r7, #8]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fa4b 	bl	8008fb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	69da      	ldr	r2, [r3, #28]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	69da      	ldr	r2, [r3, #28]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	69d9      	ldr	r1, [r3, #28]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	021a      	lsls	r2, r3, #8
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	61da      	str	r2, [r3, #28]
      break;
 8008b52:	e000      	b.n	8008b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008b54:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a40      	ldr	r2, [pc, #256]	; (8008cd4 <TIM_Base_SetConfig+0x114>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d013      	beq.n	8008c00 <TIM_Base_SetConfig+0x40>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bde:	d00f      	beq.n	8008c00 <TIM_Base_SetConfig+0x40>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a3d      	ldr	r2, [pc, #244]	; (8008cd8 <TIM_Base_SetConfig+0x118>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d00b      	beq.n	8008c00 <TIM_Base_SetConfig+0x40>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a3c      	ldr	r2, [pc, #240]	; (8008cdc <TIM_Base_SetConfig+0x11c>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d007      	beq.n	8008c00 <TIM_Base_SetConfig+0x40>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a3b      	ldr	r2, [pc, #236]	; (8008ce0 <TIM_Base_SetConfig+0x120>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d003      	beq.n	8008c00 <TIM_Base_SetConfig+0x40>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a3a      	ldr	r2, [pc, #232]	; (8008ce4 <TIM_Base_SetConfig+0x124>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d108      	bne.n	8008c12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a2f      	ldr	r2, [pc, #188]	; (8008cd4 <TIM_Base_SetConfig+0x114>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d02b      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c20:	d027      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a2c      	ldr	r2, [pc, #176]	; (8008cd8 <TIM_Base_SetConfig+0x118>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d023      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a2b      	ldr	r2, [pc, #172]	; (8008cdc <TIM_Base_SetConfig+0x11c>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d01f      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a2a      	ldr	r2, [pc, #168]	; (8008ce0 <TIM_Base_SetConfig+0x120>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d01b      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a29      	ldr	r2, [pc, #164]	; (8008ce4 <TIM_Base_SetConfig+0x124>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d017      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a28      	ldr	r2, [pc, #160]	; (8008ce8 <TIM_Base_SetConfig+0x128>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d013      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a27      	ldr	r2, [pc, #156]	; (8008cec <TIM_Base_SetConfig+0x12c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d00f      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a26      	ldr	r2, [pc, #152]	; (8008cf0 <TIM_Base_SetConfig+0x130>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d00b      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a25      	ldr	r2, [pc, #148]	; (8008cf4 <TIM_Base_SetConfig+0x134>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d007      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a24      	ldr	r2, [pc, #144]	; (8008cf8 <TIM_Base_SetConfig+0x138>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d003      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a23      	ldr	r2, [pc, #140]	; (8008cfc <TIM_Base_SetConfig+0x13c>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d108      	bne.n	8008c84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	689a      	ldr	r2, [r3, #8]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a0a      	ldr	r2, [pc, #40]	; (8008cd4 <TIM_Base_SetConfig+0x114>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d003      	beq.n	8008cb8 <TIM_Base_SetConfig+0xf8>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a0c      	ldr	r2, [pc, #48]	; (8008ce4 <TIM_Base_SetConfig+0x124>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d103      	bne.n	8008cc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	691a      	ldr	r2, [r3, #16]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	615a      	str	r2, [r3, #20]
}
 8008cc6:	bf00      	nop
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	40010000 	.word	0x40010000
 8008cd8:	40000400 	.word	0x40000400
 8008cdc:	40000800 	.word	0x40000800
 8008ce0:	40000c00 	.word	0x40000c00
 8008ce4:	40010400 	.word	0x40010400
 8008ce8:	40014000 	.word	0x40014000
 8008cec:	40014400 	.word	0x40014400
 8008cf0:	40014800 	.word	0x40014800
 8008cf4:	40001800 	.word	0x40001800
 8008cf8:	40001c00 	.word	0x40001c00
 8008cfc:	40002000 	.word	0x40002000

08008d00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b087      	sub	sp, #28
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	f023 0201 	bic.w	r2, r3, #1
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f023 0303 	bic.w	r3, r3, #3
 8008d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f023 0302 	bic.w	r3, r3, #2
 8008d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a20      	ldr	r2, [pc, #128]	; (8008dd8 <TIM_OC1_SetConfig+0xd8>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d003      	beq.n	8008d64 <TIM_OC1_SetConfig+0x64>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a1f      	ldr	r2, [pc, #124]	; (8008ddc <TIM_OC1_SetConfig+0xdc>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d10c      	bne.n	8008d7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f023 0308 	bic.w	r3, r3, #8
 8008d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f023 0304 	bic.w	r3, r3, #4
 8008d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a15      	ldr	r2, [pc, #84]	; (8008dd8 <TIM_OC1_SetConfig+0xd8>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d003      	beq.n	8008d8e <TIM_OC1_SetConfig+0x8e>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a14      	ldr	r2, [pc, #80]	; (8008ddc <TIM_OC1_SetConfig+0xdc>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d111      	bne.n	8008db2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	621a      	str	r2, [r3, #32]
}
 8008dcc:	bf00      	nop
 8008dce:	371c      	adds	r7, #28
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	40010000 	.word	0x40010000
 8008ddc:	40010400 	.word	0x40010400

08008de0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	f023 0210 	bic.w	r2, r3, #16
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	021b      	lsls	r3, r3, #8
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	f023 0320 	bic.w	r3, r3, #32
 8008e2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	011b      	lsls	r3, r3, #4
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a22      	ldr	r2, [pc, #136]	; (8008ec4 <TIM_OC2_SetConfig+0xe4>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d003      	beq.n	8008e48 <TIM_OC2_SetConfig+0x68>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a21      	ldr	r2, [pc, #132]	; (8008ec8 <TIM_OC2_SetConfig+0xe8>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d10d      	bne.n	8008e64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	011b      	lsls	r3, r3, #4
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a17      	ldr	r2, [pc, #92]	; (8008ec4 <TIM_OC2_SetConfig+0xe4>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d003      	beq.n	8008e74 <TIM_OC2_SetConfig+0x94>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a16      	ldr	r2, [pc, #88]	; (8008ec8 <TIM_OC2_SetConfig+0xe8>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d113      	bne.n	8008e9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	621a      	str	r2, [r3, #32]
}
 8008eb6:	bf00      	nop
 8008eb8:	371c      	adds	r7, #28
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	40010000 	.word	0x40010000
 8008ec8:	40010400 	.word	0x40010400

08008ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b087      	sub	sp, #28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a1b      	ldr	r3, [r3, #32]
 8008eda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f023 0303 	bic.w	r3, r3, #3
 8008f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	021b      	lsls	r3, r3, #8
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a21      	ldr	r2, [pc, #132]	; (8008fac <TIM_OC3_SetConfig+0xe0>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d003      	beq.n	8008f32 <TIM_OC3_SetConfig+0x66>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a20      	ldr	r2, [pc, #128]	; (8008fb0 <TIM_OC3_SetConfig+0xe4>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d10d      	bne.n	8008f4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	021b      	lsls	r3, r3, #8
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a16      	ldr	r2, [pc, #88]	; (8008fac <TIM_OC3_SetConfig+0xe0>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d003      	beq.n	8008f5e <TIM_OC3_SetConfig+0x92>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a15      	ldr	r2, [pc, #84]	; (8008fb0 <TIM_OC3_SetConfig+0xe4>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d113      	bne.n	8008f86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	695b      	ldr	r3, [r3, #20]
 8008f72:	011b      	lsls	r3, r3, #4
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	011b      	lsls	r3, r3, #4
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	621a      	str	r2, [r3, #32]
}
 8008fa0:	bf00      	nop
 8008fa2:	371c      	adds	r7, #28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	40010000 	.word	0x40010000
 8008fb0:	40010400 	.word	0x40010400

08008fb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b087      	sub	sp, #28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a1b      	ldr	r3, [r3, #32]
 8008fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	021b      	lsls	r3, r3, #8
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	031b      	lsls	r3, r3, #12
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	4313      	orrs	r3, r2
 800900a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a12      	ldr	r2, [pc, #72]	; (8009058 <TIM_OC4_SetConfig+0xa4>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d003      	beq.n	800901c <TIM_OC4_SetConfig+0x68>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a11      	ldr	r2, [pc, #68]	; (800905c <TIM_OC4_SetConfig+0xa8>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d109      	bne.n	8009030 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	695b      	ldr	r3, [r3, #20]
 8009028:	019b      	lsls	r3, r3, #6
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	4313      	orrs	r3, r2
 800902e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	621a      	str	r2, [r3, #32]
}
 800904a:	bf00      	nop
 800904c:	371c      	adds	r7, #28
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	40010000 	.word	0x40010000
 800905c:	40010400 	.word	0x40010400

08009060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009070:	2b01      	cmp	r3, #1
 8009072:	d101      	bne.n	8009078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009074:	2302      	movs	r3, #2
 8009076:	e05a      	b.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2202      	movs	r2, #2
 8009084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800909e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a21      	ldr	r2, [pc, #132]	; (800913c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d022      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c4:	d01d      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a1d      	ldr	r2, [pc, #116]	; (8009140 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d018      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a1b      	ldr	r2, [pc, #108]	; (8009144 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d013      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a1a      	ldr	r2, [pc, #104]	; (8009148 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d00e      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a18      	ldr	r2, [pc, #96]	; (800914c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d009      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a17      	ldr	r2, [pc, #92]	; (8009150 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d004      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a15      	ldr	r2, [pc, #84]	; (8009154 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d10c      	bne.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	4313      	orrs	r3, r2
 8009112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	40010000 	.word	0x40010000
 8009140:	40000400 	.word	0x40000400
 8009144:	40000800 	.word	0x40000800
 8009148:	40000c00 	.word	0x40000c00
 800914c:	40010400 	.word	0x40010400
 8009150:	40014000 	.word	0x40014000
 8009154:	40001800 	.word	0x40001800

08009158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e03f      	b.n	8009212 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7f9 f928 	bl	80023fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2224      	movs	r2, #36	; 0x24
 80091b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f9b1 	bl	800952c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691a      	ldr	r2, [r3, #16]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	695a      	ldr	r2, [r3, #20]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68da      	ldr	r2, [r3, #12]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2220      	movs	r2, #32
 8009204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2220      	movs	r2, #32
 800920c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b088      	sub	sp, #32
 800921e:	af02      	add	r7, sp, #8
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	603b      	str	r3, [r7, #0]
 8009226:	4613      	mov	r3, r2
 8009228:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b20      	cmp	r3, #32
 8009238:	f040 8083 	bne.w	8009342 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d002      	beq.n	8009248 <HAL_UART_Transmit+0x2e>
 8009242:	88fb      	ldrh	r3, [r7, #6]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e07b      	b.n	8009344 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009252:	2b01      	cmp	r3, #1
 8009254:	d101      	bne.n	800925a <HAL_UART_Transmit+0x40>
 8009256:	2302      	movs	r3, #2
 8009258:	e074      	b.n	8009344 <HAL_UART_Transmit+0x12a>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2221      	movs	r2, #33	; 0x21
 800926c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009270:	f7fa fe74 	bl	8003f5c <HAL_GetTick>
 8009274:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	88fa      	ldrh	r2, [r7, #6]
 800927a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	88fa      	ldrh	r2, [r7, #6]
 8009280:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800928a:	e042      	b.n	8009312 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009290:	b29b      	uxth	r3, r3
 8009292:	3b01      	subs	r3, #1
 8009294:	b29a      	uxth	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092a2:	d122      	bne.n	80092ea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2200      	movs	r2, #0
 80092ac:	2180      	movs	r1, #128	; 0x80
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 f8f2 	bl	8009498 <UART_WaitOnFlagUntilTimeout>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e042      	b.n	8009344 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	461a      	mov	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092d0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d103      	bne.n	80092e2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	3302      	adds	r3, #2
 80092de:	60bb      	str	r3, [r7, #8]
 80092e0:	e017      	b.n	8009312 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	3301      	adds	r3, #1
 80092e6:	60bb      	str	r3, [r7, #8]
 80092e8:	e013      	b.n	8009312 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2200      	movs	r2, #0
 80092f2:	2180      	movs	r1, #128	; 0x80
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 f8cf 	bl	8009498 <UART_WaitOnFlagUntilTimeout>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	e01f      	b.n	8009344 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	1c5a      	adds	r2, r3, #1
 8009308:	60ba      	str	r2, [r7, #8]
 800930a:	781a      	ldrb	r2, [r3, #0]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009316:	b29b      	uxth	r3, r3
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1b7      	bne.n	800928c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	2200      	movs	r2, #0
 8009324:	2140      	movs	r1, #64	; 0x40
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f000 f8b6 	bl	8009498 <UART_WaitOnFlagUntilTimeout>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	e006      	b.n	8009344 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2220      	movs	r2, #32
 800933a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	e000      	b.n	8009344 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009342:	2302      	movs	r3, #2
  }
}
 8009344:	4618      	mov	r0, r3
 8009346:	3718      	adds	r7, #24
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b088      	sub	sp, #32
 8009350:	af02      	add	r7, sp, #8
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	603b      	str	r3, [r7, #0]
 8009358:	4613      	mov	r3, r2
 800935a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800935c:	2300      	movs	r3, #0
 800935e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b20      	cmp	r3, #32
 800936a:	f040 8090 	bne.w	800948e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <HAL_UART_Receive+0x2e>
 8009374:	88fb      	ldrh	r3, [r7, #6]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e088      	b.n	8009490 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009384:	2b01      	cmp	r3, #1
 8009386:	d101      	bne.n	800938c <HAL_UART_Receive+0x40>
 8009388:	2302      	movs	r3, #2
 800938a:	e081      	b.n	8009490 <HAL_UART_Receive+0x144>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2222      	movs	r2, #34	; 0x22
 800939e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80093a2:	f7fa fddb 	bl	8003f5c <HAL_GetTick>
 80093a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	88fa      	ldrh	r2, [r7, #6]
 80093ac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	88fa      	ldrh	r2, [r7, #6]
 80093b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80093bc:	e05c      	b.n	8009478 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	3b01      	subs	r3, #1
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d4:	d12b      	bne.n	800942e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2200      	movs	r2, #0
 80093de:	2120      	movs	r1, #32
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 f859 	bl	8009498 <UART_WaitOnFlagUntilTimeout>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80093ec:	2303      	movs	r3, #3
 80093ee:	e04f      	b.n	8009490 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10c      	bne.n	8009416 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	b29b      	uxth	r3, r3
 8009404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009408:	b29a      	uxth	r2, r3
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	3302      	adds	r3, #2
 8009412:	60bb      	str	r3, [r7, #8]
 8009414:	e030      	b.n	8009478 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	b29b      	uxth	r3, r3
 800941e:	b2db      	uxtb	r3, r3
 8009420:	b29a      	uxth	r2, r3
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	3301      	adds	r3, #1
 800942a:	60bb      	str	r3, [r7, #8]
 800942c:	e024      	b.n	8009478 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2200      	movs	r2, #0
 8009436:	2120      	movs	r1, #32
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 f82d 	bl	8009498 <UART_WaitOnFlagUntilTimeout>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d001      	beq.n	8009448 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	e023      	b.n	8009490 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d108      	bne.n	8009462 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6859      	ldr	r1, [r3, #4]
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	60ba      	str	r2, [r7, #8]
 800945c:	b2ca      	uxtb	r2, r1
 800945e:	701a      	strb	r2, [r3, #0]
 8009460:	e00a      	b.n	8009478 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	b2da      	uxtb	r2, r3
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	1c59      	adds	r1, r3, #1
 800946e:	60b9      	str	r1, [r7, #8]
 8009470:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009474:	b2d2      	uxtb	r2, r2
 8009476:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800947c:	b29b      	uxth	r3, r3
 800947e:	2b00      	cmp	r3, #0
 8009480:	d19d      	bne.n	80093be <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2220      	movs	r2, #32
 8009486:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	e000      	b.n	8009490 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800948e:	2302      	movs	r3, #2
  }
}
 8009490:	4618      	mov	r0, r3
 8009492:	3718      	adds	r7, #24
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	603b      	str	r3, [r7, #0]
 80094a4:	4613      	mov	r3, r2
 80094a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094a8:	e02c      	b.n	8009504 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b0:	d028      	beq.n	8009504 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d007      	beq.n	80094c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80094b8:	f7fa fd50 	bl	8003f5c <HAL_GetTick>
 80094bc:	4602      	mov	r2, r0
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	69ba      	ldr	r2, [r7, #24]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d21d      	bcs.n	8009504 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68da      	ldr	r2, [r3, #12]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80094d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	695a      	ldr	r2, [r3, #20]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f022 0201 	bic.w	r2, r2, #1
 80094e6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2220      	movs	r2, #32
 80094ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2220      	movs	r2, #32
 80094f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e00f      	b.n	8009524 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	4013      	ands	r3, r2
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	429a      	cmp	r2, r3
 8009512:	bf0c      	ite	eq
 8009514:	2301      	moveq	r3, #1
 8009516:	2300      	movne	r3, #0
 8009518:	b2db      	uxtb	r3, r3
 800951a:	461a      	mov	r2, r3
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	429a      	cmp	r2, r3
 8009520:	d0c3      	beq.n	80094aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800952c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009530:	b0bd      	sub	sp, #244	; 0xf4
 8009532:	af00      	add	r7, sp, #0
 8009534:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009548:	68d9      	ldr	r1, [r3, #12]
 800954a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	ea40 0301 	orr.w	r3, r0, r1
 8009554:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	431a      	orrs	r2, r3
 8009564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	431a      	orrs	r2, r3
 800956c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009570:	69db      	ldr	r3, [r3, #28]
 8009572:	4313      	orrs	r3, r2
 8009574:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8009578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009584:	f021 010c 	bic.w	r1, r1, #12
 8009588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009592:	430b      	orrs	r3, r1
 8009594:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80095a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a6:	6999      	ldr	r1, [r3, #24]
 80095a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	ea40 0301 	orr.w	r3, r0, r1
 80095b2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095be:	f040 81a5 	bne.w	800990c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80095c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	4bcd      	ldr	r3, [pc, #820]	; (8009900 <UART_SetConfig+0x3d4>)
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d006      	beq.n	80095dc <UART_SetConfig+0xb0>
 80095ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	4bcb      	ldr	r3, [pc, #812]	; (8009904 <UART_SetConfig+0x3d8>)
 80095d6:	429a      	cmp	r2, r3
 80095d8:	f040 80cb 	bne.w	8009772 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095dc:	f7fe f9c6 	bl	800796c <HAL_RCC_GetPCLK2Freq>
 80095e0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095e8:	461c      	mov	r4, r3
 80095ea:	f04f 0500 	mov.w	r5, #0
 80095ee:	4622      	mov	r2, r4
 80095f0:	462b      	mov	r3, r5
 80095f2:	1891      	adds	r1, r2, r2
 80095f4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80095f8:	415b      	adcs	r3, r3
 80095fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80095fe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009602:	1912      	adds	r2, r2, r4
 8009604:	eb45 0303 	adc.w	r3, r5, r3
 8009608:	f04f 0000 	mov.w	r0, #0
 800960c:	f04f 0100 	mov.w	r1, #0
 8009610:	00d9      	lsls	r1, r3, #3
 8009612:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009616:	00d0      	lsls	r0, r2, #3
 8009618:	4602      	mov	r2, r0
 800961a:	460b      	mov	r3, r1
 800961c:	1911      	adds	r1, r2, r4
 800961e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8009622:	416b      	adcs	r3, r5
 8009624:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	461a      	mov	r2, r3
 8009630:	f04f 0300 	mov.w	r3, #0
 8009634:	1891      	adds	r1, r2, r2
 8009636:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800963a:	415b      	adcs	r3, r3
 800963c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009640:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009644:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009648:	f7f7 fb2e 	bl	8000ca8 <__aeabi_uldivmod>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4bad      	ldr	r3, [pc, #692]	; (8009908 <UART_SetConfig+0x3dc>)
 8009652:	fba3 2302 	umull	r2, r3, r3, r2
 8009656:	095b      	lsrs	r3, r3, #5
 8009658:	011e      	lsls	r6, r3, #4
 800965a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800965e:	461c      	mov	r4, r3
 8009660:	f04f 0500 	mov.w	r5, #0
 8009664:	4622      	mov	r2, r4
 8009666:	462b      	mov	r3, r5
 8009668:	1891      	adds	r1, r2, r2
 800966a:	67b9      	str	r1, [r7, #120]	; 0x78
 800966c:	415b      	adcs	r3, r3
 800966e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009670:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009674:	1912      	adds	r2, r2, r4
 8009676:	eb45 0303 	adc.w	r3, r5, r3
 800967a:	f04f 0000 	mov.w	r0, #0
 800967e:	f04f 0100 	mov.w	r1, #0
 8009682:	00d9      	lsls	r1, r3, #3
 8009684:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009688:	00d0      	lsls	r0, r2, #3
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	1911      	adds	r1, r2, r4
 8009690:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8009694:	416b      	adcs	r3, r5
 8009696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800969a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	461a      	mov	r2, r3
 80096a2:	f04f 0300 	mov.w	r3, #0
 80096a6:	1891      	adds	r1, r2, r2
 80096a8:	6739      	str	r1, [r7, #112]	; 0x70
 80096aa:	415b      	adcs	r3, r3
 80096ac:	677b      	str	r3, [r7, #116]	; 0x74
 80096ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80096b2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80096b6:	f7f7 faf7 	bl	8000ca8 <__aeabi_uldivmod>
 80096ba:	4602      	mov	r2, r0
 80096bc:	460b      	mov	r3, r1
 80096be:	4b92      	ldr	r3, [pc, #584]	; (8009908 <UART_SetConfig+0x3dc>)
 80096c0:	fba3 1302 	umull	r1, r3, r3, r2
 80096c4:	095b      	lsrs	r3, r3, #5
 80096c6:	2164      	movs	r1, #100	; 0x64
 80096c8:	fb01 f303 	mul.w	r3, r1, r3
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	00db      	lsls	r3, r3, #3
 80096d0:	3332      	adds	r3, #50	; 0x32
 80096d2:	4a8d      	ldr	r2, [pc, #564]	; (8009908 <UART_SetConfig+0x3dc>)
 80096d4:	fba2 2303 	umull	r2, r3, r2, r3
 80096d8:	095b      	lsrs	r3, r3, #5
 80096da:	005b      	lsls	r3, r3, #1
 80096dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80096e0:	441e      	add	r6, r3
 80096e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096e6:	4618      	mov	r0, r3
 80096e8:	f04f 0100 	mov.w	r1, #0
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	1894      	adds	r4, r2, r2
 80096f2:	66bc      	str	r4, [r7, #104]	; 0x68
 80096f4:	415b      	adcs	r3, r3
 80096f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80096fc:	1812      	adds	r2, r2, r0
 80096fe:	eb41 0303 	adc.w	r3, r1, r3
 8009702:	f04f 0400 	mov.w	r4, #0
 8009706:	f04f 0500 	mov.w	r5, #0
 800970a:	00dd      	lsls	r5, r3, #3
 800970c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009710:	00d4      	lsls	r4, r2, #3
 8009712:	4622      	mov	r2, r4
 8009714:	462b      	mov	r3, r5
 8009716:	1814      	adds	r4, r2, r0
 8009718:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800971c:	414b      	adcs	r3, r1
 800971e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	461a      	mov	r2, r3
 800972a:	f04f 0300 	mov.w	r3, #0
 800972e:	1891      	adds	r1, r2, r2
 8009730:	6639      	str	r1, [r7, #96]	; 0x60
 8009732:	415b      	adcs	r3, r3
 8009734:	667b      	str	r3, [r7, #100]	; 0x64
 8009736:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800973a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800973e:	f7f7 fab3 	bl	8000ca8 <__aeabi_uldivmod>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	4b70      	ldr	r3, [pc, #448]	; (8009908 <UART_SetConfig+0x3dc>)
 8009748:	fba3 1302 	umull	r1, r3, r3, r2
 800974c:	095b      	lsrs	r3, r3, #5
 800974e:	2164      	movs	r1, #100	; 0x64
 8009750:	fb01 f303 	mul.w	r3, r1, r3
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	00db      	lsls	r3, r3, #3
 8009758:	3332      	adds	r3, #50	; 0x32
 800975a:	4a6b      	ldr	r2, [pc, #428]	; (8009908 <UART_SetConfig+0x3dc>)
 800975c:	fba2 2303 	umull	r2, r3, r2, r3
 8009760:	095b      	lsrs	r3, r3, #5
 8009762:	f003 0207 	and.w	r2, r3, #7
 8009766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4432      	add	r2, r6
 800976e:	609a      	str	r2, [r3, #8]
 8009770:	e26d      	b.n	8009c4e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009772:	f7fe f8e7 	bl	8007944 <HAL_RCC_GetPCLK1Freq>
 8009776:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800977a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800977e:	461c      	mov	r4, r3
 8009780:	f04f 0500 	mov.w	r5, #0
 8009784:	4622      	mov	r2, r4
 8009786:	462b      	mov	r3, r5
 8009788:	1891      	adds	r1, r2, r2
 800978a:	65b9      	str	r1, [r7, #88]	; 0x58
 800978c:	415b      	adcs	r3, r3
 800978e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009790:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009794:	1912      	adds	r2, r2, r4
 8009796:	eb45 0303 	adc.w	r3, r5, r3
 800979a:	f04f 0000 	mov.w	r0, #0
 800979e:	f04f 0100 	mov.w	r1, #0
 80097a2:	00d9      	lsls	r1, r3, #3
 80097a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80097a8:	00d0      	lsls	r0, r2, #3
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	1911      	adds	r1, r2, r4
 80097b0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80097b4:	416b      	adcs	r3, r5
 80097b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	461a      	mov	r2, r3
 80097c2:	f04f 0300 	mov.w	r3, #0
 80097c6:	1891      	adds	r1, r2, r2
 80097c8:	6539      	str	r1, [r7, #80]	; 0x50
 80097ca:	415b      	adcs	r3, r3
 80097cc:	657b      	str	r3, [r7, #84]	; 0x54
 80097ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80097d2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80097d6:	f7f7 fa67 	bl	8000ca8 <__aeabi_uldivmod>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	4b4a      	ldr	r3, [pc, #296]	; (8009908 <UART_SetConfig+0x3dc>)
 80097e0:	fba3 2302 	umull	r2, r3, r3, r2
 80097e4:	095b      	lsrs	r3, r3, #5
 80097e6:	011e      	lsls	r6, r3, #4
 80097e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097ec:	461c      	mov	r4, r3
 80097ee:	f04f 0500 	mov.w	r5, #0
 80097f2:	4622      	mov	r2, r4
 80097f4:	462b      	mov	r3, r5
 80097f6:	1891      	adds	r1, r2, r2
 80097f8:	64b9      	str	r1, [r7, #72]	; 0x48
 80097fa:	415b      	adcs	r3, r3
 80097fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009802:	1912      	adds	r2, r2, r4
 8009804:	eb45 0303 	adc.w	r3, r5, r3
 8009808:	f04f 0000 	mov.w	r0, #0
 800980c:	f04f 0100 	mov.w	r1, #0
 8009810:	00d9      	lsls	r1, r3, #3
 8009812:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009816:	00d0      	lsls	r0, r2, #3
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	1911      	adds	r1, r2, r4
 800981e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8009822:	416b      	adcs	r3, r5
 8009824:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	461a      	mov	r2, r3
 8009830:	f04f 0300 	mov.w	r3, #0
 8009834:	1891      	adds	r1, r2, r2
 8009836:	6439      	str	r1, [r7, #64]	; 0x40
 8009838:	415b      	adcs	r3, r3
 800983a:	647b      	str	r3, [r7, #68]	; 0x44
 800983c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009840:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009844:	f7f7 fa30 	bl	8000ca8 <__aeabi_uldivmod>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4b2e      	ldr	r3, [pc, #184]	; (8009908 <UART_SetConfig+0x3dc>)
 800984e:	fba3 1302 	umull	r1, r3, r3, r2
 8009852:	095b      	lsrs	r3, r3, #5
 8009854:	2164      	movs	r1, #100	; 0x64
 8009856:	fb01 f303 	mul.w	r3, r1, r3
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	00db      	lsls	r3, r3, #3
 800985e:	3332      	adds	r3, #50	; 0x32
 8009860:	4a29      	ldr	r2, [pc, #164]	; (8009908 <UART_SetConfig+0x3dc>)
 8009862:	fba2 2303 	umull	r2, r3, r2, r3
 8009866:	095b      	lsrs	r3, r3, #5
 8009868:	005b      	lsls	r3, r3, #1
 800986a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800986e:	441e      	add	r6, r3
 8009870:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009874:	4618      	mov	r0, r3
 8009876:	f04f 0100 	mov.w	r1, #0
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	1894      	adds	r4, r2, r2
 8009880:	63bc      	str	r4, [r7, #56]	; 0x38
 8009882:	415b      	adcs	r3, r3
 8009884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009886:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800988a:	1812      	adds	r2, r2, r0
 800988c:	eb41 0303 	adc.w	r3, r1, r3
 8009890:	f04f 0400 	mov.w	r4, #0
 8009894:	f04f 0500 	mov.w	r5, #0
 8009898:	00dd      	lsls	r5, r3, #3
 800989a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800989e:	00d4      	lsls	r4, r2, #3
 80098a0:	4622      	mov	r2, r4
 80098a2:	462b      	mov	r3, r5
 80098a4:	1814      	adds	r4, r2, r0
 80098a6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80098aa:	414b      	adcs	r3, r1
 80098ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	461a      	mov	r2, r3
 80098b8:	f04f 0300 	mov.w	r3, #0
 80098bc:	1891      	adds	r1, r2, r2
 80098be:	6339      	str	r1, [r7, #48]	; 0x30
 80098c0:	415b      	adcs	r3, r3
 80098c2:	637b      	str	r3, [r7, #52]	; 0x34
 80098c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80098c8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80098cc:	f7f7 f9ec 	bl	8000ca8 <__aeabi_uldivmod>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	4b0c      	ldr	r3, [pc, #48]	; (8009908 <UART_SetConfig+0x3dc>)
 80098d6:	fba3 1302 	umull	r1, r3, r3, r2
 80098da:	095b      	lsrs	r3, r3, #5
 80098dc:	2164      	movs	r1, #100	; 0x64
 80098de:	fb01 f303 	mul.w	r3, r1, r3
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	00db      	lsls	r3, r3, #3
 80098e6:	3332      	adds	r3, #50	; 0x32
 80098e8:	4a07      	ldr	r2, [pc, #28]	; (8009908 <UART_SetConfig+0x3dc>)
 80098ea:	fba2 2303 	umull	r2, r3, r2, r3
 80098ee:	095b      	lsrs	r3, r3, #5
 80098f0:	f003 0207 	and.w	r2, r3, #7
 80098f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4432      	add	r2, r6
 80098fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80098fe:	e1a6      	b.n	8009c4e <UART_SetConfig+0x722>
 8009900:	40011000 	.word	0x40011000
 8009904:	40011400 	.word	0x40011400
 8009908:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800990c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	4bd1      	ldr	r3, [pc, #836]	; (8009c58 <UART_SetConfig+0x72c>)
 8009914:	429a      	cmp	r2, r3
 8009916:	d006      	beq.n	8009926 <UART_SetConfig+0x3fa>
 8009918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	4bcf      	ldr	r3, [pc, #828]	; (8009c5c <UART_SetConfig+0x730>)
 8009920:	429a      	cmp	r2, r3
 8009922:	f040 80ca 	bne.w	8009aba <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009926:	f7fe f821 	bl	800796c <HAL_RCC_GetPCLK2Freq>
 800992a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800992e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009932:	461c      	mov	r4, r3
 8009934:	f04f 0500 	mov.w	r5, #0
 8009938:	4622      	mov	r2, r4
 800993a:	462b      	mov	r3, r5
 800993c:	1891      	adds	r1, r2, r2
 800993e:	62b9      	str	r1, [r7, #40]	; 0x28
 8009940:	415b      	adcs	r3, r3
 8009942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009948:	1912      	adds	r2, r2, r4
 800994a:	eb45 0303 	adc.w	r3, r5, r3
 800994e:	f04f 0000 	mov.w	r0, #0
 8009952:	f04f 0100 	mov.w	r1, #0
 8009956:	00d9      	lsls	r1, r3, #3
 8009958:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800995c:	00d0      	lsls	r0, r2, #3
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	eb12 0a04 	adds.w	sl, r2, r4
 8009966:	eb43 0b05 	adc.w	fp, r3, r5
 800996a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	4618      	mov	r0, r3
 8009972:	f04f 0100 	mov.w	r1, #0
 8009976:	f04f 0200 	mov.w	r2, #0
 800997a:	f04f 0300 	mov.w	r3, #0
 800997e:	008b      	lsls	r3, r1, #2
 8009980:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009984:	0082      	lsls	r2, r0, #2
 8009986:	4650      	mov	r0, sl
 8009988:	4659      	mov	r1, fp
 800998a:	f7f7 f98d 	bl	8000ca8 <__aeabi_uldivmod>
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	4bb3      	ldr	r3, [pc, #716]	; (8009c60 <UART_SetConfig+0x734>)
 8009994:	fba3 2302 	umull	r2, r3, r3, r2
 8009998:	095b      	lsrs	r3, r3, #5
 800999a:	011e      	lsls	r6, r3, #4
 800999c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099a0:	4618      	mov	r0, r3
 80099a2:	f04f 0100 	mov.w	r1, #0
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	1894      	adds	r4, r2, r2
 80099ac:	623c      	str	r4, [r7, #32]
 80099ae:	415b      	adcs	r3, r3
 80099b0:	627b      	str	r3, [r7, #36]	; 0x24
 80099b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80099b6:	1812      	adds	r2, r2, r0
 80099b8:	eb41 0303 	adc.w	r3, r1, r3
 80099bc:	f04f 0400 	mov.w	r4, #0
 80099c0:	f04f 0500 	mov.w	r5, #0
 80099c4:	00dd      	lsls	r5, r3, #3
 80099c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80099ca:	00d4      	lsls	r4, r2, #3
 80099cc:	4622      	mov	r2, r4
 80099ce:	462b      	mov	r3, r5
 80099d0:	1814      	adds	r4, r2, r0
 80099d2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80099d6:	414b      	adcs	r3, r1
 80099d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f04f 0100 	mov.w	r1, #0
 80099e8:	f04f 0200 	mov.w	r2, #0
 80099ec:	f04f 0300 	mov.w	r3, #0
 80099f0:	008b      	lsls	r3, r1, #2
 80099f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80099f6:	0082      	lsls	r2, r0, #2
 80099f8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80099fc:	f7f7 f954 	bl	8000ca8 <__aeabi_uldivmod>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4b96      	ldr	r3, [pc, #600]	; (8009c60 <UART_SetConfig+0x734>)
 8009a06:	fba3 1302 	umull	r1, r3, r3, r2
 8009a0a:	095b      	lsrs	r3, r3, #5
 8009a0c:	2164      	movs	r1, #100	; 0x64
 8009a0e:	fb01 f303 	mul.w	r3, r1, r3
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	011b      	lsls	r3, r3, #4
 8009a16:	3332      	adds	r3, #50	; 0x32
 8009a18:	4a91      	ldr	r2, [pc, #580]	; (8009c60 <UART_SetConfig+0x734>)
 8009a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a1e:	095b      	lsrs	r3, r3, #5
 8009a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a24:	441e      	add	r6, r3
 8009a26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f04f 0100 	mov.w	r1, #0
 8009a30:	4602      	mov	r2, r0
 8009a32:	460b      	mov	r3, r1
 8009a34:	1894      	adds	r4, r2, r2
 8009a36:	61bc      	str	r4, [r7, #24]
 8009a38:	415b      	adcs	r3, r3
 8009a3a:	61fb      	str	r3, [r7, #28]
 8009a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a40:	1812      	adds	r2, r2, r0
 8009a42:	eb41 0303 	adc.w	r3, r1, r3
 8009a46:	f04f 0400 	mov.w	r4, #0
 8009a4a:	f04f 0500 	mov.w	r5, #0
 8009a4e:	00dd      	lsls	r5, r3, #3
 8009a50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a54:	00d4      	lsls	r4, r2, #3
 8009a56:	4622      	mov	r2, r4
 8009a58:	462b      	mov	r3, r5
 8009a5a:	1814      	adds	r4, r2, r0
 8009a5c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8009a60:	414b      	adcs	r3, r1
 8009a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f04f 0100 	mov.w	r1, #0
 8009a72:	f04f 0200 	mov.w	r2, #0
 8009a76:	f04f 0300 	mov.w	r3, #0
 8009a7a:	008b      	lsls	r3, r1, #2
 8009a7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a80:	0082      	lsls	r2, r0, #2
 8009a82:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009a86:	f7f7 f90f 	bl	8000ca8 <__aeabi_uldivmod>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	4b74      	ldr	r3, [pc, #464]	; (8009c60 <UART_SetConfig+0x734>)
 8009a90:	fba3 1302 	umull	r1, r3, r3, r2
 8009a94:	095b      	lsrs	r3, r3, #5
 8009a96:	2164      	movs	r1, #100	; 0x64
 8009a98:	fb01 f303 	mul.w	r3, r1, r3
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	011b      	lsls	r3, r3, #4
 8009aa0:	3332      	adds	r3, #50	; 0x32
 8009aa2:	4a6f      	ldr	r2, [pc, #444]	; (8009c60 <UART_SetConfig+0x734>)
 8009aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa8:	095b      	lsrs	r3, r3, #5
 8009aaa:	f003 020f 	and.w	r2, r3, #15
 8009aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4432      	add	r2, r6
 8009ab6:	609a      	str	r2, [r3, #8]
 8009ab8:	e0c9      	b.n	8009c4e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009aba:	f7fd ff43 	bl	8007944 <HAL_RCC_GetPCLK1Freq>
 8009abe:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ac2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ac6:	461c      	mov	r4, r3
 8009ac8:	f04f 0500 	mov.w	r5, #0
 8009acc:	4622      	mov	r2, r4
 8009ace:	462b      	mov	r3, r5
 8009ad0:	1891      	adds	r1, r2, r2
 8009ad2:	6139      	str	r1, [r7, #16]
 8009ad4:	415b      	adcs	r3, r3
 8009ad6:	617b      	str	r3, [r7, #20]
 8009ad8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009adc:	1912      	adds	r2, r2, r4
 8009ade:	eb45 0303 	adc.w	r3, r5, r3
 8009ae2:	f04f 0000 	mov.w	r0, #0
 8009ae6:	f04f 0100 	mov.w	r1, #0
 8009aea:	00d9      	lsls	r1, r3, #3
 8009aec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009af0:	00d0      	lsls	r0, r2, #3
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	eb12 0804 	adds.w	r8, r2, r4
 8009afa:	eb43 0905 	adc.w	r9, r3, r5
 8009afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f04f 0100 	mov.w	r1, #0
 8009b0a:	f04f 0200 	mov.w	r2, #0
 8009b0e:	f04f 0300 	mov.w	r3, #0
 8009b12:	008b      	lsls	r3, r1, #2
 8009b14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b18:	0082      	lsls	r2, r0, #2
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	f7f7 f8c3 	bl	8000ca8 <__aeabi_uldivmod>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	4b4e      	ldr	r3, [pc, #312]	; (8009c60 <UART_SetConfig+0x734>)
 8009b28:	fba3 2302 	umull	r2, r3, r3, r2
 8009b2c:	095b      	lsrs	r3, r3, #5
 8009b2e:	011e      	lsls	r6, r3, #4
 8009b30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b34:	4618      	mov	r0, r3
 8009b36:	f04f 0100 	mov.w	r1, #0
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	1894      	adds	r4, r2, r2
 8009b40:	60bc      	str	r4, [r7, #8]
 8009b42:	415b      	adcs	r3, r3
 8009b44:	60fb      	str	r3, [r7, #12]
 8009b46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b4a:	1812      	adds	r2, r2, r0
 8009b4c:	eb41 0303 	adc.w	r3, r1, r3
 8009b50:	f04f 0400 	mov.w	r4, #0
 8009b54:	f04f 0500 	mov.w	r5, #0
 8009b58:	00dd      	lsls	r5, r3, #3
 8009b5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009b5e:	00d4      	lsls	r4, r2, #3
 8009b60:	4622      	mov	r2, r4
 8009b62:	462b      	mov	r3, r5
 8009b64:	1814      	adds	r4, r2, r0
 8009b66:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8009b6a:	414b      	adcs	r3, r1
 8009b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f04f 0100 	mov.w	r1, #0
 8009b7c:	f04f 0200 	mov.w	r2, #0
 8009b80:	f04f 0300 	mov.w	r3, #0
 8009b84:	008b      	lsls	r3, r1, #2
 8009b86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b8a:	0082      	lsls	r2, r0, #2
 8009b8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009b90:	f7f7 f88a 	bl	8000ca8 <__aeabi_uldivmod>
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	4b31      	ldr	r3, [pc, #196]	; (8009c60 <UART_SetConfig+0x734>)
 8009b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8009b9e:	095b      	lsrs	r3, r3, #5
 8009ba0:	2164      	movs	r1, #100	; 0x64
 8009ba2:	fb01 f303 	mul.w	r3, r1, r3
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	011b      	lsls	r3, r3, #4
 8009baa:	3332      	adds	r3, #50	; 0x32
 8009bac:	4a2c      	ldr	r2, [pc, #176]	; (8009c60 <UART_SetConfig+0x734>)
 8009bae:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb2:	095b      	lsrs	r3, r3, #5
 8009bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bb8:	441e      	add	r6, r3
 8009bba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f04f 0100 	mov.w	r1, #0
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	1894      	adds	r4, r2, r2
 8009bca:	603c      	str	r4, [r7, #0]
 8009bcc:	415b      	adcs	r3, r3
 8009bce:	607b      	str	r3, [r7, #4]
 8009bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bd4:	1812      	adds	r2, r2, r0
 8009bd6:	eb41 0303 	adc.w	r3, r1, r3
 8009bda:	f04f 0400 	mov.w	r4, #0
 8009bde:	f04f 0500 	mov.w	r5, #0
 8009be2:	00dd      	lsls	r5, r3, #3
 8009be4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009be8:	00d4      	lsls	r4, r2, #3
 8009bea:	4622      	mov	r2, r4
 8009bec:	462b      	mov	r3, r5
 8009bee:	1814      	adds	r4, r2, r0
 8009bf0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009bf4:	414b      	adcs	r3, r1
 8009bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f04f 0100 	mov.w	r1, #0
 8009c06:	f04f 0200 	mov.w	r2, #0
 8009c0a:	f04f 0300 	mov.w	r3, #0
 8009c0e:	008b      	lsls	r3, r1, #2
 8009c10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009c14:	0082      	lsls	r2, r0, #2
 8009c16:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009c1a:	f7f7 f845 	bl	8000ca8 <__aeabi_uldivmod>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	4b0f      	ldr	r3, [pc, #60]	; (8009c60 <UART_SetConfig+0x734>)
 8009c24:	fba3 1302 	umull	r1, r3, r3, r2
 8009c28:	095b      	lsrs	r3, r3, #5
 8009c2a:	2164      	movs	r1, #100	; 0x64
 8009c2c:	fb01 f303 	mul.w	r3, r1, r3
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	011b      	lsls	r3, r3, #4
 8009c34:	3332      	adds	r3, #50	; 0x32
 8009c36:	4a0a      	ldr	r2, [pc, #40]	; (8009c60 <UART_SetConfig+0x734>)
 8009c38:	fba2 2303 	umull	r2, r3, r2, r3
 8009c3c:	095b      	lsrs	r3, r3, #5
 8009c3e:	f003 020f 	and.w	r2, r3, #15
 8009c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4432      	add	r2, r6
 8009c4a:	609a      	str	r2, [r3, #8]
}
 8009c4c:	e7ff      	b.n	8009c4e <UART_SetConfig+0x722>
 8009c4e:	bf00      	nop
 8009c50:	37f4      	adds	r7, #244	; 0xf4
 8009c52:	46bd      	mov	sp, r7
 8009c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c58:	40011000 	.word	0x40011000
 8009c5c:	40011400 	.word	0x40011400
 8009c60:	51eb851f 	.word	0x51eb851f

08009c64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c64:	b084      	sub	sp, #16
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b084      	sub	sp, #16
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	f107 001c 	add.w	r0, r7, #28
 8009c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d122      	bne.n	8009cc2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d105      	bne.n	8009cb6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f001 fac6 	bl	800b248 <USB_CoreReset>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73fb      	strb	r3, [r7, #15]
 8009cc0:	e01a      	b.n	8009cf8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f001 faba 	bl	800b248 <USB_CoreReset>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d106      	bne.n	8009cec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	639a      	str	r2, [r3, #56]	; 0x38
 8009cea:	e005      	b.n	8009cf8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d10b      	bne.n	8009d16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	f043 0206 	orr.w	r2, r3, #6
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	f043 0220 	orr.w	r2, r3, #32
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d22:	b004      	add	sp, #16
 8009d24:	4770      	bx	lr
	...

08009d28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	4613      	mov	r3, r2
 8009d34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009d36:	79fb      	ldrb	r3, [r7, #7]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d165      	bne.n	8009e08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	4a41      	ldr	r2, [pc, #260]	; (8009e44 <USB_SetTurnaroundTime+0x11c>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d906      	bls.n	8009d52 <USB_SetTurnaroundTime+0x2a>
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	4a40      	ldr	r2, [pc, #256]	; (8009e48 <USB_SetTurnaroundTime+0x120>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d202      	bcs.n	8009d52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009d4c:	230f      	movs	r3, #15
 8009d4e:	617b      	str	r3, [r7, #20]
 8009d50:	e062      	b.n	8009e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	4a3c      	ldr	r2, [pc, #240]	; (8009e48 <USB_SetTurnaroundTime+0x120>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d306      	bcc.n	8009d68 <USB_SetTurnaroundTime+0x40>
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	4a3b      	ldr	r2, [pc, #236]	; (8009e4c <USB_SetTurnaroundTime+0x124>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d202      	bcs.n	8009d68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009d62:	230e      	movs	r3, #14
 8009d64:	617b      	str	r3, [r7, #20]
 8009d66:	e057      	b.n	8009e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	4a38      	ldr	r2, [pc, #224]	; (8009e4c <USB_SetTurnaroundTime+0x124>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d306      	bcc.n	8009d7e <USB_SetTurnaroundTime+0x56>
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	4a37      	ldr	r2, [pc, #220]	; (8009e50 <USB_SetTurnaroundTime+0x128>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d202      	bcs.n	8009d7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009d78:	230d      	movs	r3, #13
 8009d7a:	617b      	str	r3, [r7, #20]
 8009d7c:	e04c      	b.n	8009e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	4a33      	ldr	r2, [pc, #204]	; (8009e50 <USB_SetTurnaroundTime+0x128>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d306      	bcc.n	8009d94 <USB_SetTurnaroundTime+0x6c>
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	4a32      	ldr	r2, [pc, #200]	; (8009e54 <USB_SetTurnaroundTime+0x12c>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d802      	bhi.n	8009d94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009d8e:	230c      	movs	r3, #12
 8009d90:	617b      	str	r3, [r7, #20]
 8009d92:	e041      	b.n	8009e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	4a2f      	ldr	r2, [pc, #188]	; (8009e54 <USB_SetTurnaroundTime+0x12c>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d906      	bls.n	8009daa <USB_SetTurnaroundTime+0x82>
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	4a2e      	ldr	r2, [pc, #184]	; (8009e58 <USB_SetTurnaroundTime+0x130>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d802      	bhi.n	8009daa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009da4:	230b      	movs	r3, #11
 8009da6:	617b      	str	r3, [r7, #20]
 8009da8:	e036      	b.n	8009e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	4a2a      	ldr	r2, [pc, #168]	; (8009e58 <USB_SetTurnaroundTime+0x130>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d906      	bls.n	8009dc0 <USB_SetTurnaroundTime+0x98>
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	4a29      	ldr	r2, [pc, #164]	; (8009e5c <USB_SetTurnaroundTime+0x134>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d802      	bhi.n	8009dc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009dba:	230a      	movs	r3, #10
 8009dbc:	617b      	str	r3, [r7, #20]
 8009dbe:	e02b      	b.n	8009e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	4a26      	ldr	r2, [pc, #152]	; (8009e5c <USB_SetTurnaroundTime+0x134>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d906      	bls.n	8009dd6 <USB_SetTurnaroundTime+0xae>
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	4a25      	ldr	r2, [pc, #148]	; (8009e60 <USB_SetTurnaroundTime+0x138>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d202      	bcs.n	8009dd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009dd0:	2309      	movs	r3, #9
 8009dd2:	617b      	str	r3, [r7, #20]
 8009dd4:	e020      	b.n	8009e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	4a21      	ldr	r2, [pc, #132]	; (8009e60 <USB_SetTurnaroundTime+0x138>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d306      	bcc.n	8009dec <USB_SetTurnaroundTime+0xc4>
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	4a20      	ldr	r2, [pc, #128]	; (8009e64 <USB_SetTurnaroundTime+0x13c>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d802      	bhi.n	8009dec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009de6:	2308      	movs	r3, #8
 8009de8:	617b      	str	r3, [r7, #20]
 8009dea:	e015      	b.n	8009e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	4a1d      	ldr	r2, [pc, #116]	; (8009e64 <USB_SetTurnaroundTime+0x13c>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d906      	bls.n	8009e02 <USB_SetTurnaroundTime+0xda>
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	4a1c      	ldr	r2, [pc, #112]	; (8009e68 <USB_SetTurnaroundTime+0x140>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d202      	bcs.n	8009e02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009dfc:	2307      	movs	r3, #7
 8009dfe:	617b      	str	r3, [r7, #20]
 8009e00:	e00a      	b.n	8009e18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009e02:	2306      	movs	r3, #6
 8009e04:	617b      	str	r3, [r7, #20]
 8009e06:	e007      	b.n	8009e18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009e08:	79fb      	ldrb	r3, [r7, #7]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d102      	bne.n	8009e14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009e0e:	2309      	movs	r3, #9
 8009e10:	617b      	str	r3, [r7, #20]
 8009e12:	e001      	b.n	8009e18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009e14:	2309      	movs	r3, #9
 8009e16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	68da      	ldr	r2, [r3, #12]
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	029b      	lsls	r3, r3, #10
 8009e2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009e30:	431a      	orrs	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	371c      	adds	r7, #28
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr
 8009e44:	00d8acbf 	.word	0x00d8acbf
 8009e48:	00e4e1c0 	.word	0x00e4e1c0
 8009e4c:	00f42400 	.word	0x00f42400
 8009e50:	01067380 	.word	0x01067380
 8009e54:	011a499f 	.word	0x011a499f
 8009e58:	01312cff 	.word	0x01312cff
 8009e5c:	014ca43f 	.word	0x014ca43f
 8009e60:	016e3600 	.word	0x016e3600
 8009e64:	01a6ab1f 	.word	0x01a6ab1f
 8009e68:	01e84800 	.word	0x01e84800

08009e6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f043 0201 	orr.w	r2, r3, #1
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	f023 0201 	bic.w	r2, r3, #1
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009ec8:	78fb      	ldrb	r3, [r7, #3]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d106      	bne.n	8009edc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	60da      	str	r2, [r3, #12]
 8009eda:	e00b      	b.n	8009ef4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009edc:	78fb      	ldrb	r3, [r7, #3]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d106      	bne.n	8009ef0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	60da      	str	r2, [r3, #12]
 8009eee:	e001      	b.n	8009ef4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e003      	b.n	8009efc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009ef4:	2032      	movs	r0, #50	; 0x32
 8009ef6:	f7fa f83d 	bl	8003f74 <HAL_Delay>

  return HAL_OK;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f04:	b084      	sub	sp, #16
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b086      	sub	sp, #24
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009f1e:	2300      	movs	r3, #0
 8009f20:	613b      	str	r3, [r7, #16]
 8009f22:	e009      	b.n	8009f38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	3340      	adds	r3, #64	; 0x40
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	2200      	movs	r2, #0
 8009f30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	3301      	adds	r3, #1
 8009f36:	613b      	str	r3, [r7, #16]
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	2b0e      	cmp	r3, #14
 8009f3c:	d9f2      	bls.n	8009f24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d11c      	bne.n	8009f7e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f52:	f043 0302 	orr.w	r3, r3, #2
 8009f56:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f68:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f74:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	639a      	str	r2, [r3, #56]	; 0x38
 8009f7c:	e00b      	b.n	8009f96 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa8:	4619      	mov	r1, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	680b      	ldr	r3, [r1, #0]
 8009fb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d10c      	bne.n	8009fd6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d104      	bne.n	8009fcc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f949 	bl	800a25c <USB_SetDevSpeed>
 8009fca:	e008      	b.n	8009fde <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009fcc:	2101      	movs	r1, #1
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f944 	bl	800a25c <USB_SetDevSpeed>
 8009fd4:	e003      	b.n	8009fde <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009fd6:	2103      	movs	r1, #3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f93f 	bl	800a25c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009fde:	2110      	movs	r1, #16
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 f8f3 	bl	800a1cc <USB_FlushTxFifo>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f911 	bl	800a218 <USB_FlushRxFifo>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a006:	461a      	mov	r2, r3
 800a008:	2300      	movs	r3, #0
 800a00a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a012:	461a      	mov	r2, r3
 800a014:	2300      	movs	r3, #0
 800a016:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a01e:	461a      	mov	r2, r3
 800a020:	2300      	movs	r3, #0
 800a022:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a024:	2300      	movs	r3, #0
 800a026:	613b      	str	r3, [r7, #16]
 800a028:	e043      	b.n	800a0b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	015a      	lsls	r2, r3, #5
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	4413      	add	r3, r2
 800a032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a03c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a040:	d118      	bne.n	800a074 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10a      	bne.n	800a05e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	015a      	lsls	r2, r3, #5
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	4413      	add	r3, r2
 800a050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a054:	461a      	mov	r2, r3
 800a056:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	e013      	b.n	800a086 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	015a      	lsls	r2, r3, #5
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	4413      	add	r3, r2
 800a066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a06a:	461a      	mov	r2, r3
 800a06c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a070:	6013      	str	r3, [r2, #0]
 800a072:	e008      	b.n	800a086 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a080:	461a      	mov	r2, r3
 800a082:	2300      	movs	r3, #0
 800a084:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	015a      	lsls	r2, r3, #5
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a092:	461a      	mov	r2, r3
 800a094:	2300      	movs	r3, #0
 800a096:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	613b      	str	r3, [r7, #16]
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d3b7      	bcc.n	800a02a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	613b      	str	r3, [r7, #16]
 800a0be:	e043      	b.n	800a148 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	015a      	lsls	r2, r3, #5
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0d6:	d118      	bne.n	800a10a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10a      	bne.n	800a0f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	015a      	lsls	r2, r3, #5
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a0f0:	6013      	str	r3, [r2, #0]
 800a0f2:	e013      	b.n	800a11c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	015a      	lsls	r2, r3, #5
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a100:	461a      	mov	r2, r3
 800a102:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a106:	6013      	str	r3, [r2, #0]
 800a108:	e008      	b.n	800a11c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	015a      	lsls	r2, r3, #5
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	4413      	add	r3, r2
 800a112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a116:	461a      	mov	r2, r3
 800a118:	2300      	movs	r3, #0
 800a11a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	015a      	lsls	r2, r3, #5
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4413      	add	r3, r2
 800a124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a128:	461a      	mov	r2, r3
 800a12a:	2300      	movs	r3, #0
 800a12c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	4413      	add	r3, r2
 800a136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a13a:	461a      	mov	r2, r3
 800a13c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a140:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	3301      	adds	r3, #1
 800a146:	613b      	str	r3, [r7, #16]
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d3b7      	bcc.n	800a0c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a15e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a162:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a170:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a174:	2b00      	cmp	r3, #0
 800a176:	d105      	bne.n	800a184 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	f043 0210 	orr.w	r2, r3, #16
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	699a      	ldr	r2, [r3, #24]
 800a188:	4b0f      	ldr	r3, [pc, #60]	; (800a1c8 <USB_DevInit+0x2c4>)
 800a18a:	4313      	orrs	r3, r2
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a192:	2b00      	cmp	r3, #0
 800a194:	d005      	beq.n	800a1a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	f043 0208 	orr.w	r2, r3, #8
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a1a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d107      	bne.n	800a1b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1b0:	f043 0304 	orr.w	r3, r3, #4
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a1b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3718      	adds	r7, #24
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1c4:	b004      	add	sp, #16
 800a1c6:	4770      	bx	lr
 800a1c8:	803c3800 	.word	0x803c3800

0800a1cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	019b      	lsls	r3, r3, #6
 800a1de:	f043 0220 	orr.w	r2, r3, #32
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	60fb      	str	r3, [r7, #12]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4a09      	ldr	r2, [pc, #36]	; (800a214 <USB_FlushTxFifo+0x48>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d901      	bls.n	800a1f8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e006      	b.n	800a206 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	f003 0320 	and.w	r3, r3, #32
 800a200:	2b20      	cmp	r3, #32
 800a202:	d0f0      	beq.n	800a1e6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	00030d40 	.word	0x00030d40

0800a218 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a220:	2300      	movs	r3, #0
 800a222:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2210      	movs	r2, #16
 800a228:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	3301      	adds	r3, #1
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4a09      	ldr	r2, [pc, #36]	; (800a258 <USB_FlushRxFifo+0x40>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d901      	bls.n	800a23c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	e006      	b.n	800a24a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	f003 0310 	and.w	r3, r3, #16
 800a244:	2b10      	cmp	r3, #16
 800a246:	d0f0      	beq.n	800a22a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	00030d40 	.word	0x00030d40

0800a25c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	460b      	mov	r3, r1
 800a266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	78fb      	ldrb	r3, [r7, #3]
 800a276:	68f9      	ldr	r1, [r7, #12]
 800a278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a27c:	4313      	orrs	r3, r2
 800a27e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a28e:	b480      	push	{r7}
 800a290:	b087      	sub	sp, #28
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	f003 0306 	and.w	r3, r3, #6
 800a2a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d102      	bne.n	800a2b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	75fb      	strb	r3, [r7, #23]
 800a2b2:	e00a      	b.n	800a2ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d002      	beq.n	800a2c0 <USB_GetDevSpeed+0x32>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b06      	cmp	r3, #6
 800a2be:	d102      	bne.n	800a2c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	75fb      	strb	r3, [r7, #23]
 800a2c4:	e001      	b.n	800a2ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a2c6:	230f      	movs	r3, #15
 800a2c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	371c      	adds	r7, #28
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	785b      	ldrb	r3, [r3, #1]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d13a      	bne.n	800a36a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2fa:	69da      	ldr	r2, [r3, #28]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	f003 030f 	and.w	r3, r3, #15
 800a304:	2101      	movs	r1, #1
 800a306:	fa01 f303 	lsl.w	r3, r1, r3
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	68f9      	ldr	r1, [r7, #12]
 800a30e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a312:	4313      	orrs	r3, r2
 800a314:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	015a      	lsls	r2, r3, #5
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	4413      	add	r3, r2
 800a31e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d155      	bne.n	800a3d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	015a      	lsls	r2, r3, #5
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	4413      	add	r3, r2
 800a334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	78db      	ldrb	r3, [r3, #3]
 800a346:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a348:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	059b      	lsls	r3, r3, #22
 800a34e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a350:	4313      	orrs	r3, r2
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	0151      	lsls	r1, r2, #5
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	440a      	add	r2, r1
 800a35a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a35e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a366:	6013      	str	r3, [r2, #0]
 800a368:	e036      	b.n	800a3d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a370:	69da      	ldr	r2, [r3, #28]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	f003 030f 	and.w	r3, r3, #15
 800a37a:	2101      	movs	r1, #1
 800a37c:	fa01 f303 	lsl.w	r3, r1, r3
 800a380:	041b      	lsls	r3, r3, #16
 800a382:	68f9      	ldr	r1, [r7, #12]
 800a384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a388:	4313      	orrs	r3, r2
 800a38a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	015a      	lsls	r2, r3, #5
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	4413      	add	r3, r2
 800a394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d11a      	bne.n	800a3d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	015a      	lsls	r2, r3, #5
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	78db      	ldrb	r3, [r3, #3]
 800a3bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a3be:	430b      	orrs	r3, r1
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	0151      	lsls	r1, r2, #5
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	440a      	add	r2, r1
 800a3ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
	...

0800a3e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	785b      	ldrb	r3, [r3, #1]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d161      	bne.n	800a4c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	015a      	lsls	r2, r3, #5
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	4413      	add	r3, r2
 800a40c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a416:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a41a:	d11f      	bne.n	800a45c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4413      	add	r3, r2
 800a424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	0151      	lsls	r1, r2, #5
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	440a      	add	r2, r1
 800a432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a436:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a43a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	4413      	add	r3, r2
 800a444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	0151      	lsls	r1, r2, #5
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	440a      	add	r2, r1
 800a452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a456:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a45a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	f003 030f 	and.w	r3, r3, #15
 800a46c:	2101      	movs	r1, #1
 800a46e:	fa01 f303 	lsl.w	r3, r1, r3
 800a472:	b29b      	uxth	r3, r3
 800a474:	43db      	mvns	r3, r3
 800a476:	68f9      	ldr	r1, [r7, #12]
 800a478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a47c:	4013      	ands	r3, r2
 800a47e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a486:	69da      	ldr	r2, [r3, #28]
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	f003 030f 	and.w	r3, r3, #15
 800a490:	2101      	movs	r1, #1
 800a492:	fa01 f303 	lsl.w	r3, r1, r3
 800a496:	b29b      	uxth	r3, r3
 800a498:	43db      	mvns	r3, r3
 800a49a:	68f9      	ldr	r1, [r7, #12]
 800a49c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	0159      	lsls	r1, r3, #5
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	440b      	add	r3, r1
 800a4ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4be:	4619      	mov	r1, r3
 800a4c0:	4b35      	ldr	r3, [pc, #212]	; (800a598 <USB_DeactivateEndpoint+0x1b0>)
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	600b      	str	r3, [r1, #0]
 800a4c6:	e060      	b.n	800a58a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	015a      	lsls	r2, r3, #5
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4de:	d11f      	bne.n	800a520 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	0151      	lsls	r1, r2, #5
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	440a      	add	r2, r1
 800a4f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a4fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	4413      	add	r3, r2
 800a508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	0151      	lsls	r1, r2, #5
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	440a      	add	r2, r1
 800a516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a51a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a51e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	f003 030f 	and.w	r3, r3, #15
 800a530:	2101      	movs	r1, #1
 800a532:	fa01 f303 	lsl.w	r3, r1, r3
 800a536:	041b      	lsls	r3, r3, #16
 800a538:	43db      	mvns	r3, r3
 800a53a:	68f9      	ldr	r1, [r7, #12]
 800a53c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a540:	4013      	ands	r3, r2
 800a542:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a54a:	69da      	ldr	r2, [r3, #28]
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	f003 030f 	and.w	r3, r3, #15
 800a554:	2101      	movs	r1, #1
 800a556:	fa01 f303 	lsl.w	r3, r1, r3
 800a55a:	041b      	lsls	r3, r3, #16
 800a55c:	43db      	mvns	r3, r3
 800a55e:	68f9      	ldr	r1, [r7, #12]
 800a560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a564:	4013      	ands	r3, r2
 800a566:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	0159      	lsls	r1, r3, #5
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	440b      	add	r3, r1
 800a57e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a582:	4619      	mov	r1, r3
 800a584:	4b05      	ldr	r3, [pc, #20]	; (800a59c <USB_DeactivateEndpoint+0x1b4>)
 800a586:	4013      	ands	r3, r2
 800a588:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3714      	adds	r7, #20
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr
 800a598:	ec337800 	.word	0xec337800
 800a59c:	eff37800 	.word	0xeff37800

0800a5a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08a      	sub	sp, #40	; 0x28
 800a5a4:	af02      	add	r7, sp, #8
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	785b      	ldrb	r3, [r3, #1]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	f040 815c 	bne.w	800a87a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d132      	bne.n	800a630 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	015a      	lsls	r2, r3, #5
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	69ba      	ldr	r2, [r7, #24]
 800a5da:	0151      	lsls	r1, r2, #5
 800a5dc:	69fa      	ldr	r2, [r7, #28]
 800a5de:	440a      	add	r2, r1
 800a5e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	015a      	lsls	r2, r3, #5
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5fa:	691b      	ldr	r3, [r3, #16]
 800a5fc:	69ba      	ldr	r2, [r7, #24]
 800a5fe:	0151      	lsls	r1, r2, #5
 800a600:	69fa      	ldr	r2, [r7, #28]
 800a602:	440a      	add	r2, r1
 800a604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a608:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a60c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	015a      	lsls	r2, r3, #5
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	4413      	add	r3, r2
 800a616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a61a:	691b      	ldr	r3, [r3, #16]
 800a61c:	69ba      	ldr	r2, [r7, #24]
 800a61e:	0151      	lsls	r1, r2, #5
 800a620:	69fa      	ldr	r2, [r7, #28]
 800a622:	440a      	add	r2, r1
 800a624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a628:	0cdb      	lsrs	r3, r3, #19
 800a62a:	04db      	lsls	r3, r3, #19
 800a62c:	6113      	str	r3, [r2, #16]
 800a62e:	e074      	b.n	800a71a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	015a      	lsls	r2, r3, #5
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	4413      	add	r3, r2
 800a638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	0151      	lsls	r1, r2, #5
 800a642:	69fa      	ldr	r2, [r7, #28]
 800a644:	440a      	add	r2, r1
 800a646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a64a:	0cdb      	lsrs	r3, r3, #19
 800a64c:	04db      	lsls	r3, r3, #19
 800a64e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	015a      	lsls	r2, r3, #5
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	4413      	add	r3, r2
 800a658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	69ba      	ldr	r2, [r7, #24]
 800a660:	0151      	lsls	r1, r2, #5
 800a662:	69fa      	ldr	r2, [r7, #28]
 800a664:	440a      	add	r2, r1
 800a666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a66a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a66e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a672:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	015a      	lsls	r2, r3, #5
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	4413      	add	r3, r2
 800a67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a680:	691a      	ldr	r2, [r3, #16]
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	6959      	ldr	r1, [r3, #20]
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	440b      	add	r3, r1
 800a68c:	1e59      	subs	r1, r3, #1
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	fbb1 f3f3 	udiv	r3, r1, r3
 800a696:	04d9      	lsls	r1, r3, #19
 800a698:	4b9d      	ldr	r3, [pc, #628]	; (800a910 <USB_EPStartXfer+0x370>)
 800a69a:	400b      	ands	r3, r1
 800a69c:	69b9      	ldr	r1, [r7, #24]
 800a69e:	0148      	lsls	r0, r1, #5
 800a6a0:	69f9      	ldr	r1, [r7, #28]
 800a6a2:	4401      	add	r1, r0
 800a6a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b8:	691a      	ldr	r2, [r3, #16]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6c2:	69b9      	ldr	r1, [r7, #24]
 800a6c4:	0148      	lsls	r0, r1, #5
 800a6c6:	69f9      	ldr	r1, [r7, #28]
 800a6c8:	4401      	add	r1, r0
 800a6ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	78db      	ldrb	r3, [r3, #3]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d11f      	bne.n	800a71a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	015a      	lsls	r2, r3, #5
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	69ba      	ldr	r2, [r7, #24]
 800a6ea:	0151      	lsls	r1, r2, #5
 800a6ec:	69fa      	ldr	r2, [r7, #28]
 800a6ee:	440a      	add	r2, r1
 800a6f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a6f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	015a      	lsls	r2, r3, #5
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	4413      	add	r3, r2
 800a702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	69ba      	ldr	r2, [r7, #24]
 800a70a:	0151      	lsls	r1, r2, #5
 800a70c:	69fa      	ldr	r2, [r7, #28]
 800a70e:	440a      	add	r2, r1
 800a710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a714:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a718:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a71a:	79fb      	ldrb	r3, [r7, #7]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d14b      	bne.n	800a7b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d009      	beq.n	800a73c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a734:	461a      	mov	r2, r3
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	78db      	ldrb	r3, [r3, #3]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d128      	bne.n	800a796 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a750:	2b00      	cmp	r3, #0
 800a752:	d110      	bne.n	800a776 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	015a      	lsls	r2, r3, #5
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	4413      	add	r3, r2
 800a75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	69ba      	ldr	r2, [r7, #24]
 800a764:	0151      	lsls	r1, r2, #5
 800a766:	69fa      	ldr	r2, [r7, #28]
 800a768:	440a      	add	r2, r1
 800a76a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a76e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	e00f      	b.n	800a796 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	015a      	lsls	r2, r3, #5
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	4413      	add	r3, r2
 800a77e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	69ba      	ldr	r2, [r7, #24]
 800a786:	0151      	lsls	r1, r2, #5
 800a788:	69fa      	ldr	r2, [r7, #28]
 800a78a:	440a      	add	r2, r1
 800a78c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a794:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	015a      	lsls	r2, r3, #5
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	4413      	add	r3, r2
 800a79e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	69ba      	ldr	r2, [r7, #24]
 800a7a6:	0151      	lsls	r1, r2, #5
 800a7a8:	69fa      	ldr	r2, [r7, #28]
 800a7aa:	440a      	add	r2, r1
 800a7ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a7b4:	6013      	str	r3, [r2, #0]
 800a7b6:	e12f      	b.n	800aa18 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	015a      	lsls	r2, r3, #5
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	4413      	add	r3, r2
 800a7c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	69ba      	ldr	r2, [r7, #24]
 800a7c8:	0151      	lsls	r1, r2, #5
 800a7ca:	69fa      	ldr	r2, [r7, #28]
 800a7cc:	440a      	add	r2, r1
 800a7ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a7d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	78db      	ldrb	r3, [r3, #3]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d015      	beq.n	800a80c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f000 8117 	beq.w	800aa18 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	f003 030f 	and.w	r3, r3, #15
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a800:	69f9      	ldr	r1, [r7, #28]
 800a802:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a806:	4313      	orrs	r3, r2
 800a808:	634b      	str	r3, [r1, #52]	; 0x34
 800a80a:	e105      	b.n	800aa18 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d110      	bne.n	800a83e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	015a      	lsls	r2, r3, #5
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	4413      	add	r3, r2
 800a824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	69ba      	ldr	r2, [r7, #24]
 800a82c:	0151      	lsls	r1, r2, #5
 800a82e:	69fa      	ldr	r2, [r7, #28]
 800a830:	440a      	add	r2, r1
 800a832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a836:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a83a:	6013      	str	r3, [r2, #0]
 800a83c:	e00f      	b.n	800a85e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	015a      	lsls	r2, r3, #5
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	4413      	add	r3, r2
 800a846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	69ba      	ldr	r2, [r7, #24]
 800a84e:	0151      	lsls	r1, r2, #5
 800a850:	69fa      	ldr	r2, [r7, #28]
 800a852:	440a      	add	r2, r1
 800a854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a85c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	68d9      	ldr	r1, [r3, #12]
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	781a      	ldrb	r2, [r3, #0]
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	695b      	ldr	r3, [r3, #20]
 800a86a:	b298      	uxth	r0, r3
 800a86c:	79fb      	ldrb	r3, [r7, #7]
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	4603      	mov	r3, r0
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f000 fa2b 	bl	800acce <USB_WritePacket>
 800a878:	e0ce      	b.n	800aa18 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	015a      	lsls	r2, r3, #5
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	4413      	add	r3, r2
 800a882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	69ba      	ldr	r2, [r7, #24]
 800a88a:	0151      	lsls	r1, r2, #5
 800a88c:	69fa      	ldr	r2, [r7, #28]
 800a88e:	440a      	add	r2, r1
 800a890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a894:	0cdb      	lsrs	r3, r3, #19
 800a896:	04db      	lsls	r3, r3, #19
 800a898:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	015a      	lsls	r2, r3, #5
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	69ba      	ldr	r2, [r7, #24]
 800a8aa:	0151      	lsls	r1, r2, #5
 800a8ac:	69fa      	ldr	r2, [r7, #28]
 800a8ae:	440a      	add	r2, r1
 800a8b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a8b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a8bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	695b      	ldr	r3, [r3, #20]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d126      	bne.n	800a914 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	015a      	lsls	r2, r3, #5
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8d2:	691a      	ldr	r2, [r3, #16]
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8dc:	69b9      	ldr	r1, [r7, #24]
 800a8de:	0148      	lsls	r0, r1, #5
 800a8e0:	69f9      	ldr	r1, [r7, #28]
 800a8e2:	4401      	add	r1, r0
 800a8e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	015a      	lsls	r2, r3, #5
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	69ba      	ldr	r2, [r7, #24]
 800a8fc:	0151      	lsls	r1, r2, #5
 800a8fe:	69fa      	ldr	r2, [r7, #28]
 800a900:	440a      	add	r2, r1
 800a902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a906:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a90a:	6113      	str	r3, [r2, #16]
 800a90c:	e036      	b.n	800a97c <USB_EPStartXfer+0x3dc>
 800a90e:	bf00      	nop
 800a910:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	695a      	ldr	r2, [r3, #20]
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	4413      	add	r3, r2
 800a91e:	1e5a      	subs	r2, r3, #1
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	fbb2 f3f3 	udiv	r3, r2, r3
 800a928:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	015a      	lsls	r2, r3, #5
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	4413      	add	r3, r2
 800a932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a936:	691a      	ldr	r2, [r3, #16]
 800a938:	8afb      	ldrh	r3, [r7, #22]
 800a93a:	04d9      	lsls	r1, r3, #19
 800a93c:	4b39      	ldr	r3, [pc, #228]	; (800aa24 <USB_EPStartXfer+0x484>)
 800a93e:	400b      	ands	r3, r1
 800a940:	69b9      	ldr	r1, [r7, #24]
 800a942:	0148      	lsls	r0, r1, #5
 800a944:	69f9      	ldr	r1, [r7, #28]
 800a946:	4401      	add	r1, r0
 800a948:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a94c:	4313      	orrs	r3, r2
 800a94e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	015a      	lsls	r2, r3, #5
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	4413      	add	r3, r2
 800a958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a95c:	691a      	ldr	r2, [r3, #16]
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	8af9      	ldrh	r1, [r7, #22]
 800a964:	fb01 f303 	mul.w	r3, r1, r3
 800a968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a96c:	69b9      	ldr	r1, [r7, #24]
 800a96e:	0148      	lsls	r0, r1, #5
 800a970:	69f9      	ldr	r1, [r7, #28]
 800a972:	4401      	add	r1, r0
 800a974:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a978:	4313      	orrs	r3, r2
 800a97a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a97c:	79fb      	ldrb	r3, [r7, #7]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d10d      	bne.n	800a99e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d009      	beq.n	800a99e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	68d9      	ldr	r1, [r3, #12]
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	015a      	lsls	r2, r3, #5
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	4413      	add	r3, r2
 800a996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99a:	460a      	mov	r2, r1
 800a99c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	78db      	ldrb	r3, [r3, #3]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d128      	bne.n	800a9f8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d110      	bne.n	800a9d8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	015a      	lsls	r2, r3, #5
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	4413      	add	r3, r2
 800a9be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	69ba      	ldr	r2, [r7, #24]
 800a9c6:	0151      	lsls	r1, r2, #5
 800a9c8:	69fa      	ldr	r2, [r7, #28]
 800a9ca:	440a      	add	r2, r1
 800a9cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a9d4:	6013      	str	r3, [r2, #0]
 800a9d6:	e00f      	b.n	800a9f8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	015a      	lsls	r2, r3, #5
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	4413      	add	r3, r2
 800a9e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	69ba      	ldr	r2, [r7, #24]
 800a9e8:	0151      	lsls	r1, r2, #5
 800a9ea:	69fa      	ldr	r2, [r7, #28]
 800a9ec:	440a      	add	r2, r1
 800a9ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	69ba      	ldr	r2, [r7, #24]
 800aa08:	0151      	lsls	r1, r2, #5
 800aa0a:	69fa      	ldr	r2, [r7, #28]
 800aa0c:	440a      	add	r2, r1
 800aa0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3720      	adds	r7, #32
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	1ff80000 	.word	0x1ff80000

0800aa28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b087      	sub	sp, #28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	4613      	mov	r3, r2
 800aa34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	785b      	ldrb	r3, [r3, #1]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	f040 80cd 	bne.w	800abe4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	695b      	ldr	r3, [r3, #20]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d132      	bne.n	800aab8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	015a      	lsls	r2, r3, #5
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	4413      	add	r3, r2
 800aa5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	693a      	ldr	r2, [r7, #16]
 800aa62:	0151      	lsls	r1, r2, #5
 800aa64:	697a      	ldr	r2, [r7, #20]
 800aa66:	440a      	add	r2, r1
 800aa68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	015a      	lsls	r2, r3, #5
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	0151      	lsls	r1, r2, #5
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	440a      	add	r2, r1
 800aa8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	015a      	lsls	r2, r3, #5
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	0151      	lsls	r1, r2, #5
 800aaa8:	697a      	ldr	r2, [r7, #20]
 800aaaa:	440a      	add	r2, r1
 800aaac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aab0:	0cdb      	lsrs	r3, r3, #19
 800aab2:	04db      	lsls	r3, r3, #19
 800aab4:	6113      	str	r3, [r2, #16]
 800aab6:	e04e      	b.n	800ab56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	0151      	lsls	r1, r2, #5
 800aaca:	697a      	ldr	r2, [r7, #20]
 800aacc:	440a      	add	r2, r1
 800aace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aad2:	0cdb      	lsrs	r3, r3, #19
 800aad4:	04db      	lsls	r3, r3, #19
 800aad6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	4413      	add	r3, r2
 800aae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	693a      	ldr	r2, [r7, #16]
 800aae8:	0151      	lsls	r1, r2, #5
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	440a      	add	r2, r1
 800aaee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aaf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aafa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	695a      	ldr	r2, [r3, #20]
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d903      	bls.n	800ab10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	689a      	ldr	r2, [r3, #8]
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	697a      	ldr	r2, [r7, #20]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	015a      	lsls	r2, r3, #5
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	4413      	add	r3, r2
 800ab38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab3c:	691a      	ldr	r2, [r3, #16]
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab46:	6939      	ldr	r1, [r7, #16]
 800ab48:	0148      	lsls	r0, r1, #5
 800ab4a:	6979      	ldr	r1, [r7, #20]
 800ab4c:	4401      	add	r1, r0
 800ab4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ab52:	4313      	orrs	r3, r2
 800ab54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ab56:	79fb      	ldrb	r3, [r7, #7]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d11e      	bne.n	800ab9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d009      	beq.n	800ab78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	015a      	lsls	r2, r3, #5
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab70:	461a      	mov	r2, r3
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	693a      	ldr	r2, [r7, #16]
 800ab88:	0151      	lsls	r1, r2, #5
 800ab8a:	697a      	ldr	r2, [r7, #20]
 800ab8c:	440a      	add	r2, r1
 800ab8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab96:	6013      	str	r3, [r2, #0]
 800ab98:	e092      	b.n	800acc0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	015a      	lsls	r2, r3, #5
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	4413      	add	r3, r2
 800aba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	0151      	lsls	r1, r2, #5
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	440a      	add	r2, r1
 800abb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800abb8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d07e      	beq.n	800acc0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	f003 030f 	and.w	r3, r3, #15
 800abd2:	2101      	movs	r1, #1
 800abd4:	fa01 f303 	lsl.w	r3, r1, r3
 800abd8:	6979      	ldr	r1, [r7, #20]
 800abda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abde:	4313      	orrs	r3, r2
 800abe0:	634b      	str	r3, [r1, #52]	; 0x34
 800abe2:	e06d      	b.n	800acc0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	693a      	ldr	r2, [r7, #16]
 800abf4:	0151      	lsls	r1, r2, #5
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	440a      	add	r2, r1
 800abfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abfe:	0cdb      	lsrs	r3, r3, #19
 800ac00:	04db      	lsls	r3, r3, #19
 800ac02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	015a      	lsls	r2, r3, #5
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	0151      	lsls	r1, r2, #5
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	440a      	add	r2, r1
 800ac1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac26:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	695b      	ldr	r3, [r3, #20]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d003      	beq.n	800ac38 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	689a      	ldr	r2, [r3, #8]
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	015a      	lsls	r2, r3, #5
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	4413      	add	r3, r2
 800ac40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	693a      	ldr	r2, [r7, #16]
 800ac48:	0151      	lsls	r1, r2, #5
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	440a      	add	r2, r1
 800ac4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	015a      	lsls	r2, r3, #5
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac64:	691a      	ldr	r2, [r3, #16]
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac6e:	6939      	ldr	r1, [r7, #16]
 800ac70:	0148      	lsls	r0, r1, #5
 800ac72:	6979      	ldr	r1, [r7, #20]
 800ac74:	4401      	add	r1, r0
 800ac76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ac7e:	79fb      	ldrb	r3, [r7, #7]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d10d      	bne.n	800aca0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d009      	beq.n	800aca0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	68d9      	ldr	r1, [r3, #12]
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac9c:	460a      	mov	r2, r1
 800ac9e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	015a      	lsls	r2, r3, #5
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	4413      	add	r3, r2
 800aca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	0151      	lsls	r1, r2, #5
 800acb2:	697a      	ldr	r2, [r7, #20]
 800acb4:	440a      	add	r2, r1
 800acb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	371c      	adds	r7, #28
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800acce:	b480      	push	{r7}
 800acd0:	b089      	sub	sp, #36	; 0x24
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	60f8      	str	r0, [r7, #12]
 800acd6:	60b9      	str	r1, [r7, #8]
 800acd8:	4611      	mov	r1, r2
 800acda:	461a      	mov	r2, r3
 800acdc:	460b      	mov	r3, r1
 800acde:	71fb      	strb	r3, [r7, #7]
 800ace0:	4613      	mov	r3, r2
 800ace2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800acec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d11a      	bne.n	800ad2a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800acf4:	88bb      	ldrh	r3, [r7, #4]
 800acf6:	3303      	adds	r3, #3
 800acf8:	089b      	lsrs	r3, r3, #2
 800acfa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800acfc:	2300      	movs	r3, #0
 800acfe:	61bb      	str	r3, [r7, #24]
 800ad00:	e00f      	b.n	800ad22 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ad02:	79fb      	ldrb	r3, [r7, #7]
 800ad04:	031a      	lsls	r2, r3, #12
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	4413      	add	r3, r2
 800ad0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad0e:	461a      	mov	r2, r3
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	3304      	adds	r3, #4
 800ad1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	61bb      	str	r3, [r7, #24]
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d3eb      	bcc.n	800ad02 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3724      	adds	r7, #36	; 0x24
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b089      	sub	sp, #36	; 0x24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	4613      	mov	r3, r2
 800ad44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ad4e:	88fb      	ldrh	r3, [r7, #6]
 800ad50:	3303      	adds	r3, #3
 800ad52:	089b      	lsrs	r3, r3, #2
 800ad54:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ad56:	2300      	movs	r3, #0
 800ad58:	61bb      	str	r3, [r7, #24]
 800ad5a:	e00b      	b.n	800ad74 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	601a      	str	r2, [r3, #0]
    pDest++;
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	3304      	adds	r3, #4
 800ad6c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	3301      	adds	r3, #1
 800ad72:	61bb      	str	r3, [r7, #24]
 800ad74:	69ba      	ldr	r2, [r7, #24]
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d3ef      	bcc.n	800ad5c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ad7c:	69fb      	ldr	r3, [r7, #28]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3724      	adds	r7, #36	; 0x24
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b085      	sub	sp, #20
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
 800ad92:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	785b      	ldrb	r3, [r3, #1]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d12c      	bne.n	800ae00 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	015a      	lsls	r2, r3, #5
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	4413      	add	r3, r2
 800adae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	db12      	blt.n	800adde <USB_EPSetStall+0x54>
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00f      	beq.n	800adde <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	015a      	lsls	r2, r3, #5
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	4413      	add	r3, r2
 800adc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	0151      	lsls	r1, r2, #5
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	440a      	add	r2, r1
 800add4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800add8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800addc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	015a      	lsls	r2, r3, #5
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	4413      	add	r3, r2
 800ade6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	0151      	lsls	r1, r2, #5
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	440a      	add	r2, r1
 800adf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800adfc:	6013      	str	r3, [r2, #0]
 800adfe:	e02b      	b.n	800ae58 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	015a      	lsls	r2, r3, #5
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4413      	add	r3, r2
 800ae08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	db12      	blt.n	800ae38 <USB_EPSetStall+0xae>
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00f      	beq.n	800ae38 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	015a      	lsls	r2, r3, #5
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	4413      	add	r3, r2
 800ae20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	0151      	lsls	r1, r2, #5
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	440a      	add	r2, r1
 800ae2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ae36:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	015a      	lsls	r2, r3, #5
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	4413      	add	r3, r2
 800ae40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68ba      	ldr	r2, [r7, #8]
 800ae48:	0151      	lsls	r1, r2, #5
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	440a      	add	r2, r1
 800ae4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b085      	sub	sp, #20
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	785b      	ldrb	r3, [r3, #1]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d128      	bne.n	800aed4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	015a      	lsls	r2, r3, #5
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	4413      	add	r3, r2
 800ae8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	0151      	lsls	r1, r2, #5
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	440a      	add	r2, r1
 800ae98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aea0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	78db      	ldrb	r3, [r3, #3]
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d003      	beq.n	800aeb2 <USB_EPClearStall+0x4c>
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	78db      	ldrb	r3, [r3, #3]
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d138      	bne.n	800af24 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	015a      	lsls	r2, r3, #5
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	4413      	add	r3, r2
 800aeba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	0151      	lsls	r1, r2, #5
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	440a      	add	r2, r1
 800aec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aed0:	6013      	str	r3, [r2, #0]
 800aed2:	e027      	b.n	800af24 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	015a      	lsls	r2, r3, #5
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	4413      	add	r3, r2
 800aedc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	0151      	lsls	r1, r2, #5
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	440a      	add	r2, r1
 800aeea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aef2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	78db      	ldrb	r3, [r3, #3]
 800aef8:	2b03      	cmp	r3, #3
 800aefa:	d003      	beq.n	800af04 <USB_EPClearStall+0x9e>
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	78db      	ldrb	r3, [r3, #3]
 800af00:	2b02      	cmp	r3, #2
 800af02:	d10f      	bne.n	800af24 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	015a      	lsls	r2, r3, #5
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	4413      	add	r3, r2
 800af0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	0151      	lsls	r1, r2, #5
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	440a      	add	r2, r1
 800af1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af22:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800af32:	b480      	push	{r7}
 800af34:	b085      	sub	sp, #20
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	460b      	mov	r3, r1
 800af3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af50:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800af54:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	78fb      	ldrb	r3, [r7, #3]
 800af60:	011b      	lsls	r3, r3, #4
 800af62:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800af66:	68f9      	ldr	r1, [r7, #12]
 800af68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af6c:	4313      	orrs	r3, r2
 800af6e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3714      	adds	r7, #20
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr

0800af7e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800af7e:	b480      	push	{r7}
 800af80:	b085      	sub	sp, #20
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af98:	f023 0303 	bic.w	r3, r3, #3
 800af9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afac:	f023 0302 	bic.w	r3, r3, #2
 800afb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3714      	adds	r7, #20
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800afda:	f023 0303 	bic.w	r3, r3, #3
 800afde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afee:	f043 0302 	orr.w	r3, r3, #2
 800aff2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3714      	adds	r7, #20
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr

0800b002 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b002:	b480      	push	{r7}
 800b004:	b085      	sub	sp, #20
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	695b      	ldr	r3, [r3, #20]
 800b00e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	699b      	ldr	r3, [r3, #24]
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	4013      	ands	r3, r2
 800b018:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b01a:	68fb      	ldr	r3, [r7, #12]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3714      	adds	r7, #20
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b028:	b480      	push	{r7}
 800b02a:	b085      	sub	sp, #20
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b044:	69db      	ldr	r3, [r3, #28]
 800b046:	68ba      	ldr	r2, [r7, #8]
 800b048:	4013      	ands	r3, r2
 800b04a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	0c1b      	lsrs	r3, r3, #16
}
 800b050:	4618      	mov	r0, r3
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b06e:	699b      	ldr	r3, [r3, #24]
 800b070:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	4013      	ands	r3, r2
 800b07e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	b29b      	uxth	r3, r3
}
 800b084:	4618      	mov	r0, r3
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	460b      	mov	r3, r1
 800b09a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b0a0:	78fb      	ldrb	r3, [r7, #3]
 800b0a2:	015a      	lsls	r2, r3, #5
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b0be:	68bb      	ldr	r3, [r7, #8]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3714      	adds	r7, #20
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b087      	sub	sp, #28
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b0f0:	78fb      	ldrb	r3, [r7, #3]
 800b0f2:	f003 030f 	and.w	r3, r3, #15
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0fc:	01db      	lsls	r3, r3, #7
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	4313      	orrs	r3, r2
 800b104:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b106:	78fb      	ldrb	r3, [r7, #3]
 800b108:	015a      	lsls	r2, r3, #5
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	4413      	add	r3, r2
 800b10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	4013      	ands	r3, r2
 800b118:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b11a:	68bb      	ldr	r3, [r7, #8]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	371c      	adds	r7, #28
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	695b      	ldr	r3, [r3, #20]
 800b134:	f003 0301 	and.w	r3, r3, #1
}
 800b138:	4618      	mov	r0, r3
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b15e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b162:	f023 0307 	bic.w	r3, r3, #7
 800b166:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b17a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3714      	adds	r7, #20
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
	...

0800b18c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b087      	sub	sp, #28
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	460b      	mov	r3, r1
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	333c      	adds	r3, #60	; 0x3c
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	4a26      	ldr	r2, [pc, #152]	; (800b244 <USB_EP0_OutStart+0xb8>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d90a      	bls.n	800b1c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1c0:	d101      	bne.n	800b1c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	e037      	b.n	800b236 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	697a      	ldr	r2, [r7, #20]
 800b1dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ec:	691b      	ldr	r3, [r3, #16]
 800b1ee:	697a      	ldr	r2, [r7, #20]
 800b1f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1f4:	f043 0318 	orr.w	r3, r3, #24
 800b1f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	697a      	ldr	r2, [r7, #20]
 800b204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b208:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b20c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b20e:	7afb      	ldrb	r3, [r7, #11]
 800b210:	2b01      	cmp	r3, #1
 800b212:	d10f      	bne.n	800b234 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b21a:	461a      	mov	r2, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	697a      	ldr	r2, [r7, #20]
 800b22a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b22e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b232:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	371c      	adds	r7, #28
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	4f54300a 	.word	0x4f54300a

0800b248 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b250:	2300      	movs	r3, #0
 800b252:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	3301      	adds	r3, #1
 800b258:	60fb      	str	r3, [r7, #12]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	4a13      	ldr	r2, [pc, #76]	; (800b2ac <USB_CoreReset+0x64>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d901      	bls.n	800b266 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b262:	2303      	movs	r3, #3
 800b264:	e01b      	b.n	800b29e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	daf2      	bge.n	800b254 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b26e:	2300      	movs	r3, #0
 800b270:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	691b      	ldr	r3, [r3, #16]
 800b276:	f043 0201 	orr.w	r2, r3, #1
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	3301      	adds	r3, #1
 800b282:	60fb      	str	r3, [r7, #12]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	4a09      	ldr	r2, [pc, #36]	; (800b2ac <USB_CoreReset+0x64>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d901      	bls.n	800b290 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b28c:	2303      	movs	r3, #3
 800b28e:	e006      	b.n	800b29e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	691b      	ldr	r3, [r3, #16]
 800b294:	f003 0301 	and.w	r3, r3, #1
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d0f0      	beq.n	800b27e <USB_CoreReset+0x36>

  return HAL_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3714      	adds	r7, #20
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	00030d40 	.word	0x00030d40

0800b2b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b2bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b2c0:	f005 fb9e 	bl	8010a00 <malloc>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d105      	bne.n	800b2da <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b2d6:	2302      	movs	r3, #2
 800b2d8:	e066      	b.n	800b3a8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	7c1b      	ldrb	r3, [r3, #16]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d119      	bne.n	800b31e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b2ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2ee:	2202      	movs	r2, #2
 800b2f0:	2181      	movs	r1, #129	; 0x81
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f005 f8f5 	bl	80104e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b2fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b302:	2202      	movs	r2, #2
 800b304:	2101      	movs	r1, #1
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f005 f8eb 	bl	80104e2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2210      	movs	r2, #16
 800b318:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b31c:	e016      	b.n	800b34c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b31e:	2340      	movs	r3, #64	; 0x40
 800b320:	2202      	movs	r2, #2
 800b322:	2181      	movs	r1, #129	; 0x81
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f005 f8dc 	bl	80104e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2201      	movs	r2, #1
 800b32e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b330:	2340      	movs	r3, #64	; 0x40
 800b332:	2202      	movs	r2, #2
 800b334:	2101      	movs	r1, #1
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f005 f8d3 	bl	80104e2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2210      	movs	r2, #16
 800b348:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b34c:	2308      	movs	r3, #8
 800b34e:	2203      	movs	r2, #3
 800b350:	2182      	movs	r1, #130	; 0x82
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f005 f8c5 	bl	80104e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2200      	movs	r2, #0
 800b376:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	7c1b      	ldrb	r3, [r3, #16]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d109      	bne.n	800b396 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b38c:	2101      	movs	r1, #1
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f005 f996 	bl	80106c0 <USBD_LL_PrepareReceive>
 800b394:	e007      	b.n	800b3a6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b39c:	2340      	movs	r3, #64	; 0x40
 800b39e:	2101      	movs	r1, #1
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f005 f98d 	bl	80106c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b3c0:	2181      	movs	r1, #129	; 0x81
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f005 f8b3 	bl	801052e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b3ce:	2101      	movs	r1, #1
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f005 f8ac 	bl	801052e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b3de:	2182      	movs	r1, #130	; 0x82
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f005 f8a4 	bl	801052e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00e      	beq.n	800b41e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b410:	4618      	mov	r0, r3
 800b412:	f005 fafd 	bl	8010a10 <free>
    pdev->pClassData = NULL;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b086      	sub	sp, #24
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b438:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b43a:	2300      	movs	r3, #0
 800b43c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b43e:	2300      	movs	r3, #0
 800b440:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d03a      	beq.n	800b4c8 <USBD_CDC_Setup+0xa0>
 800b452:	2b20      	cmp	r3, #32
 800b454:	f040 8097 	bne.w	800b586 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	88db      	ldrh	r3, [r3, #6]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d029      	beq.n	800b4b4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	b25b      	sxtb	r3, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	da11      	bge.n	800b48e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b476:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b478:	683a      	ldr	r2, [r7, #0]
 800b47a:	88d2      	ldrh	r2, [r2, #6]
 800b47c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b47e:	6939      	ldr	r1, [r7, #16]
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	88db      	ldrh	r3, [r3, #6]
 800b484:	461a      	mov	r2, r3
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f001 fa7c 	bl	800c984 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b48c:	e082      	b.n	800b594 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	785a      	ldrb	r2, [r3, #1]
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	88db      	ldrh	r3, [r3, #6]
 800b49c:	b2da      	uxtb	r2, r3
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b4a4:	6939      	ldr	r1, [r7, #16]
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	88db      	ldrh	r3, [r3, #6]
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f001 fa95 	bl	800c9dc <USBD_CtlPrepareRx>
    break;
 800b4b2:	e06f      	b.n	800b594 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	7850      	ldrb	r0, [r2, #1]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	6839      	ldr	r1, [r7, #0]
 800b4c4:	4798      	blx	r3
    break;
 800b4c6:	e065      	b.n	800b594 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	785b      	ldrb	r3, [r3, #1]
 800b4cc:	2b0b      	cmp	r3, #11
 800b4ce:	d84f      	bhi.n	800b570 <USBD_CDC_Setup+0x148>
 800b4d0:	a201      	add	r2, pc, #4	; (adr r2, 800b4d8 <USBD_CDC_Setup+0xb0>)
 800b4d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d6:	bf00      	nop
 800b4d8:	0800b509 	.word	0x0800b509
 800b4dc:	0800b57f 	.word	0x0800b57f
 800b4e0:	0800b571 	.word	0x0800b571
 800b4e4:	0800b571 	.word	0x0800b571
 800b4e8:	0800b571 	.word	0x0800b571
 800b4ec:	0800b571 	.word	0x0800b571
 800b4f0:	0800b571 	.word	0x0800b571
 800b4f4:	0800b571 	.word	0x0800b571
 800b4f8:	0800b571 	.word	0x0800b571
 800b4fc:	0800b571 	.word	0x0800b571
 800b500:	0800b531 	.word	0x0800b531
 800b504:	0800b559 	.word	0x0800b559
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b50e:	2b03      	cmp	r3, #3
 800b510:	d107      	bne.n	800b522 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b512:	f107 030c 	add.w	r3, r7, #12
 800b516:	2202      	movs	r2, #2
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f001 fa32 	bl	800c984 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b520:	e030      	b.n	800b584 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b522:	6839      	ldr	r1, [r7, #0]
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f001 f9bc 	bl	800c8a2 <USBD_CtlError>
        ret = USBD_FAIL;
 800b52a:	2303      	movs	r3, #3
 800b52c:	75fb      	strb	r3, [r7, #23]
      break;
 800b52e:	e029      	b.n	800b584 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b536:	2b03      	cmp	r3, #3
 800b538:	d107      	bne.n	800b54a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b53a:	f107 030f 	add.w	r3, r7, #15
 800b53e:	2201      	movs	r2, #1
 800b540:	4619      	mov	r1, r3
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f001 fa1e 	bl	800c984 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b548:	e01c      	b.n	800b584 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b54a:	6839      	ldr	r1, [r7, #0]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f001 f9a8 	bl	800c8a2 <USBD_CtlError>
        ret = USBD_FAIL;
 800b552:	2303      	movs	r3, #3
 800b554:	75fb      	strb	r3, [r7, #23]
      break;
 800b556:	e015      	b.n	800b584 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b55e:	2b03      	cmp	r3, #3
 800b560:	d00f      	beq.n	800b582 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b562:	6839      	ldr	r1, [r7, #0]
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f001 f99c 	bl	800c8a2 <USBD_CtlError>
        ret = USBD_FAIL;
 800b56a:	2303      	movs	r3, #3
 800b56c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b56e:	e008      	b.n	800b582 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b570:	6839      	ldr	r1, [r7, #0]
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f001 f995 	bl	800c8a2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b578:	2303      	movs	r3, #3
 800b57a:	75fb      	strb	r3, [r7, #23]
      break;
 800b57c:	e002      	b.n	800b584 <USBD_CDC_Setup+0x15c>
      break;
 800b57e:	bf00      	nop
 800b580:	e008      	b.n	800b594 <USBD_CDC_Setup+0x16c>
      break;
 800b582:	bf00      	nop
    }
    break;
 800b584:	e006      	b.n	800b594 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b586:	6839      	ldr	r1, [r7, #0]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f001 f98a 	bl	800c8a2 <USBD_CtlError>
    ret = USBD_FAIL;
 800b58e:	2303      	movs	r3, #3
 800b590:	75fb      	strb	r3, [r7, #23]
    break;
 800b592:	bf00      	nop
  }

  return (uint8_t)ret;
 800b594:	7dfb      	ldrb	r3, [r7, #23]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3718      	adds	r7, #24
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop

0800b5a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b5b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d101      	bne.n	800b5c2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e049      	b.n	800b656 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b5ca:	78fa      	ldrb	r2, [r7, #3]
 800b5cc:	6879      	ldr	r1, [r7, #4]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4413      	add	r3, r2
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	440b      	add	r3, r1
 800b5d8:	3318      	adds	r3, #24
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d029      	beq.n	800b634 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b5e0:	78fa      	ldrb	r2, [r7, #3]
 800b5e2:	6879      	ldr	r1, [r7, #4]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4413      	add	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	440b      	add	r3, r1
 800b5ee:	3318      	adds	r3, #24
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	78f9      	ldrb	r1, [r7, #3]
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	00db      	lsls	r3, r3, #3
 800b5fa:	1a5b      	subs	r3, r3, r1
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	4403      	add	r3, r0
 800b600:	3344      	adds	r3, #68	; 0x44
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	fbb2 f1f3 	udiv	r1, r2, r3
 800b608:	fb03 f301 	mul.w	r3, r3, r1
 800b60c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d110      	bne.n	800b634 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b612:	78fa      	ldrb	r2, [r7, #3]
 800b614:	6879      	ldr	r1, [r7, #4]
 800b616:	4613      	mov	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	440b      	add	r3, r1
 800b620:	3318      	adds	r3, #24
 800b622:	2200      	movs	r2, #0
 800b624:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b626:	78f9      	ldrb	r1, [r7, #3]
 800b628:	2300      	movs	r3, #0
 800b62a:	2200      	movs	r2, #0
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f005 f826 	bl	801067e <USBD_LL_Transmit>
 800b632:	e00f      	b.n	800b654 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2200      	movs	r2, #0
 800b638:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	68ba      	ldr	r2, [r7, #8]
 800b646:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b650:	78fa      	ldrb	r2, [r7, #3]
 800b652:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b084      	sub	sp, #16
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
 800b666:	460b      	mov	r3, r1
 800b668:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b670:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d101      	bne.n	800b680 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b67c:	2303      	movs	r3, #3
 800b67e:	e015      	b.n	800b6ac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b680:	78fb      	ldrb	r3, [r7, #3]
 800b682:	4619      	mov	r1, r3
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f005 f83c 	bl	8010702 <USBD_LL_GetRxDataSize>
 800b68a:	4602      	mov	r2, r0
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b6a6:	4611      	mov	r1, r2
 800b6a8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6c2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d015      	beq.n	800b6fa <USBD_CDC_EP0_RxReady+0x46>
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b6d4:	2bff      	cmp	r3, #255	; 0xff
 800b6d6:	d010      	beq.n	800b6fa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b6e6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b6ee:	b292      	uxth	r2, r2
 800b6f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	22ff      	movs	r2, #255	; 0xff
 800b6f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2243      	movs	r2, #67	; 0x43
 800b710:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b712:	4b03      	ldr	r3, [pc, #12]	; (800b720 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b714:	4618      	mov	r0, r3
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr
 800b720:	20000094 	.word	0x20000094

0800b724 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2243      	movs	r2, #67	; 0x43
 800b730:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b732:	4b03      	ldr	r3, [pc, #12]	; (800b740 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b734:	4618      	mov	r0, r3
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr
 800b740:	20000050 	.word	0x20000050

0800b744 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2243      	movs	r2, #67	; 0x43
 800b750:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b752:	4b03      	ldr	r3, [pc, #12]	; (800b760 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b754:	4618      	mov	r0, r3
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	200000d8 	.word	0x200000d8

0800b764 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	220a      	movs	r2, #10
 800b770:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b772:	4b03      	ldr	r3, [pc, #12]	; (800b780 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b774:	4618      	mov	r0, r3
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	2000000c 	.word	0x2000000c

0800b784 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b794:	2303      	movs	r3, #3
 800b796:	e004      	b.n	800b7a2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	370c      	adds	r7, #12
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr

0800b7ae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	b087      	sub	sp, #28
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	60f8      	str	r0, [r7, #12]
 800b7b6:	60b9      	str	r1, [r7, #8]
 800b7b8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b7d2:	2300      	movs	r3, #0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	371c      	adds	r7, #28
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7f0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	683a      	ldr	r2, [r7, #0]
 800b7f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3714      	adds	r7, #20
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b816:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d101      	bne.n	800b826 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b822:	2303      	movs	r3, #3
 800b824:	e016      	b.n	800b854 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	7c1b      	ldrb	r3, [r3, #16]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d109      	bne.n	800b842 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b834:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b838:	2101      	movs	r1, #1
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f004 ff40 	bl	80106c0 <USBD_LL_PrepareReceive>
 800b840:	e007      	b.n	800b852 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b848:	2340      	movs	r3, #64	; 0x40
 800b84a:	2101      	movs	r1, #1
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f004 ff37 	bl	80106c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	4613      	mov	r3, r2
 800b868:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d101      	bne.n	800b874 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b870:	2303      	movs	r3, #3
 800b872:	e025      	b.n	800b8c0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d003      	beq.n	800b886 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2200      	movs	r2, #0
 800b882:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d003      	beq.n	800b898 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d003      	beq.n	800b8a6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	79fa      	ldrb	r2, [r7, #7]
 800b8b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f004 fdad 	bl	8010414 <USBD_LL_Init>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b8be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d101      	bne.n	800b8e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e010      	b.n	800b902 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	683a      	ldr	r2, [r7, #0]
 800b8e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f0:	f107 020e 	add.w	r2, r7, #14
 800b8f4:	4610      	mov	r0, r2
 800b8f6:	4798      	blx	r3
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b082      	sub	sp, #8
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f004 fdca 	bl	80104ac <USBD_LL_Start>
 800b918:	4603      	mov	r3, r0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b922:	b480      	push	{r7}
 800b924:	b083      	sub	sp, #12
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	460b      	mov	r3, r1
 800b942:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b944:	2303      	movs	r3, #3
 800b946:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d009      	beq.n	800b966 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	78fa      	ldrb	r2, [r7, #3]
 800b95c:	4611      	mov	r1, r2
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	4798      	blx	r3
 800b962:	4603      	mov	r3, r0
 800b964:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b966:	7bfb      	ldrb	r3, [r7, #15]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	460b      	mov	r3, r1
 800b97a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b982:	2b00      	cmp	r3, #0
 800b984:	d007      	beq.n	800b996 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	78fa      	ldrb	r2, [r7, #3]
 800b990:	4611      	mov	r1, r2
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	4798      	blx	r3
  }

  return USBD_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b9b0:	6839      	ldr	r1, [r7, #0]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 ff3b 	bl	800c82e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b9d4:	f003 031f 	and.w	r3, r3, #31
 800b9d8:	2b02      	cmp	r3, #2
 800b9da:	d01a      	beq.n	800ba12 <USBD_LL_SetupStage+0x72>
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d822      	bhi.n	800ba26 <USBD_LL_SetupStage+0x86>
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <USBD_LL_SetupStage+0x4a>
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d00a      	beq.n	800b9fe <USBD_LL_SetupStage+0x5e>
 800b9e8:	e01d      	b.n	800ba26 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 fa18 	bl	800be28 <USBD_StdDevReq>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b9fc:	e020      	b.n	800ba40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 fa7c 	bl	800bf04 <USBD_StdItfReq>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba10:	e016      	b.n	800ba40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba18:	4619      	mov	r1, r3
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 faba 	bl	800bf94 <USBD_StdEPReq>
 800ba20:	4603      	mov	r3, r0
 800ba22:	73fb      	strb	r3, [r7, #15]
      break;
 800ba24:	e00c      	b.n	800ba40 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ba2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	4619      	mov	r1, r3
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f004 fd99 	bl	801056c <USBD_LL_StallEP>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba3e:	bf00      	nop
  }

  return ret;
 800ba40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b086      	sub	sp, #24
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	60f8      	str	r0, [r7, #12]
 800ba52:	460b      	mov	r3, r1
 800ba54:	607a      	str	r2, [r7, #4]
 800ba56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ba58:	7afb      	ldrb	r3, [r7, #11]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d137      	bne.n	800bace <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ba64:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba6c:	2b03      	cmp	r3, #3
 800ba6e:	d14a      	bne.n	800bb06 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	689a      	ldr	r2, [r3, #8]
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d913      	bls.n	800baa4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	689a      	ldr	r2, [r3, #8]
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	1ad2      	subs	r2, r2, r3
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	68da      	ldr	r2, [r3, #12]
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	4293      	cmp	r3, r2
 800ba94:	bf28      	it	cs
 800ba96:	4613      	movcs	r3, r2
 800ba98:	461a      	mov	r2, r3
 800ba9a:	6879      	ldr	r1, [r7, #4]
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f000 ffba 	bl	800ca16 <USBD_CtlContinueRx>
 800baa2:	e030      	b.n	800bb06 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baaa:	691b      	ldr	r3, [r3, #16]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00a      	beq.n	800bac6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bab6:	2b03      	cmp	r3, #3
 800bab8:	d105      	bne.n	800bac6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bac6:	68f8      	ldr	r0, [r7, #12]
 800bac8:	f000 ffb6 	bl	800ca38 <USBD_CtlSendStatus>
 800bacc:	e01b      	b.n	800bb06 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bad4:	699b      	ldr	r3, [r3, #24]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d013      	beq.n	800bb02 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bae0:	2b03      	cmp	r3, #3
 800bae2:	d10e      	bne.n	800bb02 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baea:	699b      	ldr	r3, [r3, #24]
 800baec:	7afa      	ldrb	r2, [r7, #11]
 800baee:	4611      	mov	r1, r2
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	4798      	blx	r3
 800baf4:	4603      	mov	r3, r0
 800baf6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800baf8:	7dfb      	ldrb	r3, [r7, #23]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d003      	beq.n	800bb06 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bafe:	7dfb      	ldrb	r3, [r7, #23]
 800bb00:	e002      	b.n	800bb08 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bb02:	2303      	movs	r3, #3
 800bb04:	e000      	b.n	800bb08 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bb06:	2300      	movs	r3, #0
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3718      	adds	r7, #24
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bb1e:	7afb      	ldrb	r3, [r7, #11]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d16a      	bne.n	800bbfa <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	3314      	adds	r3, #20
 800bb28:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb30:	2b02      	cmp	r3, #2
 800bb32:	d155      	bne.n	800bbe0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	689a      	ldr	r2, [r3, #8]
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d914      	bls.n	800bb6a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	689a      	ldr	r2, [r3, #8]
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	1ad2      	subs	r2, r2, r3
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	689b      	ldr	r3, [r3, #8]
 800bb52:	461a      	mov	r2, r3
 800bb54:	6879      	ldr	r1, [r7, #4]
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f000 ff2f 	bl	800c9ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	2200      	movs	r2, #0
 800bb60:	2100      	movs	r1, #0
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f004 fdac 	bl	80106c0 <USBD_LL_PrepareReceive>
 800bb68:	e03a      	b.n	800bbe0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	68da      	ldr	r2, [r3, #12]
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d11c      	bne.n	800bbb0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	685a      	ldr	r2, [r3, #4]
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d316      	bcc.n	800bbb0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d20f      	bcs.n	800bbb0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb90:	2200      	movs	r2, #0
 800bb92:	2100      	movs	r1, #0
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 ff10 	bl	800c9ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bba2:	2300      	movs	r3, #0
 800bba4:	2200      	movs	r2, #0
 800bba6:	2100      	movs	r1, #0
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f004 fd89 	bl	80106c0 <USBD_LL_PrepareReceive>
 800bbae:	e017      	b.n	800bbe0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00a      	beq.n	800bbd2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bbc2:	2b03      	cmp	r3, #3
 800bbc4:	d105      	bne.n	800bbd2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbd2:	2180      	movs	r1, #128	; 0x80
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	f004 fcc9 	bl	801056c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f000 ff3f 	bl	800ca5e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d123      	bne.n	800bc32 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f7ff fe99 	bl	800b922 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bbf8:	e01b      	b.n	800bc32 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d013      	beq.n	800bc2e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc0c:	2b03      	cmp	r3, #3
 800bc0e:	d10e      	bne.n	800bc2e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc16:	695b      	ldr	r3, [r3, #20]
 800bc18:	7afa      	ldrb	r2, [r7, #11]
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	4798      	blx	r3
 800bc20:	4603      	mov	r3, r0
 800bc22:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bc24:	7dfb      	ldrb	r3, [r7, #23]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
 800bc2c:	e002      	b.n	800bc34 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc2e:	2303      	movs	r3, #3
 800bc30:	e000      	b.n	800bc34 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3718      	adds	r7, #24
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d009      	beq.n	800bc80 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	6852      	ldr	r2, [r2, #4]
 800bc78:	b2d2      	uxtb	r2, r2
 800bc7a:	4611      	mov	r1, r2
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc80:	2340      	movs	r3, #64	; 0x40
 800bc82:	2200      	movs	r2, #0
 800bc84:	2100      	movs	r1, #0
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f004 fc2b 	bl	80104e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2240      	movs	r2, #64	; 0x40
 800bc98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc9c:	2340      	movs	r3, #64	; 0x40
 800bc9e:	2200      	movs	r2, #0
 800bca0:	2180      	movs	r1, #128	; 0x80
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f004 fc1d 	bl	80104e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2240      	movs	r2, #64	; 0x40
 800bcb2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b083      	sub	sp, #12
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	78fa      	ldrb	r2, [r7, #3]
 800bcce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	370c      	adds	r7, #12
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bcde:	b480      	push	{r7}
 800bce0:	b083      	sub	sp, #12
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2204      	movs	r2, #4
 800bcf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bcfa:	2300      	movs	r3, #0
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd16:	2b04      	cmp	r3, #4
 800bd18:	d105      	bne.n	800bd26 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	370c      	adds	r7, #12
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd42:	2b03      	cmp	r3, #3
 800bd44:	d10b      	bne.n	800bd5e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd4c:	69db      	ldr	r3, [r3, #28]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d005      	beq.n	800bd5e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd58:	69db      	ldr	r3, [r3, #28]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	460b      	mov	r3, r1
 800bd72:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	370c      	adds	r7, #12
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr

0800bd82 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bd82:	b480      	push	{r7}
 800bd84:	b083      	sub	sp, #12
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	370c      	adds	r7, #12
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b082      	sub	sp, #8
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d009      	beq.n	800bde0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	6852      	ldr	r2, [r2, #4]
 800bdd8:	b2d2      	uxtb	r2, r2
 800bdda:	4611      	mov	r1, r2
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	4798      	blx	r3
  }

  return USBD_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3708      	adds	r7, #8
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bdea:	b480      	push	{r7}
 800bdec:	b087      	sub	sp, #28
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	3301      	adds	r3, #1
 800be00:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be08:	8a3b      	ldrh	r3, [r7, #16]
 800be0a:	021b      	lsls	r3, r3, #8
 800be0c:	b21a      	sxth	r2, r3
 800be0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be12:	4313      	orrs	r3, r2
 800be14:	b21b      	sxth	r3, r3
 800be16:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be18:	89fb      	ldrh	r3, [r7, #14]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	371c      	adds	r7, #28
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
	...

0800be28 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be32:	2300      	movs	r3, #0
 800be34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be3e:	2b40      	cmp	r3, #64	; 0x40
 800be40:	d005      	beq.n	800be4e <USBD_StdDevReq+0x26>
 800be42:	2b40      	cmp	r3, #64	; 0x40
 800be44:	d853      	bhi.n	800beee <USBD_StdDevReq+0xc6>
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00b      	beq.n	800be62 <USBD_StdDevReq+0x3a>
 800be4a:	2b20      	cmp	r3, #32
 800be4c:	d14f      	bne.n	800beee <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	6839      	ldr	r1, [r7, #0]
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	4798      	blx	r3
 800be5c:	4603      	mov	r3, r0
 800be5e:	73fb      	strb	r3, [r7, #15]
    break;
 800be60:	e04a      	b.n	800bef8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	785b      	ldrb	r3, [r3, #1]
 800be66:	2b09      	cmp	r3, #9
 800be68:	d83b      	bhi.n	800bee2 <USBD_StdDevReq+0xba>
 800be6a:	a201      	add	r2, pc, #4	; (adr r2, 800be70 <USBD_StdDevReq+0x48>)
 800be6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be70:	0800bec5 	.word	0x0800bec5
 800be74:	0800bed9 	.word	0x0800bed9
 800be78:	0800bee3 	.word	0x0800bee3
 800be7c:	0800becf 	.word	0x0800becf
 800be80:	0800bee3 	.word	0x0800bee3
 800be84:	0800bea3 	.word	0x0800bea3
 800be88:	0800be99 	.word	0x0800be99
 800be8c:	0800bee3 	.word	0x0800bee3
 800be90:	0800bebb 	.word	0x0800bebb
 800be94:	0800bead 	.word	0x0800bead
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800be98:	6839      	ldr	r1, [r7, #0]
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 f9d8 	bl	800c250 <USBD_GetDescriptor>
      break;
 800bea0:	e024      	b.n	800beec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800bea2:	6839      	ldr	r1, [r7, #0]
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 fb3d 	bl	800c524 <USBD_SetAddress>
      break;
 800beaa:	e01f      	b.n	800beec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800beac:	6839      	ldr	r1, [r7, #0]
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fb7c 	bl	800c5ac <USBD_SetConfig>
 800beb4:	4603      	mov	r3, r0
 800beb6:	73fb      	strb	r3, [r7, #15]
      break;
 800beb8:	e018      	b.n	800beec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800beba:	6839      	ldr	r1, [r7, #0]
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fc19 	bl	800c6f4 <USBD_GetConfig>
      break;
 800bec2:	e013      	b.n	800beec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800bec4:	6839      	ldr	r1, [r7, #0]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fc49 	bl	800c75e <USBD_GetStatus>
      break;
 800becc:	e00e      	b.n	800beec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fc77 	bl	800c7c4 <USBD_SetFeature>
      break;
 800bed6:	e009      	b.n	800beec <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fc86 	bl	800c7ec <USBD_ClrFeature>
      break;
 800bee0:	e004      	b.n	800beec <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fcdc 	bl	800c8a2 <USBD_CtlError>
      break;
 800beea:	bf00      	nop
    }
    break;
 800beec:	e004      	b.n	800bef8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800beee:	6839      	ldr	r1, [r7, #0]
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 fcd6 	bl	800c8a2 <USBD_CtlError>
    break;
 800bef6:	bf00      	nop
  }

  return ret;
 800bef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop

0800bf04 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf1a:	2b40      	cmp	r3, #64	; 0x40
 800bf1c:	d005      	beq.n	800bf2a <USBD_StdItfReq+0x26>
 800bf1e:	2b40      	cmp	r3, #64	; 0x40
 800bf20:	d82e      	bhi.n	800bf80 <USBD_StdItfReq+0x7c>
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d001      	beq.n	800bf2a <USBD_StdItfReq+0x26>
 800bf26:	2b20      	cmp	r3, #32
 800bf28:	d12a      	bne.n	800bf80 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf30:	3b01      	subs	r3, #1
 800bf32:	2b02      	cmp	r3, #2
 800bf34:	d81d      	bhi.n	800bf72 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	889b      	ldrh	r3, [r3, #4]
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d813      	bhi.n	800bf68 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	4798      	blx	r3
 800bf4e:	4603      	mov	r3, r0
 800bf50:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	88db      	ldrh	r3, [r3, #6]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d110      	bne.n	800bf7c <USBD_StdItfReq+0x78>
 800bf5a:	7bfb      	ldrb	r3, [r7, #15]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10d      	bne.n	800bf7c <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 fd69 	bl	800ca38 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800bf66:	e009      	b.n	800bf7c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800bf68:	6839      	ldr	r1, [r7, #0]
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 fc99 	bl	800c8a2 <USBD_CtlError>
      break;
 800bf70:	e004      	b.n	800bf7c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800bf72:	6839      	ldr	r1, [r7, #0]
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fc94 	bl	800c8a2 <USBD_CtlError>
      break;
 800bf7a:	e000      	b.n	800bf7e <USBD_StdItfReq+0x7a>
      break;
 800bf7c:	bf00      	nop
    }
    break;
 800bf7e:	e004      	b.n	800bf8a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fc8d 	bl	800c8a2 <USBD_CtlError>
    break;
 800bf88:	bf00      	nop
  }

  return ret;
 800bf8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	889b      	ldrh	r3, [r3, #4]
 800bfa6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfb0:	2b40      	cmp	r3, #64	; 0x40
 800bfb2:	d007      	beq.n	800bfc4 <USBD_StdEPReq+0x30>
 800bfb4:	2b40      	cmp	r3, #64	; 0x40
 800bfb6:	f200 8140 	bhi.w	800c23a <USBD_StdEPReq+0x2a6>
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00c      	beq.n	800bfd8 <USBD_StdEPReq+0x44>
 800bfbe:	2b20      	cmp	r3, #32
 800bfc0:	f040 813b 	bne.w	800c23a <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	6839      	ldr	r1, [r7, #0]
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	4798      	blx	r3
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	73fb      	strb	r3, [r7, #15]
    break;
 800bfd6:	e135      	b.n	800c244 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	785b      	ldrb	r3, [r3, #1]
 800bfdc:	2b03      	cmp	r3, #3
 800bfde:	d007      	beq.n	800bff0 <USBD_StdEPReq+0x5c>
 800bfe0:	2b03      	cmp	r3, #3
 800bfe2:	f300 8124 	bgt.w	800c22e <USBD_StdEPReq+0x29a>
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d07b      	beq.n	800c0e2 <USBD_StdEPReq+0x14e>
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d03b      	beq.n	800c066 <USBD_StdEPReq+0xd2>
 800bfee:	e11e      	b.n	800c22e <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	d002      	beq.n	800c000 <USBD_StdEPReq+0x6c>
 800bffa:	2b03      	cmp	r3, #3
 800bffc:	d016      	beq.n	800c02c <USBD_StdEPReq+0x98>
 800bffe:	e02c      	b.n	800c05a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c000:	7bbb      	ldrb	r3, [r7, #14]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d00d      	beq.n	800c022 <USBD_StdEPReq+0x8e>
 800c006:	7bbb      	ldrb	r3, [r7, #14]
 800c008:	2b80      	cmp	r3, #128	; 0x80
 800c00a:	d00a      	beq.n	800c022 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c00c:	7bbb      	ldrb	r3, [r7, #14]
 800c00e:	4619      	mov	r1, r3
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f004 faab 	bl	801056c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c016:	2180      	movs	r1, #128	; 0x80
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f004 faa7 	bl	801056c <USBD_LL_StallEP>
 800c01e:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c020:	e020      	b.n	800c064 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800c022:	6839      	ldr	r1, [r7, #0]
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fc3c 	bl	800c8a2 <USBD_CtlError>
        break;
 800c02a:	e01b      	b.n	800c064 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	885b      	ldrh	r3, [r3, #2]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10e      	bne.n	800c052 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00b      	beq.n	800c052 <USBD_StdEPReq+0xbe>
 800c03a:	7bbb      	ldrb	r3, [r7, #14]
 800c03c:	2b80      	cmp	r3, #128	; 0x80
 800c03e:	d008      	beq.n	800c052 <USBD_StdEPReq+0xbe>
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	88db      	ldrh	r3, [r3, #6]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d104      	bne.n	800c052 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c048:	7bbb      	ldrb	r3, [r7, #14]
 800c04a:	4619      	mov	r1, r3
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f004 fa8d 	bl	801056c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 fcf0 	bl	800ca38 <USBD_CtlSendStatus>

        break;
 800c058:	e004      	b.n	800c064 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fc20 	bl	800c8a2 <USBD_CtlError>
        break;
 800c062:	bf00      	nop
      }
      break;
 800c064:	e0e8      	b.n	800c238 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c06c:	2b02      	cmp	r3, #2
 800c06e:	d002      	beq.n	800c076 <USBD_StdEPReq+0xe2>
 800c070:	2b03      	cmp	r3, #3
 800c072:	d016      	beq.n	800c0a2 <USBD_StdEPReq+0x10e>
 800c074:	e02e      	b.n	800c0d4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c076:	7bbb      	ldrb	r3, [r7, #14]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00d      	beq.n	800c098 <USBD_StdEPReq+0x104>
 800c07c:	7bbb      	ldrb	r3, [r7, #14]
 800c07e:	2b80      	cmp	r3, #128	; 0x80
 800c080:	d00a      	beq.n	800c098 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c082:	7bbb      	ldrb	r3, [r7, #14]
 800c084:	4619      	mov	r1, r3
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f004 fa70 	bl	801056c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c08c:	2180      	movs	r1, #128	; 0x80
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f004 fa6c 	bl	801056c <USBD_LL_StallEP>
 800c094:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c096:	e023      	b.n	800c0e0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800c098:	6839      	ldr	r1, [r7, #0]
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 fc01 	bl	800c8a2 <USBD_CtlError>
        break;
 800c0a0:	e01e      	b.n	800c0e0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	885b      	ldrh	r3, [r3, #2]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d119      	bne.n	800c0de <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c0aa:	7bbb      	ldrb	r3, [r7, #14]
 800c0ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d004      	beq.n	800c0be <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0b4:	7bbb      	ldrb	r3, [r7, #14]
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f004 fa76 	bl	80105aa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 fcba 	bl	800ca38 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	6839      	ldr	r1, [r7, #0]
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	4798      	blx	r3
        }
        break;
 800c0d2:	e004      	b.n	800c0de <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800c0d4:	6839      	ldr	r1, [r7, #0]
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fbe3 	bl	800c8a2 <USBD_CtlError>
        break;
 800c0dc:	e000      	b.n	800c0e0 <USBD_StdEPReq+0x14c>
        break;
 800c0de:	bf00      	nop
      }
      break;
 800c0e0:	e0aa      	b.n	800c238 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	d002      	beq.n	800c0f2 <USBD_StdEPReq+0x15e>
 800c0ec:	2b03      	cmp	r3, #3
 800c0ee:	d032      	beq.n	800c156 <USBD_StdEPReq+0x1c2>
 800c0f0:	e097      	b.n	800c222 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0f2:	7bbb      	ldrb	r3, [r7, #14]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d007      	beq.n	800c108 <USBD_StdEPReq+0x174>
 800c0f8:	7bbb      	ldrb	r3, [r7, #14]
 800c0fa:	2b80      	cmp	r3, #128	; 0x80
 800c0fc:	d004      	beq.n	800c108 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800c0fe:	6839      	ldr	r1, [r7, #0]
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 fbce 	bl	800c8a2 <USBD_CtlError>
          break;
 800c106:	e091      	b.n	800c22c <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	da0b      	bge.n	800c128 <USBD_StdEPReq+0x194>
 800c110:	7bbb      	ldrb	r3, [r7, #14]
 800c112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c116:	4613      	mov	r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	4413      	add	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	3310      	adds	r3, #16
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	4413      	add	r3, r2
 800c124:	3304      	adds	r3, #4
 800c126:	e00b      	b.n	800c140 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c128:	7bbb      	ldrb	r3, [r7, #14]
 800c12a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c12e:	4613      	mov	r3, r2
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	4413      	add	r3, r2
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	4413      	add	r3, r2
 800c13e:	3304      	adds	r3, #4
 800c140:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	2200      	movs	r2, #0
 800c146:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	2202      	movs	r2, #2
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fc18 	bl	800c984 <USBD_CtlSendData>
        break;
 800c154:	e06a      	b.n	800c22c <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	da11      	bge.n	800c182 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	f003 020f 	and.w	r2, r3, #15
 800c164:	6879      	ldr	r1, [r7, #4]
 800c166:	4613      	mov	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	4413      	add	r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	440b      	add	r3, r1
 800c170:	3324      	adds	r3, #36	; 0x24
 800c172:	881b      	ldrh	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d117      	bne.n	800c1a8 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fb91 	bl	800c8a2 <USBD_CtlError>
            break;
 800c180:	e054      	b.n	800c22c <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c182:	7bbb      	ldrb	r3, [r7, #14]
 800c184:	f003 020f 	and.w	r2, r3, #15
 800c188:	6879      	ldr	r1, [r7, #4]
 800c18a:	4613      	mov	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4413      	add	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	440b      	add	r3, r1
 800c194:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c198:	881b      	ldrh	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d104      	bne.n	800c1a8 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fb7e 	bl	800c8a2 <USBD_CtlError>
            break;
 800c1a6:	e041      	b.n	800c22c <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	da0b      	bge.n	800c1c8 <USBD_StdEPReq+0x234>
 800c1b0:	7bbb      	ldrb	r3, [r7, #14]
 800c1b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	3310      	adds	r3, #16
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	e00b      	b.n	800c1e0 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c1c8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	4413      	add	r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	4413      	add	r3, r2
 800c1de:	3304      	adds	r3, #4
 800c1e0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c1e2:	7bbb      	ldrb	r3, [r7, #14]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <USBD_StdEPReq+0x25a>
 800c1e8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ea:	2b80      	cmp	r3, #128	; 0x80
 800c1ec:	d103      	bne.n	800c1f6 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	601a      	str	r2, [r3, #0]
 800c1f4:	e00e      	b.n	800c214 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c1f6:	7bbb      	ldrb	r3, [r7, #14]
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f004 f9f4 	bl	80105e8 <USBD_LL_IsStallEP>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d003      	beq.n	800c20e <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	2201      	movs	r2, #1
 800c20a:	601a      	str	r2, [r3, #0]
 800c20c:	e002      	b.n	800c214 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	2200      	movs	r2, #0
 800c212:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	2202      	movs	r2, #2
 800c218:	4619      	mov	r1, r3
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 fbb2 	bl	800c984 <USBD_CtlSendData>
          break;
 800c220:	e004      	b.n	800c22c <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800c222:	6839      	ldr	r1, [r7, #0]
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 fb3c 	bl	800c8a2 <USBD_CtlError>
        break;
 800c22a:	bf00      	nop
      }
      break;
 800c22c:	e004      	b.n	800c238 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 800c22e:	6839      	ldr	r1, [r7, #0]
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 fb36 	bl	800c8a2 <USBD_CtlError>
      break;
 800c236:	bf00      	nop
    }
    break;
 800c238:	e004      	b.n	800c244 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fb30 	bl	800c8a2 <USBD_CtlError>
    break;
 800c242:	bf00      	nop
  }

  return ret;
 800c244:	7bfb      	ldrb	r3, [r7, #15]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
	...

0800c250 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c25a:	2300      	movs	r3, #0
 800c25c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c25e:	2300      	movs	r3, #0
 800c260:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c262:	2300      	movs	r3, #0
 800c264:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	885b      	ldrh	r3, [r3, #2]
 800c26a:	0a1b      	lsrs	r3, r3, #8
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	3b01      	subs	r3, #1
 800c270:	2b06      	cmp	r3, #6
 800c272:	f200 8128 	bhi.w	800c4c6 <USBD_GetDescriptor+0x276>
 800c276:	a201      	add	r2, pc, #4	; (adr r2, 800c27c <USBD_GetDescriptor+0x2c>)
 800c278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27c:	0800c299 	.word	0x0800c299
 800c280:	0800c2b1 	.word	0x0800c2b1
 800c284:	0800c2f1 	.word	0x0800c2f1
 800c288:	0800c4c7 	.word	0x0800c4c7
 800c28c:	0800c4c7 	.word	0x0800c4c7
 800c290:	0800c467 	.word	0x0800c467
 800c294:	0800c493 	.word	0x0800c493
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	7c12      	ldrb	r2, [r2, #16]
 800c2a4:	f107 0108 	add.w	r1, r7, #8
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	4798      	blx	r3
 800c2ac:	60f8      	str	r0, [r7, #12]
    break;
 800c2ae:	e112      	b.n	800c4d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	7c1b      	ldrb	r3, [r3, #16]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d10d      	bne.n	800c2d4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c0:	f107 0208 	add.w	r2, r7, #8
 800c2c4:	4610      	mov	r0, r2
 800c2c6:	4798      	blx	r3
 800c2c8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c2d2:	e100      	b.n	800c4d6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2dc:	f107 0208 	add.w	r2, r7, #8
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	4798      	blx	r3
 800c2e4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	2202      	movs	r2, #2
 800c2ec:	701a      	strb	r2, [r3, #0]
    break;
 800c2ee:	e0f2      	b.n	800c4d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	885b      	ldrh	r3, [r3, #2]
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	2b05      	cmp	r3, #5
 800c2f8:	f200 80ac 	bhi.w	800c454 <USBD_GetDescriptor+0x204>
 800c2fc:	a201      	add	r2, pc, #4	; (adr r2, 800c304 <USBD_GetDescriptor+0xb4>)
 800c2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c302:	bf00      	nop
 800c304:	0800c31d 	.word	0x0800c31d
 800c308:	0800c351 	.word	0x0800c351
 800c30c:	0800c385 	.word	0x0800c385
 800c310:	0800c3b9 	.word	0x0800c3b9
 800c314:	0800c3ed 	.word	0x0800c3ed
 800c318:	0800c421 	.word	0x0800c421
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00b      	beq.n	800c340 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	7c12      	ldrb	r2, [r2, #16]
 800c334:	f107 0108 	add.w	r1, r7, #8
 800c338:	4610      	mov	r0, r2
 800c33a:	4798      	blx	r3
 800c33c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c33e:	e091      	b.n	800c464 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 faad 	bl	800c8a2 <USBD_CtlError>
        err++;
 800c348:	7afb      	ldrb	r3, [r7, #11]
 800c34a:	3301      	adds	r3, #1
 800c34c:	72fb      	strb	r3, [r7, #11]
      break;
 800c34e:	e089      	b.n	800c464 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00b      	beq.n	800c374 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	7c12      	ldrb	r2, [r2, #16]
 800c368:	f107 0108 	add.w	r1, r7, #8
 800c36c:	4610      	mov	r0, r2
 800c36e:	4798      	blx	r3
 800c370:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c372:	e077      	b.n	800c464 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 fa93 	bl	800c8a2 <USBD_CtlError>
        err++;
 800c37c:	7afb      	ldrb	r3, [r7, #11]
 800c37e:	3301      	adds	r3, #1
 800c380:	72fb      	strb	r3, [r7, #11]
      break;
 800c382:	e06f      	b.n	800c464 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00b      	beq.n	800c3a8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	7c12      	ldrb	r2, [r2, #16]
 800c39c:	f107 0108 	add.w	r1, r7, #8
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	4798      	blx	r3
 800c3a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3a6:	e05d      	b.n	800c464 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c3a8:	6839      	ldr	r1, [r7, #0]
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 fa79 	bl	800c8a2 <USBD_CtlError>
        err++;
 800c3b0:	7afb      	ldrb	r3, [r7, #11]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	72fb      	strb	r3, [r7, #11]
      break;
 800c3b6:	e055      	b.n	800c464 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3be:	691b      	ldr	r3, [r3, #16]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00b      	beq.n	800c3dc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	7c12      	ldrb	r2, [r2, #16]
 800c3d0:	f107 0108 	add.w	r1, r7, #8
 800c3d4:	4610      	mov	r0, r2
 800c3d6:	4798      	blx	r3
 800c3d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3da:	e043      	b.n	800c464 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fa5f 	bl	800c8a2 <USBD_CtlError>
        err++;
 800c3e4:	7afb      	ldrb	r3, [r7, #11]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	72fb      	strb	r3, [r7, #11]
      break;
 800c3ea:	e03b      	b.n	800c464 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3f2:	695b      	ldr	r3, [r3, #20]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d00b      	beq.n	800c410 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3fe:	695b      	ldr	r3, [r3, #20]
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	7c12      	ldrb	r2, [r2, #16]
 800c404:	f107 0108 	add.w	r1, r7, #8
 800c408:	4610      	mov	r0, r2
 800c40a:	4798      	blx	r3
 800c40c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c40e:	e029      	b.n	800c464 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c410:	6839      	ldr	r1, [r7, #0]
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 fa45 	bl	800c8a2 <USBD_CtlError>
        err++;
 800c418:	7afb      	ldrb	r3, [r7, #11]
 800c41a:	3301      	adds	r3, #1
 800c41c:	72fb      	strb	r3, [r7, #11]
      break;
 800c41e:	e021      	b.n	800c464 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c426:	699b      	ldr	r3, [r3, #24]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00b      	beq.n	800c444 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c432:	699b      	ldr	r3, [r3, #24]
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	7c12      	ldrb	r2, [r2, #16]
 800c438:	f107 0108 	add.w	r1, r7, #8
 800c43c:	4610      	mov	r0, r2
 800c43e:	4798      	blx	r3
 800c440:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c442:	e00f      	b.n	800c464 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c444:	6839      	ldr	r1, [r7, #0]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fa2b 	bl	800c8a2 <USBD_CtlError>
        err++;
 800c44c:	7afb      	ldrb	r3, [r7, #11]
 800c44e:	3301      	adds	r3, #1
 800c450:	72fb      	strb	r3, [r7, #11]
      break;
 800c452:	e007      	b.n	800c464 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fa23 	bl	800c8a2 <USBD_CtlError>
      err++;
 800c45c:	7afb      	ldrb	r3, [r7, #11]
 800c45e:	3301      	adds	r3, #1
 800c460:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c462:	bf00      	nop
    }
    break;
 800c464:	e037      	b.n	800c4d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	7c1b      	ldrb	r3, [r3, #16]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d109      	bne.n	800c482 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c476:	f107 0208 	add.w	r2, r7, #8
 800c47a:	4610      	mov	r0, r2
 800c47c:	4798      	blx	r3
 800c47e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c480:	e029      	b.n	800c4d6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 fa0c 	bl	800c8a2 <USBD_CtlError>
      err++;
 800c48a:	7afb      	ldrb	r3, [r7, #11]
 800c48c:	3301      	adds	r3, #1
 800c48e:	72fb      	strb	r3, [r7, #11]
    break;
 800c490:	e021      	b.n	800c4d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	7c1b      	ldrb	r3, [r3, #16]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d10d      	bne.n	800c4b6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a2:	f107 0208 	add.w	r2, r7, #8
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	4798      	blx	r3
 800c4aa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	2207      	movs	r2, #7
 800c4b2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c4b4:	e00f      	b.n	800c4d6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c4b6:	6839      	ldr	r1, [r7, #0]
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 f9f2 	bl	800c8a2 <USBD_CtlError>
      err++;
 800c4be:	7afb      	ldrb	r3, [r7, #11]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	72fb      	strb	r3, [r7, #11]
    break;
 800c4c4:	e007      	b.n	800c4d6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800c4c6:	6839      	ldr	r1, [r7, #0]
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 f9ea 	bl	800c8a2 <USBD_CtlError>
    err++;
 800c4ce:	7afb      	ldrb	r3, [r7, #11]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	72fb      	strb	r3, [r7, #11]
    break;
 800c4d4:	bf00      	nop
  }

  if (err != 0U)
 800c4d6:	7afb      	ldrb	r3, [r7, #11]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d11e      	bne.n	800c51a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	88db      	ldrh	r3, [r3, #6]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d016      	beq.n	800c512 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800c4e4:	893b      	ldrh	r3, [r7, #8]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00e      	beq.n	800c508 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	88da      	ldrh	r2, [r3, #6]
 800c4ee:	893b      	ldrh	r3, [r7, #8]
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	bf28      	it	cs
 800c4f4:	4613      	movcs	r3, r2
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c4fa:	893b      	ldrh	r3, [r7, #8]
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	68f9      	ldr	r1, [r7, #12]
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 fa3f 	bl	800c984 <USBD_CtlSendData>
 800c506:	e009      	b.n	800c51c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 f9c9 	bl	800c8a2 <USBD_CtlError>
 800c510:	e004      	b.n	800c51c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 fa90 	bl	800ca38 <USBD_CtlSendStatus>
 800c518:	e000      	b.n	800c51c <USBD_GetDescriptor+0x2cc>
    return;
 800c51a:	bf00      	nop
    }
  }
}
 800c51c:	3710      	adds	r7, #16
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop

0800c524 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	889b      	ldrh	r3, [r3, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d130      	bne.n	800c598 <USBD_SetAddress+0x74>
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	88db      	ldrh	r3, [r3, #6]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d12c      	bne.n	800c598 <USBD_SetAddress+0x74>
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	885b      	ldrh	r3, [r3, #2]
 800c542:	2b7f      	cmp	r3, #127	; 0x7f
 800c544:	d828      	bhi.n	800c598 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	885b      	ldrh	r3, [r3, #2]
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c550:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c558:	2b03      	cmp	r3, #3
 800c55a:	d104      	bne.n	800c566 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c55c:	6839      	ldr	r1, [r7, #0]
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 f99f 	bl	800c8a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c564:	e01d      	b.n	800c5a2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	7bfa      	ldrb	r2, [r7, #15]
 800c56a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c56e:	7bfb      	ldrb	r3, [r7, #15]
 800c570:	4619      	mov	r1, r3
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f004 f864 	bl	8010640 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 fa5d 	bl	800ca38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c57e:	7bfb      	ldrb	r3, [r7, #15]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d004      	beq.n	800c58e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2202      	movs	r2, #2
 800c588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c58c:	e009      	b.n	800c5a2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2201      	movs	r2, #1
 800c592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c596:	e004      	b.n	800c5a2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c598:	6839      	ldr	r1, [r7, #0]
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 f981 	bl	800c8a2 <USBD_CtlError>
  }
}
 800c5a0:	bf00      	nop
 800c5a2:	bf00      	nop
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
	...

0800c5ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	885b      	ldrh	r3, [r3, #2]
 800c5be:	b2da      	uxtb	r2, r3
 800c5c0:	4b4b      	ldr	r3, [pc, #300]	; (800c6f0 <USBD_SetConfig+0x144>)
 800c5c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c5c4:	4b4a      	ldr	r3, [pc, #296]	; (800c6f0 <USBD_SetConfig+0x144>)
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d905      	bls.n	800c5d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f967 	bl	800c8a2 <USBD_CtlError>
    return USBD_FAIL;
 800c5d4:	2303      	movs	r3, #3
 800c5d6:	e087      	b.n	800c6e8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	d002      	beq.n	800c5e8 <USBD_SetConfig+0x3c>
 800c5e2:	2b03      	cmp	r3, #3
 800c5e4:	d025      	beq.n	800c632 <USBD_SetConfig+0x86>
 800c5e6:	e071      	b.n	800c6cc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c5e8:	4b41      	ldr	r3, [pc, #260]	; (800c6f0 <USBD_SetConfig+0x144>)
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d01c      	beq.n	800c62a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c5f0:	4b3f      	ldr	r3, [pc, #252]	; (800c6f0 <USBD_SetConfig+0x144>)
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5fa:	4b3d      	ldr	r3, [pc, #244]	; (800c6f0 <USBD_SetConfig+0x144>)
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f7ff f999 	bl	800b938 <USBD_SetClassConfig>
 800c606:	4603      	mov	r3, r0
 800c608:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c60a:	7bfb      	ldrb	r3, [r7, #15]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d004      	beq.n	800c61a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 f945 	bl	800c8a2 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c618:	e065      	b.n	800c6e6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 fa0c 	bl	800ca38 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2203      	movs	r2, #3
 800c624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c628:	e05d      	b.n	800c6e6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 fa04 	bl	800ca38 <USBD_CtlSendStatus>
    break;
 800c630:	e059      	b.n	800c6e6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c632:	4b2f      	ldr	r3, [pc, #188]	; (800c6f0 <USBD_SetConfig+0x144>)
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d112      	bne.n	800c660 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2202      	movs	r2, #2
 800c63e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c642:	4b2b      	ldr	r3, [pc, #172]	; (800c6f0 <USBD_SetConfig+0x144>)
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	461a      	mov	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c64c:	4b28      	ldr	r3, [pc, #160]	; (800c6f0 <USBD_SetConfig+0x144>)
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	4619      	mov	r1, r3
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f7ff f98c 	bl	800b970 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 f9ed 	bl	800ca38 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c65e:	e042      	b.n	800c6e6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c660:	4b23      	ldr	r3, [pc, #140]	; (800c6f0 <USBD_SetConfig+0x144>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	461a      	mov	r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d02a      	beq.n	800c6c4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	b2db      	uxtb	r3, r3
 800c674:	4619      	mov	r1, r3
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7ff f97a 	bl	800b970 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c67c:	4b1c      	ldr	r3, [pc, #112]	; (800c6f0 <USBD_SetConfig+0x144>)
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	461a      	mov	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c686:	4b1a      	ldr	r3, [pc, #104]	; (800c6f0 <USBD_SetConfig+0x144>)
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	4619      	mov	r1, r3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7ff f953 	bl	800b938 <USBD_SetClassConfig>
 800c692:	4603      	mov	r3, r0
 800c694:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c696:	7bfb      	ldrb	r3, [r7, #15]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d00f      	beq.n	800c6bc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c69c:	6839      	ldr	r1, [r7, #0]
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 f8ff 	bl	800c8a2 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7ff f95f 	bl	800b970 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2202      	movs	r2, #2
 800c6b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c6ba:	e014      	b.n	800c6e6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 f9bb 	bl	800ca38 <USBD_CtlSendStatus>
    break;
 800c6c2:	e010      	b.n	800c6e6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 f9b7 	bl	800ca38 <USBD_CtlSendStatus>
    break;
 800c6ca:	e00c      	b.n	800c6e6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c6cc:	6839      	ldr	r1, [r7, #0]
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f8e7 	bl	800c8a2 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6d4:	4b06      	ldr	r3, [pc, #24]	; (800c6f0 <USBD_SetConfig+0x144>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f7ff f948 	bl	800b970 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c6e0:	2303      	movs	r3, #3
 800c6e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c6e4:	bf00      	nop
  }

  return ret;
 800c6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3710      	adds	r7, #16
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	200005d9 	.word	0x200005d9

0800c6f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	88db      	ldrh	r3, [r3, #6]
 800c702:	2b01      	cmp	r3, #1
 800c704:	d004      	beq.n	800c710 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c706:	6839      	ldr	r1, [r7, #0]
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f000 f8ca 	bl	800c8a2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c70e:	e022      	b.n	800c756 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c716:	2b02      	cmp	r3, #2
 800c718:	dc02      	bgt.n	800c720 <USBD_GetConfig+0x2c>
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	dc03      	bgt.n	800c726 <USBD_GetConfig+0x32>
 800c71e:	e015      	b.n	800c74c <USBD_GetConfig+0x58>
 800c720:	2b03      	cmp	r3, #3
 800c722:	d00b      	beq.n	800c73c <USBD_GetConfig+0x48>
 800c724:	e012      	b.n	800c74c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	3308      	adds	r3, #8
 800c730:	2201      	movs	r2, #1
 800c732:	4619      	mov	r1, r3
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 f925 	bl	800c984 <USBD_CtlSendData>
      break;
 800c73a:	e00c      	b.n	800c756 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	3304      	adds	r3, #4
 800c740:	2201      	movs	r2, #1
 800c742:	4619      	mov	r1, r3
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 f91d 	bl	800c984 <USBD_CtlSendData>
      break;
 800c74a:	e004      	b.n	800c756 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800c74c:	6839      	ldr	r1, [r7, #0]
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 f8a7 	bl	800c8a2 <USBD_CtlError>
      break;
 800c754:	bf00      	nop
}
 800c756:	bf00      	nop
 800c758:	3708      	adds	r7, #8
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b082      	sub	sp, #8
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c76e:	3b01      	subs	r3, #1
 800c770:	2b02      	cmp	r3, #2
 800c772:	d81e      	bhi.n	800c7b2 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	88db      	ldrh	r3, [r3, #6]
 800c778:	2b02      	cmp	r3, #2
 800c77a:	d004      	beq.n	800c786 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c77c:	6839      	ldr	r1, [r7, #0]
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 f88f 	bl	800c8a2 <USBD_CtlError>
      break;
 800c784:	e01a      	b.n	800c7bc <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2201      	movs	r2, #1
 800c78a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c792:	2b00      	cmp	r3, #0
 800c794:	d005      	beq.n	800c7a2 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	68db      	ldr	r3, [r3, #12]
 800c79a:	f043 0202 	orr.w	r2, r3, #2
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	330c      	adds	r3, #12
 800c7a6:	2202      	movs	r2, #2
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f8ea 	bl	800c984 <USBD_CtlSendData>
    break;
 800c7b0:	e004      	b.n	800c7bc <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c7b2:	6839      	ldr	r1, [r7, #0]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 f874 	bl	800c8a2 <USBD_CtlError>
    break;
 800c7ba:	bf00      	nop
  }
}
 800c7bc:	bf00      	nop
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	885b      	ldrh	r3, [r3, #2]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d106      	bne.n	800c7e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f92a 	bl	800ca38 <USBD_CtlSendStatus>
  }
}
 800c7e4:	bf00      	nop
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	d80b      	bhi.n	800c81a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	885b      	ldrh	r3, [r3, #2]
 800c806:	2b01      	cmp	r3, #1
 800c808:	d10c      	bne.n	800c824 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 f910 	bl	800ca38 <USBD_CtlSendStatus>
      }
      break;
 800c818:	e004      	b.n	800c824 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 f840 	bl	800c8a2 <USBD_CtlError>
      break;
 800c822:	e000      	b.n	800c826 <USBD_ClrFeature+0x3a>
      break;
 800c824:	bf00      	nop
  }
}
 800c826:	bf00      	nop
 800c828:	3708      	adds	r7, #8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b084      	sub	sp, #16
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
 800c836:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	781a      	ldrb	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	3301      	adds	r3, #1
 800c848:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	781a      	ldrb	r2, [r3, #0]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	3301      	adds	r3, #1
 800c856:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f7ff fac6 	bl	800bdea <SWAPBYTE>
 800c85e:	4603      	mov	r3, r0
 800c860:	461a      	mov	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	3301      	adds	r3, #1
 800c86a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	3301      	adds	r3, #1
 800c870:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c872:	68f8      	ldr	r0, [r7, #12]
 800c874:	f7ff fab9 	bl	800bdea <SWAPBYTE>
 800c878:	4603      	mov	r3, r0
 800c87a:	461a      	mov	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	3301      	adds	r3, #1
 800c884:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	3301      	adds	r3, #1
 800c88a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f7ff faac 	bl	800bdea <SWAPBYTE>
 800c892:	4603      	mov	r3, r0
 800c894:	461a      	mov	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	80da      	strh	r2, [r3, #6]
}
 800c89a:	bf00      	nop
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b082      	sub	sp, #8
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
 800c8aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8ac:	2180      	movs	r1, #128	; 0x80
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f003 fe5c 	bl	801056c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f003 fe58 	bl	801056c <USBD_LL_StallEP>
}
 800c8bc:	bf00      	nop
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b086      	sub	sp, #24
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d036      	beq.n	800c948 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c8de:	6938      	ldr	r0, [r7, #16]
 800c8e0:	f000 f836 	bl	800c950 <USBD_GetLen>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	005b      	lsls	r3, r3, #1
 800c8ec:	b29a      	uxth	r2, r3
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c8f2:	7dfb      	ldrb	r3, [r7, #23]
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	4413      	add	r3, r2
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	7812      	ldrb	r2, [r2, #0]
 800c8fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8fe:	7dfb      	ldrb	r3, [r7, #23]
 800c900:	3301      	adds	r3, #1
 800c902:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c904:	7dfb      	ldrb	r3, [r7, #23]
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	4413      	add	r3, r2
 800c90a:	2203      	movs	r2, #3
 800c90c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
 800c910:	3301      	adds	r3, #1
 800c912:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c914:	e013      	b.n	800c93e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c916:	7dfb      	ldrb	r3, [r7, #23]
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	4413      	add	r3, r2
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	7812      	ldrb	r2, [r2, #0]
 800c920:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	3301      	adds	r3, #1
 800c926:	613b      	str	r3, [r7, #16]
    idx++;
 800c928:	7dfb      	ldrb	r3, [r7, #23]
 800c92a:	3301      	adds	r3, #1
 800c92c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c92e:	7dfb      	ldrb	r3, [r7, #23]
 800c930:	68ba      	ldr	r2, [r7, #8]
 800c932:	4413      	add	r3, r2
 800c934:	2200      	movs	r2, #0
 800c936:	701a      	strb	r2, [r3, #0]
    idx++;
 800c938:	7dfb      	ldrb	r3, [r7, #23]
 800c93a:	3301      	adds	r3, #1
 800c93c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1e7      	bne.n	800c916 <USBD_GetString+0x52>
 800c946:	e000      	b.n	800c94a <USBD_GetString+0x86>
    return;
 800c948:	bf00      	nop
  }
}
 800c94a:	3718      	adds	r7, #24
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c950:	b480      	push	{r7}
 800c952:	b085      	sub	sp, #20
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c958:	2300      	movs	r3, #0
 800c95a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c960:	e005      	b.n	800c96e <USBD_GetLen+0x1e>
  {
    len++;
 800c962:	7bfb      	ldrb	r3, [r7, #15]
 800c964:	3301      	adds	r3, #1
 800c966:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	3301      	adds	r3, #1
 800c96c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d1f5      	bne.n	800c962 <USBD_GetLen+0x12>
  }

  return len;
 800c976:	7bfb      	ldrb	r3, [r7, #15]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3714      	adds	r7, #20
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2202      	movs	r2, #2
 800c994:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f003 fe67 	bl	801067e <USBD_LL_Transmit>

  return USBD_OK;
 800c9b0:	2300      	movs	r3, #0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b084      	sub	sp, #16
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	60f8      	str	r0, [r7, #12]
 800c9c2:	60b9      	str	r1, [r7, #8]
 800c9c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	68ba      	ldr	r2, [r7, #8]
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f003 fe56 	bl	801067e <USBD_LL_Transmit>

  return USBD_OK;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3710      	adds	r7, #16
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2203      	movs	r2, #3
 800c9ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	68ba      	ldr	r2, [r7, #8]
 800ca04:	2100      	movs	r1, #0
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f003 fe5a 	bl	80106c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b084      	sub	sp, #16
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	60f8      	str	r0, [r7, #12]
 800ca1e:	60b9      	str	r1, [r7, #8]
 800ca20:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	2100      	movs	r1, #0
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f003 fe49 	bl	80106c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca2e:	2300      	movs	r3, #0
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3710      	adds	r7, #16
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2204      	movs	r2, #4
 800ca44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca48:	2300      	movs	r3, #0
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f003 fe15 	bl	801067e <USBD_LL_Transmit>

  return USBD_OK;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b082      	sub	sp, #8
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2205      	movs	r2, #5
 800ca6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca6e:	2300      	movs	r3, #0
 800ca70:	2200      	movs	r2, #0
 800ca72:	2100      	movs	r1, #0
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f003 fe23 	bl	80106c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3708      	adds	r7, #8
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ca84:	b480      	push	{r7}
 800ca86:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ca88:	bf00      	nop
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr
	...

0800ca94 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca9a:	f3ef 8305 	mrs	r3, IPSR
 800ca9e:	60bb      	str	r3, [r7, #8]
  return(result);
 800caa0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d10f      	bne.n	800cac6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800caa6:	f3ef 8310 	mrs	r3, PRIMASK
 800caaa:	607b      	str	r3, [r7, #4]
  return(result);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d105      	bne.n	800cabe <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cab2:	f3ef 8311 	mrs	r3, BASEPRI
 800cab6:	603b      	str	r3, [r7, #0]
  return(result);
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d007      	beq.n	800cace <osKernelInitialize+0x3a>
 800cabe:	4b0e      	ldr	r3, [pc, #56]	; (800caf8 <osKernelInitialize+0x64>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b02      	cmp	r3, #2
 800cac4:	d103      	bne.n	800cace <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cac6:	f06f 0305 	mvn.w	r3, #5
 800caca:	60fb      	str	r3, [r7, #12]
 800cacc:	e00c      	b.n	800cae8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cace:	4b0a      	ldr	r3, [pc, #40]	; (800caf8 <osKernelInitialize+0x64>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d105      	bne.n	800cae2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cad6:	4b08      	ldr	r3, [pc, #32]	; (800caf8 <osKernelInitialize+0x64>)
 800cad8:	2201      	movs	r2, #1
 800cada:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cadc:	2300      	movs	r3, #0
 800cade:	60fb      	str	r3, [r7, #12]
 800cae0:	e002      	b.n	800cae8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cae2:	f04f 33ff 	mov.w	r3, #4294967295
 800cae6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cae8:	68fb      	ldr	r3, [r7, #12]
}
 800caea:	4618      	mov	r0, r3
 800caec:	3714      	adds	r7, #20
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr
 800caf6:	bf00      	nop
 800caf8:	200005dc 	.word	0x200005dc

0800cafc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb02:	f3ef 8305 	mrs	r3, IPSR
 800cb06:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d10f      	bne.n	800cb2e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb0e:	f3ef 8310 	mrs	r3, PRIMASK
 800cb12:	607b      	str	r3, [r7, #4]
  return(result);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d105      	bne.n	800cb26 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb1a:	f3ef 8311 	mrs	r3, BASEPRI
 800cb1e:	603b      	str	r3, [r7, #0]
  return(result);
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d007      	beq.n	800cb36 <osKernelStart+0x3a>
 800cb26:	4b0f      	ldr	r3, [pc, #60]	; (800cb64 <osKernelStart+0x68>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2b02      	cmp	r3, #2
 800cb2c:	d103      	bne.n	800cb36 <osKernelStart+0x3a>
    stat = osErrorISR;
 800cb2e:	f06f 0305 	mvn.w	r3, #5
 800cb32:	60fb      	str	r3, [r7, #12]
 800cb34:	e010      	b.n	800cb58 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cb36:	4b0b      	ldr	r3, [pc, #44]	; (800cb64 <osKernelStart+0x68>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d109      	bne.n	800cb52 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cb3e:	f7ff ffa1 	bl	800ca84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cb42:	4b08      	ldr	r3, [pc, #32]	; (800cb64 <osKernelStart+0x68>)
 800cb44:	2202      	movs	r2, #2
 800cb46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cb48:	f001 fb6c 	bl	800e224 <vTaskStartScheduler>
      stat = osOK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	60fb      	str	r3, [r7, #12]
 800cb50:	e002      	b.n	800cb58 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cb52:	f04f 33ff 	mov.w	r3, #4294967295
 800cb56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cb58:	68fb      	ldr	r3, [r7, #12]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	200005dc 	.word	0x200005dc

0800cb68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b090      	sub	sp, #64	; 0x40
 800cb6c:	af04      	add	r7, sp, #16
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cb74:	2300      	movs	r3, #0
 800cb76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb78:	f3ef 8305 	mrs	r3, IPSR
 800cb7c:	61fb      	str	r3, [r7, #28]
  return(result);
 800cb7e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f040 808f 	bne.w	800cca4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb86:	f3ef 8310 	mrs	r3, PRIMASK
 800cb8a:	61bb      	str	r3, [r7, #24]
  return(result);
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d105      	bne.n	800cb9e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb92:	f3ef 8311 	mrs	r3, BASEPRI
 800cb96:	617b      	str	r3, [r7, #20]
  return(result);
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d003      	beq.n	800cba6 <osThreadNew+0x3e>
 800cb9e:	4b44      	ldr	r3, [pc, #272]	; (800ccb0 <osThreadNew+0x148>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2b02      	cmp	r3, #2
 800cba4:	d07e      	beq.n	800cca4 <osThreadNew+0x13c>
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d07b      	beq.n	800cca4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800cbac:	2380      	movs	r3, #128	; 0x80
 800cbae:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cbb0:	2318      	movs	r3, #24
 800cbb2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800cbb8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbbc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d045      	beq.n	800cc50 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <osThreadNew+0x6a>
        name = attr->name;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d002      	beq.n	800cbe0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	699b      	ldr	r3, [r3, #24]
 800cbde:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d008      	beq.n	800cbf8 <osThreadNew+0x90>
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe8:	2b38      	cmp	r3, #56	; 0x38
 800cbea:	d805      	bhi.n	800cbf8 <osThreadNew+0x90>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	f003 0301 	and.w	r3, r3, #1
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d001      	beq.n	800cbfc <osThreadNew+0x94>
        return (NULL);
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	e054      	b.n	800cca6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	695b      	ldr	r3, [r3, #20]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d003      	beq.n	800cc0c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	695b      	ldr	r3, [r3, #20]
 800cc08:	089b      	lsrs	r3, r3, #2
 800cc0a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00e      	beq.n	800cc32 <osThreadNew+0xca>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	2bbb      	cmp	r3, #187	; 0xbb
 800cc1a:	d90a      	bls.n	800cc32 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d006      	beq.n	800cc32 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	695b      	ldr	r3, [r3, #20]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d002      	beq.n	800cc32 <osThreadNew+0xca>
        mem = 1;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	623b      	str	r3, [r7, #32]
 800cc30:	e010      	b.n	800cc54 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	689b      	ldr	r3, [r3, #8]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d10c      	bne.n	800cc54 <osThreadNew+0xec>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	68db      	ldr	r3, [r3, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d108      	bne.n	800cc54 <osThreadNew+0xec>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	691b      	ldr	r3, [r3, #16]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d104      	bne.n	800cc54 <osThreadNew+0xec>
          mem = 0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	623b      	str	r3, [r7, #32]
 800cc4e:	e001      	b.n	800cc54 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cc54:	6a3b      	ldr	r3, [r7, #32]
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d110      	bne.n	800cc7c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc62:	9202      	str	r2, [sp, #8]
 800cc64:	9301      	str	r3, [sp, #4]
 800cc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc70:	68f8      	ldr	r0, [r7, #12]
 800cc72:	f001 f879 	bl	800dd68 <xTaskCreateStatic>
 800cc76:	4603      	mov	r3, r0
 800cc78:	613b      	str	r3, [r7, #16]
 800cc7a:	e013      	b.n	800cca4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800cc7c:	6a3b      	ldr	r3, [r7, #32]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d110      	bne.n	800cca4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc84:	b29a      	uxth	r2, r3
 800cc86:	f107 0310 	add.w	r3, r7, #16
 800cc8a:	9301      	str	r3, [sp, #4]
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f001 f8c4 	bl	800de22 <xTaskCreate>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d001      	beq.n	800cca4 <osThreadNew+0x13c>
          hTask = NULL;
 800cca0:	2300      	movs	r3, #0
 800cca2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cca4:	693b      	ldr	r3, [r7, #16]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3730      	adds	r7, #48	; 0x30
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	200005dc 	.word	0x200005dc

0800ccb4 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800ccba:	f001 ff0f 	bl	800eadc <xTaskGetCurrentTaskHandle>
 800ccbe:	6078      	str	r0, [r7, #4]

  return (id);
 800ccc0:	687b      	ldr	r3, [r7, #4]
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3708      	adds	r7, #8
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800ccca:	b580      	push	{r7, lr}
 800cccc:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800ccce:	2000      	movs	r0, #0
 800ccd0:	f001 fa02 	bl	800e0d8 <vTaskDelete>
#endif
  for (;;);
 800ccd4:	e7fe      	b.n	800ccd4 <osThreadExit+0xa>
	...

0800ccd8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cce0:	f3ef 8305 	mrs	r3, IPSR
 800cce4:	613b      	str	r3, [r7, #16]
  return(result);
 800cce6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d10f      	bne.n	800cd0c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccec:	f3ef 8310 	mrs	r3, PRIMASK
 800ccf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d105      	bne.n	800cd04 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ccf8:	f3ef 8311 	mrs	r3, BASEPRI
 800ccfc:	60bb      	str	r3, [r7, #8]
  return(result);
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d007      	beq.n	800cd14 <osDelay+0x3c>
 800cd04:	4b0a      	ldr	r3, [pc, #40]	; (800cd30 <osDelay+0x58>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	d103      	bne.n	800cd14 <osDelay+0x3c>
    stat = osErrorISR;
 800cd0c:	f06f 0305 	mvn.w	r3, #5
 800cd10:	617b      	str	r3, [r7, #20]
 800cd12:	e007      	b.n	800cd24 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <osDelay+0x4c>
      vTaskDelay(ticks);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f001 fa4c 	bl	800e1bc <vTaskDelay>
    }
  }

  return (stat);
 800cd24:	697b      	ldr	r3, [r7, #20]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3718      	adds	r7, #24
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	200005dc 	.word	0x200005dc

0800cd34 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b08a      	sub	sp, #40	; 0x28
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd40:	f3ef 8305 	mrs	r3, IPSR
 800cd44:	613b      	str	r3, [r7, #16]
  return(result);
 800cd46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f040 8085 	bne.w	800ce58 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd4e:	f3ef 8310 	mrs	r3, PRIMASK
 800cd52:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d105      	bne.n	800cd66 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd5a:	f3ef 8311 	mrs	r3, BASEPRI
 800cd5e:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d003      	beq.n	800cd6e <osMutexNew+0x3a>
 800cd66:	4b3f      	ldr	r3, [pc, #252]	; (800ce64 <osMutexNew+0x130>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2b02      	cmp	r3, #2
 800cd6c:	d074      	beq.n	800ce58 <osMutexNew+0x124>
    if (attr != NULL) {
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d003      	beq.n	800cd7c <osMutexNew+0x48>
      type = attr->attr_bits;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	623b      	str	r3, [r7, #32]
 800cd7a:	e001      	b.n	800cd80 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cd80:	6a3b      	ldr	r3, [r7, #32]
 800cd82:	f003 0301 	and.w	r3, r3, #1
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d002      	beq.n	800cd90 <osMutexNew+0x5c>
      rmtx = 1U;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	61fb      	str	r3, [r7, #28]
 800cd8e:	e001      	b.n	800cd94 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800cd90:	2300      	movs	r3, #0
 800cd92:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cd94:	6a3b      	ldr	r3, [r7, #32]
 800cd96:	f003 0308 	and.w	r3, r3, #8
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d15c      	bne.n	800ce58 <osMutexNew+0x124>
      mem = -1;
 800cd9e:	f04f 33ff 	mov.w	r3, #4294967295
 800cda2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d015      	beq.n	800cdd6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d006      	beq.n	800cdc0 <osMutexNew+0x8c>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	2b4f      	cmp	r3, #79	; 0x4f
 800cdb8:	d902      	bls.n	800cdc0 <osMutexNew+0x8c>
          mem = 1;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	61bb      	str	r3, [r7, #24]
 800cdbe:	e00c      	b.n	800cdda <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d108      	bne.n	800cdda <osMutexNew+0xa6>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d104      	bne.n	800cdda <osMutexNew+0xa6>
            mem = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	61bb      	str	r3, [r7, #24]
 800cdd4:	e001      	b.n	800cdda <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d112      	bne.n	800ce06 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d007      	beq.n	800cdf6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	4619      	mov	r1, r3
 800cdec:	2004      	movs	r0, #4
 800cdee:	f000 fa98 	bl	800d322 <xQueueCreateMutexStatic>
 800cdf2:	6278      	str	r0, [r7, #36]	; 0x24
 800cdf4:	e016      	b.n	800ce24 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	2001      	movs	r0, #1
 800cdfe:	f000 fa90 	bl	800d322 <xQueueCreateMutexStatic>
 800ce02:	6278      	str	r0, [r7, #36]	; 0x24
 800ce04:	e00e      	b.n	800ce24 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d10b      	bne.n	800ce24 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d004      	beq.n	800ce1c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800ce12:	2004      	movs	r0, #4
 800ce14:	f000 fa6d 	bl	800d2f2 <xQueueCreateMutex>
 800ce18:	6278      	str	r0, [r7, #36]	; 0x24
 800ce1a:	e003      	b.n	800ce24 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800ce1c:	2001      	movs	r0, #1
 800ce1e:	f000 fa68 	bl	800d2f2 <xQueueCreateMutex>
 800ce22:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00c      	beq.n	800ce44 <osMutexNew+0x110>
        if (attr != NULL) {
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d003      	beq.n	800ce38 <osMutexNew+0x104>
          name = attr->name;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	617b      	str	r3, [r7, #20]
 800ce36:	e001      	b.n	800ce3c <osMutexNew+0x108>
        } else {
          name = NULL;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800ce3c:	6979      	ldr	r1, [r7, #20]
 800ce3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce40:	f000 ff34 	bl	800dcac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ce44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d006      	beq.n	800ce58 <osMutexNew+0x124>
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d003      	beq.n	800ce58 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ce50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce52:	f043 0301 	orr.w	r3, r3, #1
 800ce56:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ce58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3728      	adds	r7, #40	; 0x28
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	200005dc 	.word	0x200005dc

0800ce68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	4a07      	ldr	r2, [pc, #28]	; (800ce94 <vApplicationGetIdleTaskMemory+0x2c>)
 800ce78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	4a06      	ldr	r2, [pc, #24]	; (800ce98 <vApplicationGetIdleTaskMemory+0x30>)
 800ce7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2280      	movs	r2, #128	; 0x80
 800ce84:	601a      	str	r2, [r3, #0]
}
 800ce86:	bf00      	nop
 800ce88:	3714      	adds	r7, #20
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	200005e0 	.word	0x200005e0
 800ce98:	2000069c 	.word	0x2000069c

0800ce9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ce9c:	b480      	push	{r7}
 800ce9e:	b085      	sub	sp, #20
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	4a07      	ldr	r2, [pc, #28]	; (800cec8 <vApplicationGetTimerTaskMemory+0x2c>)
 800ceac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	4a06      	ldr	r2, [pc, #24]	; (800cecc <vApplicationGetTimerTaskMemory+0x30>)
 800ceb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ceba:	601a      	str	r2, [r3, #0]
}
 800cebc:	bf00      	nop
 800cebe:	3714      	adds	r7, #20
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr
 800cec8:	2000089c 	.word	0x2000089c
 800cecc:	20000958 	.word	0x20000958

0800ced0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f103 0208 	add.w	r2, r3, #8
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f04f 32ff 	mov.w	r2, #4294967295
 800cee8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f103 0208 	add.w	r2, r3, #8
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f103 0208 	add.w	r2, r3, #8
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cf04:	bf00      	nop
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cf1e:	bf00      	nop
 800cf20:	370c      	adds	r7, #12
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr

0800cf2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf2a:	b480      	push	{r7}
 800cf2c:	b085      	sub	sp, #20
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
 800cf32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	68fa      	ldr	r2, [r7, #12]
 800cf3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	689a      	ldr	r2, [r3, #8]
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	683a      	ldr	r2, [r7, #0]
 800cf4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	1c5a      	adds	r2, r3, #1
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	601a      	str	r2, [r3, #0]
}
 800cf66:	bf00      	nop
 800cf68:	3714      	adds	r7, #20
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf72:	b480      	push	{r7}
 800cf74:	b085      	sub	sp, #20
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf88:	d103      	bne.n	800cf92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	691b      	ldr	r3, [r3, #16]
 800cf8e:	60fb      	str	r3, [r7, #12]
 800cf90:	e00c      	b.n	800cfac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	3308      	adds	r3, #8
 800cf96:	60fb      	str	r3, [r7, #12]
 800cf98:	e002      	b.n	800cfa0 <vListInsert+0x2e>
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	60fb      	str	r3, [r7, #12]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	68ba      	ldr	r2, [r7, #8]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d2f6      	bcs.n	800cf9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	685a      	ldr	r2, [r3, #4]
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	683a      	ldr	r2, [r7, #0]
 800cfba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	68fa      	ldr	r2, [r7, #12]
 800cfc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	683a      	ldr	r2, [r7, #0]
 800cfc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	1c5a      	adds	r2, r3, #1
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	601a      	str	r2, [r3, #0]
}
 800cfd8:	bf00      	nop
 800cfda:	3714      	adds	r7, #20
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	691b      	ldr	r3, [r3, #16]
 800cff0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	6892      	ldr	r2, [r2, #8]
 800cffa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	6852      	ldr	r2, [r2, #4]
 800d004:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d103      	bne.n	800d018 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	689a      	ldr	r2, [r3, #8]
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	1e5a      	subs	r2, r3, #1
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3714      	adds	r7, #20
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d10a      	bne.n	800d062 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d050:	f383 8811 	msr	BASEPRI, r3
 800d054:	f3bf 8f6f 	isb	sy
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d05e:	bf00      	nop
 800d060:	e7fe      	b.n	800d060 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d062:	f002 fba7 	bl	800f7b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d06e:	68f9      	ldr	r1, [r7, #12]
 800d070:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d072:	fb01 f303 	mul.w	r3, r1, r3
 800d076:	441a      	add	r2, r3
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2200      	movs	r2, #0
 800d080:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d092:	3b01      	subs	r3, #1
 800d094:	68f9      	ldr	r1, [r7, #12]
 800d096:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d098:	fb01 f303 	mul.w	r3, r1, r3
 800d09c:	441a      	add	r2, r3
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	22ff      	movs	r2, #255	; 0xff
 800d0a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	22ff      	movs	r2, #255	; 0xff
 800d0ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d114      	bne.n	800d0e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	691b      	ldr	r3, [r3, #16]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d01a      	beq.n	800d0f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	3310      	adds	r3, #16
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f001 fb47 	bl	800e758 <xTaskRemoveFromEventList>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d012      	beq.n	800d0f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d0d0:	4b0c      	ldr	r3, [pc, #48]	; (800d104 <xQueueGenericReset+0xcc>)
 800d0d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0d6:	601a      	str	r2, [r3, #0]
 800d0d8:	f3bf 8f4f 	dsb	sy
 800d0dc:	f3bf 8f6f 	isb	sy
 800d0e0:	e009      	b.n	800d0f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	3310      	adds	r3, #16
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7ff fef2 	bl	800ced0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	3324      	adds	r3, #36	; 0x24
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7ff feed 	bl	800ced0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d0f6:	f002 fb8d 	bl	800f814 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d0fa:	2301      	movs	r3, #1
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3710      	adds	r7, #16
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	e000ed04 	.word	0xe000ed04

0800d108 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b08e      	sub	sp, #56	; 0x38
 800d10c:	af02      	add	r7, sp, #8
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	607a      	str	r2, [r7, #4]
 800d114:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d10a      	bne.n	800d132 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d120:	f383 8811 	msr	BASEPRI, r3
 800d124:	f3bf 8f6f 	isb	sy
 800d128:	f3bf 8f4f 	dsb	sy
 800d12c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d12e:	bf00      	nop
 800d130:	e7fe      	b.n	800d130 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d10a      	bne.n	800d14e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13c:	f383 8811 	msr	BASEPRI, r3
 800d140:	f3bf 8f6f 	isb	sy
 800d144:	f3bf 8f4f 	dsb	sy
 800d148:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d14a:	bf00      	nop
 800d14c:	e7fe      	b.n	800d14c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d002      	beq.n	800d15a <xQueueGenericCreateStatic+0x52>
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d001      	beq.n	800d15e <xQueueGenericCreateStatic+0x56>
 800d15a:	2301      	movs	r3, #1
 800d15c:	e000      	b.n	800d160 <xQueueGenericCreateStatic+0x58>
 800d15e:	2300      	movs	r3, #0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10a      	bne.n	800d17a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d168:	f383 8811 	msr	BASEPRI, r3
 800d16c:	f3bf 8f6f 	isb	sy
 800d170:	f3bf 8f4f 	dsb	sy
 800d174:	623b      	str	r3, [r7, #32]
}
 800d176:	bf00      	nop
 800d178:	e7fe      	b.n	800d178 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d102      	bne.n	800d186 <xQueueGenericCreateStatic+0x7e>
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <xQueueGenericCreateStatic+0x82>
 800d186:	2301      	movs	r3, #1
 800d188:	e000      	b.n	800d18c <xQueueGenericCreateStatic+0x84>
 800d18a:	2300      	movs	r3, #0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d10a      	bne.n	800d1a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	61fb      	str	r3, [r7, #28]
}
 800d1a2:	bf00      	nop
 800d1a4:	e7fe      	b.n	800d1a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d1a6:	2350      	movs	r3, #80	; 0x50
 800d1a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2b50      	cmp	r3, #80	; 0x50
 800d1ae:	d00a      	beq.n	800d1c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b4:	f383 8811 	msr	BASEPRI, r3
 800d1b8:	f3bf 8f6f 	isb	sy
 800d1bc:	f3bf 8f4f 	dsb	sy
 800d1c0:	61bb      	str	r3, [r7, #24]
}
 800d1c2:	bf00      	nop
 800d1c4:	e7fe      	b.n	800d1c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d1c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00d      	beq.n	800d1ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d1da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	68b9      	ldr	r1, [r7, #8]
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f000 f845 	bl	800d278 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3730      	adds	r7, #48	; 0x30
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b08a      	sub	sp, #40	; 0x28
 800d1fc:	af02      	add	r7, sp, #8
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	4613      	mov	r3, r2
 800d204:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d10a      	bne.n	800d222 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d210:	f383 8811 	msr	BASEPRI, r3
 800d214:	f3bf 8f6f 	isb	sy
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	613b      	str	r3, [r7, #16]
}
 800d21e:	bf00      	nop
 800d220:	e7fe      	b.n	800d220 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d102      	bne.n	800d22e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d228:	2300      	movs	r3, #0
 800d22a:	61fb      	str	r3, [r7, #28]
 800d22c:	e004      	b.n	800d238 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	68ba      	ldr	r2, [r7, #8]
 800d232:	fb02 f303 	mul.w	r3, r2, r3
 800d236:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	3350      	adds	r3, #80	; 0x50
 800d23c:	4618      	mov	r0, r3
 800d23e:	f002 fbdb 	bl	800f9f8 <pvPortMalloc>
 800d242:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d011      	beq.n	800d26e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	3350      	adds	r3, #80	; 0x50
 800d252:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d254:	69bb      	ldr	r3, [r7, #24]
 800d256:	2200      	movs	r2, #0
 800d258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d25c:	79fa      	ldrb	r2, [r7, #7]
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	9300      	str	r3, [sp, #0]
 800d262:	4613      	mov	r3, r2
 800d264:	697a      	ldr	r2, [r7, #20]
 800d266:	68b9      	ldr	r1, [r7, #8]
 800d268:	68f8      	ldr	r0, [r7, #12]
 800d26a:	f000 f805 	bl	800d278 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d26e:	69bb      	ldr	r3, [r7, #24]
	}
 800d270:	4618      	mov	r0, r3
 800d272:	3720      	adds	r7, #32
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
 800d284:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d103      	bne.n	800d294 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	69ba      	ldr	r2, [r7, #24]
 800d290:	601a      	str	r2, [r3, #0]
 800d292:	e002      	b.n	800d29a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d294:	69bb      	ldr	r3, [r7, #24]
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d2a6:	2101      	movs	r1, #1
 800d2a8:	69b8      	ldr	r0, [r7, #24]
 800d2aa:	f7ff fec5 	bl	800d038 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	78fa      	ldrb	r2, [r7, #3]
 800d2b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d2b6:	bf00      	nop
 800d2b8:	3710      	adds	r7, #16
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b082      	sub	sp, #8
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d00e      	beq.n	800d2ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d2de:	2300      	movs	r3, #0
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 f837 	bl	800d358 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d2ea:	bf00      	nop
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b086      	sub	sp, #24
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	617b      	str	r3, [r7, #20]
 800d300:	2300      	movs	r3, #0
 800d302:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d304:	79fb      	ldrb	r3, [r7, #7]
 800d306:	461a      	mov	r2, r3
 800d308:	6939      	ldr	r1, [r7, #16]
 800d30a:	6978      	ldr	r0, [r7, #20]
 800d30c:	f7ff ff74 	bl	800d1f8 <xQueueGenericCreate>
 800d310:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	f7ff ffd3 	bl	800d2be <prvInitialiseMutex>

		return xNewQueue;
 800d318:	68fb      	ldr	r3, [r7, #12]
	}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3718      	adds	r7, #24
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}

0800d322 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d322:	b580      	push	{r7, lr}
 800d324:	b088      	sub	sp, #32
 800d326:	af02      	add	r7, sp, #8
 800d328:	4603      	mov	r3, r0
 800d32a:	6039      	str	r1, [r7, #0]
 800d32c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d32e:	2301      	movs	r3, #1
 800d330:	617b      	str	r3, [r7, #20]
 800d332:	2300      	movs	r3, #0
 800d334:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d336:	79fb      	ldrb	r3, [r7, #7]
 800d338:	9300      	str	r3, [sp, #0]
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	2200      	movs	r2, #0
 800d33e:	6939      	ldr	r1, [r7, #16]
 800d340:	6978      	ldr	r0, [r7, #20]
 800d342:	f7ff fee1 	bl	800d108 <xQueueGenericCreateStatic>
 800d346:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f7ff ffb8 	bl	800d2be <prvInitialiseMutex>

		return xNewQueue;
 800d34e:	68fb      	ldr	r3, [r7, #12]
	}
 800d350:	4618      	mov	r0, r3
 800d352:	3718      	adds	r7, #24
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b08e      	sub	sp, #56	; 0x38
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
 800d364:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d366:	2300      	movs	r3, #0
 800d368:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d370:	2b00      	cmp	r3, #0
 800d372:	d10a      	bne.n	800d38a <xQueueGenericSend+0x32>
	__asm volatile
 800d374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d378:	f383 8811 	msr	BASEPRI, r3
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	f3bf 8f4f 	dsb	sy
 800d384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d386:	bf00      	nop
 800d388:	e7fe      	b.n	800d388 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d103      	bne.n	800d398 <xQueueGenericSend+0x40>
 800d390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d394:	2b00      	cmp	r3, #0
 800d396:	d101      	bne.n	800d39c <xQueueGenericSend+0x44>
 800d398:	2301      	movs	r3, #1
 800d39a:	e000      	b.n	800d39e <xQueueGenericSend+0x46>
 800d39c:	2300      	movs	r3, #0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d10a      	bne.n	800d3b8 <xQueueGenericSend+0x60>
	__asm volatile
 800d3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a6:	f383 8811 	msr	BASEPRI, r3
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d3b4:	bf00      	nop
 800d3b6:	e7fe      	b.n	800d3b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	2b02      	cmp	r3, #2
 800d3bc:	d103      	bne.n	800d3c6 <xQueueGenericSend+0x6e>
 800d3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d101      	bne.n	800d3ca <xQueueGenericSend+0x72>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e000      	b.n	800d3cc <xQueueGenericSend+0x74>
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d10a      	bne.n	800d3e6 <xQueueGenericSend+0x8e>
	__asm volatile
 800d3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d4:	f383 8811 	msr	BASEPRI, r3
 800d3d8:	f3bf 8f6f 	isb	sy
 800d3dc:	f3bf 8f4f 	dsb	sy
 800d3e0:	623b      	str	r3, [r7, #32]
}
 800d3e2:	bf00      	nop
 800d3e4:	e7fe      	b.n	800d3e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3e6:	f001 fb89 	bl	800eafc <xTaskGetSchedulerState>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d102      	bne.n	800d3f6 <xQueueGenericSend+0x9e>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d101      	bne.n	800d3fa <xQueueGenericSend+0xa2>
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	e000      	b.n	800d3fc <xQueueGenericSend+0xa4>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10a      	bne.n	800d416 <xQueueGenericSend+0xbe>
	__asm volatile
 800d400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d404:	f383 8811 	msr	BASEPRI, r3
 800d408:	f3bf 8f6f 	isb	sy
 800d40c:	f3bf 8f4f 	dsb	sy
 800d410:	61fb      	str	r3, [r7, #28]
}
 800d412:	bf00      	nop
 800d414:	e7fe      	b.n	800d414 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d416:	f002 f9cd 	bl	800f7b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d422:	429a      	cmp	r2, r3
 800d424:	d302      	bcc.n	800d42c <xQueueGenericSend+0xd4>
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	2b02      	cmp	r3, #2
 800d42a:	d129      	bne.n	800d480 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d42c:	683a      	ldr	r2, [r7, #0]
 800d42e:	68b9      	ldr	r1, [r7, #8]
 800d430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d432:	f000 fb2b 	bl	800da8c <prvCopyDataToQueue>
 800d436:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d010      	beq.n	800d462 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d442:	3324      	adds	r3, #36	; 0x24
 800d444:	4618      	mov	r0, r3
 800d446:	f001 f987 	bl	800e758 <xTaskRemoveFromEventList>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d013      	beq.n	800d478 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d450:	4b3f      	ldr	r3, [pc, #252]	; (800d550 <xQueueGenericSend+0x1f8>)
 800d452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d456:	601a      	str	r2, [r3, #0]
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	f3bf 8f6f 	isb	sy
 800d460:	e00a      	b.n	800d478 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d464:	2b00      	cmp	r3, #0
 800d466:	d007      	beq.n	800d478 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d468:	4b39      	ldr	r3, [pc, #228]	; (800d550 <xQueueGenericSend+0x1f8>)
 800d46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d46e:	601a      	str	r2, [r3, #0]
 800d470:	f3bf 8f4f 	dsb	sy
 800d474:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d478:	f002 f9cc 	bl	800f814 <vPortExitCritical>
				return pdPASS;
 800d47c:	2301      	movs	r3, #1
 800d47e:	e063      	b.n	800d548 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d103      	bne.n	800d48e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d486:	f002 f9c5 	bl	800f814 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d48a:	2300      	movs	r3, #0
 800d48c:	e05c      	b.n	800d548 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d490:	2b00      	cmp	r3, #0
 800d492:	d106      	bne.n	800d4a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d494:	f107 0314 	add.w	r3, r7, #20
 800d498:	4618      	mov	r0, r3
 800d49a:	f001 f9c1 	bl	800e820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d4a2:	f002 f9b7 	bl	800f814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4a6:	f000 ff2d 	bl	800e304 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4aa:	f002 f983 	bl	800f7b4 <vPortEnterCritical>
 800d4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4b4:	b25b      	sxtb	r3, r3
 800d4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ba:	d103      	bne.n	800d4c4 <xQueueGenericSend+0x16c>
 800d4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4ca:	b25b      	sxtb	r3, r3
 800d4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d0:	d103      	bne.n	800d4da <xQueueGenericSend+0x182>
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4da:	f002 f99b 	bl	800f814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4de:	1d3a      	adds	r2, r7, #4
 800d4e0:	f107 0314 	add.w	r3, r7, #20
 800d4e4:	4611      	mov	r1, r2
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f001 f9b0 	bl	800e84c <xTaskCheckForTimeOut>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d124      	bne.n	800d53c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d4f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4f4:	f000 fbc2 	bl	800dc7c <prvIsQueueFull>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d018      	beq.n	800d530 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d500:	3310      	adds	r3, #16
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	4611      	mov	r1, r2
 800d506:	4618      	mov	r0, r3
 800d508:	f001 f8d6 	bl	800e6b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d50c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d50e:	f000 fb4d 	bl	800dbac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d512:	f000 ff05 	bl	800e320 <xTaskResumeAll>
 800d516:	4603      	mov	r3, r0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f47f af7c 	bne.w	800d416 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d51e:	4b0c      	ldr	r3, [pc, #48]	; (800d550 <xQueueGenericSend+0x1f8>)
 800d520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d524:	601a      	str	r2, [r3, #0]
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	f3bf 8f6f 	isb	sy
 800d52e:	e772      	b.n	800d416 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d532:	f000 fb3b 	bl	800dbac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d536:	f000 fef3 	bl	800e320 <xTaskResumeAll>
 800d53a:	e76c      	b.n	800d416 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d53c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d53e:	f000 fb35 	bl	800dbac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d542:	f000 feed 	bl	800e320 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d546:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3738      	adds	r7, #56	; 0x38
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	e000ed04 	.word	0xe000ed04

0800d554 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b08e      	sub	sp, #56	; 0x38
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	607a      	str	r2, [r7, #4]
 800d560:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d10a      	bne.n	800d582 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d57e:	bf00      	nop
 800d580:	e7fe      	b.n	800d580 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d103      	bne.n	800d590 <xQueueGenericSendFromISR+0x3c>
 800d588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d101      	bne.n	800d594 <xQueueGenericSendFromISR+0x40>
 800d590:	2301      	movs	r3, #1
 800d592:	e000      	b.n	800d596 <xQueueGenericSendFromISR+0x42>
 800d594:	2300      	movs	r3, #0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d10a      	bne.n	800d5b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59e:	f383 8811 	msr	BASEPRI, r3
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	f3bf 8f4f 	dsb	sy
 800d5aa:	623b      	str	r3, [r7, #32]
}
 800d5ac:	bf00      	nop
 800d5ae:	e7fe      	b.n	800d5ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	2b02      	cmp	r3, #2
 800d5b4:	d103      	bne.n	800d5be <xQueueGenericSendFromISR+0x6a>
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d101      	bne.n	800d5c2 <xQueueGenericSendFromISR+0x6e>
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e000      	b.n	800d5c4 <xQueueGenericSendFromISR+0x70>
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d10a      	bne.n	800d5de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5cc:	f383 8811 	msr	BASEPRI, r3
 800d5d0:	f3bf 8f6f 	isb	sy
 800d5d4:	f3bf 8f4f 	dsb	sy
 800d5d8:	61fb      	str	r3, [r7, #28]
}
 800d5da:	bf00      	nop
 800d5dc:	e7fe      	b.n	800d5dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d5de:	f002 f9cb 	bl	800f978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d5e2:	f3ef 8211 	mrs	r2, BASEPRI
 800d5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ea:	f383 8811 	msr	BASEPRI, r3
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	f3bf 8f4f 	dsb	sy
 800d5f6:	61ba      	str	r2, [r7, #24]
 800d5f8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d5fa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d606:	429a      	cmp	r2, r3
 800d608:	d302      	bcc.n	800d610 <xQueueGenericSendFromISR+0xbc>
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	2b02      	cmp	r3, #2
 800d60e:	d12c      	bne.n	800d66a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d61a:	683a      	ldr	r2, [r7, #0]
 800d61c:	68b9      	ldr	r1, [r7, #8]
 800d61e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d620:	f000 fa34 	bl	800da8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d624:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d62c:	d112      	bne.n	800d654 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d632:	2b00      	cmp	r3, #0
 800d634:	d016      	beq.n	800d664 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d638:	3324      	adds	r3, #36	; 0x24
 800d63a:	4618      	mov	r0, r3
 800d63c:	f001 f88c 	bl	800e758 <xTaskRemoveFromEventList>
 800d640:	4603      	mov	r3, r0
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00e      	beq.n	800d664 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00b      	beq.n	800d664 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2201      	movs	r2, #1
 800d650:	601a      	str	r2, [r3, #0]
 800d652:	e007      	b.n	800d664 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d654:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d658:	3301      	adds	r3, #1
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	b25a      	sxtb	r2, r3
 800d65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d664:	2301      	movs	r3, #1
 800d666:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d668:	e001      	b.n	800d66e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d66a:	2300      	movs	r3, #0
 800d66c:	637b      	str	r3, [r7, #52]	; 0x34
 800d66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d670:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d678:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3738      	adds	r7, #56	; 0x38
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b08c      	sub	sp, #48	; 0x30
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d690:	2300      	movs	r3, #0
 800d692:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d10a      	bne.n	800d6b4 <xQueueReceive+0x30>
	__asm volatile
 800d69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a2:	f383 8811 	msr	BASEPRI, r3
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	623b      	str	r3, [r7, #32]
}
 800d6b0:	bf00      	nop
 800d6b2:	e7fe      	b.n	800d6b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d103      	bne.n	800d6c2 <xQueueReceive+0x3e>
 800d6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d101      	bne.n	800d6c6 <xQueueReceive+0x42>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e000      	b.n	800d6c8 <xQueueReceive+0x44>
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10a      	bne.n	800d6e2 <xQueueReceive+0x5e>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	61fb      	str	r3, [r7, #28]
}
 800d6de:	bf00      	nop
 800d6e0:	e7fe      	b.n	800d6e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d6e2:	f001 fa0b 	bl	800eafc <xTaskGetSchedulerState>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d102      	bne.n	800d6f2 <xQueueReceive+0x6e>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d101      	bne.n	800d6f6 <xQueueReceive+0x72>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e000      	b.n	800d6f8 <xQueueReceive+0x74>
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10a      	bne.n	800d712 <xQueueReceive+0x8e>
	__asm volatile
 800d6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d700:	f383 8811 	msr	BASEPRI, r3
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	f3bf 8f4f 	dsb	sy
 800d70c:	61bb      	str	r3, [r7, #24]
}
 800d70e:	bf00      	nop
 800d710:	e7fe      	b.n	800d710 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d712:	f002 f84f 	bl	800f7b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d71a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d01f      	beq.n	800d762 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d722:	68b9      	ldr	r1, [r7, #8]
 800d724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d726:	f000 fa1b 	bl	800db60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72c:	1e5a      	subs	r2, r3, #1
 800d72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d730:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d734:	691b      	ldr	r3, [r3, #16]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00f      	beq.n	800d75a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73c:	3310      	adds	r3, #16
 800d73e:	4618      	mov	r0, r3
 800d740:	f001 f80a 	bl	800e758 <xTaskRemoveFromEventList>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	d007      	beq.n	800d75a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d74a:	4b3d      	ldr	r3, [pc, #244]	; (800d840 <xQueueReceive+0x1bc>)
 800d74c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d750:	601a      	str	r2, [r3, #0]
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d75a:	f002 f85b 	bl	800f814 <vPortExitCritical>
				return pdPASS;
 800d75e:	2301      	movs	r3, #1
 800d760:	e069      	b.n	800d836 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d103      	bne.n	800d770 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d768:	f002 f854 	bl	800f814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d76c:	2300      	movs	r3, #0
 800d76e:	e062      	b.n	800d836 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d772:	2b00      	cmp	r3, #0
 800d774:	d106      	bne.n	800d784 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d776:	f107 0310 	add.w	r3, r7, #16
 800d77a:	4618      	mov	r0, r3
 800d77c:	f001 f850 	bl	800e820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d780:	2301      	movs	r3, #1
 800d782:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d784:	f002 f846 	bl	800f814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d788:	f000 fdbc 	bl	800e304 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d78c:	f002 f812 	bl	800f7b4 <vPortEnterCritical>
 800d790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d792:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d796:	b25b      	sxtb	r3, r3
 800d798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d79c:	d103      	bne.n	800d7a6 <xQueueReceive+0x122>
 800d79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7ac:	b25b      	sxtb	r3, r3
 800d7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b2:	d103      	bne.n	800d7bc <xQueueReceive+0x138>
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7bc:	f002 f82a 	bl	800f814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7c0:	1d3a      	adds	r2, r7, #4
 800d7c2:	f107 0310 	add.w	r3, r7, #16
 800d7c6:	4611      	mov	r1, r2
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f001 f83f 	bl	800e84c <xTaskCheckForTimeOut>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d123      	bne.n	800d81c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7d6:	f000 fa3b 	bl	800dc50 <prvIsQueueEmpty>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d017      	beq.n	800d810 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e2:	3324      	adds	r3, #36	; 0x24
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f000 ff65 	bl	800e6b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d7ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7f0:	f000 f9dc 	bl	800dbac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7f4:	f000 fd94 	bl	800e320 <xTaskResumeAll>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d189      	bne.n	800d712 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d7fe:	4b10      	ldr	r3, [pc, #64]	; (800d840 <xQueueReceive+0x1bc>)
 800d800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d804:	601a      	str	r2, [r3, #0]
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	f3bf 8f6f 	isb	sy
 800d80e:	e780      	b.n	800d712 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d812:	f000 f9cb 	bl	800dbac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d816:	f000 fd83 	bl	800e320 <xTaskResumeAll>
 800d81a:	e77a      	b.n	800d712 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d81c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d81e:	f000 f9c5 	bl	800dbac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d822:	f000 fd7d 	bl	800e320 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d828:	f000 fa12 	bl	800dc50 <prvIsQueueEmpty>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	f43f af6f 	beq.w	800d712 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d834:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d836:	4618      	mov	r0, r3
 800d838:	3730      	adds	r7, #48	; 0x30
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	e000ed04 	.word	0xe000ed04

0800d844 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b08e      	sub	sp, #56	; 0x38
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d84e:	2300      	movs	r3, #0
 800d850:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d856:	2300      	movs	r3, #0
 800d858:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d10a      	bne.n	800d876 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	623b      	str	r3, [r7, #32]
}
 800d872:	bf00      	nop
 800d874:	e7fe      	b.n	800d874 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d00a      	beq.n	800d894 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	61fb      	str	r3, [r7, #28]
}
 800d890:	bf00      	nop
 800d892:	e7fe      	b.n	800d892 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d894:	f001 f932 	bl	800eafc <xTaskGetSchedulerState>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d102      	bne.n	800d8a4 <xQueueSemaphoreTake+0x60>
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d101      	bne.n	800d8a8 <xQueueSemaphoreTake+0x64>
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	e000      	b.n	800d8aa <xQueueSemaphoreTake+0x66>
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d10a      	bne.n	800d8c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b2:	f383 8811 	msr	BASEPRI, r3
 800d8b6:	f3bf 8f6f 	isb	sy
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	61bb      	str	r3, [r7, #24]
}
 800d8c0:	bf00      	nop
 800d8c2:	e7fe      	b.n	800d8c2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8c4:	f001 ff76 	bl	800f7b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d024      	beq.n	800d91e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d6:	1e5a      	subs	r2, r3, #1
 800d8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d104      	bne.n	800d8ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d8e4:	f001 fa80 	bl	800ede8 <pvTaskIncrementMutexHeldCount>
 800d8e8:	4602      	mov	r2, r0
 800d8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f0:	691b      	ldr	r3, [r3, #16]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d00f      	beq.n	800d916 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f8:	3310      	adds	r3, #16
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f000 ff2c 	bl	800e758 <xTaskRemoveFromEventList>
 800d900:	4603      	mov	r3, r0
 800d902:	2b00      	cmp	r3, #0
 800d904:	d007      	beq.n	800d916 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d906:	4b54      	ldr	r3, [pc, #336]	; (800da58 <xQueueSemaphoreTake+0x214>)
 800d908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d90c:	601a      	str	r2, [r3, #0]
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d916:	f001 ff7d 	bl	800f814 <vPortExitCritical>
				return pdPASS;
 800d91a:	2301      	movs	r3, #1
 800d91c:	e097      	b.n	800da4e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d111      	bne.n	800d948 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00a      	beq.n	800d940 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	617b      	str	r3, [r7, #20]
}
 800d93c:	bf00      	nop
 800d93e:	e7fe      	b.n	800d93e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d940:	f001 ff68 	bl	800f814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d944:	2300      	movs	r3, #0
 800d946:	e082      	b.n	800da4e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d106      	bne.n	800d95c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d94e:	f107 030c 	add.w	r3, r7, #12
 800d952:	4618      	mov	r0, r3
 800d954:	f000 ff64 	bl	800e820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d958:	2301      	movs	r3, #1
 800d95a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d95c:	f001 ff5a 	bl	800f814 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d960:	f000 fcd0 	bl	800e304 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d964:	f001 ff26 	bl	800f7b4 <vPortEnterCritical>
 800d968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d96e:	b25b      	sxtb	r3, r3
 800d970:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d974:	d103      	bne.n	800d97e <xQueueSemaphoreTake+0x13a>
 800d976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d978:	2200      	movs	r2, #0
 800d97a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d984:	b25b      	sxtb	r3, r3
 800d986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d98a:	d103      	bne.n	800d994 <xQueueSemaphoreTake+0x150>
 800d98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98e:	2200      	movs	r2, #0
 800d990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d994:	f001 ff3e 	bl	800f814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d998:	463a      	mov	r2, r7
 800d99a:	f107 030c 	add.w	r3, r7, #12
 800d99e:	4611      	mov	r1, r2
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f000 ff53 	bl	800e84c <xTaskCheckForTimeOut>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d132      	bne.n	800da12 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9ae:	f000 f94f 	bl	800dc50 <prvIsQueueEmpty>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d026      	beq.n	800da06 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d109      	bne.n	800d9d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d9c0:	f001 fef8 	bl	800f7b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c6:	689b      	ldr	r3, [r3, #8]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f001 f8b5 	bl	800eb38 <xTaskPriorityInherit>
 800d9ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d9d0:	f001 ff20 	bl	800f814 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d6:	3324      	adds	r3, #36	; 0x24
 800d9d8:	683a      	ldr	r2, [r7, #0]
 800d9da:	4611      	mov	r1, r2
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f000 fe6b 	bl	800e6b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d9e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9e4:	f000 f8e2 	bl	800dbac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d9e8:	f000 fc9a 	bl	800e320 <xTaskResumeAll>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	f47f af68 	bne.w	800d8c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d9f4:	4b18      	ldr	r3, [pc, #96]	; (800da58 <xQueueSemaphoreTake+0x214>)
 800d9f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9fa:	601a      	str	r2, [r3, #0]
 800d9fc:	f3bf 8f4f 	dsb	sy
 800da00:	f3bf 8f6f 	isb	sy
 800da04:	e75e      	b.n	800d8c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800da06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da08:	f000 f8d0 	bl	800dbac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da0c:	f000 fc88 	bl	800e320 <xTaskResumeAll>
 800da10:	e758      	b.n	800d8c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800da12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da14:	f000 f8ca 	bl	800dbac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da18:	f000 fc82 	bl	800e320 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da1e:	f000 f917 	bl	800dc50 <prvIsQueueEmpty>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	f43f af4d 	beq.w	800d8c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d00d      	beq.n	800da4c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800da30:	f001 fec0 	bl	800f7b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800da34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da36:	f000 f811 	bl	800da5c <prvGetDisinheritPriorityAfterTimeout>
 800da3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800da3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da42:	4618      	mov	r0, r3
 800da44:	f001 f94e 	bl	800ece4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800da48:	f001 fee4 	bl	800f814 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3738      	adds	r7, #56	; 0x38
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	e000ed04 	.word	0xe000ed04

0800da5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800da5c:	b480      	push	{r7}
 800da5e:	b085      	sub	sp, #20
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d006      	beq.n	800da7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800da76:	60fb      	str	r3, [r7, #12]
 800da78:	e001      	b.n	800da7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800da7a:	2300      	movs	r3, #0
 800da7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800da7e:	68fb      	ldr	r3, [r7, #12]
	}
 800da80:	4618      	mov	r0, r3
 800da82:	3714      	adds	r7, #20
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b086      	sub	sp, #24
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800da98:	2300      	movs	r3, #0
 800da9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d10d      	bne.n	800dac6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d14d      	bne.n	800db4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f001 f8a6 	bl	800ec08 <xTaskPriorityDisinherit>
 800dabc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2200      	movs	r2, #0
 800dac2:	609a      	str	r2, [r3, #8]
 800dac4:	e043      	b.n	800db4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d119      	bne.n	800db00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6858      	ldr	r0, [r3, #4]
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dad4:	461a      	mov	r2, r3
 800dad6:	68b9      	ldr	r1, [r7, #8]
 800dad8:	f002 ffa2 	bl	8010a20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	685a      	ldr	r2, [r3, #4]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae4:	441a      	add	r2, r3
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	685a      	ldr	r2, [r3, #4]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	689b      	ldr	r3, [r3, #8]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d32b      	bcc.n	800db4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	605a      	str	r2, [r3, #4]
 800dafe:	e026      	b.n	800db4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	68d8      	ldr	r0, [r3, #12]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db08:	461a      	mov	r2, r3
 800db0a:	68b9      	ldr	r1, [r7, #8]
 800db0c:	f002 ff88 	bl	8010a20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	68da      	ldr	r2, [r3, #12]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db18:	425b      	negs	r3, r3
 800db1a:	441a      	add	r2, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	68da      	ldr	r2, [r3, #12]
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d207      	bcs.n	800db3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	689a      	ldr	r2, [r3, #8]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db34:	425b      	negs	r3, r3
 800db36:	441a      	add	r2, r3
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d105      	bne.n	800db4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d002      	beq.n	800db4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	3b01      	subs	r3, #1
 800db4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	1c5a      	adds	r2, r3, #1
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800db56:	697b      	ldr	r3, [r7, #20]
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3718      	adds	r7, #24
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d018      	beq.n	800dba4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	68da      	ldr	r2, [r3, #12]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db7a:	441a      	add	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	68da      	ldr	r2, [r3, #12]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d303      	bcc.n	800db94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	68d9      	ldr	r1, [r3, #12]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db9c:	461a      	mov	r2, r3
 800db9e:	6838      	ldr	r0, [r7, #0]
 800dba0:	f002 ff3e 	bl	8010a20 <memcpy>
	}
}
 800dba4:	bf00      	nop
 800dba6:	3708      	adds	r7, #8
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dbb4:	f001 fdfe 	bl	800f7b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dbc0:	e011      	b.n	800dbe6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d012      	beq.n	800dbf0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	3324      	adds	r3, #36	; 0x24
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f000 fdc2 	bl	800e758 <xTaskRemoveFromEventList>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d001      	beq.n	800dbde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dbda:	f000 fe99 	bl	800e910 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dbde:	7bfb      	ldrb	r3, [r7, #15]
 800dbe0:	3b01      	subs	r3, #1
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dbe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	dce9      	bgt.n	800dbc2 <prvUnlockQueue+0x16>
 800dbee:	e000      	b.n	800dbf2 <prvUnlockQueue+0x46>
					break;
 800dbf0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	22ff      	movs	r2, #255	; 0xff
 800dbf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dbfa:	f001 fe0b 	bl	800f814 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dbfe:	f001 fdd9 	bl	800f7b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc0a:	e011      	b.n	800dc30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	691b      	ldr	r3, [r3, #16]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d012      	beq.n	800dc3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	3310      	adds	r3, #16
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f000 fd9d 	bl	800e758 <xTaskRemoveFromEventList>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d001      	beq.n	800dc28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc24:	f000 fe74 	bl	800e910 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc28:	7bbb      	ldrb	r3, [r7, #14]
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	dce9      	bgt.n	800dc0c <prvUnlockQueue+0x60>
 800dc38:	e000      	b.n	800dc3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	22ff      	movs	r2, #255	; 0xff
 800dc40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dc44:	f001 fde6 	bl	800f814 <vPortExitCritical>
}
 800dc48:	bf00      	nop
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc58:	f001 fdac 	bl	800f7b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d102      	bne.n	800dc6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dc64:	2301      	movs	r3, #1
 800dc66:	60fb      	str	r3, [r7, #12]
 800dc68:	e001      	b.n	800dc6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc6e:	f001 fdd1 	bl	800f814 <vPortExitCritical>

	return xReturn;
 800dc72:	68fb      	ldr	r3, [r7, #12]
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3710      	adds	r7, #16
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc84:	f001 fd96 	bl	800f7b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d102      	bne.n	800dc9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dc94:	2301      	movs	r3, #1
 800dc96:	60fb      	str	r3, [r7, #12]
 800dc98:	e001      	b.n	800dc9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc9e:	f001 fdb9 	bl	800f814 <vPortExitCritical>

	return xReturn;
 800dca2:	68fb      	ldr	r3, [r7, #12]
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3710      	adds	r7, #16
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dcac:	b480      	push	{r7}
 800dcae:	b085      	sub	sp, #20
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	60fb      	str	r3, [r7, #12]
 800dcba:	e014      	b.n	800dce6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dcbc:	4a0f      	ldr	r2, [pc, #60]	; (800dcfc <vQueueAddToRegistry+0x50>)
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d10b      	bne.n	800dce0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dcc8:	490c      	ldr	r1, [pc, #48]	; (800dcfc <vQueueAddToRegistry+0x50>)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	683a      	ldr	r2, [r7, #0]
 800dcce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dcd2:	4a0a      	ldr	r2, [pc, #40]	; (800dcfc <vQueueAddToRegistry+0x50>)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	00db      	lsls	r3, r3, #3
 800dcd8:	4413      	add	r3, r2
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dcde:	e006      	b.n	800dcee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	3301      	adds	r3, #1
 800dce4:	60fb      	str	r3, [r7, #12]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2b07      	cmp	r3, #7
 800dcea:	d9e7      	bls.n	800dcbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dcec:	bf00      	nop
 800dcee:	bf00      	nop
 800dcf0:	3714      	adds	r7, #20
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	20005514 	.word	0x20005514

0800dd00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b086      	sub	sp, #24
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd10:	f001 fd50 	bl	800f7b4 <vPortEnterCritical>
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd1a:	b25b      	sxtb	r3, r3
 800dd1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd20:	d103      	bne.n	800dd2a <vQueueWaitForMessageRestricted+0x2a>
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	2200      	movs	r2, #0
 800dd26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd30:	b25b      	sxtb	r3, r3
 800dd32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd36:	d103      	bne.n	800dd40 <vQueueWaitForMessageRestricted+0x40>
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd40:	f001 fd68 	bl	800f814 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d106      	bne.n	800dd5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	3324      	adds	r3, #36	; 0x24
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	68b9      	ldr	r1, [r7, #8]
 800dd54:	4618      	mov	r0, r3
 800dd56:	f000 fcd3 	bl	800e700 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dd5a:	6978      	ldr	r0, [r7, #20]
 800dd5c:	f7ff ff26 	bl	800dbac <prvUnlockQueue>
	}
 800dd60:	bf00      	nop
 800dd62:	3718      	adds	r7, #24
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b08e      	sub	sp, #56	; 0x38
 800dd6c:	af04      	add	r7, sp, #16
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	607a      	str	r2, [r7, #4]
 800dd74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dd76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10a      	bne.n	800dd92 <xTaskCreateStatic+0x2a>
	__asm volatile
 800dd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd80:	f383 8811 	msr	BASEPRI, r3
 800dd84:	f3bf 8f6f 	isb	sy
 800dd88:	f3bf 8f4f 	dsb	sy
 800dd8c:	623b      	str	r3, [r7, #32]
}
 800dd8e:	bf00      	nop
 800dd90:	e7fe      	b.n	800dd90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d10a      	bne.n	800ddae <xTaskCreateStatic+0x46>
	__asm volatile
 800dd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd9c:	f383 8811 	msr	BASEPRI, r3
 800dda0:	f3bf 8f6f 	isb	sy
 800dda4:	f3bf 8f4f 	dsb	sy
 800dda8:	61fb      	str	r3, [r7, #28]
}
 800ddaa:	bf00      	nop
 800ddac:	e7fe      	b.n	800ddac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ddae:	23bc      	movs	r3, #188	; 0xbc
 800ddb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	2bbc      	cmp	r3, #188	; 0xbc
 800ddb6:	d00a      	beq.n	800ddce <xTaskCreateStatic+0x66>
	__asm volatile
 800ddb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbc:	f383 8811 	msr	BASEPRI, r3
 800ddc0:	f3bf 8f6f 	isb	sy
 800ddc4:	f3bf 8f4f 	dsb	sy
 800ddc8:	61bb      	str	r3, [r7, #24]
}
 800ddca:	bf00      	nop
 800ddcc:	e7fe      	b.n	800ddcc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ddce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ddd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d01e      	beq.n	800de14 <xTaskCreateStatic+0xac>
 800ddd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d01b      	beq.n	800de14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dde4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde8:	2202      	movs	r2, #2
 800ddea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ddee:	2300      	movs	r3, #0
 800ddf0:	9303      	str	r3, [sp, #12]
 800ddf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf4:	9302      	str	r3, [sp, #8]
 800ddf6:	f107 0314 	add.w	r3, r7, #20
 800ddfa:	9301      	str	r3, [sp, #4]
 800ddfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfe:	9300      	str	r3, [sp, #0]
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	68b9      	ldr	r1, [r7, #8]
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f000 f850 	bl	800deac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de0e:	f000 f8f3 	bl	800dff8 <prvAddNewTaskToReadyList>
 800de12:	e001      	b.n	800de18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800de14:	2300      	movs	r3, #0
 800de16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de18:	697b      	ldr	r3, [r7, #20]
	}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3728      	adds	r7, #40	; 0x28
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}

0800de22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de22:	b580      	push	{r7, lr}
 800de24:	b08c      	sub	sp, #48	; 0x30
 800de26:	af04      	add	r7, sp, #16
 800de28:	60f8      	str	r0, [r7, #12]
 800de2a:	60b9      	str	r1, [r7, #8]
 800de2c:	603b      	str	r3, [r7, #0]
 800de2e:	4613      	mov	r3, r2
 800de30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de32:	88fb      	ldrh	r3, [r7, #6]
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	4618      	mov	r0, r3
 800de38:	f001 fdde 	bl	800f9f8 <pvPortMalloc>
 800de3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00e      	beq.n	800de62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de44:	20bc      	movs	r0, #188	; 0xbc
 800de46:	f001 fdd7 	bl	800f9f8 <pvPortMalloc>
 800de4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800de4c:	69fb      	ldr	r3, [r7, #28]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d003      	beq.n	800de5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	697a      	ldr	r2, [r7, #20]
 800de56:	631a      	str	r2, [r3, #48]	; 0x30
 800de58:	e005      	b.n	800de66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800de5a:	6978      	ldr	r0, [r7, #20]
 800de5c:	f001 fe90 	bl	800fb80 <vPortFree>
 800de60:	e001      	b.n	800de66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800de62:	2300      	movs	r3, #0
 800de64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d017      	beq.n	800de9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	2200      	movs	r2, #0
 800de70:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800de74:	88fa      	ldrh	r2, [r7, #6]
 800de76:	2300      	movs	r3, #0
 800de78:	9303      	str	r3, [sp, #12]
 800de7a:	69fb      	ldr	r3, [r7, #28]
 800de7c:	9302      	str	r3, [sp, #8]
 800de7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de80:	9301      	str	r3, [sp, #4]
 800de82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de84:	9300      	str	r3, [sp, #0]
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	68b9      	ldr	r1, [r7, #8]
 800de8a:	68f8      	ldr	r0, [r7, #12]
 800de8c:	f000 f80e 	bl	800deac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de90:	69f8      	ldr	r0, [r7, #28]
 800de92:	f000 f8b1 	bl	800dff8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800de96:	2301      	movs	r3, #1
 800de98:	61bb      	str	r3, [r7, #24]
 800de9a:	e002      	b.n	800dea2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800de9c:	f04f 33ff 	mov.w	r3, #4294967295
 800dea0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dea2:	69bb      	ldr	r3, [r7, #24]
	}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3720      	adds	r7, #32
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b088      	sub	sp, #32
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	607a      	str	r2, [r7, #4]
 800deb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800deba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800debc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	009b      	lsls	r3, r3, #2
 800dec2:	461a      	mov	r2, r3
 800dec4:	21a5      	movs	r1, #165	; 0xa5
 800dec6:	f002 fdd3 	bl	8010a70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800deca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800decc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ded4:	3b01      	subs	r3, #1
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	4413      	add	r3, r2
 800deda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	f023 0307 	bic.w	r3, r3, #7
 800dee2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	f003 0307 	and.w	r3, r3, #7
 800deea:	2b00      	cmp	r3, #0
 800deec:	d00a      	beq.n	800df04 <prvInitialiseNewTask+0x58>
	__asm volatile
 800deee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def2:	f383 8811 	msr	BASEPRI, r3
 800def6:	f3bf 8f6f 	isb	sy
 800defa:	f3bf 8f4f 	dsb	sy
 800defe:	617b      	str	r3, [r7, #20]
}
 800df00:	bf00      	nop
 800df02:	e7fe      	b.n	800df02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d01f      	beq.n	800df4a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df0a:	2300      	movs	r3, #0
 800df0c:	61fb      	str	r3, [r7, #28]
 800df0e:	e012      	b.n	800df36 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df10:	68ba      	ldr	r2, [r7, #8]
 800df12:	69fb      	ldr	r3, [r7, #28]
 800df14:	4413      	add	r3, r2
 800df16:	7819      	ldrb	r1, [r3, #0]
 800df18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	4413      	add	r3, r2
 800df1e:	3334      	adds	r3, #52	; 0x34
 800df20:	460a      	mov	r2, r1
 800df22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800df24:	68ba      	ldr	r2, [r7, #8]
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	4413      	add	r3, r2
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d006      	beq.n	800df3e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	3301      	adds	r3, #1
 800df34:	61fb      	str	r3, [r7, #28]
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	2b0f      	cmp	r3, #15
 800df3a:	d9e9      	bls.n	800df10 <prvInitialiseNewTask+0x64>
 800df3c:	e000      	b.n	800df40 <prvInitialiseNewTask+0x94>
			{
				break;
 800df3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df42:	2200      	movs	r2, #0
 800df44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800df48:	e003      	b.n	800df52 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800df4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4c:	2200      	movs	r2, #0
 800df4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df54:	2b37      	cmp	r3, #55	; 0x37
 800df56:	d901      	bls.n	800df5c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800df58:	2337      	movs	r3, #55	; 0x37
 800df5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800df5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800df62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800df68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6a:	2200      	movs	r2, #0
 800df6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df70:	3304      	adds	r3, #4
 800df72:	4618      	mov	r0, r3
 800df74:	f7fe ffcc 	bl	800cf10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7a:	3318      	adds	r3, #24
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7fe ffc7 	bl	800cf10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800df8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800df92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800df98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9a:	2200      	movs	r2, #0
 800df9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfaa:	3354      	adds	r3, #84	; 0x54
 800dfac:	2260      	movs	r2, #96	; 0x60
 800dfae:	2100      	movs	r1, #0
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f002 fd5d 	bl	8010a70 <memset>
 800dfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb8:	4a0c      	ldr	r2, [pc, #48]	; (800dfec <prvInitialiseNewTask+0x140>)
 800dfba:	659a      	str	r2, [r3, #88]	; 0x58
 800dfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbe:	4a0c      	ldr	r2, [pc, #48]	; (800dff0 <prvInitialiseNewTask+0x144>)
 800dfc0:	65da      	str	r2, [r3, #92]	; 0x5c
 800dfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc4:	4a0b      	ldr	r2, [pc, #44]	; (800dff4 <prvInitialiseNewTask+0x148>)
 800dfc6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dfc8:	683a      	ldr	r2, [r7, #0]
 800dfca:	68f9      	ldr	r1, [r7, #12]
 800dfcc:	69b8      	ldr	r0, [r7, #24]
 800dfce:	f001 fac1 	bl	800f554 <pxPortInitialiseStack>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d002      	beq.n	800dfe4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfe2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfe4:	bf00      	nop
 800dfe6:	3720      	adds	r7, #32
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	08015efc 	.word	0x08015efc
 800dff0:	08015f1c 	.word	0x08015f1c
 800dff4:	08015edc 	.word	0x08015edc

0800dff8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e000:	f001 fbd8 	bl	800f7b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e004:	4b2d      	ldr	r3, [pc, #180]	; (800e0bc <prvAddNewTaskToReadyList+0xc4>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	3301      	adds	r3, #1
 800e00a:	4a2c      	ldr	r2, [pc, #176]	; (800e0bc <prvAddNewTaskToReadyList+0xc4>)
 800e00c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e00e:	4b2c      	ldr	r3, [pc, #176]	; (800e0c0 <prvAddNewTaskToReadyList+0xc8>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d109      	bne.n	800e02a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e016:	4a2a      	ldr	r2, [pc, #168]	; (800e0c0 <prvAddNewTaskToReadyList+0xc8>)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e01c:	4b27      	ldr	r3, [pc, #156]	; (800e0bc <prvAddNewTaskToReadyList+0xc4>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2b01      	cmp	r3, #1
 800e022:	d110      	bne.n	800e046 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e024:	f000 fc98 	bl	800e958 <prvInitialiseTaskLists>
 800e028:	e00d      	b.n	800e046 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e02a:	4b26      	ldr	r3, [pc, #152]	; (800e0c4 <prvAddNewTaskToReadyList+0xcc>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d109      	bne.n	800e046 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e032:	4b23      	ldr	r3, [pc, #140]	; (800e0c0 <prvAddNewTaskToReadyList+0xc8>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d802      	bhi.n	800e046 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e040:	4a1f      	ldr	r2, [pc, #124]	; (800e0c0 <prvAddNewTaskToReadyList+0xc8>)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e046:	4b20      	ldr	r3, [pc, #128]	; (800e0c8 <prvAddNewTaskToReadyList+0xd0>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	3301      	adds	r3, #1
 800e04c:	4a1e      	ldr	r2, [pc, #120]	; (800e0c8 <prvAddNewTaskToReadyList+0xd0>)
 800e04e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e050:	4b1d      	ldr	r3, [pc, #116]	; (800e0c8 <prvAddNewTaskToReadyList+0xd0>)
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e05c:	4b1b      	ldr	r3, [pc, #108]	; (800e0cc <prvAddNewTaskToReadyList+0xd4>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	429a      	cmp	r2, r3
 800e062:	d903      	bls.n	800e06c <prvAddNewTaskToReadyList+0x74>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e068:	4a18      	ldr	r2, [pc, #96]	; (800e0cc <prvAddNewTaskToReadyList+0xd4>)
 800e06a:	6013      	str	r3, [r2, #0]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e070:	4613      	mov	r3, r2
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	4413      	add	r3, r2
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	4a15      	ldr	r2, [pc, #84]	; (800e0d0 <prvAddNewTaskToReadyList+0xd8>)
 800e07a:	441a      	add	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	3304      	adds	r3, #4
 800e080:	4619      	mov	r1, r3
 800e082:	4610      	mov	r0, r2
 800e084:	f7fe ff51 	bl	800cf2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e088:	f001 fbc4 	bl	800f814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e08c:	4b0d      	ldr	r3, [pc, #52]	; (800e0c4 <prvAddNewTaskToReadyList+0xcc>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d00e      	beq.n	800e0b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e094:	4b0a      	ldr	r3, [pc, #40]	; (800e0c0 <prvAddNewTaskToReadyList+0xc8>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d207      	bcs.n	800e0b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e0a2:	4b0c      	ldr	r3, [pc, #48]	; (800e0d4 <prvAddNewTaskToReadyList+0xdc>)
 800e0a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0a8:	601a      	str	r2, [r3, #0]
 800e0aa:	f3bf 8f4f 	dsb	sy
 800e0ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0b2:	bf00      	nop
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	2000122c 	.word	0x2000122c
 800e0c0:	20000d58 	.word	0x20000d58
 800e0c4:	20001238 	.word	0x20001238
 800e0c8:	20001248 	.word	0x20001248
 800e0cc:	20001234 	.word	0x20001234
 800e0d0:	20000d5c 	.word	0x20000d5c
 800e0d4:	e000ed04 	.word	0xe000ed04

0800e0d8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b084      	sub	sp, #16
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e0e0:	f001 fb68 	bl	800f7b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d102      	bne.n	800e0f0 <vTaskDelete+0x18>
 800e0ea:	4b2c      	ldr	r3, [pc, #176]	; (800e19c <vTaskDelete+0xc4>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	e000      	b.n	800e0f2 <vTaskDelete+0x1a>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	3304      	adds	r3, #4
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7fe ff73 	bl	800cfe4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e102:	2b00      	cmp	r3, #0
 800e104:	d004      	beq.n	800e110 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	3318      	adds	r3, #24
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fe ff6a 	bl	800cfe4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e110:	4b23      	ldr	r3, [pc, #140]	; (800e1a0 <vTaskDelete+0xc8>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	3301      	adds	r3, #1
 800e116:	4a22      	ldr	r2, [pc, #136]	; (800e1a0 <vTaskDelete+0xc8>)
 800e118:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e11a:	4b20      	ldr	r3, [pc, #128]	; (800e19c <vTaskDelete+0xc4>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	68fa      	ldr	r2, [r7, #12]
 800e120:	429a      	cmp	r2, r3
 800e122:	d10b      	bne.n	800e13c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	3304      	adds	r3, #4
 800e128:	4619      	mov	r1, r3
 800e12a:	481e      	ldr	r0, [pc, #120]	; (800e1a4 <vTaskDelete+0xcc>)
 800e12c:	f7fe fefd 	bl	800cf2a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e130:	4b1d      	ldr	r3, [pc, #116]	; (800e1a8 <vTaskDelete+0xd0>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	3301      	adds	r3, #1
 800e136:	4a1c      	ldr	r2, [pc, #112]	; (800e1a8 <vTaskDelete+0xd0>)
 800e138:	6013      	str	r3, [r2, #0]
 800e13a:	e009      	b.n	800e150 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e13c:	4b1b      	ldr	r3, [pc, #108]	; (800e1ac <vTaskDelete+0xd4>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	3b01      	subs	r3, #1
 800e142:	4a1a      	ldr	r2, [pc, #104]	; (800e1ac <vTaskDelete+0xd4>)
 800e144:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800e146:	68f8      	ldr	r0, [r7, #12]
 800e148:	f000 fc74 	bl	800ea34 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e14c:	f000 fca6 	bl	800ea9c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800e150:	f001 fb60 	bl	800f814 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e154:	4b16      	ldr	r3, [pc, #88]	; (800e1b0 <vTaskDelete+0xd8>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d01b      	beq.n	800e194 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800e15c:	4b0f      	ldr	r3, [pc, #60]	; (800e19c <vTaskDelete+0xc4>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	68fa      	ldr	r2, [r7, #12]
 800e162:	429a      	cmp	r2, r3
 800e164:	d116      	bne.n	800e194 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e166:	4b13      	ldr	r3, [pc, #76]	; (800e1b4 <vTaskDelete+0xdc>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00a      	beq.n	800e184 <vTaskDelete+0xac>
	__asm volatile
 800e16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e172:	f383 8811 	msr	BASEPRI, r3
 800e176:	f3bf 8f6f 	isb	sy
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	60bb      	str	r3, [r7, #8]
}
 800e180:	bf00      	nop
 800e182:	e7fe      	b.n	800e182 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800e184:	4b0c      	ldr	r3, [pc, #48]	; (800e1b8 <vTaskDelete+0xe0>)
 800e186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e18a:	601a      	str	r2, [r3, #0]
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e194:	bf00      	nop
 800e196:	3710      	adds	r7, #16
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	20000d58 	.word	0x20000d58
 800e1a0:	20001248 	.word	0x20001248
 800e1a4:	20001200 	.word	0x20001200
 800e1a8:	20001214 	.word	0x20001214
 800e1ac:	2000122c 	.word	0x2000122c
 800e1b0:	20001238 	.word	0x20001238
 800e1b4:	20001254 	.word	0x20001254
 800e1b8:	e000ed04 	.word	0xe000ed04

0800e1bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d017      	beq.n	800e1fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e1ce:	4b13      	ldr	r3, [pc, #76]	; (800e21c <vTaskDelay+0x60>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00a      	beq.n	800e1ec <vTaskDelay+0x30>
	__asm volatile
 800e1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1da:	f383 8811 	msr	BASEPRI, r3
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	60bb      	str	r3, [r7, #8]
}
 800e1e8:	bf00      	nop
 800e1ea:	e7fe      	b.n	800e1ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e1ec:	f000 f88a 	bl	800e304 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e1f0:	2100      	movs	r1, #0
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 fe0c 	bl	800ee10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e1f8:	f000 f892 	bl	800e320 <xTaskResumeAll>
 800e1fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d107      	bne.n	800e214 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e204:	4b06      	ldr	r3, [pc, #24]	; (800e220 <vTaskDelay+0x64>)
 800e206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e20a:	601a      	str	r2, [r3, #0]
 800e20c:	f3bf 8f4f 	dsb	sy
 800e210:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e214:	bf00      	nop
 800e216:	3710      	adds	r7, #16
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	20001254 	.word	0x20001254
 800e220:	e000ed04 	.word	0xe000ed04

0800e224 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b08a      	sub	sp, #40	; 0x28
 800e228:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e22a:	2300      	movs	r3, #0
 800e22c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e22e:	2300      	movs	r3, #0
 800e230:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e232:	463a      	mov	r2, r7
 800e234:	1d39      	adds	r1, r7, #4
 800e236:	f107 0308 	add.w	r3, r7, #8
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7fe fe14 	bl	800ce68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e240:	6839      	ldr	r1, [r7, #0]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	68ba      	ldr	r2, [r7, #8]
 800e246:	9202      	str	r2, [sp, #8]
 800e248:	9301      	str	r3, [sp, #4]
 800e24a:	2300      	movs	r3, #0
 800e24c:	9300      	str	r3, [sp, #0]
 800e24e:	2300      	movs	r3, #0
 800e250:	460a      	mov	r2, r1
 800e252:	4924      	ldr	r1, [pc, #144]	; (800e2e4 <vTaskStartScheduler+0xc0>)
 800e254:	4824      	ldr	r0, [pc, #144]	; (800e2e8 <vTaskStartScheduler+0xc4>)
 800e256:	f7ff fd87 	bl	800dd68 <xTaskCreateStatic>
 800e25a:	4603      	mov	r3, r0
 800e25c:	4a23      	ldr	r2, [pc, #140]	; (800e2ec <vTaskStartScheduler+0xc8>)
 800e25e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e260:	4b22      	ldr	r3, [pc, #136]	; (800e2ec <vTaskStartScheduler+0xc8>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d002      	beq.n	800e26e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e268:	2301      	movs	r3, #1
 800e26a:	617b      	str	r3, [r7, #20]
 800e26c:	e001      	b.n	800e272 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e26e:	2300      	movs	r3, #0
 800e270:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	2b01      	cmp	r3, #1
 800e276:	d102      	bne.n	800e27e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e278:	f000 fe1e 	bl	800eeb8 <xTimerCreateTimerTask>
 800e27c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	2b01      	cmp	r3, #1
 800e282:	d11b      	bne.n	800e2bc <vTaskStartScheduler+0x98>
	__asm volatile
 800e284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e288:	f383 8811 	msr	BASEPRI, r3
 800e28c:	f3bf 8f6f 	isb	sy
 800e290:	f3bf 8f4f 	dsb	sy
 800e294:	613b      	str	r3, [r7, #16]
}
 800e296:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e298:	4b15      	ldr	r3, [pc, #84]	; (800e2f0 <vTaskStartScheduler+0xcc>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	3354      	adds	r3, #84	; 0x54
 800e29e:	4a15      	ldr	r2, [pc, #84]	; (800e2f4 <vTaskStartScheduler+0xd0>)
 800e2a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e2a2:	4b15      	ldr	r3, [pc, #84]	; (800e2f8 <vTaskStartScheduler+0xd4>)
 800e2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e2aa:	4b14      	ldr	r3, [pc, #80]	; (800e2fc <vTaskStartScheduler+0xd8>)
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e2b0:	4b13      	ldr	r3, [pc, #76]	; (800e300 <vTaskStartScheduler+0xdc>)
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e2b6:	f001 f9db 	bl	800f670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e2ba:	e00e      	b.n	800e2da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c2:	d10a      	bne.n	800e2da <vTaskStartScheduler+0xb6>
	__asm volatile
 800e2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c8:	f383 8811 	msr	BASEPRI, r3
 800e2cc:	f3bf 8f6f 	isb	sy
 800e2d0:	f3bf 8f4f 	dsb	sy
 800e2d4:	60fb      	str	r3, [r7, #12]
}
 800e2d6:	bf00      	nop
 800e2d8:	e7fe      	b.n	800e2d8 <vTaskStartScheduler+0xb4>
}
 800e2da:	bf00      	nop
 800e2dc:	3718      	adds	r7, #24
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	08015d24 	.word	0x08015d24
 800e2e8:	0800e929 	.word	0x0800e929
 800e2ec:	20001250 	.word	0x20001250
 800e2f0:	20000d58 	.word	0x20000d58
 800e2f4:	20000188 	.word	0x20000188
 800e2f8:	2000124c 	.word	0x2000124c
 800e2fc:	20001238 	.word	0x20001238
 800e300:	20001230 	.word	0x20001230

0800e304 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e304:	b480      	push	{r7}
 800e306:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e308:	4b04      	ldr	r3, [pc, #16]	; (800e31c <vTaskSuspendAll+0x18>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	3301      	adds	r3, #1
 800e30e:	4a03      	ldr	r2, [pc, #12]	; (800e31c <vTaskSuspendAll+0x18>)
 800e310:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e312:	bf00      	nop
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr
 800e31c:	20001254 	.word	0x20001254

0800e320 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e326:	2300      	movs	r3, #0
 800e328:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e32a:	2300      	movs	r3, #0
 800e32c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e32e:	4b42      	ldr	r3, [pc, #264]	; (800e438 <xTaskResumeAll+0x118>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d10a      	bne.n	800e34c <xTaskResumeAll+0x2c>
	__asm volatile
 800e336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33a:	f383 8811 	msr	BASEPRI, r3
 800e33e:	f3bf 8f6f 	isb	sy
 800e342:	f3bf 8f4f 	dsb	sy
 800e346:	603b      	str	r3, [r7, #0]
}
 800e348:	bf00      	nop
 800e34a:	e7fe      	b.n	800e34a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e34c:	f001 fa32 	bl	800f7b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e350:	4b39      	ldr	r3, [pc, #228]	; (800e438 <xTaskResumeAll+0x118>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	3b01      	subs	r3, #1
 800e356:	4a38      	ldr	r2, [pc, #224]	; (800e438 <xTaskResumeAll+0x118>)
 800e358:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e35a:	4b37      	ldr	r3, [pc, #220]	; (800e438 <xTaskResumeAll+0x118>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d162      	bne.n	800e428 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e362:	4b36      	ldr	r3, [pc, #216]	; (800e43c <xTaskResumeAll+0x11c>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d05e      	beq.n	800e428 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e36a:	e02f      	b.n	800e3cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e36c:	4b34      	ldr	r3, [pc, #208]	; (800e440 <xTaskResumeAll+0x120>)
 800e36e:	68db      	ldr	r3, [r3, #12]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	3318      	adds	r3, #24
 800e378:	4618      	mov	r0, r3
 800e37a:	f7fe fe33 	bl	800cfe4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	3304      	adds	r3, #4
 800e382:	4618      	mov	r0, r3
 800e384:	f7fe fe2e 	bl	800cfe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e38c:	4b2d      	ldr	r3, [pc, #180]	; (800e444 <xTaskResumeAll+0x124>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	429a      	cmp	r2, r3
 800e392:	d903      	bls.n	800e39c <xTaskResumeAll+0x7c>
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e398:	4a2a      	ldr	r2, [pc, #168]	; (800e444 <xTaskResumeAll+0x124>)
 800e39a:	6013      	str	r3, [r2, #0]
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3a0:	4613      	mov	r3, r2
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	4413      	add	r3, r2
 800e3a6:	009b      	lsls	r3, r3, #2
 800e3a8:	4a27      	ldr	r2, [pc, #156]	; (800e448 <xTaskResumeAll+0x128>)
 800e3aa:	441a      	add	r2, r3
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	3304      	adds	r3, #4
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4610      	mov	r0, r2
 800e3b4:	f7fe fdb9 	bl	800cf2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3bc:	4b23      	ldr	r3, [pc, #140]	; (800e44c <xTaskResumeAll+0x12c>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d302      	bcc.n	800e3cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e3c6:	4b22      	ldr	r3, [pc, #136]	; (800e450 <xTaskResumeAll+0x130>)
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3cc:	4b1c      	ldr	r3, [pc, #112]	; (800e440 <xTaskResumeAll+0x120>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d1cb      	bne.n	800e36c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d001      	beq.n	800e3de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e3da:	f000 fb5f 	bl	800ea9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e3de:	4b1d      	ldr	r3, [pc, #116]	; (800e454 <xTaskResumeAll+0x134>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d010      	beq.n	800e40c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e3ea:	f000 f847 	bl	800e47c <xTaskIncrementTick>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d002      	beq.n	800e3fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e3f4:	4b16      	ldr	r3, [pc, #88]	; (800e450 <xTaskResumeAll+0x130>)
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	3b01      	subs	r3, #1
 800e3fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d1f1      	bne.n	800e3ea <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800e406:	4b13      	ldr	r3, [pc, #76]	; (800e454 <xTaskResumeAll+0x134>)
 800e408:	2200      	movs	r2, #0
 800e40a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e40c:	4b10      	ldr	r3, [pc, #64]	; (800e450 <xTaskResumeAll+0x130>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d009      	beq.n	800e428 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e414:	2301      	movs	r3, #1
 800e416:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e418:	4b0f      	ldr	r3, [pc, #60]	; (800e458 <xTaskResumeAll+0x138>)
 800e41a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e41e:	601a      	str	r2, [r3, #0]
 800e420:	f3bf 8f4f 	dsb	sy
 800e424:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e428:	f001 f9f4 	bl	800f814 <vPortExitCritical>

	return xAlreadyYielded;
 800e42c:	68bb      	ldr	r3, [r7, #8]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	20001254 	.word	0x20001254
 800e43c:	2000122c 	.word	0x2000122c
 800e440:	200011ec 	.word	0x200011ec
 800e444:	20001234 	.word	0x20001234
 800e448:	20000d5c 	.word	0x20000d5c
 800e44c:	20000d58 	.word	0x20000d58
 800e450:	20001240 	.word	0x20001240
 800e454:	2000123c 	.word	0x2000123c
 800e458:	e000ed04 	.word	0xe000ed04

0800e45c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e45c:	b480      	push	{r7}
 800e45e:	b083      	sub	sp, #12
 800e460:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e462:	4b05      	ldr	r3, [pc, #20]	; (800e478 <xTaskGetTickCount+0x1c>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e468:	687b      	ldr	r3, [r7, #4]
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	370c      	adds	r7, #12
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	20001230 	.word	0x20001230

0800e47c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b086      	sub	sp, #24
 800e480:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e482:	2300      	movs	r3, #0
 800e484:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e486:	4b4f      	ldr	r3, [pc, #316]	; (800e5c4 <xTaskIncrementTick+0x148>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	f040 8089 	bne.w	800e5a2 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e490:	4b4d      	ldr	r3, [pc, #308]	; (800e5c8 <xTaskIncrementTick+0x14c>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	3301      	adds	r3, #1
 800e496:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e498:	4a4b      	ldr	r2, [pc, #300]	; (800e5c8 <xTaskIncrementTick+0x14c>)
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d120      	bne.n	800e4e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e4a4:	4b49      	ldr	r3, [pc, #292]	; (800e5cc <xTaskIncrementTick+0x150>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00a      	beq.n	800e4c4 <xTaskIncrementTick+0x48>
	__asm volatile
 800e4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b2:	f383 8811 	msr	BASEPRI, r3
 800e4b6:	f3bf 8f6f 	isb	sy
 800e4ba:	f3bf 8f4f 	dsb	sy
 800e4be:	603b      	str	r3, [r7, #0]
}
 800e4c0:	bf00      	nop
 800e4c2:	e7fe      	b.n	800e4c2 <xTaskIncrementTick+0x46>
 800e4c4:	4b41      	ldr	r3, [pc, #260]	; (800e5cc <xTaskIncrementTick+0x150>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	60fb      	str	r3, [r7, #12]
 800e4ca:	4b41      	ldr	r3, [pc, #260]	; (800e5d0 <xTaskIncrementTick+0x154>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4a3f      	ldr	r2, [pc, #252]	; (800e5cc <xTaskIncrementTick+0x150>)
 800e4d0:	6013      	str	r3, [r2, #0]
 800e4d2:	4a3f      	ldr	r2, [pc, #252]	; (800e5d0 <xTaskIncrementTick+0x154>)
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	6013      	str	r3, [r2, #0]
 800e4d8:	4b3e      	ldr	r3, [pc, #248]	; (800e5d4 <xTaskIncrementTick+0x158>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	4a3d      	ldr	r2, [pc, #244]	; (800e5d4 <xTaskIncrementTick+0x158>)
 800e4e0:	6013      	str	r3, [r2, #0]
 800e4e2:	f000 fadb 	bl	800ea9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e4e6:	4b3c      	ldr	r3, [pc, #240]	; (800e5d8 <xTaskIncrementTick+0x15c>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	693a      	ldr	r2, [r7, #16]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d349      	bcc.n	800e584 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4f0:	4b36      	ldr	r3, [pc, #216]	; (800e5cc <xTaskIncrementTick+0x150>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d104      	bne.n	800e504 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4fa:	4b37      	ldr	r3, [pc, #220]	; (800e5d8 <xTaskIncrementTick+0x15c>)
 800e4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800e500:	601a      	str	r2, [r3, #0]
					break;
 800e502:	e03f      	b.n	800e584 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e504:	4b31      	ldr	r3, [pc, #196]	; (800e5cc <xTaskIncrementTick+0x150>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	68db      	ldr	r3, [r3, #12]
 800e50c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e514:	693a      	ldr	r2, [r7, #16]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d203      	bcs.n	800e524 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e51c:	4a2e      	ldr	r2, [pc, #184]	; (800e5d8 <xTaskIncrementTick+0x15c>)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e522:	e02f      	b.n	800e584 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	3304      	adds	r3, #4
 800e528:	4618      	mov	r0, r3
 800e52a:	f7fe fd5b 	bl	800cfe4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e532:	2b00      	cmp	r3, #0
 800e534:	d004      	beq.n	800e540 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	3318      	adds	r3, #24
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7fe fd52 	bl	800cfe4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e544:	4b25      	ldr	r3, [pc, #148]	; (800e5dc <xTaskIncrementTick+0x160>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d903      	bls.n	800e554 <xTaskIncrementTick+0xd8>
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e550:	4a22      	ldr	r2, [pc, #136]	; (800e5dc <xTaskIncrementTick+0x160>)
 800e552:	6013      	str	r3, [r2, #0]
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e558:	4613      	mov	r3, r2
 800e55a:	009b      	lsls	r3, r3, #2
 800e55c:	4413      	add	r3, r2
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	4a1f      	ldr	r2, [pc, #124]	; (800e5e0 <xTaskIncrementTick+0x164>)
 800e562:	441a      	add	r2, r3
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	3304      	adds	r3, #4
 800e568:	4619      	mov	r1, r3
 800e56a:	4610      	mov	r0, r2
 800e56c:	f7fe fcdd 	bl	800cf2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e574:	4b1b      	ldr	r3, [pc, #108]	; (800e5e4 <xTaskIncrementTick+0x168>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d3b8      	bcc.n	800e4f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e57e:	2301      	movs	r3, #1
 800e580:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e582:	e7b5      	b.n	800e4f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e584:	4b17      	ldr	r3, [pc, #92]	; (800e5e4 <xTaskIncrementTick+0x168>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e58a:	4915      	ldr	r1, [pc, #84]	; (800e5e0 <xTaskIncrementTick+0x164>)
 800e58c:	4613      	mov	r3, r2
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	4413      	add	r3, r2
 800e592:	009b      	lsls	r3, r3, #2
 800e594:	440b      	add	r3, r1
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d907      	bls.n	800e5ac <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800e59c:	2301      	movs	r3, #1
 800e59e:	617b      	str	r3, [r7, #20]
 800e5a0:	e004      	b.n	800e5ac <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e5a2:	4b11      	ldr	r3, [pc, #68]	; (800e5e8 <xTaskIncrementTick+0x16c>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	4a0f      	ldr	r2, [pc, #60]	; (800e5e8 <xTaskIncrementTick+0x16c>)
 800e5aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e5ac:	4b0f      	ldr	r3, [pc, #60]	; (800e5ec <xTaskIncrementTick+0x170>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d001      	beq.n	800e5b8 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e5b8:	697b      	ldr	r3, [r7, #20]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3718      	adds	r7, #24
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	20001254 	.word	0x20001254
 800e5c8:	20001230 	.word	0x20001230
 800e5cc:	200011e4 	.word	0x200011e4
 800e5d0:	200011e8 	.word	0x200011e8
 800e5d4:	20001244 	.word	0x20001244
 800e5d8:	2000124c 	.word	0x2000124c
 800e5dc:	20001234 	.word	0x20001234
 800e5e0:	20000d5c 	.word	0x20000d5c
 800e5e4:	20000d58 	.word	0x20000d58
 800e5e8:	2000123c 	.word	0x2000123c
 800e5ec:	20001240 	.word	0x20001240

0800e5f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b085      	sub	sp, #20
 800e5f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e5f6:	4b2a      	ldr	r3, [pc, #168]	; (800e6a0 <vTaskSwitchContext+0xb0>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d003      	beq.n	800e606 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e5fe:	4b29      	ldr	r3, [pc, #164]	; (800e6a4 <vTaskSwitchContext+0xb4>)
 800e600:	2201      	movs	r2, #1
 800e602:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e604:	e046      	b.n	800e694 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e606:	4b27      	ldr	r3, [pc, #156]	; (800e6a4 <vTaskSwitchContext+0xb4>)
 800e608:	2200      	movs	r2, #0
 800e60a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e60c:	4b26      	ldr	r3, [pc, #152]	; (800e6a8 <vTaskSwitchContext+0xb8>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	60fb      	str	r3, [r7, #12]
 800e612:	e010      	b.n	800e636 <vTaskSwitchContext+0x46>
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10a      	bne.n	800e630 <vTaskSwitchContext+0x40>
	__asm volatile
 800e61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61e:	f383 8811 	msr	BASEPRI, r3
 800e622:	f3bf 8f6f 	isb	sy
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	607b      	str	r3, [r7, #4]
}
 800e62c:	bf00      	nop
 800e62e:	e7fe      	b.n	800e62e <vTaskSwitchContext+0x3e>
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	3b01      	subs	r3, #1
 800e634:	60fb      	str	r3, [r7, #12]
 800e636:	491d      	ldr	r1, [pc, #116]	; (800e6ac <vTaskSwitchContext+0xbc>)
 800e638:	68fa      	ldr	r2, [r7, #12]
 800e63a:	4613      	mov	r3, r2
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	4413      	add	r3, r2
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	440b      	add	r3, r1
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d0e4      	beq.n	800e614 <vTaskSwitchContext+0x24>
 800e64a:	68fa      	ldr	r2, [r7, #12]
 800e64c:	4613      	mov	r3, r2
 800e64e:	009b      	lsls	r3, r3, #2
 800e650:	4413      	add	r3, r2
 800e652:	009b      	lsls	r3, r3, #2
 800e654:	4a15      	ldr	r2, [pc, #84]	; (800e6ac <vTaskSwitchContext+0xbc>)
 800e656:	4413      	add	r3, r2
 800e658:	60bb      	str	r3, [r7, #8]
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	685a      	ldr	r2, [r3, #4]
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	605a      	str	r2, [r3, #4]
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	685a      	ldr	r2, [r3, #4]
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	3308      	adds	r3, #8
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d104      	bne.n	800e67a <vTaskSwitchContext+0x8a>
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	685a      	ldr	r2, [r3, #4]
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	605a      	str	r2, [r3, #4]
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	4a0b      	ldr	r2, [pc, #44]	; (800e6b0 <vTaskSwitchContext+0xc0>)
 800e682:	6013      	str	r3, [r2, #0]
 800e684:	4a08      	ldr	r2, [pc, #32]	; (800e6a8 <vTaskSwitchContext+0xb8>)
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e68a:	4b09      	ldr	r3, [pc, #36]	; (800e6b0 <vTaskSwitchContext+0xc0>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	3354      	adds	r3, #84	; 0x54
 800e690:	4a08      	ldr	r2, [pc, #32]	; (800e6b4 <vTaskSwitchContext+0xc4>)
 800e692:	6013      	str	r3, [r2, #0]
}
 800e694:	bf00      	nop
 800e696:	3714      	adds	r7, #20
 800e698:	46bd      	mov	sp, r7
 800e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69e:	4770      	bx	lr
 800e6a0:	20001254 	.word	0x20001254
 800e6a4:	20001240 	.word	0x20001240
 800e6a8:	20001234 	.word	0x20001234
 800e6ac:	20000d5c 	.word	0x20000d5c
 800e6b0:	20000d58 	.word	0x20000d58
 800e6b4:	20000188 	.word	0x20000188

0800e6b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d10a      	bne.n	800e6de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6cc:	f383 8811 	msr	BASEPRI, r3
 800e6d0:	f3bf 8f6f 	isb	sy
 800e6d4:	f3bf 8f4f 	dsb	sy
 800e6d8:	60fb      	str	r3, [r7, #12]
}
 800e6da:	bf00      	nop
 800e6dc:	e7fe      	b.n	800e6dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6de:	4b07      	ldr	r3, [pc, #28]	; (800e6fc <vTaskPlaceOnEventList+0x44>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	3318      	adds	r3, #24
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f7fe fc43 	bl	800cf72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e6ec:	2101      	movs	r1, #1
 800e6ee:	6838      	ldr	r0, [r7, #0]
 800e6f0:	f000 fb8e 	bl	800ee10 <prvAddCurrentTaskToDelayedList>
}
 800e6f4:	bf00      	nop
 800e6f6:	3710      	adds	r7, #16
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	20000d58 	.word	0x20000d58

0800e700 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e700:	b580      	push	{r7, lr}
 800e702:	b086      	sub	sp, #24
 800e704:	af00      	add	r7, sp, #0
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d10a      	bne.n	800e728 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e716:	f383 8811 	msr	BASEPRI, r3
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	617b      	str	r3, [r7, #20]
}
 800e724:	bf00      	nop
 800e726:	e7fe      	b.n	800e726 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e728:	4b0a      	ldr	r3, [pc, #40]	; (800e754 <vTaskPlaceOnEventListRestricted+0x54>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	3318      	adds	r3, #24
 800e72e:	4619      	mov	r1, r3
 800e730:	68f8      	ldr	r0, [r7, #12]
 800e732:	f7fe fbfa 	bl	800cf2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d002      	beq.n	800e742 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e73c:	f04f 33ff 	mov.w	r3, #4294967295
 800e740:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e742:	6879      	ldr	r1, [r7, #4]
 800e744:	68b8      	ldr	r0, [r7, #8]
 800e746:	f000 fb63 	bl	800ee10 <prvAddCurrentTaskToDelayedList>
	}
 800e74a:	bf00      	nop
 800e74c:	3718      	adds	r7, #24
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	20000d58 	.word	0x20000d58

0800e758 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b086      	sub	sp, #24
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	68db      	ldr	r3, [r3, #12]
 800e766:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d10a      	bne.n	800e784 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e772:	f383 8811 	msr	BASEPRI, r3
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	60fb      	str	r3, [r7, #12]
}
 800e780:	bf00      	nop
 800e782:	e7fe      	b.n	800e782 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	3318      	adds	r3, #24
 800e788:	4618      	mov	r0, r3
 800e78a:	f7fe fc2b 	bl	800cfe4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e78e:	4b1e      	ldr	r3, [pc, #120]	; (800e808 <xTaskRemoveFromEventList+0xb0>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d11d      	bne.n	800e7d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	3304      	adds	r3, #4
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7fe fc22 	bl	800cfe4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7a4:	4b19      	ldr	r3, [pc, #100]	; (800e80c <xTaskRemoveFromEventList+0xb4>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d903      	bls.n	800e7b4 <xTaskRemoveFromEventList+0x5c>
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b0:	4a16      	ldr	r2, [pc, #88]	; (800e80c <xTaskRemoveFromEventList+0xb4>)
 800e7b2:	6013      	str	r3, [r2, #0]
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7b8:	4613      	mov	r3, r2
 800e7ba:	009b      	lsls	r3, r3, #2
 800e7bc:	4413      	add	r3, r2
 800e7be:	009b      	lsls	r3, r3, #2
 800e7c0:	4a13      	ldr	r2, [pc, #76]	; (800e810 <xTaskRemoveFromEventList+0xb8>)
 800e7c2:	441a      	add	r2, r3
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	3304      	adds	r3, #4
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	4610      	mov	r0, r2
 800e7cc:	f7fe fbad 	bl	800cf2a <vListInsertEnd>
 800e7d0:	e005      	b.n	800e7de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	3318      	adds	r3, #24
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	480e      	ldr	r0, [pc, #56]	; (800e814 <xTaskRemoveFromEventList+0xbc>)
 800e7da:	f7fe fba6 	bl	800cf2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e2:	4b0d      	ldr	r3, [pc, #52]	; (800e818 <xTaskRemoveFromEventList+0xc0>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d905      	bls.n	800e7f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e7f0:	4b0a      	ldr	r3, [pc, #40]	; (800e81c <xTaskRemoveFromEventList+0xc4>)
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	601a      	str	r2, [r3, #0]
 800e7f6:	e001      	b.n	800e7fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e7fc:	697b      	ldr	r3, [r7, #20]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3718      	adds	r7, #24
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	20001254 	.word	0x20001254
 800e80c:	20001234 	.word	0x20001234
 800e810:	20000d5c 	.word	0x20000d5c
 800e814:	200011ec 	.word	0x200011ec
 800e818:	20000d58 	.word	0x20000d58
 800e81c:	20001240 	.word	0x20001240

0800e820 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e828:	4b06      	ldr	r3, [pc, #24]	; (800e844 <vTaskInternalSetTimeOutState+0x24>)
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e830:	4b05      	ldr	r3, [pc, #20]	; (800e848 <vTaskInternalSetTimeOutState+0x28>)
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	605a      	str	r2, [r3, #4]
}
 800e838:	bf00      	nop
 800e83a:	370c      	adds	r7, #12
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr
 800e844:	20001244 	.word	0x20001244
 800e848:	20001230 	.word	0x20001230

0800e84c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b088      	sub	sp, #32
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d10a      	bne.n	800e872 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e860:	f383 8811 	msr	BASEPRI, r3
 800e864:	f3bf 8f6f 	isb	sy
 800e868:	f3bf 8f4f 	dsb	sy
 800e86c:	613b      	str	r3, [r7, #16]
}
 800e86e:	bf00      	nop
 800e870:	e7fe      	b.n	800e870 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d10a      	bne.n	800e88e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87c:	f383 8811 	msr	BASEPRI, r3
 800e880:	f3bf 8f6f 	isb	sy
 800e884:	f3bf 8f4f 	dsb	sy
 800e888:	60fb      	str	r3, [r7, #12]
}
 800e88a:	bf00      	nop
 800e88c:	e7fe      	b.n	800e88c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e88e:	f000 ff91 	bl	800f7b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e892:	4b1d      	ldr	r3, [pc, #116]	; (800e908 <xTaskCheckForTimeOut+0xbc>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	69ba      	ldr	r2, [r7, #24]
 800e89e:	1ad3      	subs	r3, r2, r3
 800e8a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8aa:	d102      	bne.n	800e8b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	61fb      	str	r3, [r7, #28]
 800e8b0:	e023      	b.n	800e8fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	4b15      	ldr	r3, [pc, #84]	; (800e90c <xTaskCheckForTimeOut+0xc0>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d007      	beq.n	800e8ce <xTaskCheckForTimeOut+0x82>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	69ba      	ldr	r2, [r7, #24]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d302      	bcc.n	800e8ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	61fb      	str	r3, [r7, #28]
 800e8cc:	e015      	b.n	800e8fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	697a      	ldr	r2, [r7, #20]
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d20b      	bcs.n	800e8f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	1ad2      	subs	r2, r2, r3
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f7ff ff9b 	bl	800e820 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	61fb      	str	r3, [r7, #28]
 800e8ee:	e004      	b.n	800e8fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e8fa:	f000 ff8b 	bl	800f814 <vPortExitCritical>

	return xReturn;
 800e8fe:	69fb      	ldr	r3, [r7, #28]
}
 800e900:	4618      	mov	r0, r3
 800e902:	3720      	adds	r7, #32
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	20001230 	.word	0x20001230
 800e90c:	20001244 	.word	0x20001244

0800e910 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e910:	b480      	push	{r7}
 800e912:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e914:	4b03      	ldr	r3, [pc, #12]	; (800e924 <vTaskMissedYield+0x14>)
 800e916:	2201      	movs	r2, #1
 800e918:	601a      	str	r2, [r3, #0]
}
 800e91a:	bf00      	nop
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr
 800e924:	20001240 	.word	0x20001240

0800e928 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e930:	f000 f852 	bl	800e9d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e934:	4b06      	ldr	r3, [pc, #24]	; (800e950 <prvIdleTask+0x28>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d9f9      	bls.n	800e930 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e93c:	4b05      	ldr	r3, [pc, #20]	; (800e954 <prvIdleTask+0x2c>)
 800e93e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e942:	601a      	str	r2, [r3, #0]
 800e944:	f3bf 8f4f 	dsb	sy
 800e948:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e94c:	e7f0      	b.n	800e930 <prvIdleTask+0x8>
 800e94e:	bf00      	nop
 800e950:	20000d5c 	.word	0x20000d5c
 800e954:	e000ed04 	.word	0xe000ed04

0800e958 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e95e:	2300      	movs	r3, #0
 800e960:	607b      	str	r3, [r7, #4]
 800e962:	e00c      	b.n	800e97e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	4613      	mov	r3, r2
 800e968:	009b      	lsls	r3, r3, #2
 800e96a:	4413      	add	r3, r2
 800e96c:	009b      	lsls	r3, r3, #2
 800e96e:	4a12      	ldr	r2, [pc, #72]	; (800e9b8 <prvInitialiseTaskLists+0x60>)
 800e970:	4413      	add	r3, r2
 800e972:	4618      	mov	r0, r3
 800e974:	f7fe faac 	bl	800ced0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	3301      	adds	r3, #1
 800e97c:	607b      	str	r3, [r7, #4]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2b37      	cmp	r3, #55	; 0x37
 800e982:	d9ef      	bls.n	800e964 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e984:	480d      	ldr	r0, [pc, #52]	; (800e9bc <prvInitialiseTaskLists+0x64>)
 800e986:	f7fe faa3 	bl	800ced0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e98a:	480d      	ldr	r0, [pc, #52]	; (800e9c0 <prvInitialiseTaskLists+0x68>)
 800e98c:	f7fe faa0 	bl	800ced0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e990:	480c      	ldr	r0, [pc, #48]	; (800e9c4 <prvInitialiseTaskLists+0x6c>)
 800e992:	f7fe fa9d 	bl	800ced0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e996:	480c      	ldr	r0, [pc, #48]	; (800e9c8 <prvInitialiseTaskLists+0x70>)
 800e998:	f7fe fa9a 	bl	800ced0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e99c:	480b      	ldr	r0, [pc, #44]	; (800e9cc <prvInitialiseTaskLists+0x74>)
 800e99e:	f7fe fa97 	bl	800ced0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e9a2:	4b0b      	ldr	r3, [pc, #44]	; (800e9d0 <prvInitialiseTaskLists+0x78>)
 800e9a4:	4a05      	ldr	r2, [pc, #20]	; (800e9bc <prvInitialiseTaskLists+0x64>)
 800e9a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9a8:	4b0a      	ldr	r3, [pc, #40]	; (800e9d4 <prvInitialiseTaskLists+0x7c>)
 800e9aa:	4a05      	ldr	r2, [pc, #20]	; (800e9c0 <prvInitialiseTaskLists+0x68>)
 800e9ac:	601a      	str	r2, [r3, #0]
}
 800e9ae:	bf00      	nop
 800e9b0:	3708      	adds	r7, #8
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	20000d5c 	.word	0x20000d5c
 800e9bc:	200011bc 	.word	0x200011bc
 800e9c0:	200011d0 	.word	0x200011d0
 800e9c4:	200011ec 	.word	0x200011ec
 800e9c8:	20001200 	.word	0x20001200
 800e9cc:	20001218 	.word	0x20001218
 800e9d0:	200011e4 	.word	0x200011e4
 800e9d4:	200011e8 	.word	0x200011e8

0800e9d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9de:	e019      	b.n	800ea14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e9e0:	f000 fee8 	bl	800f7b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9e4:	4b10      	ldr	r3, [pc, #64]	; (800ea28 <prvCheckTasksWaitingTermination+0x50>)
 800e9e6:	68db      	ldr	r3, [r3, #12]
 800e9e8:	68db      	ldr	r3, [r3, #12]
 800e9ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	3304      	adds	r3, #4
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fe faf7 	bl	800cfe4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e9f6:	4b0d      	ldr	r3, [pc, #52]	; (800ea2c <prvCheckTasksWaitingTermination+0x54>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	3b01      	subs	r3, #1
 800e9fc:	4a0b      	ldr	r2, [pc, #44]	; (800ea2c <prvCheckTasksWaitingTermination+0x54>)
 800e9fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea00:	4b0b      	ldr	r3, [pc, #44]	; (800ea30 <prvCheckTasksWaitingTermination+0x58>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	3b01      	subs	r3, #1
 800ea06:	4a0a      	ldr	r2, [pc, #40]	; (800ea30 <prvCheckTasksWaitingTermination+0x58>)
 800ea08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea0a:	f000 ff03 	bl	800f814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f000 f810 	bl	800ea34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea14:	4b06      	ldr	r3, [pc, #24]	; (800ea30 <prvCheckTasksWaitingTermination+0x58>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d1e1      	bne.n	800e9e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea1c:	bf00      	nop
 800ea1e:	bf00      	nop
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	20001200 	.word	0x20001200
 800ea2c:	2000122c 	.word	0x2000122c
 800ea30:	20001214 	.word	0x20001214

0800ea34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	3354      	adds	r3, #84	; 0x54
 800ea40:	4618      	mov	r0, r3
 800ea42:	f002 ff4f 	bl	80118e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d108      	bne.n	800ea62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea54:	4618      	mov	r0, r3
 800ea56:	f001 f893 	bl	800fb80 <vPortFree>
				vPortFree( pxTCB );
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f001 f890 	bl	800fb80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ea60:	e018      	b.n	800ea94 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d103      	bne.n	800ea74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f001 f887 	bl	800fb80 <vPortFree>
	}
 800ea72:	e00f      	b.n	800ea94 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ea7a:	2b02      	cmp	r3, #2
 800ea7c:	d00a      	beq.n	800ea94 <prvDeleteTCB+0x60>
	__asm volatile
 800ea7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea82:	f383 8811 	msr	BASEPRI, r3
 800ea86:	f3bf 8f6f 	isb	sy
 800ea8a:	f3bf 8f4f 	dsb	sy
 800ea8e:	60fb      	str	r3, [r7, #12]
}
 800ea90:	bf00      	nop
 800ea92:	e7fe      	b.n	800ea92 <prvDeleteTCB+0x5e>
	}
 800ea94:	bf00      	nop
 800ea96:	3710      	adds	r7, #16
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eaa2:	4b0c      	ldr	r3, [pc, #48]	; (800ead4 <prvResetNextTaskUnblockTime+0x38>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d104      	bne.n	800eab6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eaac:	4b0a      	ldr	r3, [pc, #40]	; (800ead8 <prvResetNextTaskUnblockTime+0x3c>)
 800eaae:	f04f 32ff 	mov.w	r2, #4294967295
 800eab2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eab4:	e008      	b.n	800eac8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eab6:	4b07      	ldr	r3, [pc, #28]	; (800ead4 <prvResetNextTaskUnblockTime+0x38>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	68db      	ldr	r3, [r3, #12]
 800eabc:	68db      	ldr	r3, [r3, #12]
 800eabe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	4a04      	ldr	r2, [pc, #16]	; (800ead8 <prvResetNextTaskUnblockTime+0x3c>)
 800eac6:	6013      	str	r3, [r2, #0]
}
 800eac8:	bf00      	nop
 800eaca:	370c      	adds	r7, #12
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr
 800ead4:	200011e4 	.word	0x200011e4
 800ead8:	2000124c 	.word	0x2000124c

0800eadc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800eae2:	4b05      	ldr	r3, [pc, #20]	; (800eaf8 <xTaskGetCurrentTaskHandle+0x1c>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800eae8:	687b      	ldr	r3, [r7, #4]
	}
 800eaea:	4618      	mov	r0, r3
 800eaec:	370c      	adds	r7, #12
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop
 800eaf8:	20000d58 	.word	0x20000d58

0800eafc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eafc:	b480      	push	{r7}
 800eafe:	b083      	sub	sp, #12
 800eb00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eb02:	4b0b      	ldr	r3, [pc, #44]	; (800eb30 <xTaskGetSchedulerState+0x34>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d102      	bne.n	800eb10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	607b      	str	r3, [r7, #4]
 800eb0e:	e008      	b.n	800eb22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb10:	4b08      	ldr	r3, [pc, #32]	; (800eb34 <xTaskGetSchedulerState+0x38>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d102      	bne.n	800eb1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb18:	2302      	movs	r3, #2
 800eb1a:	607b      	str	r3, [r7, #4]
 800eb1c:	e001      	b.n	800eb22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb22:	687b      	ldr	r3, [r7, #4]
	}
 800eb24:	4618      	mov	r0, r3
 800eb26:	370c      	adds	r7, #12
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr
 800eb30:	20001238 	.word	0x20001238
 800eb34:	20001254 	.word	0x20001254

0800eb38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eb44:	2300      	movs	r3, #0
 800eb46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d051      	beq.n	800ebf2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb52:	4b2a      	ldr	r3, [pc, #168]	; (800ebfc <xTaskPriorityInherit+0xc4>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d241      	bcs.n	800ebe0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	699b      	ldr	r3, [r3, #24]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	db06      	blt.n	800eb72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb64:	4b25      	ldr	r3, [pc, #148]	; (800ebfc <xTaskPriorityInherit+0xc4>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	6959      	ldr	r1, [r3, #20]
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb7a:	4613      	mov	r3, r2
 800eb7c:	009b      	lsls	r3, r3, #2
 800eb7e:	4413      	add	r3, r2
 800eb80:	009b      	lsls	r3, r3, #2
 800eb82:	4a1f      	ldr	r2, [pc, #124]	; (800ec00 <xTaskPriorityInherit+0xc8>)
 800eb84:	4413      	add	r3, r2
 800eb86:	4299      	cmp	r1, r3
 800eb88:	d122      	bne.n	800ebd0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	3304      	adds	r3, #4
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7fe fa28 	bl	800cfe4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb94:	4b19      	ldr	r3, [pc, #100]	; (800ebfc <xTaskPriorityInherit+0xc4>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eba2:	4b18      	ldr	r3, [pc, #96]	; (800ec04 <xTaskPriorityInherit+0xcc>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d903      	bls.n	800ebb2 <xTaskPriorityInherit+0x7a>
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebae:	4a15      	ldr	r2, [pc, #84]	; (800ec04 <xTaskPriorityInherit+0xcc>)
 800ebb0:	6013      	str	r3, [r2, #0]
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	4413      	add	r3, r2
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	4a10      	ldr	r2, [pc, #64]	; (800ec00 <xTaskPriorityInherit+0xc8>)
 800ebc0:	441a      	add	r2, r3
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	3304      	adds	r3, #4
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	4610      	mov	r0, r2
 800ebca:	f7fe f9ae 	bl	800cf2a <vListInsertEnd>
 800ebce:	e004      	b.n	800ebda <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ebd0:	4b0a      	ldr	r3, [pc, #40]	; (800ebfc <xTaskPriorityInherit+0xc4>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	60fb      	str	r3, [r7, #12]
 800ebde:	e008      	b.n	800ebf2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebe4:	4b05      	ldr	r3, [pc, #20]	; (800ebfc <xTaskPriorityInherit+0xc4>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d201      	bcs.n	800ebf2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
	}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3710      	adds	r7, #16
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	20000d58 	.word	0x20000d58
 800ec00:	20000d5c 	.word	0x20000d5c
 800ec04:	20001234 	.word	0x20001234

0800ec08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b086      	sub	sp, #24
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ec14:	2300      	movs	r3, #0
 800ec16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d056      	beq.n	800eccc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ec1e:	4b2e      	ldr	r3, [pc, #184]	; (800ecd8 <xTaskPriorityDisinherit+0xd0>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	693a      	ldr	r2, [r7, #16]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d00a      	beq.n	800ec3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ec28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec2c:	f383 8811 	msr	BASEPRI, r3
 800ec30:	f3bf 8f6f 	isb	sy
 800ec34:	f3bf 8f4f 	dsb	sy
 800ec38:	60fb      	str	r3, [r7, #12]
}
 800ec3a:	bf00      	nop
 800ec3c:	e7fe      	b.n	800ec3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d10a      	bne.n	800ec5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ec46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec4a:	f383 8811 	msr	BASEPRI, r3
 800ec4e:	f3bf 8f6f 	isb	sy
 800ec52:	f3bf 8f4f 	dsb	sy
 800ec56:	60bb      	str	r3, [r7, #8]
}
 800ec58:	bf00      	nop
 800ec5a:	e7fe      	b.n	800ec5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec60:	1e5a      	subs	r2, r3, #1
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d02c      	beq.n	800eccc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d128      	bne.n	800eccc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7fe f9b0 	bl	800cfe4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec9c:	4b0f      	ldr	r3, [pc, #60]	; (800ecdc <xTaskPriorityDisinherit+0xd4>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d903      	bls.n	800ecac <xTaskPriorityDisinherit+0xa4>
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eca8:	4a0c      	ldr	r2, [pc, #48]	; (800ecdc <xTaskPriorityDisinherit+0xd4>)
 800ecaa:	6013      	str	r3, [r2, #0]
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecb0:	4613      	mov	r3, r2
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	4413      	add	r3, r2
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	4a09      	ldr	r2, [pc, #36]	; (800ece0 <xTaskPriorityDisinherit+0xd8>)
 800ecba:	441a      	add	r2, r3
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	3304      	adds	r3, #4
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	4610      	mov	r0, r2
 800ecc4:	f7fe f931 	bl	800cf2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ecc8:	2301      	movs	r3, #1
 800ecca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eccc:	697b      	ldr	r3, [r7, #20]
	}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3718      	adds	r7, #24
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	20000d58 	.word	0x20000d58
 800ecdc:	20001234 	.word	0x20001234
 800ece0:	20000d5c 	.word	0x20000d5c

0800ece4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b088      	sub	sp, #32
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d06a      	beq.n	800edd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d10a      	bne.n	800ed1a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ed04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed08:	f383 8811 	msr	BASEPRI, r3
 800ed0c:	f3bf 8f6f 	isb	sy
 800ed10:	f3bf 8f4f 	dsb	sy
 800ed14:	60fb      	str	r3, [r7, #12]
}
 800ed16:	bf00      	nop
 800ed18:	e7fe      	b.n	800ed18 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed1e:	683a      	ldr	r2, [r7, #0]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d902      	bls.n	800ed2a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	61fb      	str	r3, [r7, #28]
 800ed28:	e002      	b.n	800ed30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ed2a:	69bb      	ldr	r3, [r7, #24]
 800ed2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed2e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ed30:	69bb      	ldr	r3, [r7, #24]
 800ed32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed34:	69fa      	ldr	r2, [r7, #28]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d04b      	beq.n	800edd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed3e:	697a      	ldr	r2, [r7, #20]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d146      	bne.n	800edd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ed44:	4b25      	ldr	r3, [pc, #148]	; (800eddc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	69ba      	ldr	r2, [r7, #24]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d10a      	bne.n	800ed64 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ed4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed52:	f383 8811 	msr	BASEPRI, r3
 800ed56:	f3bf 8f6f 	isb	sy
 800ed5a:	f3bf 8f4f 	dsb	sy
 800ed5e:	60bb      	str	r3, [r7, #8]
}
 800ed60:	bf00      	nop
 800ed62:	e7fe      	b.n	800ed62 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ed64:	69bb      	ldr	r3, [r7, #24]
 800ed66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed68:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	69fa      	ldr	r2, [r7, #28]
 800ed6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	699b      	ldr	r3, [r3, #24]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	db04      	blt.n	800ed82 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed78:	69fb      	ldr	r3, [r7, #28]
 800ed7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed7e:	69bb      	ldr	r3, [r7, #24]
 800ed80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed82:	69bb      	ldr	r3, [r7, #24]
 800ed84:	6959      	ldr	r1, [r3, #20]
 800ed86:	693a      	ldr	r2, [r7, #16]
 800ed88:	4613      	mov	r3, r2
 800ed8a:	009b      	lsls	r3, r3, #2
 800ed8c:	4413      	add	r3, r2
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	4a13      	ldr	r2, [pc, #76]	; (800ede0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ed92:	4413      	add	r3, r2
 800ed94:	4299      	cmp	r1, r3
 800ed96:	d11c      	bne.n	800edd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	3304      	adds	r3, #4
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fe f921 	bl	800cfe4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eda2:	69bb      	ldr	r3, [r7, #24]
 800eda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eda6:	4b0f      	ldr	r3, [pc, #60]	; (800ede4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d903      	bls.n	800edb6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edb2:	4a0c      	ldr	r2, [pc, #48]	; (800ede4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800edb4:	6013      	str	r3, [r2, #0]
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edba:	4613      	mov	r3, r2
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	4413      	add	r3, r2
 800edc0:	009b      	lsls	r3, r3, #2
 800edc2:	4a07      	ldr	r2, [pc, #28]	; (800ede0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800edc4:	441a      	add	r2, r3
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	3304      	adds	r3, #4
 800edca:	4619      	mov	r1, r3
 800edcc:	4610      	mov	r0, r2
 800edce:	f7fe f8ac 	bl	800cf2a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800edd2:	bf00      	nop
 800edd4:	3720      	adds	r7, #32
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	20000d58 	.word	0x20000d58
 800ede0:	20000d5c 	.word	0x20000d5c
 800ede4:	20001234 	.word	0x20001234

0800ede8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ede8:	b480      	push	{r7}
 800edea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800edec:	4b07      	ldr	r3, [pc, #28]	; (800ee0c <pvTaskIncrementMutexHeldCount+0x24>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d004      	beq.n	800edfe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800edf4:	4b05      	ldr	r3, [pc, #20]	; (800ee0c <pvTaskIncrementMutexHeldCount+0x24>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edfa:	3201      	adds	r2, #1
 800edfc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800edfe:	4b03      	ldr	r3, [pc, #12]	; (800ee0c <pvTaskIncrementMutexHeldCount+0x24>)
 800ee00:	681b      	ldr	r3, [r3, #0]
	}
 800ee02:	4618      	mov	r0, r3
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr
 800ee0c:	20000d58 	.word	0x20000d58

0800ee10 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ee1a:	4b21      	ldr	r3, [pc, #132]	; (800eea0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee20:	4b20      	ldr	r3, [pc, #128]	; (800eea4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	3304      	adds	r3, #4
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7fe f8dc 	bl	800cfe4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee32:	d10a      	bne.n	800ee4a <prvAddCurrentTaskToDelayedList+0x3a>
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d007      	beq.n	800ee4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee3a:	4b1a      	ldr	r3, [pc, #104]	; (800eea4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	3304      	adds	r3, #4
 800ee40:	4619      	mov	r1, r3
 800ee42:	4819      	ldr	r0, [pc, #100]	; (800eea8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ee44:	f7fe f871 	bl	800cf2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ee48:	e026      	b.n	800ee98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ee4a:	68fa      	ldr	r2, [r7, #12]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	4413      	add	r3, r2
 800ee50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee52:	4b14      	ldr	r3, [pc, #80]	; (800eea4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	68ba      	ldr	r2, [r7, #8]
 800ee58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee5a:	68ba      	ldr	r2, [r7, #8]
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d209      	bcs.n	800ee76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee62:	4b12      	ldr	r3, [pc, #72]	; (800eeac <prvAddCurrentTaskToDelayedList+0x9c>)
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	4b0f      	ldr	r3, [pc, #60]	; (800eea4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	3304      	adds	r3, #4
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	4610      	mov	r0, r2
 800ee70:	f7fe f87f 	bl	800cf72 <vListInsert>
}
 800ee74:	e010      	b.n	800ee98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee76:	4b0e      	ldr	r3, [pc, #56]	; (800eeb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	4b0a      	ldr	r3, [pc, #40]	; (800eea4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	3304      	adds	r3, #4
 800ee80:	4619      	mov	r1, r3
 800ee82:	4610      	mov	r0, r2
 800ee84:	f7fe f875 	bl	800cf72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee88:	4b0a      	ldr	r3, [pc, #40]	; (800eeb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	68ba      	ldr	r2, [r7, #8]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d202      	bcs.n	800ee98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ee92:	4a08      	ldr	r2, [pc, #32]	; (800eeb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	6013      	str	r3, [r2, #0]
}
 800ee98:	bf00      	nop
 800ee9a:	3710      	adds	r7, #16
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}
 800eea0:	20001230 	.word	0x20001230
 800eea4:	20000d58 	.word	0x20000d58
 800eea8:	20001218 	.word	0x20001218
 800eeac:	200011e8 	.word	0x200011e8
 800eeb0:	200011e4 	.word	0x200011e4
 800eeb4:	2000124c 	.word	0x2000124c

0800eeb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b08a      	sub	sp, #40	; 0x28
 800eebc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eebe:	2300      	movs	r3, #0
 800eec0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eec2:	f000 fb07 	bl	800f4d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800eec6:	4b1c      	ldr	r3, [pc, #112]	; (800ef38 <xTimerCreateTimerTask+0x80>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d021      	beq.n	800ef12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eece:	2300      	movs	r3, #0
 800eed0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eed2:	2300      	movs	r3, #0
 800eed4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eed6:	1d3a      	adds	r2, r7, #4
 800eed8:	f107 0108 	add.w	r1, r7, #8
 800eedc:	f107 030c 	add.w	r3, r7, #12
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7fd ffdb 	bl	800ce9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eee6:	6879      	ldr	r1, [r7, #4]
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	68fa      	ldr	r2, [r7, #12]
 800eeec:	9202      	str	r2, [sp, #8]
 800eeee:	9301      	str	r3, [sp, #4]
 800eef0:	2302      	movs	r3, #2
 800eef2:	9300      	str	r3, [sp, #0]
 800eef4:	2300      	movs	r3, #0
 800eef6:	460a      	mov	r2, r1
 800eef8:	4910      	ldr	r1, [pc, #64]	; (800ef3c <xTimerCreateTimerTask+0x84>)
 800eefa:	4811      	ldr	r0, [pc, #68]	; (800ef40 <xTimerCreateTimerTask+0x88>)
 800eefc:	f7fe ff34 	bl	800dd68 <xTaskCreateStatic>
 800ef00:	4603      	mov	r3, r0
 800ef02:	4a10      	ldr	r2, [pc, #64]	; (800ef44 <xTimerCreateTimerTask+0x8c>)
 800ef04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ef06:	4b0f      	ldr	r3, [pc, #60]	; (800ef44 <xTimerCreateTimerTask+0x8c>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d001      	beq.n	800ef12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d10a      	bne.n	800ef2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ef18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef1c:	f383 8811 	msr	BASEPRI, r3
 800ef20:	f3bf 8f6f 	isb	sy
 800ef24:	f3bf 8f4f 	dsb	sy
 800ef28:	613b      	str	r3, [r7, #16]
}
 800ef2a:	bf00      	nop
 800ef2c:	e7fe      	b.n	800ef2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ef2e:	697b      	ldr	r3, [r7, #20]
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3718      	adds	r7, #24
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}
 800ef38:	20001288 	.word	0x20001288
 800ef3c:	08015d2c 	.word	0x08015d2c
 800ef40:	0800f07d 	.word	0x0800f07d
 800ef44:	2000128c 	.word	0x2000128c

0800ef48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b08a      	sub	sp, #40	; 0x28
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	60b9      	str	r1, [r7, #8]
 800ef52:	607a      	str	r2, [r7, #4]
 800ef54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ef56:	2300      	movs	r3, #0
 800ef58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d10a      	bne.n	800ef76 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ef60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef64:	f383 8811 	msr	BASEPRI, r3
 800ef68:	f3bf 8f6f 	isb	sy
 800ef6c:	f3bf 8f4f 	dsb	sy
 800ef70:	623b      	str	r3, [r7, #32]
}
 800ef72:	bf00      	nop
 800ef74:	e7fe      	b.n	800ef74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ef76:	4b1a      	ldr	r3, [pc, #104]	; (800efe0 <xTimerGenericCommand+0x98>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d02a      	beq.n	800efd4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	2b05      	cmp	r3, #5
 800ef8e:	dc18      	bgt.n	800efc2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef90:	f7ff fdb4 	bl	800eafc <xTaskGetSchedulerState>
 800ef94:	4603      	mov	r3, r0
 800ef96:	2b02      	cmp	r3, #2
 800ef98:	d109      	bne.n	800efae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ef9a:	4b11      	ldr	r3, [pc, #68]	; (800efe0 <xTimerGenericCommand+0x98>)
 800ef9c:	6818      	ldr	r0, [r3, #0]
 800ef9e:	f107 0110 	add.w	r1, r7, #16
 800efa2:	2300      	movs	r3, #0
 800efa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efa6:	f7fe f9d7 	bl	800d358 <xQueueGenericSend>
 800efaa:	6278      	str	r0, [r7, #36]	; 0x24
 800efac:	e012      	b.n	800efd4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800efae:	4b0c      	ldr	r3, [pc, #48]	; (800efe0 <xTimerGenericCommand+0x98>)
 800efb0:	6818      	ldr	r0, [r3, #0]
 800efb2:	f107 0110 	add.w	r1, r7, #16
 800efb6:	2300      	movs	r3, #0
 800efb8:	2200      	movs	r2, #0
 800efba:	f7fe f9cd 	bl	800d358 <xQueueGenericSend>
 800efbe:	6278      	str	r0, [r7, #36]	; 0x24
 800efc0:	e008      	b.n	800efd4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800efc2:	4b07      	ldr	r3, [pc, #28]	; (800efe0 <xTimerGenericCommand+0x98>)
 800efc4:	6818      	ldr	r0, [r3, #0]
 800efc6:	f107 0110 	add.w	r1, r7, #16
 800efca:	2300      	movs	r3, #0
 800efcc:	683a      	ldr	r2, [r7, #0]
 800efce:	f7fe fac1 	bl	800d554 <xQueueGenericSendFromISR>
 800efd2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3728      	adds	r7, #40	; 0x28
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	20001288 	.word	0x20001288

0800efe4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b088      	sub	sp, #32
 800efe8:	af02      	add	r7, sp, #8
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efee:	4b22      	ldr	r3, [pc, #136]	; (800f078 <prvProcessExpiredTimer+0x94>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	68db      	ldr	r3, [r3, #12]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	3304      	adds	r3, #4
 800effc:	4618      	mov	r0, r3
 800effe:	f7fd fff1 	bl	800cfe4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f008:	f003 0304 	and.w	r3, r3, #4
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d022      	beq.n	800f056 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	699a      	ldr	r2, [r3, #24]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	18d1      	adds	r1, r2, r3
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	683a      	ldr	r2, [r7, #0]
 800f01c:	6978      	ldr	r0, [r7, #20]
 800f01e:	f000 f8d1 	bl	800f1c4 <prvInsertTimerInActiveList>
 800f022:	4603      	mov	r3, r0
 800f024:	2b00      	cmp	r3, #0
 800f026:	d01f      	beq.n	800f068 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f028:	2300      	movs	r3, #0
 800f02a:	9300      	str	r3, [sp, #0]
 800f02c:	2300      	movs	r3, #0
 800f02e:	687a      	ldr	r2, [r7, #4]
 800f030:	2100      	movs	r1, #0
 800f032:	6978      	ldr	r0, [r7, #20]
 800f034:	f7ff ff88 	bl	800ef48 <xTimerGenericCommand>
 800f038:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d113      	bne.n	800f068 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f044:	f383 8811 	msr	BASEPRI, r3
 800f048:	f3bf 8f6f 	isb	sy
 800f04c:	f3bf 8f4f 	dsb	sy
 800f050:	60fb      	str	r3, [r7, #12]
}
 800f052:	bf00      	nop
 800f054:	e7fe      	b.n	800f054 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f05c:	f023 0301 	bic.w	r3, r3, #1
 800f060:	b2da      	uxtb	r2, r3
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	6a1b      	ldr	r3, [r3, #32]
 800f06c:	6978      	ldr	r0, [r7, #20]
 800f06e:	4798      	blx	r3
}
 800f070:	bf00      	nop
 800f072:	3718      	adds	r7, #24
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}
 800f078:	20001280 	.word	0x20001280

0800f07c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b084      	sub	sp, #16
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f084:	f107 0308 	add.w	r3, r7, #8
 800f088:	4618      	mov	r0, r3
 800f08a:	f000 f857 	bl	800f13c <prvGetNextExpireTime>
 800f08e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	4619      	mov	r1, r3
 800f094:	68f8      	ldr	r0, [r7, #12]
 800f096:	f000 f803 	bl	800f0a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f09a:	f000 f8d5 	bl	800f248 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f09e:	e7f1      	b.n	800f084 <prvTimerTask+0x8>

0800f0a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b084      	sub	sp, #16
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f0aa:	f7ff f92b 	bl	800e304 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f0ae:	f107 0308 	add.w	r3, r7, #8
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f000 f866 	bl	800f184 <prvSampleTimeNow>
 800f0b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d130      	bne.n	800f122 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d10a      	bne.n	800f0dc <prvProcessTimerOrBlockTask+0x3c>
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d806      	bhi.n	800f0dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f0ce:	f7ff f927 	bl	800e320 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f0d2:	68f9      	ldr	r1, [r7, #12]
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f7ff ff85 	bl	800efe4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f0da:	e024      	b.n	800f126 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d008      	beq.n	800f0f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f0e2:	4b13      	ldr	r3, [pc, #76]	; (800f130 <prvProcessTimerOrBlockTask+0x90>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d101      	bne.n	800f0f0 <prvProcessTimerOrBlockTask+0x50>
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	e000      	b.n	800f0f2 <prvProcessTimerOrBlockTask+0x52>
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f0f4:	4b0f      	ldr	r3, [pc, #60]	; (800f134 <prvProcessTimerOrBlockTask+0x94>)
 800f0f6:	6818      	ldr	r0, [r3, #0]
 800f0f8:	687a      	ldr	r2, [r7, #4]
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	1ad3      	subs	r3, r2, r3
 800f0fe:	683a      	ldr	r2, [r7, #0]
 800f100:	4619      	mov	r1, r3
 800f102:	f7fe fdfd 	bl	800dd00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f106:	f7ff f90b 	bl	800e320 <xTaskResumeAll>
 800f10a:	4603      	mov	r3, r0
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d10a      	bne.n	800f126 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f110:	4b09      	ldr	r3, [pc, #36]	; (800f138 <prvProcessTimerOrBlockTask+0x98>)
 800f112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f116:	601a      	str	r2, [r3, #0]
 800f118:	f3bf 8f4f 	dsb	sy
 800f11c:	f3bf 8f6f 	isb	sy
}
 800f120:	e001      	b.n	800f126 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f122:	f7ff f8fd 	bl	800e320 <xTaskResumeAll>
}
 800f126:	bf00      	nop
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	20001284 	.word	0x20001284
 800f134:	20001288 	.word	0x20001288
 800f138:	e000ed04 	.word	0xe000ed04

0800f13c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f13c:	b480      	push	{r7}
 800f13e:	b085      	sub	sp, #20
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f144:	4b0e      	ldr	r3, [pc, #56]	; (800f180 <prvGetNextExpireTime+0x44>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d101      	bne.n	800f152 <prvGetNextExpireTime+0x16>
 800f14e:	2201      	movs	r2, #1
 800f150:	e000      	b.n	800f154 <prvGetNextExpireTime+0x18>
 800f152:	2200      	movs	r2, #0
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d105      	bne.n	800f16c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f160:	4b07      	ldr	r3, [pc, #28]	; (800f180 <prvGetNextExpireTime+0x44>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	68db      	ldr	r3, [r3, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	60fb      	str	r3, [r7, #12]
 800f16a:	e001      	b.n	800f170 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f16c:	2300      	movs	r3, #0
 800f16e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f170:	68fb      	ldr	r3, [r7, #12]
}
 800f172:	4618      	mov	r0, r3
 800f174:	3714      	adds	r7, #20
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr
 800f17e:	bf00      	nop
 800f180:	20001280 	.word	0x20001280

0800f184 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f18c:	f7ff f966 	bl	800e45c <xTaskGetTickCount>
 800f190:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f192:	4b0b      	ldr	r3, [pc, #44]	; (800f1c0 <prvSampleTimeNow+0x3c>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	68fa      	ldr	r2, [r7, #12]
 800f198:	429a      	cmp	r2, r3
 800f19a:	d205      	bcs.n	800f1a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f19c:	f000 f936 	bl	800f40c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	601a      	str	r2, [r3, #0]
 800f1a6:	e002      	b.n	800f1ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f1ae:	4a04      	ldr	r2, [pc, #16]	; (800f1c0 <prvSampleTimeNow+0x3c>)
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3710      	adds	r7, #16
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	20001290 	.word	0x20001290

0800f1c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b086      	sub	sp, #24
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	607a      	str	r2, [r7, #4]
 800f1d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	68fa      	ldr	r2, [r7, #12]
 800f1e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f1e2:	68ba      	ldr	r2, [r7, #8]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d812      	bhi.n	800f210 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1ea:	687a      	ldr	r2, [r7, #4]
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	1ad2      	subs	r2, r2, r3
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	699b      	ldr	r3, [r3, #24]
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d302      	bcc.n	800f1fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	617b      	str	r3, [r7, #20]
 800f1fc:	e01b      	b.n	800f236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f1fe:	4b10      	ldr	r3, [pc, #64]	; (800f240 <prvInsertTimerInActiveList+0x7c>)
 800f200:	681a      	ldr	r2, [r3, #0]
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	3304      	adds	r3, #4
 800f206:	4619      	mov	r1, r3
 800f208:	4610      	mov	r0, r2
 800f20a:	f7fd feb2 	bl	800cf72 <vListInsert>
 800f20e:	e012      	b.n	800f236 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f210:	687a      	ldr	r2, [r7, #4]
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	429a      	cmp	r2, r3
 800f216:	d206      	bcs.n	800f226 <prvInsertTimerInActiveList+0x62>
 800f218:	68ba      	ldr	r2, [r7, #8]
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d302      	bcc.n	800f226 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f220:	2301      	movs	r3, #1
 800f222:	617b      	str	r3, [r7, #20]
 800f224:	e007      	b.n	800f236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f226:	4b07      	ldr	r3, [pc, #28]	; (800f244 <prvInsertTimerInActiveList+0x80>)
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	3304      	adds	r3, #4
 800f22e:	4619      	mov	r1, r3
 800f230:	4610      	mov	r0, r2
 800f232:	f7fd fe9e 	bl	800cf72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f236:	697b      	ldr	r3, [r7, #20]
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3718      	adds	r7, #24
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	20001284 	.word	0x20001284
 800f244:	20001280 	.word	0x20001280

0800f248 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b08e      	sub	sp, #56	; 0x38
 800f24c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f24e:	e0ca      	b.n	800f3e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2b00      	cmp	r3, #0
 800f254:	da18      	bge.n	800f288 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f256:	1d3b      	adds	r3, r7, #4
 800f258:	3304      	adds	r3, #4
 800f25a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d10a      	bne.n	800f278 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f266:	f383 8811 	msr	BASEPRI, r3
 800f26a:	f3bf 8f6f 	isb	sy
 800f26e:	f3bf 8f4f 	dsb	sy
 800f272:	61fb      	str	r3, [r7, #28]
}
 800f274:	bf00      	nop
 800f276:	e7fe      	b.n	800f276 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f27e:	6850      	ldr	r0, [r2, #4]
 800f280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f282:	6892      	ldr	r2, [r2, #8]
 800f284:	4611      	mov	r1, r2
 800f286:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f2c0 80aa 	blt.w	800f3e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f296:	695b      	ldr	r3, [r3, #20]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d004      	beq.n	800f2a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29e:	3304      	adds	r3, #4
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7fd fe9f 	bl	800cfe4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2a6:	463b      	mov	r3, r7
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7ff ff6b 	bl	800f184 <prvSampleTimeNow>
 800f2ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2b09      	cmp	r3, #9
 800f2b4:	f200 8097 	bhi.w	800f3e6 <prvProcessReceivedCommands+0x19e>
 800f2b8:	a201      	add	r2, pc, #4	; (adr r2, 800f2c0 <prvProcessReceivedCommands+0x78>)
 800f2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2be:	bf00      	nop
 800f2c0:	0800f2e9 	.word	0x0800f2e9
 800f2c4:	0800f2e9 	.word	0x0800f2e9
 800f2c8:	0800f2e9 	.word	0x0800f2e9
 800f2cc:	0800f35d 	.word	0x0800f35d
 800f2d0:	0800f371 	.word	0x0800f371
 800f2d4:	0800f3bb 	.word	0x0800f3bb
 800f2d8:	0800f2e9 	.word	0x0800f2e9
 800f2dc:	0800f2e9 	.word	0x0800f2e9
 800f2e0:	0800f35d 	.word	0x0800f35d
 800f2e4:	0800f371 	.word	0x0800f371
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2ee:	f043 0301 	orr.w	r3, r3, #1
 800f2f2:	b2da      	uxtb	r2, r3
 800f2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f2fa:	68ba      	ldr	r2, [r7, #8]
 800f2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fe:	699b      	ldr	r3, [r3, #24]
 800f300:	18d1      	adds	r1, r2, r3
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f308:	f7ff ff5c 	bl	800f1c4 <prvInsertTimerInActiveList>
 800f30c:	4603      	mov	r3, r0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d069      	beq.n	800f3e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f314:	6a1b      	ldr	r3, [r3, #32]
 800f316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f318:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f320:	f003 0304 	and.w	r3, r3, #4
 800f324:	2b00      	cmp	r3, #0
 800f326:	d05e      	beq.n	800f3e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f328:	68ba      	ldr	r2, [r7, #8]
 800f32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32c:	699b      	ldr	r3, [r3, #24]
 800f32e:	441a      	add	r2, r3
 800f330:	2300      	movs	r3, #0
 800f332:	9300      	str	r3, [sp, #0]
 800f334:	2300      	movs	r3, #0
 800f336:	2100      	movs	r1, #0
 800f338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f33a:	f7ff fe05 	bl	800ef48 <xTimerGenericCommand>
 800f33e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f340:	6a3b      	ldr	r3, [r7, #32]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d14f      	bne.n	800f3e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f34a:	f383 8811 	msr	BASEPRI, r3
 800f34e:	f3bf 8f6f 	isb	sy
 800f352:	f3bf 8f4f 	dsb	sy
 800f356:	61bb      	str	r3, [r7, #24]
}
 800f358:	bf00      	nop
 800f35a:	e7fe      	b.n	800f35a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f362:	f023 0301 	bic.w	r3, r3, #1
 800f366:	b2da      	uxtb	r2, r3
 800f368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f36e:	e03a      	b.n	800f3e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f372:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f376:	f043 0301 	orr.w	r3, r3, #1
 800f37a:	b2da      	uxtb	r2, r3
 800f37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f382:	68ba      	ldr	r2, [r7, #8]
 800f384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f386:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38a:	699b      	ldr	r3, [r3, #24]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d10a      	bne.n	800f3a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f394:	f383 8811 	msr	BASEPRI, r3
 800f398:	f3bf 8f6f 	isb	sy
 800f39c:	f3bf 8f4f 	dsb	sy
 800f3a0:	617b      	str	r3, [r7, #20]
}
 800f3a2:	bf00      	nop
 800f3a4:	e7fe      	b.n	800f3a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a8:	699a      	ldr	r2, [r3, #24]
 800f3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ac:	18d1      	adds	r1, r2, r3
 800f3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3b4:	f7ff ff06 	bl	800f1c4 <prvInsertTimerInActiveList>
					break;
 800f3b8:	e015      	b.n	800f3e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3c0:	f003 0302 	and.w	r3, r3, #2
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d103      	bne.n	800f3d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f3c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3ca:	f000 fbd9 	bl	800fb80 <vPortFree>
 800f3ce:	e00a      	b.n	800f3e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3d6:	f023 0301 	bic.w	r3, r3, #1
 800f3da:	b2da      	uxtb	r2, r3
 800f3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f3e2:	e000      	b.n	800f3e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f3e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f3e6:	4b08      	ldr	r3, [pc, #32]	; (800f408 <prvProcessReceivedCommands+0x1c0>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	1d39      	adds	r1, r7, #4
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fe f948 	bl	800d684 <xQueueReceive>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	f47f af2a 	bne.w	800f250 <prvProcessReceivedCommands+0x8>
	}
}
 800f3fc:	bf00      	nop
 800f3fe:	bf00      	nop
 800f400:	3730      	adds	r7, #48	; 0x30
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	20001288 	.word	0x20001288

0800f40c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b088      	sub	sp, #32
 800f410:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f412:	e048      	b.n	800f4a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f414:	4b2d      	ldr	r3, [pc, #180]	; (800f4cc <prvSwitchTimerLists+0xc0>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	68db      	ldr	r3, [r3, #12]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f41e:	4b2b      	ldr	r3, [pc, #172]	; (800f4cc <prvSwitchTimerLists+0xc0>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	68db      	ldr	r3, [r3, #12]
 800f424:	68db      	ldr	r3, [r3, #12]
 800f426:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	3304      	adds	r3, #4
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7fd fdd9 	bl	800cfe4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	6a1b      	ldr	r3, [r3, #32]
 800f436:	68f8      	ldr	r0, [r7, #12]
 800f438:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f440:	f003 0304 	and.w	r3, r3, #4
 800f444:	2b00      	cmp	r3, #0
 800f446:	d02e      	beq.n	800f4a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	699b      	ldr	r3, [r3, #24]
 800f44c:	693a      	ldr	r2, [r7, #16]
 800f44e:	4413      	add	r3, r2
 800f450:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f452:	68ba      	ldr	r2, [r7, #8]
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	429a      	cmp	r2, r3
 800f458:	d90e      	bls.n	800f478 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	68ba      	ldr	r2, [r7, #8]
 800f45e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	68fa      	ldr	r2, [r7, #12]
 800f464:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f466:	4b19      	ldr	r3, [pc, #100]	; (800f4cc <prvSwitchTimerLists+0xc0>)
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	3304      	adds	r3, #4
 800f46e:	4619      	mov	r1, r3
 800f470:	4610      	mov	r0, r2
 800f472:	f7fd fd7e 	bl	800cf72 <vListInsert>
 800f476:	e016      	b.n	800f4a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f478:	2300      	movs	r3, #0
 800f47a:	9300      	str	r3, [sp, #0]
 800f47c:	2300      	movs	r3, #0
 800f47e:	693a      	ldr	r2, [r7, #16]
 800f480:	2100      	movs	r1, #0
 800f482:	68f8      	ldr	r0, [r7, #12]
 800f484:	f7ff fd60 	bl	800ef48 <xTimerGenericCommand>
 800f488:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d10a      	bne.n	800f4a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f494:	f383 8811 	msr	BASEPRI, r3
 800f498:	f3bf 8f6f 	isb	sy
 800f49c:	f3bf 8f4f 	dsb	sy
 800f4a0:	603b      	str	r3, [r7, #0]
}
 800f4a2:	bf00      	nop
 800f4a4:	e7fe      	b.n	800f4a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f4a6:	4b09      	ldr	r3, [pc, #36]	; (800f4cc <prvSwitchTimerLists+0xc0>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d1b1      	bne.n	800f414 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f4b0:	4b06      	ldr	r3, [pc, #24]	; (800f4cc <prvSwitchTimerLists+0xc0>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f4b6:	4b06      	ldr	r3, [pc, #24]	; (800f4d0 <prvSwitchTimerLists+0xc4>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	4a04      	ldr	r2, [pc, #16]	; (800f4cc <prvSwitchTimerLists+0xc0>)
 800f4bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f4be:	4a04      	ldr	r2, [pc, #16]	; (800f4d0 <prvSwitchTimerLists+0xc4>)
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	6013      	str	r3, [r2, #0]
}
 800f4c4:	bf00      	nop
 800f4c6:	3718      	adds	r7, #24
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	20001280 	.word	0x20001280
 800f4d0:	20001284 	.word	0x20001284

0800f4d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f4da:	f000 f96b 	bl	800f7b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f4de:	4b15      	ldr	r3, [pc, #84]	; (800f534 <prvCheckForValidListAndQueue+0x60>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d120      	bne.n	800f528 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f4e6:	4814      	ldr	r0, [pc, #80]	; (800f538 <prvCheckForValidListAndQueue+0x64>)
 800f4e8:	f7fd fcf2 	bl	800ced0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f4ec:	4813      	ldr	r0, [pc, #76]	; (800f53c <prvCheckForValidListAndQueue+0x68>)
 800f4ee:	f7fd fcef 	bl	800ced0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f4f2:	4b13      	ldr	r3, [pc, #76]	; (800f540 <prvCheckForValidListAndQueue+0x6c>)
 800f4f4:	4a10      	ldr	r2, [pc, #64]	; (800f538 <prvCheckForValidListAndQueue+0x64>)
 800f4f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f4f8:	4b12      	ldr	r3, [pc, #72]	; (800f544 <prvCheckForValidListAndQueue+0x70>)
 800f4fa:	4a10      	ldr	r2, [pc, #64]	; (800f53c <prvCheckForValidListAndQueue+0x68>)
 800f4fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f4fe:	2300      	movs	r3, #0
 800f500:	9300      	str	r3, [sp, #0]
 800f502:	4b11      	ldr	r3, [pc, #68]	; (800f548 <prvCheckForValidListAndQueue+0x74>)
 800f504:	4a11      	ldr	r2, [pc, #68]	; (800f54c <prvCheckForValidListAndQueue+0x78>)
 800f506:	2110      	movs	r1, #16
 800f508:	200a      	movs	r0, #10
 800f50a:	f7fd fdfd 	bl	800d108 <xQueueGenericCreateStatic>
 800f50e:	4603      	mov	r3, r0
 800f510:	4a08      	ldr	r2, [pc, #32]	; (800f534 <prvCheckForValidListAndQueue+0x60>)
 800f512:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f514:	4b07      	ldr	r3, [pc, #28]	; (800f534 <prvCheckForValidListAndQueue+0x60>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d005      	beq.n	800f528 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f51c:	4b05      	ldr	r3, [pc, #20]	; (800f534 <prvCheckForValidListAndQueue+0x60>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	490b      	ldr	r1, [pc, #44]	; (800f550 <prvCheckForValidListAndQueue+0x7c>)
 800f522:	4618      	mov	r0, r3
 800f524:	f7fe fbc2 	bl	800dcac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f528:	f000 f974 	bl	800f814 <vPortExitCritical>
}
 800f52c:	bf00      	nop
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	20001288 	.word	0x20001288
 800f538:	20001258 	.word	0x20001258
 800f53c:	2000126c 	.word	0x2000126c
 800f540:	20001280 	.word	0x20001280
 800f544:	20001284 	.word	0x20001284
 800f548:	20001334 	.word	0x20001334
 800f54c:	20001294 	.word	0x20001294
 800f550:	08015d34 	.word	0x08015d34

0800f554 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	3b04      	subs	r3, #4
 800f564:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f56c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	3b04      	subs	r3, #4
 800f572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	f023 0201 	bic.w	r2, r3, #1
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	3b04      	subs	r3, #4
 800f582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f584:	4a0c      	ldr	r2, [pc, #48]	; (800f5b8 <pxPortInitialiseStack+0x64>)
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	3b14      	subs	r3, #20
 800f58e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f590:	687a      	ldr	r2, [r7, #4]
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	3b04      	subs	r3, #4
 800f59a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f06f 0202 	mvn.w	r2, #2
 800f5a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	3b20      	subs	r3, #32
 800f5a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3714      	adds	r7, #20
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr
 800f5b8:	0800f5bd 	.word	0x0800f5bd

0800f5bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b085      	sub	sp, #20
 800f5c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f5c6:	4b12      	ldr	r3, [pc, #72]	; (800f610 <prvTaskExitError+0x54>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ce:	d00a      	beq.n	800f5e6 <prvTaskExitError+0x2a>
	__asm volatile
 800f5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d4:	f383 8811 	msr	BASEPRI, r3
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	f3bf 8f4f 	dsb	sy
 800f5e0:	60fb      	str	r3, [r7, #12]
}
 800f5e2:	bf00      	nop
 800f5e4:	e7fe      	b.n	800f5e4 <prvTaskExitError+0x28>
	__asm volatile
 800f5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ea:	f383 8811 	msr	BASEPRI, r3
 800f5ee:	f3bf 8f6f 	isb	sy
 800f5f2:	f3bf 8f4f 	dsb	sy
 800f5f6:	60bb      	str	r3, [r7, #8]
}
 800f5f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f5fa:	bf00      	nop
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d0fc      	beq.n	800f5fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f602:	bf00      	nop
 800f604:	bf00      	nop
 800f606:	3714      	adds	r7, #20
 800f608:	46bd      	mov	sp, r7
 800f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60e:	4770      	bx	lr
 800f610:	2000011c 	.word	0x2000011c
	...

0800f620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f620:	4b07      	ldr	r3, [pc, #28]	; (800f640 <pxCurrentTCBConst2>)
 800f622:	6819      	ldr	r1, [r3, #0]
 800f624:	6808      	ldr	r0, [r1, #0]
 800f626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f62a:	f380 8809 	msr	PSP, r0
 800f62e:	f3bf 8f6f 	isb	sy
 800f632:	f04f 0000 	mov.w	r0, #0
 800f636:	f380 8811 	msr	BASEPRI, r0
 800f63a:	4770      	bx	lr
 800f63c:	f3af 8000 	nop.w

0800f640 <pxCurrentTCBConst2>:
 800f640:	20000d58 	.word	0x20000d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f644:	bf00      	nop
 800f646:	bf00      	nop

0800f648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f648:	4808      	ldr	r0, [pc, #32]	; (800f66c <prvPortStartFirstTask+0x24>)
 800f64a:	6800      	ldr	r0, [r0, #0]
 800f64c:	6800      	ldr	r0, [r0, #0]
 800f64e:	f380 8808 	msr	MSP, r0
 800f652:	f04f 0000 	mov.w	r0, #0
 800f656:	f380 8814 	msr	CONTROL, r0
 800f65a:	b662      	cpsie	i
 800f65c:	b661      	cpsie	f
 800f65e:	f3bf 8f4f 	dsb	sy
 800f662:	f3bf 8f6f 	isb	sy
 800f666:	df00      	svc	0
 800f668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f66a:	bf00      	nop
 800f66c:	e000ed08 	.word	0xe000ed08

0800f670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b086      	sub	sp, #24
 800f674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f676:	4b46      	ldr	r3, [pc, #280]	; (800f790 <xPortStartScheduler+0x120>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	4a46      	ldr	r2, [pc, #280]	; (800f794 <xPortStartScheduler+0x124>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d10a      	bne.n	800f696 <xPortStartScheduler+0x26>
	__asm volatile
 800f680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f684:	f383 8811 	msr	BASEPRI, r3
 800f688:	f3bf 8f6f 	isb	sy
 800f68c:	f3bf 8f4f 	dsb	sy
 800f690:	613b      	str	r3, [r7, #16]
}
 800f692:	bf00      	nop
 800f694:	e7fe      	b.n	800f694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f696:	4b3e      	ldr	r3, [pc, #248]	; (800f790 <xPortStartScheduler+0x120>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4a3f      	ldr	r2, [pc, #252]	; (800f798 <xPortStartScheduler+0x128>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d10a      	bne.n	800f6b6 <xPortStartScheduler+0x46>
	__asm volatile
 800f6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a4:	f383 8811 	msr	BASEPRI, r3
 800f6a8:	f3bf 8f6f 	isb	sy
 800f6ac:	f3bf 8f4f 	dsb	sy
 800f6b0:	60fb      	str	r3, [r7, #12]
}
 800f6b2:	bf00      	nop
 800f6b4:	e7fe      	b.n	800f6b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f6b6:	4b39      	ldr	r3, [pc, #228]	; (800f79c <xPortStartScheduler+0x12c>)
 800f6b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	b2db      	uxtb	r3, r3
 800f6c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	22ff      	movs	r2, #255	; 0xff
 800f6c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f6d0:	78fb      	ldrb	r3, [r7, #3]
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f6d8:	b2da      	uxtb	r2, r3
 800f6da:	4b31      	ldr	r3, [pc, #196]	; (800f7a0 <xPortStartScheduler+0x130>)
 800f6dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f6de:	4b31      	ldr	r3, [pc, #196]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f6e0:	2207      	movs	r2, #7
 800f6e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6e4:	e009      	b.n	800f6fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f6e6:	4b2f      	ldr	r3, [pc, #188]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	3b01      	subs	r3, #1
 800f6ec:	4a2d      	ldr	r2, [pc, #180]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f6ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f6f0:	78fb      	ldrb	r3, [r7, #3]
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	005b      	lsls	r3, r3, #1
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6fa:	78fb      	ldrb	r3, [r7, #3]
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f702:	2b80      	cmp	r3, #128	; 0x80
 800f704:	d0ef      	beq.n	800f6e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f706:	4b27      	ldr	r3, [pc, #156]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f1c3 0307 	rsb	r3, r3, #7
 800f70e:	2b04      	cmp	r3, #4
 800f710:	d00a      	beq.n	800f728 <xPortStartScheduler+0xb8>
	__asm volatile
 800f712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f716:	f383 8811 	msr	BASEPRI, r3
 800f71a:	f3bf 8f6f 	isb	sy
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	60bb      	str	r3, [r7, #8]
}
 800f724:	bf00      	nop
 800f726:	e7fe      	b.n	800f726 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f728:	4b1e      	ldr	r3, [pc, #120]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	021b      	lsls	r3, r3, #8
 800f72e:	4a1d      	ldr	r2, [pc, #116]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f730:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f732:	4b1c      	ldr	r3, [pc, #112]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f73a:	4a1a      	ldr	r2, [pc, #104]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f73c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	b2da      	uxtb	r2, r3
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f746:	4b18      	ldr	r3, [pc, #96]	; (800f7a8 <xPortStartScheduler+0x138>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	4a17      	ldr	r2, [pc, #92]	; (800f7a8 <xPortStartScheduler+0x138>)
 800f74c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f752:	4b15      	ldr	r3, [pc, #84]	; (800f7a8 <xPortStartScheduler+0x138>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	4a14      	ldr	r2, [pc, #80]	; (800f7a8 <xPortStartScheduler+0x138>)
 800f758:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f75c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f75e:	f000 f8dd 	bl	800f91c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f762:	4b12      	ldr	r3, [pc, #72]	; (800f7ac <xPortStartScheduler+0x13c>)
 800f764:	2200      	movs	r2, #0
 800f766:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f768:	f000 f8fc 	bl	800f964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f76c:	4b10      	ldr	r3, [pc, #64]	; (800f7b0 <xPortStartScheduler+0x140>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4a0f      	ldr	r2, [pc, #60]	; (800f7b0 <xPortStartScheduler+0x140>)
 800f772:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f776:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f778:	f7ff ff66 	bl	800f648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f77c:	f7fe ff38 	bl	800e5f0 <vTaskSwitchContext>
	prvTaskExitError();
 800f780:	f7ff ff1c 	bl	800f5bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f784:	2300      	movs	r3, #0
}
 800f786:	4618      	mov	r0, r3
 800f788:	3718      	adds	r7, #24
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	e000ed00 	.word	0xe000ed00
 800f794:	410fc271 	.word	0x410fc271
 800f798:	410fc270 	.word	0x410fc270
 800f79c:	e000e400 	.word	0xe000e400
 800f7a0:	20001384 	.word	0x20001384
 800f7a4:	20001388 	.word	0x20001388
 800f7a8:	e000ed20 	.word	0xe000ed20
 800f7ac:	2000011c 	.word	0x2000011c
 800f7b0:	e000ef34 	.word	0xe000ef34

0800f7b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
	__asm volatile
 800f7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7be:	f383 8811 	msr	BASEPRI, r3
 800f7c2:	f3bf 8f6f 	isb	sy
 800f7c6:	f3bf 8f4f 	dsb	sy
 800f7ca:	607b      	str	r3, [r7, #4]
}
 800f7cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f7ce:	4b0f      	ldr	r3, [pc, #60]	; (800f80c <vPortEnterCritical+0x58>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	4a0d      	ldr	r2, [pc, #52]	; (800f80c <vPortEnterCritical+0x58>)
 800f7d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f7d8:	4b0c      	ldr	r3, [pc, #48]	; (800f80c <vPortEnterCritical+0x58>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	d10f      	bne.n	800f800 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f7e0:	4b0b      	ldr	r3, [pc, #44]	; (800f810 <vPortEnterCritical+0x5c>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	b2db      	uxtb	r3, r3
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d00a      	beq.n	800f800 <vPortEnterCritical+0x4c>
	__asm volatile
 800f7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ee:	f383 8811 	msr	BASEPRI, r3
 800f7f2:	f3bf 8f6f 	isb	sy
 800f7f6:	f3bf 8f4f 	dsb	sy
 800f7fa:	603b      	str	r3, [r7, #0]
}
 800f7fc:	bf00      	nop
 800f7fe:	e7fe      	b.n	800f7fe <vPortEnterCritical+0x4a>
	}
}
 800f800:	bf00      	nop
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr
 800f80c:	2000011c 	.word	0x2000011c
 800f810:	e000ed04 	.word	0xe000ed04

0800f814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f81a:	4b12      	ldr	r3, [pc, #72]	; (800f864 <vPortExitCritical+0x50>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d10a      	bne.n	800f838 <vPortExitCritical+0x24>
	__asm volatile
 800f822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f826:	f383 8811 	msr	BASEPRI, r3
 800f82a:	f3bf 8f6f 	isb	sy
 800f82e:	f3bf 8f4f 	dsb	sy
 800f832:	607b      	str	r3, [r7, #4]
}
 800f834:	bf00      	nop
 800f836:	e7fe      	b.n	800f836 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f838:	4b0a      	ldr	r3, [pc, #40]	; (800f864 <vPortExitCritical+0x50>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	3b01      	subs	r3, #1
 800f83e:	4a09      	ldr	r2, [pc, #36]	; (800f864 <vPortExitCritical+0x50>)
 800f840:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f842:	4b08      	ldr	r3, [pc, #32]	; (800f864 <vPortExitCritical+0x50>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d105      	bne.n	800f856 <vPortExitCritical+0x42>
 800f84a:	2300      	movs	r3, #0
 800f84c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	f383 8811 	msr	BASEPRI, r3
}
 800f854:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f856:	bf00      	nop
 800f858:	370c      	adds	r7, #12
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr
 800f862:	bf00      	nop
 800f864:	2000011c 	.word	0x2000011c
	...

0800f870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f870:	f3ef 8009 	mrs	r0, PSP
 800f874:	f3bf 8f6f 	isb	sy
 800f878:	4b15      	ldr	r3, [pc, #84]	; (800f8d0 <pxCurrentTCBConst>)
 800f87a:	681a      	ldr	r2, [r3, #0]
 800f87c:	f01e 0f10 	tst.w	lr, #16
 800f880:	bf08      	it	eq
 800f882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f88a:	6010      	str	r0, [r2, #0]
 800f88c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f890:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f894:	f380 8811 	msr	BASEPRI, r0
 800f898:	f3bf 8f4f 	dsb	sy
 800f89c:	f3bf 8f6f 	isb	sy
 800f8a0:	f7fe fea6 	bl	800e5f0 <vTaskSwitchContext>
 800f8a4:	f04f 0000 	mov.w	r0, #0
 800f8a8:	f380 8811 	msr	BASEPRI, r0
 800f8ac:	bc09      	pop	{r0, r3}
 800f8ae:	6819      	ldr	r1, [r3, #0]
 800f8b0:	6808      	ldr	r0, [r1, #0]
 800f8b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b6:	f01e 0f10 	tst.w	lr, #16
 800f8ba:	bf08      	it	eq
 800f8bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f8c0:	f380 8809 	msr	PSP, r0
 800f8c4:	f3bf 8f6f 	isb	sy
 800f8c8:	4770      	bx	lr
 800f8ca:	bf00      	nop
 800f8cc:	f3af 8000 	nop.w

0800f8d0 <pxCurrentTCBConst>:
 800f8d0:	20000d58 	.word	0x20000d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f8d4:	bf00      	nop
 800f8d6:	bf00      	nop

0800f8d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e2:	f383 8811 	msr	BASEPRI, r3
 800f8e6:	f3bf 8f6f 	isb	sy
 800f8ea:	f3bf 8f4f 	dsb	sy
 800f8ee:	607b      	str	r3, [r7, #4]
}
 800f8f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f8f2:	f7fe fdc3 	bl	800e47c <xTaskIncrementTick>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d003      	beq.n	800f904 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f8fc:	4b06      	ldr	r3, [pc, #24]	; (800f918 <SysTick_Handler+0x40>)
 800f8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f902:	601a      	str	r2, [r3, #0]
 800f904:	2300      	movs	r3, #0
 800f906:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	f383 8811 	msr	BASEPRI, r3
}
 800f90e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f910:	bf00      	nop
 800f912:	3708      	adds	r7, #8
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}
 800f918:	e000ed04 	.word	0xe000ed04

0800f91c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f91c:	b480      	push	{r7}
 800f91e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f920:	4b0b      	ldr	r3, [pc, #44]	; (800f950 <vPortSetupTimerInterrupt+0x34>)
 800f922:	2200      	movs	r2, #0
 800f924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f926:	4b0b      	ldr	r3, [pc, #44]	; (800f954 <vPortSetupTimerInterrupt+0x38>)
 800f928:	2200      	movs	r2, #0
 800f92a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f92c:	4b0a      	ldr	r3, [pc, #40]	; (800f958 <vPortSetupTimerInterrupt+0x3c>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a0a      	ldr	r2, [pc, #40]	; (800f95c <vPortSetupTimerInterrupt+0x40>)
 800f932:	fba2 2303 	umull	r2, r3, r2, r3
 800f936:	099b      	lsrs	r3, r3, #6
 800f938:	4a09      	ldr	r2, [pc, #36]	; (800f960 <vPortSetupTimerInterrupt+0x44>)
 800f93a:	3b01      	subs	r3, #1
 800f93c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f93e:	4b04      	ldr	r3, [pc, #16]	; (800f950 <vPortSetupTimerInterrupt+0x34>)
 800f940:	2207      	movs	r2, #7
 800f942:	601a      	str	r2, [r3, #0]
}
 800f944:	bf00      	nop
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr
 800f94e:	bf00      	nop
 800f950:	e000e010 	.word	0xe000e010
 800f954:	e000e018 	.word	0xe000e018
 800f958:	20000000 	.word	0x20000000
 800f95c:	10624dd3 	.word	0x10624dd3
 800f960:	e000e014 	.word	0xe000e014

0800f964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f974 <vPortEnableVFP+0x10>
 800f968:	6801      	ldr	r1, [r0, #0]
 800f96a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f96e:	6001      	str	r1, [r0, #0]
 800f970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f972:	bf00      	nop
 800f974:	e000ed88 	.word	0xe000ed88

0800f978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f978:	b480      	push	{r7}
 800f97a:	b085      	sub	sp, #20
 800f97c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f97e:	f3ef 8305 	mrs	r3, IPSR
 800f982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2b0f      	cmp	r3, #15
 800f988:	d914      	bls.n	800f9b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f98a:	4a17      	ldr	r2, [pc, #92]	; (800f9e8 <vPortValidateInterruptPriority+0x70>)
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	4413      	add	r3, r2
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f994:	4b15      	ldr	r3, [pc, #84]	; (800f9ec <vPortValidateInterruptPriority+0x74>)
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	7afa      	ldrb	r2, [r7, #11]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d20a      	bcs.n	800f9b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a2:	f383 8811 	msr	BASEPRI, r3
 800f9a6:	f3bf 8f6f 	isb	sy
 800f9aa:	f3bf 8f4f 	dsb	sy
 800f9ae:	607b      	str	r3, [r7, #4]
}
 800f9b0:	bf00      	nop
 800f9b2:	e7fe      	b.n	800f9b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f9b4:	4b0e      	ldr	r3, [pc, #56]	; (800f9f0 <vPortValidateInterruptPriority+0x78>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f9bc:	4b0d      	ldr	r3, [pc, #52]	; (800f9f4 <vPortValidateInterruptPriority+0x7c>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d90a      	bls.n	800f9da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c8:	f383 8811 	msr	BASEPRI, r3
 800f9cc:	f3bf 8f6f 	isb	sy
 800f9d0:	f3bf 8f4f 	dsb	sy
 800f9d4:	603b      	str	r3, [r7, #0]
}
 800f9d6:	bf00      	nop
 800f9d8:	e7fe      	b.n	800f9d8 <vPortValidateInterruptPriority+0x60>
	}
 800f9da:	bf00      	nop
 800f9dc:	3714      	adds	r7, #20
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop
 800f9e8:	e000e3f0 	.word	0xe000e3f0
 800f9ec:	20001384 	.word	0x20001384
 800f9f0:	e000ed0c 	.word	0xe000ed0c
 800f9f4:	20001388 	.word	0x20001388

0800f9f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b08a      	sub	sp, #40	; 0x28
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fa00:	2300      	movs	r3, #0
 800fa02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fa04:	f7fe fc7e 	bl	800e304 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fa08:	4b58      	ldr	r3, [pc, #352]	; (800fb6c <pvPortMalloc+0x174>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d101      	bne.n	800fa14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fa10:	f000 f910 	bl	800fc34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fa14:	4b56      	ldr	r3, [pc, #344]	; (800fb70 <pvPortMalloc+0x178>)
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	4013      	ands	r3, r2
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	f040 808e 	bne.w	800fb3e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d01d      	beq.n	800fa64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fa28:	2208      	movs	r2, #8
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4413      	add	r3, r2
 800fa2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f003 0307 	and.w	r3, r3, #7
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d014      	beq.n	800fa64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f023 0307 	bic.w	r3, r3, #7
 800fa40:	3308      	adds	r3, #8
 800fa42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f003 0307 	and.w	r3, r3, #7
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d00a      	beq.n	800fa64 <pvPortMalloc+0x6c>
	__asm volatile
 800fa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa52:	f383 8811 	msr	BASEPRI, r3
 800fa56:	f3bf 8f6f 	isb	sy
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	617b      	str	r3, [r7, #20]
}
 800fa60:	bf00      	nop
 800fa62:	e7fe      	b.n	800fa62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d069      	beq.n	800fb3e <pvPortMalloc+0x146>
 800fa6a:	4b42      	ldr	r3, [pc, #264]	; (800fb74 <pvPortMalloc+0x17c>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d864      	bhi.n	800fb3e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fa74:	4b40      	ldr	r3, [pc, #256]	; (800fb78 <pvPortMalloc+0x180>)
 800fa76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fa78:	4b3f      	ldr	r3, [pc, #252]	; (800fb78 <pvPortMalloc+0x180>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa7e:	e004      	b.n	800fa8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	687a      	ldr	r2, [r7, #4]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d903      	bls.n	800fa9c <pvPortMalloc+0xa4>
 800fa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d1f1      	bne.n	800fa80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fa9c:	4b33      	ldr	r3, [pc, #204]	; (800fb6c <pvPortMalloc+0x174>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d04b      	beq.n	800fb3e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800faa6:	6a3b      	ldr	r3, [r7, #32]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	2208      	movs	r2, #8
 800faac:	4413      	add	r3, r2
 800faae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	6a3b      	ldr	r3, [r7, #32]
 800fab6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faba:	685a      	ldr	r2, [r3, #4]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	1ad2      	subs	r2, r2, r3
 800fac0:	2308      	movs	r3, #8
 800fac2:	005b      	lsls	r3, r3, #1
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d91f      	bls.n	800fb08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	4413      	add	r3, r2
 800face:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fad0:	69bb      	ldr	r3, [r7, #24]
 800fad2:	f003 0307 	and.w	r3, r3, #7
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d00a      	beq.n	800faf0 <pvPortMalloc+0xf8>
	__asm volatile
 800fada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fade:	f383 8811 	msr	BASEPRI, r3
 800fae2:	f3bf 8f6f 	isb	sy
 800fae6:	f3bf 8f4f 	dsb	sy
 800faea:	613b      	str	r3, [r7, #16]
}
 800faec:	bf00      	nop
 800faee:	e7fe      	b.n	800faee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800faf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf2:	685a      	ldr	r2, [r3, #4]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	1ad2      	subs	r2, r2, r3
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafe:	687a      	ldr	r2, [r7, #4]
 800fb00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fb02:	69b8      	ldr	r0, [r7, #24]
 800fb04:	f000 f8f8 	bl	800fcf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb08:	4b1a      	ldr	r3, [pc, #104]	; (800fb74 <pvPortMalloc+0x17c>)
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	4a18      	ldr	r2, [pc, #96]	; (800fb74 <pvPortMalloc+0x17c>)
 800fb14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb16:	4b17      	ldr	r3, [pc, #92]	; (800fb74 <pvPortMalloc+0x17c>)
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	4b18      	ldr	r3, [pc, #96]	; (800fb7c <pvPortMalloc+0x184>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d203      	bcs.n	800fb2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb22:	4b14      	ldr	r3, [pc, #80]	; (800fb74 <pvPortMalloc+0x17c>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	4a15      	ldr	r2, [pc, #84]	; (800fb7c <pvPortMalloc+0x184>)
 800fb28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2c:	685a      	ldr	r2, [r3, #4]
 800fb2e:	4b10      	ldr	r3, [pc, #64]	; (800fb70 <pvPortMalloc+0x178>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	431a      	orrs	r2, r3
 800fb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fb3e:	f7fe fbef 	bl	800e320 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb42:	69fb      	ldr	r3, [r7, #28]
 800fb44:	f003 0307 	and.w	r3, r3, #7
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d00a      	beq.n	800fb62 <pvPortMalloc+0x16a>
	__asm volatile
 800fb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb50:	f383 8811 	msr	BASEPRI, r3
 800fb54:	f3bf 8f6f 	isb	sy
 800fb58:	f3bf 8f4f 	dsb	sy
 800fb5c:	60fb      	str	r3, [r7, #12]
}
 800fb5e:	bf00      	nop
 800fb60:	e7fe      	b.n	800fb60 <pvPortMalloc+0x168>
	return pvReturn;
 800fb62:	69fb      	ldr	r3, [r7, #28]
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3728      	adds	r7, #40	; 0x28
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}
 800fb6c:	20004f94 	.word	0x20004f94
 800fb70:	20004fa0 	.word	0x20004fa0
 800fb74:	20004f98 	.word	0x20004f98
 800fb78:	20004f8c 	.word	0x20004f8c
 800fb7c:	20004f9c 	.word	0x20004f9c

0800fb80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b086      	sub	sp, #24
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d048      	beq.n	800fc24 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fb92:	2308      	movs	r3, #8
 800fb94:	425b      	negs	r3, r3
 800fb96:	697a      	ldr	r2, [r7, #20]
 800fb98:	4413      	add	r3, r2
 800fb9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	685a      	ldr	r2, [r3, #4]
 800fba4:	4b21      	ldr	r3, [pc, #132]	; (800fc2c <vPortFree+0xac>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4013      	ands	r3, r2
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d10a      	bne.n	800fbc4 <vPortFree+0x44>
	__asm volatile
 800fbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb2:	f383 8811 	msr	BASEPRI, r3
 800fbb6:	f3bf 8f6f 	isb	sy
 800fbba:	f3bf 8f4f 	dsb	sy
 800fbbe:	60fb      	str	r3, [r7, #12]
}
 800fbc0:	bf00      	nop
 800fbc2:	e7fe      	b.n	800fbc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d00a      	beq.n	800fbe2 <vPortFree+0x62>
	__asm volatile
 800fbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd0:	f383 8811 	msr	BASEPRI, r3
 800fbd4:	f3bf 8f6f 	isb	sy
 800fbd8:	f3bf 8f4f 	dsb	sy
 800fbdc:	60bb      	str	r3, [r7, #8]
}
 800fbde:	bf00      	nop
 800fbe0:	e7fe      	b.n	800fbe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	685a      	ldr	r2, [r3, #4]
 800fbe6:	4b11      	ldr	r3, [pc, #68]	; (800fc2c <vPortFree+0xac>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	4013      	ands	r3, r2
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d019      	beq.n	800fc24 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d115      	bne.n	800fc24 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	685a      	ldr	r2, [r3, #4]
 800fbfc:	4b0b      	ldr	r3, [pc, #44]	; (800fc2c <vPortFree+0xac>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	43db      	mvns	r3, r3
 800fc02:	401a      	ands	r2, r3
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fc08:	f7fe fb7c 	bl	800e304 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	685a      	ldr	r2, [r3, #4]
 800fc10:	4b07      	ldr	r3, [pc, #28]	; (800fc30 <vPortFree+0xb0>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4413      	add	r3, r2
 800fc16:	4a06      	ldr	r2, [pc, #24]	; (800fc30 <vPortFree+0xb0>)
 800fc18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc1a:	6938      	ldr	r0, [r7, #16]
 800fc1c:	f000 f86c 	bl	800fcf8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fc20:	f7fe fb7e 	bl	800e320 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fc24:	bf00      	nop
 800fc26:	3718      	adds	r7, #24
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	20004fa0 	.word	0x20004fa0
 800fc30:	20004f98 	.word	0x20004f98

0800fc34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fc34:	b480      	push	{r7}
 800fc36:	b085      	sub	sp, #20
 800fc38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fc3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fc3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fc40:	4b27      	ldr	r3, [pc, #156]	; (800fce0 <prvHeapInit+0xac>)
 800fc42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f003 0307 	and.w	r3, r3, #7
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d00c      	beq.n	800fc68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	3307      	adds	r3, #7
 800fc52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f023 0307 	bic.w	r3, r3, #7
 800fc5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fc5c:	68ba      	ldr	r2, [r7, #8]
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	1ad3      	subs	r3, r2, r3
 800fc62:	4a1f      	ldr	r2, [pc, #124]	; (800fce0 <prvHeapInit+0xac>)
 800fc64:	4413      	add	r3, r2
 800fc66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fc6c:	4a1d      	ldr	r2, [pc, #116]	; (800fce4 <prvHeapInit+0xb0>)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fc72:	4b1c      	ldr	r3, [pc, #112]	; (800fce4 <prvHeapInit+0xb0>)
 800fc74:	2200      	movs	r2, #0
 800fc76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	68ba      	ldr	r2, [r7, #8]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fc80:	2208      	movs	r2, #8
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	1a9b      	subs	r3, r3, r2
 800fc86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f023 0307 	bic.w	r3, r3, #7
 800fc8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	4a15      	ldr	r2, [pc, #84]	; (800fce8 <prvHeapInit+0xb4>)
 800fc94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fc96:	4b14      	ldr	r3, [pc, #80]	; (800fce8 <prvHeapInit+0xb4>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fc9e:	4b12      	ldr	r3, [pc, #72]	; (800fce8 <prvHeapInit+0xb4>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2200      	movs	r2, #0
 800fca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	68fa      	ldr	r2, [r7, #12]
 800fcae:	1ad2      	subs	r2, r2, r3
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fcb4:	4b0c      	ldr	r3, [pc, #48]	; (800fce8 <prvHeapInit+0xb4>)
 800fcb6:	681a      	ldr	r2, [r3, #0]
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	4a0a      	ldr	r2, [pc, #40]	; (800fcec <prvHeapInit+0xb8>)
 800fcc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	685b      	ldr	r3, [r3, #4]
 800fcc8:	4a09      	ldr	r2, [pc, #36]	; (800fcf0 <prvHeapInit+0xbc>)
 800fcca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fccc:	4b09      	ldr	r3, [pc, #36]	; (800fcf4 <prvHeapInit+0xc0>)
 800fcce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fcd2:	601a      	str	r2, [r3, #0]
}
 800fcd4:	bf00      	nop
 800fcd6:	3714      	adds	r7, #20
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr
 800fce0:	2000138c 	.word	0x2000138c
 800fce4:	20004f8c 	.word	0x20004f8c
 800fce8:	20004f94 	.word	0x20004f94
 800fcec:	20004f9c 	.word	0x20004f9c
 800fcf0:	20004f98 	.word	0x20004f98
 800fcf4:	20004fa0 	.word	0x20004fa0

0800fcf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b085      	sub	sp, #20
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fd00:	4b28      	ldr	r3, [pc, #160]	; (800fda4 <prvInsertBlockIntoFreeList+0xac>)
 800fd02:	60fb      	str	r3, [r7, #12]
 800fd04:	e002      	b.n	800fd0c <prvInsertBlockIntoFreeList+0x14>
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	60fb      	str	r3, [r7, #12]
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d8f7      	bhi.n	800fd06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	68ba      	ldr	r2, [r7, #8]
 800fd20:	4413      	add	r3, r2
 800fd22:	687a      	ldr	r2, [r7, #4]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d108      	bne.n	800fd3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	685a      	ldr	r2, [r3, #4]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	441a      	add	r2, r3
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	68ba      	ldr	r2, [r7, #8]
 800fd44:	441a      	add	r2, r3
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d118      	bne.n	800fd80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681a      	ldr	r2, [r3, #0]
 800fd52:	4b15      	ldr	r3, [pc, #84]	; (800fda8 <prvInsertBlockIntoFreeList+0xb0>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d00d      	beq.n	800fd76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	685a      	ldr	r2, [r3, #4]
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	441a      	add	r2, r3
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	681a      	ldr	r2, [r3, #0]
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	601a      	str	r2, [r3, #0]
 800fd74:	e008      	b.n	800fd88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fd76:	4b0c      	ldr	r3, [pc, #48]	; (800fda8 <prvInsertBlockIntoFreeList+0xb0>)
 800fd78:	681a      	ldr	r2, [r3, #0]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	601a      	str	r2, [r3, #0]
 800fd7e:	e003      	b.n	800fd88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681a      	ldr	r2, [r3, #0]
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fd88:	68fa      	ldr	r2, [r7, #12]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d002      	beq.n	800fd96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	687a      	ldr	r2, [r7, #4]
 800fd94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd96:	bf00      	nop
 800fd98:	3714      	adds	r7, #20
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda0:	4770      	bx	lr
 800fda2:	bf00      	nop
 800fda4:	20004f8c 	.word	0x20004f8c
 800fda8:	20004f94 	.word	0x20004f94

0800fdac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	4912      	ldr	r1, [pc, #72]	; (800fdfc <MX_USB_DEVICE_Init+0x50>)
 800fdb4:	4812      	ldr	r0, [pc, #72]	; (800fe00 <MX_USB_DEVICE_Init+0x54>)
 800fdb6:	f7fb fd51 	bl	800b85c <USBD_Init>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d001      	beq.n	800fdc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fdc0:	f7f2 f8a8 	bl	8001f14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fdc4:	490f      	ldr	r1, [pc, #60]	; (800fe04 <MX_USB_DEVICE_Init+0x58>)
 800fdc6:	480e      	ldr	r0, [pc, #56]	; (800fe00 <MX_USB_DEVICE_Init+0x54>)
 800fdc8:	f7fb fd7e 	bl	800b8c8 <USBD_RegisterClass>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d001      	beq.n	800fdd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fdd2:	f7f2 f89f 	bl	8001f14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fdd6:	490c      	ldr	r1, [pc, #48]	; (800fe08 <MX_USB_DEVICE_Init+0x5c>)
 800fdd8:	4809      	ldr	r0, [pc, #36]	; (800fe00 <MX_USB_DEVICE_Init+0x54>)
 800fdda:	f7fb fcd3 	bl	800b784 <USBD_CDC_RegisterInterface>
 800fdde:	4603      	mov	r3, r0
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d001      	beq.n	800fde8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fde4:	f7f2 f896 	bl	8001f14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fde8:	4805      	ldr	r0, [pc, #20]	; (800fe00 <MX_USB_DEVICE_Init+0x54>)
 800fdea:	f7fb fd8e 	bl	800b90a <USBD_Start>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d001      	beq.n	800fdf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fdf4:	f7f2 f88e 	bl	8001f14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fdf8:	bf00      	nop
 800fdfa:	bd80      	pop	{r7, pc}
 800fdfc:	20000134 	.word	0x20000134
 800fe00:	20005554 	.word	0x20005554
 800fe04:	20000018 	.word	0x20000018
 800fe08:	20000120 	.word	0x20000120

0800fe0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fe10:	2200      	movs	r2, #0
 800fe12:	4905      	ldr	r1, [pc, #20]	; (800fe28 <CDC_Init_FS+0x1c>)
 800fe14:	4805      	ldr	r0, [pc, #20]	; (800fe2c <CDC_Init_FS+0x20>)
 800fe16:	f7fb fcca 	bl	800b7ae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fe1a:	4905      	ldr	r1, [pc, #20]	; (800fe30 <CDC_Init_FS+0x24>)
 800fe1c:	4803      	ldr	r0, [pc, #12]	; (800fe2c <CDC_Init_FS+0x20>)
 800fe1e:	f7fb fcdf 	bl	800b7e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fe22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	20006024 	.word	0x20006024
 800fe2c:	20005554 	.word	0x20005554
 800fe30:	20005824 	.word	0x20005824

0800fe34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fe34:	b480      	push	{r7}
 800fe36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fe38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe42:	4770      	bx	lr

0800fe44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	6039      	str	r1, [r7, #0]
 800fe4e:	71fb      	strb	r3, [r7, #7]
 800fe50:	4613      	mov	r3, r2
 800fe52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fe54:	79fb      	ldrb	r3, [r7, #7]
 800fe56:	2b23      	cmp	r3, #35	; 0x23
 800fe58:	d84a      	bhi.n	800fef0 <CDC_Control_FS+0xac>
 800fe5a:	a201      	add	r2, pc, #4	; (adr r2, 800fe60 <CDC_Control_FS+0x1c>)
 800fe5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe60:	0800fef1 	.word	0x0800fef1
 800fe64:	0800fef1 	.word	0x0800fef1
 800fe68:	0800fef1 	.word	0x0800fef1
 800fe6c:	0800fef1 	.word	0x0800fef1
 800fe70:	0800fef1 	.word	0x0800fef1
 800fe74:	0800fef1 	.word	0x0800fef1
 800fe78:	0800fef1 	.word	0x0800fef1
 800fe7c:	0800fef1 	.word	0x0800fef1
 800fe80:	0800fef1 	.word	0x0800fef1
 800fe84:	0800fef1 	.word	0x0800fef1
 800fe88:	0800fef1 	.word	0x0800fef1
 800fe8c:	0800fef1 	.word	0x0800fef1
 800fe90:	0800fef1 	.word	0x0800fef1
 800fe94:	0800fef1 	.word	0x0800fef1
 800fe98:	0800fef1 	.word	0x0800fef1
 800fe9c:	0800fef1 	.word	0x0800fef1
 800fea0:	0800fef1 	.word	0x0800fef1
 800fea4:	0800fef1 	.word	0x0800fef1
 800fea8:	0800fef1 	.word	0x0800fef1
 800feac:	0800fef1 	.word	0x0800fef1
 800feb0:	0800fef1 	.word	0x0800fef1
 800feb4:	0800fef1 	.word	0x0800fef1
 800feb8:	0800fef1 	.word	0x0800fef1
 800febc:	0800fef1 	.word	0x0800fef1
 800fec0:	0800fef1 	.word	0x0800fef1
 800fec4:	0800fef1 	.word	0x0800fef1
 800fec8:	0800fef1 	.word	0x0800fef1
 800fecc:	0800fef1 	.word	0x0800fef1
 800fed0:	0800fef1 	.word	0x0800fef1
 800fed4:	0800fef1 	.word	0x0800fef1
 800fed8:	0800fef1 	.word	0x0800fef1
 800fedc:	0800fef1 	.word	0x0800fef1
 800fee0:	0800fef1 	.word	0x0800fef1
 800fee4:	0800fef1 	.word	0x0800fef1
 800fee8:	0800fef1 	.word	0x0800fef1
 800feec:	0800fef1 	.word	0x0800fef1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fef0:	bf00      	nop
  }

  return (USBD_OK);
 800fef2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	370c      	adds	r7, #12
 800fef8:	46bd      	mov	sp, r7
 800fefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefe:	4770      	bx	lr

0800ff00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ff0a:	6879      	ldr	r1, [r7, #4]
 800ff0c:	4805      	ldr	r0, [pc, #20]	; (800ff24 <CDC_Receive_FS+0x24>)
 800ff0e:	f7fb fc67 	bl	800b7e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ff12:	4804      	ldr	r0, [pc, #16]	; (800ff24 <CDC_Receive_FS+0x24>)
 800ff14:	f7fb fc78 	bl	800b808 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ff18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3708      	adds	r7, #8
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	20005554 	.word	0x20005554

0800ff28 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b087      	sub	sp, #28
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	60f8      	str	r0, [r7, #12]
 800ff30:	60b9      	str	r1, [r7, #8]
 800ff32:	4613      	mov	r3, r2
 800ff34:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ff36:	2300      	movs	r3, #0
 800ff38:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ff3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	371c      	adds	r7, #28
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
	...

0800ff4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b083      	sub	sp, #12
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	4603      	mov	r3, r0
 800ff54:	6039      	str	r1, [r7, #0]
 800ff56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	2212      	movs	r2, #18
 800ff5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ff5e:	4b03      	ldr	r3, [pc, #12]	; (800ff6c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr
 800ff6c:	20000150 	.word	0x20000150

0800ff70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff70:	b480      	push	{r7}
 800ff72:	b083      	sub	sp, #12
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	4603      	mov	r3, r0
 800ff78:	6039      	str	r1, [r7, #0]
 800ff7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	2204      	movs	r2, #4
 800ff80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ff82:	4b03      	ldr	r3, [pc, #12]	; (800ff90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	370c      	adds	r7, #12
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr
 800ff90:	20000164 	.word	0x20000164

0800ff94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	6039      	str	r1, [r7, #0]
 800ff9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ffa0:	79fb      	ldrb	r3, [r7, #7]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d105      	bne.n	800ffb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ffa6:	683a      	ldr	r2, [r7, #0]
 800ffa8:	4907      	ldr	r1, [pc, #28]	; (800ffc8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ffaa:	4808      	ldr	r0, [pc, #32]	; (800ffcc <USBD_FS_ProductStrDescriptor+0x38>)
 800ffac:	f7fc fc8a 	bl	800c8c4 <USBD_GetString>
 800ffb0:	e004      	b.n	800ffbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ffb2:	683a      	ldr	r2, [r7, #0]
 800ffb4:	4904      	ldr	r1, [pc, #16]	; (800ffc8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ffb6:	4805      	ldr	r0, [pc, #20]	; (800ffcc <USBD_FS_ProductStrDescriptor+0x38>)
 800ffb8:	f7fc fc84 	bl	800c8c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ffbc:	4b02      	ldr	r3, [pc, #8]	; (800ffc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3708      	adds	r7, #8
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	20006824 	.word	0x20006824
 800ffcc:	08015d3c 	.word	0x08015d3c

0800ffd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b082      	sub	sp, #8
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	6039      	str	r1, [r7, #0]
 800ffda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ffdc:	683a      	ldr	r2, [r7, #0]
 800ffde:	4904      	ldr	r1, [pc, #16]	; (800fff0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ffe0:	4804      	ldr	r0, [pc, #16]	; (800fff4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ffe2:	f7fc fc6f 	bl	800c8c4 <USBD_GetString>
  return USBD_StrDesc;
 800ffe6:	4b02      	ldr	r3, [pc, #8]	; (800fff0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	20006824 	.word	0x20006824
 800fff4:	08015d54 	.word	0x08015d54

0800fff8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	4603      	mov	r3, r0
 8010000:	6039      	str	r1, [r7, #0]
 8010002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	221a      	movs	r2, #26
 8010008:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801000a:	f000 f843 	bl	8010094 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801000e:	4b02      	ldr	r3, [pc, #8]	; (8010018 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010010:	4618      	mov	r0, r3
 8010012:	3708      	adds	r7, #8
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}
 8010018:	20000168 	.word	0x20000168

0801001c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
 8010022:	4603      	mov	r3, r0
 8010024:	6039      	str	r1, [r7, #0]
 8010026:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010028:	79fb      	ldrb	r3, [r7, #7]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d105      	bne.n	801003a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801002e:	683a      	ldr	r2, [r7, #0]
 8010030:	4907      	ldr	r1, [pc, #28]	; (8010050 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010032:	4808      	ldr	r0, [pc, #32]	; (8010054 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010034:	f7fc fc46 	bl	800c8c4 <USBD_GetString>
 8010038:	e004      	b.n	8010044 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801003a:	683a      	ldr	r2, [r7, #0]
 801003c:	4904      	ldr	r1, [pc, #16]	; (8010050 <USBD_FS_ConfigStrDescriptor+0x34>)
 801003e:	4805      	ldr	r0, [pc, #20]	; (8010054 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010040:	f7fc fc40 	bl	800c8c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010044:	4b02      	ldr	r3, [pc, #8]	; (8010050 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010046:	4618      	mov	r0, r3
 8010048:	3708      	adds	r7, #8
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}
 801004e:	bf00      	nop
 8010050:	20006824 	.word	0x20006824
 8010054:	08015d68 	.word	0x08015d68

08010058 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
 801005e:	4603      	mov	r3, r0
 8010060:	6039      	str	r1, [r7, #0]
 8010062:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010064:	79fb      	ldrb	r3, [r7, #7]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d105      	bne.n	8010076 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801006a:	683a      	ldr	r2, [r7, #0]
 801006c:	4907      	ldr	r1, [pc, #28]	; (801008c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801006e:	4808      	ldr	r0, [pc, #32]	; (8010090 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010070:	f7fc fc28 	bl	800c8c4 <USBD_GetString>
 8010074:	e004      	b.n	8010080 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010076:	683a      	ldr	r2, [r7, #0]
 8010078:	4904      	ldr	r1, [pc, #16]	; (801008c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801007a:	4805      	ldr	r0, [pc, #20]	; (8010090 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801007c:	f7fc fc22 	bl	800c8c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010080:	4b02      	ldr	r3, [pc, #8]	; (801008c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010082:	4618      	mov	r0, r3
 8010084:	3708      	adds	r7, #8
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	20006824 	.word	0x20006824
 8010090:	08015d74 	.word	0x08015d74

08010094 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b084      	sub	sp, #16
 8010098:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801009a:	4b0f      	ldr	r3, [pc, #60]	; (80100d8 <Get_SerialNum+0x44>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80100a0:	4b0e      	ldr	r3, [pc, #56]	; (80100dc <Get_SerialNum+0x48>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80100a6:	4b0e      	ldr	r3, [pc, #56]	; (80100e0 <Get_SerialNum+0x4c>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80100ac:	68fa      	ldr	r2, [r7, #12]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	4413      	add	r3, r2
 80100b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d009      	beq.n	80100ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80100ba:	2208      	movs	r2, #8
 80100bc:	4909      	ldr	r1, [pc, #36]	; (80100e4 <Get_SerialNum+0x50>)
 80100be:	68f8      	ldr	r0, [r7, #12]
 80100c0:	f000 f814 	bl	80100ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80100c4:	2204      	movs	r2, #4
 80100c6:	4908      	ldr	r1, [pc, #32]	; (80100e8 <Get_SerialNum+0x54>)
 80100c8:	68b8      	ldr	r0, [r7, #8]
 80100ca:	f000 f80f 	bl	80100ec <IntToUnicode>
  }
}
 80100ce:	bf00      	nop
 80100d0:	3710      	adds	r7, #16
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}
 80100d6:	bf00      	nop
 80100d8:	1fff7a10 	.word	0x1fff7a10
 80100dc:	1fff7a14 	.word	0x1fff7a14
 80100e0:	1fff7a18 	.word	0x1fff7a18
 80100e4:	2000016a 	.word	0x2000016a
 80100e8:	2000017a 	.word	0x2000017a

080100ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80100ec:	b480      	push	{r7}
 80100ee:	b087      	sub	sp, #28
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	4613      	mov	r3, r2
 80100f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80100fa:	2300      	movs	r3, #0
 80100fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80100fe:	2300      	movs	r3, #0
 8010100:	75fb      	strb	r3, [r7, #23]
 8010102:	e027      	b.n	8010154 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	0f1b      	lsrs	r3, r3, #28
 8010108:	2b09      	cmp	r3, #9
 801010a:	d80b      	bhi.n	8010124 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	0f1b      	lsrs	r3, r3, #28
 8010110:	b2da      	uxtb	r2, r3
 8010112:	7dfb      	ldrb	r3, [r7, #23]
 8010114:	005b      	lsls	r3, r3, #1
 8010116:	4619      	mov	r1, r3
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	440b      	add	r3, r1
 801011c:	3230      	adds	r2, #48	; 0x30
 801011e:	b2d2      	uxtb	r2, r2
 8010120:	701a      	strb	r2, [r3, #0]
 8010122:	e00a      	b.n	801013a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	0f1b      	lsrs	r3, r3, #28
 8010128:	b2da      	uxtb	r2, r3
 801012a:	7dfb      	ldrb	r3, [r7, #23]
 801012c:	005b      	lsls	r3, r3, #1
 801012e:	4619      	mov	r1, r3
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	440b      	add	r3, r1
 8010134:	3237      	adds	r2, #55	; 0x37
 8010136:	b2d2      	uxtb	r2, r2
 8010138:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	011b      	lsls	r3, r3, #4
 801013e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010140:	7dfb      	ldrb	r3, [r7, #23]
 8010142:	005b      	lsls	r3, r3, #1
 8010144:	3301      	adds	r3, #1
 8010146:	68ba      	ldr	r2, [r7, #8]
 8010148:	4413      	add	r3, r2
 801014a:	2200      	movs	r2, #0
 801014c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801014e:	7dfb      	ldrb	r3, [r7, #23]
 8010150:	3301      	adds	r3, #1
 8010152:	75fb      	strb	r3, [r7, #23]
 8010154:	7dfa      	ldrb	r2, [r7, #23]
 8010156:	79fb      	ldrb	r3, [r7, #7]
 8010158:	429a      	cmp	r2, r3
 801015a:	d3d3      	bcc.n	8010104 <IntToUnicode+0x18>
  }
}
 801015c:	bf00      	nop
 801015e:	bf00      	nop
 8010160:	371c      	adds	r7, #28
 8010162:	46bd      	mov	sp, r7
 8010164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010168:	4770      	bx	lr
	...

0801016c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b08a      	sub	sp, #40	; 0x28
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010174:	f107 0314 	add.w	r3, r7, #20
 8010178:	2200      	movs	r2, #0
 801017a:	601a      	str	r2, [r3, #0]
 801017c:	605a      	str	r2, [r3, #4]
 801017e:	609a      	str	r2, [r3, #8]
 8010180:	60da      	str	r2, [r3, #12]
 8010182:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801018c:	d147      	bne.n	801021e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801018e:	2300      	movs	r3, #0
 8010190:	613b      	str	r3, [r7, #16]
 8010192:	4b25      	ldr	r3, [pc, #148]	; (8010228 <HAL_PCD_MspInit+0xbc>)
 8010194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010196:	4a24      	ldr	r2, [pc, #144]	; (8010228 <HAL_PCD_MspInit+0xbc>)
 8010198:	f043 0301 	orr.w	r3, r3, #1
 801019c:	6313      	str	r3, [r2, #48]	; 0x30
 801019e:	4b22      	ldr	r3, [pc, #136]	; (8010228 <HAL_PCD_MspInit+0xbc>)
 80101a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101a2:	f003 0301 	and.w	r3, r3, #1
 80101a6:	613b      	str	r3, [r7, #16]
 80101a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80101aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80101b0:	2300      	movs	r3, #0
 80101b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101b4:	2300      	movs	r3, #0
 80101b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101b8:	f107 0314 	add.w	r3, r7, #20
 80101bc:	4619      	mov	r1, r3
 80101be:	481b      	ldr	r0, [pc, #108]	; (801022c <HAL_PCD_MspInit+0xc0>)
 80101c0:	f7f4 fa82 	bl	80046c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80101c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80101c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101ca:	2302      	movs	r3, #2
 80101cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101ce:	2300      	movs	r3, #0
 80101d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80101d2:	2303      	movs	r3, #3
 80101d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80101d6:	230a      	movs	r3, #10
 80101d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101da:	f107 0314 	add.w	r3, r7, #20
 80101de:	4619      	mov	r1, r3
 80101e0:	4812      	ldr	r0, [pc, #72]	; (801022c <HAL_PCD_MspInit+0xc0>)
 80101e2:	f7f4 fa71 	bl	80046c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80101e6:	4b10      	ldr	r3, [pc, #64]	; (8010228 <HAL_PCD_MspInit+0xbc>)
 80101e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101ea:	4a0f      	ldr	r2, [pc, #60]	; (8010228 <HAL_PCD_MspInit+0xbc>)
 80101ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101f0:	6353      	str	r3, [r2, #52]	; 0x34
 80101f2:	2300      	movs	r3, #0
 80101f4:	60fb      	str	r3, [r7, #12]
 80101f6:	4b0c      	ldr	r3, [pc, #48]	; (8010228 <HAL_PCD_MspInit+0xbc>)
 80101f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101fa:	4a0b      	ldr	r2, [pc, #44]	; (8010228 <HAL_PCD_MspInit+0xbc>)
 80101fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010200:	6453      	str	r3, [r2, #68]	; 0x44
 8010202:	4b09      	ldr	r3, [pc, #36]	; (8010228 <HAL_PCD_MspInit+0xbc>)
 8010204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801020a:	60fb      	str	r3, [r7, #12]
 801020c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801020e:	2200      	movs	r2, #0
 8010210:	2100      	movs	r1, #0
 8010212:	2043      	movs	r0, #67	; 0x43
 8010214:	f7f4 fa20 	bl	8004658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010218:	2043      	movs	r0, #67	; 0x43
 801021a:	f7f4 fa39 	bl	8004690 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801021e:	bf00      	nop
 8010220:	3728      	adds	r7, #40	; 0x28
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	40023800 	.word	0x40023800
 801022c:	40020000 	.word	0x40020000

08010230 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010244:	4619      	mov	r1, r3
 8010246:	4610      	mov	r0, r2
 8010248:	f7fb fbaa 	bl	800b9a0 <USBD_LL_SetupStage>
}
 801024c:	bf00      	nop
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	460b      	mov	r3, r1
 801025e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010266:	78fa      	ldrb	r2, [r7, #3]
 8010268:	6879      	ldr	r1, [r7, #4]
 801026a:	4613      	mov	r3, r2
 801026c:	00db      	lsls	r3, r3, #3
 801026e:	1a9b      	subs	r3, r3, r2
 8010270:	009b      	lsls	r3, r3, #2
 8010272:	440b      	add	r3, r1
 8010274:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010278:	681a      	ldr	r2, [r3, #0]
 801027a:	78fb      	ldrb	r3, [r7, #3]
 801027c:	4619      	mov	r1, r3
 801027e:	f7fb fbe4 	bl	800ba4a <USBD_LL_DataOutStage>
}
 8010282:	bf00      	nop
 8010284:	3708      	adds	r7, #8
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}

0801028a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801028a:	b580      	push	{r7, lr}
 801028c:	b082      	sub	sp, #8
 801028e:	af00      	add	r7, sp, #0
 8010290:	6078      	str	r0, [r7, #4]
 8010292:	460b      	mov	r3, r1
 8010294:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801029c:	78fa      	ldrb	r2, [r7, #3]
 801029e:	6879      	ldr	r1, [r7, #4]
 80102a0:	4613      	mov	r3, r2
 80102a2:	00db      	lsls	r3, r3, #3
 80102a4:	1a9b      	subs	r3, r3, r2
 80102a6:	009b      	lsls	r3, r3, #2
 80102a8:	440b      	add	r3, r1
 80102aa:	3348      	adds	r3, #72	; 0x48
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	78fb      	ldrb	r3, [r7, #3]
 80102b0:	4619      	mov	r1, r3
 80102b2:	f7fb fc2d 	bl	800bb10 <USBD_LL_DataInStage>
}
 80102b6:	bf00      	nop
 80102b8:	3708      	adds	r7, #8
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}

080102be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102be:	b580      	push	{r7, lr}
 80102c0:	b082      	sub	sp, #8
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80102cc:	4618      	mov	r0, r3
 80102ce:	f7fb fd31 	bl	800bd34 <USBD_LL_SOF>
}
 80102d2:	bf00      	nop
 80102d4:	3708      	adds	r7, #8
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}

080102da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102da:	b580      	push	{r7, lr}
 80102dc:	b084      	sub	sp, #16
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80102e2:	2301      	movs	r3, #1
 80102e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	68db      	ldr	r3, [r3, #12]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d102      	bne.n	80102f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80102ee:	2300      	movs	r3, #0
 80102f0:	73fb      	strb	r3, [r7, #15]
 80102f2:	e008      	b.n	8010306 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	2b02      	cmp	r3, #2
 80102fa:	d102      	bne.n	8010302 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80102fc:	2301      	movs	r3, #1
 80102fe:	73fb      	strb	r3, [r7, #15]
 8010300:	e001      	b.n	8010306 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010302:	f7f1 fe07 	bl	8001f14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801030c:	7bfa      	ldrb	r2, [r7, #15]
 801030e:	4611      	mov	r1, r2
 8010310:	4618      	mov	r0, r3
 8010312:	f7fb fcd4 	bl	800bcbe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801031c:	4618      	mov	r0, r3
 801031e:	f7fb fc8d 	bl	800bc3c <USBD_LL_Reset>
}
 8010322:	bf00      	nop
 8010324:	3710      	adds	r7, #16
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
	...

0801032c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801033a:	4618      	mov	r0, r3
 801033c:	f7fb fccf 	bl	800bcde <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	687a      	ldr	r2, [r7, #4]
 801034c:	6812      	ldr	r2, [r2, #0]
 801034e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010352:	f043 0301 	orr.w	r3, r3, #1
 8010356:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6a1b      	ldr	r3, [r3, #32]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d005      	beq.n	801036c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010360:	4b04      	ldr	r3, [pc, #16]	; (8010374 <HAL_PCD_SuspendCallback+0x48>)
 8010362:	691b      	ldr	r3, [r3, #16]
 8010364:	4a03      	ldr	r2, [pc, #12]	; (8010374 <HAL_PCD_SuspendCallback+0x48>)
 8010366:	f043 0306 	orr.w	r3, r3, #6
 801036a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801036c:	bf00      	nop
 801036e:	3708      	adds	r7, #8
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}
 8010374:	e000ed00 	.word	0xe000ed00

08010378 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010386:	4618      	mov	r0, r3
 8010388:	f7fb fcbe 	bl	800bd08 <USBD_LL_Resume>
}
 801038c:	bf00      	nop
 801038e:	3708      	adds	r7, #8
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b082      	sub	sp, #8
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	460b      	mov	r3, r1
 801039e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80103a6:	78fa      	ldrb	r2, [r7, #3]
 80103a8:	4611      	mov	r1, r2
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7fb fce9 	bl	800bd82 <USBD_LL_IsoOUTIncomplete>
}
 80103b0:	bf00      	nop
 80103b2:	3708      	adds	r7, #8
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	460b      	mov	r3, r1
 80103c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80103ca:	78fa      	ldrb	r2, [r7, #3]
 80103cc:	4611      	mov	r1, r2
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7fb fcca 	bl	800bd68 <USBD_LL_IsoINIncomplete>
}
 80103d4:	bf00      	nop
 80103d6:	3708      	adds	r7, #8
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7fb fcd6 	bl	800bd9c <USBD_LL_DevConnected>
}
 80103f0:	bf00      	nop
 80103f2:	3708      	adds	r7, #8
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010406:	4618      	mov	r0, r3
 8010408:	f7fb fcd3 	bl	800bdb2 <USBD_LL_DevDisconnected>
}
 801040c:	bf00      	nop
 801040e:	3708      	adds	r7, #8
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}

08010414 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d13c      	bne.n	801049e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010424:	4a20      	ldr	r2, [pc, #128]	; (80104a8 <USBD_LL_Init+0x94>)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	4a1e      	ldr	r2, [pc, #120]	; (80104a8 <USBD_LL_Init+0x94>)
 8010430:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010434:	4b1c      	ldr	r3, [pc, #112]	; (80104a8 <USBD_LL_Init+0x94>)
 8010436:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801043a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801043c:	4b1a      	ldr	r3, [pc, #104]	; (80104a8 <USBD_LL_Init+0x94>)
 801043e:	2204      	movs	r2, #4
 8010440:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010442:	4b19      	ldr	r3, [pc, #100]	; (80104a8 <USBD_LL_Init+0x94>)
 8010444:	2202      	movs	r2, #2
 8010446:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010448:	4b17      	ldr	r3, [pc, #92]	; (80104a8 <USBD_LL_Init+0x94>)
 801044a:	2200      	movs	r2, #0
 801044c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801044e:	4b16      	ldr	r3, [pc, #88]	; (80104a8 <USBD_LL_Init+0x94>)
 8010450:	2202      	movs	r2, #2
 8010452:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010454:	4b14      	ldr	r3, [pc, #80]	; (80104a8 <USBD_LL_Init+0x94>)
 8010456:	2200      	movs	r2, #0
 8010458:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801045a:	4b13      	ldr	r3, [pc, #76]	; (80104a8 <USBD_LL_Init+0x94>)
 801045c:	2200      	movs	r2, #0
 801045e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010460:	4b11      	ldr	r3, [pc, #68]	; (80104a8 <USBD_LL_Init+0x94>)
 8010462:	2200      	movs	r2, #0
 8010464:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8010466:	4b10      	ldr	r3, [pc, #64]	; (80104a8 <USBD_LL_Init+0x94>)
 8010468:	2201      	movs	r2, #1
 801046a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801046c:	4b0e      	ldr	r3, [pc, #56]	; (80104a8 <USBD_LL_Init+0x94>)
 801046e:	2200      	movs	r2, #0
 8010470:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010472:	480d      	ldr	r0, [pc, #52]	; (80104a8 <USBD_LL_Init+0x94>)
 8010474:	f7f5 fc8c 	bl	8005d90 <HAL_PCD_Init>
 8010478:	4603      	mov	r3, r0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d001      	beq.n	8010482 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801047e:	f7f1 fd49 	bl	8001f14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010482:	2180      	movs	r1, #128	; 0x80
 8010484:	4808      	ldr	r0, [pc, #32]	; (80104a8 <USBD_LL_Init+0x94>)
 8010486:	f7f6 fdea 	bl	800705e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801048a:	2240      	movs	r2, #64	; 0x40
 801048c:	2100      	movs	r1, #0
 801048e:	4806      	ldr	r0, [pc, #24]	; (80104a8 <USBD_LL_Init+0x94>)
 8010490:	f7f6 fd9e 	bl	8006fd0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010494:	2280      	movs	r2, #128	; 0x80
 8010496:	2101      	movs	r1, #1
 8010498:	4803      	ldr	r0, [pc, #12]	; (80104a8 <USBD_LL_Init+0x94>)
 801049a:	f7f6 fd99 	bl	8006fd0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801049e:	2300      	movs	r3, #0
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	3708      	adds	r7, #8
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	20006a24 	.word	0x20006a24

080104ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b084      	sub	sp, #16
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104b4:	2300      	movs	r3, #0
 80104b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104b8:	2300      	movs	r3, #0
 80104ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7f5 fd81 	bl	8005fca <HAL_PCD_Start>
 80104c8:	4603      	mov	r3, r0
 80104ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104cc:	7bfb      	ldrb	r3, [r7, #15]
 80104ce:	4618      	mov	r0, r3
 80104d0:	f000 f92a 	bl	8010728 <USBD_Get_USB_Status>
 80104d4:	4603      	mov	r3, r0
 80104d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3710      	adds	r7, #16
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}

080104e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80104e2:	b580      	push	{r7, lr}
 80104e4:	b084      	sub	sp, #16
 80104e6:	af00      	add	r7, sp, #0
 80104e8:	6078      	str	r0, [r7, #4]
 80104ea:	4608      	mov	r0, r1
 80104ec:	4611      	mov	r1, r2
 80104ee:	461a      	mov	r2, r3
 80104f0:	4603      	mov	r3, r0
 80104f2:	70fb      	strb	r3, [r7, #3]
 80104f4:	460b      	mov	r3, r1
 80104f6:	70bb      	strb	r3, [r7, #2]
 80104f8:	4613      	mov	r3, r2
 80104fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104fc:	2300      	movs	r3, #0
 80104fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010500:	2300      	movs	r3, #0
 8010502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801050a:	78bb      	ldrb	r3, [r7, #2]
 801050c:	883a      	ldrh	r2, [r7, #0]
 801050e:	78f9      	ldrb	r1, [r7, #3]
 8010510:	f7f6 f965 	bl	80067de <HAL_PCD_EP_Open>
 8010514:	4603      	mov	r3, r0
 8010516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010518:	7bfb      	ldrb	r3, [r7, #15]
 801051a:	4618      	mov	r0, r3
 801051c:	f000 f904 	bl	8010728 <USBD_Get_USB_Status>
 8010520:	4603      	mov	r3, r0
 8010522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010524:	7bbb      	ldrb	r3, [r7, #14]
}
 8010526:	4618      	mov	r0, r3
 8010528:	3710      	adds	r7, #16
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801052e:	b580      	push	{r7, lr}
 8010530:	b084      	sub	sp, #16
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
 8010536:	460b      	mov	r3, r1
 8010538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801053a:	2300      	movs	r3, #0
 801053c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801053e:	2300      	movs	r3, #0
 8010540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010548:	78fa      	ldrb	r2, [r7, #3]
 801054a:	4611      	mov	r1, r2
 801054c:	4618      	mov	r0, r3
 801054e:	f7f6 f9ae 	bl	80068ae <HAL_PCD_EP_Close>
 8010552:	4603      	mov	r3, r0
 8010554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010556:	7bfb      	ldrb	r3, [r7, #15]
 8010558:	4618      	mov	r0, r3
 801055a:	f000 f8e5 	bl	8010728 <USBD_Get_USB_Status>
 801055e:	4603      	mov	r3, r0
 8010560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010562:	7bbb      	ldrb	r3, [r7, #14]
}
 8010564:	4618      	mov	r0, r3
 8010566:	3710      	adds	r7, #16
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}

0801056c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b084      	sub	sp, #16
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	460b      	mov	r3, r1
 8010576:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010578:	2300      	movs	r3, #0
 801057a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801057c:	2300      	movs	r3, #0
 801057e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010586:	78fa      	ldrb	r2, [r7, #3]
 8010588:	4611      	mov	r1, r2
 801058a:	4618      	mov	r0, r3
 801058c:	f7f6 fa86 	bl	8006a9c <HAL_PCD_EP_SetStall>
 8010590:	4603      	mov	r3, r0
 8010592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010594:	7bfb      	ldrb	r3, [r7, #15]
 8010596:	4618      	mov	r0, r3
 8010598:	f000 f8c6 	bl	8010728 <USBD_Get_USB_Status>
 801059c:	4603      	mov	r3, r0
 801059e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3710      	adds	r7, #16
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}

080105aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105aa:	b580      	push	{r7, lr}
 80105ac:	b084      	sub	sp, #16
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
 80105b2:	460b      	mov	r3, r1
 80105b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105b6:	2300      	movs	r3, #0
 80105b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105ba:	2300      	movs	r3, #0
 80105bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80105c4:	78fa      	ldrb	r2, [r7, #3]
 80105c6:	4611      	mov	r1, r2
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7f6 facb 	bl	8006b64 <HAL_PCD_EP_ClrStall>
 80105ce:	4603      	mov	r3, r0
 80105d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105d2:	7bfb      	ldrb	r3, [r7, #15]
 80105d4:	4618      	mov	r0, r3
 80105d6:	f000 f8a7 	bl	8010728 <USBD_Get_USB_Status>
 80105da:	4603      	mov	r3, r0
 80105dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105de:	7bbb      	ldrb	r3, [r7, #14]
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3710      	adds	r7, #16
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105e8:	b480      	push	{r7}
 80105ea:	b085      	sub	sp, #20
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	460b      	mov	r3, r1
 80105f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80105fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80105fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010600:	2b00      	cmp	r3, #0
 8010602:	da0b      	bge.n	801061c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010604:	78fb      	ldrb	r3, [r7, #3]
 8010606:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801060a:	68f9      	ldr	r1, [r7, #12]
 801060c:	4613      	mov	r3, r2
 801060e:	00db      	lsls	r3, r3, #3
 8010610:	1a9b      	subs	r3, r3, r2
 8010612:	009b      	lsls	r3, r3, #2
 8010614:	440b      	add	r3, r1
 8010616:	333e      	adds	r3, #62	; 0x3e
 8010618:	781b      	ldrb	r3, [r3, #0]
 801061a:	e00b      	b.n	8010634 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801061c:	78fb      	ldrb	r3, [r7, #3]
 801061e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010622:	68f9      	ldr	r1, [r7, #12]
 8010624:	4613      	mov	r3, r2
 8010626:	00db      	lsls	r3, r3, #3
 8010628:	1a9b      	subs	r3, r3, r2
 801062a:	009b      	lsls	r3, r3, #2
 801062c:	440b      	add	r3, r1
 801062e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010632:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010634:	4618      	mov	r0, r3
 8010636:	3714      	adds	r7, #20
 8010638:	46bd      	mov	sp, r7
 801063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063e:	4770      	bx	lr

08010640 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b084      	sub	sp, #16
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	460b      	mov	r3, r1
 801064a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801064c:	2300      	movs	r3, #0
 801064e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010650:	2300      	movs	r3, #0
 8010652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801065a:	78fa      	ldrb	r2, [r7, #3]
 801065c:	4611      	mov	r1, r2
 801065e:	4618      	mov	r0, r3
 8010660:	f7f6 f898 	bl	8006794 <HAL_PCD_SetAddress>
 8010664:	4603      	mov	r3, r0
 8010666:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010668:	7bfb      	ldrb	r3, [r7, #15]
 801066a:	4618      	mov	r0, r3
 801066c:	f000 f85c 	bl	8010728 <USBD_Get_USB_Status>
 8010670:	4603      	mov	r3, r0
 8010672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010674:	7bbb      	ldrb	r3, [r7, #14]
}
 8010676:	4618      	mov	r0, r3
 8010678:	3710      	adds	r7, #16
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801067e:	b580      	push	{r7, lr}
 8010680:	b086      	sub	sp, #24
 8010682:	af00      	add	r7, sp, #0
 8010684:	60f8      	str	r0, [r7, #12]
 8010686:	607a      	str	r2, [r7, #4]
 8010688:	603b      	str	r3, [r7, #0]
 801068a:	460b      	mov	r3, r1
 801068c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801068e:	2300      	movs	r3, #0
 8010690:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010692:	2300      	movs	r3, #0
 8010694:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801069c:	7af9      	ldrb	r1, [r7, #11]
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	f7f6 f9b1 	bl	8006a08 <HAL_PCD_EP_Transmit>
 80106a6:	4603      	mov	r3, r0
 80106a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106aa:	7dfb      	ldrb	r3, [r7, #23]
 80106ac:	4618      	mov	r0, r3
 80106ae:	f000 f83b 	bl	8010728 <USBD_Get_USB_Status>
 80106b2:	4603      	mov	r3, r0
 80106b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80106b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3718      	adds	r7, #24
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}

080106c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b086      	sub	sp, #24
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	60f8      	str	r0, [r7, #12]
 80106c8:	607a      	str	r2, [r7, #4]
 80106ca:	603b      	str	r3, [r7, #0]
 80106cc:	460b      	mov	r3, r1
 80106ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106d0:	2300      	movs	r3, #0
 80106d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106d4:	2300      	movs	r3, #0
 80106d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80106de:	7af9      	ldrb	r1, [r7, #11]
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	687a      	ldr	r2, [r7, #4]
 80106e4:	f7f6 f92d 	bl	8006942 <HAL_PCD_EP_Receive>
 80106e8:	4603      	mov	r3, r0
 80106ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106ec:	7dfb      	ldrb	r3, [r7, #23]
 80106ee:	4618      	mov	r0, r3
 80106f0:	f000 f81a 	bl	8010728 <USBD_Get_USB_Status>
 80106f4:	4603      	mov	r3, r0
 80106f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80106f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3718      	adds	r7, #24
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}

08010702 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b082      	sub	sp, #8
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
 801070a:	460b      	mov	r3, r1
 801070c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010714:	78fa      	ldrb	r2, [r7, #3]
 8010716:	4611      	mov	r1, r2
 8010718:	4618      	mov	r0, r3
 801071a:	f7f6 f95d 	bl	80069d8 <HAL_PCD_EP_GetRxCount>
 801071e:	4603      	mov	r3, r0
}
 8010720:	4618      	mov	r0, r3
 8010722:	3708      	adds	r7, #8
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}

08010728 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010728:	b480      	push	{r7}
 801072a:	b085      	sub	sp, #20
 801072c:	af00      	add	r7, sp, #0
 801072e:	4603      	mov	r3, r0
 8010730:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010732:	2300      	movs	r3, #0
 8010734:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010736:	79fb      	ldrb	r3, [r7, #7]
 8010738:	2b03      	cmp	r3, #3
 801073a:	d817      	bhi.n	801076c <USBD_Get_USB_Status+0x44>
 801073c:	a201      	add	r2, pc, #4	; (adr r2, 8010744 <USBD_Get_USB_Status+0x1c>)
 801073e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010742:	bf00      	nop
 8010744:	08010755 	.word	0x08010755
 8010748:	0801075b 	.word	0x0801075b
 801074c:	08010761 	.word	0x08010761
 8010750:	08010767 	.word	0x08010767
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010754:	2300      	movs	r3, #0
 8010756:	73fb      	strb	r3, [r7, #15]
    break;
 8010758:	e00b      	b.n	8010772 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801075a:	2303      	movs	r3, #3
 801075c:	73fb      	strb	r3, [r7, #15]
    break;
 801075e:	e008      	b.n	8010772 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010760:	2301      	movs	r3, #1
 8010762:	73fb      	strb	r3, [r7, #15]
    break;
 8010764:	e005      	b.n	8010772 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010766:	2303      	movs	r3, #3
 8010768:	73fb      	strb	r3, [r7, #15]
    break;
 801076a:	e002      	b.n	8010772 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801076c:	2303      	movs	r3, #3
 801076e:	73fb      	strb	r3, [r7, #15]
    break;
 8010770:	bf00      	nop
  }
  return usb_status;
 8010772:	7bfb      	ldrb	r3, [r7, #15]
}
 8010774:	4618      	mov	r0, r3
 8010776:	3714      	adds	r7, #20
 8010778:	46bd      	mov	sp, r7
 801077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077e:	4770      	bx	lr

08010780 <__cxa_pure_virtual>:
 8010780:	b508      	push	{r3, lr}
 8010782:	f000 f80d 	bl	80107a0 <_ZSt9terminatev>

08010786 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010786:	b508      	push	{r3, lr}
 8010788:	4780      	blx	r0
 801078a:	f000 f80e 	bl	80107aa <abort>
	...

08010790 <_ZSt13get_terminatev>:
 8010790:	4b02      	ldr	r3, [pc, #8]	; (801079c <_ZSt13get_terminatev+0xc>)
 8010792:	6818      	ldr	r0, [r3, #0]
 8010794:	f3bf 8f5b 	dmb	ish
 8010798:	4770      	bx	lr
 801079a:	bf00      	nop
 801079c:	20000184 	.word	0x20000184

080107a0 <_ZSt9terminatev>:
 80107a0:	b508      	push	{r3, lr}
 80107a2:	f7ff fff5 	bl	8010790 <_ZSt13get_terminatev>
 80107a6:	f7ff ffee 	bl	8010786 <_ZN10__cxxabiv111__terminateEPFvvE>

080107aa <abort>:
 80107aa:	b508      	push	{r3, lr}
 80107ac:	2006      	movs	r0, #6
 80107ae:	f001 f933 	bl	8011a18 <raise>
 80107b2:	2001      	movs	r0, #1
 80107b4:	f7f1 ff80 	bl	80026b8 <_exit>

080107b8 <__errno>:
 80107b8:	4b01      	ldr	r3, [pc, #4]	; (80107c0 <__errno+0x8>)
 80107ba:	6818      	ldr	r0, [r3, #0]
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop
 80107c0:	20000188 	.word	0x20000188

080107c4 <std>:
 80107c4:	2300      	movs	r3, #0
 80107c6:	b510      	push	{r4, lr}
 80107c8:	4604      	mov	r4, r0
 80107ca:	e9c0 3300 	strd	r3, r3, [r0]
 80107ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80107d2:	6083      	str	r3, [r0, #8]
 80107d4:	8181      	strh	r1, [r0, #12]
 80107d6:	6643      	str	r3, [r0, #100]	; 0x64
 80107d8:	81c2      	strh	r2, [r0, #14]
 80107da:	6183      	str	r3, [r0, #24]
 80107dc:	4619      	mov	r1, r3
 80107de:	2208      	movs	r2, #8
 80107e0:	305c      	adds	r0, #92	; 0x5c
 80107e2:	f000 f945 	bl	8010a70 <memset>
 80107e6:	4b05      	ldr	r3, [pc, #20]	; (80107fc <std+0x38>)
 80107e8:	6263      	str	r3, [r4, #36]	; 0x24
 80107ea:	4b05      	ldr	r3, [pc, #20]	; (8010800 <std+0x3c>)
 80107ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80107ee:	4b05      	ldr	r3, [pc, #20]	; (8010804 <std+0x40>)
 80107f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80107f2:	4b05      	ldr	r3, [pc, #20]	; (8010808 <std+0x44>)
 80107f4:	6224      	str	r4, [r4, #32]
 80107f6:	6323      	str	r3, [r4, #48]	; 0x30
 80107f8:	bd10      	pop	{r4, pc}
 80107fa:	bf00      	nop
 80107fc:	08011ae9 	.word	0x08011ae9
 8010800:	08011b0f 	.word	0x08011b0f
 8010804:	08011b47 	.word	0x08011b47
 8010808:	08011b6b 	.word	0x08011b6b

0801080c <_cleanup_r>:
 801080c:	4901      	ldr	r1, [pc, #4]	; (8010814 <_cleanup_r+0x8>)
 801080e:	f000 b8af 	b.w	8010970 <_fwalk_reent>
 8010812:	bf00      	nop
 8010814:	08013875 	.word	0x08013875

08010818 <__sfmoreglue>:
 8010818:	b570      	push	{r4, r5, r6, lr}
 801081a:	1e4a      	subs	r2, r1, #1
 801081c:	2568      	movs	r5, #104	; 0x68
 801081e:	4355      	muls	r5, r2
 8010820:	460e      	mov	r6, r1
 8010822:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010826:	f000 f97b 	bl	8010b20 <_malloc_r>
 801082a:	4604      	mov	r4, r0
 801082c:	b140      	cbz	r0, 8010840 <__sfmoreglue+0x28>
 801082e:	2100      	movs	r1, #0
 8010830:	e9c0 1600 	strd	r1, r6, [r0]
 8010834:	300c      	adds	r0, #12
 8010836:	60a0      	str	r0, [r4, #8]
 8010838:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801083c:	f000 f918 	bl	8010a70 <memset>
 8010840:	4620      	mov	r0, r4
 8010842:	bd70      	pop	{r4, r5, r6, pc}

08010844 <__sfp_lock_acquire>:
 8010844:	4801      	ldr	r0, [pc, #4]	; (801084c <__sfp_lock_acquire+0x8>)
 8010846:	f000 b8d8 	b.w	80109fa <__retarget_lock_acquire_recursive>
 801084a:	bf00      	nop
 801084c:	20006e34 	.word	0x20006e34

08010850 <__sfp_lock_release>:
 8010850:	4801      	ldr	r0, [pc, #4]	; (8010858 <__sfp_lock_release+0x8>)
 8010852:	f000 b8d3 	b.w	80109fc <__retarget_lock_release_recursive>
 8010856:	bf00      	nop
 8010858:	20006e34 	.word	0x20006e34

0801085c <__sinit_lock_acquire>:
 801085c:	4801      	ldr	r0, [pc, #4]	; (8010864 <__sinit_lock_acquire+0x8>)
 801085e:	f000 b8cc 	b.w	80109fa <__retarget_lock_acquire_recursive>
 8010862:	bf00      	nop
 8010864:	20006e2f 	.word	0x20006e2f

08010868 <__sinit_lock_release>:
 8010868:	4801      	ldr	r0, [pc, #4]	; (8010870 <__sinit_lock_release+0x8>)
 801086a:	f000 b8c7 	b.w	80109fc <__retarget_lock_release_recursive>
 801086e:	bf00      	nop
 8010870:	20006e2f 	.word	0x20006e2f

08010874 <__sinit>:
 8010874:	b510      	push	{r4, lr}
 8010876:	4604      	mov	r4, r0
 8010878:	f7ff fff0 	bl	801085c <__sinit_lock_acquire>
 801087c:	69a3      	ldr	r3, [r4, #24]
 801087e:	b11b      	cbz	r3, 8010888 <__sinit+0x14>
 8010880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010884:	f7ff bff0 	b.w	8010868 <__sinit_lock_release>
 8010888:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801088c:	6523      	str	r3, [r4, #80]	; 0x50
 801088e:	4b13      	ldr	r3, [pc, #76]	; (80108dc <__sinit+0x68>)
 8010890:	4a13      	ldr	r2, [pc, #76]	; (80108e0 <__sinit+0x6c>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	62a2      	str	r2, [r4, #40]	; 0x28
 8010896:	42a3      	cmp	r3, r4
 8010898:	bf04      	itt	eq
 801089a:	2301      	moveq	r3, #1
 801089c:	61a3      	streq	r3, [r4, #24]
 801089e:	4620      	mov	r0, r4
 80108a0:	f000 f820 	bl	80108e4 <__sfp>
 80108a4:	6060      	str	r0, [r4, #4]
 80108a6:	4620      	mov	r0, r4
 80108a8:	f000 f81c 	bl	80108e4 <__sfp>
 80108ac:	60a0      	str	r0, [r4, #8]
 80108ae:	4620      	mov	r0, r4
 80108b0:	f000 f818 	bl	80108e4 <__sfp>
 80108b4:	2200      	movs	r2, #0
 80108b6:	60e0      	str	r0, [r4, #12]
 80108b8:	2104      	movs	r1, #4
 80108ba:	6860      	ldr	r0, [r4, #4]
 80108bc:	f7ff ff82 	bl	80107c4 <std>
 80108c0:	68a0      	ldr	r0, [r4, #8]
 80108c2:	2201      	movs	r2, #1
 80108c4:	2109      	movs	r1, #9
 80108c6:	f7ff ff7d 	bl	80107c4 <std>
 80108ca:	68e0      	ldr	r0, [r4, #12]
 80108cc:	2202      	movs	r2, #2
 80108ce:	2112      	movs	r1, #18
 80108d0:	f7ff ff78 	bl	80107c4 <std>
 80108d4:	2301      	movs	r3, #1
 80108d6:	61a3      	str	r3, [r4, #24]
 80108d8:	e7d2      	b.n	8010880 <__sinit+0xc>
 80108da:	bf00      	nop
 80108dc:	08015f3c 	.word	0x08015f3c
 80108e0:	0801080d 	.word	0x0801080d

080108e4 <__sfp>:
 80108e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108e6:	4607      	mov	r7, r0
 80108e8:	f7ff ffac 	bl	8010844 <__sfp_lock_acquire>
 80108ec:	4b1e      	ldr	r3, [pc, #120]	; (8010968 <__sfp+0x84>)
 80108ee:	681e      	ldr	r6, [r3, #0]
 80108f0:	69b3      	ldr	r3, [r6, #24]
 80108f2:	b913      	cbnz	r3, 80108fa <__sfp+0x16>
 80108f4:	4630      	mov	r0, r6
 80108f6:	f7ff ffbd 	bl	8010874 <__sinit>
 80108fa:	3648      	adds	r6, #72	; 0x48
 80108fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010900:	3b01      	subs	r3, #1
 8010902:	d503      	bpl.n	801090c <__sfp+0x28>
 8010904:	6833      	ldr	r3, [r6, #0]
 8010906:	b30b      	cbz	r3, 801094c <__sfp+0x68>
 8010908:	6836      	ldr	r6, [r6, #0]
 801090a:	e7f7      	b.n	80108fc <__sfp+0x18>
 801090c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010910:	b9d5      	cbnz	r5, 8010948 <__sfp+0x64>
 8010912:	4b16      	ldr	r3, [pc, #88]	; (801096c <__sfp+0x88>)
 8010914:	60e3      	str	r3, [r4, #12]
 8010916:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801091a:	6665      	str	r5, [r4, #100]	; 0x64
 801091c:	f000 f86c 	bl	80109f8 <__retarget_lock_init_recursive>
 8010920:	f7ff ff96 	bl	8010850 <__sfp_lock_release>
 8010924:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010928:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801092c:	6025      	str	r5, [r4, #0]
 801092e:	61a5      	str	r5, [r4, #24]
 8010930:	2208      	movs	r2, #8
 8010932:	4629      	mov	r1, r5
 8010934:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010938:	f000 f89a 	bl	8010a70 <memset>
 801093c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010940:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010944:	4620      	mov	r0, r4
 8010946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010948:	3468      	adds	r4, #104	; 0x68
 801094a:	e7d9      	b.n	8010900 <__sfp+0x1c>
 801094c:	2104      	movs	r1, #4
 801094e:	4638      	mov	r0, r7
 8010950:	f7ff ff62 	bl	8010818 <__sfmoreglue>
 8010954:	4604      	mov	r4, r0
 8010956:	6030      	str	r0, [r6, #0]
 8010958:	2800      	cmp	r0, #0
 801095a:	d1d5      	bne.n	8010908 <__sfp+0x24>
 801095c:	f7ff ff78 	bl	8010850 <__sfp_lock_release>
 8010960:	230c      	movs	r3, #12
 8010962:	603b      	str	r3, [r7, #0]
 8010964:	e7ee      	b.n	8010944 <__sfp+0x60>
 8010966:	bf00      	nop
 8010968:	08015f3c 	.word	0x08015f3c
 801096c:	ffff0001 	.word	0xffff0001

08010970 <_fwalk_reent>:
 8010970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010974:	4606      	mov	r6, r0
 8010976:	4688      	mov	r8, r1
 8010978:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801097c:	2700      	movs	r7, #0
 801097e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010982:	f1b9 0901 	subs.w	r9, r9, #1
 8010986:	d505      	bpl.n	8010994 <_fwalk_reent+0x24>
 8010988:	6824      	ldr	r4, [r4, #0]
 801098a:	2c00      	cmp	r4, #0
 801098c:	d1f7      	bne.n	801097e <_fwalk_reent+0xe>
 801098e:	4638      	mov	r0, r7
 8010990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010994:	89ab      	ldrh	r3, [r5, #12]
 8010996:	2b01      	cmp	r3, #1
 8010998:	d907      	bls.n	80109aa <_fwalk_reent+0x3a>
 801099a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801099e:	3301      	adds	r3, #1
 80109a0:	d003      	beq.n	80109aa <_fwalk_reent+0x3a>
 80109a2:	4629      	mov	r1, r5
 80109a4:	4630      	mov	r0, r6
 80109a6:	47c0      	blx	r8
 80109a8:	4307      	orrs	r7, r0
 80109aa:	3568      	adds	r5, #104	; 0x68
 80109ac:	e7e9      	b.n	8010982 <_fwalk_reent+0x12>
	...

080109b0 <__libc_init_array>:
 80109b0:	b570      	push	{r4, r5, r6, lr}
 80109b2:	4d0d      	ldr	r5, [pc, #52]	; (80109e8 <__libc_init_array+0x38>)
 80109b4:	4c0d      	ldr	r4, [pc, #52]	; (80109ec <__libc_init_array+0x3c>)
 80109b6:	1b64      	subs	r4, r4, r5
 80109b8:	10a4      	asrs	r4, r4, #2
 80109ba:	2600      	movs	r6, #0
 80109bc:	42a6      	cmp	r6, r4
 80109be:	d109      	bne.n	80109d4 <__libc_init_array+0x24>
 80109c0:	4d0b      	ldr	r5, [pc, #44]	; (80109f0 <__libc_init_array+0x40>)
 80109c2:	4c0c      	ldr	r4, [pc, #48]	; (80109f4 <__libc_init_array+0x44>)
 80109c4:	f004 fff8 	bl	80159b8 <_init>
 80109c8:	1b64      	subs	r4, r4, r5
 80109ca:	10a4      	asrs	r4, r4, #2
 80109cc:	2600      	movs	r6, #0
 80109ce:	42a6      	cmp	r6, r4
 80109d0:	d105      	bne.n	80109de <__libc_init_array+0x2e>
 80109d2:	bd70      	pop	{r4, r5, r6, pc}
 80109d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80109d8:	4798      	blx	r3
 80109da:	3601      	adds	r6, #1
 80109dc:	e7ee      	b.n	80109bc <__libc_init_array+0xc>
 80109de:	f855 3b04 	ldr.w	r3, [r5], #4
 80109e2:	4798      	blx	r3
 80109e4:	3601      	adds	r6, #1
 80109e6:	e7f2      	b.n	80109ce <__libc_init_array+0x1e>
 80109e8:	080163a8 	.word	0x080163a8
 80109ec:	080163a8 	.word	0x080163a8
 80109f0:	080163a8 	.word	0x080163a8
 80109f4:	080163b0 	.word	0x080163b0

080109f8 <__retarget_lock_init_recursive>:
 80109f8:	4770      	bx	lr

080109fa <__retarget_lock_acquire_recursive>:
 80109fa:	4770      	bx	lr

080109fc <__retarget_lock_release_recursive>:
 80109fc:	4770      	bx	lr
	...

08010a00 <malloc>:
 8010a00:	4b02      	ldr	r3, [pc, #8]	; (8010a0c <malloc+0xc>)
 8010a02:	4601      	mov	r1, r0
 8010a04:	6818      	ldr	r0, [r3, #0]
 8010a06:	f000 b88b 	b.w	8010b20 <_malloc_r>
 8010a0a:	bf00      	nop
 8010a0c:	20000188 	.word	0x20000188

08010a10 <free>:
 8010a10:	4b02      	ldr	r3, [pc, #8]	; (8010a1c <free+0xc>)
 8010a12:	4601      	mov	r1, r0
 8010a14:	6818      	ldr	r0, [r3, #0]
 8010a16:	f000 b833 	b.w	8010a80 <_free_r>
 8010a1a:	bf00      	nop
 8010a1c:	20000188 	.word	0x20000188

08010a20 <memcpy>:
 8010a20:	440a      	add	r2, r1
 8010a22:	4291      	cmp	r1, r2
 8010a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a28:	d100      	bne.n	8010a2c <memcpy+0xc>
 8010a2a:	4770      	bx	lr
 8010a2c:	b510      	push	{r4, lr}
 8010a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a36:	4291      	cmp	r1, r2
 8010a38:	d1f9      	bne.n	8010a2e <memcpy+0xe>
 8010a3a:	bd10      	pop	{r4, pc}

08010a3c <memmove>:
 8010a3c:	4288      	cmp	r0, r1
 8010a3e:	b510      	push	{r4, lr}
 8010a40:	eb01 0402 	add.w	r4, r1, r2
 8010a44:	d902      	bls.n	8010a4c <memmove+0x10>
 8010a46:	4284      	cmp	r4, r0
 8010a48:	4623      	mov	r3, r4
 8010a4a:	d807      	bhi.n	8010a5c <memmove+0x20>
 8010a4c:	1e43      	subs	r3, r0, #1
 8010a4e:	42a1      	cmp	r1, r4
 8010a50:	d008      	beq.n	8010a64 <memmove+0x28>
 8010a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010a5a:	e7f8      	b.n	8010a4e <memmove+0x12>
 8010a5c:	4402      	add	r2, r0
 8010a5e:	4601      	mov	r1, r0
 8010a60:	428a      	cmp	r2, r1
 8010a62:	d100      	bne.n	8010a66 <memmove+0x2a>
 8010a64:	bd10      	pop	{r4, pc}
 8010a66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010a6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010a6e:	e7f7      	b.n	8010a60 <memmove+0x24>

08010a70 <memset>:
 8010a70:	4402      	add	r2, r0
 8010a72:	4603      	mov	r3, r0
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d100      	bne.n	8010a7a <memset+0xa>
 8010a78:	4770      	bx	lr
 8010a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8010a7e:	e7f9      	b.n	8010a74 <memset+0x4>

08010a80 <_free_r>:
 8010a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a82:	2900      	cmp	r1, #0
 8010a84:	d048      	beq.n	8010b18 <_free_r+0x98>
 8010a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a8a:	9001      	str	r0, [sp, #4]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	f1a1 0404 	sub.w	r4, r1, #4
 8010a92:	bfb8      	it	lt
 8010a94:	18e4      	addlt	r4, r4, r3
 8010a96:	f003 fad3 	bl	8014040 <__malloc_lock>
 8010a9a:	4a20      	ldr	r2, [pc, #128]	; (8010b1c <_free_r+0x9c>)
 8010a9c:	9801      	ldr	r0, [sp, #4]
 8010a9e:	6813      	ldr	r3, [r2, #0]
 8010aa0:	4615      	mov	r5, r2
 8010aa2:	b933      	cbnz	r3, 8010ab2 <_free_r+0x32>
 8010aa4:	6063      	str	r3, [r4, #4]
 8010aa6:	6014      	str	r4, [r2, #0]
 8010aa8:	b003      	add	sp, #12
 8010aaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010aae:	f003 bacd 	b.w	801404c <__malloc_unlock>
 8010ab2:	42a3      	cmp	r3, r4
 8010ab4:	d90b      	bls.n	8010ace <_free_r+0x4e>
 8010ab6:	6821      	ldr	r1, [r4, #0]
 8010ab8:	1862      	adds	r2, r4, r1
 8010aba:	4293      	cmp	r3, r2
 8010abc:	bf04      	itt	eq
 8010abe:	681a      	ldreq	r2, [r3, #0]
 8010ac0:	685b      	ldreq	r3, [r3, #4]
 8010ac2:	6063      	str	r3, [r4, #4]
 8010ac4:	bf04      	itt	eq
 8010ac6:	1852      	addeq	r2, r2, r1
 8010ac8:	6022      	streq	r2, [r4, #0]
 8010aca:	602c      	str	r4, [r5, #0]
 8010acc:	e7ec      	b.n	8010aa8 <_free_r+0x28>
 8010ace:	461a      	mov	r2, r3
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	b10b      	cbz	r3, 8010ad8 <_free_r+0x58>
 8010ad4:	42a3      	cmp	r3, r4
 8010ad6:	d9fa      	bls.n	8010ace <_free_r+0x4e>
 8010ad8:	6811      	ldr	r1, [r2, #0]
 8010ada:	1855      	adds	r5, r2, r1
 8010adc:	42a5      	cmp	r5, r4
 8010ade:	d10b      	bne.n	8010af8 <_free_r+0x78>
 8010ae0:	6824      	ldr	r4, [r4, #0]
 8010ae2:	4421      	add	r1, r4
 8010ae4:	1854      	adds	r4, r2, r1
 8010ae6:	42a3      	cmp	r3, r4
 8010ae8:	6011      	str	r1, [r2, #0]
 8010aea:	d1dd      	bne.n	8010aa8 <_free_r+0x28>
 8010aec:	681c      	ldr	r4, [r3, #0]
 8010aee:	685b      	ldr	r3, [r3, #4]
 8010af0:	6053      	str	r3, [r2, #4]
 8010af2:	4421      	add	r1, r4
 8010af4:	6011      	str	r1, [r2, #0]
 8010af6:	e7d7      	b.n	8010aa8 <_free_r+0x28>
 8010af8:	d902      	bls.n	8010b00 <_free_r+0x80>
 8010afa:	230c      	movs	r3, #12
 8010afc:	6003      	str	r3, [r0, #0]
 8010afe:	e7d3      	b.n	8010aa8 <_free_r+0x28>
 8010b00:	6825      	ldr	r5, [r4, #0]
 8010b02:	1961      	adds	r1, r4, r5
 8010b04:	428b      	cmp	r3, r1
 8010b06:	bf04      	itt	eq
 8010b08:	6819      	ldreq	r1, [r3, #0]
 8010b0a:	685b      	ldreq	r3, [r3, #4]
 8010b0c:	6063      	str	r3, [r4, #4]
 8010b0e:	bf04      	itt	eq
 8010b10:	1949      	addeq	r1, r1, r5
 8010b12:	6021      	streq	r1, [r4, #0]
 8010b14:	6054      	str	r4, [r2, #4]
 8010b16:	e7c7      	b.n	8010aa8 <_free_r+0x28>
 8010b18:	b003      	add	sp, #12
 8010b1a:	bd30      	pop	{r4, r5, pc}
 8010b1c:	20004fa4 	.word	0x20004fa4

08010b20 <_malloc_r>:
 8010b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b22:	1ccd      	adds	r5, r1, #3
 8010b24:	f025 0503 	bic.w	r5, r5, #3
 8010b28:	3508      	adds	r5, #8
 8010b2a:	2d0c      	cmp	r5, #12
 8010b2c:	bf38      	it	cc
 8010b2e:	250c      	movcc	r5, #12
 8010b30:	2d00      	cmp	r5, #0
 8010b32:	4606      	mov	r6, r0
 8010b34:	db01      	blt.n	8010b3a <_malloc_r+0x1a>
 8010b36:	42a9      	cmp	r1, r5
 8010b38:	d903      	bls.n	8010b42 <_malloc_r+0x22>
 8010b3a:	230c      	movs	r3, #12
 8010b3c:	6033      	str	r3, [r6, #0]
 8010b3e:	2000      	movs	r0, #0
 8010b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b42:	f003 fa7d 	bl	8014040 <__malloc_lock>
 8010b46:	4921      	ldr	r1, [pc, #132]	; (8010bcc <_malloc_r+0xac>)
 8010b48:	680a      	ldr	r2, [r1, #0]
 8010b4a:	4614      	mov	r4, r2
 8010b4c:	b99c      	cbnz	r4, 8010b76 <_malloc_r+0x56>
 8010b4e:	4f20      	ldr	r7, [pc, #128]	; (8010bd0 <_malloc_r+0xb0>)
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	b923      	cbnz	r3, 8010b5e <_malloc_r+0x3e>
 8010b54:	4621      	mov	r1, r4
 8010b56:	4630      	mov	r0, r6
 8010b58:	f000 ff20 	bl	801199c <_sbrk_r>
 8010b5c:	6038      	str	r0, [r7, #0]
 8010b5e:	4629      	mov	r1, r5
 8010b60:	4630      	mov	r0, r6
 8010b62:	f000 ff1b 	bl	801199c <_sbrk_r>
 8010b66:	1c43      	adds	r3, r0, #1
 8010b68:	d123      	bne.n	8010bb2 <_malloc_r+0x92>
 8010b6a:	230c      	movs	r3, #12
 8010b6c:	6033      	str	r3, [r6, #0]
 8010b6e:	4630      	mov	r0, r6
 8010b70:	f003 fa6c 	bl	801404c <__malloc_unlock>
 8010b74:	e7e3      	b.n	8010b3e <_malloc_r+0x1e>
 8010b76:	6823      	ldr	r3, [r4, #0]
 8010b78:	1b5b      	subs	r3, r3, r5
 8010b7a:	d417      	bmi.n	8010bac <_malloc_r+0x8c>
 8010b7c:	2b0b      	cmp	r3, #11
 8010b7e:	d903      	bls.n	8010b88 <_malloc_r+0x68>
 8010b80:	6023      	str	r3, [r4, #0]
 8010b82:	441c      	add	r4, r3
 8010b84:	6025      	str	r5, [r4, #0]
 8010b86:	e004      	b.n	8010b92 <_malloc_r+0x72>
 8010b88:	6863      	ldr	r3, [r4, #4]
 8010b8a:	42a2      	cmp	r2, r4
 8010b8c:	bf0c      	ite	eq
 8010b8e:	600b      	streq	r3, [r1, #0]
 8010b90:	6053      	strne	r3, [r2, #4]
 8010b92:	4630      	mov	r0, r6
 8010b94:	f003 fa5a 	bl	801404c <__malloc_unlock>
 8010b98:	f104 000b 	add.w	r0, r4, #11
 8010b9c:	1d23      	adds	r3, r4, #4
 8010b9e:	f020 0007 	bic.w	r0, r0, #7
 8010ba2:	1ac2      	subs	r2, r0, r3
 8010ba4:	d0cc      	beq.n	8010b40 <_malloc_r+0x20>
 8010ba6:	1a1b      	subs	r3, r3, r0
 8010ba8:	50a3      	str	r3, [r4, r2]
 8010baa:	e7c9      	b.n	8010b40 <_malloc_r+0x20>
 8010bac:	4622      	mov	r2, r4
 8010bae:	6864      	ldr	r4, [r4, #4]
 8010bb0:	e7cc      	b.n	8010b4c <_malloc_r+0x2c>
 8010bb2:	1cc4      	adds	r4, r0, #3
 8010bb4:	f024 0403 	bic.w	r4, r4, #3
 8010bb8:	42a0      	cmp	r0, r4
 8010bba:	d0e3      	beq.n	8010b84 <_malloc_r+0x64>
 8010bbc:	1a21      	subs	r1, r4, r0
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	f000 feec 	bl	801199c <_sbrk_r>
 8010bc4:	3001      	adds	r0, #1
 8010bc6:	d1dd      	bne.n	8010b84 <_malloc_r+0x64>
 8010bc8:	e7cf      	b.n	8010b6a <_malloc_r+0x4a>
 8010bca:	bf00      	nop
 8010bcc:	20004fa4 	.word	0x20004fa4
 8010bd0:	20004fa8 	.word	0x20004fa8

08010bd4 <__cvt>:
 8010bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010bd8:	ec55 4b10 	vmov	r4, r5, d0
 8010bdc:	2d00      	cmp	r5, #0
 8010bde:	460e      	mov	r6, r1
 8010be0:	4619      	mov	r1, r3
 8010be2:	462b      	mov	r3, r5
 8010be4:	bfbb      	ittet	lt
 8010be6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010bea:	461d      	movlt	r5, r3
 8010bec:	2300      	movge	r3, #0
 8010bee:	232d      	movlt	r3, #45	; 0x2d
 8010bf0:	700b      	strb	r3, [r1, #0]
 8010bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bf4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010bf8:	4691      	mov	r9, r2
 8010bfa:	f023 0820 	bic.w	r8, r3, #32
 8010bfe:	bfbc      	itt	lt
 8010c00:	4622      	movlt	r2, r4
 8010c02:	4614      	movlt	r4, r2
 8010c04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010c08:	d005      	beq.n	8010c16 <__cvt+0x42>
 8010c0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010c0e:	d100      	bne.n	8010c12 <__cvt+0x3e>
 8010c10:	3601      	adds	r6, #1
 8010c12:	2102      	movs	r1, #2
 8010c14:	e000      	b.n	8010c18 <__cvt+0x44>
 8010c16:	2103      	movs	r1, #3
 8010c18:	ab03      	add	r3, sp, #12
 8010c1a:	9301      	str	r3, [sp, #4]
 8010c1c:	ab02      	add	r3, sp, #8
 8010c1e:	9300      	str	r3, [sp, #0]
 8010c20:	ec45 4b10 	vmov	d0, r4, r5
 8010c24:	4653      	mov	r3, sl
 8010c26:	4632      	mov	r2, r6
 8010c28:	f001 ffb2 	bl	8012b90 <_dtoa_r>
 8010c2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010c30:	4607      	mov	r7, r0
 8010c32:	d102      	bne.n	8010c3a <__cvt+0x66>
 8010c34:	f019 0f01 	tst.w	r9, #1
 8010c38:	d022      	beq.n	8010c80 <__cvt+0xac>
 8010c3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010c3e:	eb07 0906 	add.w	r9, r7, r6
 8010c42:	d110      	bne.n	8010c66 <__cvt+0x92>
 8010c44:	783b      	ldrb	r3, [r7, #0]
 8010c46:	2b30      	cmp	r3, #48	; 0x30
 8010c48:	d10a      	bne.n	8010c60 <__cvt+0x8c>
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	4620      	mov	r0, r4
 8010c50:	4629      	mov	r1, r5
 8010c52:	f7ef ff49 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c56:	b918      	cbnz	r0, 8010c60 <__cvt+0x8c>
 8010c58:	f1c6 0601 	rsb	r6, r6, #1
 8010c5c:	f8ca 6000 	str.w	r6, [sl]
 8010c60:	f8da 3000 	ldr.w	r3, [sl]
 8010c64:	4499      	add	r9, r3
 8010c66:	2200      	movs	r2, #0
 8010c68:	2300      	movs	r3, #0
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	4629      	mov	r1, r5
 8010c6e:	f7ef ff3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c72:	b108      	cbz	r0, 8010c78 <__cvt+0xa4>
 8010c74:	f8cd 900c 	str.w	r9, [sp, #12]
 8010c78:	2230      	movs	r2, #48	; 0x30
 8010c7a:	9b03      	ldr	r3, [sp, #12]
 8010c7c:	454b      	cmp	r3, r9
 8010c7e:	d307      	bcc.n	8010c90 <__cvt+0xbc>
 8010c80:	9b03      	ldr	r3, [sp, #12]
 8010c82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010c84:	1bdb      	subs	r3, r3, r7
 8010c86:	4638      	mov	r0, r7
 8010c88:	6013      	str	r3, [r2, #0]
 8010c8a:	b004      	add	sp, #16
 8010c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c90:	1c59      	adds	r1, r3, #1
 8010c92:	9103      	str	r1, [sp, #12]
 8010c94:	701a      	strb	r2, [r3, #0]
 8010c96:	e7f0      	b.n	8010c7a <__cvt+0xa6>

08010c98 <__exponent>:
 8010c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2900      	cmp	r1, #0
 8010c9e:	bfb8      	it	lt
 8010ca0:	4249      	neglt	r1, r1
 8010ca2:	f803 2b02 	strb.w	r2, [r3], #2
 8010ca6:	bfb4      	ite	lt
 8010ca8:	222d      	movlt	r2, #45	; 0x2d
 8010caa:	222b      	movge	r2, #43	; 0x2b
 8010cac:	2909      	cmp	r1, #9
 8010cae:	7042      	strb	r2, [r0, #1]
 8010cb0:	dd2a      	ble.n	8010d08 <__exponent+0x70>
 8010cb2:	f10d 0407 	add.w	r4, sp, #7
 8010cb6:	46a4      	mov	ip, r4
 8010cb8:	270a      	movs	r7, #10
 8010cba:	46a6      	mov	lr, r4
 8010cbc:	460a      	mov	r2, r1
 8010cbe:	fb91 f6f7 	sdiv	r6, r1, r7
 8010cc2:	fb07 1516 	mls	r5, r7, r6, r1
 8010cc6:	3530      	adds	r5, #48	; 0x30
 8010cc8:	2a63      	cmp	r2, #99	; 0x63
 8010cca:	f104 34ff 	add.w	r4, r4, #4294967295
 8010cce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010cd2:	4631      	mov	r1, r6
 8010cd4:	dcf1      	bgt.n	8010cba <__exponent+0x22>
 8010cd6:	3130      	adds	r1, #48	; 0x30
 8010cd8:	f1ae 0502 	sub.w	r5, lr, #2
 8010cdc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010ce0:	1c44      	adds	r4, r0, #1
 8010ce2:	4629      	mov	r1, r5
 8010ce4:	4561      	cmp	r1, ip
 8010ce6:	d30a      	bcc.n	8010cfe <__exponent+0x66>
 8010ce8:	f10d 0209 	add.w	r2, sp, #9
 8010cec:	eba2 020e 	sub.w	r2, r2, lr
 8010cf0:	4565      	cmp	r5, ip
 8010cf2:	bf88      	it	hi
 8010cf4:	2200      	movhi	r2, #0
 8010cf6:	4413      	add	r3, r2
 8010cf8:	1a18      	subs	r0, r3, r0
 8010cfa:	b003      	add	sp, #12
 8010cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d02:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010d06:	e7ed      	b.n	8010ce4 <__exponent+0x4c>
 8010d08:	2330      	movs	r3, #48	; 0x30
 8010d0a:	3130      	adds	r1, #48	; 0x30
 8010d0c:	7083      	strb	r3, [r0, #2]
 8010d0e:	70c1      	strb	r1, [r0, #3]
 8010d10:	1d03      	adds	r3, r0, #4
 8010d12:	e7f1      	b.n	8010cf8 <__exponent+0x60>

08010d14 <_printf_float>:
 8010d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d18:	ed2d 8b02 	vpush	{d8}
 8010d1c:	b08d      	sub	sp, #52	; 0x34
 8010d1e:	460c      	mov	r4, r1
 8010d20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010d24:	4616      	mov	r6, r2
 8010d26:	461f      	mov	r7, r3
 8010d28:	4605      	mov	r5, r0
 8010d2a:	f003 f961 	bl	8013ff0 <_localeconv_r>
 8010d2e:	f8d0 a000 	ldr.w	sl, [r0]
 8010d32:	4650      	mov	r0, sl
 8010d34:	f7ef fa5c 	bl	80001f0 <strlen>
 8010d38:	2300      	movs	r3, #0
 8010d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8010d3c:	6823      	ldr	r3, [r4, #0]
 8010d3e:	9305      	str	r3, [sp, #20]
 8010d40:	f8d8 3000 	ldr.w	r3, [r8]
 8010d44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010d48:	3307      	adds	r3, #7
 8010d4a:	f023 0307 	bic.w	r3, r3, #7
 8010d4e:	f103 0208 	add.w	r2, r3, #8
 8010d52:	f8c8 2000 	str.w	r2, [r8]
 8010d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010d5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010d62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010d66:	9307      	str	r3, [sp, #28]
 8010d68:	f8cd 8018 	str.w	r8, [sp, #24]
 8010d6c:	ee08 0a10 	vmov	s16, r0
 8010d70:	4b9f      	ldr	r3, [pc, #636]	; (8010ff0 <_printf_float+0x2dc>)
 8010d72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d76:	f04f 32ff 	mov.w	r2, #4294967295
 8010d7a:	f7ef fee7 	bl	8000b4c <__aeabi_dcmpun>
 8010d7e:	bb88      	cbnz	r0, 8010de4 <_printf_float+0xd0>
 8010d80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d84:	4b9a      	ldr	r3, [pc, #616]	; (8010ff0 <_printf_float+0x2dc>)
 8010d86:	f04f 32ff 	mov.w	r2, #4294967295
 8010d8a:	f7ef fec1 	bl	8000b10 <__aeabi_dcmple>
 8010d8e:	bb48      	cbnz	r0, 8010de4 <_printf_float+0xd0>
 8010d90:	2200      	movs	r2, #0
 8010d92:	2300      	movs	r3, #0
 8010d94:	4640      	mov	r0, r8
 8010d96:	4649      	mov	r1, r9
 8010d98:	f7ef feb0 	bl	8000afc <__aeabi_dcmplt>
 8010d9c:	b110      	cbz	r0, 8010da4 <_printf_float+0x90>
 8010d9e:	232d      	movs	r3, #45	; 0x2d
 8010da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010da4:	4b93      	ldr	r3, [pc, #588]	; (8010ff4 <_printf_float+0x2e0>)
 8010da6:	4894      	ldr	r0, [pc, #592]	; (8010ff8 <_printf_float+0x2e4>)
 8010da8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010dac:	bf94      	ite	ls
 8010dae:	4698      	movls	r8, r3
 8010db0:	4680      	movhi	r8, r0
 8010db2:	2303      	movs	r3, #3
 8010db4:	6123      	str	r3, [r4, #16]
 8010db6:	9b05      	ldr	r3, [sp, #20]
 8010db8:	f023 0204 	bic.w	r2, r3, #4
 8010dbc:	6022      	str	r2, [r4, #0]
 8010dbe:	f04f 0900 	mov.w	r9, #0
 8010dc2:	9700      	str	r7, [sp, #0]
 8010dc4:	4633      	mov	r3, r6
 8010dc6:	aa0b      	add	r2, sp, #44	; 0x2c
 8010dc8:	4621      	mov	r1, r4
 8010dca:	4628      	mov	r0, r5
 8010dcc:	f000 f9d8 	bl	8011180 <_printf_common>
 8010dd0:	3001      	adds	r0, #1
 8010dd2:	f040 8090 	bne.w	8010ef6 <_printf_float+0x1e2>
 8010dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8010dda:	b00d      	add	sp, #52	; 0x34
 8010ddc:	ecbd 8b02 	vpop	{d8}
 8010de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010de4:	4642      	mov	r2, r8
 8010de6:	464b      	mov	r3, r9
 8010de8:	4640      	mov	r0, r8
 8010dea:	4649      	mov	r1, r9
 8010dec:	f7ef feae 	bl	8000b4c <__aeabi_dcmpun>
 8010df0:	b140      	cbz	r0, 8010e04 <_printf_float+0xf0>
 8010df2:	464b      	mov	r3, r9
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	bfbc      	itt	lt
 8010df8:	232d      	movlt	r3, #45	; 0x2d
 8010dfa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010dfe:	487f      	ldr	r0, [pc, #508]	; (8010ffc <_printf_float+0x2e8>)
 8010e00:	4b7f      	ldr	r3, [pc, #508]	; (8011000 <_printf_float+0x2ec>)
 8010e02:	e7d1      	b.n	8010da8 <_printf_float+0x94>
 8010e04:	6863      	ldr	r3, [r4, #4]
 8010e06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010e0a:	9206      	str	r2, [sp, #24]
 8010e0c:	1c5a      	adds	r2, r3, #1
 8010e0e:	d13f      	bne.n	8010e90 <_printf_float+0x17c>
 8010e10:	2306      	movs	r3, #6
 8010e12:	6063      	str	r3, [r4, #4]
 8010e14:	9b05      	ldr	r3, [sp, #20]
 8010e16:	6861      	ldr	r1, [r4, #4]
 8010e18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	9303      	str	r3, [sp, #12]
 8010e20:	ab0a      	add	r3, sp, #40	; 0x28
 8010e22:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010e26:	ab09      	add	r3, sp, #36	; 0x24
 8010e28:	ec49 8b10 	vmov	d0, r8, r9
 8010e2c:	9300      	str	r3, [sp, #0]
 8010e2e:	6022      	str	r2, [r4, #0]
 8010e30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010e34:	4628      	mov	r0, r5
 8010e36:	f7ff fecd 	bl	8010bd4 <__cvt>
 8010e3a:	9b06      	ldr	r3, [sp, #24]
 8010e3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e3e:	2b47      	cmp	r3, #71	; 0x47
 8010e40:	4680      	mov	r8, r0
 8010e42:	d108      	bne.n	8010e56 <_printf_float+0x142>
 8010e44:	1cc8      	adds	r0, r1, #3
 8010e46:	db02      	blt.n	8010e4e <_printf_float+0x13a>
 8010e48:	6863      	ldr	r3, [r4, #4]
 8010e4a:	4299      	cmp	r1, r3
 8010e4c:	dd41      	ble.n	8010ed2 <_printf_float+0x1be>
 8010e4e:	f1ab 0b02 	sub.w	fp, fp, #2
 8010e52:	fa5f fb8b 	uxtb.w	fp, fp
 8010e56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010e5a:	d820      	bhi.n	8010e9e <_printf_float+0x18a>
 8010e5c:	3901      	subs	r1, #1
 8010e5e:	465a      	mov	r2, fp
 8010e60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010e64:	9109      	str	r1, [sp, #36]	; 0x24
 8010e66:	f7ff ff17 	bl	8010c98 <__exponent>
 8010e6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e6c:	1813      	adds	r3, r2, r0
 8010e6e:	2a01      	cmp	r2, #1
 8010e70:	4681      	mov	r9, r0
 8010e72:	6123      	str	r3, [r4, #16]
 8010e74:	dc02      	bgt.n	8010e7c <_printf_float+0x168>
 8010e76:	6822      	ldr	r2, [r4, #0]
 8010e78:	07d2      	lsls	r2, r2, #31
 8010e7a:	d501      	bpl.n	8010e80 <_printf_float+0x16c>
 8010e7c:	3301      	adds	r3, #1
 8010e7e:	6123      	str	r3, [r4, #16]
 8010e80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d09c      	beq.n	8010dc2 <_printf_float+0xae>
 8010e88:	232d      	movs	r3, #45	; 0x2d
 8010e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e8e:	e798      	b.n	8010dc2 <_printf_float+0xae>
 8010e90:	9a06      	ldr	r2, [sp, #24]
 8010e92:	2a47      	cmp	r2, #71	; 0x47
 8010e94:	d1be      	bne.n	8010e14 <_printf_float+0x100>
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d1bc      	bne.n	8010e14 <_printf_float+0x100>
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	e7b9      	b.n	8010e12 <_printf_float+0xfe>
 8010e9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010ea2:	d118      	bne.n	8010ed6 <_printf_float+0x1c2>
 8010ea4:	2900      	cmp	r1, #0
 8010ea6:	6863      	ldr	r3, [r4, #4]
 8010ea8:	dd0b      	ble.n	8010ec2 <_printf_float+0x1ae>
 8010eaa:	6121      	str	r1, [r4, #16]
 8010eac:	b913      	cbnz	r3, 8010eb4 <_printf_float+0x1a0>
 8010eae:	6822      	ldr	r2, [r4, #0]
 8010eb0:	07d0      	lsls	r0, r2, #31
 8010eb2:	d502      	bpl.n	8010eba <_printf_float+0x1a6>
 8010eb4:	3301      	adds	r3, #1
 8010eb6:	440b      	add	r3, r1
 8010eb8:	6123      	str	r3, [r4, #16]
 8010eba:	65a1      	str	r1, [r4, #88]	; 0x58
 8010ebc:	f04f 0900 	mov.w	r9, #0
 8010ec0:	e7de      	b.n	8010e80 <_printf_float+0x16c>
 8010ec2:	b913      	cbnz	r3, 8010eca <_printf_float+0x1b6>
 8010ec4:	6822      	ldr	r2, [r4, #0]
 8010ec6:	07d2      	lsls	r2, r2, #31
 8010ec8:	d501      	bpl.n	8010ece <_printf_float+0x1ba>
 8010eca:	3302      	adds	r3, #2
 8010ecc:	e7f4      	b.n	8010eb8 <_printf_float+0x1a4>
 8010ece:	2301      	movs	r3, #1
 8010ed0:	e7f2      	b.n	8010eb8 <_printf_float+0x1a4>
 8010ed2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ed8:	4299      	cmp	r1, r3
 8010eda:	db05      	blt.n	8010ee8 <_printf_float+0x1d4>
 8010edc:	6823      	ldr	r3, [r4, #0]
 8010ede:	6121      	str	r1, [r4, #16]
 8010ee0:	07d8      	lsls	r0, r3, #31
 8010ee2:	d5ea      	bpl.n	8010eba <_printf_float+0x1a6>
 8010ee4:	1c4b      	adds	r3, r1, #1
 8010ee6:	e7e7      	b.n	8010eb8 <_printf_float+0x1a4>
 8010ee8:	2900      	cmp	r1, #0
 8010eea:	bfd4      	ite	le
 8010eec:	f1c1 0202 	rsble	r2, r1, #2
 8010ef0:	2201      	movgt	r2, #1
 8010ef2:	4413      	add	r3, r2
 8010ef4:	e7e0      	b.n	8010eb8 <_printf_float+0x1a4>
 8010ef6:	6823      	ldr	r3, [r4, #0]
 8010ef8:	055a      	lsls	r2, r3, #21
 8010efa:	d407      	bmi.n	8010f0c <_printf_float+0x1f8>
 8010efc:	6923      	ldr	r3, [r4, #16]
 8010efe:	4642      	mov	r2, r8
 8010f00:	4631      	mov	r1, r6
 8010f02:	4628      	mov	r0, r5
 8010f04:	47b8      	blx	r7
 8010f06:	3001      	adds	r0, #1
 8010f08:	d12c      	bne.n	8010f64 <_printf_float+0x250>
 8010f0a:	e764      	b.n	8010dd6 <_printf_float+0xc2>
 8010f0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010f10:	f240 80e0 	bls.w	80110d4 <_printf_float+0x3c0>
 8010f14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010f18:	2200      	movs	r2, #0
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	f7ef fde4 	bl	8000ae8 <__aeabi_dcmpeq>
 8010f20:	2800      	cmp	r0, #0
 8010f22:	d034      	beq.n	8010f8e <_printf_float+0x27a>
 8010f24:	4a37      	ldr	r2, [pc, #220]	; (8011004 <_printf_float+0x2f0>)
 8010f26:	2301      	movs	r3, #1
 8010f28:	4631      	mov	r1, r6
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	47b8      	blx	r7
 8010f2e:	3001      	adds	r0, #1
 8010f30:	f43f af51 	beq.w	8010dd6 <_printf_float+0xc2>
 8010f34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	db02      	blt.n	8010f42 <_printf_float+0x22e>
 8010f3c:	6823      	ldr	r3, [r4, #0]
 8010f3e:	07d8      	lsls	r0, r3, #31
 8010f40:	d510      	bpl.n	8010f64 <_printf_float+0x250>
 8010f42:	ee18 3a10 	vmov	r3, s16
 8010f46:	4652      	mov	r2, sl
 8010f48:	4631      	mov	r1, r6
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	47b8      	blx	r7
 8010f4e:	3001      	adds	r0, #1
 8010f50:	f43f af41 	beq.w	8010dd6 <_printf_float+0xc2>
 8010f54:	f04f 0800 	mov.w	r8, #0
 8010f58:	f104 091a 	add.w	r9, r4, #26
 8010f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f5e:	3b01      	subs	r3, #1
 8010f60:	4543      	cmp	r3, r8
 8010f62:	dc09      	bgt.n	8010f78 <_printf_float+0x264>
 8010f64:	6823      	ldr	r3, [r4, #0]
 8010f66:	079b      	lsls	r3, r3, #30
 8010f68:	f100 8105 	bmi.w	8011176 <_printf_float+0x462>
 8010f6c:	68e0      	ldr	r0, [r4, #12]
 8010f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f70:	4298      	cmp	r0, r3
 8010f72:	bfb8      	it	lt
 8010f74:	4618      	movlt	r0, r3
 8010f76:	e730      	b.n	8010dda <_printf_float+0xc6>
 8010f78:	2301      	movs	r3, #1
 8010f7a:	464a      	mov	r2, r9
 8010f7c:	4631      	mov	r1, r6
 8010f7e:	4628      	mov	r0, r5
 8010f80:	47b8      	blx	r7
 8010f82:	3001      	adds	r0, #1
 8010f84:	f43f af27 	beq.w	8010dd6 <_printf_float+0xc2>
 8010f88:	f108 0801 	add.w	r8, r8, #1
 8010f8c:	e7e6      	b.n	8010f5c <_printf_float+0x248>
 8010f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	dc39      	bgt.n	8011008 <_printf_float+0x2f4>
 8010f94:	4a1b      	ldr	r2, [pc, #108]	; (8011004 <_printf_float+0x2f0>)
 8010f96:	2301      	movs	r3, #1
 8010f98:	4631      	mov	r1, r6
 8010f9a:	4628      	mov	r0, r5
 8010f9c:	47b8      	blx	r7
 8010f9e:	3001      	adds	r0, #1
 8010fa0:	f43f af19 	beq.w	8010dd6 <_printf_float+0xc2>
 8010fa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010fa8:	4313      	orrs	r3, r2
 8010faa:	d102      	bne.n	8010fb2 <_printf_float+0x29e>
 8010fac:	6823      	ldr	r3, [r4, #0]
 8010fae:	07d9      	lsls	r1, r3, #31
 8010fb0:	d5d8      	bpl.n	8010f64 <_printf_float+0x250>
 8010fb2:	ee18 3a10 	vmov	r3, s16
 8010fb6:	4652      	mov	r2, sl
 8010fb8:	4631      	mov	r1, r6
 8010fba:	4628      	mov	r0, r5
 8010fbc:	47b8      	blx	r7
 8010fbe:	3001      	adds	r0, #1
 8010fc0:	f43f af09 	beq.w	8010dd6 <_printf_float+0xc2>
 8010fc4:	f04f 0900 	mov.w	r9, #0
 8010fc8:	f104 0a1a 	add.w	sl, r4, #26
 8010fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fce:	425b      	negs	r3, r3
 8010fd0:	454b      	cmp	r3, r9
 8010fd2:	dc01      	bgt.n	8010fd8 <_printf_float+0x2c4>
 8010fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fd6:	e792      	b.n	8010efe <_printf_float+0x1ea>
 8010fd8:	2301      	movs	r3, #1
 8010fda:	4652      	mov	r2, sl
 8010fdc:	4631      	mov	r1, r6
 8010fde:	4628      	mov	r0, r5
 8010fe0:	47b8      	blx	r7
 8010fe2:	3001      	adds	r0, #1
 8010fe4:	f43f aef7 	beq.w	8010dd6 <_printf_float+0xc2>
 8010fe8:	f109 0901 	add.w	r9, r9, #1
 8010fec:	e7ee      	b.n	8010fcc <_printf_float+0x2b8>
 8010fee:	bf00      	nop
 8010ff0:	7fefffff 	.word	0x7fefffff
 8010ff4:	08015f40 	.word	0x08015f40
 8010ff8:	08015f44 	.word	0x08015f44
 8010ffc:	08015f4c 	.word	0x08015f4c
 8011000:	08015f48 	.word	0x08015f48
 8011004:	08016389 	.word	0x08016389
 8011008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801100a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801100c:	429a      	cmp	r2, r3
 801100e:	bfa8      	it	ge
 8011010:	461a      	movge	r2, r3
 8011012:	2a00      	cmp	r2, #0
 8011014:	4691      	mov	r9, r2
 8011016:	dc37      	bgt.n	8011088 <_printf_float+0x374>
 8011018:	f04f 0b00 	mov.w	fp, #0
 801101c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011020:	f104 021a 	add.w	r2, r4, #26
 8011024:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011026:	9305      	str	r3, [sp, #20]
 8011028:	eba3 0309 	sub.w	r3, r3, r9
 801102c:	455b      	cmp	r3, fp
 801102e:	dc33      	bgt.n	8011098 <_printf_float+0x384>
 8011030:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011034:	429a      	cmp	r2, r3
 8011036:	db3b      	blt.n	80110b0 <_printf_float+0x39c>
 8011038:	6823      	ldr	r3, [r4, #0]
 801103a:	07da      	lsls	r2, r3, #31
 801103c:	d438      	bmi.n	80110b0 <_printf_float+0x39c>
 801103e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011040:	9b05      	ldr	r3, [sp, #20]
 8011042:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011044:	1ad3      	subs	r3, r2, r3
 8011046:	eba2 0901 	sub.w	r9, r2, r1
 801104a:	4599      	cmp	r9, r3
 801104c:	bfa8      	it	ge
 801104e:	4699      	movge	r9, r3
 8011050:	f1b9 0f00 	cmp.w	r9, #0
 8011054:	dc35      	bgt.n	80110c2 <_printf_float+0x3ae>
 8011056:	f04f 0800 	mov.w	r8, #0
 801105a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801105e:	f104 0a1a 	add.w	sl, r4, #26
 8011062:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011066:	1a9b      	subs	r3, r3, r2
 8011068:	eba3 0309 	sub.w	r3, r3, r9
 801106c:	4543      	cmp	r3, r8
 801106e:	f77f af79 	ble.w	8010f64 <_printf_float+0x250>
 8011072:	2301      	movs	r3, #1
 8011074:	4652      	mov	r2, sl
 8011076:	4631      	mov	r1, r6
 8011078:	4628      	mov	r0, r5
 801107a:	47b8      	blx	r7
 801107c:	3001      	adds	r0, #1
 801107e:	f43f aeaa 	beq.w	8010dd6 <_printf_float+0xc2>
 8011082:	f108 0801 	add.w	r8, r8, #1
 8011086:	e7ec      	b.n	8011062 <_printf_float+0x34e>
 8011088:	4613      	mov	r3, r2
 801108a:	4631      	mov	r1, r6
 801108c:	4642      	mov	r2, r8
 801108e:	4628      	mov	r0, r5
 8011090:	47b8      	blx	r7
 8011092:	3001      	adds	r0, #1
 8011094:	d1c0      	bne.n	8011018 <_printf_float+0x304>
 8011096:	e69e      	b.n	8010dd6 <_printf_float+0xc2>
 8011098:	2301      	movs	r3, #1
 801109a:	4631      	mov	r1, r6
 801109c:	4628      	mov	r0, r5
 801109e:	9205      	str	r2, [sp, #20]
 80110a0:	47b8      	blx	r7
 80110a2:	3001      	adds	r0, #1
 80110a4:	f43f ae97 	beq.w	8010dd6 <_printf_float+0xc2>
 80110a8:	9a05      	ldr	r2, [sp, #20]
 80110aa:	f10b 0b01 	add.w	fp, fp, #1
 80110ae:	e7b9      	b.n	8011024 <_printf_float+0x310>
 80110b0:	ee18 3a10 	vmov	r3, s16
 80110b4:	4652      	mov	r2, sl
 80110b6:	4631      	mov	r1, r6
 80110b8:	4628      	mov	r0, r5
 80110ba:	47b8      	blx	r7
 80110bc:	3001      	adds	r0, #1
 80110be:	d1be      	bne.n	801103e <_printf_float+0x32a>
 80110c0:	e689      	b.n	8010dd6 <_printf_float+0xc2>
 80110c2:	9a05      	ldr	r2, [sp, #20]
 80110c4:	464b      	mov	r3, r9
 80110c6:	4442      	add	r2, r8
 80110c8:	4631      	mov	r1, r6
 80110ca:	4628      	mov	r0, r5
 80110cc:	47b8      	blx	r7
 80110ce:	3001      	adds	r0, #1
 80110d0:	d1c1      	bne.n	8011056 <_printf_float+0x342>
 80110d2:	e680      	b.n	8010dd6 <_printf_float+0xc2>
 80110d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110d6:	2a01      	cmp	r2, #1
 80110d8:	dc01      	bgt.n	80110de <_printf_float+0x3ca>
 80110da:	07db      	lsls	r3, r3, #31
 80110dc:	d538      	bpl.n	8011150 <_printf_float+0x43c>
 80110de:	2301      	movs	r3, #1
 80110e0:	4642      	mov	r2, r8
 80110e2:	4631      	mov	r1, r6
 80110e4:	4628      	mov	r0, r5
 80110e6:	47b8      	blx	r7
 80110e8:	3001      	adds	r0, #1
 80110ea:	f43f ae74 	beq.w	8010dd6 <_printf_float+0xc2>
 80110ee:	ee18 3a10 	vmov	r3, s16
 80110f2:	4652      	mov	r2, sl
 80110f4:	4631      	mov	r1, r6
 80110f6:	4628      	mov	r0, r5
 80110f8:	47b8      	blx	r7
 80110fa:	3001      	adds	r0, #1
 80110fc:	f43f ae6b 	beq.w	8010dd6 <_printf_float+0xc2>
 8011100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011104:	2200      	movs	r2, #0
 8011106:	2300      	movs	r3, #0
 8011108:	f7ef fcee 	bl	8000ae8 <__aeabi_dcmpeq>
 801110c:	b9d8      	cbnz	r0, 8011146 <_printf_float+0x432>
 801110e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011110:	f108 0201 	add.w	r2, r8, #1
 8011114:	3b01      	subs	r3, #1
 8011116:	4631      	mov	r1, r6
 8011118:	4628      	mov	r0, r5
 801111a:	47b8      	blx	r7
 801111c:	3001      	adds	r0, #1
 801111e:	d10e      	bne.n	801113e <_printf_float+0x42a>
 8011120:	e659      	b.n	8010dd6 <_printf_float+0xc2>
 8011122:	2301      	movs	r3, #1
 8011124:	4652      	mov	r2, sl
 8011126:	4631      	mov	r1, r6
 8011128:	4628      	mov	r0, r5
 801112a:	47b8      	blx	r7
 801112c:	3001      	adds	r0, #1
 801112e:	f43f ae52 	beq.w	8010dd6 <_printf_float+0xc2>
 8011132:	f108 0801 	add.w	r8, r8, #1
 8011136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011138:	3b01      	subs	r3, #1
 801113a:	4543      	cmp	r3, r8
 801113c:	dcf1      	bgt.n	8011122 <_printf_float+0x40e>
 801113e:	464b      	mov	r3, r9
 8011140:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011144:	e6dc      	b.n	8010f00 <_printf_float+0x1ec>
 8011146:	f04f 0800 	mov.w	r8, #0
 801114a:	f104 0a1a 	add.w	sl, r4, #26
 801114e:	e7f2      	b.n	8011136 <_printf_float+0x422>
 8011150:	2301      	movs	r3, #1
 8011152:	4642      	mov	r2, r8
 8011154:	e7df      	b.n	8011116 <_printf_float+0x402>
 8011156:	2301      	movs	r3, #1
 8011158:	464a      	mov	r2, r9
 801115a:	4631      	mov	r1, r6
 801115c:	4628      	mov	r0, r5
 801115e:	47b8      	blx	r7
 8011160:	3001      	adds	r0, #1
 8011162:	f43f ae38 	beq.w	8010dd6 <_printf_float+0xc2>
 8011166:	f108 0801 	add.w	r8, r8, #1
 801116a:	68e3      	ldr	r3, [r4, #12]
 801116c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801116e:	1a5b      	subs	r3, r3, r1
 8011170:	4543      	cmp	r3, r8
 8011172:	dcf0      	bgt.n	8011156 <_printf_float+0x442>
 8011174:	e6fa      	b.n	8010f6c <_printf_float+0x258>
 8011176:	f04f 0800 	mov.w	r8, #0
 801117a:	f104 0919 	add.w	r9, r4, #25
 801117e:	e7f4      	b.n	801116a <_printf_float+0x456>

08011180 <_printf_common>:
 8011180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011184:	4616      	mov	r6, r2
 8011186:	4699      	mov	r9, r3
 8011188:	688a      	ldr	r2, [r1, #8]
 801118a:	690b      	ldr	r3, [r1, #16]
 801118c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011190:	4293      	cmp	r3, r2
 8011192:	bfb8      	it	lt
 8011194:	4613      	movlt	r3, r2
 8011196:	6033      	str	r3, [r6, #0]
 8011198:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801119c:	4607      	mov	r7, r0
 801119e:	460c      	mov	r4, r1
 80111a0:	b10a      	cbz	r2, 80111a6 <_printf_common+0x26>
 80111a2:	3301      	adds	r3, #1
 80111a4:	6033      	str	r3, [r6, #0]
 80111a6:	6823      	ldr	r3, [r4, #0]
 80111a8:	0699      	lsls	r1, r3, #26
 80111aa:	bf42      	ittt	mi
 80111ac:	6833      	ldrmi	r3, [r6, #0]
 80111ae:	3302      	addmi	r3, #2
 80111b0:	6033      	strmi	r3, [r6, #0]
 80111b2:	6825      	ldr	r5, [r4, #0]
 80111b4:	f015 0506 	ands.w	r5, r5, #6
 80111b8:	d106      	bne.n	80111c8 <_printf_common+0x48>
 80111ba:	f104 0a19 	add.w	sl, r4, #25
 80111be:	68e3      	ldr	r3, [r4, #12]
 80111c0:	6832      	ldr	r2, [r6, #0]
 80111c2:	1a9b      	subs	r3, r3, r2
 80111c4:	42ab      	cmp	r3, r5
 80111c6:	dc26      	bgt.n	8011216 <_printf_common+0x96>
 80111c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80111cc:	1e13      	subs	r3, r2, #0
 80111ce:	6822      	ldr	r2, [r4, #0]
 80111d0:	bf18      	it	ne
 80111d2:	2301      	movne	r3, #1
 80111d4:	0692      	lsls	r2, r2, #26
 80111d6:	d42b      	bmi.n	8011230 <_printf_common+0xb0>
 80111d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80111dc:	4649      	mov	r1, r9
 80111de:	4638      	mov	r0, r7
 80111e0:	47c0      	blx	r8
 80111e2:	3001      	adds	r0, #1
 80111e4:	d01e      	beq.n	8011224 <_printf_common+0xa4>
 80111e6:	6823      	ldr	r3, [r4, #0]
 80111e8:	68e5      	ldr	r5, [r4, #12]
 80111ea:	6832      	ldr	r2, [r6, #0]
 80111ec:	f003 0306 	and.w	r3, r3, #6
 80111f0:	2b04      	cmp	r3, #4
 80111f2:	bf08      	it	eq
 80111f4:	1aad      	subeq	r5, r5, r2
 80111f6:	68a3      	ldr	r3, [r4, #8]
 80111f8:	6922      	ldr	r2, [r4, #16]
 80111fa:	bf0c      	ite	eq
 80111fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011200:	2500      	movne	r5, #0
 8011202:	4293      	cmp	r3, r2
 8011204:	bfc4      	itt	gt
 8011206:	1a9b      	subgt	r3, r3, r2
 8011208:	18ed      	addgt	r5, r5, r3
 801120a:	2600      	movs	r6, #0
 801120c:	341a      	adds	r4, #26
 801120e:	42b5      	cmp	r5, r6
 8011210:	d11a      	bne.n	8011248 <_printf_common+0xc8>
 8011212:	2000      	movs	r0, #0
 8011214:	e008      	b.n	8011228 <_printf_common+0xa8>
 8011216:	2301      	movs	r3, #1
 8011218:	4652      	mov	r2, sl
 801121a:	4649      	mov	r1, r9
 801121c:	4638      	mov	r0, r7
 801121e:	47c0      	blx	r8
 8011220:	3001      	adds	r0, #1
 8011222:	d103      	bne.n	801122c <_printf_common+0xac>
 8011224:	f04f 30ff 	mov.w	r0, #4294967295
 8011228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801122c:	3501      	adds	r5, #1
 801122e:	e7c6      	b.n	80111be <_printf_common+0x3e>
 8011230:	18e1      	adds	r1, r4, r3
 8011232:	1c5a      	adds	r2, r3, #1
 8011234:	2030      	movs	r0, #48	; 0x30
 8011236:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801123a:	4422      	add	r2, r4
 801123c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011240:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011244:	3302      	adds	r3, #2
 8011246:	e7c7      	b.n	80111d8 <_printf_common+0x58>
 8011248:	2301      	movs	r3, #1
 801124a:	4622      	mov	r2, r4
 801124c:	4649      	mov	r1, r9
 801124e:	4638      	mov	r0, r7
 8011250:	47c0      	blx	r8
 8011252:	3001      	adds	r0, #1
 8011254:	d0e6      	beq.n	8011224 <_printf_common+0xa4>
 8011256:	3601      	adds	r6, #1
 8011258:	e7d9      	b.n	801120e <_printf_common+0x8e>
	...

0801125c <_printf_i>:
 801125c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011260:	460c      	mov	r4, r1
 8011262:	4691      	mov	r9, r2
 8011264:	7e27      	ldrb	r7, [r4, #24]
 8011266:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011268:	2f78      	cmp	r7, #120	; 0x78
 801126a:	4680      	mov	r8, r0
 801126c:	469a      	mov	sl, r3
 801126e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011272:	d807      	bhi.n	8011284 <_printf_i+0x28>
 8011274:	2f62      	cmp	r7, #98	; 0x62
 8011276:	d80a      	bhi.n	801128e <_printf_i+0x32>
 8011278:	2f00      	cmp	r7, #0
 801127a:	f000 80d8 	beq.w	801142e <_printf_i+0x1d2>
 801127e:	2f58      	cmp	r7, #88	; 0x58
 8011280:	f000 80a3 	beq.w	80113ca <_printf_i+0x16e>
 8011284:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801128c:	e03a      	b.n	8011304 <_printf_i+0xa8>
 801128e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011292:	2b15      	cmp	r3, #21
 8011294:	d8f6      	bhi.n	8011284 <_printf_i+0x28>
 8011296:	a001      	add	r0, pc, #4	; (adr r0, 801129c <_printf_i+0x40>)
 8011298:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801129c:	080112f5 	.word	0x080112f5
 80112a0:	08011309 	.word	0x08011309
 80112a4:	08011285 	.word	0x08011285
 80112a8:	08011285 	.word	0x08011285
 80112ac:	08011285 	.word	0x08011285
 80112b0:	08011285 	.word	0x08011285
 80112b4:	08011309 	.word	0x08011309
 80112b8:	08011285 	.word	0x08011285
 80112bc:	08011285 	.word	0x08011285
 80112c0:	08011285 	.word	0x08011285
 80112c4:	08011285 	.word	0x08011285
 80112c8:	08011415 	.word	0x08011415
 80112cc:	08011339 	.word	0x08011339
 80112d0:	080113f7 	.word	0x080113f7
 80112d4:	08011285 	.word	0x08011285
 80112d8:	08011285 	.word	0x08011285
 80112dc:	08011437 	.word	0x08011437
 80112e0:	08011285 	.word	0x08011285
 80112e4:	08011339 	.word	0x08011339
 80112e8:	08011285 	.word	0x08011285
 80112ec:	08011285 	.word	0x08011285
 80112f0:	080113ff 	.word	0x080113ff
 80112f4:	680b      	ldr	r3, [r1, #0]
 80112f6:	1d1a      	adds	r2, r3, #4
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	600a      	str	r2, [r1, #0]
 80112fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011304:	2301      	movs	r3, #1
 8011306:	e0a3      	b.n	8011450 <_printf_i+0x1f4>
 8011308:	6825      	ldr	r5, [r4, #0]
 801130a:	6808      	ldr	r0, [r1, #0]
 801130c:	062e      	lsls	r6, r5, #24
 801130e:	f100 0304 	add.w	r3, r0, #4
 8011312:	d50a      	bpl.n	801132a <_printf_i+0xce>
 8011314:	6805      	ldr	r5, [r0, #0]
 8011316:	600b      	str	r3, [r1, #0]
 8011318:	2d00      	cmp	r5, #0
 801131a:	da03      	bge.n	8011324 <_printf_i+0xc8>
 801131c:	232d      	movs	r3, #45	; 0x2d
 801131e:	426d      	negs	r5, r5
 8011320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011324:	485e      	ldr	r0, [pc, #376]	; (80114a0 <_printf_i+0x244>)
 8011326:	230a      	movs	r3, #10
 8011328:	e019      	b.n	801135e <_printf_i+0x102>
 801132a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801132e:	6805      	ldr	r5, [r0, #0]
 8011330:	600b      	str	r3, [r1, #0]
 8011332:	bf18      	it	ne
 8011334:	b22d      	sxthne	r5, r5
 8011336:	e7ef      	b.n	8011318 <_printf_i+0xbc>
 8011338:	680b      	ldr	r3, [r1, #0]
 801133a:	6825      	ldr	r5, [r4, #0]
 801133c:	1d18      	adds	r0, r3, #4
 801133e:	6008      	str	r0, [r1, #0]
 8011340:	0628      	lsls	r0, r5, #24
 8011342:	d501      	bpl.n	8011348 <_printf_i+0xec>
 8011344:	681d      	ldr	r5, [r3, #0]
 8011346:	e002      	b.n	801134e <_printf_i+0xf2>
 8011348:	0669      	lsls	r1, r5, #25
 801134a:	d5fb      	bpl.n	8011344 <_printf_i+0xe8>
 801134c:	881d      	ldrh	r5, [r3, #0]
 801134e:	4854      	ldr	r0, [pc, #336]	; (80114a0 <_printf_i+0x244>)
 8011350:	2f6f      	cmp	r7, #111	; 0x6f
 8011352:	bf0c      	ite	eq
 8011354:	2308      	moveq	r3, #8
 8011356:	230a      	movne	r3, #10
 8011358:	2100      	movs	r1, #0
 801135a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801135e:	6866      	ldr	r6, [r4, #4]
 8011360:	60a6      	str	r6, [r4, #8]
 8011362:	2e00      	cmp	r6, #0
 8011364:	bfa2      	ittt	ge
 8011366:	6821      	ldrge	r1, [r4, #0]
 8011368:	f021 0104 	bicge.w	r1, r1, #4
 801136c:	6021      	strge	r1, [r4, #0]
 801136e:	b90d      	cbnz	r5, 8011374 <_printf_i+0x118>
 8011370:	2e00      	cmp	r6, #0
 8011372:	d04d      	beq.n	8011410 <_printf_i+0x1b4>
 8011374:	4616      	mov	r6, r2
 8011376:	fbb5 f1f3 	udiv	r1, r5, r3
 801137a:	fb03 5711 	mls	r7, r3, r1, r5
 801137e:	5dc7      	ldrb	r7, [r0, r7]
 8011380:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011384:	462f      	mov	r7, r5
 8011386:	42bb      	cmp	r3, r7
 8011388:	460d      	mov	r5, r1
 801138a:	d9f4      	bls.n	8011376 <_printf_i+0x11a>
 801138c:	2b08      	cmp	r3, #8
 801138e:	d10b      	bne.n	80113a8 <_printf_i+0x14c>
 8011390:	6823      	ldr	r3, [r4, #0]
 8011392:	07df      	lsls	r7, r3, #31
 8011394:	d508      	bpl.n	80113a8 <_printf_i+0x14c>
 8011396:	6923      	ldr	r3, [r4, #16]
 8011398:	6861      	ldr	r1, [r4, #4]
 801139a:	4299      	cmp	r1, r3
 801139c:	bfde      	ittt	le
 801139e:	2330      	movle	r3, #48	; 0x30
 80113a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80113a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80113a8:	1b92      	subs	r2, r2, r6
 80113aa:	6122      	str	r2, [r4, #16]
 80113ac:	f8cd a000 	str.w	sl, [sp]
 80113b0:	464b      	mov	r3, r9
 80113b2:	aa03      	add	r2, sp, #12
 80113b4:	4621      	mov	r1, r4
 80113b6:	4640      	mov	r0, r8
 80113b8:	f7ff fee2 	bl	8011180 <_printf_common>
 80113bc:	3001      	adds	r0, #1
 80113be:	d14c      	bne.n	801145a <_printf_i+0x1fe>
 80113c0:	f04f 30ff 	mov.w	r0, #4294967295
 80113c4:	b004      	add	sp, #16
 80113c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113ca:	4835      	ldr	r0, [pc, #212]	; (80114a0 <_printf_i+0x244>)
 80113cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80113d0:	6823      	ldr	r3, [r4, #0]
 80113d2:	680e      	ldr	r6, [r1, #0]
 80113d4:	061f      	lsls	r7, r3, #24
 80113d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80113da:	600e      	str	r6, [r1, #0]
 80113dc:	d514      	bpl.n	8011408 <_printf_i+0x1ac>
 80113de:	07d9      	lsls	r1, r3, #31
 80113e0:	bf44      	itt	mi
 80113e2:	f043 0320 	orrmi.w	r3, r3, #32
 80113e6:	6023      	strmi	r3, [r4, #0]
 80113e8:	b91d      	cbnz	r5, 80113f2 <_printf_i+0x196>
 80113ea:	6823      	ldr	r3, [r4, #0]
 80113ec:	f023 0320 	bic.w	r3, r3, #32
 80113f0:	6023      	str	r3, [r4, #0]
 80113f2:	2310      	movs	r3, #16
 80113f4:	e7b0      	b.n	8011358 <_printf_i+0xfc>
 80113f6:	6823      	ldr	r3, [r4, #0]
 80113f8:	f043 0320 	orr.w	r3, r3, #32
 80113fc:	6023      	str	r3, [r4, #0]
 80113fe:	2378      	movs	r3, #120	; 0x78
 8011400:	4828      	ldr	r0, [pc, #160]	; (80114a4 <_printf_i+0x248>)
 8011402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011406:	e7e3      	b.n	80113d0 <_printf_i+0x174>
 8011408:	065e      	lsls	r6, r3, #25
 801140a:	bf48      	it	mi
 801140c:	b2ad      	uxthmi	r5, r5
 801140e:	e7e6      	b.n	80113de <_printf_i+0x182>
 8011410:	4616      	mov	r6, r2
 8011412:	e7bb      	b.n	801138c <_printf_i+0x130>
 8011414:	680b      	ldr	r3, [r1, #0]
 8011416:	6826      	ldr	r6, [r4, #0]
 8011418:	6960      	ldr	r0, [r4, #20]
 801141a:	1d1d      	adds	r5, r3, #4
 801141c:	600d      	str	r5, [r1, #0]
 801141e:	0635      	lsls	r5, r6, #24
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	d501      	bpl.n	8011428 <_printf_i+0x1cc>
 8011424:	6018      	str	r0, [r3, #0]
 8011426:	e002      	b.n	801142e <_printf_i+0x1d2>
 8011428:	0671      	lsls	r1, r6, #25
 801142a:	d5fb      	bpl.n	8011424 <_printf_i+0x1c8>
 801142c:	8018      	strh	r0, [r3, #0]
 801142e:	2300      	movs	r3, #0
 8011430:	6123      	str	r3, [r4, #16]
 8011432:	4616      	mov	r6, r2
 8011434:	e7ba      	b.n	80113ac <_printf_i+0x150>
 8011436:	680b      	ldr	r3, [r1, #0]
 8011438:	1d1a      	adds	r2, r3, #4
 801143a:	600a      	str	r2, [r1, #0]
 801143c:	681e      	ldr	r6, [r3, #0]
 801143e:	6862      	ldr	r2, [r4, #4]
 8011440:	2100      	movs	r1, #0
 8011442:	4630      	mov	r0, r6
 8011444:	f7ee fedc 	bl	8000200 <memchr>
 8011448:	b108      	cbz	r0, 801144e <_printf_i+0x1f2>
 801144a:	1b80      	subs	r0, r0, r6
 801144c:	6060      	str	r0, [r4, #4]
 801144e:	6863      	ldr	r3, [r4, #4]
 8011450:	6123      	str	r3, [r4, #16]
 8011452:	2300      	movs	r3, #0
 8011454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011458:	e7a8      	b.n	80113ac <_printf_i+0x150>
 801145a:	6923      	ldr	r3, [r4, #16]
 801145c:	4632      	mov	r2, r6
 801145e:	4649      	mov	r1, r9
 8011460:	4640      	mov	r0, r8
 8011462:	47d0      	blx	sl
 8011464:	3001      	adds	r0, #1
 8011466:	d0ab      	beq.n	80113c0 <_printf_i+0x164>
 8011468:	6823      	ldr	r3, [r4, #0]
 801146a:	079b      	lsls	r3, r3, #30
 801146c:	d413      	bmi.n	8011496 <_printf_i+0x23a>
 801146e:	68e0      	ldr	r0, [r4, #12]
 8011470:	9b03      	ldr	r3, [sp, #12]
 8011472:	4298      	cmp	r0, r3
 8011474:	bfb8      	it	lt
 8011476:	4618      	movlt	r0, r3
 8011478:	e7a4      	b.n	80113c4 <_printf_i+0x168>
 801147a:	2301      	movs	r3, #1
 801147c:	4632      	mov	r2, r6
 801147e:	4649      	mov	r1, r9
 8011480:	4640      	mov	r0, r8
 8011482:	47d0      	blx	sl
 8011484:	3001      	adds	r0, #1
 8011486:	d09b      	beq.n	80113c0 <_printf_i+0x164>
 8011488:	3501      	adds	r5, #1
 801148a:	68e3      	ldr	r3, [r4, #12]
 801148c:	9903      	ldr	r1, [sp, #12]
 801148e:	1a5b      	subs	r3, r3, r1
 8011490:	42ab      	cmp	r3, r5
 8011492:	dcf2      	bgt.n	801147a <_printf_i+0x21e>
 8011494:	e7eb      	b.n	801146e <_printf_i+0x212>
 8011496:	2500      	movs	r5, #0
 8011498:	f104 0619 	add.w	r6, r4, #25
 801149c:	e7f5      	b.n	801148a <_printf_i+0x22e>
 801149e:	bf00      	nop
 80114a0:	08015f50 	.word	0x08015f50
 80114a4:	08015f61 	.word	0x08015f61

080114a8 <_scanf_float>:
 80114a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114ac:	b087      	sub	sp, #28
 80114ae:	4617      	mov	r7, r2
 80114b0:	9303      	str	r3, [sp, #12]
 80114b2:	688b      	ldr	r3, [r1, #8]
 80114b4:	1e5a      	subs	r2, r3, #1
 80114b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80114ba:	bf83      	ittte	hi
 80114bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80114c0:	195b      	addhi	r3, r3, r5
 80114c2:	9302      	strhi	r3, [sp, #8]
 80114c4:	2300      	movls	r3, #0
 80114c6:	bf86      	itte	hi
 80114c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80114cc:	608b      	strhi	r3, [r1, #8]
 80114ce:	9302      	strls	r3, [sp, #8]
 80114d0:	680b      	ldr	r3, [r1, #0]
 80114d2:	468b      	mov	fp, r1
 80114d4:	2500      	movs	r5, #0
 80114d6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80114da:	f84b 3b1c 	str.w	r3, [fp], #28
 80114de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80114e2:	4680      	mov	r8, r0
 80114e4:	460c      	mov	r4, r1
 80114e6:	465e      	mov	r6, fp
 80114e8:	46aa      	mov	sl, r5
 80114ea:	46a9      	mov	r9, r5
 80114ec:	9501      	str	r5, [sp, #4]
 80114ee:	68a2      	ldr	r2, [r4, #8]
 80114f0:	b152      	cbz	r2, 8011508 <_scanf_float+0x60>
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	2b4e      	cmp	r3, #78	; 0x4e
 80114f8:	d864      	bhi.n	80115c4 <_scanf_float+0x11c>
 80114fa:	2b40      	cmp	r3, #64	; 0x40
 80114fc:	d83c      	bhi.n	8011578 <_scanf_float+0xd0>
 80114fe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011502:	b2c8      	uxtb	r0, r1
 8011504:	280e      	cmp	r0, #14
 8011506:	d93a      	bls.n	801157e <_scanf_float+0xd6>
 8011508:	f1b9 0f00 	cmp.w	r9, #0
 801150c:	d003      	beq.n	8011516 <_scanf_float+0x6e>
 801150e:	6823      	ldr	r3, [r4, #0]
 8011510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011514:	6023      	str	r3, [r4, #0]
 8011516:	f10a 3aff 	add.w	sl, sl, #4294967295
 801151a:	f1ba 0f01 	cmp.w	sl, #1
 801151e:	f200 8113 	bhi.w	8011748 <_scanf_float+0x2a0>
 8011522:	455e      	cmp	r6, fp
 8011524:	f200 8105 	bhi.w	8011732 <_scanf_float+0x28a>
 8011528:	2501      	movs	r5, #1
 801152a:	4628      	mov	r0, r5
 801152c:	b007      	add	sp, #28
 801152e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011532:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011536:	2a0d      	cmp	r2, #13
 8011538:	d8e6      	bhi.n	8011508 <_scanf_float+0x60>
 801153a:	a101      	add	r1, pc, #4	; (adr r1, 8011540 <_scanf_float+0x98>)
 801153c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011540:	0801167f 	.word	0x0801167f
 8011544:	08011509 	.word	0x08011509
 8011548:	08011509 	.word	0x08011509
 801154c:	08011509 	.word	0x08011509
 8011550:	080116df 	.word	0x080116df
 8011554:	080116b7 	.word	0x080116b7
 8011558:	08011509 	.word	0x08011509
 801155c:	08011509 	.word	0x08011509
 8011560:	0801168d 	.word	0x0801168d
 8011564:	08011509 	.word	0x08011509
 8011568:	08011509 	.word	0x08011509
 801156c:	08011509 	.word	0x08011509
 8011570:	08011509 	.word	0x08011509
 8011574:	08011645 	.word	0x08011645
 8011578:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801157c:	e7db      	b.n	8011536 <_scanf_float+0x8e>
 801157e:	290e      	cmp	r1, #14
 8011580:	d8c2      	bhi.n	8011508 <_scanf_float+0x60>
 8011582:	a001      	add	r0, pc, #4	; (adr r0, 8011588 <_scanf_float+0xe0>)
 8011584:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011588:	08011637 	.word	0x08011637
 801158c:	08011509 	.word	0x08011509
 8011590:	08011637 	.word	0x08011637
 8011594:	080116cb 	.word	0x080116cb
 8011598:	08011509 	.word	0x08011509
 801159c:	080115e5 	.word	0x080115e5
 80115a0:	08011621 	.word	0x08011621
 80115a4:	08011621 	.word	0x08011621
 80115a8:	08011621 	.word	0x08011621
 80115ac:	08011621 	.word	0x08011621
 80115b0:	08011621 	.word	0x08011621
 80115b4:	08011621 	.word	0x08011621
 80115b8:	08011621 	.word	0x08011621
 80115bc:	08011621 	.word	0x08011621
 80115c0:	08011621 	.word	0x08011621
 80115c4:	2b6e      	cmp	r3, #110	; 0x6e
 80115c6:	d809      	bhi.n	80115dc <_scanf_float+0x134>
 80115c8:	2b60      	cmp	r3, #96	; 0x60
 80115ca:	d8b2      	bhi.n	8011532 <_scanf_float+0x8a>
 80115cc:	2b54      	cmp	r3, #84	; 0x54
 80115ce:	d077      	beq.n	80116c0 <_scanf_float+0x218>
 80115d0:	2b59      	cmp	r3, #89	; 0x59
 80115d2:	d199      	bne.n	8011508 <_scanf_float+0x60>
 80115d4:	2d07      	cmp	r5, #7
 80115d6:	d197      	bne.n	8011508 <_scanf_float+0x60>
 80115d8:	2508      	movs	r5, #8
 80115da:	e029      	b.n	8011630 <_scanf_float+0x188>
 80115dc:	2b74      	cmp	r3, #116	; 0x74
 80115de:	d06f      	beq.n	80116c0 <_scanf_float+0x218>
 80115e0:	2b79      	cmp	r3, #121	; 0x79
 80115e2:	e7f6      	b.n	80115d2 <_scanf_float+0x12a>
 80115e4:	6821      	ldr	r1, [r4, #0]
 80115e6:	05c8      	lsls	r0, r1, #23
 80115e8:	d51a      	bpl.n	8011620 <_scanf_float+0x178>
 80115ea:	9b02      	ldr	r3, [sp, #8]
 80115ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80115f0:	6021      	str	r1, [r4, #0]
 80115f2:	f109 0901 	add.w	r9, r9, #1
 80115f6:	b11b      	cbz	r3, 8011600 <_scanf_float+0x158>
 80115f8:	3b01      	subs	r3, #1
 80115fa:	3201      	adds	r2, #1
 80115fc:	9302      	str	r3, [sp, #8]
 80115fe:	60a2      	str	r2, [r4, #8]
 8011600:	68a3      	ldr	r3, [r4, #8]
 8011602:	3b01      	subs	r3, #1
 8011604:	60a3      	str	r3, [r4, #8]
 8011606:	6923      	ldr	r3, [r4, #16]
 8011608:	3301      	adds	r3, #1
 801160a:	6123      	str	r3, [r4, #16]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	3b01      	subs	r3, #1
 8011610:	2b00      	cmp	r3, #0
 8011612:	607b      	str	r3, [r7, #4]
 8011614:	f340 8084 	ble.w	8011720 <_scanf_float+0x278>
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	3301      	adds	r3, #1
 801161c:	603b      	str	r3, [r7, #0]
 801161e:	e766      	b.n	80114ee <_scanf_float+0x46>
 8011620:	eb1a 0f05 	cmn.w	sl, r5
 8011624:	f47f af70 	bne.w	8011508 <_scanf_float+0x60>
 8011628:	6822      	ldr	r2, [r4, #0]
 801162a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801162e:	6022      	str	r2, [r4, #0]
 8011630:	f806 3b01 	strb.w	r3, [r6], #1
 8011634:	e7e4      	b.n	8011600 <_scanf_float+0x158>
 8011636:	6822      	ldr	r2, [r4, #0]
 8011638:	0610      	lsls	r0, r2, #24
 801163a:	f57f af65 	bpl.w	8011508 <_scanf_float+0x60>
 801163e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011642:	e7f4      	b.n	801162e <_scanf_float+0x186>
 8011644:	f1ba 0f00 	cmp.w	sl, #0
 8011648:	d10e      	bne.n	8011668 <_scanf_float+0x1c0>
 801164a:	f1b9 0f00 	cmp.w	r9, #0
 801164e:	d10e      	bne.n	801166e <_scanf_float+0x1c6>
 8011650:	6822      	ldr	r2, [r4, #0]
 8011652:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011656:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801165a:	d108      	bne.n	801166e <_scanf_float+0x1c6>
 801165c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011660:	6022      	str	r2, [r4, #0]
 8011662:	f04f 0a01 	mov.w	sl, #1
 8011666:	e7e3      	b.n	8011630 <_scanf_float+0x188>
 8011668:	f1ba 0f02 	cmp.w	sl, #2
 801166c:	d055      	beq.n	801171a <_scanf_float+0x272>
 801166e:	2d01      	cmp	r5, #1
 8011670:	d002      	beq.n	8011678 <_scanf_float+0x1d0>
 8011672:	2d04      	cmp	r5, #4
 8011674:	f47f af48 	bne.w	8011508 <_scanf_float+0x60>
 8011678:	3501      	adds	r5, #1
 801167a:	b2ed      	uxtb	r5, r5
 801167c:	e7d8      	b.n	8011630 <_scanf_float+0x188>
 801167e:	f1ba 0f01 	cmp.w	sl, #1
 8011682:	f47f af41 	bne.w	8011508 <_scanf_float+0x60>
 8011686:	f04f 0a02 	mov.w	sl, #2
 801168a:	e7d1      	b.n	8011630 <_scanf_float+0x188>
 801168c:	b97d      	cbnz	r5, 80116ae <_scanf_float+0x206>
 801168e:	f1b9 0f00 	cmp.w	r9, #0
 8011692:	f47f af3c 	bne.w	801150e <_scanf_float+0x66>
 8011696:	6822      	ldr	r2, [r4, #0]
 8011698:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801169c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80116a0:	f47f af39 	bne.w	8011516 <_scanf_float+0x6e>
 80116a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80116a8:	6022      	str	r2, [r4, #0]
 80116aa:	2501      	movs	r5, #1
 80116ac:	e7c0      	b.n	8011630 <_scanf_float+0x188>
 80116ae:	2d03      	cmp	r5, #3
 80116b0:	d0e2      	beq.n	8011678 <_scanf_float+0x1d0>
 80116b2:	2d05      	cmp	r5, #5
 80116b4:	e7de      	b.n	8011674 <_scanf_float+0x1cc>
 80116b6:	2d02      	cmp	r5, #2
 80116b8:	f47f af26 	bne.w	8011508 <_scanf_float+0x60>
 80116bc:	2503      	movs	r5, #3
 80116be:	e7b7      	b.n	8011630 <_scanf_float+0x188>
 80116c0:	2d06      	cmp	r5, #6
 80116c2:	f47f af21 	bne.w	8011508 <_scanf_float+0x60>
 80116c6:	2507      	movs	r5, #7
 80116c8:	e7b2      	b.n	8011630 <_scanf_float+0x188>
 80116ca:	6822      	ldr	r2, [r4, #0]
 80116cc:	0591      	lsls	r1, r2, #22
 80116ce:	f57f af1b 	bpl.w	8011508 <_scanf_float+0x60>
 80116d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80116d6:	6022      	str	r2, [r4, #0]
 80116d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80116dc:	e7a8      	b.n	8011630 <_scanf_float+0x188>
 80116de:	6822      	ldr	r2, [r4, #0]
 80116e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80116e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80116e8:	d006      	beq.n	80116f8 <_scanf_float+0x250>
 80116ea:	0550      	lsls	r0, r2, #21
 80116ec:	f57f af0c 	bpl.w	8011508 <_scanf_float+0x60>
 80116f0:	f1b9 0f00 	cmp.w	r9, #0
 80116f4:	f43f af0f 	beq.w	8011516 <_scanf_float+0x6e>
 80116f8:	0591      	lsls	r1, r2, #22
 80116fa:	bf58      	it	pl
 80116fc:	9901      	ldrpl	r1, [sp, #4]
 80116fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011702:	bf58      	it	pl
 8011704:	eba9 0101 	subpl.w	r1, r9, r1
 8011708:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801170c:	bf58      	it	pl
 801170e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011712:	6022      	str	r2, [r4, #0]
 8011714:	f04f 0900 	mov.w	r9, #0
 8011718:	e78a      	b.n	8011630 <_scanf_float+0x188>
 801171a:	f04f 0a03 	mov.w	sl, #3
 801171e:	e787      	b.n	8011630 <_scanf_float+0x188>
 8011720:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011724:	4639      	mov	r1, r7
 8011726:	4640      	mov	r0, r8
 8011728:	4798      	blx	r3
 801172a:	2800      	cmp	r0, #0
 801172c:	f43f aedf 	beq.w	80114ee <_scanf_float+0x46>
 8011730:	e6ea      	b.n	8011508 <_scanf_float+0x60>
 8011732:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011736:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801173a:	463a      	mov	r2, r7
 801173c:	4640      	mov	r0, r8
 801173e:	4798      	blx	r3
 8011740:	6923      	ldr	r3, [r4, #16]
 8011742:	3b01      	subs	r3, #1
 8011744:	6123      	str	r3, [r4, #16]
 8011746:	e6ec      	b.n	8011522 <_scanf_float+0x7a>
 8011748:	1e6b      	subs	r3, r5, #1
 801174a:	2b06      	cmp	r3, #6
 801174c:	d825      	bhi.n	801179a <_scanf_float+0x2f2>
 801174e:	2d02      	cmp	r5, #2
 8011750:	d836      	bhi.n	80117c0 <_scanf_float+0x318>
 8011752:	455e      	cmp	r6, fp
 8011754:	f67f aee8 	bls.w	8011528 <_scanf_float+0x80>
 8011758:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801175c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011760:	463a      	mov	r2, r7
 8011762:	4640      	mov	r0, r8
 8011764:	4798      	blx	r3
 8011766:	6923      	ldr	r3, [r4, #16]
 8011768:	3b01      	subs	r3, #1
 801176a:	6123      	str	r3, [r4, #16]
 801176c:	e7f1      	b.n	8011752 <_scanf_float+0x2aa>
 801176e:	9802      	ldr	r0, [sp, #8]
 8011770:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011774:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011778:	9002      	str	r0, [sp, #8]
 801177a:	463a      	mov	r2, r7
 801177c:	4640      	mov	r0, r8
 801177e:	4798      	blx	r3
 8011780:	6923      	ldr	r3, [r4, #16]
 8011782:	3b01      	subs	r3, #1
 8011784:	6123      	str	r3, [r4, #16]
 8011786:	f10a 3aff 	add.w	sl, sl, #4294967295
 801178a:	fa5f fa8a 	uxtb.w	sl, sl
 801178e:	f1ba 0f02 	cmp.w	sl, #2
 8011792:	d1ec      	bne.n	801176e <_scanf_float+0x2c6>
 8011794:	3d03      	subs	r5, #3
 8011796:	b2ed      	uxtb	r5, r5
 8011798:	1b76      	subs	r6, r6, r5
 801179a:	6823      	ldr	r3, [r4, #0]
 801179c:	05da      	lsls	r2, r3, #23
 801179e:	d52f      	bpl.n	8011800 <_scanf_float+0x358>
 80117a0:	055b      	lsls	r3, r3, #21
 80117a2:	d510      	bpl.n	80117c6 <_scanf_float+0x31e>
 80117a4:	455e      	cmp	r6, fp
 80117a6:	f67f aebf 	bls.w	8011528 <_scanf_float+0x80>
 80117aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80117ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80117b2:	463a      	mov	r2, r7
 80117b4:	4640      	mov	r0, r8
 80117b6:	4798      	blx	r3
 80117b8:	6923      	ldr	r3, [r4, #16]
 80117ba:	3b01      	subs	r3, #1
 80117bc:	6123      	str	r3, [r4, #16]
 80117be:	e7f1      	b.n	80117a4 <_scanf_float+0x2fc>
 80117c0:	46aa      	mov	sl, r5
 80117c2:	9602      	str	r6, [sp, #8]
 80117c4:	e7df      	b.n	8011786 <_scanf_float+0x2de>
 80117c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80117ca:	6923      	ldr	r3, [r4, #16]
 80117cc:	2965      	cmp	r1, #101	; 0x65
 80117ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80117d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80117d6:	6123      	str	r3, [r4, #16]
 80117d8:	d00c      	beq.n	80117f4 <_scanf_float+0x34c>
 80117da:	2945      	cmp	r1, #69	; 0x45
 80117dc:	d00a      	beq.n	80117f4 <_scanf_float+0x34c>
 80117de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80117e2:	463a      	mov	r2, r7
 80117e4:	4640      	mov	r0, r8
 80117e6:	4798      	blx	r3
 80117e8:	6923      	ldr	r3, [r4, #16]
 80117ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80117ee:	3b01      	subs	r3, #1
 80117f0:	1eb5      	subs	r5, r6, #2
 80117f2:	6123      	str	r3, [r4, #16]
 80117f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80117f8:	463a      	mov	r2, r7
 80117fa:	4640      	mov	r0, r8
 80117fc:	4798      	blx	r3
 80117fe:	462e      	mov	r6, r5
 8011800:	6825      	ldr	r5, [r4, #0]
 8011802:	f015 0510 	ands.w	r5, r5, #16
 8011806:	d158      	bne.n	80118ba <_scanf_float+0x412>
 8011808:	7035      	strb	r5, [r6, #0]
 801180a:	6823      	ldr	r3, [r4, #0]
 801180c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011814:	d11c      	bne.n	8011850 <_scanf_float+0x3a8>
 8011816:	9b01      	ldr	r3, [sp, #4]
 8011818:	454b      	cmp	r3, r9
 801181a:	eba3 0209 	sub.w	r2, r3, r9
 801181e:	d124      	bne.n	801186a <_scanf_float+0x3c2>
 8011820:	2200      	movs	r2, #0
 8011822:	4659      	mov	r1, fp
 8011824:	4640      	mov	r0, r8
 8011826:	f000 ffdd 	bl	80127e4 <_strtod_r>
 801182a:	9b03      	ldr	r3, [sp, #12]
 801182c:	6821      	ldr	r1, [r4, #0]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	f011 0f02 	tst.w	r1, #2
 8011834:	ec57 6b10 	vmov	r6, r7, d0
 8011838:	f103 0204 	add.w	r2, r3, #4
 801183c:	d020      	beq.n	8011880 <_scanf_float+0x3d8>
 801183e:	9903      	ldr	r1, [sp, #12]
 8011840:	600a      	str	r2, [r1, #0]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	e9c3 6700 	strd	r6, r7, [r3]
 8011848:	68e3      	ldr	r3, [r4, #12]
 801184a:	3301      	adds	r3, #1
 801184c:	60e3      	str	r3, [r4, #12]
 801184e:	e66c      	b.n	801152a <_scanf_float+0x82>
 8011850:	9b04      	ldr	r3, [sp, #16]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d0e4      	beq.n	8011820 <_scanf_float+0x378>
 8011856:	9905      	ldr	r1, [sp, #20]
 8011858:	230a      	movs	r3, #10
 801185a:	462a      	mov	r2, r5
 801185c:	3101      	adds	r1, #1
 801185e:	4640      	mov	r0, r8
 8011860:	f001 f84a 	bl	80128f8 <_strtol_r>
 8011864:	9b04      	ldr	r3, [sp, #16]
 8011866:	9e05      	ldr	r6, [sp, #20]
 8011868:	1ac2      	subs	r2, r0, r3
 801186a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801186e:	429e      	cmp	r6, r3
 8011870:	bf28      	it	cs
 8011872:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011876:	4912      	ldr	r1, [pc, #72]	; (80118c0 <_scanf_float+0x418>)
 8011878:	4630      	mov	r0, r6
 801187a:	f000 f8e9 	bl	8011a50 <siprintf>
 801187e:	e7cf      	b.n	8011820 <_scanf_float+0x378>
 8011880:	f011 0f04 	tst.w	r1, #4
 8011884:	9903      	ldr	r1, [sp, #12]
 8011886:	600a      	str	r2, [r1, #0]
 8011888:	d1db      	bne.n	8011842 <_scanf_float+0x39a>
 801188a:	f8d3 8000 	ldr.w	r8, [r3]
 801188e:	ee10 2a10 	vmov	r2, s0
 8011892:	ee10 0a10 	vmov	r0, s0
 8011896:	463b      	mov	r3, r7
 8011898:	4639      	mov	r1, r7
 801189a:	f7ef f957 	bl	8000b4c <__aeabi_dcmpun>
 801189e:	b128      	cbz	r0, 80118ac <_scanf_float+0x404>
 80118a0:	4808      	ldr	r0, [pc, #32]	; (80118c4 <_scanf_float+0x41c>)
 80118a2:	f000 f88b 	bl	80119bc <nanf>
 80118a6:	ed88 0a00 	vstr	s0, [r8]
 80118aa:	e7cd      	b.n	8011848 <_scanf_float+0x3a0>
 80118ac:	4630      	mov	r0, r6
 80118ae:	4639      	mov	r1, r7
 80118b0:	f7ef f9aa 	bl	8000c08 <__aeabi_d2f>
 80118b4:	f8c8 0000 	str.w	r0, [r8]
 80118b8:	e7c6      	b.n	8011848 <_scanf_float+0x3a0>
 80118ba:	2500      	movs	r5, #0
 80118bc:	e635      	b.n	801152a <_scanf_float+0x82>
 80118be:	bf00      	nop
 80118c0:	08015f72 	.word	0x08015f72
 80118c4:	08016003 	.word	0x08016003

080118c8 <cleanup_glue>:
 80118c8:	b538      	push	{r3, r4, r5, lr}
 80118ca:	460c      	mov	r4, r1
 80118cc:	6809      	ldr	r1, [r1, #0]
 80118ce:	4605      	mov	r5, r0
 80118d0:	b109      	cbz	r1, 80118d6 <cleanup_glue+0xe>
 80118d2:	f7ff fff9 	bl	80118c8 <cleanup_glue>
 80118d6:	4621      	mov	r1, r4
 80118d8:	4628      	mov	r0, r5
 80118da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118de:	f7ff b8cf 	b.w	8010a80 <_free_r>
	...

080118e4 <_reclaim_reent>:
 80118e4:	4b2c      	ldr	r3, [pc, #176]	; (8011998 <_reclaim_reent+0xb4>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	4283      	cmp	r3, r0
 80118ea:	b570      	push	{r4, r5, r6, lr}
 80118ec:	4604      	mov	r4, r0
 80118ee:	d051      	beq.n	8011994 <_reclaim_reent+0xb0>
 80118f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80118f2:	b143      	cbz	r3, 8011906 <_reclaim_reent+0x22>
 80118f4:	68db      	ldr	r3, [r3, #12]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d14a      	bne.n	8011990 <_reclaim_reent+0xac>
 80118fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80118fc:	6819      	ldr	r1, [r3, #0]
 80118fe:	b111      	cbz	r1, 8011906 <_reclaim_reent+0x22>
 8011900:	4620      	mov	r0, r4
 8011902:	f7ff f8bd 	bl	8010a80 <_free_r>
 8011906:	6961      	ldr	r1, [r4, #20]
 8011908:	b111      	cbz	r1, 8011910 <_reclaim_reent+0x2c>
 801190a:	4620      	mov	r0, r4
 801190c:	f7ff f8b8 	bl	8010a80 <_free_r>
 8011910:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011912:	b111      	cbz	r1, 801191a <_reclaim_reent+0x36>
 8011914:	4620      	mov	r0, r4
 8011916:	f7ff f8b3 	bl	8010a80 <_free_r>
 801191a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801191c:	b111      	cbz	r1, 8011924 <_reclaim_reent+0x40>
 801191e:	4620      	mov	r0, r4
 8011920:	f7ff f8ae 	bl	8010a80 <_free_r>
 8011924:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011926:	b111      	cbz	r1, 801192e <_reclaim_reent+0x4a>
 8011928:	4620      	mov	r0, r4
 801192a:	f7ff f8a9 	bl	8010a80 <_free_r>
 801192e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011930:	b111      	cbz	r1, 8011938 <_reclaim_reent+0x54>
 8011932:	4620      	mov	r0, r4
 8011934:	f7ff f8a4 	bl	8010a80 <_free_r>
 8011938:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801193a:	b111      	cbz	r1, 8011942 <_reclaim_reent+0x5e>
 801193c:	4620      	mov	r0, r4
 801193e:	f7ff f89f 	bl	8010a80 <_free_r>
 8011942:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011944:	b111      	cbz	r1, 801194c <_reclaim_reent+0x68>
 8011946:	4620      	mov	r0, r4
 8011948:	f7ff f89a 	bl	8010a80 <_free_r>
 801194c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801194e:	b111      	cbz	r1, 8011956 <_reclaim_reent+0x72>
 8011950:	4620      	mov	r0, r4
 8011952:	f7ff f895 	bl	8010a80 <_free_r>
 8011956:	69a3      	ldr	r3, [r4, #24]
 8011958:	b1e3      	cbz	r3, 8011994 <_reclaim_reent+0xb0>
 801195a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801195c:	4620      	mov	r0, r4
 801195e:	4798      	blx	r3
 8011960:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011962:	b1b9      	cbz	r1, 8011994 <_reclaim_reent+0xb0>
 8011964:	4620      	mov	r0, r4
 8011966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801196a:	f7ff bfad 	b.w	80118c8 <cleanup_glue>
 801196e:	5949      	ldr	r1, [r1, r5]
 8011970:	b941      	cbnz	r1, 8011984 <_reclaim_reent+0xa0>
 8011972:	3504      	adds	r5, #4
 8011974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011976:	2d80      	cmp	r5, #128	; 0x80
 8011978:	68d9      	ldr	r1, [r3, #12]
 801197a:	d1f8      	bne.n	801196e <_reclaim_reent+0x8a>
 801197c:	4620      	mov	r0, r4
 801197e:	f7ff f87f 	bl	8010a80 <_free_r>
 8011982:	e7ba      	b.n	80118fa <_reclaim_reent+0x16>
 8011984:	680e      	ldr	r6, [r1, #0]
 8011986:	4620      	mov	r0, r4
 8011988:	f7ff f87a 	bl	8010a80 <_free_r>
 801198c:	4631      	mov	r1, r6
 801198e:	e7ef      	b.n	8011970 <_reclaim_reent+0x8c>
 8011990:	2500      	movs	r5, #0
 8011992:	e7ef      	b.n	8011974 <_reclaim_reent+0x90>
 8011994:	bd70      	pop	{r4, r5, r6, pc}
 8011996:	bf00      	nop
 8011998:	20000188 	.word	0x20000188

0801199c <_sbrk_r>:
 801199c:	b538      	push	{r3, r4, r5, lr}
 801199e:	4d06      	ldr	r5, [pc, #24]	; (80119b8 <_sbrk_r+0x1c>)
 80119a0:	2300      	movs	r3, #0
 80119a2:	4604      	mov	r4, r0
 80119a4:	4608      	mov	r0, r1
 80119a6:	602b      	str	r3, [r5, #0]
 80119a8:	f7f0 fefe 	bl	80027a8 <_sbrk>
 80119ac:	1c43      	adds	r3, r0, #1
 80119ae:	d102      	bne.n	80119b6 <_sbrk_r+0x1a>
 80119b0:	682b      	ldr	r3, [r5, #0]
 80119b2:	b103      	cbz	r3, 80119b6 <_sbrk_r+0x1a>
 80119b4:	6023      	str	r3, [r4, #0]
 80119b6:	bd38      	pop	{r3, r4, r5, pc}
 80119b8:	20006e38 	.word	0x20006e38

080119bc <nanf>:
 80119bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80119c4 <nanf+0x8>
 80119c0:	4770      	bx	lr
 80119c2:	bf00      	nop
 80119c4:	7fc00000 	.word	0x7fc00000

080119c8 <_raise_r>:
 80119c8:	291f      	cmp	r1, #31
 80119ca:	b538      	push	{r3, r4, r5, lr}
 80119cc:	4604      	mov	r4, r0
 80119ce:	460d      	mov	r5, r1
 80119d0:	d904      	bls.n	80119dc <_raise_r+0x14>
 80119d2:	2316      	movs	r3, #22
 80119d4:	6003      	str	r3, [r0, #0]
 80119d6:	f04f 30ff 	mov.w	r0, #4294967295
 80119da:	bd38      	pop	{r3, r4, r5, pc}
 80119dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80119de:	b112      	cbz	r2, 80119e6 <_raise_r+0x1e>
 80119e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80119e4:	b94b      	cbnz	r3, 80119fa <_raise_r+0x32>
 80119e6:	4620      	mov	r0, r4
 80119e8:	f000 f830 	bl	8011a4c <_getpid_r>
 80119ec:	462a      	mov	r2, r5
 80119ee:	4601      	mov	r1, r0
 80119f0:	4620      	mov	r0, r4
 80119f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119f6:	f000 b817 	b.w	8011a28 <_kill_r>
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d00a      	beq.n	8011a14 <_raise_r+0x4c>
 80119fe:	1c59      	adds	r1, r3, #1
 8011a00:	d103      	bne.n	8011a0a <_raise_r+0x42>
 8011a02:	2316      	movs	r3, #22
 8011a04:	6003      	str	r3, [r0, #0]
 8011a06:	2001      	movs	r0, #1
 8011a08:	e7e7      	b.n	80119da <_raise_r+0x12>
 8011a0a:	2400      	movs	r4, #0
 8011a0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011a10:	4628      	mov	r0, r5
 8011a12:	4798      	blx	r3
 8011a14:	2000      	movs	r0, #0
 8011a16:	e7e0      	b.n	80119da <_raise_r+0x12>

08011a18 <raise>:
 8011a18:	4b02      	ldr	r3, [pc, #8]	; (8011a24 <raise+0xc>)
 8011a1a:	4601      	mov	r1, r0
 8011a1c:	6818      	ldr	r0, [r3, #0]
 8011a1e:	f7ff bfd3 	b.w	80119c8 <_raise_r>
 8011a22:	bf00      	nop
 8011a24:	20000188 	.word	0x20000188

08011a28 <_kill_r>:
 8011a28:	b538      	push	{r3, r4, r5, lr}
 8011a2a:	4d07      	ldr	r5, [pc, #28]	; (8011a48 <_kill_r+0x20>)
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	4604      	mov	r4, r0
 8011a30:	4608      	mov	r0, r1
 8011a32:	4611      	mov	r1, r2
 8011a34:	602b      	str	r3, [r5, #0]
 8011a36:	f7f0 fe2f 	bl	8002698 <_kill>
 8011a3a:	1c43      	adds	r3, r0, #1
 8011a3c:	d102      	bne.n	8011a44 <_kill_r+0x1c>
 8011a3e:	682b      	ldr	r3, [r5, #0]
 8011a40:	b103      	cbz	r3, 8011a44 <_kill_r+0x1c>
 8011a42:	6023      	str	r3, [r4, #0]
 8011a44:	bd38      	pop	{r3, r4, r5, pc}
 8011a46:	bf00      	nop
 8011a48:	20006e38 	.word	0x20006e38

08011a4c <_getpid_r>:
 8011a4c:	f7f0 be1c 	b.w	8002688 <_getpid>

08011a50 <siprintf>:
 8011a50:	b40e      	push	{r1, r2, r3}
 8011a52:	b500      	push	{lr}
 8011a54:	b09c      	sub	sp, #112	; 0x70
 8011a56:	ab1d      	add	r3, sp, #116	; 0x74
 8011a58:	9002      	str	r0, [sp, #8]
 8011a5a:	9006      	str	r0, [sp, #24]
 8011a5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011a60:	4809      	ldr	r0, [pc, #36]	; (8011a88 <siprintf+0x38>)
 8011a62:	9107      	str	r1, [sp, #28]
 8011a64:	9104      	str	r1, [sp, #16]
 8011a66:	4909      	ldr	r1, [pc, #36]	; (8011a8c <siprintf+0x3c>)
 8011a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a6c:	9105      	str	r1, [sp, #20]
 8011a6e:	6800      	ldr	r0, [r0, #0]
 8011a70:	9301      	str	r3, [sp, #4]
 8011a72:	a902      	add	r1, sp, #8
 8011a74:	f003 f83c 	bl	8014af0 <_svfiprintf_r>
 8011a78:	9b02      	ldr	r3, [sp, #8]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	701a      	strb	r2, [r3, #0]
 8011a7e:	b01c      	add	sp, #112	; 0x70
 8011a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a84:	b003      	add	sp, #12
 8011a86:	4770      	bx	lr
 8011a88:	20000188 	.word	0x20000188
 8011a8c:	ffff0208 	.word	0xffff0208

08011a90 <siscanf>:
 8011a90:	b40e      	push	{r1, r2, r3}
 8011a92:	b510      	push	{r4, lr}
 8011a94:	b09f      	sub	sp, #124	; 0x7c
 8011a96:	ac21      	add	r4, sp, #132	; 0x84
 8011a98:	f44f 7101 	mov.w	r1, #516	; 0x204
 8011a9c:	f854 2b04 	ldr.w	r2, [r4], #4
 8011aa0:	9201      	str	r2, [sp, #4]
 8011aa2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011aa6:	9004      	str	r0, [sp, #16]
 8011aa8:	9008      	str	r0, [sp, #32]
 8011aaa:	f7ee fba1 	bl	80001f0 <strlen>
 8011aae:	4b0c      	ldr	r3, [pc, #48]	; (8011ae0 <siscanf+0x50>)
 8011ab0:	9005      	str	r0, [sp, #20]
 8011ab2:	9009      	str	r0, [sp, #36]	; 0x24
 8011ab4:	930d      	str	r3, [sp, #52]	; 0x34
 8011ab6:	480b      	ldr	r0, [pc, #44]	; (8011ae4 <siscanf+0x54>)
 8011ab8:	9a01      	ldr	r2, [sp, #4]
 8011aba:	6800      	ldr	r0, [r0, #0]
 8011abc:	9403      	str	r4, [sp, #12]
 8011abe:	2300      	movs	r3, #0
 8011ac0:	9311      	str	r3, [sp, #68]	; 0x44
 8011ac2:	9316      	str	r3, [sp, #88]	; 0x58
 8011ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ac8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011acc:	a904      	add	r1, sp, #16
 8011ace:	4623      	mov	r3, r4
 8011ad0:	f003 f968 	bl	8014da4 <__ssvfiscanf_r>
 8011ad4:	b01f      	add	sp, #124	; 0x7c
 8011ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ada:	b003      	add	sp, #12
 8011adc:	4770      	bx	lr
 8011ade:	bf00      	nop
 8011ae0:	08011b0b 	.word	0x08011b0b
 8011ae4:	20000188 	.word	0x20000188

08011ae8 <__sread>:
 8011ae8:	b510      	push	{r4, lr}
 8011aea:	460c      	mov	r4, r1
 8011aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011af0:	f003 fd76 	bl	80155e0 <_read_r>
 8011af4:	2800      	cmp	r0, #0
 8011af6:	bfab      	itete	ge
 8011af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011afa:	89a3      	ldrhlt	r3, [r4, #12]
 8011afc:	181b      	addge	r3, r3, r0
 8011afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011b02:	bfac      	ite	ge
 8011b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8011b06:	81a3      	strhlt	r3, [r4, #12]
 8011b08:	bd10      	pop	{r4, pc}

08011b0a <__seofread>:
 8011b0a:	2000      	movs	r0, #0
 8011b0c:	4770      	bx	lr

08011b0e <__swrite>:
 8011b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b12:	461f      	mov	r7, r3
 8011b14:	898b      	ldrh	r3, [r1, #12]
 8011b16:	05db      	lsls	r3, r3, #23
 8011b18:	4605      	mov	r5, r0
 8011b1a:	460c      	mov	r4, r1
 8011b1c:	4616      	mov	r6, r2
 8011b1e:	d505      	bpl.n	8011b2c <__swrite+0x1e>
 8011b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b24:	2302      	movs	r3, #2
 8011b26:	2200      	movs	r2, #0
 8011b28:	f002 fa66 	bl	8013ff8 <_lseek_r>
 8011b2c:	89a3      	ldrh	r3, [r4, #12]
 8011b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b36:	81a3      	strh	r3, [r4, #12]
 8011b38:	4632      	mov	r2, r6
 8011b3a:	463b      	mov	r3, r7
 8011b3c:	4628      	mov	r0, r5
 8011b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b42:	f000 bf59 	b.w	80129f8 <_write_r>

08011b46 <__sseek>:
 8011b46:	b510      	push	{r4, lr}
 8011b48:	460c      	mov	r4, r1
 8011b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b4e:	f002 fa53 	bl	8013ff8 <_lseek_r>
 8011b52:	1c43      	adds	r3, r0, #1
 8011b54:	89a3      	ldrh	r3, [r4, #12]
 8011b56:	bf15      	itete	ne
 8011b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8011b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011b62:	81a3      	strheq	r3, [r4, #12]
 8011b64:	bf18      	it	ne
 8011b66:	81a3      	strhne	r3, [r4, #12]
 8011b68:	bd10      	pop	{r4, pc}

08011b6a <__sclose>:
 8011b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b6e:	f000 bf73 	b.w	8012a58 <_close_r>

08011b72 <strncmp>:
 8011b72:	b510      	push	{r4, lr}
 8011b74:	b16a      	cbz	r2, 8011b92 <strncmp+0x20>
 8011b76:	3901      	subs	r1, #1
 8011b78:	1884      	adds	r4, r0, r2
 8011b7a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011b7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011b82:	4293      	cmp	r3, r2
 8011b84:	d103      	bne.n	8011b8e <strncmp+0x1c>
 8011b86:	42a0      	cmp	r0, r4
 8011b88:	d001      	beq.n	8011b8e <strncmp+0x1c>
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d1f5      	bne.n	8011b7a <strncmp+0x8>
 8011b8e:	1a98      	subs	r0, r3, r2
 8011b90:	bd10      	pop	{r4, pc}
 8011b92:	4610      	mov	r0, r2
 8011b94:	e7fc      	b.n	8011b90 <strncmp+0x1e>

08011b96 <sulp>:
 8011b96:	b570      	push	{r4, r5, r6, lr}
 8011b98:	4604      	mov	r4, r0
 8011b9a:	460d      	mov	r5, r1
 8011b9c:	ec45 4b10 	vmov	d0, r4, r5
 8011ba0:	4616      	mov	r6, r2
 8011ba2:	f002 fdc5 	bl	8014730 <__ulp>
 8011ba6:	ec51 0b10 	vmov	r0, r1, d0
 8011baa:	b17e      	cbz	r6, 8011bcc <sulp+0x36>
 8011bac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011bb0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	dd09      	ble.n	8011bcc <sulp+0x36>
 8011bb8:	051b      	lsls	r3, r3, #20
 8011bba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011bbe:	2400      	movs	r4, #0
 8011bc0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011bc4:	4622      	mov	r2, r4
 8011bc6:	462b      	mov	r3, r5
 8011bc8:	f7ee fd26 	bl	8000618 <__aeabi_dmul>
 8011bcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08011bd0 <_strtod_l>:
 8011bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bd4:	b0a3      	sub	sp, #140	; 0x8c
 8011bd6:	461f      	mov	r7, r3
 8011bd8:	2300      	movs	r3, #0
 8011bda:	931e      	str	r3, [sp, #120]	; 0x78
 8011bdc:	4ba4      	ldr	r3, [pc, #656]	; (8011e70 <_strtod_l+0x2a0>)
 8011bde:	9219      	str	r2, [sp, #100]	; 0x64
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	9307      	str	r3, [sp, #28]
 8011be4:	4604      	mov	r4, r0
 8011be6:	4618      	mov	r0, r3
 8011be8:	4688      	mov	r8, r1
 8011bea:	f7ee fb01 	bl	80001f0 <strlen>
 8011bee:	f04f 0a00 	mov.w	sl, #0
 8011bf2:	4605      	mov	r5, r0
 8011bf4:	f04f 0b00 	mov.w	fp, #0
 8011bf8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011bfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011bfe:	781a      	ldrb	r2, [r3, #0]
 8011c00:	2a2b      	cmp	r2, #43	; 0x2b
 8011c02:	d04c      	beq.n	8011c9e <_strtod_l+0xce>
 8011c04:	d839      	bhi.n	8011c7a <_strtod_l+0xaa>
 8011c06:	2a0d      	cmp	r2, #13
 8011c08:	d832      	bhi.n	8011c70 <_strtod_l+0xa0>
 8011c0a:	2a08      	cmp	r2, #8
 8011c0c:	d832      	bhi.n	8011c74 <_strtod_l+0xa4>
 8011c0e:	2a00      	cmp	r2, #0
 8011c10:	d03c      	beq.n	8011c8c <_strtod_l+0xbc>
 8011c12:	2300      	movs	r3, #0
 8011c14:	930e      	str	r3, [sp, #56]	; 0x38
 8011c16:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011c18:	7833      	ldrb	r3, [r6, #0]
 8011c1a:	2b30      	cmp	r3, #48	; 0x30
 8011c1c:	f040 80b4 	bne.w	8011d88 <_strtod_l+0x1b8>
 8011c20:	7873      	ldrb	r3, [r6, #1]
 8011c22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011c26:	2b58      	cmp	r3, #88	; 0x58
 8011c28:	d16c      	bne.n	8011d04 <_strtod_l+0x134>
 8011c2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c2c:	9301      	str	r3, [sp, #4]
 8011c2e:	ab1e      	add	r3, sp, #120	; 0x78
 8011c30:	9702      	str	r7, [sp, #8]
 8011c32:	9300      	str	r3, [sp, #0]
 8011c34:	4a8f      	ldr	r2, [pc, #572]	; (8011e74 <_strtod_l+0x2a4>)
 8011c36:	ab1f      	add	r3, sp, #124	; 0x7c
 8011c38:	a91d      	add	r1, sp, #116	; 0x74
 8011c3a:	4620      	mov	r0, r4
 8011c3c:	f001 fed0 	bl	80139e0 <__gethex>
 8011c40:	f010 0707 	ands.w	r7, r0, #7
 8011c44:	4605      	mov	r5, r0
 8011c46:	d005      	beq.n	8011c54 <_strtod_l+0x84>
 8011c48:	2f06      	cmp	r7, #6
 8011c4a:	d12a      	bne.n	8011ca2 <_strtod_l+0xd2>
 8011c4c:	3601      	adds	r6, #1
 8011c4e:	2300      	movs	r3, #0
 8011c50:	961d      	str	r6, [sp, #116]	; 0x74
 8011c52:	930e      	str	r3, [sp, #56]	; 0x38
 8011c54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	f040 8596 	bne.w	8012788 <_strtod_l+0xbb8>
 8011c5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c5e:	b1db      	cbz	r3, 8011c98 <_strtod_l+0xc8>
 8011c60:	4652      	mov	r2, sl
 8011c62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011c66:	ec43 2b10 	vmov	d0, r2, r3
 8011c6a:	b023      	add	sp, #140	; 0x8c
 8011c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c70:	2a20      	cmp	r2, #32
 8011c72:	d1ce      	bne.n	8011c12 <_strtod_l+0x42>
 8011c74:	3301      	adds	r3, #1
 8011c76:	931d      	str	r3, [sp, #116]	; 0x74
 8011c78:	e7c0      	b.n	8011bfc <_strtod_l+0x2c>
 8011c7a:	2a2d      	cmp	r2, #45	; 0x2d
 8011c7c:	d1c9      	bne.n	8011c12 <_strtod_l+0x42>
 8011c7e:	2201      	movs	r2, #1
 8011c80:	920e      	str	r2, [sp, #56]	; 0x38
 8011c82:	1c5a      	adds	r2, r3, #1
 8011c84:	921d      	str	r2, [sp, #116]	; 0x74
 8011c86:	785b      	ldrb	r3, [r3, #1]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d1c4      	bne.n	8011c16 <_strtod_l+0x46>
 8011c8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011c8e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	f040 8576 	bne.w	8012784 <_strtod_l+0xbb4>
 8011c98:	4652      	mov	r2, sl
 8011c9a:	465b      	mov	r3, fp
 8011c9c:	e7e3      	b.n	8011c66 <_strtod_l+0x96>
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	e7ee      	b.n	8011c80 <_strtod_l+0xb0>
 8011ca2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011ca4:	b13a      	cbz	r2, 8011cb6 <_strtod_l+0xe6>
 8011ca6:	2135      	movs	r1, #53	; 0x35
 8011ca8:	a820      	add	r0, sp, #128	; 0x80
 8011caa:	f002 fe4c 	bl	8014946 <__copybits>
 8011cae:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	f002 fa11 	bl	80140d8 <_Bfree>
 8011cb6:	3f01      	subs	r7, #1
 8011cb8:	2f05      	cmp	r7, #5
 8011cba:	d807      	bhi.n	8011ccc <_strtod_l+0xfc>
 8011cbc:	e8df f007 	tbb	[pc, r7]
 8011cc0:	1d180b0e 	.word	0x1d180b0e
 8011cc4:	030e      	.short	0x030e
 8011cc6:	f04f 0b00 	mov.w	fp, #0
 8011cca:	46da      	mov	sl, fp
 8011ccc:	0728      	lsls	r0, r5, #28
 8011cce:	d5c1      	bpl.n	8011c54 <_strtod_l+0x84>
 8011cd0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011cd4:	e7be      	b.n	8011c54 <_strtod_l+0x84>
 8011cd6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8011cda:	e7f7      	b.n	8011ccc <_strtod_l+0xfc>
 8011cdc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011ce0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011ce2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011ce6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011cea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011cee:	e7ed      	b.n	8011ccc <_strtod_l+0xfc>
 8011cf0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011e78 <_strtod_l+0x2a8>
 8011cf4:	f04f 0a00 	mov.w	sl, #0
 8011cf8:	e7e8      	b.n	8011ccc <_strtod_l+0xfc>
 8011cfa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011cfe:	f04f 3aff 	mov.w	sl, #4294967295
 8011d02:	e7e3      	b.n	8011ccc <_strtod_l+0xfc>
 8011d04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011d06:	1c5a      	adds	r2, r3, #1
 8011d08:	921d      	str	r2, [sp, #116]	; 0x74
 8011d0a:	785b      	ldrb	r3, [r3, #1]
 8011d0c:	2b30      	cmp	r3, #48	; 0x30
 8011d0e:	d0f9      	beq.n	8011d04 <_strtod_l+0x134>
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d09f      	beq.n	8011c54 <_strtod_l+0x84>
 8011d14:	2301      	movs	r3, #1
 8011d16:	f04f 0900 	mov.w	r9, #0
 8011d1a:	9304      	str	r3, [sp, #16]
 8011d1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8011d20:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011d24:	464f      	mov	r7, r9
 8011d26:	220a      	movs	r2, #10
 8011d28:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011d2a:	7806      	ldrb	r6, [r0, #0]
 8011d2c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011d30:	b2d9      	uxtb	r1, r3
 8011d32:	2909      	cmp	r1, #9
 8011d34:	d92a      	bls.n	8011d8c <_strtod_l+0x1bc>
 8011d36:	9907      	ldr	r1, [sp, #28]
 8011d38:	462a      	mov	r2, r5
 8011d3a:	f7ff ff1a 	bl	8011b72 <strncmp>
 8011d3e:	b398      	cbz	r0, 8011da8 <_strtod_l+0x1d8>
 8011d40:	2000      	movs	r0, #0
 8011d42:	4633      	mov	r3, r6
 8011d44:	463d      	mov	r5, r7
 8011d46:	9007      	str	r0, [sp, #28]
 8011d48:	4602      	mov	r2, r0
 8011d4a:	2b65      	cmp	r3, #101	; 0x65
 8011d4c:	d001      	beq.n	8011d52 <_strtod_l+0x182>
 8011d4e:	2b45      	cmp	r3, #69	; 0x45
 8011d50:	d118      	bne.n	8011d84 <_strtod_l+0x1b4>
 8011d52:	b91d      	cbnz	r5, 8011d5c <_strtod_l+0x18c>
 8011d54:	9b04      	ldr	r3, [sp, #16]
 8011d56:	4303      	orrs	r3, r0
 8011d58:	d098      	beq.n	8011c8c <_strtod_l+0xbc>
 8011d5a:	2500      	movs	r5, #0
 8011d5c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8011d60:	f108 0301 	add.w	r3, r8, #1
 8011d64:	931d      	str	r3, [sp, #116]	; 0x74
 8011d66:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011d6a:	2b2b      	cmp	r3, #43	; 0x2b
 8011d6c:	d075      	beq.n	8011e5a <_strtod_l+0x28a>
 8011d6e:	2b2d      	cmp	r3, #45	; 0x2d
 8011d70:	d07b      	beq.n	8011e6a <_strtod_l+0x29a>
 8011d72:	f04f 0c00 	mov.w	ip, #0
 8011d76:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011d7a:	2909      	cmp	r1, #9
 8011d7c:	f240 8082 	bls.w	8011e84 <_strtod_l+0x2b4>
 8011d80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011d84:	2600      	movs	r6, #0
 8011d86:	e09d      	b.n	8011ec4 <_strtod_l+0x2f4>
 8011d88:	2300      	movs	r3, #0
 8011d8a:	e7c4      	b.n	8011d16 <_strtod_l+0x146>
 8011d8c:	2f08      	cmp	r7, #8
 8011d8e:	bfd8      	it	le
 8011d90:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011d92:	f100 0001 	add.w	r0, r0, #1
 8011d96:	bfda      	itte	le
 8011d98:	fb02 3301 	mlale	r3, r2, r1, r3
 8011d9c:	9309      	strle	r3, [sp, #36]	; 0x24
 8011d9e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8011da2:	3701      	adds	r7, #1
 8011da4:	901d      	str	r0, [sp, #116]	; 0x74
 8011da6:	e7bf      	b.n	8011d28 <_strtod_l+0x158>
 8011da8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011daa:	195a      	adds	r2, r3, r5
 8011dac:	921d      	str	r2, [sp, #116]	; 0x74
 8011dae:	5d5b      	ldrb	r3, [r3, r5]
 8011db0:	2f00      	cmp	r7, #0
 8011db2:	d037      	beq.n	8011e24 <_strtod_l+0x254>
 8011db4:	9007      	str	r0, [sp, #28]
 8011db6:	463d      	mov	r5, r7
 8011db8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011dbc:	2a09      	cmp	r2, #9
 8011dbe:	d912      	bls.n	8011de6 <_strtod_l+0x216>
 8011dc0:	2201      	movs	r2, #1
 8011dc2:	e7c2      	b.n	8011d4a <_strtod_l+0x17a>
 8011dc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011dc6:	1c5a      	adds	r2, r3, #1
 8011dc8:	921d      	str	r2, [sp, #116]	; 0x74
 8011dca:	785b      	ldrb	r3, [r3, #1]
 8011dcc:	3001      	adds	r0, #1
 8011dce:	2b30      	cmp	r3, #48	; 0x30
 8011dd0:	d0f8      	beq.n	8011dc4 <_strtod_l+0x1f4>
 8011dd2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8011dd6:	2a08      	cmp	r2, #8
 8011dd8:	f200 84db 	bhi.w	8012792 <_strtod_l+0xbc2>
 8011ddc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011dde:	9007      	str	r0, [sp, #28]
 8011de0:	2000      	movs	r0, #0
 8011de2:	920a      	str	r2, [sp, #40]	; 0x28
 8011de4:	4605      	mov	r5, r0
 8011de6:	3b30      	subs	r3, #48	; 0x30
 8011de8:	f100 0201 	add.w	r2, r0, #1
 8011dec:	d014      	beq.n	8011e18 <_strtod_l+0x248>
 8011dee:	9907      	ldr	r1, [sp, #28]
 8011df0:	4411      	add	r1, r2
 8011df2:	9107      	str	r1, [sp, #28]
 8011df4:	462a      	mov	r2, r5
 8011df6:	eb00 0e05 	add.w	lr, r0, r5
 8011dfa:	210a      	movs	r1, #10
 8011dfc:	4572      	cmp	r2, lr
 8011dfe:	d113      	bne.n	8011e28 <_strtod_l+0x258>
 8011e00:	182a      	adds	r2, r5, r0
 8011e02:	2a08      	cmp	r2, #8
 8011e04:	f105 0501 	add.w	r5, r5, #1
 8011e08:	4405      	add	r5, r0
 8011e0a:	dc1c      	bgt.n	8011e46 <_strtod_l+0x276>
 8011e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e0e:	220a      	movs	r2, #10
 8011e10:	fb02 3301 	mla	r3, r2, r1, r3
 8011e14:	9309      	str	r3, [sp, #36]	; 0x24
 8011e16:	2200      	movs	r2, #0
 8011e18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011e1a:	1c59      	adds	r1, r3, #1
 8011e1c:	911d      	str	r1, [sp, #116]	; 0x74
 8011e1e:	785b      	ldrb	r3, [r3, #1]
 8011e20:	4610      	mov	r0, r2
 8011e22:	e7c9      	b.n	8011db8 <_strtod_l+0x1e8>
 8011e24:	4638      	mov	r0, r7
 8011e26:	e7d2      	b.n	8011dce <_strtod_l+0x1fe>
 8011e28:	2a08      	cmp	r2, #8
 8011e2a:	dc04      	bgt.n	8011e36 <_strtod_l+0x266>
 8011e2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011e2e:	434e      	muls	r6, r1
 8011e30:	9609      	str	r6, [sp, #36]	; 0x24
 8011e32:	3201      	adds	r2, #1
 8011e34:	e7e2      	b.n	8011dfc <_strtod_l+0x22c>
 8011e36:	f102 0c01 	add.w	ip, r2, #1
 8011e3a:	f1bc 0f10 	cmp.w	ip, #16
 8011e3e:	bfd8      	it	le
 8011e40:	fb01 f909 	mulle.w	r9, r1, r9
 8011e44:	e7f5      	b.n	8011e32 <_strtod_l+0x262>
 8011e46:	2d10      	cmp	r5, #16
 8011e48:	bfdc      	itt	le
 8011e4a:	220a      	movle	r2, #10
 8011e4c:	fb02 3909 	mlale	r9, r2, r9, r3
 8011e50:	e7e1      	b.n	8011e16 <_strtod_l+0x246>
 8011e52:	2300      	movs	r3, #0
 8011e54:	9307      	str	r3, [sp, #28]
 8011e56:	2201      	movs	r2, #1
 8011e58:	e77c      	b.n	8011d54 <_strtod_l+0x184>
 8011e5a:	f04f 0c00 	mov.w	ip, #0
 8011e5e:	f108 0302 	add.w	r3, r8, #2
 8011e62:	931d      	str	r3, [sp, #116]	; 0x74
 8011e64:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011e68:	e785      	b.n	8011d76 <_strtod_l+0x1a6>
 8011e6a:	f04f 0c01 	mov.w	ip, #1
 8011e6e:	e7f6      	b.n	8011e5e <_strtod_l+0x28e>
 8011e70:	08016204 	.word	0x08016204
 8011e74:	08015f78 	.word	0x08015f78
 8011e78:	7ff00000 	.word	0x7ff00000
 8011e7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011e7e:	1c59      	adds	r1, r3, #1
 8011e80:	911d      	str	r1, [sp, #116]	; 0x74
 8011e82:	785b      	ldrb	r3, [r3, #1]
 8011e84:	2b30      	cmp	r3, #48	; 0x30
 8011e86:	d0f9      	beq.n	8011e7c <_strtod_l+0x2ac>
 8011e88:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8011e8c:	2908      	cmp	r1, #8
 8011e8e:	f63f af79 	bhi.w	8011d84 <_strtod_l+0x1b4>
 8011e92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011e96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011e98:	9308      	str	r3, [sp, #32]
 8011e9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011e9c:	1c59      	adds	r1, r3, #1
 8011e9e:	911d      	str	r1, [sp, #116]	; 0x74
 8011ea0:	785b      	ldrb	r3, [r3, #1]
 8011ea2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8011ea6:	2e09      	cmp	r6, #9
 8011ea8:	d937      	bls.n	8011f1a <_strtod_l+0x34a>
 8011eaa:	9e08      	ldr	r6, [sp, #32]
 8011eac:	1b89      	subs	r1, r1, r6
 8011eae:	2908      	cmp	r1, #8
 8011eb0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011eb4:	dc02      	bgt.n	8011ebc <_strtod_l+0x2ec>
 8011eb6:	4576      	cmp	r6, lr
 8011eb8:	bfa8      	it	ge
 8011eba:	4676      	movge	r6, lr
 8011ebc:	f1bc 0f00 	cmp.w	ip, #0
 8011ec0:	d000      	beq.n	8011ec4 <_strtod_l+0x2f4>
 8011ec2:	4276      	negs	r6, r6
 8011ec4:	2d00      	cmp	r5, #0
 8011ec6:	d14f      	bne.n	8011f68 <_strtod_l+0x398>
 8011ec8:	9904      	ldr	r1, [sp, #16]
 8011eca:	4301      	orrs	r1, r0
 8011ecc:	f47f aec2 	bne.w	8011c54 <_strtod_l+0x84>
 8011ed0:	2a00      	cmp	r2, #0
 8011ed2:	f47f aedb 	bne.w	8011c8c <_strtod_l+0xbc>
 8011ed6:	2b69      	cmp	r3, #105	; 0x69
 8011ed8:	d027      	beq.n	8011f2a <_strtod_l+0x35a>
 8011eda:	dc24      	bgt.n	8011f26 <_strtod_l+0x356>
 8011edc:	2b49      	cmp	r3, #73	; 0x49
 8011ede:	d024      	beq.n	8011f2a <_strtod_l+0x35a>
 8011ee0:	2b4e      	cmp	r3, #78	; 0x4e
 8011ee2:	f47f aed3 	bne.w	8011c8c <_strtod_l+0xbc>
 8011ee6:	499e      	ldr	r1, [pc, #632]	; (8012160 <_strtod_l+0x590>)
 8011ee8:	a81d      	add	r0, sp, #116	; 0x74
 8011eea:	f001 ffd1 	bl	8013e90 <__match>
 8011eee:	2800      	cmp	r0, #0
 8011ef0:	f43f aecc 	beq.w	8011c8c <_strtod_l+0xbc>
 8011ef4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011ef6:	781b      	ldrb	r3, [r3, #0]
 8011ef8:	2b28      	cmp	r3, #40	; 0x28
 8011efa:	d12d      	bne.n	8011f58 <_strtod_l+0x388>
 8011efc:	4999      	ldr	r1, [pc, #612]	; (8012164 <_strtod_l+0x594>)
 8011efe:	aa20      	add	r2, sp, #128	; 0x80
 8011f00:	a81d      	add	r0, sp, #116	; 0x74
 8011f02:	f001 ffd9 	bl	8013eb8 <__hexnan>
 8011f06:	2805      	cmp	r0, #5
 8011f08:	d126      	bne.n	8011f58 <_strtod_l+0x388>
 8011f0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f0c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011f10:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011f14:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011f18:	e69c      	b.n	8011c54 <_strtod_l+0x84>
 8011f1a:	210a      	movs	r1, #10
 8011f1c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011f20:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011f24:	e7b9      	b.n	8011e9a <_strtod_l+0x2ca>
 8011f26:	2b6e      	cmp	r3, #110	; 0x6e
 8011f28:	e7db      	b.n	8011ee2 <_strtod_l+0x312>
 8011f2a:	498f      	ldr	r1, [pc, #572]	; (8012168 <_strtod_l+0x598>)
 8011f2c:	a81d      	add	r0, sp, #116	; 0x74
 8011f2e:	f001 ffaf 	bl	8013e90 <__match>
 8011f32:	2800      	cmp	r0, #0
 8011f34:	f43f aeaa 	beq.w	8011c8c <_strtod_l+0xbc>
 8011f38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011f3a:	498c      	ldr	r1, [pc, #560]	; (801216c <_strtod_l+0x59c>)
 8011f3c:	3b01      	subs	r3, #1
 8011f3e:	a81d      	add	r0, sp, #116	; 0x74
 8011f40:	931d      	str	r3, [sp, #116]	; 0x74
 8011f42:	f001 ffa5 	bl	8013e90 <__match>
 8011f46:	b910      	cbnz	r0, 8011f4e <_strtod_l+0x37e>
 8011f48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011f4a:	3301      	adds	r3, #1
 8011f4c:	931d      	str	r3, [sp, #116]	; 0x74
 8011f4e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801217c <_strtod_l+0x5ac>
 8011f52:	f04f 0a00 	mov.w	sl, #0
 8011f56:	e67d      	b.n	8011c54 <_strtod_l+0x84>
 8011f58:	4885      	ldr	r0, [pc, #532]	; (8012170 <_strtod_l+0x5a0>)
 8011f5a:	f003 fb55 	bl	8015608 <nan>
 8011f5e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011f62:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011f66:	e675      	b.n	8011c54 <_strtod_l+0x84>
 8011f68:	9b07      	ldr	r3, [sp, #28]
 8011f6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f6c:	1af3      	subs	r3, r6, r3
 8011f6e:	2f00      	cmp	r7, #0
 8011f70:	bf08      	it	eq
 8011f72:	462f      	moveq	r7, r5
 8011f74:	2d10      	cmp	r5, #16
 8011f76:	9308      	str	r3, [sp, #32]
 8011f78:	46a8      	mov	r8, r5
 8011f7a:	bfa8      	it	ge
 8011f7c:	f04f 0810 	movge.w	r8, #16
 8011f80:	f7ee fad0 	bl	8000524 <__aeabi_ui2d>
 8011f84:	2d09      	cmp	r5, #9
 8011f86:	4682      	mov	sl, r0
 8011f88:	468b      	mov	fp, r1
 8011f8a:	dd13      	ble.n	8011fb4 <_strtod_l+0x3e4>
 8011f8c:	4b79      	ldr	r3, [pc, #484]	; (8012174 <_strtod_l+0x5a4>)
 8011f8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011f92:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011f96:	f7ee fb3f 	bl	8000618 <__aeabi_dmul>
 8011f9a:	4682      	mov	sl, r0
 8011f9c:	4648      	mov	r0, r9
 8011f9e:	468b      	mov	fp, r1
 8011fa0:	f7ee fac0 	bl	8000524 <__aeabi_ui2d>
 8011fa4:	4602      	mov	r2, r0
 8011fa6:	460b      	mov	r3, r1
 8011fa8:	4650      	mov	r0, sl
 8011faa:	4659      	mov	r1, fp
 8011fac:	f7ee f97e 	bl	80002ac <__adddf3>
 8011fb0:	4682      	mov	sl, r0
 8011fb2:	468b      	mov	fp, r1
 8011fb4:	2d0f      	cmp	r5, #15
 8011fb6:	dc38      	bgt.n	801202a <_strtod_l+0x45a>
 8011fb8:	9b08      	ldr	r3, [sp, #32]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	f43f ae4a 	beq.w	8011c54 <_strtod_l+0x84>
 8011fc0:	dd24      	ble.n	801200c <_strtod_l+0x43c>
 8011fc2:	2b16      	cmp	r3, #22
 8011fc4:	dc0b      	bgt.n	8011fde <_strtod_l+0x40e>
 8011fc6:	4d6b      	ldr	r5, [pc, #428]	; (8012174 <_strtod_l+0x5a4>)
 8011fc8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011fcc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011fd0:	4652      	mov	r2, sl
 8011fd2:	465b      	mov	r3, fp
 8011fd4:	f7ee fb20 	bl	8000618 <__aeabi_dmul>
 8011fd8:	4682      	mov	sl, r0
 8011fda:	468b      	mov	fp, r1
 8011fdc:	e63a      	b.n	8011c54 <_strtod_l+0x84>
 8011fde:	9a08      	ldr	r2, [sp, #32]
 8011fe0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011fe4:	4293      	cmp	r3, r2
 8011fe6:	db20      	blt.n	801202a <_strtod_l+0x45a>
 8011fe8:	4c62      	ldr	r4, [pc, #392]	; (8012174 <_strtod_l+0x5a4>)
 8011fea:	f1c5 050f 	rsb	r5, r5, #15
 8011fee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011ff2:	4652      	mov	r2, sl
 8011ff4:	465b      	mov	r3, fp
 8011ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ffa:	f7ee fb0d 	bl	8000618 <__aeabi_dmul>
 8011ffe:	9b08      	ldr	r3, [sp, #32]
 8012000:	1b5d      	subs	r5, r3, r5
 8012002:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012006:	e9d4 2300 	ldrd	r2, r3, [r4]
 801200a:	e7e3      	b.n	8011fd4 <_strtod_l+0x404>
 801200c:	9b08      	ldr	r3, [sp, #32]
 801200e:	3316      	adds	r3, #22
 8012010:	db0b      	blt.n	801202a <_strtod_l+0x45a>
 8012012:	9b07      	ldr	r3, [sp, #28]
 8012014:	4a57      	ldr	r2, [pc, #348]	; (8012174 <_strtod_l+0x5a4>)
 8012016:	1b9e      	subs	r6, r3, r6
 8012018:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801201c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012020:	4650      	mov	r0, sl
 8012022:	4659      	mov	r1, fp
 8012024:	f7ee fc22 	bl	800086c <__aeabi_ddiv>
 8012028:	e7d6      	b.n	8011fd8 <_strtod_l+0x408>
 801202a:	9b08      	ldr	r3, [sp, #32]
 801202c:	eba5 0808 	sub.w	r8, r5, r8
 8012030:	4498      	add	r8, r3
 8012032:	f1b8 0f00 	cmp.w	r8, #0
 8012036:	dd71      	ble.n	801211c <_strtod_l+0x54c>
 8012038:	f018 030f 	ands.w	r3, r8, #15
 801203c:	d00a      	beq.n	8012054 <_strtod_l+0x484>
 801203e:	494d      	ldr	r1, [pc, #308]	; (8012174 <_strtod_l+0x5a4>)
 8012040:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012044:	4652      	mov	r2, sl
 8012046:	465b      	mov	r3, fp
 8012048:	e9d1 0100 	ldrd	r0, r1, [r1]
 801204c:	f7ee fae4 	bl	8000618 <__aeabi_dmul>
 8012050:	4682      	mov	sl, r0
 8012052:	468b      	mov	fp, r1
 8012054:	f038 080f 	bics.w	r8, r8, #15
 8012058:	d04d      	beq.n	80120f6 <_strtod_l+0x526>
 801205a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801205e:	dd22      	ble.n	80120a6 <_strtod_l+0x4d6>
 8012060:	2500      	movs	r5, #0
 8012062:	462e      	mov	r6, r5
 8012064:	9509      	str	r5, [sp, #36]	; 0x24
 8012066:	9507      	str	r5, [sp, #28]
 8012068:	2322      	movs	r3, #34	; 0x22
 801206a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801217c <_strtod_l+0x5ac>
 801206e:	6023      	str	r3, [r4, #0]
 8012070:	f04f 0a00 	mov.w	sl, #0
 8012074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012076:	2b00      	cmp	r3, #0
 8012078:	f43f adec 	beq.w	8011c54 <_strtod_l+0x84>
 801207c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801207e:	4620      	mov	r0, r4
 8012080:	f002 f82a 	bl	80140d8 <_Bfree>
 8012084:	9907      	ldr	r1, [sp, #28]
 8012086:	4620      	mov	r0, r4
 8012088:	f002 f826 	bl	80140d8 <_Bfree>
 801208c:	4631      	mov	r1, r6
 801208e:	4620      	mov	r0, r4
 8012090:	f002 f822 	bl	80140d8 <_Bfree>
 8012094:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012096:	4620      	mov	r0, r4
 8012098:	f002 f81e 	bl	80140d8 <_Bfree>
 801209c:	4629      	mov	r1, r5
 801209e:	4620      	mov	r0, r4
 80120a0:	f002 f81a 	bl	80140d8 <_Bfree>
 80120a4:	e5d6      	b.n	8011c54 <_strtod_l+0x84>
 80120a6:	2300      	movs	r3, #0
 80120a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80120ac:	4650      	mov	r0, sl
 80120ae:	4659      	mov	r1, fp
 80120b0:	4699      	mov	r9, r3
 80120b2:	f1b8 0f01 	cmp.w	r8, #1
 80120b6:	dc21      	bgt.n	80120fc <_strtod_l+0x52c>
 80120b8:	b10b      	cbz	r3, 80120be <_strtod_l+0x4ee>
 80120ba:	4682      	mov	sl, r0
 80120bc:	468b      	mov	fp, r1
 80120be:	4b2e      	ldr	r3, [pc, #184]	; (8012178 <_strtod_l+0x5a8>)
 80120c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80120c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80120c8:	4652      	mov	r2, sl
 80120ca:	465b      	mov	r3, fp
 80120cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80120d0:	f7ee faa2 	bl	8000618 <__aeabi_dmul>
 80120d4:	4b29      	ldr	r3, [pc, #164]	; (801217c <_strtod_l+0x5ac>)
 80120d6:	460a      	mov	r2, r1
 80120d8:	400b      	ands	r3, r1
 80120da:	4929      	ldr	r1, [pc, #164]	; (8012180 <_strtod_l+0x5b0>)
 80120dc:	428b      	cmp	r3, r1
 80120de:	4682      	mov	sl, r0
 80120e0:	d8be      	bhi.n	8012060 <_strtod_l+0x490>
 80120e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80120e6:	428b      	cmp	r3, r1
 80120e8:	bf86      	itte	hi
 80120ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8012184 <_strtod_l+0x5b4>
 80120ee:	f04f 3aff 	movhi.w	sl, #4294967295
 80120f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80120f6:	2300      	movs	r3, #0
 80120f8:	9304      	str	r3, [sp, #16]
 80120fa:	e081      	b.n	8012200 <_strtod_l+0x630>
 80120fc:	f018 0f01 	tst.w	r8, #1
 8012100:	d007      	beq.n	8012112 <_strtod_l+0x542>
 8012102:	4b1d      	ldr	r3, [pc, #116]	; (8012178 <_strtod_l+0x5a8>)
 8012104:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8012108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210c:	f7ee fa84 	bl	8000618 <__aeabi_dmul>
 8012110:	2301      	movs	r3, #1
 8012112:	f109 0901 	add.w	r9, r9, #1
 8012116:	ea4f 0868 	mov.w	r8, r8, asr #1
 801211a:	e7ca      	b.n	80120b2 <_strtod_l+0x4e2>
 801211c:	d0eb      	beq.n	80120f6 <_strtod_l+0x526>
 801211e:	f1c8 0800 	rsb	r8, r8, #0
 8012122:	f018 020f 	ands.w	r2, r8, #15
 8012126:	d00a      	beq.n	801213e <_strtod_l+0x56e>
 8012128:	4b12      	ldr	r3, [pc, #72]	; (8012174 <_strtod_l+0x5a4>)
 801212a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801212e:	4650      	mov	r0, sl
 8012130:	4659      	mov	r1, fp
 8012132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012136:	f7ee fb99 	bl	800086c <__aeabi_ddiv>
 801213a:	4682      	mov	sl, r0
 801213c:	468b      	mov	fp, r1
 801213e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012142:	d0d8      	beq.n	80120f6 <_strtod_l+0x526>
 8012144:	f1b8 0f1f 	cmp.w	r8, #31
 8012148:	dd1e      	ble.n	8012188 <_strtod_l+0x5b8>
 801214a:	2500      	movs	r5, #0
 801214c:	462e      	mov	r6, r5
 801214e:	9509      	str	r5, [sp, #36]	; 0x24
 8012150:	9507      	str	r5, [sp, #28]
 8012152:	2322      	movs	r3, #34	; 0x22
 8012154:	f04f 0a00 	mov.w	sl, #0
 8012158:	f04f 0b00 	mov.w	fp, #0
 801215c:	6023      	str	r3, [r4, #0]
 801215e:	e789      	b.n	8012074 <_strtod_l+0x4a4>
 8012160:	08015f4d 	.word	0x08015f4d
 8012164:	08015f8c 	.word	0x08015f8c
 8012168:	08015f45 	.word	0x08015f45
 801216c:	08016108 	.word	0x08016108
 8012170:	08016003 	.word	0x08016003
 8012174:	080162a0 	.word	0x080162a0
 8012178:	08016278 	.word	0x08016278
 801217c:	7ff00000 	.word	0x7ff00000
 8012180:	7ca00000 	.word	0x7ca00000
 8012184:	7fefffff 	.word	0x7fefffff
 8012188:	f018 0310 	ands.w	r3, r8, #16
 801218c:	bf18      	it	ne
 801218e:	236a      	movne	r3, #106	; 0x6a
 8012190:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8012548 <_strtod_l+0x978>
 8012194:	9304      	str	r3, [sp, #16]
 8012196:	4650      	mov	r0, sl
 8012198:	4659      	mov	r1, fp
 801219a:	2300      	movs	r3, #0
 801219c:	f018 0f01 	tst.w	r8, #1
 80121a0:	d004      	beq.n	80121ac <_strtod_l+0x5dc>
 80121a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80121a6:	f7ee fa37 	bl	8000618 <__aeabi_dmul>
 80121aa:	2301      	movs	r3, #1
 80121ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 80121b0:	f109 0908 	add.w	r9, r9, #8
 80121b4:	d1f2      	bne.n	801219c <_strtod_l+0x5cc>
 80121b6:	b10b      	cbz	r3, 80121bc <_strtod_l+0x5ec>
 80121b8:	4682      	mov	sl, r0
 80121ba:	468b      	mov	fp, r1
 80121bc:	9b04      	ldr	r3, [sp, #16]
 80121be:	b1bb      	cbz	r3, 80121f0 <_strtod_l+0x620>
 80121c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80121c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	4659      	mov	r1, fp
 80121cc:	dd10      	ble.n	80121f0 <_strtod_l+0x620>
 80121ce:	2b1f      	cmp	r3, #31
 80121d0:	f340 8128 	ble.w	8012424 <_strtod_l+0x854>
 80121d4:	2b34      	cmp	r3, #52	; 0x34
 80121d6:	bfde      	ittt	le
 80121d8:	3b20      	suble	r3, #32
 80121da:	f04f 32ff 	movle.w	r2, #4294967295
 80121de:	fa02 f303 	lslle.w	r3, r2, r3
 80121e2:	f04f 0a00 	mov.w	sl, #0
 80121e6:	bfcc      	ite	gt
 80121e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80121ec:	ea03 0b01 	andle.w	fp, r3, r1
 80121f0:	2200      	movs	r2, #0
 80121f2:	2300      	movs	r3, #0
 80121f4:	4650      	mov	r0, sl
 80121f6:	4659      	mov	r1, fp
 80121f8:	f7ee fc76 	bl	8000ae8 <__aeabi_dcmpeq>
 80121fc:	2800      	cmp	r0, #0
 80121fe:	d1a4      	bne.n	801214a <_strtod_l+0x57a>
 8012200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012206:	462b      	mov	r3, r5
 8012208:	463a      	mov	r2, r7
 801220a:	4620      	mov	r0, r4
 801220c:	f001 ffd0 	bl	80141b0 <__s2b>
 8012210:	9009      	str	r0, [sp, #36]	; 0x24
 8012212:	2800      	cmp	r0, #0
 8012214:	f43f af24 	beq.w	8012060 <_strtod_l+0x490>
 8012218:	9b07      	ldr	r3, [sp, #28]
 801221a:	1b9e      	subs	r6, r3, r6
 801221c:	9b08      	ldr	r3, [sp, #32]
 801221e:	2b00      	cmp	r3, #0
 8012220:	bfb4      	ite	lt
 8012222:	4633      	movlt	r3, r6
 8012224:	2300      	movge	r3, #0
 8012226:	9310      	str	r3, [sp, #64]	; 0x40
 8012228:	9b08      	ldr	r3, [sp, #32]
 801222a:	2500      	movs	r5, #0
 801222c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012230:	9318      	str	r3, [sp, #96]	; 0x60
 8012232:	462e      	mov	r6, r5
 8012234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012236:	4620      	mov	r0, r4
 8012238:	6859      	ldr	r1, [r3, #4]
 801223a:	f001 ff0d 	bl	8014058 <_Balloc>
 801223e:	9007      	str	r0, [sp, #28]
 8012240:	2800      	cmp	r0, #0
 8012242:	f43f af11 	beq.w	8012068 <_strtod_l+0x498>
 8012246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012248:	691a      	ldr	r2, [r3, #16]
 801224a:	3202      	adds	r2, #2
 801224c:	f103 010c 	add.w	r1, r3, #12
 8012250:	0092      	lsls	r2, r2, #2
 8012252:	300c      	adds	r0, #12
 8012254:	f7fe fbe4 	bl	8010a20 <memcpy>
 8012258:	ec4b ab10 	vmov	d0, sl, fp
 801225c:	aa20      	add	r2, sp, #128	; 0x80
 801225e:	a91f      	add	r1, sp, #124	; 0x7c
 8012260:	4620      	mov	r0, r4
 8012262:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8012266:	f002 fadf 	bl	8014828 <__d2b>
 801226a:	901e      	str	r0, [sp, #120]	; 0x78
 801226c:	2800      	cmp	r0, #0
 801226e:	f43f aefb 	beq.w	8012068 <_strtod_l+0x498>
 8012272:	2101      	movs	r1, #1
 8012274:	4620      	mov	r0, r4
 8012276:	f002 f835 	bl	80142e4 <__i2b>
 801227a:	4606      	mov	r6, r0
 801227c:	2800      	cmp	r0, #0
 801227e:	f43f aef3 	beq.w	8012068 <_strtod_l+0x498>
 8012282:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012284:	9904      	ldr	r1, [sp, #16]
 8012286:	2b00      	cmp	r3, #0
 8012288:	bfab      	itete	ge
 801228a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801228c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801228e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8012290:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8012294:	bfac      	ite	ge
 8012296:	eb03 0902 	addge.w	r9, r3, r2
 801229a:	1ad7      	sublt	r7, r2, r3
 801229c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801229e:	eba3 0801 	sub.w	r8, r3, r1
 80122a2:	4490      	add	r8, r2
 80122a4:	4ba3      	ldr	r3, [pc, #652]	; (8012534 <_strtod_l+0x964>)
 80122a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80122aa:	4598      	cmp	r8, r3
 80122ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80122b0:	f280 80cc 	bge.w	801244c <_strtod_l+0x87c>
 80122b4:	eba3 0308 	sub.w	r3, r3, r8
 80122b8:	2b1f      	cmp	r3, #31
 80122ba:	eba2 0203 	sub.w	r2, r2, r3
 80122be:	f04f 0101 	mov.w	r1, #1
 80122c2:	f300 80b6 	bgt.w	8012432 <_strtod_l+0x862>
 80122c6:	fa01 f303 	lsl.w	r3, r1, r3
 80122ca:	9311      	str	r3, [sp, #68]	; 0x44
 80122cc:	2300      	movs	r3, #0
 80122ce:	930c      	str	r3, [sp, #48]	; 0x30
 80122d0:	eb09 0802 	add.w	r8, r9, r2
 80122d4:	9b04      	ldr	r3, [sp, #16]
 80122d6:	45c1      	cmp	r9, r8
 80122d8:	4417      	add	r7, r2
 80122da:	441f      	add	r7, r3
 80122dc:	464b      	mov	r3, r9
 80122de:	bfa8      	it	ge
 80122e0:	4643      	movge	r3, r8
 80122e2:	42bb      	cmp	r3, r7
 80122e4:	bfa8      	it	ge
 80122e6:	463b      	movge	r3, r7
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	bfc2      	ittt	gt
 80122ec:	eba8 0803 	subgt.w	r8, r8, r3
 80122f0:	1aff      	subgt	r7, r7, r3
 80122f2:	eba9 0903 	subgt.w	r9, r9, r3
 80122f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	dd17      	ble.n	801232c <_strtod_l+0x75c>
 80122fc:	4631      	mov	r1, r6
 80122fe:	461a      	mov	r2, r3
 8012300:	4620      	mov	r0, r4
 8012302:	f002 f8ab 	bl	801445c <__pow5mult>
 8012306:	4606      	mov	r6, r0
 8012308:	2800      	cmp	r0, #0
 801230a:	f43f aead 	beq.w	8012068 <_strtod_l+0x498>
 801230e:	4601      	mov	r1, r0
 8012310:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012312:	4620      	mov	r0, r4
 8012314:	f001 fffc 	bl	8014310 <__multiply>
 8012318:	900f      	str	r0, [sp, #60]	; 0x3c
 801231a:	2800      	cmp	r0, #0
 801231c:	f43f aea4 	beq.w	8012068 <_strtod_l+0x498>
 8012320:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012322:	4620      	mov	r0, r4
 8012324:	f001 fed8 	bl	80140d8 <_Bfree>
 8012328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801232a:	931e      	str	r3, [sp, #120]	; 0x78
 801232c:	f1b8 0f00 	cmp.w	r8, #0
 8012330:	f300 8091 	bgt.w	8012456 <_strtod_l+0x886>
 8012334:	9b08      	ldr	r3, [sp, #32]
 8012336:	2b00      	cmp	r3, #0
 8012338:	dd08      	ble.n	801234c <_strtod_l+0x77c>
 801233a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801233c:	9907      	ldr	r1, [sp, #28]
 801233e:	4620      	mov	r0, r4
 8012340:	f002 f88c 	bl	801445c <__pow5mult>
 8012344:	9007      	str	r0, [sp, #28]
 8012346:	2800      	cmp	r0, #0
 8012348:	f43f ae8e 	beq.w	8012068 <_strtod_l+0x498>
 801234c:	2f00      	cmp	r7, #0
 801234e:	dd08      	ble.n	8012362 <_strtod_l+0x792>
 8012350:	9907      	ldr	r1, [sp, #28]
 8012352:	463a      	mov	r2, r7
 8012354:	4620      	mov	r0, r4
 8012356:	f002 f8db 	bl	8014510 <__lshift>
 801235a:	9007      	str	r0, [sp, #28]
 801235c:	2800      	cmp	r0, #0
 801235e:	f43f ae83 	beq.w	8012068 <_strtod_l+0x498>
 8012362:	f1b9 0f00 	cmp.w	r9, #0
 8012366:	dd08      	ble.n	801237a <_strtod_l+0x7aa>
 8012368:	4631      	mov	r1, r6
 801236a:	464a      	mov	r2, r9
 801236c:	4620      	mov	r0, r4
 801236e:	f002 f8cf 	bl	8014510 <__lshift>
 8012372:	4606      	mov	r6, r0
 8012374:	2800      	cmp	r0, #0
 8012376:	f43f ae77 	beq.w	8012068 <_strtod_l+0x498>
 801237a:	9a07      	ldr	r2, [sp, #28]
 801237c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801237e:	4620      	mov	r0, r4
 8012380:	f002 f94e 	bl	8014620 <__mdiff>
 8012384:	4605      	mov	r5, r0
 8012386:	2800      	cmp	r0, #0
 8012388:	f43f ae6e 	beq.w	8012068 <_strtod_l+0x498>
 801238c:	68c3      	ldr	r3, [r0, #12]
 801238e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012390:	2300      	movs	r3, #0
 8012392:	60c3      	str	r3, [r0, #12]
 8012394:	4631      	mov	r1, r6
 8012396:	f002 f927 	bl	80145e8 <__mcmp>
 801239a:	2800      	cmp	r0, #0
 801239c:	da65      	bge.n	801246a <_strtod_l+0x89a>
 801239e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123a0:	ea53 030a 	orrs.w	r3, r3, sl
 80123a4:	f040 8087 	bne.w	80124b6 <_strtod_l+0x8e6>
 80123a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	f040 8082 	bne.w	80124b6 <_strtod_l+0x8e6>
 80123b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80123b6:	0d1b      	lsrs	r3, r3, #20
 80123b8:	051b      	lsls	r3, r3, #20
 80123ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80123be:	d97a      	bls.n	80124b6 <_strtod_l+0x8e6>
 80123c0:	696b      	ldr	r3, [r5, #20]
 80123c2:	b913      	cbnz	r3, 80123ca <_strtod_l+0x7fa>
 80123c4:	692b      	ldr	r3, [r5, #16]
 80123c6:	2b01      	cmp	r3, #1
 80123c8:	dd75      	ble.n	80124b6 <_strtod_l+0x8e6>
 80123ca:	4629      	mov	r1, r5
 80123cc:	2201      	movs	r2, #1
 80123ce:	4620      	mov	r0, r4
 80123d0:	f002 f89e 	bl	8014510 <__lshift>
 80123d4:	4631      	mov	r1, r6
 80123d6:	4605      	mov	r5, r0
 80123d8:	f002 f906 	bl	80145e8 <__mcmp>
 80123dc:	2800      	cmp	r0, #0
 80123de:	dd6a      	ble.n	80124b6 <_strtod_l+0x8e6>
 80123e0:	9904      	ldr	r1, [sp, #16]
 80123e2:	4a55      	ldr	r2, [pc, #340]	; (8012538 <_strtod_l+0x968>)
 80123e4:	465b      	mov	r3, fp
 80123e6:	2900      	cmp	r1, #0
 80123e8:	f000 8085 	beq.w	80124f6 <_strtod_l+0x926>
 80123ec:	ea02 010b 	and.w	r1, r2, fp
 80123f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80123f4:	dc7f      	bgt.n	80124f6 <_strtod_l+0x926>
 80123f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80123fa:	f77f aeaa 	ble.w	8012152 <_strtod_l+0x582>
 80123fe:	4a4f      	ldr	r2, [pc, #316]	; (801253c <_strtod_l+0x96c>)
 8012400:	2300      	movs	r3, #0
 8012402:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8012406:	4650      	mov	r0, sl
 8012408:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801240c:	4659      	mov	r1, fp
 801240e:	f7ee f903 	bl	8000618 <__aeabi_dmul>
 8012412:	460b      	mov	r3, r1
 8012414:	4303      	orrs	r3, r0
 8012416:	bf08      	it	eq
 8012418:	2322      	moveq	r3, #34	; 0x22
 801241a:	4682      	mov	sl, r0
 801241c:	468b      	mov	fp, r1
 801241e:	bf08      	it	eq
 8012420:	6023      	streq	r3, [r4, #0]
 8012422:	e62b      	b.n	801207c <_strtod_l+0x4ac>
 8012424:	f04f 32ff 	mov.w	r2, #4294967295
 8012428:	fa02 f303 	lsl.w	r3, r2, r3
 801242c:	ea03 0a0a 	and.w	sl, r3, sl
 8012430:	e6de      	b.n	80121f0 <_strtod_l+0x620>
 8012432:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8012436:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801243a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801243e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8012442:	fa01 f308 	lsl.w	r3, r1, r8
 8012446:	930c      	str	r3, [sp, #48]	; 0x30
 8012448:	9111      	str	r1, [sp, #68]	; 0x44
 801244a:	e741      	b.n	80122d0 <_strtod_l+0x700>
 801244c:	2300      	movs	r3, #0
 801244e:	930c      	str	r3, [sp, #48]	; 0x30
 8012450:	2301      	movs	r3, #1
 8012452:	9311      	str	r3, [sp, #68]	; 0x44
 8012454:	e73c      	b.n	80122d0 <_strtod_l+0x700>
 8012456:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012458:	4642      	mov	r2, r8
 801245a:	4620      	mov	r0, r4
 801245c:	f002 f858 	bl	8014510 <__lshift>
 8012460:	901e      	str	r0, [sp, #120]	; 0x78
 8012462:	2800      	cmp	r0, #0
 8012464:	f47f af66 	bne.w	8012334 <_strtod_l+0x764>
 8012468:	e5fe      	b.n	8012068 <_strtod_l+0x498>
 801246a:	465f      	mov	r7, fp
 801246c:	d16e      	bne.n	801254c <_strtod_l+0x97c>
 801246e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012470:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012474:	b342      	cbz	r2, 80124c8 <_strtod_l+0x8f8>
 8012476:	4a32      	ldr	r2, [pc, #200]	; (8012540 <_strtod_l+0x970>)
 8012478:	4293      	cmp	r3, r2
 801247a:	d128      	bne.n	80124ce <_strtod_l+0x8fe>
 801247c:	9b04      	ldr	r3, [sp, #16]
 801247e:	4650      	mov	r0, sl
 8012480:	b1eb      	cbz	r3, 80124be <_strtod_l+0x8ee>
 8012482:	4a2d      	ldr	r2, [pc, #180]	; (8012538 <_strtod_l+0x968>)
 8012484:	403a      	ands	r2, r7
 8012486:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801248a:	f04f 31ff 	mov.w	r1, #4294967295
 801248e:	d819      	bhi.n	80124c4 <_strtod_l+0x8f4>
 8012490:	0d12      	lsrs	r2, r2, #20
 8012492:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012496:	fa01 f303 	lsl.w	r3, r1, r3
 801249a:	4298      	cmp	r0, r3
 801249c:	d117      	bne.n	80124ce <_strtod_l+0x8fe>
 801249e:	4b29      	ldr	r3, [pc, #164]	; (8012544 <_strtod_l+0x974>)
 80124a0:	429f      	cmp	r7, r3
 80124a2:	d102      	bne.n	80124aa <_strtod_l+0x8da>
 80124a4:	3001      	adds	r0, #1
 80124a6:	f43f addf 	beq.w	8012068 <_strtod_l+0x498>
 80124aa:	4b23      	ldr	r3, [pc, #140]	; (8012538 <_strtod_l+0x968>)
 80124ac:	403b      	ands	r3, r7
 80124ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80124b2:	f04f 0a00 	mov.w	sl, #0
 80124b6:	9b04      	ldr	r3, [sp, #16]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d1a0      	bne.n	80123fe <_strtod_l+0x82e>
 80124bc:	e5de      	b.n	801207c <_strtod_l+0x4ac>
 80124be:	f04f 33ff 	mov.w	r3, #4294967295
 80124c2:	e7ea      	b.n	801249a <_strtod_l+0x8ca>
 80124c4:	460b      	mov	r3, r1
 80124c6:	e7e8      	b.n	801249a <_strtod_l+0x8ca>
 80124c8:	ea53 030a 	orrs.w	r3, r3, sl
 80124cc:	d088      	beq.n	80123e0 <_strtod_l+0x810>
 80124ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124d0:	b1db      	cbz	r3, 801250a <_strtod_l+0x93a>
 80124d2:	423b      	tst	r3, r7
 80124d4:	d0ef      	beq.n	80124b6 <_strtod_l+0x8e6>
 80124d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80124d8:	9a04      	ldr	r2, [sp, #16]
 80124da:	4650      	mov	r0, sl
 80124dc:	4659      	mov	r1, fp
 80124de:	b1c3      	cbz	r3, 8012512 <_strtod_l+0x942>
 80124e0:	f7ff fb59 	bl	8011b96 <sulp>
 80124e4:	4602      	mov	r2, r0
 80124e6:	460b      	mov	r3, r1
 80124e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80124ec:	f7ed fede 	bl	80002ac <__adddf3>
 80124f0:	4682      	mov	sl, r0
 80124f2:	468b      	mov	fp, r1
 80124f4:	e7df      	b.n	80124b6 <_strtod_l+0x8e6>
 80124f6:	4013      	ands	r3, r2
 80124f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80124fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012500:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012504:	f04f 3aff 	mov.w	sl, #4294967295
 8012508:	e7d5      	b.n	80124b6 <_strtod_l+0x8e6>
 801250a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801250c:	ea13 0f0a 	tst.w	r3, sl
 8012510:	e7e0      	b.n	80124d4 <_strtod_l+0x904>
 8012512:	f7ff fb40 	bl	8011b96 <sulp>
 8012516:	4602      	mov	r2, r0
 8012518:	460b      	mov	r3, r1
 801251a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801251e:	f7ed fec3 	bl	80002a8 <__aeabi_dsub>
 8012522:	2200      	movs	r2, #0
 8012524:	2300      	movs	r3, #0
 8012526:	4682      	mov	sl, r0
 8012528:	468b      	mov	fp, r1
 801252a:	f7ee fadd 	bl	8000ae8 <__aeabi_dcmpeq>
 801252e:	2800      	cmp	r0, #0
 8012530:	d0c1      	beq.n	80124b6 <_strtod_l+0x8e6>
 8012532:	e60e      	b.n	8012152 <_strtod_l+0x582>
 8012534:	fffffc02 	.word	0xfffffc02
 8012538:	7ff00000 	.word	0x7ff00000
 801253c:	39500000 	.word	0x39500000
 8012540:	000fffff 	.word	0x000fffff
 8012544:	7fefffff 	.word	0x7fefffff
 8012548:	08015fa0 	.word	0x08015fa0
 801254c:	4631      	mov	r1, r6
 801254e:	4628      	mov	r0, r5
 8012550:	f002 f9c6 	bl	80148e0 <__ratio>
 8012554:	ec59 8b10 	vmov	r8, r9, d0
 8012558:	ee10 0a10 	vmov	r0, s0
 801255c:	2200      	movs	r2, #0
 801255e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012562:	4649      	mov	r1, r9
 8012564:	f7ee fad4 	bl	8000b10 <__aeabi_dcmple>
 8012568:	2800      	cmp	r0, #0
 801256a:	d07c      	beq.n	8012666 <_strtod_l+0xa96>
 801256c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801256e:	2b00      	cmp	r3, #0
 8012570:	d04c      	beq.n	801260c <_strtod_l+0xa3c>
 8012572:	4b95      	ldr	r3, [pc, #596]	; (80127c8 <_strtod_l+0xbf8>)
 8012574:	2200      	movs	r2, #0
 8012576:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801257a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80127c8 <_strtod_l+0xbf8>
 801257e:	f04f 0800 	mov.w	r8, #0
 8012582:	4b92      	ldr	r3, [pc, #584]	; (80127cc <_strtod_l+0xbfc>)
 8012584:	403b      	ands	r3, r7
 8012586:	9311      	str	r3, [sp, #68]	; 0x44
 8012588:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801258a:	4b91      	ldr	r3, [pc, #580]	; (80127d0 <_strtod_l+0xc00>)
 801258c:	429a      	cmp	r2, r3
 801258e:	f040 80b2 	bne.w	80126f6 <_strtod_l+0xb26>
 8012592:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801259a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801259e:	ec4b ab10 	vmov	d0, sl, fp
 80125a2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80125a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80125aa:	f002 f8c1 	bl	8014730 <__ulp>
 80125ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80125b2:	ec53 2b10 	vmov	r2, r3, d0
 80125b6:	f7ee f82f 	bl	8000618 <__aeabi_dmul>
 80125ba:	4652      	mov	r2, sl
 80125bc:	465b      	mov	r3, fp
 80125be:	f7ed fe75 	bl	80002ac <__adddf3>
 80125c2:	460b      	mov	r3, r1
 80125c4:	4981      	ldr	r1, [pc, #516]	; (80127cc <_strtod_l+0xbfc>)
 80125c6:	4a83      	ldr	r2, [pc, #524]	; (80127d4 <_strtod_l+0xc04>)
 80125c8:	4019      	ands	r1, r3
 80125ca:	4291      	cmp	r1, r2
 80125cc:	4682      	mov	sl, r0
 80125ce:	d95e      	bls.n	801268e <_strtod_l+0xabe>
 80125d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80125d6:	4293      	cmp	r3, r2
 80125d8:	d103      	bne.n	80125e2 <_strtod_l+0xa12>
 80125da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125dc:	3301      	adds	r3, #1
 80125de:	f43f ad43 	beq.w	8012068 <_strtod_l+0x498>
 80125e2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80127e0 <_strtod_l+0xc10>
 80125e6:	f04f 3aff 	mov.w	sl, #4294967295
 80125ea:	991e      	ldr	r1, [sp, #120]	; 0x78
 80125ec:	4620      	mov	r0, r4
 80125ee:	f001 fd73 	bl	80140d8 <_Bfree>
 80125f2:	9907      	ldr	r1, [sp, #28]
 80125f4:	4620      	mov	r0, r4
 80125f6:	f001 fd6f 	bl	80140d8 <_Bfree>
 80125fa:	4631      	mov	r1, r6
 80125fc:	4620      	mov	r0, r4
 80125fe:	f001 fd6b 	bl	80140d8 <_Bfree>
 8012602:	4629      	mov	r1, r5
 8012604:	4620      	mov	r0, r4
 8012606:	f001 fd67 	bl	80140d8 <_Bfree>
 801260a:	e613      	b.n	8012234 <_strtod_l+0x664>
 801260c:	f1ba 0f00 	cmp.w	sl, #0
 8012610:	d11b      	bne.n	801264a <_strtod_l+0xa7a>
 8012612:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012616:	b9f3      	cbnz	r3, 8012656 <_strtod_l+0xa86>
 8012618:	4b6b      	ldr	r3, [pc, #428]	; (80127c8 <_strtod_l+0xbf8>)
 801261a:	2200      	movs	r2, #0
 801261c:	4640      	mov	r0, r8
 801261e:	4649      	mov	r1, r9
 8012620:	f7ee fa6c 	bl	8000afc <__aeabi_dcmplt>
 8012624:	b9d0      	cbnz	r0, 801265c <_strtod_l+0xa8c>
 8012626:	4640      	mov	r0, r8
 8012628:	4649      	mov	r1, r9
 801262a:	4b6b      	ldr	r3, [pc, #428]	; (80127d8 <_strtod_l+0xc08>)
 801262c:	2200      	movs	r2, #0
 801262e:	f7ed fff3 	bl	8000618 <__aeabi_dmul>
 8012632:	4680      	mov	r8, r0
 8012634:	4689      	mov	r9, r1
 8012636:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801263a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801263e:	931b      	str	r3, [sp, #108]	; 0x6c
 8012640:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8012644:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012648:	e79b      	b.n	8012582 <_strtod_l+0x9b2>
 801264a:	f1ba 0f01 	cmp.w	sl, #1
 801264e:	d102      	bne.n	8012656 <_strtod_l+0xa86>
 8012650:	2f00      	cmp	r7, #0
 8012652:	f43f ad7e 	beq.w	8012152 <_strtod_l+0x582>
 8012656:	4b61      	ldr	r3, [pc, #388]	; (80127dc <_strtod_l+0xc0c>)
 8012658:	2200      	movs	r2, #0
 801265a:	e78c      	b.n	8012576 <_strtod_l+0x9a6>
 801265c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80127d8 <_strtod_l+0xc08>
 8012660:	f04f 0800 	mov.w	r8, #0
 8012664:	e7e7      	b.n	8012636 <_strtod_l+0xa66>
 8012666:	4b5c      	ldr	r3, [pc, #368]	; (80127d8 <_strtod_l+0xc08>)
 8012668:	4640      	mov	r0, r8
 801266a:	4649      	mov	r1, r9
 801266c:	2200      	movs	r2, #0
 801266e:	f7ed ffd3 	bl	8000618 <__aeabi_dmul>
 8012672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012674:	4680      	mov	r8, r0
 8012676:	4689      	mov	r9, r1
 8012678:	b933      	cbnz	r3, 8012688 <_strtod_l+0xab8>
 801267a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801267e:	9012      	str	r0, [sp, #72]	; 0x48
 8012680:	9313      	str	r3, [sp, #76]	; 0x4c
 8012682:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8012686:	e7dd      	b.n	8012644 <_strtod_l+0xa74>
 8012688:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801268c:	e7f9      	b.n	8012682 <_strtod_l+0xab2>
 801268e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012692:	9b04      	ldr	r3, [sp, #16]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d1a8      	bne.n	80125ea <_strtod_l+0xa1a>
 8012698:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801269c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801269e:	0d1b      	lsrs	r3, r3, #20
 80126a0:	051b      	lsls	r3, r3, #20
 80126a2:	429a      	cmp	r2, r3
 80126a4:	d1a1      	bne.n	80125ea <_strtod_l+0xa1a>
 80126a6:	4640      	mov	r0, r8
 80126a8:	4649      	mov	r1, r9
 80126aa:	f7ee fb15 	bl	8000cd8 <__aeabi_d2lz>
 80126ae:	f7ed ff85 	bl	80005bc <__aeabi_l2d>
 80126b2:	4602      	mov	r2, r0
 80126b4:	460b      	mov	r3, r1
 80126b6:	4640      	mov	r0, r8
 80126b8:	4649      	mov	r1, r9
 80126ba:	f7ed fdf5 	bl	80002a8 <__aeabi_dsub>
 80126be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80126c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80126c4:	ea43 030a 	orr.w	r3, r3, sl
 80126c8:	4313      	orrs	r3, r2
 80126ca:	4680      	mov	r8, r0
 80126cc:	4689      	mov	r9, r1
 80126ce:	d053      	beq.n	8012778 <_strtod_l+0xba8>
 80126d0:	a335      	add	r3, pc, #212	; (adr r3, 80127a8 <_strtod_l+0xbd8>)
 80126d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d6:	f7ee fa11 	bl	8000afc <__aeabi_dcmplt>
 80126da:	2800      	cmp	r0, #0
 80126dc:	f47f acce 	bne.w	801207c <_strtod_l+0x4ac>
 80126e0:	a333      	add	r3, pc, #204	; (adr r3, 80127b0 <_strtod_l+0xbe0>)
 80126e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e6:	4640      	mov	r0, r8
 80126e8:	4649      	mov	r1, r9
 80126ea:	f7ee fa25 	bl	8000b38 <__aeabi_dcmpgt>
 80126ee:	2800      	cmp	r0, #0
 80126f0:	f43f af7b 	beq.w	80125ea <_strtod_l+0xa1a>
 80126f4:	e4c2      	b.n	801207c <_strtod_l+0x4ac>
 80126f6:	9b04      	ldr	r3, [sp, #16]
 80126f8:	b333      	cbz	r3, 8012748 <_strtod_l+0xb78>
 80126fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80126fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012700:	d822      	bhi.n	8012748 <_strtod_l+0xb78>
 8012702:	a32d      	add	r3, pc, #180	; (adr r3, 80127b8 <_strtod_l+0xbe8>)
 8012704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012708:	4640      	mov	r0, r8
 801270a:	4649      	mov	r1, r9
 801270c:	f7ee fa00 	bl	8000b10 <__aeabi_dcmple>
 8012710:	b1a0      	cbz	r0, 801273c <_strtod_l+0xb6c>
 8012712:	4649      	mov	r1, r9
 8012714:	4640      	mov	r0, r8
 8012716:	f7ee fa57 	bl	8000bc8 <__aeabi_d2uiz>
 801271a:	2801      	cmp	r0, #1
 801271c:	bf38      	it	cc
 801271e:	2001      	movcc	r0, #1
 8012720:	f7ed ff00 	bl	8000524 <__aeabi_ui2d>
 8012724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012726:	4680      	mov	r8, r0
 8012728:	4689      	mov	r9, r1
 801272a:	bb13      	cbnz	r3, 8012772 <_strtod_l+0xba2>
 801272c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012730:	9014      	str	r0, [sp, #80]	; 0x50
 8012732:	9315      	str	r3, [sp, #84]	; 0x54
 8012734:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012738:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801273c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801273e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012740:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012744:	1a9b      	subs	r3, r3, r2
 8012746:	930d      	str	r3, [sp, #52]	; 0x34
 8012748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801274c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012750:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012754:	f001 ffec 	bl	8014730 <__ulp>
 8012758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801275c:	ec53 2b10 	vmov	r2, r3, d0
 8012760:	f7ed ff5a 	bl	8000618 <__aeabi_dmul>
 8012764:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012768:	f7ed fda0 	bl	80002ac <__adddf3>
 801276c:	4682      	mov	sl, r0
 801276e:	468b      	mov	fp, r1
 8012770:	e78f      	b.n	8012692 <_strtod_l+0xac2>
 8012772:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8012776:	e7dd      	b.n	8012734 <_strtod_l+0xb64>
 8012778:	a311      	add	r3, pc, #68	; (adr r3, 80127c0 <_strtod_l+0xbf0>)
 801277a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801277e:	f7ee f9bd 	bl	8000afc <__aeabi_dcmplt>
 8012782:	e7b4      	b.n	80126ee <_strtod_l+0xb1e>
 8012784:	2300      	movs	r3, #0
 8012786:	930e      	str	r3, [sp, #56]	; 0x38
 8012788:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801278a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801278c:	6013      	str	r3, [r2, #0]
 801278e:	f7ff ba65 	b.w	8011c5c <_strtod_l+0x8c>
 8012792:	2b65      	cmp	r3, #101	; 0x65
 8012794:	f43f ab5d 	beq.w	8011e52 <_strtod_l+0x282>
 8012798:	2b45      	cmp	r3, #69	; 0x45
 801279a:	f43f ab5a 	beq.w	8011e52 <_strtod_l+0x282>
 801279e:	2201      	movs	r2, #1
 80127a0:	f7ff bb92 	b.w	8011ec8 <_strtod_l+0x2f8>
 80127a4:	f3af 8000 	nop.w
 80127a8:	94a03595 	.word	0x94a03595
 80127ac:	3fdfffff 	.word	0x3fdfffff
 80127b0:	35afe535 	.word	0x35afe535
 80127b4:	3fe00000 	.word	0x3fe00000
 80127b8:	ffc00000 	.word	0xffc00000
 80127bc:	41dfffff 	.word	0x41dfffff
 80127c0:	94a03595 	.word	0x94a03595
 80127c4:	3fcfffff 	.word	0x3fcfffff
 80127c8:	3ff00000 	.word	0x3ff00000
 80127cc:	7ff00000 	.word	0x7ff00000
 80127d0:	7fe00000 	.word	0x7fe00000
 80127d4:	7c9fffff 	.word	0x7c9fffff
 80127d8:	3fe00000 	.word	0x3fe00000
 80127dc:	bff00000 	.word	0xbff00000
 80127e0:	7fefffff 	.word	0x7fefffff

080127e4 <_strtod_r>:
 80127e4:	4b01      	ldr	r3, [pc, #4]	; (80127ec <_strtod_r+0x8>)
 80127e6:	f7ff b9f3 	b.w	8011bd0 <_strtod_l>
 80127ea:	bf00      	nop
 80127ec:	200001f0 	.word	0x200001f0

080127f0 <_strtol_l.isra.0>:
 80127f0:	2b01      	cmp	r3, #1
 80127f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127f6:	d001      	beq.n	80127fc <_strtol_l.isra.0+0xc>
 80127f8:	2b24      	cmp	r3, #36	; 0x24
 80127fa:	d906      	bls.n	801280a <_strtol_l.isra.0+0x1a>
 80127fc:	f7fd ffdc 	bl	80107b8 <__errno>
 8012800:	2316      	movs	r3, #22
 8012802:	6003      	str	r3, [r0, #0]
 8012804:	2000      	movs	r0, #0
 8012806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801280a:	4f3a      	ldr	r7, [pc, #232]	; (80128f4 <_strtol_l.isra.0+0x104>)
 801280c:	468e      	mov	lr, r1
 801280e:	4676      	mov	r6, lr
 8012810:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012814:	5de5      	ldrb	r5, [r4, r7]
 8012816:	f015 0508 	ands.w	r5, r5, #8
 801281a:	d1f8      	bne.n	801280e <_strtol_l.isra.0+0x1e>
 801281c:	2c2d      	cmp	r4, #45	; 0x2d
 801281e:	d134      	bne.n	801288a <_strtol_l.isra.0+0x9a>
 8012820:	f89e 4000 	ldrb.w	r4, [lr]
 8012824:	f04f 0801 	mov.w	r8, #1
 8012828:	f106 0e02 	add.w	lr, r6, #2
 801282c:	2b00      	cmp	r3, #0
 801282e:	d05c      	beq.n	80128ea <_strtol_l.isra.0+0xfa>
 8012830:	2b10      	cmp	r3, #16
 8012832:	d10c      	bne.n	801284e <_strtol_l.isra.0+0x5e>
 8012834:	2c30      	cmp	r4, #48	; 0x30
 8012836:	d10a      	bne.n	801284e <_strtol_l.isra.0+0x5e>
 8012838:	f89e 4000 	ldrb.w	r4, [lr]
 801283c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012840:	2c58      	cmp	r4, #88	; 0x58
 8012842:	d14d      	bne.n	80128e0 <_strtol_l.isra.0+0xf0>
 8012844:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8012848:	2310      	movs	r3, #16
 801284a:	f10e 0e02 	add.w	lr, lr, #2
 801284e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8012852:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012856:	2600      	movs	r6, #0
 8012858:	fbbc f9f3 	udiv	r9, ip, r3
 801285c:	4635      	mov	r5, r6
 801285e:	fb03 ca19 	mls	sl, r3, r9, ip
 8012862:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012866:	2f09      	cmp	r7, #9
 8012868:	d818      	bhi.n	801289c <_strtol_l.isra.0+0xac>
 801286a:	463c      	mov	r4, r7
 801286c:	42a3      	cmp	r3, r4
 801286e:	dd24      	ble.n	80128ba <_strtol_l.isra.0+0xca>
 8012870:	2e00      	cmp	r6, #0
 8012872:	db1f      	blt.n	80128b4 <_strtol_l.isra.0+0xc4>
 8012874:	45a9      	cmp	r9, r5
 8012876:	d31d      	bcc.n	80128b4 <_strtol_l.isra.0+0xc4>
 8012878:	d101      	bne.n	801287e <_strtol_l.isra.0+0x8e>
 801287a:	45a2      	cmp	sl, r4
 801287c:	db1a      	blt.n	80128b4 <_strtol_l.isra.0+0xc4>
 801287e:	fb05 4503 	mla	r5, r5, r3, r4
 8012882:	2601      	movs	r6, #1
 8012884:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012888:	e7eb      	b.n	8012862 <_strtol_l.isra.0+0x72>
 801288a:	2c2b      	cmp	r4, #43	; 0x2b
 801288c:	bf08      	it	eq
 801288e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8012892:	46a8      	mov	r8, r5
 8012894:	bf08      	it	eq
 8012896:	f106 0e02 	addeq.w	lr, r6, #2
 801289a:	e7c7      	b.n	801282c <_strtol_l.isra.0+0x3c>
 801289c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80128a0:	2f19      	cmp	r7, #25
 80128a2:	d801      	bhi.n	80128a8 <_strtol_l.isra.0+0xb8>
 80128a4:	3c37      	subs	r4, #55	; 0x37
 80128a6:	e7e1      	b.n	801286c <_strtol_l.isra.0+0x7c>
 80128a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80128ac:	2f19      	cmp	r7, #25
 80128ae:	d804      	bhi.n	80128ba <_strtol_l.isra.0+0xca>
 80128b0:	3c57      	subs	r4, #87	; 0x57
 80128b2:	e7db      	b.n	801286c <_strtol_l.isra.0+0x7c>
 80128b4:	f04f 36ff 	mov.w	r6, #4294967295
 80128b8:	e7e4      	b.n	8012884 <_strtol_l.isra.0+0x94>
 80128ba:	2e00      	cmp	r6, #0
 80128bc:	da05      	bge.n	80128ca <_strtol_l.isra.0+0xda>
 80128be:	2322      	movs	r3, #34	; 0x22
 80128c0:	6003      	str	r3, [r0, #0]
 80128c2:	4665      	mov	r5, ip
 80128c4:	b942      	cbnz	r2, 80128d8 <_strtol_l.isra.0+0xe8>
 80128c6:	4628      	mov	r0, r5
 80128c8:	e79d      	b.n	8012806 <_strtol_l.isra.0+0x16>
 80128ca:	f1b8 0f00 	cmp.w	r8, #0
 80128ce:	d000      	beq.n	80128d2 <_strtol_l.isra.0+0xe2>
 80128d0:	426d      	negs	r5, r5
 80128d2:	2a00      	cmp	r2, #0
 80128d4:	d0f7      	beq.n	80128c6 <_strtol_l.isra.0+0xd6>
 80128d6:	b10e      	cbz	r6, 80128dc <_strtol_l.isra.0+0xec>
 80128d8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80128dc:	6011      	str	r1, [r2, #0]
 80128de:	e7f2      	b.n	80128c6 <_strtol_l.isra.0+0xd6>
 80128e0:	2430      	movs	r4, #48	; 0x30
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d1b3      	bne.n	801284e <_strtol_l.isra.0+0x5e>
 80128e6:	2308      	movs	r3, #8
 80128e8:	e7b1      	b.n	801284e <_strtol_l.isra.0+0x5e>
 80128ea:	2c30      	cmp	r4, #48	; 0x30
 80128ec:	d0a4      	beq.n	8012838 <_strtol_l.isra.0+0x48>
 80128ee:	230a      	movs	r3, #10
 80128f0:	e7ad      	b.n	801284e <_strtol_l.isra.0+0x5e>
 80128f2:	bf00      	nop
 80128f4:	08016005 	.word	0x08016005

080128f8 <_strtol_r>:
 80128f8:	f7ff bf7a 	b.w	80127f0 <_strtol_l.isra.0>

080128fc <_strtoul_l.isra.0>:
 80128fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012900:	4e3b      	ldr	r6, [pc, #236]	; (80129f0 <_strtoul_l.isra.0+0xf4>)
 8012902:	4686      	mov	lr, r0
 8012904:	468c      	mov	ip, r1
 8012906:	4660      	mov	r0, ip
 8012908:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801290c:	5da5      	ldrb	r5, [r4, r6]
 801290e:	f015 0508 	ands.w	r5, r5, #8
 8012912:	d1f8      	bne.n	8012906 <_strtoul_l.isra.0+0xa>
 8012914:	2c2d      	cmp	r4, #45	; 0x2d
 8012916:	d134      	bne.n	8012982 <_strtoul_l.isra.0+0x86>
 8012918:	f89c 4000 	ldrb.w	r4, [ip]
 801291c:	f04f 0801 	mov.w	r8, #1
 8012920:	f100 0c02 	add.w	ip, r0, #2
 8012924:	2b00      	cmp	r3, #0
 8012926:	d05e      	beq.n	80129e6 <_strtoul_l.isra.0+0xea>
 8012928:	2b10      	cmp	r3, #16
 801292a:	d10c      	bne.n	8012946 <_strtoul_l.isra.0+0x4a>
 801292c:	2c30      	cmp	r4, #48	; 0x30
 801292e:	d10a      	bne.n	8012946 <_strtoul_l.isra.0+0x4a>
 8012930:	f89c 0000 	ldrb.w	r0, [ip]
 8012934:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012938:	2858      	cmp	r0, #88	; 0x58
 801293a:	d14f      	bne.n	80129dc <_strtoul_l.isra.0+0xe0>
 801293c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8012940:	2310      	movs	r3, #16
 8012942:	f10c 0c02 	add.w	ip, ip, #2
 8012946:	f04f 37ff 	mov.w	r7, #4294967295
 801294a:	2500      	movs	r5, #0
 801294c:	fbb7 f7f3 	udiv	r7, r7, r3
 8012950:	fb03 f907 	mul.w	r9, r3, r7
 8012954:	ea6f 0909 	mvn.w	r9, r9
 8012958:	4628      	mov	r0, r5
 801295a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801295e:	2e09      	cmp	r6, #9
 8012960:	d818      	bhi.n	8012994 <_strtoul_l.isra.0+0x98>
 8012962:	4634      	mov	r4, r6
 8012964:	42a3      	cmp	r3, r4
 8012966:	dd24      	ble.n	80129b2 <_strtoul_l.isra.0+0xb6>
 8012968:	2d00      	cmp	r5, #0
 801296a:	db1f      	blt.n	80129ac <_strtoul_l.isra.0+0xb0>
 801296c:	4287      	cmp	r7, r0
 801296e:	d31d      	bcc.n	80129ac <_strtoul_l.isra.0+0xb0>
 8012970:	d101      	bne.n	8012976 <_strtoul_l.isra.0+0x7a>
 8012972:	45a1      	cmp	r9, r4
 8012974:	db1a      	blt.n	80129ac <_strtoul_l.isra.0+0xb0>
 8012976:	fb00 4003 	mla	r0, r0, r3, r4
 801297a:	2501      	movs	r5, #1
 801297c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012980:	e7eb      	b.n	801295a <_strtoul_l.isra.0+0x5e>
 8012982:	2c2b      	cmp	r4, #43	; 0x2b
 8012984:	bf08      	it	eq
 8012986:	f89c 4000 	ldrbeq.w	r4, [ip]
 801298a:	46a8      	mov	r8, r5
 801298c:	bf08      	it	eq
 801298e:	f100 0c02 	addeq.w	ip, r0, #2
 8012992:	e7c7      	b.n	8012924 <_strtoul_l.isra.0+0x28>
 8012994:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8012998:	2e19      	cmp	r6, #25
 801299a:	d801      	bhi.n	80129a0 <_strtoul_l.isra.0+0xa4>
 801299c:	3c37      	subs	r4, #55	; 0x37
 801299e:	e7e1      	b.n	8012964 <_strtoul_l.isra.0+0x68>
 80129a0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80129a4:	2e19      	cmp	r6, #25
 80129a6:	d804      	bhi.n	80129b2 <_strtoul_l.isra.0+0xb6>
 80129a8:	3c57      	subs	r4, #87	; 0x57
 80129aa:	e7db      	b.n	8012964 <_strtoul_l.isra.0+0x68>
 80129ac:	f04f 35ff 	mov.w	r5, #4294967295
 80129b0:	e7e4      	b.n	801297c <_strtoul_l.isra.0+0x80>
 80129b2:	2d00      	cmp	r5, #0
 80129b4:	da07      	bge.n	80129c6 <_strtoul_l.isra.0+0xca>
 80129b6:	2322      	movs	r3, #34	; 0x22
 80129b8:	f8ce 3000 	str.w	r3, [lr]
 80129bc:	f04f 30ff 	mov.w	r0, #4294967295
 80129c0:	b942      	cbnz	r2, 80129d4 <_strtoul_l.isra.0+0xd8>
 80129c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129c6:	f1b8 0f00 	cmp.w	r8, #0
 80129ca:	d000      	beq.n	80129ce <_strtoul_l.isra.0+0xd2>
 80129cc:	4240      	negs	r0, r0
 80129ce:	2a00      	cmp	r2, #0
 80129d0:	d0f7      	beq.n	80129c2 <_strtoul_l.isra.0+0xc6>
 80129d2:	b10d      	cbz	r5, 80129d8 <_strtoul_l.isra.0+0xdc>
 80129d4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80129d8:	6011      	str	r1, [r2, #0]
 80129da:	e7f2      	b.n	80129c2 <_strtoul_l.isra.0+0xc6>
 80129dc:	2430      	movs	r4, #48	; 0x30
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d1b1      	bne.n	8012946 <_strtoul_l.isra.0+0x4a>
 80129e2:	2308      	movs	r3, #8
 80129e4:	e7af      	b.n	8012946 <_strtoul_l.isra.0+0x4a>
 80129e6:	2c30      	cmp	r4, #48	; 0x30
 80129e8:	d0a2      	beq.n	8012930 <_strtoul_l.isra.0+0x34>
 80129ea:	230a      	movs	r3, #10
 80129ec:	e7ab      	b.n	8012946 <_strtoul_l.isra.0+0x4a>
 80129ee:	bf00      	nop
 80129f0:	08016005 	.word	0x08016005

080129f4 <_strtoul_r>:
 80129f4:	f7ff bf82 	b.w	80128fc <_strtoul_l.isra.0>

080129f8 <_write_r>:
 80129f8:	b538      	push	{r3, r4, r5, lr}
 80129fa:	4d07      	ldr	r5, [pc, #28]	; (8012a18 <_write_r+0x20>)
 80129fc:	4604      	mov	r4, r0
 80129fe:	4608      	mov	r0, r1
 8012a00:	4611      	mov	r1, r2
 8012a02:	2200      	movs	r2, #0
 8012a04:	602a      	str	r2, [r5, #0]
 8012a06:	461a      	mov	r2, r3
 8012a08:	f7ef fe7d 	bl	8002706 <_write>
 8012a0c:	1c43      	adds	r3, r0, #1
 8012a0e:	d102      	bne.n	8012a16 <_write_r+0x1e>
 8012a10:	682b      	ldr	r3, [r5, #0]
 8012a12:	b103      	cbz	r3, 8012a16 <_write_r+0x1e>
 8012a14:	6023      	str	r3, [r4, #0]
 8012a16:	bd38      	pop	{r3, r4, r5, pc}
 8012a18:	20006e38 	.word	0x20006e38

08012a1c <__assert_func>:
 8012a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a1e:	4614      	mov	r4, r2
 8012a20:	461a      	mov	r2, r3
 8012a22:	4b09      	ldr	r3, [pc, #36]	; (8012a48 <__assert_func+0x2c>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	4605      	mov	r5, r0
 8012a28:	68d8      	ldr	r0, [r3, #12]
 8012a2a:	b14c      	cbz	r4, 8012a40 <__assert_func+0x24>
 8012a2c:	4b07      	ldr	r3, [pc, #28]	; (8012a4c <__assert_func+0x30>)
 8012a2e:	9100      	str	r1, [sp, #0]
 8012a30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012a34:	4906      	ldr	r1, [pc, #24]	; (8012a50 <__assert_func+0x34>)
 8012a36:	462b      	mov	r3, r5
 8012a38:	f000 ff58 	bl	80138ec <fiprintf>
 8012a3c:	f7fd feb5 	bl	80107aa <abort>
 8012a40:	4b04      	ldr	r3, [pc, #16]	; (8012a54 <__assert_func+0x38>)
 8012a42:	461c      	mov	r4, r3
 8012a44:	e7f3      	b.n	8012a2e <__assert_func+0x12>
 8012a46:	bf00      	nop
 8012a48:	20000188 	.word	0x20000188
 8012a4c:	08015fc8 	.word	0x08015fc8
 8012a50:	08015fd5 	.word	0x08015fd5
 8012a54:	08016003 	.word	0x08016003

08012a58 <_close_r>:
 8012a58:	b538      	push	{r3, r4, r5, lr}
 8012a5a:	4d06      	ldr	r5, [pc, #24]	; (8012a74 <_close_r+0x1c>)
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	4604      	mov	r4, r0
 8012a60:	4608      	mov	r0, r1
 8012a62:	602b      	str	r3, [r5, #0]
 8012a64:	f7ef fe6b 	bl	800273e <_close>
 8012a68:	1c43      	adds	r3, r0, #1
 8012a6a:	d102      	bne.n	8012a72 <_close_r+0x1a>
 8012a6c:	682b      	ldr	r3, [r5, #0]
 8012a6e:	b103      	cbz	r3, 8012a72 <_close_r+0x1a>
 8012a70:	6023      	str	r3, [r4, #0]
 8012a72:	bd38      	pop	{r3, r4, r5, pc}
 8012a74:	20006e38 	.word	0x20006e38

08012a78 <quorem>:
 8012a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a7c:	6903      	ldr	r3, [r0, #16]
 8012a7e:	690c      	ldr	r4, [r1, #16]
 8012a80:	42a3      	cmp	r3, r4
 8012a82:	4607      	mov	r7, r0
 8012a84:	f2c0 8081 	blt.w	8012b8a <quorem+0x112>
 8012a88:	3c01      	subs	r4, #1
 8012a8a:	f101 0814 	add.w	r8, r1, #20
 8012a8e:	f100 0514 	add.w	r5, r0, #20
 8012a92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012a96:	9301      	str	r3, [sp, #4]
 8012a98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012a9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012aa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012aac:	fbb2 f6f3 	udiv	r6, r2, r3
 8012ab0:	d331      	bcc.n	8012b16 <quorem+0x9e>
 8012ab2:	f04f 0e00 	mov.w	lr, #0
 8012ab6:	4640      	mov	r0, r8
 8012ab8:	46ac      	mov	ip, r5
 8012aba:	46f2      	mov	sl, lr
 8012abc:	f850 2b04 	ldr.w	r2, [r0], #4
 8012ac0:	b293      	uxth	r3, r2
 8012ac2:	fb06 e303 	mla	r3, r6, r3, lr
 8012ac6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012aca:	b29b      	uxth	r3, r3
 8012acc:	ebaa 0303 	sub.w	r3, sl, r3
 8012ad0:	0c12      	lsrs	r2, r2, #16
 8012ad2:	f8dc a000 	ldr.w	sl, [ip]
 8012ad6:	fb06 e202 	mla	r2, r6, r2, lr
 8012ada:	fa13 f38a 	uxtah	r3, r3, sl
 8012ade:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012ae2:	fa1f fa82 	uxth.w	sl, r2
 8012ae6:	f8dc 2000 	ldr.w	r2, [ip]
 8012aea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012aee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012af8:	4581      	cmp	r9, r0
 8012afa:	f84c 3b04 	str.w	r3, [ip], #4
 8012afe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012b02:	d2db      	bcs.n	8012abc <quorem+0x44>
 8012b04:	f855 300b 	ldr.w	r3, [r5, fp]
 8012b08:	b92b      	cbnz	r3, 8012b16 <quorem+0x9e>
 8012b0a:	9b01      	ldr	r3, [sp, #4]
 8012b0c:	3b04      	subs	r3, #4
 8012b0e:	429d      	cmp	r5, r3
 8012b10:	461a      	mov	r2, r3
 8012b12:	d32e      	bcc.n	8012b72 <quorem+0xfa>
 8012b14:	613c      	str	r4, [r7, #16]
 8012b16:	4638      	mov	r0, r7
 8012b18:	f001 fd66 	bl	80145e8 <__mcmp>
 8012b1c:	2800      	cmp	r0, #0
 8012b1e:	db24      	blt.n	8012b6a <quorem+0xf2>
 8012b20:	3601      	adds	r6, #1
 8012b22:	4628      	mov	r0, r5
 8012b24:	f04f 0c00 	mov.w	ip, #0
 8012b28:	f858 2b04 	ldr.w	r2, [r8], #4
 8012b2c:	f8d0 e000 	ldr.w	lr, [r0]
 8012b30:	b293      	uxth	r3, r2
 8012b32:	ebac 0303 	sub.w	r3, ip, r3
 8012b36:	0c12      	lsrs	r2, r2, #16
 8012b38:	fa13 f38e 	uxtah	r3, r3, lr
 8012b3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012b40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012b44:	b29b      	uxth	r3, r3
 8012b46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012b4a:	45c1      	cmp	r9, r8
 8012b4c:	f840 3b04 	str.w	r3, [r0], #4
 8012b50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012b54:	d2e8      	bcs.n	8012b28 <quorem+0xb0>
 8012b56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012b5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012b5e:	b922      	cbnz	r2, 8012b6a <quorem+0xf2>
 8012b60:	3b04      	subs	r3, #4
 8012b62:	429d      	cmp	r5, r3
 8012b64:	461a      	mov	r2, r3
 8012b66:	d30a      	bcc.n	8012b7e <quorem+0x106>
 8012b68:	613c      	str	r4, [r7, #16]
 8012b6a:	4630      	mov	r0, r6
 8012b6c:	b003      	add	sp, #12
 8012b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b72:	6812      	ldr	r2, [r2, #0]
 8012b74:	3b04      	subs	r3, #4
 8012b76:	2a00      	cmp	r2, #0
 8012b78:	d1cc      	bne.n	8012b14 <quorem+0x9c>
 8012b7a:	3c01      	subs	r4, #1
 8012b7c:	e7c7      	b.n	8012b0e <quorem+0x96>
 8012b7e:	6812      	ldr	r2, [r2, #0]
 8012b80:	3b04      	subs	r3, #4
 8012b82:	2a00      	cmp	r2, #0
 8012b84:	d1f0      	bne.n	8012b68 <quorem+0xf0>
 8012b86:	3c01      	subs	r4, #1
 8012b88:	e7eb      	b.n	8012b62 <quorem+0xea>
 8012b8a:	2000      	movs	r0, #0
 8012b8c:	e7ee      	b.n	8012b6c <quorem+0xf4>
	...

08012b90 <_dtoa_r>:
 8012b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b94:	ed2d 8b02 	vpush	{d8}
 8012b98:	ec57 6b10 	vmov	r6, r7, d0
 8012b9c:	b095      	sub	sp, #84	; 0x54
 8012b9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012ba0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012ba4:	9105      	str	r1, [sp, #20]
 8012ba6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012baa:	4604      	mov	r4, r0
 8012bac:	9209      	str	r2, [sp, #36]	; 0x24
 8012bae:	930f      	str	r3, [sp, #60]	; 0x3c
 8012bb0:	b975      	cbnz	r5, 8012bd0 <_dtoa_r+0x40>
 8012bb2:	2010      	movs	r0, #16
 8012bb4:	f7fd ff24 	bl	8010a00 <malloc>
 8012bb8:	4602      	mov	r2, r0
 8012bba:	6260      	str	r0, [r4, #36]	; 0x24
 8012bbc:	b920      	cbnz	r0, 8012bc8 <_dtoa_r+0x38>
 8012bbe:	4bb2      	ldr	r3, [pc, #712]	; (8012e88 <_dtoa_r+0x2f8>)
 8012bc0:	21ea      	movs	r1, #234	; 0xea
 8012bc2:	48b2      	ldr	r0, [pc, #712]	; (8012e8c <_dtoa_r+0x2fc>)
 8012bc4:	f7ff ff2a 	bl	8012a1c <__assert_func>
 8012bc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012bcc:	6005      	str	r5, [r0, #0]
 8012bce:	60c5      	str	r5, [r0, #12]
 8012bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012bd2:	6819      	ldr	r1, [r3, #0]
 8012bd4:	b151      	cbz	r1, 8012bec <_dtoa_r+0x5c>
 8012bd6:	685a      	ldr	r2, [r3, #4]
 8012bd8:	604a      	str	r2, [r1, #4]
 8012bda:	2301      	movs	r3, #1
 8012bdc:	4093      	lsls	r3, r2
 8012bde:	608b      	str	r3, [r1, #8]
 8012be0:	4620      	mov	r0, r4
 8012be2:	f001 fa79 	bl	80140d8 <_Bfree>
 8012be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012be8:	2200      	movs	r2, #0
 8012bea:	601a      	str	r2, [r3, #0]
 8012bec:	1e3b      	subs	r3, r7, #0
 8012bee:	bfb9      	ittee	lt
 8012bf0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012bf4:	9303      	strlt	r3, [sp, #12]
 8012bf6:	2300      	movge	r3, #0
 8012bf8:	f8c8 3000 	strge.w	r3, [r8]
 8012bfc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012c00:	4ba3      	ldr	r3, [pc, #652]	; (8012e90 <_dtoa_r+0x300>)
 8012c02:	bfbc      	itt	lt
 8012c04:	2201      	movlt	r2, #1
 8012c06:	f8c8 2000 	strlt.w	r2, [r8]
 8012c0a:	ea33 0309 	bics.w	r3, r3, r9
 8012c0e:	d11b      	bne.n	8012c48 <_dtoa_r+0xb8>
 8012c10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012c12:	f242 730f 	movw	r3, #9999	; 0x270f
 8012c16:	6013      	str	r3, [r2, #0]
 8012c18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012c1c:	4333      	orrs	r3, r6
 8012c1e:	f000 857a 	beq.w	8013716 <_dtoa_r+0xb86>
 8012c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c24:	b963      	cbnz	r3, 8012c40 <_dtoa_r+0xb0>
 8012c26:	4b9b      	ldr	r3, [pc, #620]	; (8012e94 <_dtoa_r+0x304>)
 8012c28:	e024      	b.n	8012c74 <_dtoa_r+0xe4>
 8012c2a:	4b9b      	ldr	r3, [pc, #620]	; (8012e98 <_dtoa_r+0x308>)
 8012c2c:	9300      	str	r3, [sp, #0]
 8012c2e:	3308      	adds	r3, #8
 8012c30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012c32:	6013      	str	r3, [r2, #0]
 8012c34:	9800      	ldr	r0, [sp, #0]
 8012c36:	b015      	add	sp, #84	; 0x54
 8012c38:	ecbd 8b02 	vpop	{d8}
 8012c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c40:	4b94      	ldr	r3, [pc, #592]	; (8012e94 <_dtoa_r+0x304>)
 8012c42:	9300      	str	r3, [sp, #0]
 8012c44:	3303      	adds	r3, #3
 8012c46:	e7f3      	b.n	8012c30 <_dtoa_r+0xa0>
 8012c48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	ec51 0b17 	vmov	r0, r1, d7
 8012c52:	2300      	movs	r3, #0
 8012c54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012c58:	f7ed ff46 	bl	8000ae8 <__aeabi_dcmpeq>
 8012c5c:	4680      	mov	r8, r0
 8012c5e:	b158      	cbz	r0, 8012c78 <_dtoa_r+0xe8>
 8012c60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012c62:	2301      	movs	r3, #1
 8012c64:	6013      	str	r3, [r2, #0]
 8012c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	f000 8551 	beq.w	8013710 <_dtoa_r+0xb80>
 8012c6e:	488b      	ldr	r0, [pc, #556]	; (8012e9c <_dtoa_r+0x30c>)
 8012c70:	6018      	str	r0, [r3, #0]
 8012c72:	1e43      	subs	r3, r0, #1
 8012c74:	9300      	str	r3, [sp, #0]
 8012c76:	e7dd      	b.n	8012c34 <_dtoa_r+0xa4>
 8012c78:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012c7c:	aa12      	add	r2, sp, #72	; 0x48
 8012c7e:	a913      	add	r1, sp, #76	; 0x4c
 8012c80:	4620      	mov	r0, r4
 8012c82:	f001 fdd1 	bl	8014828 <__d2b>
 8012c86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012c8a:	4683      	mov	fp, r0
 8012c8c:	2d00      	cmp	r5, #0
 8012c8e:	d07c      	beq.n	8012d8a <_dtoa_r+0x1fa>
 8012c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c92:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8012c96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c9a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8012c9e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012ca2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012ca6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012caa:	4b7d      	ldr	r3, [pc, #500]	; (8012ea0 <_dtoa_r+0x310>)
 8012cac:	2200      	movs	r2, #0
 8012cae:	4630      	mov	r0, r6
 8012cb0:	4639      	mov	r1, r7
 8012cb2:	f7ed faf9 	bl	80002a8 <__aeabi_dsub>
 8012cb6:	a36e      	add	r3, pc, #440	; (adr r3, 8012e70 <_dtoa_r+0x2e0>)
 8012cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cbc:	f7ed fcac 	bl	8000618 <__aeabi_dmul>
 8012cc0:	a36d      	add	r3, pc, #436	; (adr r3, 8012e78 <_dtoa_r+0x2e8>)
 8012cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc6:	f7ed faf1 	bl	80002ac <__adddf3>
 8012cca:	4606      	mov	r6, r0
 8012ccc:	4628      	mov	r0, r5
 8012cce:	460f      	mov	r7, r1
 8012cd0:	f7ed fc38 	bl	8000544 <__aeabi_i2d>
 8012cd4:	a36a      	add	r3, pc, #424	; (adr r3, 8012e80 <_dtoa_r+0x2f0>)
 8012cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cda:	f7ed fc9d 	bl	8000618 <__aeabi_dmul>
 8012cde:	4602      	mov	r2, r0
 8012ce0:	460b      	mov	r3, r1
 8012ce2:	4630      	mov	r0, r6
 8012ce4:	4639      	mov	r1, r7
 8012ce6:	f7ed fae1 	bl	80002ac <__adddf3>
 8012cea:	4606      	mov	r6, r0
 8012cec:	460f      	mov	r7, r1
 8012cee:	f7ed ff43 	bl	8000b78 <__aeabi_d2iz>
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	4682      	mov	sl, r0
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	4630      	mov	r0, r6
 8012cfa:	4639      	mov	r1, r7
 8012cfc:	f7ed fefe 	bl	8000afc <__aeabi_dcmplt>
 8012d00:	b148      	cbz	r0, 8012d16 <_dtoa_r+0x186>
 8012d02:	4650      	mov	r0, sl
 8012d04:	f7ed fc1e 	bl	8000544 <__aeabi_i2d>
 8012d08:	4632      	mov	r2, r6
 8012d0a:	463b      	mov	r3, r7
 8012d0c:	f7ed feec 	bl	8000ae8 <__aeabi_dcmpeq>
 8012d10:	b908      	cbnz	r0, 8012d16 <_dtoa_r+0x186>
 8012d12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012d16:	f1ba 0f16 	cmp.w	sl, #22
 8012d1a:	d854      	bhi.n	8012dc6 <_dtoa_r+0x236>
 8012d1c:	4b61      	ldr	r3, [pc, #388]	; (8012ea4 <_dtoa_r+0x314>)
 8012d1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012d2a:	f7ed fee7 	bl	8000afc <__aeabi_dcmplt>
 8012d2e:	2800      	cmp	r0, #0
 8012d30:	d04b      	beq.n	8012dca <_dtoa_r+0x23a>
 8012d32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012d36:	2300      	movs	r3, #0
 8012d38:	930e      	str	r3, [sp, #56]	; 0x38
 8012d3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012d3c:	1b5d      	subs	r5, r3, r5
 8012d3e:	1e6b      	subs	r3, r5, #1
 8012d40:	9304      	str	r3, [sp, #16]
 8012d42:	bf43      	ittte	mi
 8012d44:	2300      	movmi	r3, #0
 8012d46:	f1c5 0801 	rsbmi	r8, r5, #1
 8012d4a:	9304      	strmi	r3, [sp, #16]
 8012d4c:	f04f 0800 	movpl.w	r8, #0
 8012d50:	f1ba 0f00 	cmp.w	sl, #0
 8012d54:	db3b      	blt.n	8012dce <_dtoa_r+0x23e>
 8012d56:	9b04      	ldr	r3, [sp, #16]
 8012d58:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012d5c:	4453      	add	r3, sl
 8012d5e:	9304      	str	r3, [sp, #16]
 8012d60:	2300      	movs	r3, #0
 8012d62:	9306      	str	r3, [sp, #24]
 8012d64:	9b05      	ldr	r3, [sp, #20]
 8012d66:	2b09      	cmp	r3, #9
 8012d68:	d869      	bhi.n	8012e3e <_dtoa_r+0x2ae>
 8012d6a:	2b05      	cmp	r3, #5
 8012d6c:	bfc4      	itt	gt
 8012d6e:	3b04      	subgt	r3, #4
 8012d70:	9305      	strgt	r3, [sp, #20]
 8012d72:	9b05      	ldr	r3, [sp, #20]
 8012d74:	f1a3 0302 	sub.w	r3, r3, #2
 8012d78:	bfcc      	ite	gt
 8012d7a:	2500      	movgt	r5, #0
 8012d7c:	2501      	movle	r5, #1
 8012d7e:	2b03      	cmp	r3, #3
 8012d80:	d869      	bhi.n	8012e56 <_dtoa_r+0x2c6>
 8012d82:	e8df f003 	tbb	[pc, r3]
 8012d86:	4e2c      	.short	0x4e2c
 8012d88:	5a4c      	.short	0x5a4c
 8012d8a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012d8e:	441d      	add	r5, r3
 8012d90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012d94:	2b20      	cmp	r3, #32
 8012d96:	bfc1      	itttt	gt
 8012d98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012d9c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012da0:	fa09 f303 	lslgt.w	r3, r9, r3
 8012da4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012da8:	bfda      	itte	le
 8012daa:	f1c3 0320 	rsble	r3, r3, #32
 8012dae:	fa06 f003 	lslle.w	r0, r6, r3
 8012db2:	4318      	orrgt	r0, r3
 8012db4:	f7ed fbb6 	bl	8000524 <__aeabi_ui2d>
 8012db8:	2301      	movs	r3, #1
 8012dba:	4606      	mov	r6, r0
 8012dbc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012dc0:	3d01      	subs	r5, #1
 8012dc2:	9310      	str	r3, [sp, #64]	; 0x40
 8012dc4:	e771      	b.n	8012caa <_dtoa_r+0x11a>
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	e7b6      	b.n	8012d38 <_dtoa_r+0x1a8>
 8012dca:	900e      	str	r0, [sp, #56]	; 0x38
 8012dcc:	e7b5      	b.n	8012d3a <_dtoa_r+0x1aa>
 8012dce:	f1ca 0300 	rsb	r3, sl, #0
 8012dd2:	9306      	str	r3, [sp, #24]
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	eba8 080a 	sub.w	r8, r8, sl
 8012dda:	930d      	str	r3, [sp, #52]	; 0x34
 8012ddc:	e7c2      	b.n	8012d64 <_dtoa_r+0x1d4>
 8012dde:	2300      	movs	r3, #0
 8012de0:	9308      	str	r3, [sp, #32]
 8012de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	dc39      	bgt.n	8012e5c <_dtoa_r+0x2cc>
 8012de8:	f04f 0901 	mov.w	r9, #1
 8012dec:	f8cd 9004 	str.w	r9, [sp, #4]
 8012df0:	464b      	mov	r3, r9
 8012df2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012df6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012df8:	2200      	movs	r2, #0
 8012dfa:	6042      	str	r2, [r0, #4]
 8012dfc:	2204      	movs	r2, #4
 8012dfe:	f102 0614 	add.w	r6, r2, #20
 8012e02:	429e      	cmp	r6, r3
 8012e04:	6841      	ldr	r1, [r0, #4]
 8012e06:	d92f      	bls.n	8012e68 <_dtoa_r+0x2d8>
 8012e08:	4620      	mov	r0, r4
 8012e0a:	f001 f925 	bl	8014058 <_Balloc>
 8012e0e:	9000      	str	r0, [sp, #0]
 8012e10:	2800      	cmp	r0, #0
 8012e12:	d14b      	bne.n	8012eac <_dtoa_r+0x31c>
 8012e14:	4b24      	ldr	r3, [pc, #144]	; (8012ea8 <_dtoa_r+0x318>)
 8012e16:	4602      	mov	r2, r0
 8012e18:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012e1c:	e6d1      	b.n	8012bc2 <_dtoa_r+0x32>
 8012e1e:	2301      	movs	r3, #1
 8012e20:	e7de      	b.n	8012de0 <_dtoa_r+0x250>
 8012e22:	2300      	movs	r3, #0
 8012e24:	9308      	str	r3, [sp, #32]
 8012e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e28:	eb0a 0903 	add.w	r9, sl, r3
 8012e2c:	f109 0301 	add.w	r3, r9, #1
 8012e30:	2b01      	cmp	r3, #1
 8012e32:	9301      	str	r3, [sp, #4]
 8012e34:	bfb8      	it	lt
 8012e36:	2301      	movlt	r3, #1
 8012e38:	e7dd      	b.n	8012df6 <_dtoa_r+0x266>
 8012e3a:	2301      	movs	r3, #1
 8012e3c:	e7f2      	b.n	8012e24 <_dtoa_r+0x294>
 8012e3e:	2501      	movs	r5, #1
 8012e40:	2300      	movs	r3, #0
 8012e42:	9305      	str	r3, [sp, #20]
 8012e44:	9508      	str	r5, [sp, #32]
 8012e46:	f04f 39ff 	mov.w	r9, #4294967295
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012e50:	2312      	movs	r3, #18
 8012e52:	9209      	str	r2, [sp, #36]	; 0x24
 8012e54:	e7cf      	b.n	8012df6 <_dtoa_r+0x266>
 8012e56:	2301      	movs	r3, #1
 8012e58:	9308      	str	r3, [sp, #32]
 8012e5a:	e7f4      	b.n	8012e46 <_dtoa_r+0x2b6>
 8012e5c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012e60:	f8cd 9004 	str.w	r9, [sp, #4]
 8012e64:	464b      	mov	r3, r9
 8012e66:	e7c6      	b.n	8012df6 <_dtoa_r+0x266>
 8012e68:	3101      	adds	r1, #1
 8012e6a:	6041      	str	r1, [r0, #4]
 8012e6c:	0052      	lsls	r2, r2, #1
 8012e6e:	e7c6      	b.n	8012dfe <_dtoa_r+0x26e>
 8012e70:	636f4361 	.word	0x636f4361
 8012e74:	3fd287a7 	.word	0x3fd287a7
 8012e78:	8b60c8b3 	.word	0x8b60c8b3
 8012e7c:	3fc68a28 	.word	0x3fc68a28
 8012e80:	509f79fb 	.word	0x509f79fb
 8012e84:	3fd34413 	.word	0x3fd34413
 8012e88:	08016112 	.word	0x08016112
 8012e8c:	08016129 	.word	0x08016129
 8012e90:	7ff00000 	.word	0x7ff00000
 8012e94:	0801610e 	.word	0x0801610e
 8012e98:	08016105 	.word	0x08016105
 8012e9c:	0801638a 	.word	0x0801638a
 8012ea0:	3ff80000 	.word	0x3ff80000
 8012ea4:	080162a0 	.word	0x080162a0
 8012ea8:	08016188 	.word	0x08016188
 8012eac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012eae:	9a00      	ldr	r2, [sp, #0]
 8012eb0:	601a      	str	r2, [r3, #0]
 8012eb2:	9b01      	ldr	r3, [sp, #4]
 8012eb4:	2b0e      	cmp	r3, #14
 8012eb6:	f200 80ad 	bhi.w	8013014 <_dtoa_r+0x484>
 8012eba:	2d00      	cmp	r5, #0
 8012ebc:	f000 80aa 	beq.w	8013014 <_dtoa_r+0x484>
 8012ec0:	f1ba 0f00 	cmp.w	sl, #0
 8012ec4:	dd36      	ble.n	8012f34 <_dtoa_r+0x3a4>
 8012ec6:	4ac3      	ldr	r2, [pc, #780]	; (80131d4 <_dtoa_r+0x644>)
 8012ec8:	f00a 030f 	and.w	r3, sl, #15
 8012ecc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012ed0:	ed93 7b00 	vldr	d7, [r3]
 8012ed4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012ed8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012edc:	eeb0 8a47 	vmov.f32	s16, s14
 8012ee0:	eef0 8a67 	vmov.f32	s17, s15
 8012ee4:	d016      	beq.n	8012f14 <_dtoa_r+0x384>
 8012ee6:	4bbc      	ldr	r3, [pc, #752]	; (80131d8 <_dtoa_r+0x648>)
 8012ee8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012eec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012ef0:	f7ed fcbc 	bl	800086c <__aeabi_ddiv>
 8012ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ef8:	f007 070f 	and.w	r7, r7, #15
 8012efc:	2503      	movs	r5, #3
 8012efe:	4eb6      	ldr	r6, [pc, #728]	; (80131d8 <_dtoa_r+0x648>)
 8012f00:	b957      	cbnz	r7, 8012f18 <_dtoa_r+0x388>
 8012f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f06:	ec53 2b18 	vmov	r2, r3, d8
 8012f0a:	f7ed fcaf 	bl	800086c <__aeabi_ddiv>
 8012f0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f12:	e029      	b.n	8012f68 <_dtoa_r+0x3d8>
 8012f14:	2502      	movs	r5, #2
 8012f16:	e7f2      	b.n	8012efe <_dtoa_r+0x36e>
 8012f18:	07f9      	lsls	r1, r7, #31
 8012f1a:	d508      	bpl.n	8012f2e <_dtoa_r+0x39e>
 8012f1c:	ec51 0b18 	vmov	r0, r1, d8
 8012f20:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012f24:	f7ed fb78 	bl	8000618 <__aeabi_dmul>
 8012f28:	ec41 0b18 	vmov	d8, r0, r1
 8012f2c:	3501      	adds	r5, #1
 8012f2e:	107f      	asrs	r7, r7, #1
 8012f30:	3608      	adds	r6, #8
 8012f32:	e7e5      	b.n	8012f00 <_dtoa_r+0x370>
 8012f34:	f000 80a6 	beq.w	8013084 <_dtoa_r+0x4f4>
 8012f38:	f1ca 0600 	rsb	r6, sl, #0
 8012f3c:	4ba5      	ldr	r3, [pc, #660]	; (80131d4 <_dtoa_r+0x644>)
 8012f3e:	4fa6      	ldr	r7, [pc, #664]	; (80131d8 <_dtoa_r+0x648>)
 8012f40:	f006 020f 	and.w	r2, r6, #15
 8012f44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012f50:	f7ed fb62 	bl	8000618 <__aeabi_dmul>
 8012f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f58:	1136      	asrs	r6, r6, #4
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	2502      	movs	r5, #2
 8012f5e:	2e00      	cmp	r6, #0
 8012f60:	f040 8085 	bne.w	801306e <_dtoa_r+0x4de>
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d1d2      	bne.n	8012f0e <_dtoa_r+0x37e>
 8012f68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	f000 808c 	beq.w	8013088 <_dtoa_r+0x4f8>
 8012f70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012f74:	4b99      	ldr	r3, [pc, #612]	; (80131dc <_dtoa_r+0x64c>)
 8012f76:	2200      	movs	r2, #0
 8012f78:	4630      	mov	r0, r6
 8012f7a:	4639      	mov	r1, r7
 8012f7c:	f7ed fdbe 	bl	8000afc <__aeabi_dcmplt>
 8012f80:	2800      	cmp	r0, #0
 8012f82:	f000 8081 	beq.w	8013088 <_dtoa_r+0x4f8>
 8012f86:	9b01      	ldr	r3, [sp, #4]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d07d      	beq.n	8013088 <_dtoa_r+0x4f8>
 8012f8c:	f1b9 0f00 	cmp.w	r9, #0
 8012f90:	dd3c      	ble.n	801300c <_dtoa_r+0x47c>
 8012f92:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012f96:	9307      	str	r3, [sp, #28]
 8012f98:	2200      	movs	r2, #0
 8012f9a:	4b91      	ldr	r3, [pc, #580]	; (80131e0 <_dtoa_r+0x650>)
 8012f9c:	4630      	mov	r0, r6
 8012f9e:	4639      	mov	r1, r7
 8012fa0:	f7ed fb3a 	bl	8000618 <__aeabi_dmul>
 8012fa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fa8:	3501      	adds	r5, #1
 8012faa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012fae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012fb2:	4628      	mov	r0, r5
 8012fb4:	f7ed fac6 	bl	8000544 <__aeabi_i2d>
 8012fb8:	4632      	mov	r2, r6
 8012fba:	463b      	mov	r3, r7
 8012fbc:	f7ed fb2c 	bl	8000618 <__aeabi_dmul>
 8012fc0:	4b88      	ldr	r3, [pc, #544]	; (80131e4 <_dtoa_r+0x654>)
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	f7ed f972 	bl	80002ac <__adddf3>
 8012fc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fd0:	9303      	str	r3, [sp, #12]
 8012fd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d15c      	bne.n	8013092 <_dtoa_r+0x502>
 8012fd8:	4b83      	ldr	r3, [pc, #524]	; (80131e8 <_dtoa_r+0x658>)
 8012fda:	2200      	movs	r2, #0
 8012fdc:	4630      	mov	r0, r6
 8012fde:	4639      	mov	r1, r7
 8012fe0:	f7ed f962 	bl	80002a8 <__aeabi_dsub>
 8012fe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012fe8:	4606      	mov	r6, r0
 8012fea:	460f      	mov	r7, r1
 8012fec:	f7ed fda4 	bl	8000b38 <__aeabi_dcmpgt>
 8012ff0:	2800      	cmp	r0, #0
 8012ff2:	f040 8296 	bne.w	8013522 <_dtoa_r+0x992>
 8012ff6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012ffa:	4630      	mov	r0, r6
 8012ffc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013000:	4639      	mov	r1, r7
 8013002:	f7ed fd7b 	bl	8000afc <__aeabi_dcmplt>
 8013006:	2800      	cmp	r0, #0
 8013008:	f040 8288 	bne.w	801351c <_dtoa_r+0x98c>
 801300c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013010:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013014:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013016:	2b00      	cmp	r3, #0
 8013018:	f2c0 8158 	blt.w	80132cc <_dtoa_r+0x73c>
 801301c:	f1ba 0f0e 	cmp.w	sl, #14
 8013020:	f300 8154 	bgt.w	80132cc <_dtoa_r+0x73c>
 8013024:	4b6b      	ldr	r3, [pc, #428]	; (80131d4 <_dtoa_r+0x644>)
 8013026:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801302a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801302e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013030:	2b00      	cmp	r3, #0
 8013032:	f280 80e3 	bge.w	80131fc <_dtoa_r+0x66c>
 8013036:	9b01      	ldr	r3, [sp, #4]
 8013038:	2b00      	cmp	r3, #0
 801303a:	f300 80df 	bgt.w	80131fc <_dtoa_r+0x66c>
 801303e:	f040 826d 	bne.w	801351c <_dtoa_r+0x98c>
 8013042:	4b69      	ldr	r3, [pc, #420]	; (80131e8 <_dtoa_r+0x658>)
 8013044:	2200      	movs	r2, #0
 8013046:	4640      	mov	r0, r8
 8013048:	4649      	mov	r1, r9
 801304a:	f7ed fae5 	bl	8000618 <__aeabi_dmul>
 801304e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013052:	f7ed fd67 	bl	8000b24 <__aeabi_dcmpge>
 8013056:	9e01      	ldr	r6, [sp, #4]
 8013058:	4637      	mov	r7, r6
 801305a:	2800      	cmp	r0, #0
 801305c:	f040 8243 	bne.w	80134e6 <_dtoa_r+0x956>
 8013060:	9d00      	ldr	r5, [sp, #0]
 8013062:	2331      	movs	r3, #49	; 0x31
 8013064:	f805 3b01 	strb.w	r3, [r5], #1
 8013068:	f10a 0a01 	add.w	sl, sl, #1
 801306c:	e23f      	b.n	80134ee <_dtoa_r+0x95e>
 801306e:	07f2      	lsls	r2, r6, #31
 8013070:	d505      	bpl.n	801307e <_dtoa_r+0x4ee>
 8013072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013076:	f7ed facf 	bl	8000618 <__aeabi_dmul>
 801307a:	3501      	adds	r5, #1
 801307c:	2301      	movs	r3, #1
 801307e:	1076      	asrs	r6, r6, #1
 8013080:	3708      	adds	r7, #8
 8013082:	e76c      	b.n	8012f5e <_dtoa_r+0x3ce>
 8013084:	2502      	movs	r5, #2
 8013086:	e76f      	b.n	8012f68 <_dtoa_r+0x3d8>
 8013088:	9b01      	ldr	r3, [sp, #4]
 801308a:	f8cd a01c 	str.w	sl, [sp, #28]
 801308e:	930c      	str	r3, [sp, #48]	; 0x30
 8013090:	e78d      	b.n	8012fae <_dtoa_r+0x41e>
 8013092:	9900      	ldr	r1, [sp, #0]
 8013094:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013098:	4b4e      	ldr	r3, [pc, #312]	; (80131d4 <_dtoa_r+0x644>)
 801309a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801309e:	4401      	add	r1, r0
 80130a0:	9102      	str	r1, [sp, #8]
 80130a2:	9908      	ldr	r1, [sp, #32]
 80130a4:	eeb0 8a47 	vmov.f32	s16, s14
 80130a8:	eef0 8a67 	vmov.f32	s17, s15
 80130ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80130b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80130b4:	2900      	cmp	r1, #0
 80130b6:	d045      	beq.n	8013144 <_dtoa_r+0x5b4>
 80130b8:	494c      	ldr	r1, [pc, #304]	; (80131ec <_dtoa_r+0x65c>)
 80130ba:	2000      	movs	r0, #0
 80130bc:	f7ed fbd6 	bl	800086c <__aeabi_ddiv>
 80130c0:	ec53 2b18 	vmov	r2, r3, d8
 80130c4:	f7ed f8f0 	bl	80002a8 <__aeabi_dsub>
 80130c8:	9d00      	ldr	r5, [sp, #0]
 80130ca:	ec41 0b18 	vmov	d8, r0, r1
 80130ce:	4639      	mov	r1, r7
 80130d0:	4630      	mov	r0, r6
 80130d2:	f7ed fd51 	bl	8000b78 <__aeabi_d2iz>
 80130d6:	900c      	str	r0, [sp, #48]	; 0x30
 80130d8:	f7ed fa34 	bl	8000544 <__aeabi_i2d>
 80130dc:	4602      	mov	r2, r0
 80130de:	460b      	mov	r3, r1
 80130e0:	4630      	mov	r0, r6
 80130e2:	4639      	mov	r1, r7
 80130e4:	f7ed f8e0 	bl	80002a8 <__aeabi_dsub>
 80130e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80130ea:	3330      	adds	r3, #48	; 0x30
 80130ec:	f805 3b01 	strb.w	r3, [r5], #1
 80130f0:	ec53 2b18 	vmov	r2, r3, d8
 80130f4:	4606      	mov	r6, r0
 80130f6:	460f      	mov	r7, r1
 80130f8:	f7ed fd00 	bl	8000afc <__aeabi_dcmplt>
 80130fc:	2800      	cmp	r0, #0
 80130fe:	d165      	bne.n	80131cc <_dtoa_r+0x63c>
 8013100:	4632      	mov	r2, r6
 8013102:	463b      	mov	r3, r7
 8013104:	4935      	ldr	r1, [pc, #212]	; (80131dc <_dtoa_r+0x64c>)
 8013106:	2000      	movs	r0, #0
 8013108:	f7ed f8ce 	bl	80002a8 <__aeabi_dsub>
 801310c:	ec53 2b18 	vmov	r2, r3, d8
 8013110:	f7ed fcf4 	bl	8000afc <__aeabi_dcmplt>
 8013114:	2800      	cmp	r0, #0
 8013116:	f040 80b9 	bne.w	801328c <_dtoa_r+0x6fc>
 801311a:	9b02      	ldr	r3, [sp, #8]
 801311c:	429d      	cmp	r5, r3
 801311e:	f43f af75 	beq.w	801300c <_dtoa_r+0x47c>
 8013122:	4b2f      	ldr	r3, [pc, #188]	; (80131e0 <_dtoa_r+0x650>)
 8013124:	ec51 0b18 	vmov	r0, r1, d8
 8013128:	2200      	movs	r2, #0
 801312a:	f7ed fa75 	bl	8000618 <__aeabi_dmul>
 801312e:	4b2c      	ldr	r3, [pc, #176]	; (80131e0 <_dtoa_r+0x650>)
 8013130:	ec41 0b18 	vmov	d8, r0, r1
 8013134:	2200      	movs	r2, #0
 8013136:	4630      	mov	r0, r6
 8013138:	4639      	mov	r1, r7
 801313a:	f7ed fa6d 	bl	8000618 <__aeabi_dmul>
 801313e:	4606      	mov	r6, r0
 8013140:	460f      	mov	r7, r1
 8013142:	e7c4      	b.n	80130ce <_dtoa_r+0x53e>
 8013144:	ec51 0b17 	vmov	r0, r1, d7
 8013148:	f7ed fa66 	bl	8000618 <__aeabi_dmul>
 801314c:	9b02      	ldr	r3, [sp, #8]
 801314e:	9d00      	ldr	r5, [sp, #0]
 8013150:	930c      	str	r3, [sp, #48]	; 0x30
 8013152:	ec41 0b18 	vmov	d8, r0, r1
 8013156:	4639      	mov	r1, r7
 8013158:	4630      	mov	r0, r6
 801315a:	f7ed fd0d 	bl	8000b78 <__aeabi_d2iz>
 801315e:	9011      	str	r0, [sp, #68]	; 0x44
 8013160:	f7ed f9f0 	bl	8000544 <__aeabi_i2d>
 8013164:	4602      	mov	r2, r0
 8013166:	460b      	mov	r3, r1
 8013168:	4630      	mov	r0, r6
 801316a:	4639      	mov	r1, r7
 801316c:	f7ed f89c 	bl	80002a8 <__aeabi_dsub>
 8013170:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013172:	3330      	adds	r3, #48	; 0x30
 8013174:	f805 3b01 	strb.w	r3, [r5], #1
 8013178:	9b02      	ldr	r3, [sp, #8]
 801317a:	429d      	cmp	r5, r3
 801317c:	4606      	mov	r6, r0
 801317e:	460f      	mov	r7, r1
 8013180:	f04f 0200 	mov.w	r2, #0
 8013184:	d134      	bne.n	80131f0 <_dtoa_r+0x660>
 8013186:	4b19      	ldr	r3, [pc, #100]	; (80131ec <_dtoa_r+0x65c>)
 8013188:	ec51 0b18 	vmov	r0, r1, d8
 801318c:	f7ed f88e 	bl	80002ac <__adddf3>
 8013190:	4602      	mov	r2, r0
 8013192:	460b      	mov	r3, r1
 8013194:	4630      	mov	r0, r6
 8013196:	4639      	mov	r1, r7
 8013198:	f7ed fcce 	bl	8000b38 <__aeabi_dcmpgt>
 801319c:	2800      	cmp	r0, #0
 801319e:	d175      	bne.n	801328c <_dtoa_r+0x6fc>
 80131a0:	ec53 2b18 	vmov	r2, r3, d8
 80131a4:	4911      	ldr	r1, [pc, #68]	; (80131ec <_dtoa_r+0x65c>)
 80131a6:	2000      	movs	r0, #0
 80131a8:	f7ed f87e 	bl	80002a8 <__aeabi_dsub>
 80131ac:	4602      	mov	r2, r0
 80131ae:	460b      	mov	r3, r1
 80131b0:	4630      	mov	r0, r6
 80131b2:	4639      	mov	r1, r7
 80131b4:	f7ed fca2 	bl	8000afc <__aeabi_dcmplt>
 80131b8:	2800      	cmp	r0, #0
 80131ba:	f43f af27 	beq.w	801300c <_dtoa_r+0x47c>
 80131be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80131c0:	1e6b      	subs	r3, r5, #1
 80131c2:	930c      	str	r3, [sp, #48]	; 0x30
 80131c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80131c8:	2b30      	cmp	r3, #48	; 0x30
 80131ca:	d0f8      	beq.n	80131be <_dtoa_r+0x62e>
 80131cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80131d0:	e04a      	b.n	8013268 <_dtoa_r+0x6d8>
 80131d2:	bf00      	nop
 80131d4:	080162a0 	.word	0x080162a0
 80131d8:	08016278 	.word	0x08016278
 80131dc:	3ff00000 	.word	0x3ff00000
 80131e0:	40240000 	.word	0x40240000
 80131e4:	401c0000 	.word	0x401c0000
 80131e8:	40140000 	.word	0x40140000
 80131ec:	3fe00000 	.word	0x3fe00000
 80131f0:	4baf      	ldr	r3, [pc, #700]	; (80134b0 <_dtoa_r+0x920>)
 80131f2:	f7ed fa11 	bl	8000618 <__aeabi_dmul>
 80131f6:	4606      	mov	r6, r0
 80131f8:	460f      	mov	r7, r1
 80131fa:	e7ac      	b.n	8013156 <_dtoa_r+0x5c6>
 80131fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013200:	9d00      	ldr	r5, [sp, #0]
 8013202:	4642      	mov	r2, r8
 8013204:	464b      	mov	r3, r9
 8013206:	4630      	mov	r0, r6
 8013208:	4639      	mov	r1, r7
 801320a:	f7ed fb2f 	bl	800086c <__aeabi_ddiv>
 801320e:	f7ed fcb3 	bl	8000b78 <__aeabi_d2iz>
 8013212:	9002      	str	r0, [sp, #8]
 8013214:	f7ed f996 	bl	8000544 <__aeabi_i2d>
 8013218:	4642      	mov	r2, r8
 801321a:	464b      	mov	r3, r9
 801321c:	f7ed f9fc 	bl	8000618 <__aeabi_dmul>
 8013220:	4602      	mov	r2, r0
 8013222:	460b      	mov	r3, r1
 8013224:	4630      	mov	r0, r6
 8013226:	4639      	mov	r1, r7
 8013228:	f7ed f83e 	bl	80002a8 <__aeabi_dsub>
 801322c:	9e02      	ldr	r6, [sp, #8]
 801322e:	9f01      	ldr	r7, [sp, #4]
 8013230:	3630      	adds	r6, #48	; 0x30
 8013232:	f805 6b01 	strb.w	r6, [r5], #1
 8013236:	9e00      	ldr	r6, [sp, #0]
 8013238:	1bae      	subs	r6, r5, r6
 801323a:	42b7      	cmp	r7, r6
 801323c:	4602      	mov	r2, r0
 801323e:	460b      	mov	r3, r1
 8013240:	d137      	bne.n	80132b2 <_dtoa_r+0x722>
 8013242:	f7ed f833 	bl	80002ac <__adddf3>
 8013246:	4642      	mov	r2, r8
 8013248:	464b      	mov	r3, r9
 801324a:	4606      	mov	r6, r0
 801324c:	460f      	mov	r7, r1
 801324e:	f7ed fc73 	bl	8000b38 <__aeabi_dcmpgt>
 8013252:	b9c8      	cbnz	r0, 8013288 <_dtoa_r+0x6f8>
 8013254:	4642      	mov	r2, r8
 8013256:	464b      	mov	r3, r9
 8013258:	4630      	mov	r0, r6
 801325a:	4639      	mov	r1, r7
 801325c:	f7ed fc44 	bl	8000ae8 <__aeabi_dcmpeq>
 8013260:	b110      	cbz	r0, 8013268 <_dtoa_r+0x6d8>
 8013262:	9b02      	ldr	r3, [sp, #8]
 8013264:	07d9      	lsls	r1, r3, #31
 8013266:	d40f      	bmi.n	8013288 <_dtoa_r+0x6f8>
 8013268:	4620      	mov	r0, r4
 801326a:	4659      	mov	r1, fp
 801326c:	f000 ff34 	bl	80140d8 <_Bfree>
 8013270:	2300      	movs	r3, #0
 8013272:	702b      	strb	r3, [r5, #0]
 8013274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013276:	f10a 0001 	add.w	r0, sl, #1
 801327a:	6018      	str	r0, [r3, #0]
 801327c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801327e:	2b00      	cmp	r3, #0
 8013280:	f43f acd8 	beq.w	8012c34 <_dtoa_r+0xa4>
 8013284:	601d      	str	r5, [r3, #0]
 8013286:	e4d5      	b.n	8012c34 <_dtoa_r+0xa4>
 8013288:	f8cd a01c 	str.w	sl, [sp, #28]
 801328c:	462b      	mov	r3, r5
 801328e:	461d      	mov	r5, r3
 8013290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013294:	2a39      	cmp	r2, #57	; 0x39
 8013296:	d108      	bne.n	80132aa <_dtoa_r+0x71a>
 8013298:	9a00      	ldr	r2, [sp, #0]
 801329a:	429a      	cmp	r2, r3
 801329c:	d1f7      	bne.n	801328e <_dtoa_r+0x6fe>
 801329e:	9a07      	ldr	r2, [sp, #28]
 80132a0:	9900      	ldr	r1, [sp, #0]
 80132a2:	3201      	adds	r2, #1
 80132a4:	9207      	str	r2, [sp, #28]
 80132a6:	2230      	movs	r2, #48	; 0x30
 80132a8:	700a      	strb	r2, [r1, #0]
 80132aa:	781a      	ldrb	r2, [r3, #0]
 80132ac:	3201      	adds	r2, #1
 80132ae:	701a      	strb	r2, [r3, #0]
 80132b0:	e78c      	b.n	80131cc <_dtoa_r+0x63c>
 80132b2:	4b7f      	ldr	r3, [pc, #508]	; (80134b0 <_dtoa_r+0x920>)
 80132b4:	2200      	movs	r2, #0
 80132b6:	f7ed f9af 	bl	8000618 <__aeabi_dmul>
 80132ba:	2200      	movs	r2, #0
 80132bc:	2300      	movs	r3, #0
 80132be:	4606      	mov	r6, r0
 80132c0:	460f      	mov	r7, r1
 80132c2:	f7ed fc11 	bl	8000ae8 <__aeabi_dcmpeq>
 80132c6:	2800      	cmp	r0, #0
 80132c8:	d09b      	beq.n	8013202 <_dtoa_r+0x672>
 80132ca:	e7cd      	b.n	8013268 <_dtoa_r+0x6d8>
 80132cc:	9a08      	ldr	r2, [sp, #32]
 80132ce:	2a00      	cmp	r2, #0
 80132d0:	f000 80c4 	beq.w	801345c <_dtoa_r+0x8cc>
 80132d4:	9a05      	ldr	r2, [sp, #20]
 80132d6:	2a01      	cmp	r2, #1
 80132d8:	f300 80a8 	bgt.w	801342c <_dtoa_r+0x89c>
 80132dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80132de:	2a00      	cmp	r2, #0
 80132e0:	f000 80a0 	beq.w	8013424 <_dtoa_r+0x894>
 80132e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80132e8:	9e06      	ldr	r6, [sp, #24]
 80132ea:	4645      	mov	r5, r8
 80132ec:	9a04      	ldr	r2, [sp, #16]
 80132ee:	2101      	movs	r1, #1
 80132f0:	441a      	add	r2, r3
 80132f2:	4620      	mov	r0, r4
 80132f4:	4498      	add	r8, r3
 80132f6:	9204      	str	r2, [sp, #16]
 80132f8:	f000 fff4 	bl	80142e4 <__i2b>
 80132fc:	4607      	mov	r7, r0
 80132fe:	2d00      	cmp	r5, #0
 8013300:	dd0b      	ble.n	801331a <_dtoa_r+0x78a>
 8013302:	9b04      	ldr	r3, [sp, #16]
 8013304:	2b00      	cmp	r3, #0
 8013306:	dd08      	ble.n	801331a <_dtoa_r+0x78a>
 8013308:	42ab      	cmp	r3, r5
 801330a:	9a04      	ldr	r2, [sp, #16]
 801330c:	bfa8      	it	ge
 801330e:	462b      	movge	r3, r5
 8013310:	eba8 0803 	sub.w	r8, r8, r3
 8013314:	1aed      	subs	r5, r5, r3
 8013316:	1ad3      	subs	r3, r2, r3
 8013318:	9304      	str	r3, [sp, #16]
 801331a:	9b06      	ldr	r3, [sp, #24]
 801331c:	b1fb      	cbz	r3, 801335e <_dtoa_r+0x7ce>
 801331e:	9b08      	ldr	r3, [sp, #32]
 8013320:	2b00      	cmp	r3, #0
 8013322:	f000 809f 	beq.w	8013464 <_dtoa_r+0x8d4>
 8013326:	2e00      	cmp	r6, #0
 8013328:	dd11      	ble.n	801334e <_dtoa_r+0x7be>
 801332a:	4639      	mov	r1, r7
 801332c:	4632      	mov	r2, r6
 801332e:	4620      	mov	r0, r4
 8013330:	f001 f894 	bl	801445c <__pow5mult>
 8013334:	465a      	mov	r2, fp
 8013336:	4601      	mov	r1, r0
 8013338:	4607      	mov	r7, r0
 801333a:	4620      	mov	r0, r4
 801333c:	f000 ffe8 	bl	8014310 <__multiply>
 8013340:	4659      	mov	r1, fp
 8013342:	9007      	str	r0, [sp, #28]
 8013344:	4620      	mov	r0, r4
 8013346:	f000 fec7 	bl	80140d8 <_Bfree>
 801334a:	9b07      	ldr	r3, [sp, #28]
 801334c:	469b      	mov	fp, r3
 801334e:	9b06      	ldr	r3, [sp, #24]
 8013350:	1b9a      	subs	r2, r3, r6
 8013352:	d004      	beq.n	801335e <_dtoa_r+0x7ce>
 8013354:	4659      	mov	r1, fp
 8013356:	4620      	mov	r0, r4
 8013358:	f001 f880 	bl	801445c <__pow5mult>
 801335c:	4683      	mov	fp, r0
 801335e:	2101      	movs	r1, #1
 8013360:	4620      	mov	r0, r4
 8013362:	f000 ffbf 	bl	80142e4 <__i2b>
 8013366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013368:	2b00      	cmp	r3, #0
 801336a:	4606      	mov	r6, r0
 801336c:	dd7c      	ble.n	8013468 <_dtoa_r+0x8d8>
 801336e:	461a      	mov	r2, r3
 8013370:	4601      	mov	r1, r0
 8013372:	4620      	mov	r0, r4
 8013374:	f001 f872 	bl	801445c <__pow5mult>
 8013378:	9b05      	ldr	r3, [sp, #20]
 801337a:	2b01      	cmp	r3, #1
 801337c:	4606      	mov	r6, r0
 801337e:	dd76      	ble.n	801346e <_dtoa_r+0x8de>
 8013380:	2300      	movs	r3, #0
 8013382:	9306      	str	r3, [sp, #24]
 8013384:	6933      	ldr	r3, [r6, #16]
 8013386:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801338a:	6918      	ldr	r0, [r3, #16]
 801338c:	f000 ff5a 	bl	8014244 <__hi0bits>
 8013390:	f1c0 0020 	rsb	r0, r0, #32
 8013394:	9b04      	ldr	r3, [sp, #16]
 8013396:	4418      	add	r0, r3
 8013398:	f010 001f 	ands.w	r0, r0, #31
 801339c:	f000 8086 	beq.w	80134ac <_dtoa_r+0x91c>
 80133a0:	f1c0 0320 	rsb	r3, r0, #32
 80133a4:	2b04      	cmp	r3, #4
 80133a6:	dd7f      	ble.n	80134a8 <_dtoa_r+0x918>
 80133a8:	f1c0 001c 	rsb	r0, r0, #28
 80133ac:	9b04      	ldr	r3, [sp, #16]
 80133ae:	4403      	add	r3, r0
 80133b0:	4480      	add	r8, r0
 80133b2:	4405      	add	r5, r0
 80133b4:	9304      	str	r3, [sp, #16]
 80133b6:	f1b8 0f00 	cmp.w	r8, #0
 80133ba:	dd05      	ble.n	80133c8 <_dtoa_r+0x838>
 80133bc:	4659      	mov	r1, fp
 80133be:	4642      	mov	r2, r8
 80133c0:	4620      	mov	r0, r4
 80133c2:	f001 f8a5 	bl	8014510 <__lshift>
 80133c6:	4683      	mov	fp, r0
 80133c8:	9b04      	ldr	r3, [sp, #16]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	dd05      	ble.n	80133da <_dtoa_r+0x84a>
 80133ce:	4631      	mov	r1, r6
 80133d0:	461a      	mov	r2, r3
 80133d2:	4620      	mov	r0, r4
 80133d4:	f001 f89c 	bl	8014510 <__lshift>
 80133d8:	4606      	mov	r6, r0
 80133da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d069      	beq.n	80134b4 <_dtoa_r+0x924>
 80133e0:	4631      	mov	r1, r6
 80133e2:	4658      	mov	r0, fp
 80133e4:	f001 f900 	bl	80145e8 <__mcmp>
 80133e8:	2800      	cmp	r0, #0
 80133ea:	da63      	bge.n	80134b4 <_dtoa_r+0x924>
 80133ec:	2300      	movs	r3, #0
 80133ee:	4659      	mov	r1, fp
 80133f0:	220a      	movs	r2, #10
 80133f2:	4620      	mov	r0, r4
 80133f4:	f000 fe92 	bl	801411c <__multadd>
 80133f8:	9b08      	ldr	r3, [sp, #32]
 80133fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80133fe:	4683      	mov	fp, r0
 8013400:	2b00      	cmp	r3, #0
 8013402:	f000 818f 	beq.w	8013724 <_dtoa_r+0xb94>
 8013406:	4639      	mov	r1, r7
 8013408:	2300      	movs	r3, #0
 801340a:	220a      	movs	r2, #10
 801340c:	4620      	mov	r0, r4
 801340e:	f000 fe85 	bl	801411c <__multadd>
 8013412:	f1b9 0f00 	cmp.w	r9, #0
 8013416:	4607      	mov	r7, r0
 8013418:	f300 808e 	bgt.w	8013538 <_dtoa_r+0x9a8>
 801341c:	9b05      	ldr	r3, [sp, #20]
 801341e:	2b02      	cmp	r3, #2
 8013420:	dc50      	bgt.n	80134c4 <_dtoa_r+0x934>
 8013422:	e089      	b.n	8013538 <_dtoa_r+0x9a8>
 8013424:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013426:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801342a:	e75d      	b.n	80132e8 <_dtoa_r+0x758>
 801342c:	9b01      	ldr	r3, [sp, #4]
 801342e:	1e5e      	subs	r6, r3, #1
 8013430:	9b06      	ldr	r3, [sp, #24]
 8013432:	42b3      	cmp	r3, r6
 8013434:	bfbf      	itttt	lt
 8013436:	9b06      	ldrlt	r3, [sp, #24]
 8013438:	9606      	strlt	r6, [sp, #24]
 801343a:	1af2      	sublt	r2, r6, r3
 801343c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801343e:	bfb6      	itet	lt
 8013440:	189b      	addlt	r3, r3, r2
 8013442:	1b9e      	subge	r6, r3, r6
 8013444:	930d      	strlt	r3, [sp, #52]	; 0x34
 8013446:	9b01      	ldr	r3, [sp, #4]
 8013448:	bfb8      	it	lt
 801344a:	2600      	movlt	r6, #0
 801344c:	2b00      	cmp	r3, #0
 801344e:	bfb5      	itete	lt
 8013450:	eba8 0503 	sublt.w	r5, r8, r3
 8013454:	9b01      	ldrge	r3, [sp, #4]
 8013456:	2300      	movlt	r3, #0
 8013458:	4645      	movge	r5, r8
 801345a:	e747      	b.n	80132ec <_dtoa_r+0x75c>
 801345c:	9e06      	ldr	r6, [sp, #24]
 801345e:	9f08      	ldr	r7, [sp, #32]
 8013460:	4645      	mov	r5, r8
 8013462:	e74c      	b.n	80132fe <_dtoa_r+0x76e>
 8013464:	9a06      	ldr	r2, [sp, #24]
 8013466:	e775      	b.n	8013354 <_dtoa_r+0x7c4>
 8013468:	9b05      	ldr	r3, [sp, #20]
 801346a:	2b01      	cmp	r3, #1
 801346c:	dc18      	bgt.n	80134a0 <_dtoa_r+0x910>
 801346e:	9b02      	ldr	r3, [sp, #8]
 8013470:	b9b3      	cbnz	r3, 80134a0 <_dtoa_r+0x910>
 8013472:	9b03      	ldr	r3, [sp, #12]
 8013474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013478:	b9a3      	cbnz	r3, 80134a4 <_dtoa_r+0x914>
 801347a:	9b03      	ldr	r3, [sp, #12]
 801347c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013480:	0d1b      	lsrs	r3, r3, #20
 8013482:	051b      	lsls	r3, r3, #20
 8013484:	b12b      	cbz	r3, 8013492 <_dtoa_r+0x902>
 8013486:	9b04      	ldr	r3, [sp, #16]
 8013488:	3301      	adds	r3, #1
 801348a:	9304      	str	r3, [sp, #16]
 801348c:	f108 0801 	add.w	r8, r8, #1
 8013490:	2301      	movs	r3, #1
 8013492:	9306      	str	r3, [sp, #24]
 8013494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013496:	2b00      	cmp	r3, #0
 8013498:	f47f af74 	bne.w	8013384 <_dtoa_r+0x7f4>
 801349c:	2001      	movs	r0, #1
 801349e:	e779      	b.n	8013394 <_dtoa_r+0x804>
 80134a0:	2300      	movs	r3, #0
 80134a2:	e7f6      	b.n	8013492 <_dtoa_r+0x902>
 80134a4:	9b02      	ldr	r3, [sp, #8]
 80134a6:	e7f4      	b.n	8013492 <_dtoa_r+0x902>
 80134a8:	d085      	beq.n	80133b6 <_dtoa_r+0x826>
 80134aa:	4618      	mov	r0, r3
 80134ac:	301c      	adds	r0, #28
 80134ae:	e77d      	b.n	80133ac <_dtoa_r+0x81c>
 80134b0:	40240000 	.word	0x40240000
 80134b4:	9b01      	ldr	r3, [sp, #4]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	dc38      	bgt.n	801352c <_dtoa_r+0x99c>
 80134ba:	9b05      	ldr	r3, [sp, #20]
 80134bc:	2b02      	cmp	r3, #2
 80134be:	dd35      	ble.n	801352c <_dtoa_r+0x99c>
 80134c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80134c4:	f1b9 0f00 	cmp.w	r9, #0
 80134c8:	d10d      	bne.n	80134e6 <_dtoa_r+0x956>
 80134ca:	4631      	mov	r1, r6
 80134cc:	464b      	mov	r3, r9
 80134ce:	2205      	movs	r2, #5
 80134d0:	4620      	mov	r0, r4
 80134d2:	f000 fe23 	bl	801411c <__multadd>
 80134d6:	4601      	mov	r1, r0
 80134d8:	4606      	mov	r6, r0
 80134da:	4658      	mov	r0, fp
 80134dc:	f001 f884 	bl	80145e8 <__mcmp>
 80134e0:	2800      	cmp	r0, #0
 80134e2:	f73f adbd 	bgt.w	8013060 <_dtoa_r+0x4d0>
 80134e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134e8:	9d00      	ldr	r5, [sp, #0]
 80134ea:	ea6f 0a03 	mvn.w	sl, r3
 80134ee:	f04f 0800 	mov.w	r8, #0
 80134f2:	4631      	mov	r1, r6
 80134f4:	4620      	mov	r0, r4
 80134f6:	f000 fdef 	bl	80140d8 <_Bfree>
 80134fa:	2f00      	cmp	r7, #0
 80134fc:	f43f aeb4 	beq.w	8013268 <_dtoa_r+0x6d8>
 8013500:	f1b8 0f00 	cmp.w	r8, #0
 8013504:	d005      	beq.n	8013512 <_dtoa_r+0x982>
 8013506:	45b8      	cmp	r8, r7
 8013508:	d003      	beq.n	8013512 <_dtoa_r+0x982>
 801350a:	4641      	mov	r1, r8
 801350c:	4620      	mov	r0, r4
 801350e:	f000 fde3 	bl	80140d8 <_Bfree>
 8013512:	4639      	mov	r1, r7
 8013514:	4620      	mov	r0, r4
 8013516:	f000 fddf 	bl	80140d8 <_Bfree>
 801351a:	e6a5      	b.n	8013268 <_dtoa_r+0x6d8>
 801351c:	2600      	movs	r6, #0
 801351e:	4637      	mov	r7, r6
 8013520:	e7e1      	b.n	80134e6 <_dtoa_r+0x956>
 8013522:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013524:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013528:	4637      	mov	r7, r6
 801352a:	e599      	b.n	8013060 <_dtoa_r+0x4d0>
 801352c:	9b08      	ldr	r3, [sp, #32]
 801352e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013532:	2b00      	cmp	r3, #0
 8013534:	f000 80fd 	beq.w	8013732 <_dtoa_r+0xba2>
 8013538:	2d00      	cmp	r5, #0
 801353a:	dd05      	ble.n	8013548 <_dtoa_r+0x9b8>
 801353c:	4639      	mov	r1, r7
 801353e:	462a      	mov	r2, r5
 8013540:	4620      	mov	r0, r4
 8013542:	f000 ffe5 	bl	8014510 <__lshift>
 8013546:	4607      	mov	r7, r0
 8013548:	9b06      	ldr	r3, [sp, #24]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d05c      	beq.n	8013608 <_dtoa_r+0xa78>
 801354e:	6879      	ldr	r1, [r7, #4]
 8013550:	4620      	mov	r0, r4
 8013552:	f000 fd81 	bl	8014058 <_Balloc>
 8013556:	4605      	mov	r5, r0
 8013558:	b928      	cbnz	r0, 8013566 <_dtoa_r+0x9d6>
 801355a:	4b80      	ldr	r3, [pc, #512]	; (801375c <_dtoa_r+0xbcc>)
 801355c:	4602      	mov	r2, r0
 801355e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013562:	f7ff bb2e 	b.w	8012bc2 <_dtoa_r+0x32>
 8013566:	693a      	ldr	r2, [r7, #16]
 8013568:	3202      	adds	r2, #2
 801356a:	0092      	lsls	r2, r2, #2
 801356c:	f107 010c 	add.w	r1, r7, #12
 8013570:	300c      	adds	r0, #12
 8013572:	f7fd fa55 	bl	8010a20 <memcpy>
 8013576:	2201      	movs	r2, #1
 8013578:	4629      	mov	r1, r5
 801357a:	4620      	mov	r0, r4
 801357c:	f000 ffc8 	bl	8014510 <__lshift>
 8013580:	9b00      	ldr	r3, [sp, #0]
 8013582:	3301      	adds	r3, #1
 8013584:	9301      	str	r3, [sp, #4]
 8013586:	9b00      	ldr	r3, [sp, #0]
 8013588:	444b      	add	r3, r9
 801358a:	9307      	str	r3, [sp, #28]
 801358c:	9b02      	ldr	r3, [sp, #8]
 801358e:	f003 0301 	and.w	r3, r3, #1
 8013592:	46b8      	mov	r8, r7
 8013594:	9306      	str	r3, [sp, #24]
 8013596:	4607      	mov	r7, r0
 8013598:	9b01      	ldr	r3, [sp, #4]
 801359a:	4631      	mov	r1, r6
 801359c:	3b01      	subs	r3, #1
 801359e:	4658      	mov	r0, fp
 80135a0:	9302      	str	r3, [sp, #8]
 80135a2:	f7ff fa69 	bl	8012a78 <quorem>
 80135a6:	4603      	mov	r3, r0
 80135a8:	3330      	adds	r3, #48	; 0x30
 80135aa:	9004      	str	r0, [sp, #16]
 80135ac:	4641      	mov	r1, r8
 80135ae:	4658      	mov	r0, fp
 80135b0:	9308      	str	r3, [sp, #32]
 80135b2:	f001 f819 	bl	80145e8 <__mcmp>
 80135b6:	463a      	mov	r2, r7
 80135b8:	4681      	mov	r9, r0
 80135ba:	4631      	mov	r1, r6
 80135bc:	4620      	mov	r0, r4
 80135be:	f001 f82f 	bl	8014620 <__mdiff>
 80135c2:	68c2      	ldr	r2, [r0, #12]
 80135c4:	9b08      	ldr	r3, [sp, #32]
 80135c6:	4605      	mov	r5, r0
 80135c8:	bb02      	cbnz	r2, 801360c <_dtoa_r+0xa7c>
 80135ca:	4601      	mov	r1, r0
 80135cc:	4658      	mov	r0, fp
 80135ce:	f001 f80b 	bl	80145e8 <__mcmp>
 80135d2:	9b08      	ldr	r3, [sp, #32]
 80135d4:	4602      	mov	r2, r0
 80135d6:	4629      	mov	r1, r5
 80135d8:	4620      	mov	r0, r4
 80135da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80135de:	f000 fd7b 	bl	80140d8 <_Bfree>
 80135e2:	9b05      	ldr	r3, [sp, #20]
 80135e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135e6:	9d01      	ldr	r5, [sp, #4]
 80135e8:	ea43 0102 	orr.w	r1, r3, r2
 80135ec:	9b06      	ldr	r3, [sp, #24]
 80135ee:	430b      	orrs	r3, r1
 80135f0:	9b08      	ldr	r3, [sp, #32]
 80135f2:	d10d      	bne.n	8013610 <_dtoa_r+0xa80>
 80135f4:	2b39      	cmp	r3, #57	; 0x39
 80135f6:	d029      	beq.n	801364c <_dtoa_r+0xabc>
 80135f8:	f1b9 0f00 	cmp.w	r9, #0
 80135fc:	dd01      	ble.n	8013602 <_dtoa_r+0xa72>
 80135fe:	9b04      	ldr	r3, [sp, #16]
 8013600:	3331      	adds	r3, #49	; 0x31
 8013602:	9a02      	ldr	r2, [sp, #8]
 8013604:	7013      	strb	r3, [r2, #0]
 8013606:	e774      	b.n	80134f2 <_dtoa_r+0x962>
 8013608:	4638      	mov	r0, r7
 801360a:	e7b9      	b.n	8013580 <_dtoa_r+0x9f0>
 801360c:	2201      	movs	r2, #1
 801360e:	e7e2      	b.n	80135d6 <_dtoa_r+0xa46>
 8013610:	f1b9 0f00 	cmp.w	r9, #0
 8013614:	db06      	blt.n	8013624 <_dtoa_r+0xa94>
 8013616:	9905      	ldr	r1, [sp, #20]
 8013618:	ea41 0909 	orr.w	r9, r1, r9
 801361c:	9906      	ldr	r1, [sp, #24]
 801361e:	ea59 0101 	orrs.w	r1, r9, r1
 8013622:	d120      	bne.n	8013666 <_dtoa_r+0xad6>
 8013624:	2a00      	cmp	r2, #0
 8013626:	ddec      	ble.n	8013602 <_dtoa_r+0xa72>
 8013628:	4659      	mov	r1, fp
 801362a:	2201      	movs	r2, #1
 801362c:	4620      	mov	r0, r4
 801362e:	9301      	str	r3, [sp, #4]
 8013630:	f000 ff6e 	bl	8014510 <__lshift>
 8013634:	4631      	mov	r1, r6
 8013636:	4683      	mov	fp, r0
 8013638:	f000 ffd6 	bl	80145e8 <__mcmp>
 801363c:	2800      	cmp	r0, #0
 801363e:	9b01      	ldr	r3, [sp, #4]
 8013640:	dc02      	bgt.n	8013648 <_dtoa_r+0xab8>
 8013642:	d1de      	bne.n	8013602 <_dtoa_r+0xa72>
 8013644:	07da      	lsls	r2, r3, #31
 8013646:	d5dc      	bpl.n	8013602 <_dtoa_r+0xa72>
 8013648:	2b39      	cmp	r3, #57	; 0x39
 801364a:	d1d8      	bne.n	80135fe <_dtoa_r+0xa6e>
 801364c:	9a02      	ldr	r2, [sp, #8]
 801364e:	2339      	movs	r3, #57	; 0x39
 8013650:	7013      	strb	r3, [r2, #0]
 8013652:	462b      	mov	r3, r5
 8013654:	461d      	mov	r5, r3
 8013656:	3b01      	subs	r3, #1
 8013658:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801365c:	2a39      	cmp	r2, #57	; 0x39
 801365e:	d050      	beq.n	8013702 <_dtoa_r+0xb72>
 8013660:	3201      	adds	r2, #1
 8013662:	701a      	strb	r2, [r3, #0]
 8013664:	e745      	b.n	80134f2 <_dtoa_r+0x962>
 8013666:	2a00      	cmp	r2, #0
 8013668:	dd03      	ble.n	8013672 <_dtoa_r+0xae2>
 801366a:	2b39      	cmp	r3, #57	; 0x39
 801366c:	d0ee      	beq.n	801364c <_dtoa_r+0xabc>
 801366e:	3301      	adds	r3, #1
 8013670:	e7c7      	b.n	8013602 <_dtoa_r+0xa72>
 8013672:	9a01      	ldr	r2, [sp, #4]
 8013674:	9907      	ldr	r1, [sp, #28]
 8013676:	f802 3c01 	strb.w	r3, [r2, #-1]
 801367a:	428a      	cmp	r2, r1
 801367c:	d02a      	beq.n	80136d4 <_dtoa_r+0xb44>
 801367e:	4659      	mov	r1, fp
 8013680:	2300      	movs	r3, #0
 8013682:	220a      	movs	r2, #10
 8013684:	4620      	mov	r0, r4
 8013686:	f000 fd49 	bl	801411c <__multadd>
 801368a:	45b8      	cmp	r8, r7
 801368c:	4683      	mov	fp, r0
 801368e:	f04f 0300 	mov.w	r3, #0
 8013692:	f04f 020a 	mov.w	r2, #10
 8013696:	4641      	mov	r1, r8
 8013698:	4620      	mov	r0, r4
 801369a:	d107      	bne.n	80136ac <_dtoa_r+0xb1c>
 801369c:	f000 fd3e 	bl	801411c <__multadd>
 80136a0:	4680      	mov	r8, r0
 80136a2:	4607      	mov	r7, r0
 80136a4:	9b01      	ldr	r3, [sp, #4]
 80136a6:	3301      	adds	r3, #1
 80136a8:	9301      	str	r3, [sp, #4]
 80136aa:	e775      	b.n	8013598 <_dtoa_r+0xa08>
 80136ac:	f000 fd36 	bl	801411c <__multadd>
 80136b0:	4639      	mov	r1, r7
 80136b2:	4680      	mov	r8, r0
 80136b4:	2300      	movs	r3, #0
 80136b6:	220a      	movs	r2, #10
 80136b8:	4620      	mov	r0, r4
 80136ba:	f000 fd2f 	bl	801411c <__multadd>
 80136be:	4607      	mov	r7, r0
 80136c0:	e7f0      	b.n	80136a4 <_dtoa_r+0xb14>
 80136c2:	f1b9 0f00 	cmp.w	r9, #0
 80136c6:	9a00      	ldr	r2, [sp, #0]
 80136c8:	bfcc      	ite	gt
 80136ca:	464d      	movgt	r5, r9
 80136cc:	2501      	movle	r5, #1
 80136ce:	4415      	add	r5, r2
 80136d0:	f04f 0800 	mov.w	r8, #0
 80136d4:	4659      	mov	r1, fp
 80136d6:	2201      	movs	r2, #1
 80136d8:	4620      	mov	r0, r4
 80136da:	9301      	str	r3, [sp, #4]
 80136dc:	f000 ff18 	bl	8014510 <__lshift>
 80136e0:	4631      	mov	r1, r6
 80136e2:	4683      	mov	fp, r0
 80136e4:	f000 ff80 	bl	80145e8 <__mcmp>
 80136e8:	2800      	cmp	r0, #0
 80136ea:	dcb2      	bgt.n	8013652 <_dtoa_r+0xac2>
 80136ec:	d102      	bne.n	80136f4 <_dtoa_r+0xb64>
 80136ee:	9b01      	ldr	r3, [sp, #4]
 80136f0:	07db      	lsls	r3, r3, #31
 80136f2:	d4ae      	bmi.n	8013652 <_dtoa_r+0xac2>
 80136f4:	462b      	mov	r3, r5
 80136f6:	461d      	mov	r5, r3
 80136f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80136fc:	2a30      	cmp	r2, #48	; 0x30
 80136fe:	d0fa      	beq.n	80136f6 <_dtoa_r+0xb66>
 8013700:	e6f7      	b.n	80134f2 <_dtoa_r+0x962>
 8013702:	9a00      	ldr	r2, [sp, #0]
 8013704:	429a      	cmp	r2, r3
 8013706:	d1a5      	bne.n	8013654 <_dtoa_r+0xac4>
 8013708:	f10a 0a01 	add.w	sl, sl, #1
 801370c:	2331      	movs	r3, #49	; 0x31
 801370e:	e779      	b.n	8013604 <_dtoa_r+0xa74>
 8013710:	4b13      	ldr	r3, [pc, #76]	; (8013760 <_dtoa_r+0xbd0>)
 8013712:	f7ff baaf 	b.w	8012c74 <_dtoa_r+0xe4>
 8013716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013718:	2b00      	cmp	r3, #0
 801371a:	f47f aa86 	bne.w	8012c2a <_dtoa_r+0x9a>
 801371e:	4b11      	ldr	r3, [pc, #68]	; (8013764 <_dtoa_r+0xbd4>)
 8013720:	f7ff baa8 	b.w	8012c74 <_dtoa_r+0xe4>
 8013724:	f1b9 0f00 	cmp.w	r9, #0
 8013728:	dc03      	bgt.n	8013732 <_dtoa_r+0xba2>
 801372a:	9b05      	ldr	r3, [sp, #20]
 801372c:	2b02      	cmp	r3, #2
 801372e:	f73f aec9 	bgt.w	80134c4 <_dtoa_r+0x934>
 8013732:	9d00      	ldr	r5, [sp, #0]
 8013734:	4631      	mov	r1, r6
 8013736:	4658      	mov	r0, fp
 8013738:	f7ff f99e 	bl	8012a78 <quorem>
 801373c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013740:	f805 3b01 	strb.w	r3, [r5], #1
 8013744:	9a00      	ldr	r2, [sp, #0]
 8013746:	1aaa      	subs	r2, r5, r2
 8013748:	4591      	cmp	r9, r2
 801374a:	ddba      	ble.n	80136c2 <_dtoa_r+0xb32>
 801374c:	4659      	mov	r1, fp
 801374e:	2300      	movs	r3, #0
 8013750:	220a      	movs	r2, #10
 8013752:	4620      	mov	r0, r4
 8013754:	f000 fce2 	bl	801411c <__multadd>
 8013758:	4683      	mov	fp, r0
 801375a:	e7eb      	b.n	8013734 <_dtoa_r+0xba4>
 801375c:	08016188 	.word	0x08016188
 8013760:	08016389 	.word	0x08016389
 8013764:	08016105 	.word	0x08016105

08013768 <__sflush_r>:
 8013768:	898a      	ldrh	r2, [r1, #12]
 801376a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801376e:	4605      	mov	r5, r0
 8013770:	0710      	lsls	r0, r2, #28
 8013772:	460c      	mov	r4, r1
 8013774:	d458      	bmi.n	8013828 <__sflush_r+0xc0>
 8013776:	684b      	ldr	r3, [r1, #4]
 8013778:	2b00      	cmp	r3, #0
 801377a:	dc05      	bgt.n	8013788 <__sflush_r+0x20>
 801377c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801377e:	2b00      	cmp	r3, #0
 8013780:	dc02      	bgt.n	8013788 <__sflush_r+0x20>
 8013782:	2000      	movs	r0, #0
 8013784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801378a:	2e00      	cmp	r6, #0
 801378c:	d0f9      	beq.n	8013782 <__sflush_r+0x1a>
 801378e:	2300      	movs	r3, #0
 8013790:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013794:	682f      	ldr	r7, [r5, #0]
 8013796:	602b      	str	r3, [r5, #0]
 8013798:	d032      	beq.n	8013800 <__sflush_r+0x98>
 801379a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801379c:	89a3      	ldrh	r3, [r4, #12]
 801379e:	075a      	lsls	r2, r3, #29
 80137a0:	d505      	bpl.n	80137ae <__sflush_r+0x46>
 80137a2:	6863      	ldr	r3, [r4, #4]
 80137a4:	1ac0      	subs	r0, r0, r3
 80137a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80137a8:	b10b      	cbz	r3, 80137ae <__sflush_r+0x46>
 80137aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80137ac:	1ac0      	subs	r0, r0, r3
 80137ae:	2300      	movs	r3, #0
 80137b0:	4602      	mov	r2, r0
 80137b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80137b4:	6a21      	ldr	r1, [r4, #32]
 80137b6:	4628      	mov	r0, r5
 80137b8:	47b0      	blx	r6
 80137ba:	1c43      	adds	r3, r0, #1
 80137bc:	89a3      	ldrh	r3, [r4, #12]
 80137be:	d106      	bne.n	80137ce <__sflush_r+0x66>
 80137c0:	6829      	ldr	r1, [r5, #0]
 80137c2:	291d      	cmp	r1, #29
 80137c4:	d82c      	bhi.n	8013820 <__sflush_r+0xb8>
 80137c6:	4a2a      	ldr	r2, [pc, #168]	; (8013870 <__sflush_r+0x108>)
 80137c8:	40ca      	lsrs	r2, r1
 80137ca:	07d6      	lsls	r6, r2, #31
 80137cc:	d528      	bpl.n	8013820 <__sflush_r+0xb8>
 80137ce:	2200      	movs	r2, #0
 80137d0:	6062      	str	r2, [r4, #4]
 80137d2:	04d9      	lsls	r1, r3, #19
 80137d4:	6922      	ldr	r2, [r4, #16]
 80137d6:	6022      	str	r2, [r4, #0]
 80137d8:	d504      	bpl.n	80137e4 <__sflush_r+0x7c>
 80137da:	1c42      	adds	r2, r0, #1
 80137dc:	d101      	bne.n	80137e2 <__sflush_r+0x7a>
 80137de:	682b      	ldr	r3, [r5, #0]
 80137e0:	b903      	cbnz	r3, 80137e4 <__sflush_r+0x7c>
 80137e2:	6560      	str	r0, [r4, #84]	; 0x54
 80137e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80137e6:	602f      	str	r7, [r5, #0]
 80137e8:	2900      	cmp	r1, #0
 80137ea:	d0ca      	beq.n	8013782 <__sflush_r+0x1a>
 80137ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80137f0:	4299      	cmp	r1, r3
 80137f2:	d002      	beq.n	80137fa <__sflush_r+0x92>
 80137f4:	4628      	mov	r0, r5
 80137f6:	f7fd f943 	bl	8010a80 <_free_r>
 80137fa:	2000      	movs	r0, #0
 80137fc:	6360      	str	r0, [r4, #52]	; 0x34
 80137fe:	e7c1      	b.n	8013784 <__sflush_r+0x1c>
 8013800:	6a21      	ldr	r1, [r4, #32]
 8013802:	2301      	movs	r3, #1
 8013804:	4628      	mov	r0, r5
 8013806:	47b0      	blx	r6
 8013808:	1c41      	adds	r1, r0, #1
 801380a:	d1c7      	bne.n	801379c <__sflush_r+0x34>
 801380c:	682b      	ldr	r3, [r5, #0]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d0c4      	beq.n	801379c <__sflush_r+0x34>
 8013812:	2b1d      	cmp	r3, #29
 8013814:	d001      	beq.n	801381a <__sflush_r+0xb2>
 8013816:	2b16      	cmp	r3, #22
 8013818:	d101      	bne.n	801381e <__sflush_r+0xb6>
 801381a:	602f      	str	r7, [r5, #0]
 801381c:	e7b1      	b.n	8013782 <__sflush_r+0x1a>
 801381e:	89a3      	ldrh	r3, [r4, #12]
 8013820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013824:	81a3      	strh	r3, [r4, #12]
 8013826:	e7ad      	b.n	8013784 <__sflush_r+0x1c>
 8013828:	690f      	ldr	r7, [r1, #16]
 801382a:	2f00      	cmp	r7, #0
 801382c:	d0a9      	beq.n	8013782 <__sflush_r+0x1a>
 801382e:	0793      	lsls	r3, r2, #30
 8013830:	680e      	ldr	r6, [r1, #0]
 8013832:	bf08      	it	eq
 8013834:	694b      	ldreq	r3, [r1, #20]
 8013836:	600f      	str	r7, [r1, #0]
 8013838:	bf18      	it	ne
 801383a:	2300      	movne	r3, #0
 801383c:	eba6 0807 	sub.w	r8, r6, r7
 8013840:	608b      	str	r3, [r1, #8]
 8013842:	f1b8 0f00 	cmp.w	r8, #0
 8013846:	dd9c      	ble.n	8013782 <__sflush_r+0x1a>
 8013848:	6a21      	ldr	r1, [r4, #32]
 801384a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801384c:	4643      	mov	r3, r8
 801384e:	463a      	mov	r2, r7
 8013850:	4628      	mov	r0, r5
 8013852:	47b0      	blx	r6
 8013854:	2800      	cmp	r0, #0
 8013856:	dc06      	bgt.n	8013866 <__sflush_r+0xfe>
 8013858:	89a3      	ldrh	r3, [r4, #12]
 801385a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801385e:	81a3      	strh	r3, [r4, #12]
 8013860:	f04f 30ff 	mov.w	r0, #4294967295
 8013864:	e78e      	b.n	8013784 <__sflush_r+0x1c>
 8013866:	4407      	add	r7, r0
 8013868:	eba8 0800 	sub.w	r8, r8, r0
 801386c:	e7e9      	b.n	8013842 <__sflush_r+0xda>
 801386e:	bf00      	nop
 8013870:	20400001 	.word	0x20400001

08013874 <_fflush_r>:
 8013874:	b538      	push	{r3, r4, r5, lr}
 8013876:	690b      	ldr	r3, [r1, #16]
 8013878:	4605      	mov	r5, r0
 801387a:	460c      	mov	r4, r1
 801387c:	b913      	cbnz	r3, 8013884 <_fflush_r+0x10>
 801387e:	2500      	movs	r5, #0
 8013880:	4628      	mov	r0, r5
 8013882:	bd38      	pop	{r3, r4, r5, pc}
 8013884:	b118      	cbz	r0, 801388e <_fflush_r+0x1a>
 8013886:	6983      	ldr	r3, [r0, #24]
 8013888:	b90b      	cbnz	r3, 801388e <_fflush_r+0x1a>
 801388a:	f7fc fff3 	bl	8010874 <__sinit>
 801388e:	4b14      	ldr	r3, [pc, #80]	; (80138e0 <_fflush_r+0x6c>)
 8013890:	429c      	cmp	r4, r3
 8013892:	d11b      	bne.n	80138cc <_fflush_r+0x58>
 8013894:	686c      	ldr	r4, [r5, #4]
 8013896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d0ef      	beq.n	801387e <_fflush_r+0xa>
 801389e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80138a0:	07d0      	lsls	r0, r2, #31
 80138a2:	d404      	bmi.n	80138ae <_fflush_r+0x3a>
 80138a4:	0599      	lsls	r1, r3, #22
 80138a6:	d402      	bmi.n	80138ae <_fflush_r+0x3a>
 80138a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80138aa:	f7fd f8a6 	bl	80109fa <__retarget_lock_acquire_recursive>
 80138ae:	4628      	mov	r0, r5
 80138b0:	4621      	mov	r1, r4
 80138b2:	f7ff ff59 	bl	8013768 <__sflush_r>
 80138b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80138b8:	07da      	lsls	r2, r3, #31
 80138ba:	4605      	mov	r5, r0
 80138bc:	d4e0      	bmi.n	8013880 <_fflush_r+0xc>
 80138be:	89a3      	ldrh	r3, [r4, #12]
 80138c0:	059b      	lsls	r3, r3, #22
 80138c2:	d4dd      	bmi.n	8013880 <_fflush_r+0xc>
 80138c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80138c6:	f7fd f899 	bl	80109fc <__retarget_lock_release_recursive>
 80138ca:	e7d9      	b.n	8013880 <_fflush_r+0xc>
 80138cc:	4b05      	ldr	r3, [pc, #20]	; (80138e4 <_fflush_r+0x70>)
 80138ce:	429c      	cmp	r4, r3
 80138d0:	d101      	bne.n	80138d6 <_fflush_r+0x62>
 80138d2:	68ac      	ldr	r4, [r5, #8]
 80138d4:	e7df      	b.n	8013896 <_fflush_r+0x22>
 80138d6:	4b04      	ldr	r3, [pc, #16]	; (80138e8 <_fflush_r+0x74>)
 80138d8:	429c      	cmp	r4, r3
 80138da:	bf08      	it	eq
 80138dc:	68ec      	ldreq	r4, [r5, #12]
 80138de:	e7da      	b.n	8013896 <_fflush_r+0x22>
 80138e0:	08015efc 	.word	0x08015efc
 80138e4:	08015f1c 	.word	0x08015f1c
 80138e8:	08015edc 	.word	0x08015edc

080138ec <fiprintf>:
 80138ec:	b40e      	push	{r1, r2, r3}
 80138ee:	b503      	push	{r0, r1, lr}
 80138f0:	4601      	mov	r1, r0
 80138f2:	ab03      	add	r3, sp, #12
 80138f4:	4805      	ldr	r0, [pc, #20]	; (801390c <fiprintf+0x20>)
 80138f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80138fa:	6800      	ldr	r0, [r0, #0]
 80138fc:	9301      	str	r3, [sp, #4]
 80138fe:	f001 fbf3 	bl	80150e8 <_vfiprintf_r>
 8013902:	b002      	add	sp, #8
 8013904:	f85d eb04 	ldr.w	lr, [sp], #4
 8013908:	b003      	add	sp, #12
 801390a:	4770      	bx	lr
 801390c:	20000188 	.word	0x20000188

08013910 <rshift>:
 8013910:	6903      	ldr	r3, [r0, #16]
 8013912:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013916:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801391a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801391e:	f100 0414 	add.w	r4, r0, #20
 8013922:	dd45      	ble.n	80139b0 <rshift+0xa0>
 8013924:	f011 011f 	ands.w	r1, r1, #31
 8013928:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801392c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013930:	d10c      	bne.n	801394c <rshift+0x3c>
 8013932:	f100 0710 	add.w	r7, r0, #16
 8013936:	4629      	mov	r1, r5
 8013938:	42b1      	cmp	r1, r6
 801393a:	d334      	bcc.n	80139a6 <rshift+0x96>
 801393c:	1a9b      	subs	r3, r3, r2
 801393e:	009b      	lsls	r3, r3, #2
 8013940:	1eea      	subs	r2, r5, #3
 8013942:	4296      	cmp	r6, r2
 8013944:	bf38      	it	cc
 8013946:	2300      	movcc	r3, #0
 8013948:	4423      	add	r3, r4
 801394a:	e015      	b.n	8013978 <rshift+0x68>
 801394c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013950:	f1c1 0820 	rsb	r8, r1, #32
 8013954:	40cf      	lsrs	r7, r1
 8013956:	f105 0e04 	add.w	lr, r5, #4
 801395a:	46a1      	mov	r9, r4
 801395c:	4576      	cmp	r6, lr
 801395e:	46f4      	mov	ip, lr
 8013960:	d815      	bhi.n	801398e <rshift+0x7e>
 8013962:	1a9b      	subs	r3, r3, r2
 8013964:	009a      	lsls	r2, r3, #2
 8013966:	3a04      	subs	r2, #4
 8013968:	3501      	adds	r5, #1
 801396a:	42ae      	cmp	r6, r5
 801396c:	bf38      	it	cc
 801396e:	2200      	movcc	r2, #0
 8013970:	18a3      	adds	r3, r4, r2
 8013972:	50a7      	str	r7, [r4, r2]
 8013974:	b107      	cbz	r7, 8013978 <rshift+0x68>
 8013976:	3304      	adds	r3, #4
 8013978:	1b1a      	subs	r2, r3, r4
 801397a:	42a3      	cmp	r3, r4
 801397c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013980:	bf08      	it	eq
 8013982:	2300      	moveq	r3, #0
 8013984:	6102      	str	r2, [r0, #16]
 8013986:	bf08      	it	eq
 8013988:	6143      	streq	r3, [r0, #20]
 801398a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801398e:	f8dc c000 	ldr.w	ip, [ip]
 8013992:	fa0c fc08 	lsl.w	ip, ip, r8
 8013996:	ea4c 0707 	orr.w	r7, ip, r7
 801399a:	f849 7b04 	str.w	r7, [r9], #4
 801399e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80139a2:	40cf      	lsrs	r7, r1
 80139a4:	e7da      	b.n	801395c <rshift+0x4c>
 80139a6:	f851 cb04 	ldr.w	ip, [r1], #4
 80139aa:	f847 cf04 	str.w	ip, [r7, #4]!
 80139ae:	e7c3      	b.n	8013938 <rshift+0x28>
 80139b0:	4623      	mov	r3, r4
 80139b2:	e7e1      	b.n	8013978 <rshift+0x68>

080139b4 <__hexdig_fun>:
 80139b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80139b8:	2b09      	cmp	r3, #9
 80139ba:	d802      	bhi.n	80139c2 <__hexdig_fun+0xe>
 80139bc:	3820      	subs	r0, #32
 80139be:	b2c0      	uxtb	r0, r0
 80139c0:	4770      	bx	lr
 80139c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80139c6:	2b05      	cmp	r3, #5
 80139c8:	d801      	bhi.n	80139ce <__hexdig_fun+0x1a>
 80139ca:	3847      	subs	r0, #71	; 0x47
 80139cc:	e7f7      	b.n	80139be <__hexdig_fun+0xa>
 80139ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80139d2:	2b05      	cmp	r3, #5
 80139d4:	d801      	bhi.n	80139da <__hexdig_fun+0x26>
 80139d6:	3827      	subs	r0, #39	; 0x27
 80139d8:	e7f1      	b.n	80139be <__hexdig_fun+0xa>
 80139da:	2000      	movs	r0, #0
 80139dc:	4770      	bx	lr
	...

080139e0 <__gethex>:
 80139e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139e4:	ed2d 8b02 	vpush	{d8}
 80139e8:	b089      	sub	sp, #36	; 0x24
 80139ea:	ee08 0a10 	vmov	s16, r0
 80139ee:	9304      	str	r3, [sp, #16]
 80139f0:	4bbc      	ldr	r3, [pc, #752]	; (8013ce4 <__gethex+0x304>)
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	9301      	str	r3, [sp, #4]
 80139f6:	4618      	mov	r0, r3
 80139f8:	468b      	mov	fp, r1
 80139fa:	4690      	mov	r8, r2
 80139fc:	f7ec fbf8 	bl	80001f0 <strlen>
 8013a00:	9b01      	ldr	r3, [sp, #4]
 8013a02:	f8db 2000 	ldr.w	r2, [fp]
 8013a06:	4403      	add	r3, r0
 8013a08:	4682      	mov	sl, r0
 8013a0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013a0e:	9305      	str	r3, [sp, #20]
 8013a10:	1c93      	adds	r3, r2, #2
 8013a12:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013a16:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013a1a:	32fe      	adds	r2, #254	; 0xfe
 8013a1c:	18d1      	adds	r1, r2, r3
 8013a1e:	461f      	mov	r7, r3
 8013a20:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013a24:	9100      	str	r1, [sp, #0]
 8013a26:	2830      	cmp	r0, #48	; 0x30
 8013a28:	d0f8      	beq.n	8013a1c <__gethex+0x3c>
 8013a2a:	f7ff ffc3 	bl	80139b4 <__hexdig_fun>
 8013a2e:	4604      	mov	r4, r0
 8013a30:	2800      	cmp	r0, #0
 8013a32:	d13a      	bne.n	8013aaa <__gethex+0xca>
 8013a34:	9901      	ldr	r1, [sp, #4]
 8013a36:	4652      	mov	r2, sl
 8013a38:	4638      	mov	r0, r7
 8013a3a:	f7fe f89a 	bl	8011b72 <strncmp>
 8013a3e:	4605      	mov	r5, r0
 8013a40:	2800      	cmp	r0, #0
 8013a42:	d168      	bne.n	8013b16 <__gethex+0x136>
 8013a44:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013a48:	eb07 060a 	add.w	r6, r7, sl
 8013a4c:	f7ff ffb2 	bl	80139b4 <__hexdig_fun>
 8013a50:	2800      	cmp	r0, #0
 8013a52:	d062      	beq.n	8013b1a <__gethex+0x13a>
 8013a54:	4633      	mov	r3, r6
 8013a56:	7818      	ldrb	r0, [r3, #0]
 8013a58:	2830      	cmp	r0, #48	; 0x30
 8013a5a:	461f      	mov	r7, r3
 8013a5c:	f103 0301 	add.w	r3, r3, #1
 8013a60:	d0f9      	beq.n	8013a56 <__gethex+0x76>
 8013a62:	f7ff ffa7 	bl	80139b4 <__hexdig_fun>
 8013a66:	2301      	movs	r3, #1
 8013a68:	fab0 f480 	clz	r4, r0
 8013a6c:	0964      	lsrs	r4, r4, #5
 8013a6e:	4635      	mov	r5, r6
 8013a70:	9300      	str	r3, [sp, #0]
 8013a72:	463a      	mov	r2, r7
 8013a74:	4616      	mov	r6, r2
 8013a76:	3201      	adds	r2, #1
 8013a78:	7830      	ldrb	r0, [r6, #0]
 8013a7a:	f7ff ff9b 	bl	80139b4 <__hexdig_fun>
 8013a7e:	2800      	cmp	r0, #0
 8013a80:	d1f8      	bne.n	8013a74 <__gethex+0x94>
 8013a82:	9901      	ldr	r1, [sp, #4]
 8013a84:	4652      	mov	r2, sl
 8013a86:	4630      	mov	r0, r6
 8013a88:	f7fe f873 	bl	8011b72 <strncmp>
 8013a8c:	b980      	cbnz	r0, 8013ab0 <__gethex+0xd0>
 8013a8e:	b94d      	cbnz	r5, 8013aa4 <__gethex+0xc4>
 8013a90:	eb06 050a 	add.w	r5, r6, sl
 8013a94:	462a      	mov	r2, r5
 8013a96:	4616      	mov	r6, r2
 8013a98:	3201      	adds	r2, #1
 8013a9a:	7830      	ldrb	r0, [r6, #0]
 8013a9c:	f7ff ff8a 	bl	80139b4 <__hexdig_fun>
 8013aa0:	2800      	cmp	r0, #0
 8013aa2:	d1f8      	bne.n	8013a96 <__gethex+0xb6>
 8013aa4:	1bad      	subs	r5, r5, r6
 8013aa6:	00ad      	lsls	r5, r5, #2
 8013aa8:	e004      	b.n	8013ab4 <__gethex+0xd4>
 8013aaa:	2400      	movs	r4, #0
 8013aac:	4625      	mov	r5, r4
 8013aae:	e7e0      	b.n	8013a72 <__gethex+0x92>
 8013ab0:	2d00      	cmp	r5, #0
 8013ab2:	d1f7      	bne.n	8013aa4 <__gethex+0xc4>
 8013ab4:	7833      	ldrb	r3, [r6, #0]
 8013ab6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013aba:	2b50      	cmp	r3, #80	; 0x50
 8013abc:	d13b      	bne.n	8013b36 <__gethex+0x156>
 8013abe:	7873      	ldrb	r3, [r6, #1]
 8013ac0:	2b2b      	cmp	r3, #43	; 0x2b
 8013ac2:	d02c      	beq.n	8013b1e <__gethex+0x13e>
 8013ac4:	2b2d      	cmp	r3, #45	; 0x2d
 8013ac6:	d02e      	beq.n	8013b26 <__gethex+0x146>
 8013ac8:	1c71      	adds	r1, r6, #1
 8013aca:	f04f 0900 	mov.w	r9, #0
 8013ace:	7808      	ldrb	r0, [r1, #0]
 8013ad0:	f7ff ff70 	bl	80139b4 <__hexdig_fun>
 8013ad4:	1e43      	subs	r3, r0, #1
 8013ad6:	b2db      	uxtb	r3, r3
 8013ad8:	2b18      	cmp	r3, #24
 8013ada:	d82c      	bhi.n	8013b36 <__gethex+0x156>
 8013adc:	f1a0 0210 	sub.w	r2, r0, #16
 8013ae0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013ae4:	f7ff ff66 	bl	80139b4 <__hexdig_fun>
 8013ae8:	1e43      	subs	r3, r0, #1
 8013aea:	b2db      	uxtb	r3, r3
 8013aec:	2b18      	cmp	r3, #24
 8013aee:	d91d      	bls.n	8013b2c <__gethex+0x14c>
 8013af0:	f1b9 0f00 	cmp.w	r9, #0
 8013af4:	d000      	beq.n	8013af8 <__gethex+0x118>
 8013af6:	4252      	negs	r2, r2
 8013af8:	4415      	add	r5, r2
 8013afa:	f8cb 1000 	str.w	r1, [fp]
 8013afe:	b1e4      	cbz	r4, 8013b3a <__gethex+0x15a>
 8013b00:	9b00      	ldr	r3, [sp, #0]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	bf14      	ite	ne
 8013b06:	2700      	movne	r7, #0
 8013b08:	2706      	moveq	r7, #6
 8013b0a:	4638      	mov	r0, r7
 8013b0c:	b009      	add	sp, #36	; 0x24
 8013b0e:	ecbd 8b02 	vpop	{d8}
 8013b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b16:	463e      	mov	r6, r7
 8013b18:	4625      	mov	r5, r4
 8013b1a:	2401      	movs	r4, #1
 8013b1c:	e7ca      	b.n	8013ab4 <__gethex+0xd4>
 8013b1e:	f04f 0900 	mov.w	r9, #0
 8013b22:	1cb1      	adds	r1, r6, #2
 8013b24:	e7d3      	b.n	8013ace <__gethex+0xee>
 8013b26:	f04f 0901 	mov.w	r9, #1
 8013b2a:	e7fa      	b.n	8013b22 <__gethex+0x142>
 8013b2c:	230a      	movs	r3, #10
 8013b2e:	fb03 0202 	mla	r2, r3, r2, r0
 8013b32:	3a10      	subs	r2, #16
 8013b34:	e7d4      	b.n	8013ae0 <__gethex+0x100>
 8013b36:	4631      	mov	r1, r6
 8013b38:	e7df      	b.n	8013afa <__gethex+0x11a>
 8013b3a:	1bf3      	subs	r3, r6, r7
 8013b3c:	3b01      	subs	r3, #1
 8013b3e:	4621      	mov	r1, r4
 8013b40:	2b07      	cmp	r3, #7
 8013b42:	dc0b      	bgt.n	8013b5c <__gethex+0x17c>
 8013b44:	ee18 0a10 	vmov	r0, s16
 8013b48:	f000 fa86 	bl	8014058 <_Balloc>
 8013b4c:	4604      	mov	r4, r0
 8013b4e:	b940      	cbnz	r0, 8013b62 <__gethex+0x182>
 8013b50:	4b65      	ldr	r3, [pc, #404]	; (8013ce8 <__gethex+0x308>)
 8013b52:	4602      	mov	r2, r0
 8013b54:	21de      	movs	r1, #222	; 0xde
 8013b56:	4865      	ldr	r0, [pc, #404]	; (8013cec <__gethex+0x30c>)
 8013b58:	f7fe ff60 	bl	8012a1c <__assert_func>
 8013b5c:	3101      	adds	r1, #1
 8013b5e:	105b      	asrs	r3, r3, #1
 8013b60:	e7ee      	b.n	8013b40 <__gethex+0x160>
 8013b62:	f100 0914 	add.w	r9, r0, #20
 8013b66:	f04f 0b00 	mov.w	fp, #0
 8013b6a:	f1ca 0301 	rsb	r3, sl, #1
 8013b6e:	f8cd 9008 	str.w	r9, [sp, #8]
 8013b72:	f8cd b000 	str.w	fp, [sp]
 8013b76:	9306      	str	r3, [sp, #24]
 8013b78:	42b7      	cmp	r7, r6
 8013b7a:	d340      	bcc.n	8013bfe <__gethex+0x21e>
 8013b7c:	9802      	ldr	r0, [sp, #8]
 8013b7e:	9b00      	ldr	r3, [sp, #0]
 8013b80:	f840 3b04 	str.w	r3, [r0], #4
 8013b84:	eba0 0009 	sub.w	r0, r0, r9
 8013b88:	1080      	asrs	r0, r0, #2
 8013b8a:	0146      	lsls	r6, r0, #5
 8013b8c:	6120      	str	r0, [r4, #16]
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f000 fb58 	bl	8014244 <__hi0bits>
 8013b94:	1a30      	subs	r0, r6, r0
 8013b96:	f8d8 6000 	ldr.w	r6, [r8]
 8013b9a:	42b0      	cmp	r0, r6
 8013b9c:	dd63      	ble.n	8013c66 <__gethex+0x286>
 8013b9e:	1b87      	subs	r7, r0, r6
 8013ba0:	4639      	mov	r1, r7
 8013ba2:	4620      	mov	r0, r4
 8013ba4:	f000 fef2 	bl	801498c <__any_on>
 8013ba8:	4682      	mov	sl, r0
 8013baa:	b1a8      	cbz	r0, 8013bd8 <__gethex+0x1f8>
 8013bac:	1e7b      	subs	r3, r7, #1
 8013bae:	1159      	asrs	r1, r3, #5
 8013bb0:	f003 021f 	and.w	r2, r3, #31
 8013bb4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013bb8:	f04f 0a01 	mov.w	sl, #1
 8013bbc:	fa0a f202 	lsl.w	r2, sl, r2
 8013bc0:	420a      	tst	r2, r1
 8013bc2:	d009      	beq.n	8013bd8 <__gethex+0x1f8>
 8013bc4:	4553      	cmp	r3, sl
 8013bc6:	dd05      	ble.n	8013bd4 <__gethex+0x1f4>
 8013bc8:	1eb9      	subs	r1, r7, #2
 8013bca:	4620      	mov	r0, r4
 8013bcc:	f000 fede 	bl	801498c <__any_on>
 8013bd0:	2800      	cmp	r0, #0
 8013bd2:	d145      	bne.n	8013c60 <__gethex+0x280>
 8013bd4:	f04f 0a02 	mov.w	sl, #2
 8013bd8:	4639      	mov	r1, r7
 8013bda:	4620      	mov	r0, r4
 8013bdc:	f7ff fe98 	bl	8013910 <rshift>
 8013be0:	443d      	add	r5, r7
 8013be2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013be6:	42ab      	cmp	r3, r5
 8013be8:	da4c      	bge.n	8013c84 <__gethex+0x2a4>
 8013bea:	ee18 0a10 	vmov	r0, s16
 8013bee:	4621      	mov	r1, r4
 8013bf0:	f000 fa72 	bl	80140d8 <_Bfree>
 8013bf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	6013      	str	r3, [r2, #0]
 8013bfa:	27a3      	movs	r7, #163	; 0xa3
 8013bfc:	e785      	b.n	8013b0a <__gethex+0x12a>
 8013bfe:	1e73      	subs	r3, r6, #1
 8013c00:	9a05      	ldr	r2, [sp, #20]
 8013c02:	9303      	str	r3, [sp, #12]
 8013c04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013c08:	4293      	cmp	r3, r2
 8013c0a:	d019      	beq.n	8013c40 <__gethex+0x260>
 8013c0c:	f1bb 0f20 	cmp.w	fp, #32
 8013c10:	d107      	bne.n	8013c22 <__gethex+0x242>
 8013c12:	9b02      	ldr	r3, [sp, #8]
 8013c14:	9a00      	ldr	r2, [sp, #0]
 8013c16:	f843 2b04 	str.w	r2, [r3], #4
 8013c1a:	9302      	str	r3, [sp, #8]
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	9300      	str	r3, [sp, #0]
 8013c20:	469b      	mov	fp, r3
 8013c22:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013c26:	f7ff fec5 	bl	80139b4 <__hexdig_fun>
 8013c2a:	9b00      	ldr	r3, [sp, #0]
 8013c2c:	f000 000f 	and.w	r0, r0, #15
 8013c30:	fa00 f00b 	lsl.w	r0, r0, fp
 8013c34:	4303      	orrs	r3, r0
 8013c36:	9300      	str	r3, [sp, #0]
 8013c38:	f10b 0b04 	add.w	fp, fp, #4
 8013c3c:	9b03      	ldr	r3, [sp, #12]
 8013c3e:	e00d      	b.n	8013c5c <__gethex+0x27c>
 8013c40:	9b03      	ldr	r3, [sp, #12]
 8013c42:	9a06      	ldr	r2, [sp, #24]
 8013c44:	4413      	add	r3, r2
 8013c46:	42bb      	cmp	r3, r7
 8013c48:	d3e0      	bcc.n	8013c0c <__gethex+0x22c>
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	9901      	ldr	r1, [sp, #4]
 8013c4e:	9307      	str	r3, [sp, #28]
 8013c50:	4652      	mov	r2, sl
 8013c52:	f7fd ff8e 	bl	8011b72 <strncmp>
 8013c56:	9b07      	ldr	r3, [sp, #28]
 8013c58:	2800      	cmp	r0, #0
 8013c5a:	d1d7      	bne.n	8013c0c <__gethex+0x22c>
 8013c5c:	461e      	mov	r6, r3
 8013c5e:	e78b      	b.n	8013b78 <__gethex+0x198>
 8013c60:	f04f 0a03 	mov.w	sl, #3
 8013c64:	e7b8      	b.n	8013bd8 <__gethex+0x1f8>
 8013c66:	da0a      	bge.n	8013c7e <__gethex+0x29e>
 8013c68:	1a37      	subs	r7, r6, r0
 8013c6a:	4621      	mov	r1, r4
 8013c6c:	ee18 0a10 	vmov	r0, s16
 8013c70:	463a      	mov	r2, r7
 8013c72:	f000 fc4d 	bl	8014510 <__lshift>
 8013c76:	1bed      	subs	r5, r5, r7
 8013c78:	4604      	mov	r4, r0
 8013c7a:	f100 0914 	add.w	r9, r0, #20
 8013c7e:	f04f 0a00 	mov.w	sl, #0
 8013c82:	e7ae      	b.n	8013be2 <__gethex+0x202>
 8013c84:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013c88:	42a8      	cmp	r0, r5
 8013c8a:	dd72      	ble.n	8013d72 <__gethex+0x392>
 8013c8c:	1b45      	subs	r5, r0, r5
 8013c8e:	42ae      	cmp	r6, r5
 8013c90:	dc36      	bgt.n	8013d00 <__gethex+0x320>
 8013c92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013c96:	2b02      	cmp	r3, #2
 8013c98:	d02a      	beq.n	8013cf0 <__gethex+0x310>
 8013c9a:	2b03      	cmp	r3, #3
 8013c9c:	d02c      	beq.n	8013cf8 <__gethex+0x318>
 8013c9e:	2b01      	cmp	r3, #1
 8013ca0:	d115      	bne.n	8013cce <__gethex+0x2ee>
 8013ca2:	42ae      	cmp	r6, r5
 8013ca4:	d113      	bne.n	8013cce <__gethex+0x2ee>
 8013ca6:	2e01      	cmp	r6, #1
 8013ca8:	d10b      	bne.n	8013cc2 <__gethex+0x2e2>
 8013caa:	9a04      	ldr	r2, [sp, #16]
 8013cac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013cb0:	6013      	str	r3, [r2, #0]
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	6123      	str	r3, [r4, #16]
 8013cb6:	f8c9 3000 	str.w	r3, [r9]
 8013cba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013cbc:	2762      	movs	r7, #98	; 0x62
 8013cbe:	601c      	str	r4, [r3, #0]
 8013cc0:	e723      	b.n	8013b0a <__gethex+0x12a>
 8013cc2:	1e71      	subs	r1, r6, #1
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	f000 fe61 	bl	801498c <__any_on>
 8013cca:	2800      	cmp	r0, #0
 8013ccc:	d1ed      	bne.n	8013caa <__gethex+0x2ca>
 8013cce:	ee18 0a10 	vmov	r0, s16
 8013cd2:	4621      	mov	r1, r4
 8013cd4:	f000 fa00 	bl	80140d8 <_Bfree>
 8013cd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013cda:	2300      	movs	r3, #0
 8013cdc:	6013      	str	r3, [r2, #0]
 8013cde:	2750      	movs	r7, #80	; 0x50
 8013ce0:	e713      	b.n	8013b0a <__gethex+0x12a>
 8013ce2:	bf00      	nop
 8013ce4:	08016204 	.word	0x08016204
 8013ce8:	08016188 	.word	0x08016188
 8013cec:	08016199 	.word	0x08016199
 8013cf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d1eb      	bne.n	8013cce <__gethex+0x2ee>
 8013cf6:	e7d8      	b.n	8013caa <__gethex+0x2ca>
 8013cf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d1d5      	bne.n	8013caa <__gethex+0x2ca>
 8013cfe:	e7e6      	b.n	8013cce <__gethex+0x2ee>
 8013d00:	1e6f      	subs	r7, r5, #1
 8013d02:	f1ba 0f00 	cmp.w	sl, #0
 8013d06:	d131      	bne.n	8013d6c <__gethex+0x38c>
 8013d08:	b127      	cbz	r7, 8013d14 <__gethex+0x334>
 8013d0a:	4639      	mov	r1, r7
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	f000 fe3d 	bl	801498c <__any_on>
 8013d12:	4682      	mov	sl, r0
 8013d14:	117b      	asrs	r3, r7, #5
 8013d16:	2101      	movs	r1, #1
 8013d18:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013d1c:	f007 071f 	and.w	r7, r7, #31
 8013d20:	fa01 f707 	lsl.w	r7, r1, r7
 8013d24:	421f      	tst	r7, r3
 8013d26:	4629      	mov	r1, r5
 8013d28:	4620      	mov	r0, r4
 8013d2a:	bf18      	it	ne
 8013d2c:	f04a 0a02 	orrne.w	sl, sl, #2
 8013d30:	1b76      	subs	r6, r6, r5
 8013d32:	f7ff fded 	bl	8013910 <rshift>
 8013d36:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013d3a:	2702      	movs	r7, #2
 8013d3c:	f1ba 0f00 	cmp.w	sl, #0
 8013d40:	d048      	beq.n	8013dd4 <__gethex+0x3f4>
 8013d42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013d46:	2b02      	cmp	r3, #2
 8013d48:	d015      	beq.n	8013d76 <__gethex+0x396>
 8013d4a:	2b03      	cmp	r3, #3
 8013d4c:	d017      	beq.n	8013d7e <__gethex+0x39e>
 8013d4e:	2b01      	cmp	r3, #1
 8013d50:	d109      	bne.n	8013d66 <__gethex+0x386>
 8013d52:	f01a 0f02 	tst.w	sl, #2
 8013d56:	d006      	beq.n	8013d66 <__gethex+0x386>
 8013d58:	f8d9 0000 	ldr.w	r0, [r9]
 8013d5c:	ea4a 0a00 	orr.w	sl, sl, r0
 8013d60:	f01a 0f01 	tst.w	sl, #1
 8013d64:	d10e      	bne.n	8013d84 <__gethex+0x3a4>
 8013d66:	f047 0710 	orr.w	r7, r7, #16
 8013d6a:	e033      	b.n	8013dd4 <__gethex+0x3f4>
 8013d6c:	f04f 0a01 	mov.w	sl, #1
 8013d70:	e7d0      	b.n	8013d14 <__gethex+0x334>
 8013d72:	2701      	movs	r7, #1
 8013d74:	e7e2      	b.n	8013d3c <__gethex+0x35c>
 8013d76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d78:	f1c3 0301 	rsb	r3, r3, #1
 8013d7c:	9315      	str	r3, [sp, #84]	; 0x54
 8013d7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d0f0      	beq.n	8013d66 <__gethex+0x386>
 8013d84:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013d88:	f104 0314 	add.w	r3, r4, #20
 8013d8c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013d90:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013d94:	f04f 0c00 	mov.w	ip, #0
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d9e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013da2:	d01c      	beq.n	8013dde <__gethex+0x3fe>
 8013da4:	3201      	adds	r2, #1
 8013da6:	6002      	str	r2, [r0, #0]
 8013da8:	2f02      	cmp	r7, #2
 8013daa:	f104 0314 	add.w	r3, r4, #20
 8013dae:	d13f      	bne.n	8013e30 <__gethex+0x450>
 8013db0:	f8d8 2000 	ldr.w	r2, [r8]
 8013db4:	3a01      	subs	r2, #1
 8013db6:	42b2      	cmp	r2, r6
 8013db8:	d10a      	bne.n	8013dd0 <__gethex+0x3f0>
 8013dba:	1171      	asrs	r1, r6, #5
 8013dbc:	2201      	movs	r2, #1
 8013dbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013dc2:	f006 061f 	and.w	r6, r6, #31
 8013dc6:	fa02 f606 	lsl.w	r6, r2, r6
 8013dca:	421e      	tst	r6, r3
 8013dcc:	bf18      	it	ne
 8013dce:	4617      	movne	r7, r2
 8013dd0:	f047 0720 	orr.w	r7, r7, #32
 8013dd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013dd6:	601c      	str	r4, [r3, #0]
 8013dd8:	9b04      	ldr	r3, [sp, #16]
 8013dda:	601d      	str	r5, [r3, #0]
 8013ddc:	e695      	b.n	8013b0a <__gethex+0x12a>
 8013dde:	4299      	cmp	r1, r3
 8013de0:	f843 cc04 	str.w	ip, [r3, #-4]
 8013de4:	d8d8      	bhi.n	8013d98 <__gethex+0x3b8>
 8013de6:	68a3      	ldr	r3, [r4, #8]
 8013de8:	459b      	cmp	fp, r3
 8013dea:	db19      	blt.n	8013e20 <__gethex+0x440>
 8013dec:	6861      	ldr	r1, [r4, #4]
 8013dee:	ee18 0a10 	vmov	r0, s16
 8013df2:	3101      	adds	r1, #1
 8013df4:	f000 f930 	bl	8014058 <_Balloc>
 8013df8:	4681      	mov	r9, r0
 8013dfa:	b918      	cbnz	r0, 8013e04 <__gethex+0x424>
 8013dfc:	4b1a      	ldr	r3, [pc, #104]	; (8013e68 <__gethex+0x488>)
 8013dfe:	4602      	mov	r2, r0
 8013e00:	2184      	movs	r1, #132	; 0x84
 8013e02:	e6a8      	b.n	8013b56 <__gethex+0x176>
 8013e04:	6922      	ldr	r2, [r4, #16]
 8013e06:	3202      	adds	r2, #2
 8013e08:	f104 010c 	add.w	r1, r4, #12
 8013e0c:	0092      	lsls	r2, r2, #2
 8013e0e:	300c      	adds	r0, #12
 8013e10:	f7fc fe06 	bl	8010a20 <memcpy>
 8013e14:	4621      	mov	r1, r4
 8013e16:	ee18 0a10 	vmov	r0, s16
 8013e1a:	f000 f95d 	bl	80140d8 <_Bfree>
 8013e1e:	464c      	mov	r4, r9
 8013e20:	6923      	ldr	r3, [r4, #16]
 8013e22:	1c5a      	adds	r2, r3, #1
 8013e24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013e28:	6122      	str	r2, [r4, #16]
 8013e2a:	2201      	movs	r2, #1
 8013e2c:	615a      	str	r2, [r3, #20]
 8013e2e:	e7bb      	b.n	8013da8 <__gethex+0x3c8>
 8013e30:	6922      	ldr	r2, [r4, #16]
 8013e32:	455a      	cmp	r2, fp
 8013e34:	dd0b      	ble.n	8013e4e <__gethex+0x46e>
 8013e36:	2101      	movs	r1, #1
 8013e38:	4620      	mov	r0, r4
 8013e3a:	f7ff fd69 	bl	8013910 <rshift>
 8013e3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013e42:	3501      	adds	r5, #1
 8013e44:	42ab      	cmp	r3, r5
 8013e46:	f6ff aed0 	blt.w	8013bea <__gethex+0x20a>
 8013e4a:	2701      	movs	r7, #1
 8013e4c:	e7c0      	b.n	8013dd0 <__gethex+0x3f0>
 8013e4e:	f016 061f 	ands.w	r6, r6, #31
 8013e52:	d0fa      	beq.n	8013e4a <__gethex+0x46a>
 8013e54:	449a      	add	sl, r3
 8013e56:	f1c6 0620 	rsb	r6, r6, #32
 8013e5a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013e5e:	f000 f9f1 	bl	8014244 <__hi0bits>
 8013e62:	42b0      	cmp	r0, r6
 8013e64:	dbe7      	blt.n	8013e36 <__gethex+0x456>
 8013e66:	e7f0      	b.n	8013e4a <__gethex+0x46a>
 8013e68:	08016188 	.word	0x08016188

08013e6c <L_shift>:
 8013e6c:	f1c2 0208 	rsb	r2, r2, #8
 8013e70:	0092      	lsls	r2, r2, #2
 8013e72:	b570      	push	{r4, r5, r6, lr}
 8013e74:	f1c2 0620 	rsb	r6, r2, #32
 8013e78:	6843      	ldr	r3, [r0, #4]
 8013e7a:	6804      	ldr	r4, [r0, #0]
 8013e7c:	fa03 f506 	lsl.w	r5, r3, r6
 8013e80:	432c      	orrs	r4, r5
 8013e82:	40d3      	lsrs	r3, r2
 8013e84:	6004      	str	r4, [r0, #0]
 8013e86:	f840 3f04 	str.w	r3, [r0, #4]!
 8013e8a:	4288      	cmp	r0, r1
 8013e8c:	d3f4      	bcc.n	8013e78 <L_shift+0xc>
 8013e8e:	bd70      	pop	{r4, r5, r6, pc}

08013e90 <__match>:
 8013e90:	b530      	push	{r4, r5, lr}
 8013e92:	6803      	ldr	r3, [r0, #0]
 8013e94:	3301      	adds	r3, #1
 8013e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e9a:	b914      	cbnz	r4, 8013ea2 <__match+0x12>
 8013e9c:	6003      	str	r3, [r0, #0]
 8013e9e:	2001      	movs	r0, #1
 8013ea0:	bd30      	pop	{r4, r5, pc}
 8013ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ea6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013eaa:	2d19      	cmp	r5, #25
 8013eac:	bf98      	it	ls
 8013eae:	3220      	addls	r2, #32
 8013eb0:	42a2      	cmp	r2, r4
 8013eb2:	d0f0      	beq.n	8013e96 <__match+0x6>
 8013eb4:	2000      	movs	r0, #0
 8013eb6:	e7f3      	b.n	8013ea0 <__match+0x10>

08013eb8 <__hexnan>:
 8013eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ebc:	680b      	ldr	r3, [r1, #0]
 8013ebe:	6801      	ldr	r1, [r0, #0]
 8013ec0:	115e      	asrs	r6, r3, #5
 8013ec2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013ec6:	f013 031f 	ands.w	r3, r3, #31
 8013eca:	b087      	sub	sp, #28
 8013ecc:	bf18      	it	ne
 8013ece:	3604      	addne	r6, #4
 8013ed0:	2500      	movs	r5, #0
 8013ed2:	1f37      	subs	r7, r6, #4
 8013ed4:	4682      	mov	sl, r0
 8013ed6:	4690      	mov	r8, r2
 8013ed8:	9301      	str	r3, [sp, #4]
 8013eda:	f846 5c04 	str.w	r5, [r6, #-4]
 8013ede:	46b9      	mov	r9, r7
 8013ee0:	463c      	mov	r4, r7
 8013ee2:	9502      	str	r5, [sp, #8]
 8013ee4:	46ab      	mov	fp, r5
 8013ee6:	784a      	ldrb	r2, [r1, #1]
 8013ee8:	1c4b      	adds	r3, r1, #1
 8013eea:	9303      	str	r3, [sp, #12]
 8013eec:	b342      	cbz	r2, 8013f40 <__hexnan+0x88>
 8013eee:	4610      	mov	r0, r2
 8013ef0:	9105      	str	r1, [sp, #20]
 8013ef2:	9204      	str	r2, [sp, #16]
 8013ef4:	f7ff fd5e 	bl	80139b4 <__hexdig_fun>
 8013ef8:	2800      	cmp	r0, #0
 8013efa:	d14f      	bne.n	8013f9c <__hexnan+0xe4>
 8013efc:	9a04      	ldr	r2, [sp, #16]
 8013efe:	9905      	ldr	r1, [sp, #20]
 8013f00:	2a20      	cmp	r2, #32
 8013f02:	d818      	bhi.n	8013f36 <__hexnan+0x7e>
 8013f04:	9b02      	ldr	r3, [sp, #8]
 8013f06:	459b      	cmp	fp, r3
 8013f08:	dd13      	ble.n	8013f32 <__hexnan+0x7a>
 8013f0a:	454c      	cmp	r4, r9
 8013f0c:	d206      	bcs.n	8013f1c <__hexnan+0x64>
 8013f0e:	2d07      	cmp	r5, #7
 8013f10:	dc04      	bgt.n	8013f1c <__hexnan+0x64>
 8013f12:	462a      	mov	r2, r5
 8013f14:	4649      	mov	r1, r9
 8013f16:	4620      	mov	r0, r4
 8013f18:	f7ff ffa8 	bl	8013e6c <L_shift>
 8013f1c:	4544      	cmp	r4, r8
 8013f1e:	d950      	bls.n	8013fc2 <__hexnan+0x10a>
 8013f20:	2300      	movs	r3, #0
 8013f22:	f1a4 0904 	sub.w	r9, r4, #4
 8013f26:	f844 3c04 	str.w	r3, [r4, #-4]
 8013f2a:	f8cd b008 	str.w	fp, [sp, #8]
 8013f2e:	464c      	mov	r4, r9
 8013f30:	461d      	mov	r5, r3
 8013f32:	9903      	ldr	r1, [sp, #12]
 8013f34:	e7d7      	b.n	8013ee6 <__hexnan+0x2e>
 8013f36:	2a29      	cmp	r2, #41	; 0x29
 8013f38:	d156      	bne.n	8013fe8 <__hexnan+0x130>
 8013f3a:	3102      	adds	r1, #2
 8013f3c:	f8ca 1000 	str.w	r1, [sl]
 8013f40:	f1bb 0f00 	cmp.w	fp, #0
 8013f44:	d050      	beq.n	8013fe8 <__hexnan+0x130>
 8013f46:	454c      	cmp	r4, r9
 8013f48:	d206      	bcs.n	8013f58 <__hexnan+0xa0>
 8013f4a:	2d07      	cmp	r5, #7
 8013f4c:	dc04      	bgt.n	8013f58 <__hexnan+0xa0>
 8013f4e:	462a      	mov	r2, r5
 8013f50:	4649      	mov	r1, r9
 8013f52:	4620      	mov	r0, r4
 8013f54:	f7ff ff8a 	bl	8013e6c <L_shift>
 8013f58:	4544      	cmp	r4, r8
 8013f5a:	d934      	bls.n	8013fc6 <__hexnan+0x10e>
 8013f5c:	f1a8 0204 	sub.w	r2, r8, #4
 8013f60:	4623      	mov	r3, r4
 8013f62:	f853 1b04 	ldr.w	r1, [r3], #4
 8013f66:	f842 1f04 	str.w	r1, [r2, #4]!
 8013f6a:	429f      	cmp	r7, r3
 8013f6c:	d2f9      	bcs.n	8013f62 <__hexnan+0xaa>
 8013f6e:	1b3b      	subs	r3, r7, r4
 8013f70:	f023 0303 	bic.w	r3, r3, #3
 8013f74:	3304      	adds	r3, #4
 8013f76:	3401      	adds	r4, #1
 8013f78:	3e03      	subs	r6, #3
 8013f7a:	42b4      	cmp	r4, r6
 8013f7c:	bf88      	it	hi
 8013f7e:	2304      	movhi	r3, #4
 8013f80:	4443      	add	r3, r8
 8013f82:	2200      	movs	r2, #0
 8013f84:	f843 2b04 	str.w	r2, [r3], #4
 8013f88:	429f      	cmp	r7, r3
 8013f8a:	d2fb      	bcs.n	8013f84 <__hexnan+0xcc>
 8013f8c:	683b      	ldr	r3, [r7, #0]
 8013f8e:	b91b      	cbnz	r3, 8013f98 <__hexnan+0xe0>
 8013f90:	4547      	cmp	r7, r8
 8013f92:	d127      	bne.n	8013fe4 <__hexnan+0x12c>
 8013f94:	2301      	movs	r3, #1
 8013f96:	603b      	str	r3, [r7, #0]
 8013f98:	2005      	movs	r0, #5
 8013f9a:	e026      	b.n	8013fea <__hexnan+0x132>
 8013f9c:	3501      	adds	r5, #1
 8013f9e:	2d08      	cmp	r5, #8
 8013fa0:	f10b 0b01 	add.w	fp, fp, #1
 8013fa4:	dd06      	ble.n	8013fb4 <__hexnan+0xfc>
 8013fa6:	4544      	cmp	r4, r8
 8013fa8:	d9c3      	bls.n	8013f32 <__hexnan+0x7a>
 8013faa:	2300      	movs	r3, #0
 8013fac:	f844 3c04 	str.w	r3, [r4, #-4]
 8013fb0:	2501      	movs	r5, #1
 8013fb2:	3c04      	subs	r4, #4
 8013fb4:	6822      	ldr	r2, [r4, #0]
 8013fb6:	f000 000f 	and.w	r0, r0, #15
 8013fba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013fbe:	6022      	str	r2, [r4, #0]
 8013fc0:	e7b7      	b.n	8013f32 <__hexnan+0x7a>
 8013fc2:	2508      	movs	r5, #8
 8013fc4:	e7b5      	b.n	8013f32 <__hexnan+0x7a>
 8013fc6:	9b01      	ldr	r3, [sp, #4]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d0df      	beq.n	8013f8c <__hexnan+0xd4>
 8013fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8013fd0:	f1c3 0320 	rsb	r3, r3, #32
 8013fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8013fd8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013fdc:	401a      	ands	r2, r3
 8013fde:	f846 2c04 	str.w	r2, [r6, #-4]
 8013fe2:	e7d3      	b.n	8013f8c <__hexnan+0xd4>
 8013fe4:	3f04      	subs	r7, #4
 8013fe6:	e7d1      	b.n	8013f8c <__hexnan+0xd4>
 8013fe8:	2004      	movs	r0, #4
 8013fea:	b007      	add	sp, #28
 8013fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013ff0 <_localeconv_r>:
 8013ff0:	4800      	ldr	r0, [pc, #0]	; (8013ff4 <_localeconv_r+0x4>)
 8013ff2:	4770      	bx	lr
 8013ff4:	200002e0 	.word	0x200002e0

08013ff8 <_lseek_r>:
 8013ff8:	b538      	push	{r3, r4, r5, lr}
 8013ffa:	4d07      	ldr	r5, [pc, #28]	; (8014018 <_lseek_r+0x20>)
 8013ffc:	4604      	mov	r4, r0
 8013ffe:	4608      	mov	r0, r1
 8014000:	4611      	mov	r1, r2
 8014002:	2200      	movs	r2, #0
 8014004:	602a      	str	r2, [r5, #0]
 8014006:	461a      	mov	r2, r3
 8014008:	f7ee fbc0 	bl	800278c <_lseek>
 801400c:	1c43      	adds	r3, r0, #1
 801400e:	d102      	bne.n	8014016 <_lseek_r+0x1e>
 8014010:	682b      	ldr	r3, [r5, #0]
 8014012:	b103      	cbz	r3, 8014016 <_lseek_r+0x1e>
 8014014:	6023      	str	r3, [r4, #0]
 8014016:	bd38      	pop	{r3, r4, r5, pc}
 8014018:	20006e38 	.word	0x20006e38

0801401c <__ascii_mbtowc>:
 801401c:	b082      	sub	sp, #8
 801401e:	b901      	cbnz	r1, 8014022 <__ascii_mbtowc+0x6>
 8014020:	a901      	add	r1, sp, #4
 8014022:	b142      	cbz	r2, 8014036 <__ascii_mbtowc+0x1a>
 8014024:	b14b      	cbz	r3, 801403a <__ascii_mbtowc+0x1e>
 8014026:	7813      	ldrb	r3, [r2, #0]
 8014028:	600b      	str	r3, [r1, #0]
 801402a:	7812      	ldrb	r2, [r2, #0]
 801402c:	1e10      	subs	r0, r2, #0
 801402e:	bf18      	it	ne
 8014030:	2001      	movne	r0, #1
 8014032:	b002      	add	sp, #8
 8014034:	4770      	bx	lr
 8014036:	4610      	mov	r0, r2
 8014038:	e7fb      	b.n	8014032 <__ascii_mbtowc+0x16>
 801403a:	f06f 0001 	mvn.w	r0, #1
 801403e:	e7f8      	b.n	8014032 <__ascii_mbtowc+0x16>

08014040 <__malloc_lock>:
 8014040:	4801      	ldr	r0, [pc, #4]	; (8014048 <__malloc_lock+0x8>)
 8014042:	f7fc bcda 	b.w	80109fa <__retarget_lock_acquire_recursive>
 8014046:	bf00      	nop
 8014048:	20006e30 	.word	0x20006e30

0801404c <__malloc_unlock>:
 801404c:	4801      	ldr	r0, [pc, #4]	; (8014054 <__malloc_unlock+0x8>)
 801404e:	f7fc bcd5 	b.w	80109fc <__retarget_lock_release_recursive>
 8014052:	bf00      	nop
 8014054:	20006e30 	.word	0x20006e30

08014058 <_Balloc>:
 8014058:	b570      	push	{r4, r5, r6, lr}
 801405a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801405c:	4604      	mov	r4, r0
 801405e:	460d      	mov	r5, r1
 8014060:	b976      	cbnz	r6, 8014080 <_Balloc+0x28>
 8014062:	2010      	movs	r0, #16
 8014064:	f7fc fccc 	bl	8010a00 <malloc>
 8014068:	4602      	mov	r2, r0
 801406a:	6260      	str	r0, [r4, #36]	; 0x24
 801406c:	b920      	cbnz	r0, 8014078 <_Balloc+0x20>
 801406e:	4b18      	ldr	r3, [pc, #96]	; (80140d0 <_Balloc+0x78>)
 8014070:	4818      	ldr	r0, [pc, #96]	; (80140d4 <_Balloc+0x7c>)
 8014072:	2166      	movs	r1, #102	; 0x66
 8014074:	f7fe fcd2 	bl	8012a1c <__assert_func>
 8014078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801407c:	6006      	str	r6, [r0, #0]
 801407e:	60c6      	str	r6, [r0, #12]
 8014080:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014082:	68f3      	ldr	r3, [r6, #12]
 8014084:	b183      	cbz	r3, 80140a8 <_Balloc+0x50>
 8014086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014088:	68db      	ldr	r3, [r3, #12]
 801408a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801408e:	b9b8      	cbnz	r0, 80140c0 <_Balloc+0x68>
 8014090:	2101      	movs	r1, #1
 8014092:	fa01 f605 	lsl.w	r6, r1, r5
 8014096:	1d72      	adds	r2, r6, #5
 8014098:	0092      	lsls	r2, r2, #2
 801409a:	4620      	mov	r0, r4
 801409c:	f000 fc97 	bl	80149ce <_calloc_r>
 80140a0:	b160      	cbz	r0, 80140bc <_Balloc+0x64>
 80140a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80140a6:	e00e      	b.n	80140c6 <_Balloc+0x6e>
 80140a8:	2221      	movs	r2, #33	; 0x21
 80140aa:	2104      	movs	r1, #4
 80140ac:	4620      	mov	r0, r4
 80140ae:	f000 fc8e 	bl	80149ce <_calloc_r>
 80140b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140b4:	60f0      	str	r0, [r6, #12]
 80140b6:	68db      	ldr	r3, [r3, #12]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d1e4      	bne.n	8014086 <_Balloc+0x2e>
 80140bc:	2000      	movs	r0, #0
 80140be:	bd70      	pop	{r4, r5, r6, pc}
 80140c0:	6802      	ldr	r2, [r0, #0]
 80140c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80140c6:	2300      	movs	r3, #0
 80140c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80140cc:	e7f7      	b.n	80140be <_Balloc+0x66>
 80140ce:	bf00      	nop
 80140d0:	08016112 	.word	0x08016112
 80140d4:	08016218 	.word	0x08016218

080140d8 <_Bfree>:
 80140d8:	b570      	push	{r4, r5, r6, lr}
 80140da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80140dc:	4605      	mov	r5, r0
 80140de:	460c      	mov	r4, r1
 80140e0:	b976      	cbnz	r6, 8014100 <_Bfree+0x28>
 80140e2:	2010      	movs	r0, #16
 80140e4:	f7fc fc8c 	bl	8010a00 <malloc>
 80140e8:	4602      	mov	r2, r0
 80140ea:	6268      	str	r0, [r5, #36]	; 0x24
 80140ec:	b920      	cbnz	r0, 80140f8 <_Bfree+0x20>
 80140ee:	4b09      	ldr	r3, [pc, #36]	; (8014114 <_Bfree+0x3c>)
 80140f0:	4809      	ldr	r0, [pc, #36]	; (8014118 <_Bfree+0x40>)
 80140f2:	218a      	movs	r1, #138	; 0x8a
 80140f4:	f7fe fc92 	bl	8012a1c <__assert_func>
 80140f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80140fc:	6006      	str	r6, [r0, #0]
 80140fe:	60c6      	str	r6, [r0, #12]
 8014100:	b13c      	cbz	r4, 8014112 <_Bfree+0x3a>
 8014102:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014104:	6862      	ldr	r2, [r4, #4]
 8014106:	68db      	ldr	r3, [r3, #12]
 8014108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801410c:	6021      	str	r1, [r4, #0]
 801410e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014112:	bd70      	pop	{r4, r5, r6, pc}
 8014114:	08016112 	.word	0x08016112
 8014118:	08016218 	.word	0x08016218

0801411c <__multadd>:
 801411c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014120:	690e      	ldr	r6, [r1, #16]
 8014122:	4607      	mov	r7, r0
 8014124:	4698      	mov	r8, r3
 8014126:	460c      	mov	r4, r1
 8014128:	f101 0014 	add.w	r0, r1, #20
 801412c:	2300      	movs	r3, #0
 801412e:	6805      	ldr	r5, [r0, #0]
 8014130:	b2a9      	uxth	r1, r5
 8014132:	fb02 8101 	mla	r1, r2, r1, r8
 8014136:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801413a:	0c2d      	lsrs	r5, r5, #16
 801413c:	fb02 c505 	mla	r5, r2, r5, ip
 8014140:	b289      	uxth	r1, r1
 8014142:	3301      	adds	r3, #1
 8014144:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014148:	429e      	cmp	r6, r3
 801414a:	f840 1b04 	str.w	r1, [r0], #4
 801414e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014152:	dcec      	bgt.n	801412e <__multadd+0x12>
 8014154:	f1b8 0f00 	cmp.w	r8, #0
 8014158:	d022      	beq.n	80141a0 <__multadd+0x84>
 801415a:	68a3      	ldr	r3, [r4, #8]
 801415c:	42b3      	cmp	r3, r6
 801415e:	dc19      	bgt.n	8014194 <__multadd+0x78>
 8014160:	6861      	ldr	r1, [r4, #4]
 8014162:	4638      	mov	r0, r7
 8014164:	3101      	adds	r1, #1
 8014166:	f7ff ff77 	bl	8014058 <_Balloc>
 801416a:	4605      	mov	r5, r0
 801416c:	b928      	cbnz	r0, 801417a <__multadd+0x5e>
 801416e:	4602      	mov	r2, r0
 8014170:	4b0d      	ldr	r3, [pc, #52]	; (80141a8 <__multadd+0x8c>)
 8014172:	480e      	ldr	r0, [pc, #56]	; (80141ac <__multadd+0x90>)
 8014174:	21b5      	movs	r1, #181	; 0xb5
 8014176:	f7fe fc51 	bl	8012a1c <__assert_func>
 801417a:	6922      	ldr	r2, [r4, #16]
 801417c:	3202      	adds	r2, #2
 801417e:	f104 010c 	add.w	r1, r4, #12
 8014182:	0092      	lsls	r2, r2, #2
 8014184:	300c      	adds	r0, #12
 8014186:	f7fc fc4b 	bl	8010a20 <memcpy>
 801418a:	4621      	mov	r1, r4
 801418c:	4638      	mov	r0, r7
 801418e:	f7ff ffa3 	bl	80140d8 <_Bfree>
 8014192:	462c      	mov	r4, r5
 8014194:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014198:	3601      	adds	r6, #1
 801419a:	f8c3 8014 	str.w	r8, [r3, #20]
 801419e:	6126      	str	r6, [r4, #16]
 80141a0:	4620      	mov	r0, r4
 80141a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141a6:	bf00      	nop
 80141a8:	08016188 	.word	0x08016188
 80141ac:	08016218 	.word	0x08016218

080141b0 <__s2b>:
 80141b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141b4:	460c      	mov	r4, r1
 80141b6:	4615      	mov	r5, r2
 80141b8:	461f      	mov	r7, r3
 80141ba:	2209      	movs	r2, #9
 80141bc:	3308      	adds	r3, #8
 80141be:	4606      	mov	r6, r0
 80141c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80141c4:	2100      	movs	r1, #0
 80141c6:	2201      	movs	r2, #1
 80141c8:	429a      	cmp	r2, r3
 80141ca:	db09      	blt.n	80141e0 <__s2b+0x30>
 80141cc:	4630      	mov	r0, r6
 80141ce:	f7ff ff43 	bl	8014058 <_Balloc>
 80141d2:	b940      	cbnz	r0, 80141e6 <__s2b+0x36>
 80141d4:	4602      	mov	r2, r0
 80141d6:	4b19      	ldr	r3, [pc, #100]	; (801423c <__s2b+0x8c>)
 80141d8:	4819      	ldr	r0, [pc, #100]	; (8014240 <__s2b+0x90>)
 80141da:	21ce      	movs	r1, #206	; 0xce
 80141dc:	f7fe fc1e 	bl	8012a1c <__assert_func>
 80141e0:	0052      	lsls	r2, r2, #1
 80141e2:	3101      	adds	r1, #1
 80141e4:	e7f0      	b.n	80141c8 <__s2b+0x18>
 80141e6:	9b08      	ldr	r3, [sp, #32]
 80141e8:	6143      	str	r3, [r0, #20]
 80141ea:	2d09      	cmp	r5, #9
 80141ec:	f04f 0301 	mov.w	r3, #1
 80141f0:	6103      	str	r3, [r0, #16]
 80141f2:	dd16      	ble.n	8014222 <__s2b+0x72>
 80141f4:	f104 0909 	add.w	r9, r4, #9
 80141f8:	46c8      	mov	r8, r9
 80141fa:	442c      	add	r4, r5
 80141fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014200:	4601      	mov	r1, r0
 8014202:	3b30      	subs	r3, #48	; 0x30
 8014204:	220a      	movs	r2, #10
 8014206:	4630      	mov	r0, r6
 8014208:	f7ff ff88 	bl	801411c <__multadd>
 801420c:	45a0      	cmp	r8, r4
 801420e:	d1f5      	bne.n	80141fc <__s2b+0x4c>
 8014210:	f1a5 0408 	sub.w	r4, r5, #8
 8014214:	444c      	add	r4, r9
 8014216:	1b2d      	subs	r5, r5, r4
 8014218:	1963      	adds	r3, r4, r5
 801421a:	42bb      	cmp	r3, r7
 801421c:	db04      	blt.n	8014228 <__s2b+0x78>
 801421e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014222:	340a      	adds	r4, #10
 8014224:	2509      	movs	r5, #9
 8014226:	e7f6      	b.n	8014216 <__s2b+0x66>
 8014228:	f814 3b01 	ldrb.w	r3, [r4], #1
 801422c:	4601      	mov	r1, r0
 801422e:	3b30      	subs	r3, #48	; 0x30
 8014230:	220a      	movs	r2, #10
 8014232:	4630      	mov	r0, r6
 8014234:	f7ff ff72 	bl	801411c <__multadd>
 8014238:	e7ee      	b.n	8014218 <__s2b+0x68>
 801423a:	bf00      	nop
 801423c:	08016188 	.word	0x08016188
 8014240:	08016218 	.word	0x08016218

08014244 <__hi0bits>:
 8014244:	0c03      	lsrs	r3, r0, #16
 8014246:	041b      	lsls	r3, r3, #16
 8014248:	b9d3      	cbnz	r3, 8014280 <__hi0bits+0x3c>
 801424a:	0400      	lsls	r0, r0, #16
 801424c:	2310      	movs	r3, #16
 801424e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014252:	bf04      	itt	eq
 8014254:	0200      	lsleq	r0, r0, #8
 8014256:	3308      	addeq	r3, #8
 8014258:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801425c:	bf04      	itt	eq
 801425e:	0100      	lsleq	r0, r0, #4
 8014260:	3304      	addeq	r3, #4
 8014262:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014266:	bf04      	itt	eq
 8014268:	0080      	lsleq	r0, r0, #2
 801426a:	3302      	addeq	r3, #2
 801426c:	2800      	cmp	r0, #0
 801426e:	db05      	blt.n	801427c <__hi0bits+0x38>
 8014270:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014274:	f103 0301 	add.w	r3, r3, #1
 8014278:	bf08      	it	eq
 801427a:	2320      	moveq	r3, #32
 801427c:	4618      	mov	r0, r3
 801427e:	4770      	bx	lr
 8014280:	2300      	movs	r3, #0
 8014282:	e7e4      	b.n	801424e <__hi0bits+0xa>

08014284 <__lo0bits>:
 8014284:	6803      	ldr	r3, [r0, #0]
 8014286:	f013 0207 	ands.w	r2, r3, #7
 801428a:	4601      	mov	r1, r0
 801428c:	d00b      	beq.n	80142a6 <__lo0bits+0x22>
 801428e:	07da      	lsls	r2, r3, #31
 8014290:	d424      	bmi.n	80142dc <__lo0bits+0x58>
 8014292:	0798      	lsls	r0, r3, #30
 8014294:	bf49      	itett	mi
 8014296:	085b      	lsrmi	r3, r3, #1
 8014298:	089b      	lsrpl	r3, r3, #2
 801429a:	2001      	movmi	r0, #1
 801429c:	600b      	strmi	r3, [r1, #0]
 801429e:	bf5c      	itt	pl
 80142a0:	600b      	strpl	r3, [r1, #0]
 80142a2:	2002      	movpl	r0, #2
 80142a4:	4770      	bx	lr
 80142a6:	b298      	uxth	r0, r3
 80142a8:	b9b0      	cbnz	r0, 80142d8 <__lo0bits+0x54>
 80142aa:	0c1b      	lsrs	r3, r3, #16
 80142ac:	2010      	movs	r0, #16
 80142ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80142b2:	bf04      	itt	eq
 80142b4:	0a1b      	lsreq	r3, r3, #8
 80142b6:	3008      	addeq	r0, #8
 80142b8:	071a      	lsls	r2, r3, #28
 80142ba:	bf04      	itt	eq
 80142bc:	091b      	lsreq	r3, r3, #4
 80142be:	3004      	addeq	r0, #4
 80142c0:	079a      	lsls	r2, r3, #30
 80142c2:	bf04      	itt	eq
 80142c4:	089b      	lsreq	r3, r3, #2
 80142c6:	3002      	addeq	r0, #2
 80142c8:	07da      	lsls	r2, r3, #31
 80142ca:	d403      	bmi.n	80142d4 <__lo0bits+0x50>
 80142cc:	085b      	lsrs	r3, r3, #1
 80142ce:	f100 0001 	add.w	r0, r0, #1
 80142d2:	d005      	beq.n	80142e0 <__lo0bits+0x5c>
 80142d4:	600b      	str	r3, [r1, #0]
 80142d6:	4770      	bx	lr
 80142d8:	4610      	mov	r0, r2
 80142da:	e7e8      	b.n	80142ae <__lo0bits+0x2a>
 80142dc:	2000      	movs	r0, #0
 80142de:	4770      	bx	lr
 80142e0:	2020      	movs	r0, #32
 80142e2:	4770      	bx	lr

080142e4 <__i2b>:
 80142e4:	b510      	push	{r4, lr}
 80142e6:	460c      	mov	r4, r1
 80142e8:	2101      	movs	r1, #1
 80142ea:	f7ff feb5 	bl	8014058 <_Balloc>
 80142ee:	4602      	mov	r2, r0
 80142f0:	b928      	cbnz	r0, 80142fe <__i2b+0x1a>
 80142f2:	4b05      	ldr	r3, [pc, #20]	; (8014308 <__i2b+0x24>)
 80142f4:	4805      	ldr	r0, [pc, #20]	; (801430c <__i2b+0x28>)
 80142f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80142fa:	f7fe fb8f 	bl	8012a1c <__assert_func>
 80142fe:	2301      	movs	r3, #1
 8014300:	6144      	str	r4, [r0, #20]
 8014302:	6103      	str	r3, [r0, #16]
 8014304:	bd10      	pop	{r4, pc}
 8014306:	bf00      	nop
 8014308:	08016188 	.word	0x08016188
 801430c:	08016218 	.word	0x08016218

08014310 <__multiply>:
 8014310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014314:	4614      	mov	r4, r2
 8014316:	690a      	ldr	r2, [r1, #16]
 8014318:	6923      	ldr	r3, [r4, #16]
 801431a:	429a      	cmp	r2, r3
 801431c:	bfb8      	it	lt
 801431e:	460b      	movlt	r3, r1
 8014320:	460d      	mov	r5, r1
 8014322:	bfbc      	itt	lt
 8014324:	4625      	movlt	r5, r4
 8014326:	461c      	movlt	r4, r3
 8014328:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801432c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014330:	68ab      	ldr	r3, [r5, #8]
 8014332:	6869      	ldr	r1, [r5, #4]
 8014334:	eb0a 0709 	add.w	r7, sl, r9
 8014338:	42bb      	cmp	r3, r7
 801433a:	b085      	sub	sp, #20
 801433c:	bfb8      	it	lt
 801433e:	3101      	addlt	r1, #1
 8014340:	f7ff fe8a 	bl	8014058 <_Balloc>
 8014344:	b930      	cbnz	r0, 8014354 <__multiply+0x44>
 8014346:	4602      	mov	r2, r0
 8014348:	4b42      	ldr	r3, [pc, #264]	; (8014454 <__multiply+0x144>)
 801434a:	4843      	ldr	r0, [pc, #268]	; (8014458 <__multiply+0x148>)
 801434c:	f240 115d 	movw	r1, #349	; 0x15d
 8014350:	f7fe fb64 	bl	8012a1c <__assert_func>
 8014354:	f100 0614 	add.w	r6, r0, #20
 8014358:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801435c:	4633      	mov	r3, r6
 801435e:	2200      	movs	r2, #0
 8014360:	4543      	cmp	r3, r8
 8014362:	d31e      	bcc.n	80143a2 <__multiply+0x92>
 8014364:	f105 0c14 	add.w	ip, r5, #20
 8014368:	f104 0314 	add.w	r3, r4, #20
 801436c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014370:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014374:	9202      	str	r2, [sp, #8]
 8014376:	ebac 0205 	sub.w	r2, ip, r5
 801437a:	3a15      	subs	r2, #21
 801437c:	f022 0203 	bic.w	r2, r2, #3
 8014380:	3204      	adds	r2, #4
 8014382:	f105 0115 	add.w	r1, r5, #21
 8014386:	458c      	cmp	ip, r1
 8014388:	bf38      	it	cc
 801438a:	2204      	movcc	r2, #4
 801438c:	9201      	str	r2, [sp, #4]
 801438e:	9a02      	ldr	r2, [sp, #8]
 8014390:	9303      	str	r3, [sp, #12]
 8014392:	429a      	cmp	r2, r3
 8014394:	d808      	bhi.n	80143a8 <__multiply+0x98>
 8014396:	2f00      	cmp	r7, #0
 8014398:	dc55      	bgt.n	8014446 <__multiply+0x136>
 801439a:	6107      	str	r7, [r0, #16]
 801439c:	b005      	add	sp, #20
 801439e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143a2:	f843 2b04 	str.w	r2, [r3], #4
 80143a6:	e7db      	b.n	8014360 <__multiply+0x50>
 80143a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80143ac:	f1ba 0f00 	cmp.w	sl, #0
 80143b0:	d020      	beq.n	80143f4 <__multiply+0xe4>
 80143b2:	f105 0e14 	add.w	lr, r5, #20
 80143b6:	46b1      	mov	r9, r6
 80143b8:	2200      	movs	r2, #0
 80143ba:	f85e 4b04 	ldr.w	r4, [lr], #4
 80143be:	f8d9 b000 	ldr.w	fp, [r9]
 80143c2:	b2a1      	uxth	r1, r4
 80143c4:	fa1f fb8b 	uxth.w	fp, fp
 80143c8:	fb0a b101 	mla	r1, sl, r1, fp
 80143cc:	4411      	add	r1, r2
 80143ce:	f8d9 2000 	ldr.w	r2, [r9]
 80143d2:	0c24      	lsrs	r4, r4, #16
 80143d4:	0c12      	lsrs	r2, r2, #16
 80143d6:	fb0a 2404 	mla	r4, sl, r4, r2
 80143da:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80143de:	b289      	uxth	r1, r1
 80143e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80143e4:	45f4      	cmp	ip, lr
 80143e6:	f849 1b04 	str.w	r1, [r9], #4
 80143ea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80143ee:	d8e4      	bhi.n	80143ba <__multiply+0xaa>
 80143f0:	9901      	ldr	r1, [sp, #4]
 80143f2:	5072      	str	r2, [r6, r1]
 80143f4:	9a03      	ldr	r2, [sp, #12]
 80143f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80143fa:	3304      	adds	r3, #4
 80143fc:	f1b9 0f00 	cmp.w	r9, #0
 8014400:	d01f      	beq.n	8014442 <__multiply+0x132>
 8014402:	6834      	ldr	r4, [r6, #0]
 8014404:	f105 0114 	add.w	r1, r5, #20
 8014408:	46b6      	mov	lr, r6
 801440a:	f04f 0a00 	mov.w	sl, #0
 801440e:	880a      	ldrh	r2, [r1, #0]
 8014410:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014414:	fb09 b202 	mla	r2, r9, r2, fp
 8014418:	4492      	add	sl, r2
 801441a:	b2a4      	uxth	r4, r4
 801441c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014420:	f84e 4b04 	str.w	r4, [lr], #4
 8014424:	f851 4b04 	ldr.w	r4, [r1], #4
 8014428:	f8be 2000 	ldrh.w	r2, [lr]
 801442c:	0c24      	lsrs	r4, r4, #16
 801442e:	fb09 2404 	mla	r4, r9, r4, r2
 8014432:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014436:	458c      	cmp	ip, r1
 8014438:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801443c:	d8e7      	bhi.n	801440e <__multiply+0xfe>
 801443e:	9a01      	ldr	r2, [sp, #4]
 8014440:	50b4      	str	r4, [r6, r2]
 8014442:	3604      	adds	r6, #4
 8014444:	e7a3      	b.n	801438e <__multiply+0x7e>
 8014446:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801444a:	2b00      	cmp	r3, #0
 801444c:	d1a5      	bne.n	801439a <__multiply+0x8a>
 801444e:	3f01      	subs	r7, #1
 8014450:	e7a1      	b.n	8014396 <__multiply+0x86>
 8014452:	bf00      	nop
 8014454:	08016188 	.word	0x08016188
 8014458:	08016218 	.word	0x08016218

0801445c <__pow5mult>:
 801445c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014460:	4615      	mov	r5, r2
 8014462:	f012 0203 	ands.w	r2, r2, #3
 8014466:	4606      	mov	r6, r0
 8014468:	460f      	mov	r7, r1
 801446a:	d007      	beq.n	801447c <__pow5mult+0x20>
 801446c:	4c25      	ldr	r4, [pc, #148]	; (8014504 <__pow5mult+0xa8>)
 801446e:	3a01      	subs	r2, #1
 8014470:	2300      	movs	r3, #0
 8014472:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014476:	f7ff fe51 	bl	801411c <__multadd>
 801447a:	4607      	mov	r7, r0
 801447c:	10ad      	asrs	r5, r5, #2
 801447e:	d03d      	beq.n	80144fc <__pow5mult+0xa0>
 8014480:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014482:	b97c      	cbnz	r4, 80144a4 <__pow5mult+0x48>
 8014484:	2010      	movs	r0, #16
 8014486:	f7fc fabb 	bl	8010a00 <malloc>
 801448a:	4602      	mov	r2, r0
 801448c:	6270      	str	r0, [r6, #36]	; 0x24
 801448e:	b928      	cbnz	r0, 801449c <__pow5mult+0x40>
 8014490:	4b1d      	ldr	r3, [pc, #116]	; (8014508 <__pow5mult+0xac>)
 8014492:	481e      	ldr	r0, [pc, #120]	; (801450c <__pow5mult+0xb0>)
 8014494:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014498:	f7fe fac0 	bl	8012a1c <__assert_func>
 801449c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80144a0:	6004      	str	r4, [r0, #0]
 80144a2:	60c4      	str	r4, [r0, #12]
 80144a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80144a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80144ac:	b94c      	cbnz	r4, 80144c2 <__pow5mult+0x66>
 80144ae:	f240 2171 	movw	r1, #625	; 0x271
 80144b2:	4630      	mov	r0, r6
 80144b4:	f7ff ff16 	bl	80142e4 <__i2b>
 80144b8:	2300      	movs	r3, #0
 80144ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80144be:	4604      	mov	r4, r0
 80144c0:	6003      	str	r3, [r0, #0]
 80144c2:	f04f 0900 	mov.w	r9, #0
 80144c6:	07eb      	lsls	r3, r5, #31
 80144c8:	d50a      	bpl.n	80144e0 <__pow5mult+0x84>
 80144ca:	4639      	mov	r1, r7
 80144cc:	4622      	mov	r2, r4
 80144ce:	4630      	mov	r0, r6
 80144d0:	f7ff ff1e 	bl	8014310 <__multiply>
 80144d4:	4639      	mov	r1, r7
 80144d6:	4680      	mov	r8, r0
 80144d8:	4630      	mov	r0, r6
 80144da:	f7ff fdfd 	bl	80140d8 <_Bfree>
 80144de:	4647      	mov	r7, r8
 80144e0:	106d      	asrs	r5, r5, #1
 80144e2:	d00b      	beq.n	80144fc <__pow5mult+0xa0>
 80144e4:	6820      	ldr	r0, [r4, #0]
 80144e6:	b938      	cbnz	r0, 80144f8 <__pow5mult+0x9c>
 80144e8:	4622      	mov	r2, r4
 80144ea:	4621      	mov	r1, r4
 80144ec:	4630      	mov	r0, r6
 80144ee:	f7ff ff0f 	bl	8014310 <__multiply>
 80144f2:	6020      	str	r0, [r4, #0]
 80144f4:	f8c0 9000 	str.w	r9, [r0]
 80144f8:	4604      	mov	r4, r0
 80144fa:	e7e4      	b.n	80144c6 <__pow5mult+0x6a>
 80144fc:	4638      	mov	r0, r7
 80144fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014502:	bf00      	nop
 8014504:	08016368 	.word	0x08016368
 8014508:	08016112 	.word	0x08016112
 801450c:	08016218 	.word	0x08016218

08014510 <__lshift>:
 8014510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014514:	460c      	mov	r4, r1
 8014516:	6849      	ldr	r1, [r1, #4]
 8014518:	6923      	ldr	r3, [r4, #16]
 801451a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801451e:	68a3      	ldr	r3, [r4, #8]
 8014520:	4607      	mov	r7, r0
 8014522:	4691      	mov	r9, r2
 8014524:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014528:	f108 0601 	add.w	r6, r8, #1
 801452c:	42b3      	cmp	r3, r6
 801452e:	db0b      	blt.n	8014548 <__lshift+0x38>
 8014530:	4638      	mov	r0, r7
 8014532:	f7ff fd91 	bl	8014058 <_Balloc>
 8014536:	4605      	mov	r5, r0
 8014538:	b948      	cbnz	r0, 801454e <__lshift+0x3e>
 801453a:	4602      	mov	r2, r0
 801453c:	4b28      	ldr	r3, [pc, #160]	; (80145e0 <__lshift+0xd0>)
 801453e:	4829      	ldr	r0, [pc, #164]	; (80145e4 <__lshift+0xd4>)
 8014540:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014544:	f7fe fa6a 	bl	8012a1c <__assert_func>
 8014548:	3101      	adds	r1, #1
 801454a:	005b      	lsls	r3, r3, #1
 801454c:	e7ee      	b.n	801452c <__lshift+0x1c>
 801454e:	2300      	movs	r3, #0
 8014550:	f100 0114 	add.w	r1, r0, #20
 8014554:	f100 0210 	add.w	r2, r0, #16
 8014558:	4618      	mov	r0, r3
 801455a:	4553      	cmp	r3, sl
 801455c:	db33      	blt.n	80145c6 <__lshift+0xb6>
 801455e:	6920      	ldr	r0, [r4, #16]
 8014560:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014564:	f104 0314 	add.w	r3, r4, #20
 8014568:	f019 091f 	ands.w	r9, r9, #31
 801456c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014570:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014574:	d02b      	beq.n	80145ce <__lshift+0xbe>
 8014576:	f1c9 0e20 	rsb	lr, r9, #32
 801457a:	468a      	mov	sl, r1
 801457c:	2200      	movs	r2, #0
 801457e:	6818      	ldr	r0, [r3, #0]
 8014580:	fa00 f009 	lsl.w	r0, r0, r9
 8014584:	4302      	orrs	r2, r0
 8014586:	f84a 2b04 	str.w	r2, [sl], #4
 801458a:	f853 2b04 	ldr.w	r2, [r3], #4
 801458e:	459c      	cmp	ip, r3
 8014590:	fa22 f20e 	lsr.w	r2, r2, lr
 8014594:	d8f3      	bhi.n	801457e <__lshift+0x6e>
 8014596:	ebac 0304 	sub.w	r3, ip, r4
 801459a:	3b15      	subs	r3, #21
 801459c:	f023 0303 	bic.w	r3, r3, #3
 80145a0:	3304      	adds	r3, #4
 80145a2:	f104 0015 	add.w	r0, r4, #21
 80145a6:	4584      	cmp	ip, r0
 80145a8:	bf38      	it	cc
 80145aa:	2304      	movcc	r3, #4
 80145ac:	50ca      	str	r2, [r1, r3]
 80145ae:	b10a      	cbz	r2, 80145b4 <__lshift+0xa4>
 80145b0:	f108 0602 	add.w	r6, r8, #2
 80145b4:	3e01      	subs	r6, #1
 80145b6:	4638      	mov	r0, r7
 80145b8:	612e      	str	r6, [r5, #16]
 80145ba:	4621      	mov	r1, r4
 80145bc:	f7ff fd8c 	bl	80140d8 <_Bfree>
 80145c0:	4628      	mov	r0, r5
 80145c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80145ca:	3301      	adds	r3, #1
 80145cc:	e7c5      	b.n	801455a <__lshift+0x4a>
 80145ce:	3904      	subs	r1, #4
 80145d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80145d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80145d8:	459c      	cmp	ip, r3
 80145da:	d8f9      	bhi.n	80145d0 <__lshift+0xc0>
 80145dc:	e7ea      	b.n	80145b4 <__lshift+0xa4>
 80145de:	bf00      	nop
 80145e0:	08016188 	.word	0x08016188
 80145e4:	08016218 	.word	0x08016218

080145e8 <__mcmp>:
 80145e8:	b530      	push	{r4, r5, lr}
 80145ea:	6902      	ldr	r2, [r0, #16]
 80145ec:	690c      	ldr	r4, [r1, #16]
 80145ee:	1b12      	subs	r2, r2, r4
 80145f0:	d10e      	bne.n	8014610 <__mcmp+0x28>
 80145f2:	f100 0314 	add.w	r3, r0, #20
 80145f6:	3114      	adds	r1, #20
 80145f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80145fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014600:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014604:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014608:	42a5      	cmp	r5, r4
 801460a:	d003      	beq.n	8014614 <__mcmp+0x2c>
 801460c:	d305      	bcc.n	801461a <__mcmp+0x32>
 801460e:	2201      	movs	r2, #1
 8014610:	4610      	mov	r0, r2
 8014612:	bd30      	pop	{r4, r5, pc}
 8014614:	4283      	cmp	r3, r0
 8014616:	d3f3      	bcc.n	8014600 <__mcmp+0x18>
 8014618:	e7fa      	b.n	8014610 <__mcmp+0x28>
 801461a:	f04f 32ff 	mov.w	r2, #4294967295
 801461e:	e7f7      	b.n	8014610 <__mcmp+0x28>

08014620 <__mdiff>:
 8014620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014624:	460c      	mov	r4, r1
 8014626:	4606      	mov	r6, r0
 8014628:	4611      	mov	r1, r2
 801462a:	4620      	mov	r0, r4
 801462c:	4617      	mov	r7, r2
 801462e:	f7ff ffdb 	bl	80145e8 <__mcmp>
 8014632:	1e05      	subs	r5, r0, #0
 8014634:	d110      	bne.n	8014658 <__mdiff+0x38>
 8014636:	4629      	mov	r1, r5
 8014638:	4630      	mov	r0, r6
 801463a:	f7ff fd0d 	bl	8014058 <_Balloc>
 801463e:	b930      	cbnz	r0, 801464e <__mdiff+0x2e>
 8014640:	4b39      	ldr	r3, [pc, #228]	; (8014728 <__mdiff+0x108>)
 8014642:	4602      	mov	r2, r0
 8014644:	f240 2132 	movw	r1, #562	; 0x232
 8014648:	4838      	ldr	r0, [pc, #224]	; (801472c <__mdiff+0x10c>)
 801464a:	f7fe f9e7 	bl	8012a1c <__assert_func>
 801464e:	2301      	movs	r3, #1
 8014650:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014658:	bfa4      	itt	ge
 801465a:	463b      	movge	r3, r7
 801465c:	4627      	movge	r7, r4
 801465e:	4630      	mov	r0, r6
 8014660:	6879      	ldr	r1, [r7, #4]
 8014662:	bfa6      	itte	ge
 8014664:	461c      	movge	r4, r3
 8014666:	2500      	movge	r5, #0
 8014668:	2501      	movlt	r5, #1
 801466a:	f7ff fcf5 	bl	8014058 <_Balloc>
 801466e:	b920      	cbnz	r0, 801467a <__mdiff+0x5a>
 8014670:	4b2d      	ldr	r3, [pc, #180]	; (8014728 <__mdiff+0x108>)
 8014672:	4602      	mov	r2, r0
 8014674:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014678:	e7e6      	b.n	8014648 <__mdiff+0x28>
 801467a:	693e      	ldr	r6, [r7, #16]
 801467c:	60c5      	str	r5, [r0, #12]
 801467e:	6925      	ldr	r5, [r4, #16]
 8014680:	f107 0114 	add.w	r1, r7, #20
 8014684:	f104 0914 	add.w	r9, r4, #20
 8014688:	f100 0e14 	add.w	lr, r0, #20
 801468c:	f107 0210 	add.w	r2, r7, #16
 8014690:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014694:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014698:	46f2      	mov	sl, lr
 801469a:	2700      	movs	r7, #0
 801469c:	f859 3b04 	ldr.w	r3, [r9], #4
 80146a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80146a4:	fa1f f883 	uxth.w	r8, r3
 80146a8:	fa17 f78b 	uxtah	r7, r7, fp
 80146ac:	0c1b      	lsrs	r3, r3, #16
 80146ae:	eba7 0808 	sub.w	r8, r7, r8
 80146b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80146b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80146ba:	fa1f f888 	uxth.w	r8, r8
 80146be:	141f      	asrs	r7, r3, #16
 80146c0:	454d      	cmp	r5, r9
 80146c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80146c6:	f84a 3b04 	str.w	r3, [sl], #4
 80146ca:	d8e7      	bhi.n	801469c <__mdiff+0x7c>
 80146cc:	1b2b      	subs	r3, r5, r4
 80146ce:	3b15      	subs	r3, #21
 80146d0:	f023 0303 	bic.w	r3, r3, #3
 80146d4:	3304      	adds	r3, #4
 80146d6:	3415      	adds	r4, #21
 80146d8:	42a5      	cmp	r5, r4
 80146da:	bf38      	it	cc
 80146dc:	2304      	movcc	r3, #4
 80146de:	4419      	add	r1, r3
 80146e0:	4473      	add	r3, lr
 80146e2:	469e      	mov	lr, r3
 80146e4:	460d      	mov	r5, r1
 80146e6:	4565      	cmp	r5, ip
 80146e8:	d30e      	bcc.n	8014708 <__mdiff+0xe8>
 80146ea:	f10c 0203 	add.w	r2, ip, #3
 80146ee:	1a52      	subs	r2, r2, r1
 80146f0:	f022 0203 	bic.w	r2, r2, #3
 80146f4:	3903      	subs	r1, #3
 80146f6:	458c      	cmp	ip, r1
 80146f8:	bf38      	it	cc
 80146fa:	2200      	movcc	r2, #0
 80146fc:	441a      	add	r2, r3
 80146fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014702:	b17b      	cbz	r3, 8014724 <__mdiff+0x104>
 8014704:	6106      	str	r6, [r0, #16]
 8014706:	e7a5      	b.n	8014654 <__mdiff+0x34>
 8014708:	f855 8b04 	ldr.w	r8, [r5], #4
 801470c:	fa17 f488 	uxtah	r4, r7, r8
 8014710:	1422      	asrs	r2, r4, #16
 8014712:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014716:	b2a4      	uxth	r4, r4
 8014718:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801471c:	f84e 4b04 	str.w	r4, [lr], #4
 8014720:	1417      	asrs	r7, r2, #16
 8014722:	e7e0      	b.n	80146e6 <__mdiff+0xc6>
 8014724:	3e01      	subs	r6, #1
 8014726:	e7ea      	b.n	80146fe <__mdiff+0xde>
 8014728:	08016188 	.word	0x08016188
 801472c:	08016218 	.word	0x08016218

08014730 <__ulp>:
 8014730:	b082      	sub	sp, #8
 8014732:	ed8d 0b00 	vstr	d0, [sp]
 8014736:	9b01      	ldr	r3, [sp, #4]
 8014738:	4912      	ldr	r1, [pc, #72]	; (8014784 <__ulp+0x54>)
 801473a:	4019      	ands	r1, r3
 801473c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8014740:	2900      	cmp	r1, #0
 8014742:	dd05      	ble.n	8014750 <__ulp+0x20>
 8014744:	2200      	movs	r2, #0
 8014746:	460b      	mov	r3, r1
 8014748:	ec43 2b10 	vmov	d0, r2, r3
 801474c:	b002      	add	sp, #8
 801474e:	4770      	bx	lr
 8014750:	4249      	negs	r1, r1
 8014752:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8014756:	ea4f 5021 	mov.w	r0, r1, asr #20
 801475a:	f04f 0200 	mov.w	r2, #0
 801475e:	f04f 0300 	mov.w	r3, #0
 8014762:	da04      	bge.n	801476e <__ulp+0x3e>
 8014764:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8014768:	fa41 f300 	asr.w	r3, r1, r0
 801476c:	e7ec      	b.n	8014748 <__ulp+0x18>
 801476e:	f1a0 0114 	sub.w	r1, r0, #20
 8014772:	291e      	cmp	r1, #30
 8014774:	bfda      	itte	le
 8014776:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801477a:	fa20 f101 	lsrle.w	r1, r0, r1
 801477e:	2101      	movgt	r1, #1
 8014780:	460a      	mov	r2, r1
 8014782:	e7e1      	b.n	8014748 <__ulp+0x18>
 8014784:	7ff00000 	.word	0x7ff00000

08014788 <__b2d>:
 8014788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801478a:	6905      	ldr	r5, [r0, #16]
 801478c:	f100 0714 	add.w	r7, r0, #20
 8014790:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014794:	1f2e      	subs	r6, r5, #4
 8014796:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801479a:	4620      	mov	r0, r4
 801479c:	f7ff fd52 	bl	8014244 <__hi0bits>
 80147a0:	f1c0 0320 	rsb	r3, r0, #32
 80147a4:	280a      	cmp	r0, #10
 80147a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014824 <__b2d+0x9c>
 80147aa:	600b      	str	r3, [r1, #0]
 80147ac:	dc14      	bgt.n	80147d8 <__b2d+0x50>
 80147ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80147b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80147b6:	42b7      	cmp	r7, r6
 80147b8:	ea41 030c 	orr.w	r3, r1, ip
 80147bc:	bf34      	ite	cc
 80147be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80147c2:	2100      	movcs	r1, #0
 80147c4:	3015      	adds	r0, #21
 80147c6:	fa04 f000 	lsl.w	r0, r4, r0
 80147ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80147ce:	ea40 0201 	orr.w	r2, r0, r1
 80147d2:	ec43 2b10 	vmov	d0, r2, r3
 80147d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147d8:	42b7      	cmp	r7, r6
 80147da:	bf3a      	itte	cc
 80147dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80147e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80147e4:	2100      	movcs	r1, #0
 80147e6:	380b      	subs	r0, #11
 80147e8:	d017      	beq.n	801481a <__b2d+0x92>
 80147ea:	f1c0 0c20 	rsb	ip, r0, #32
 80147ee:	fa04 f500 	lsl.w	r5, r4, r0
 80147f2:	42be      	cmp	r6, r7
 80147f4:	fa21 f40c 	lsr.w	r4, r1, ip
 80147f8:	ea45 0504 	orr.w	r5, r5, r4
 80147fc:	bf8c      	ite	hi
 80147fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014802:	2400      	movls	r4, #0
 8014804:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014808:	fa01 f000 	lsl.w	r0, r1, r0
 801480c:	fa24 f40c 	lsr.w	r4, r4, ip
 8014810:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014814:	ea40 0204 	orr.w	r2, r0, r4
 8014818:	e7db      	b.n	80147d2 <__b2d+0x4a>
 801481a:	ea44 030c 	orr.w	r3, r4, ip
 801481e:	460a      	mov	r2, r1
 8014820:	e7d7      	b.n	80147d2 <__b2d+0x4a>
 8014822:	bf00      	nop
 8014824:	3ff00000 	.word	0x3ff00000

08014828 <__d2b>:
 8014828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801482c:	4689      	mov	r9, r1
 801482e:	2101      	movs	r1, #1
 8014830:	ec57 6b10 	vmov	r6, r7, d0
 8014834:	4690      	mov	r8, r2
 8014836:	f7ff fc0f 	bl	8014058 <_Balloc>
 801483a:	4604      	mov	r4, r0
 801483c:	b930      	cbnz	r0, 801484c <__d2b+0x24>
 801483e:	4602      	mov	r2, r0
 8014840:	4b25      	ldr	r3, [pc, #148]	; (80148d8 <__d2b+0xb0>)
 8014842:	4826      	ldr	r0, [pc, #152]	; (80148dc <__d2b+0xb4>)
 8014844:	f240 310a 	movw	r1, #778	; 0x30a
 8014848:	f7fe f8e8 	bl	8012a1c <__assert_func>
 801484c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014854:	bb35      	cbnz	r5, 80148a4 <__d2b+0x7c>
 8014856:	2e00      	cmp	r6, #0
 8014858:	9301      	str	r3, [sp, #4]
 801485a:	d028      	beq.n	80148ae <__d2b+0x86>
 801485c:	4668      	mov	r0, sp
 801485e:	9600      	str	r6, [sp, #0]
 8014860:	f7ff fd10 	bl	8014284 <__lo0bits>
 8014864:	9900      	ldr	r1, [sp, #0]
 8014866:	b300      	cbz	r0, 80148aa <__d2b+0x82>
 8014868:	9a01      	ldr	r2, [sp, #4]
 801486a:	f1c0 0320 	rsb	r3, r0, #32
 801486e:	fa02 f303 	lsl.w	r3, r2, r3
 8014872:	430b      	orrs	r3, r1
 8014874:	40c2      	lsrs	r2, r0
 8014876:	6163      	str	r3, [r4, #20]
 8014878:	9201      	str	r2, [sp, #4]
 801487a:	9b01      	ldr	r3, [sp, #4]
 801487c:	61a3      	str	r3, [r4, #24]
 801487e:	2b00      	cmp	r3, #0
 8014880:	bf14      	ite	ne
 8014882:	2202      	movne	r2, #2
 8014884:	2201      	moveq	r2, #1
 8014886:	6122      	str	r2, [r4, #16]
 8014888:	b1d5      	cbz	r5, 80148c0 <__d2b+0x98>
 801488a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801488e:	4405      	add	r5, r0
 8014890:	f8c9 5000 	str.w	r5, [r9]
 8014894:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014898:	f8c8 0000 	str.w	r0, [r8]
 801489c:	4620      	mov	r0, r4
 801489e:	b003      	add	sp, #12
 80148a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80148a8:	e7d5      	b.n	8014856 <__d2b+0x2e>
 80148aa:	6161      	str	r1, [r4, #20]
 80148ac:	e7e5      	b.n	801487a <__d2b+0x52>
 80148ae:	a801      	add	r0, sp, #4
 80148b0:	f7ff fce8 	bl	8014284 <__lo0bits>
 80148b4:	9b01      	ldr	r3, [sp, #4]
 80148b6:	6163      	str	r3, [r4, #20]
 80148b8:	2201      	movs	r2, #1
 80148ba:	6122      	str	r2, [r4, #16]
 80148bc:	3020      	adds	r0, #32
 80148be:	e7e3      	b.n	8014888 <__d2b+0x60>
 80148c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80148c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80148c8:	f8c9 0000 	str.w	r0, [r9]
 80148cc:	6918      	ldr	r0, [r3, #16]
 80148ce:	f7ff fcb9 	bl	8014244 <__hi0bits>
 80148d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80148d6:	e7df      	b.n	8014898 <__d2b+0x70>
 80148d8:	08016188 	.word	0x08016188
 80148dc:	08016218 	.word	0x08016218

080148e0 <__ratio>:
 80148e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148e4:	4688      	mov	r8, r1
 80148e6:	4669      	mov	r1, sp
 80148e8:	4681      	mov	r9, r0
 80148ea:	f7ff ff4d 	bl	8014788 <__b2d>
 80148ee:	a901      	add	r1, sp, #4
 80148f0:	4640      	mov	r0, r8
 80148f2:	ec55 4b10 	vmov	r4, r5, d0
 80148f6:	f7ff ff47 	bl	8014788 <__b2d>
 80148fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80148fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014902:	eba3 0c02 	sub.w	ip, r3, r2
 8014906:	e9dd 3200 	ldrd	r3, r2, [sp]
 801490a:	1a9b      	subs	r3, r3, r2
 801490c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014910:	ec51 0b10 	vmov	r0, r1, d0
 8014914:	2b00      	cmp	r3, #0
 8014916:	bfd6      	itet	le
 8014918:	460a      	movle	r2, r1
 801491a:	462a      	movgt	r2, r5
 801491c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014920:	468b      	mov	fp, r1
 8014922:	462f      	mov	r7, r5
 8014924:	bfd4      	ite	le
 8014926:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801492a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801492e:	4620      	mov	r0, r4
 8014930:	ee10 2a10 	vmov	r2, s0
 8014934:	465b      	mov	r3, fp
 8014936:	4639      	mov	r1, r7
 8014938:	f7eb ff98 	bl	800086c <__aeabi_ddiv>
 801493c:	ec41 0b10 	vmov	d0, r0, r1
 8014940:	b003      	add	sp, #12
 8014942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014946 <__copybits>:
 8014946:	3901      	subs	r1, #1
 8014948:	b570      	push	{r4, r5, r6, lr}
 801494a:	1149      	asrs	r1, r1, #5
 801494c:	6914      	ldr	r4, [r2, #16]
 801494e:	3101      	adds	r1, #1
 8014950:	f102 0314 	add.w	r3, r2, #20
 8014954:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014958:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801495c:	1f05      	subs	r5, r0, #4
 801495e:	42a3      	cmp	r3, r4
 8014960:	d30c      	bcc.n	801497c <__copybits+0x36>
 8014962:	1aa3      	subs	r3, r4, r2
 8014964:	3b11      	subs	r3, #17
 8014966:	f023 0303 	bic.w	r3, r3, #3
 801496a:	3211      	adds	r2, #17
 801496c:	42a2      	cmp	r2, r4
 801496e:	bf88      	it	hi
 8014970:	2300      	movhi	r3, #0
 8014972:	4418      	add	r0, r3
 8014974:	2300      	movs	r3, #0
 8014976:	4288      	cmp	r0, r1
 8014978:	d305      	bcc.n	8014986 <__copybits+0x40>
 801497a:	bd70      	pop	{r4, r5, r6, pc}
 801497c:	f853 6b04 	ldr.w	r6, [r3], #4
 8014980:	f845 6f04 	str.w	r6, [r5, #4]!
 8014984:	e7eb      	b.n	801495e <__copybits+0x18>
 8014986:	f840 3b04 	str.w	r3, [r0], #4
 801498a:	e7f4      	b.n	8014976 <__copybits+0x30>

0801498c <__any_on>:
 801498c:	f100 0214 	add.w	r2, r0, #20
 8014990:	6900      	ldr	r0, [r0, #16]
 8014992:	114b      	asrs	r3, r1, #5
 8014994:	4298      	cmp	r0, r3
 8014996:	b510      	push	{r4, lr}
 8014998:	db11      	blt.n	80149be <__any_on+0x32>
 801499a:	dd0a      	ble.n	80149b2 <__any_on+0x26>
 801499c:	f011 011f 	ands.w	r1, r1, #31
 80149a0:	d007      	beq.n	80149b2 <__any_on+0x26>
 80149a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80149a6:	fa24 f001 	lsr.w	r0, r4, r1
 80149aa:	fa00 f101 	lsl.w	r1, r0, r1
 80149ae:	428c      	cmp	r4, r1
 80149b0:	d10b      	bne.n	80149ca <__any_on+0x3e>
 80149b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80149b6:	4293      	cmp	r3, r2
 80149b8:	d803      	bhi.n	80149c2 <__any_on+0x36>
 80149ba:	2000      	movs	r0, #0
 80149bc:	bd10      	pop	{r4, pc}
 80149be:	4603      	mov	r3, r0
 80149c0:	e7f7      	b.n	80149b2 <__any_on+0x26>
 80149c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80149c6:	2900      	cmp	r1, #0
 80149c8:	d0f5      	beq.n	80149b6 <__any_on+0x2a>
 80149ca:	2001      	movs	r0, #1
 80149cc:	e7f6      	b.n	80149bc <__any_on+0x30>

080149ce <_calloc_r>:
 80149ce:	b513      	push	{r0, r1, r4, lr}
 80149d0:	434a      	muls	r2, r1
 80149d2:	4611      	mov	r1, r2
 80149d4:	9201      	str	r2, [sp, #4]
 80149d6:	f7fc f8a3 	bl	8010b20 <_malloc_r>
 80149da:	4604      	mov	r4, r0
 80149dc:	b118      	cbz	r0, 80149e6 <_calloc_r+0x18>
 80149de:	9a01      	ldr	r2, [sp, #4]
 80149e0:	2100      	movs	r1, #0
 80149e2:	f7fc f845 	bl	8010a70 <memset>
 80149e6:	4620      	mov	r0, r4
 80149e8:	b002      	add	sp, #8
 80149ea:	bd10      	pop	{r4, pc}

080149ec <_realloc_r>:
 80149ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ee:	4607      	mov	r7, r0
 80149f0:	4614      	mov	r4, r2
 80149f2:	460e      	mov	r6, r1
 80149f4:	b921      	cbnz	r1, 8014a00 <_realloc_r+0x14>
 80149f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80149fa:	4611      	mov	r1, r2
 80149fc:	f7fc b890 	b.w	8010b20 <_malloc_r>
 8014a00:	b922      	cbnz	r2, 8014a0c <_realloc_r+0x20>
 8014a02:	f7fc f83d 	bl	8010a80 <_free_r>
 8014a06:	4625      	mov	r5, r4
 8014a08:	4628      	mov	r0, r5
 8014a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a0c:	f000 ffaa 	bl	8015964 <_malloc_usable_size_r>
 8014a10:	42a0      	cmp	r0, r4
 8014a12:	d20f      	bcs.n	8014a34 <_realloc_r+0x48>
 8014a14:	4621      	mov	r1, r4
 8014a16:	4638      	mov	r0, r7
 8014a18:	f7fc f882 	bl	8010b20 <_malloc_r>
 8014a1c:	4605      	mov	r5, r0
 8014a1e:	2800      	cmp	r0, #0
 8014a20:	d0f2      	beq.n	8014a08 <_realloc_r+0x1c>
 8014a22:	4631      	mov	r1, r6
 8014a24:	4622      	mov	r2, r4
 8014a26:	f7fb fffb 	bl	8010a20 <memcpy>
 8014a2a:	4631      	mov	r1, r6
 8014a2c:	4638      	mov	r0, r7
 8014a2e:	f7fc f827 	bl	8010a80 <_free_r>
 8014a32:	e7e9      	b.n	8014a08 <_realloc_r+0x1c>
 8014a34:	4635      	mov	r5, r6
 8014a36:	e7e7      	b.n	8014a08 <_realloc_r+0x1c>

08014a38 <__ssputs_r>:
 8014a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a3c:	688e      	ldr	r6, [r1, #8]
 8014a3e:	429e      	cmp	r6, r3
 8014a40:	4682      	mov	sl, r0
 8014a42:	460c      	mov	r4, r1
 8014a44:	4690      	mov	r8, r2
 8014a46:	461f      	mov	r7, r3
 8014a48:	d838      	bhi.n	8014abc <__ssputs_r+0x84>
 8014a4a:	898a      	ldrh	r2, [r1, #12]
 8014a4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014a50:	d032      	beq.n	8014ab8 <__ssputs_r+0x80>
 8014a52:	6825      	ldr	r5, [r4, #0]
 8014a54:	6909      	ldr	r1, [r1, #16]
 8014a56:	eba5 0901 	sub.w	r9, r5, r1
 8014a5a:	6965      	ldr	r5, [r4, #20]
 8014a5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a64:	3301      	adds	r3, #1
 8014a66:	444b      	add	r3, r9
 8014a68:	106d      	asrs	r5, r5, #1
 8014a6a:	429d      	cmp	r5, r3
 8014a6c:	bf38      	it	cc
 8014a6e:	461d      	movcc	r5, r3
 8014a70:	0553      	lsls	r3, r2, #21
 8014a72:	d531      	bpl.n	8014ad8 <__ssputs_r+0xa0>
 8014a74:	4629      	mov	r1, r5
 8014a76:	f7fc f853 	bl	8010b20 <_malloc_r>
 8014a7a:	4606      	mov	r6, r0
 8014a7c:	b950      	cbnz	r0, 8014a94 <__ssputs_r+0x5c>
 8014a7e:	230c      	movs	r3, #12
 8014a80:	f8ca 3000 	str.w	r3, [sl]
 8014a84:	89a3      	ldrh	r3, [r4, #12]
 8014a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a8a:	81a3      	strh	r3, [r4, #12]
 8014a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a94:	6921      	ldr	r1, [r4, #16]
 8014a96:	464a      	mov	r2, r9
 8014a98:	f7fb ffc2 	bl	8010a20 <memcpy>
 8014a9c:	89a3      	ldrh	r3, [r4, #12]
 8014a9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014aa6:	81a3      	strh	r3, [r4, #12]
 8014aa8:	6126      	str	r6, [r4, #16]
 8014aaa:	6165      	str	r5, [r4, #20]
 8014aac:	444e      	add	r6, r9
 8014aae:	eba5 0509 	sub.w	r5, r5, r9
 8014ab2:	6026      	str	r6, [r4, #0]
 8014ab4:	60a5      	str	r5, [r4, #8]
 8014ab6:	463e      	mov	r6, r7
 8014ab8:	42be      	cmp	r6, r7
 8014aba:	d900      	bls.n	8014abe <__ssputs_r+0x86>
 8014abc:	463e      	mov	r6, r7
 8014abe:	4632      	mov	r2, r6
 8014ac0:	6820      	ldr	r0, [r4, #0]
 8014ac2:	4641      	mov	r1, r8
 8014ac4:	f7fb ffba 	bl	8010a3c <memmove>
 8014ac8:	68a3      	ldr	r3, [r4, #8]
 8014aca:	6822      	ldr	r2, [r4, #0]
 8014acc:	1b9b      	subs	r3, r3, r6
 8014ace:	4432      	add	r2, r6
 8014ad0:	60a3      	str	r3, [r4, #8]
 8014ad2:	6022      	str	r2, [r4, #0]
 8014ad4:	2000      	movs	r0, #0
 8014ad6:	e7db      	b.n	8014a90 <__ssputs_r+0x58>
 8014ad8:	462a      	mov	r2, r5
 8014ada:	f7ff ff87 	bl	80149ec <_realloc_r>
 8014ade:	4606      	mov	r6, r0
 8014ae0:	2800      	cmp	r0, #0
 8014ae2:	d1e1      	bne.n	8014aa8 <__ssputs_r+0x70>
 8014ae4:	6921      	ldr	r1, [r4, #16]
 8014ae6:	4650      	mov	r0, sl
 8014ae8:	f7fb ffca 	bl	8010a80 <_free_r>
 8014aec:	e7c7      	b.n	8014a7e <__ssputs_r+0x46>
	...

08014af0 <_svfiprintf_r>:
 8014af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014af4:	4698      	mov	r8, r3
 8014af6:	898b      	ldrh	r3, [r1, #12]
 8014af8:	061b      	lsls	r3, r3, #24
 8014afa:	b09d      	sub	sp, #116	; 0x74
 8014afc:	4607      	mov	r7, r0
 8014afe:	460d      	mov	r5, r1
 8014b00:	4614      	mov	r4, r2
 8014b02:	d50e      	bpl.n	8014b22 <_svfiprintf_r+0x32>
 8014b04:	690b      	ldr	r3, [r1, #16]
 8014b06:	b963      	cbnz	r3, 8014b22 <_svfiprintf_r+0x32>
 8014b08:	2140      	movs	r1, #64	; 0x40
 8014b0a:	f7fc f809 	bl	8010b20 <_malloc_r>
 8014b0e:	6028      	str	r0, [r5, #0]
 8014b10:	6128      	str	r0, [r5, #16]
 8014b12:	b920      	cbnz	r0, 8014b1e <_svfiprintf_r+0x2e>
 8014b14:	230c      	movs	r3, #12
 8014b16:	603b      	str	r3, [r7, #0]
 8014b18:	f04f 30ff 	mov.w	r0, #4294967295
 8014b1c:	e0d1      	b.n	8014cc2 <_svfiprintf_r+0x1d2>
 8014b1e:	2340      	movs	r3, #64	; 0x40
 8014b20:	616b      	str	r3, [r5, #20]
 8014b22:	2300      	movs	r3, #0
 8014b24:	9309      	str	r3, [sp, #36]	; 0x24
 8014b26:	2320      	movs	r3, #32
 8014b28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014b2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b30:	2330      	movs	r3, #48	; 0x30
 8014b32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014cdc <_svfiprintf_r+0x1ec>
 8014b36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b3a:	f04f 0901 	mov.w	r9, #1
 8014b3e:	4623      	mov	r3, r4
 8014b40:	469a      	mov	sl, r3
 8014b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b46:	b10a      	cbz	r2, 8014b4c <_svfiprintf_r+0x5c>
 8014b48:	2a25      	cmp	r2, #37	; 0x25
 8014b4a:	d1f9      	bne.n	8014b40 <_svfiprintf_r+0x50>
 8014b4c:	ebba 0b04 	subs.w	fp, sl, r4
 8014b50:	d00b      	beq.n	8014b6a <_svfiprintf_r+0x7a>
 8014b52:	465b      	mov	r3, fp
 8014b54:	4622      	mov	r2, r4
 8014b56:	4629      	mov	r1, r5
 8014b58:	4638      	mov	r0, r7
 8014b5a:	f7ff ff6d 	bl	8014a38 <__ssputs_r>
 8014b5e:	3001      	adds	r0, #1
 8014b60:	f000 80aa 	beq.w	8014cb8 <_svfiprintf_r+0x1c8>
 8014b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b66:	445a      	add	r2, fp
 8014b68:	9209      	str	r2, [sp, #36]	; 0x24
 8014b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	f000 80a2 	beq.w	8014cb8 <_svfiprintf_r+0x1c8>
 8014b74:	2300      	movs	r3, #0
 8014b76:	f04f 32ff 	mov.w	r2, #4294967295
 8014b7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b7e:	f10a 0a01 	add.w	sl, sl, #1
 8014b82:	9304      	str	r3, [sp, #16]
 8014b84:	9307      	str	r3, [sp, #28]
 8014b86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b8a:	931a      	str	r3, [sp, #104]	; 0x68
 8014b8c:	4654      	mov	r4, sl
 8014b8e:	2205      	movs	r2, #5
 8014b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b94:	4851      	ldr	r0, [pc, #324]	; (8014cdc <_svfiprintf_r+0x1ec>)
 8014b96:	f7eb fb33 	bl	8000200 <memchr>
 8014b9a:	9a04      	ldr	r2, [sp, #16]
 8014b9c:	b9d8      	cbnz	r0, 8014bd6 <_svfiprintf_r+0xe6>
 8014b9e:	06d0      	lsls	r0, r2, #27
 8014ba0:	bf44      	itt	mi
 8014ba2:	2320      	movmi	r3, #32
 8014ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ba8:	0711      	lsls	r1, r2, #28
 8014baa:	bf44      	itt	mi
 8014bac:	232b      	movmi	r3, #43	; 0x2b
 8014bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8014bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8014bb8:	d015      	beq.n	8014be6 <_svfiprintf_r+0xf6>
 8014bba:	9a07      	ldr	r2, [sp, #28]
 8014bbc:	4654      	mov	r4, sl
 8014bbe:	2000      	movs	r0, #0
 8014bc0:	f04f 0c0a 	mov.w	ip, #10
 8014bc4:	4621      	mov	r1, r4
 8014bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014bca:	3b30      	subs	r3, #48	; 0x30
 8014bcc:	2b09      	cmp	r3, #9
 8014bce:	d94e      	bls.n	8014c6e <_svfiprintf_r+0x17e>
 8014bd0:	b1b0      	cbz	r0, 8014c00 <_svfiprintf_r+0x110>
 8014bd2:	9207      	str	r2, [sp, #28]
 8014bd4:	e014      	b.n	8014c00 <_svfiprintf_r+0x110>
 8014bd6:	eba0 0308 	sub.w	r3, r0, r8
 8014bda:	fa09 f303 	lsl.w	r3, r9, r3
 8014bde:	4313      	orrs	r3, r2
 8014be0:	9304      	str	r3, [sp, #16]
 8014be2:	46a2      	mov	sl, r4
 8014be4:	e7d2      	b.n	8014b8c <_svfiprintf_r+0x9c>
 8014be6:	9b03      	ldr	r3, [sp, #12]
 8014be8:	1d19      	adds	r1, r3, #4
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	9103      	str	r1, [sp, #12]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	bfbb      	ittet	lt
 8014bf2:	425b      	neglt	r3, r3
 8014bf4:	f042 0202 	orrlt.w	r2, r2, #2
 8014bf8:	9307      	strge	r3, [sp, #28]
 8014bfa:	9307      	strlt	r3, [sp, #28]
 8014bfc:	bfb8      	it	lt
 8014bfe:	9204      	strlt	r2, [sp, #16]
 8014c00:	7823      	ldrb	r3, [r4, #0]
 8014c02:	2b2e      	cmp	r3, #46	; 0x2e
 8014c04:	d10c      	bne.n	8014c20 <_svfiprintf_r+0x130>
 8014c06:	7863      	ldrb	r3, [r4, #1]
 8014c08:	2b2a      	cmp	r3, #42	; 0x2a
 8014c0a:	d135      	bne.n	8014c78 <_svfiprintf_r+0x188>
 8014c0c:	9b03      	ldr	r3, [sp, #12]
 8014c0e:	1d1a      	adds	r2, r3, #4
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	9203      	str	r2, [sp, #12]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	bfb8      	it	lt
 8014c18:	f04f 33ff 	movlt.w	r3, #4294967295
 8014c1c:	3402      	adds	r4, #2
 8014c1e:	9305      	str	r3, [sp, #20]
 8014c20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014cec <_svfiprintf_r+0x1fc>
 8014c24:	7821      	ldrb	r1, [r4, #0]
 8014c26:	2203      	movs	r2, #3
 8014c28:	4650      	mov	r0, sl
 8014c2a:	f7eb fae9 	bl	8000200 <memchr>
 8014c2e:	b140      	cbz	r0, 8014c42 <_svfiprintf_r+0x152>
 8014c30:	2340      	movs	r3, #64	; 0x40
 8014c32:	eba0 000a 	sub.w	r0, r0, sl
 8014c36:	fa03 f000 	lsl.w	r0, r3, r0
 8014c3a:	9b04      	ldr	r3, [sp, #16]
 8014c3c:	4303      	orrs	r3, r0
 8014c3e:	3401      	adds	r4, #1
 8014c40:	9304      	str	r3, [sp, #16]
 8014c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c46:	4826      	ldr	r0, [pc, #152]	; (8014ce0 <_svfiprintf_r+0x1f0>)
 8014c48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c4c:	2206      	movs	r2, #6
 8014c4e:	f7eb fad7 	bl	8000200 <memchr>
 8014c52:	2800      	cmp	r0, #0
 8014c54:	d038      	beq.n	8014cc8 <_svfiprintf_r+0x1d8>
 8014c56:	4b23      	ldr	r3, [pc, #140]	; (8014ce4 <_svfiprintf_r+0x1f4>)
 8014c58:	bb1b      	cbnz	r3, 8014ca2 <_svfiprintf_r+0x1b2>
 8014c5a:	9b03      	ldr	r3, [sp, #12]
 8014c5c:	3307      	adds	r3, #7
 8014c5e:	f023 0307 	bic.w	r3, r3, #7
 8014c62:	3308      	adds	r3, #8
 8014c64:	9303      	str	r3, [sp, #12]
 8014c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c68:	4433      	add	r3, r6
 8014c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8014c6c:	e767      	b.n	8014b3e <_svfiprintf_r+0x4e>
 8014c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c72:	460c      	mov	r4, r1
 8014c74:	2001      	movs	r0, #1
 8014c76:	e7a5      	b.n	8014bc4 <_svfiprintf_r+0xd4>
 8014c78:	2300      	movs	r3, #0
 8014c7a:	3401      	adds	r4, #1
 8014c7c:	9305      	str	r3, [sp, #20]
 8014c7e:	4619      	mov	r1, r3
 8014c80:	f04f 0c0a 	mov.w	ip, #10
 8014c84:	4620      	mov	r0, r4
 8014c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c8a:	3a30      	subs	r2, #48	; 0x30
 8014c8c:	2a09      	cmp	r2, #9
 8014c8e:	d903      	bls.n	8014c98 <_svfiprintf_r+0x1a8>
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d0c5      	beq.n	8014c20 <_svfiprintf_r+0x130>
 8014c94:	9105      	str	r1, [sp, #20]
 8014c96:	e7c3      	b.n	8014c20 <_svfiprintf_r+0x130>
 8014c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	2301      	movs	r3, #1
 8014ca0:	e7f0      	b.n	8014c84 <_svfiprintf_r+0x194>
 8014ca2:	ab03      	add	r3, sp, #12
 8014ca4:	9300      	str	r3, [sp, #0]
 8014ca6:	462a      	mov	r2, r5
 8014ca8:	4b0f      	ldr	r3, [pc, #60]	; (8014ce8 <_svfiprintf_r+0x1f8>)
 8014caa:	a904      	add	r1, sp, #16
 8014cac:	4638      	mov	r0, r7
 8014cae:	f7fc f831 	bl	8010d14 <_printf_float>
 8014cb2:	1c42      	adds	r2, r0, #1
 8014cb4:	4606      	mov	r6, r0
 8014cb6:	d1d6      	bne.n	8014c66 <_svfiprintf_r+0x176>
 8014cb8:	89ab      	ldrh	r3, [r5, #12]
 8014cba:	065b      	lsls	r3, r3, #25
 8014cbc:	f53f af2c 	bmi.w	8014b18 <_svfiprintf_r+0x28>
 8014cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014cc2:	b01d      	add	sp, #116	; 0x74
 8014cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cc8:	ab03      	add	r3, sp, #12
 8014cca:	9300      	str	r3, [sp, #0]
 8014ccc:	462a      	mov	r2, r5
 8014cce:	4b06      	ldr	r3, [pc, #24]	; (8014ce8 <_svfiprintf_r+0x1f8>)
 8014cd0:	a904      	add	r1, sp, #16
 8014cd2:	4638      	mov	r0, r7
 8014cd4:	f7fc fac2 	bl	801125c <_printf_i>
 8014cd8:	e7eb      	b.n	8014cb2 <_svfiprintf_r+0x1c2>
 8014cda:	bf00      	nop
 8014cdc:	08016374 	.word	0x08016374
 8014ce0:	0801637e 	.word	0x0801637e
 8014ce4:	08010d15 	.word	0x08010d15
 8014ce8:	08014a39 	.word	0x08014a39
 8014cec:	0801637a 	.word	0x0801637a

08014cf0 <_sungetc_r>:
 8014cf0:	b538      	push	{r3, r4, r5, lr}
 8014cf2:	1c4b      	adds	r3, r1, #1
 8014cf4:	4614      	mov	r4, r2
 8014cf6:	d103      	bne.n	8014d00 <_sungetc_r+0x10>
 8014cf8:	f04f 35ff 	mov.w	r5, #4294967295
 8014cfc:	4628      	mov	r0, r5
 8014cfe:	bd38      	pop	{r3, r4, r5, pc}
 8014d00:	8993      	ldrh	r3, [r2, #12]
 8014d02:	f023 0320 	bic.w	r3, r3, #32
 8014d06:	8193      	strh	r3, [r2, #12]
 8014d08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014d0a:	6852      	ldr	r2, [r2, #4]
 8014d0c:	b2cd      	uxtb	r5, r1
 8014d0e:	b18b      	cbz	r3, 8014d34 <_sungetc_r+0x44>
 8014d10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014d12:	4293      	cmp	r3, r2
 8014d14:	dd08      	ble.n	8014d28 <_sungetc_r+0x38>
 8014d16:	6823      	ldr	r3, [r4, #0]
 8014d18:	1e5a      	subs	r2, r3, #1
 8014d1a:	6022      	str	r2, [r4, #0]
 8014d1c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014d20:	6863      	ldr	r3, [r4, #4]
 8014d22:	3301      	adds	r3, #1
 8014d24:	6063      	str	r3, [r4, #4]
 8014d26:	e7e9      	b.n	8014cfc <_sungetc_r+0xc>
 8014d28:	4621      	mov	r1, r4
 8014d2a:	f000 fcaf 	bl	801568c <__submore>
 8014d2e:	2800      	cmp	r0, #0
 8014d30:	d0f1      	beq.n	8014d16 <_sungetc_r+0x26>
 8014d32:	e7e1      	b.n	8014cf8 <_sungetc_r+0x8>
 8014d34:	6921      	ldr	r1, [r4, #16]
 8014d36:	6823      	ldr	r3, [r4, #0]
 8014d38:	b151      	cbz	r1, 8014d50 <_sungetc_r+0x60>
 8014d3a:	4299      	cmp	r1, r3
 8014d3c:	d208      	bcs.n	8014d50 <_sungetc_r+0x60>
 8014d3e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8014d42:	42a9      	cmp	r1, r5
 8014d44:	d104      	bne.n	8014d50 <_sungetc_r+0x60>
 8014d46:	3b01      	subs	r3, #1
 8014d48:	3201      	adds	r2, #1
 8014d4a:	6023      	str	r3, [r4, #0]
 8014d4c:	6062      	str	r2, [r4, #4]
 8014d4e:	e7d5      	b.n	8014cfc <_sungetc_r+0xc>
 8014d50:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8014d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d58:	6363      	str	r3, [r4, #52]	; 0x34
 8014d5a:	2303      	movs	r3, #3
 8014d5c:	63a3      	str	r3, [r4, #56]	; 0x38
 8014d5e:	4623      	mov	r3, r4
 8014d60:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014d64:	6023      	str	r3, [r4, #0]
 8014d66:	2301      	movs	r3, #1
 8014d68:	e7dc      	b.n	8014d24 <_sungetc_r+0x34>

08014d6a <__ssrefill_r>:
 8014d6a:	b510      	push	{r4, lr}
 8014d6c:	460c      	mov	r4, r1
 8014d6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014d70:	b169      	cbz	r1, 8014d8e <__ssrefill_r+0x24>
 8014d72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d76:	4299      	cmp	r1, r3
 8014d78:	d001      	beq.n	8014d7e <__ssrefill_r+0x14>
 8014d7a:	f7fb fe81 	bl	8010a80 <_free_r>
 8014d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014d80:	6063      	str	r3, [r4, #4]
 8014d82:	2000      	movs	r0, #0
 8014d84:	6360      	str	r0, [r4, #52]	; 0x34
 8014d86:	b113      	cbz	r3, 8014d8e <__ssrefill_r+0x24>
 8014d88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014d8a:	6023      	str	r3, [r4, #0]
 8014d8c:	bd10      	pop	{r4, pc}
 8014d8e:	6923      	ldr	r3, [r4, #16]
 8014d90:	6023      	str	r3, [r4, #0]
 8014d92:	2300      	movs	r3, #0
 8014d94:	6063      	str	r3, [r4, #4]
 8014d96:	89a3      	ldrh	r3, [r4, #12]
 8014d98:	f043 0320 	orr.w	r3, r3, #32
 8014d9c:	81a3      	strh	r3, [r4, #12]
 8014d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8014da2:	e7f3      	b.n	8014d8c <__ssrefill_r+0x22>

08014da4 <__ssvfiscanf_r>:
 8014da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014da8:	460c      	mov	r4, r1
 8014daa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8014dae:	2100      	movs	r1, #0
 8014db0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8014db4:	49b2      	ldr	r1, [pc, #712]	; (8015080 <__ssvfiscanf_r+0x2dc>)
 8014db6:	91a0      	str	r1, [sp, #640]	; 0x280
 8014db8:	f10d 0804 	add.w	r8, sp, #4
 8014dbc:	49b1      	ldr	r1, [pc, #708]	; (8015084 <__ssvfiscanf_r+0x2e0>)
 8014dbe:	4fb2      	ldr	r7, [pc, #712]	; (8015088 <__ssvfiscanf_r+0x2e4>)
 8014dc0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801508c <__ssvfiscanf_r+0x2e8>
 8014dc4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014dc8:	4606      	mov	r6, r0
 8014dca:	91a1      	str	r1, [sp, #644]	; 0x284
 8014dcc:	9300      	str	r3, [sp, #0]
 8014dce:	f892 a000 	ldrb.w	sl, [r2]
 8014dd2:	f1ba 0f00 	cmp.w	sl, #0
 8014dd6:	f000 8151 	beq.w	801507c <__ssvfiscanf_r+0x2d8>
 8014dda:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8014dde:	f013 0308 	ands.w	r3, r3, #8
 8014de2:	f102 0501 	add.w	r5, r2, #1
 8014de6:	d019      	beq.n	8014e1c <__ssvfiscanf_r+0x78>
 8014de8:	6863      	ldr	r3, [r4, #4]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	dd0f      	ble.n	8014e0e <__ssvfiscanf_r+0x6a>
 8014dee:	6823      	ldr	r3, [r4, #0]
 8014df0:	781a      	ldrb	r2, [r3, #0]
 8014df2:	5cba      	ldrb	r2, [r7, r2]
 8014df4:	0712      	lsls	r2, r2, #28
 8014df6:	d401      	bmi.n	8014dfc <__ssvfiscanf_r+0x58>
 8014df8:	462a      	mov	r2, r5
 8014dfa:	e7e8      	b.n	8014dce <__ssvfiscanf_r+0x2a>
 8014dfc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014dfe:	3201      	adds	r2, #1
 8014e00:	9245      	str	r2, [sp, #276]	; 0x114
 8014e02:	6862      	ldr	r2, [r4, #4]
 8014e04:	3301      	adds	r3, #1
 8014e06:	3a01      	subs	r2, #1
 8014e08:	6062      	str	r2, [r4, #4]
 8014e0a:	6023      	str	r3, [r4, #0]
 8014e0c:	e7ec      	b.n	8014de8 <__ssvfiscanf_r+0x44>
 8014e0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014e10:	4621      	mov	r1, r4
 8014e12:	4630      	mov	r0, r6
 8014e14:	4798      	blx	r3
 8014e16:	2800      	cmp	r0, #0
 8014e18:	d0e9      	beq.n	8014dee <__ssvfiscanf_r+0x4a>
 8014e1a:	e7ed      	b.n	8014df8 <__ssvfiscanf_r+0x54>
 8014e1c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8014e20:	f040 8083 	bne.w	8014f2a <__ssvfiscanf_r+0x186>
 8014e24:	9341      	str	r3, [sp, #260]	; 0x104
 8014e26:	9343      	str	r3, [sp, #268]	; 0x10c
 8014e28:	7853      	ldrb	r3, [r2, #1]
 8014e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8014e2c:	bf02      	ittt	eq
 8014e2e:	2310      	moveq	r3, #16
 8014e30:	1c95      	addeq	r5, r2, #2
 8014e32:	9341      	streq	r3, [sp, #260]	; 0x104
 8014e34:	220a      	movs	r2, #10
 8014e36:	46ab      	mov	fp, r5
 8014e38:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8014e3c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8014e40:	2b09      	cmp	r3, #9
 8014e42:	d91d      	bls.n	8014e80 <__ssvfiscanf_r+0xdc>
 8014e44:	4891      	ldr	r0, [pc, #580]	; (801508c <__ssvfiscanf_r+0x2e8>)
 8014e46:	2203      	movs	r2, #3
 8014e48:	f7eb f9da 	bl	8000200 <memchr>
 8014e4c:	b140      	cbz	r0, 8014e60 <__ssvfiscanf_r+0xbc>
 8014e4e:	2301      	movs	r3, #1
 8014e50:	eba0 0009 	sub.w	r0, r0, r9
 8014e54:	fa03 f000 	lsl.w	r0, r3, r0
 8014e58:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014e5a:	4318      	orrs	r0, r3
 8014e5c:	9041      	str	r0, [sp, #260]	; 0x104
 8014e5e:	465d      	mov	r5, fp
 8014e60:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014e64:	2b78      	cmp	r3, #120	; 0x78
 8014e66:	d806      	bhi.n	8014e76 <__ssvfiscanf_r+0xd2>
 8014e68:	2b57      	cmp	r3, #87	; 0x57
 8014e6a:	d810      	bhi.n	8014e8e <__ssvfiscanf_r+0xea>
 8014e6c:	2b25      	cmp	r3, #37	; 0x25
 8014e6e:	d05c      	beq.n	8014f2a <__ssvfiscanf_r+0x186>
 8014e70:	d856      	bhi.n	8014f20 <__ssvfiscanf_r+0x17c>
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d074      	beq.n	8014f60 <__ssvfiscanf_r+0x1bc>
 8014e76:	2303      	movs	r3, #3
 8014e78:	9347      	str	r3, [sp, #284]	; 0x11c
 8014e7a:	230a      	movs	r3, #10
 8014e7c:	9342      	str	r3, [sp, #264]	; 0x108
 8014e7e:	e081      	b.n	8014f84 <__ssvfiscanf_r+0x1e0>
 8014e80:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014e82:	fb02 1303 	mla	r3, r2, r3, r1
 8014e86:	3b30      	subs	r3, #48	; 0x30
 8014e88:	9343      	str	r3, [sp, #268]	; 0x10c
 8014e8a:	465d      	mov	r5, fp
 8014e8c:	e7d3      	b.n	8014e36 <__ssvfiscanf_r+0x92>
 8014e8e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8014e92:	2a20      	cmp	r2, #32
 8014e94:	d8ef      	bhi.n	8014e76 <__ssvfiscanf_r+0xd2>
 8014e96:	a101      	add	r1, pc, #4	; (adr r1, 8014e9c <__ssvfiscanf_r+0xf8>)
 8014e98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014e9c:	08014f6f 	.word	0x08014f6f
 8014ea0:	08014e77 	.word	0x08014e77
 8014ea4:	08014e77 	.word	0x08014e77
 8014ea8:	08014fcd 	.word	0x08014fcd
 8014eac:	08014e77 	.word	0x08014e77
 8014eb0:	08014e77 	.word	0x08014e77
 8014eb4:	08014e77 	.word	0x08014e77
 8014eb8:	08014e77 	.word	0x08014e77
 8014ebc:	08014e77 	.word	0x08014e77
 8014ec0:	08014e77 	.word	0x08014e77
 8014ec4:	08014e77 	.word	0x08014e77
 8014ec8:	08014fe3 	.word	0x08014fe3
 8014ecc:	08014fb9 	.word	0x08014fb9
 8014ed0:	08014f27 	.word	0x08014f27
 8014ed4:	08014f27 	.word	0x08014f27
 8014ed8:	08014f27 	.word	0x08014f27
 8014edc:	08014e77 	.word	0x08014e77
 8014ee0:	08014fbd 	.word	0x08014fbd
 8014ee4:	08014e77 	.word	0x08014e77
 8014ee8:	08014e77 	.word	0x08014e77
 8014eec:	08014e77 	.word	0x08014e77
 8014ef0:	08014e77 	.word	0x08014e77
 8014ef4:	08014ff3 	.word	0x08014ff3
 8014ef8:	08014fc5 	.word	0x08014fc5
 8014efc:	08014f67 	.word	0x08014f67
 8014f00:	08014e77 	.word	0x08014e77
 8014f04:	08014e77 	.word	0x08014e77
 8014f08:	08014fef 	.word	0x08014fef
 8014f0c:	08014e77 	.word	0x08014e77
 8014f10:	08014fb9 	.word	0x08014fb9
 8014f14:	08014e77 	.word	0x08014e77
 8014f18:	08014e77 	.word	0x08014e77
 8014f1c:	08014f6f 	.word	0x08014f6f
 8014f20:	3b45      	subs	r3, #69	; 0x45
 8014f22:	2b02      	cmp	r3, #2
 8014f24:	d8a7      	bhi.n	8014e76 <__ssvfiscanf_r+0xd2>
 8014f26:	2305      	movs	r3, #5
 8014f28:	e02b      	b.n	8014f82 <__ssvfiscanf_r+0x1de>
 8014f2a:	6863      	ldr	r3, [r4, #4]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	dd0d      	ble.n	8014f4c <__ssvfiscanf_r+0x1a8>
 8014f30:	6823      	ldr	r3, [r4, #0]
 8014f32:	781a      	ldrb	r2, [r3, #0]
 8014f34:	4552      	cmp	r2, sl
 8014f36:	f040 80a1 	bne.w	801507c <__ssvfiscanf_r+0x2d8>
 8014f3a:	3301      	adds	r3, #1
 8014f3c:	6862      	ldr	r2, [r4, #4]
 8014f3e:	6023      	str	r3, [r4, #0]
 8014f40:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8014f42:	3a01      	subs	r2, #1
 8014f44:	3301      	adds	r3, #1
 8014f46:	6062      	str	r2, [r4, #4]
 8014f48:	9345      	str	r3, [sp, #276]	; 0x114
 8014f4a:	e755      	b.n	8014df8 <__ssvfiscanf_r+0x54>
 8014f4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014f4e:	4621      	mov	r1, r4
 8014f50:	4630      	mov	r0, r6
 8014f52:	4798      	blx	r3
 8014f54:	2800      	cmp	r0, #0
 8014f56:	d0eb      	beq.n	8014f30 <__ssvfiscanf_r+0x18c>
 8014f58:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014f5a:	2800      	cmp	r0, #0
 8014f5c:	f040 8084 	bne.w	8015068 <__ssvfiscanf_r+0x2c4>
 8014f60:	f04f 30ff 	mov.w	r0, #4294967295
 8014f64:	e086      	b.n	8015074 <__ssvfiscanf_r+0x2d0>
 8014f66:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014f68:	f042 0220 	orr.w	r2, r2, #32
 8014f6c:	9241      	str	r2, [sp, #260]	; 0x104
 8014f6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014f74:	9241      	str	r2, [sp, #260]	; 0x104
 8014f76:	2210      	movs	r2, #16
 8014f78:	2b6f      	cmp	r3, #111	; 0x6f
 8014f7a:	9242      	str	r2, [sp, #264]	; 0x108
 8014f7c:	bf34      	ite	cc
 8014f7e:	2303      	movcc	r3, #3
 8014f80:	2304      	movcs	r3, #4
 8014f82:	9347      	str	r3, [sp, #284]	; 0x11c
 8014f84:	6863      	ldr	r3, [r4, #4]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	dd41      	ble.n	801500e <__ssvfiscanf_r+0x26a>
 8014f8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014f8c:	0659      	lsls	r1, r3, #25
 8014f8e:	d404      	bmi.n	8014f9a <__ssvfiscanf_r+0x1f6>
 8014f90:	6823      	ldr	r3, [r4, #0]
 8014f92:	781a      	ldrb	r2, [r3, #0]
 8014f94:	5cba      	ldrb	r2, [r7, r2]
 8014f96:	0712      	lsls	r2, r2, #28
 8014f98:	d440      	bmi.n	801501c <__ssvfiscanf_r+0x278>
 8014f9a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014f9c:	2b02      	cmp	r3, #2
 8014f9e:	dc4f      	bgt.n	8015040 <__ssvfiscanf_r+0x29c>
 8014fa0:	466b      	mov	r3, sp
 8014fa2:	4622      	mov	r2, r4
 8014fa4:	a941      	add	r1, sp, #260	; 0x104
 8014fa6:	4630      	mov	r0, r6
 8014fa8:	f000 f9ce 	bl	8015348 <_scanf_chars>
 8014fac:	2801      	cmp	r0, #1
 8014fae:	d065      	beq.n	801507c <__ssvfiscanf_r+0x2d8>
 8014fb0:	2802      	cmp	r0, #2
 8014fb2:	f47f af21 	bne.w	8014df8 <__ssvfiscanf_r+0x54>
 8014fb6:	e7cf      	b.n	8014f58 <__ssvfiscanf_r+0x1b4>
 8014fb8:	220a      	movs	r2, #10
 8014fba:	e7dd      	b.n	8014f78 <__ssvfiscanf_r+0x1d4>
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	9342      	str	r3, [sp, #264]	; 0x108
 8014fc0:	2303      	movs	r3, #3
 8014fc2:	e7de      	b.n	8014f82 <__ssvfiscanf_r+0x1de>
 8014fc4:	2308      	movs	r3, #8
 8014fc6:	9342      	str	r3, [sp, #264]	; 0x108
 8014fc8:	2304      	movs	r3, #4
 8014fca:	e7da      	b.n	8014f82 <__ssvfiscanf_r+0x1de>
 8014fcc:	4629      	mov	r1, r5
 8014fce:	4640      	mov	r0, r8
 8014fd0:	f000 fb22 	bl	8015618 <__sccl>
 8014fd4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fda:	9341      	str	r3, [sp, #260]	; 0x104
 8014fdc:	4605      	mov	r5, r0
 8014fde:	2301      	movs	r3, #1
 8014fe0:	e7cf      	b.n	8014f82 <__ssvfiscanf_r+0x1de>
 8014fe2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fe8:	9341      	str	r3, [sp, #260]	; 0x104
 8014fea:	2300      	movs	r3, #0
 8014fec:	e7c9      	b.n	8014f82 <__ssvfiscanf_r+0x1de>
 8014fee:	2302      	movs	r3, #2
 8014ff0:	e7c7      	b.n	8014f82 <__ssvfiscanf_r+0x1de>
 8014ff2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014ff4:	06c3      	lsls	r3, r0, #27
 8014ff6:	f53f aeff 	bmi.w	8014df8 <__ssvfiscanf_r+0x54>
 8014ffa:	9b00      	ldr	r3, [sp, #0]
 8014ffc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014ffe:	1d19      	adds	r1, r3, #4
 8015000:	9100      	str	r1, [sp, #0]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	07c0      	lsls	r0, r0, #31
 8015006:	bf4c      	ite	mi
 8015008:	801a      	strhmi	r2, [r3, #0]
 801500a:	601a      	strpl	r2, [r3, #0]
 801500c:	e6f4      	b.n	8014df8 <__ssvfiscanf_r+0x54>
 801500e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015010:	4621      	mov	r1, r4
 8015012:	4630      	mov	r0, r6
 8015014:	4798      	blx	r3
 8015016:	2800      	cmp	r0, #0
 8015018:	d0b7      	beq.n	8014f8a <__ssvfiscanf_r+0x1e6>
 801501a:	e79d      	b.n	8014f58 <__ssvfiscanf_r+0x1b4>
 801501c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801501e:	3201      	adds	r2, #1
 8015020:	9245      	str	r2, [sp, #276]	; 0x114
 8015022:	6862      	ldr	r2, [r4, #4]
 8015024:	3a01      	subs	r2, #1
 8015026:	2a00      	cmp	r2, #0
 8015028:	6062      	str	r2, [r4, #4]
 801502a:	dd02      	ble.n	8015032 <__ssvfiscanf_r+0x28e>
 801502c:	3301      	adds	r3, #1
 801502e:	6023      	str	r3, [r4, #0]
 8015030:	e7ae      	b.n	8014f90 <__ssvfiscanf_r+0x1ec>
 8015032:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015034:	4621      	mov	r1, r4
 8015036:	4630      	mov	r0, r6
 8015038:	4798      	blx	r3
 801503a:	2800      	cmp	r0, #0
 801503c:	d0a8      	beq.n	8014f90 <__ssvfiscanf_r+0x1ec>
 801503e:	e78b      	b.n	8014f58 <__ssvfiscanf_r+0x1b4>
 8015040:	2b04      	cmp	r3, #4
 8015042:	dc06      	bgt.n	8015052 <__ssvfiscanf_r+0x2ae>
 8015044:	466b      	mov	r3, sp
 8015046:	4622      	mov	r2, r4
 8015048:	a941      	add	r1, sp, #260	; 0x104
 801504a:	4630      	mov	r0, r6
 801504c:	f000 f9d4 	bl	80153f8 <_scanf_i>
 8015050:	e7ac      	b.n	8014fac <__ssvfiscanf_r+0x208>
 8015052:	4b0f      	ldr	r3, [pc, #60]	; (8015090 <__ssvfiscanf_r+0x2ec>)
 8015054:	2b00      	cmp	r3, #0
 8015056:	f43f aecf 	beq.w	8014df8 <__ssvfiscanf_r+0x54>
 801505a:	466b      	mov	r3, sp
 801505c:	4622      	mov	r2, r4
 801505e:	a941      	add	r1, sp, #260	; 0x104
 8015060:	4630      	mov	r0, r6
 8015062:	f7fc fa21 	bl	80114a8 <_scanf_float>
 8015066:	e7a1      	b.n	8014fac <__ssvfiscanf_r+0x208>
 8015068:	89a3      	ldrh	r3, [r4, #12]
 801506a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801506e:	bf18      	it	ne
 8015070:	f04f 30ff 	movne.w	r0, #4294967295
 8015074:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8015078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801507c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801507e:	e7f9      	b.n	8015074 <__ssvfiscanf_r+0x2d0>
 8015080:	08014cf1 	.word	0x08014cf1
 8015084:	08014d6b 	.word	0x08014d6b
 8015088:	08016005 	.word	0x08016005
 801508c:	0801637a 	.word	0x0801637a
 8015090:	080114a9 	.word	0x080114a9

08015094 <__sfputc_r>:
 8015094:	6893      	ldr	r3, [r2, #8]
 8015096:	3b01      	subs	r3, #1
 8015098:	2b00      	cmp	r3, #0
 801509a:	b410      	push	{r4}
 801509c:	6093      	str	r3, [r2, #8]
 801509e:	da08      	bge.n	80150b2 <__sfputc_r+0x1e>
 80150a0:	6994      	ldr	r4, [r2, #24]
 80150a2:	42a3      	cmp	r3, r4
 80150a4:	db01      	blt.n	80150aa <__sfputc_r+0x16>
 80150a6:	290a      	cmp	r1, #10
 80150a8:	d103      	bne.n	80150b2 <__sfputc_r+0x1e>
 80150aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150ae:	f000 bb27 	b.w	8015700 <__swbuf_r>
 80150b2:	6813      	ldr	r3, [r2, #0]
 80150b4:	1c58      	adds	r0, r3, #1
 80150b6:	6010      	str	r0, [r2, #0]
 80150b8:	7019      	strb	r1, [r3, #0]
 80150ba:	4608      	mov	r0, r1
 80150bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150c0:	4770      	bx	lr

080150c2 <__sfputs_r>:
 80150c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150c4:	4606      	mov	r6, r0
 80150c6:	460f      	mov	r7, r1
 80150c8:	4614      	mov	r4, r2
 80150ca:	18d5      	adds	r5, r2, r3
 80150cc:	42ac      	cmp	r4, r5
 80150ce:	d101      	bne.n	80150d4 <__sfputs_r+0x12>
 80150d0:	2000      	movs	r0, #0
 80150d2:	e007      	b.n	80150e4 <__sfputs_r+0x22>
 80150d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150d8:	463a      	mov	r2, r7
 80150da:	4630      	mov	r0, r6
 80150dc:	f7ff ffda 	bl	8015094 <__sfputc_r>
 80150e0:	1c43      	adds	r3, r0, #1
 80150e2:	d1f3      	bne.n	80150cc <__sfputs_r+0xa>
 80150e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080150e8 <_vfiprintf_r>:
 80150e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150ec:	460d      	mov	r5, r1
 80150ee:	b09d      	sub	sp, #116	; 0x74
 80150f0:	4614      	mov	r4, r2
 80150f2:	4698      	mov	r8, r3
 80150f4:	4606      	mov	r6, r0
 80150f6:	b118      	cbz	r0, 8015100 <_vfiprintf_r+0x18>
 80150f8:	6983      	ldr	r3, [r0, #24]
 80150fa:	b90b      	cbnz	r3, 8015100 <_vfiprintf_r+0x18>
 80150fc:	f7fb fbba 	bl	8010874 <__sinit>
 8015100:	4b89      	ldr	r3, [pc, #548]	; (8015328 <_vfiprintf_r+0x240>)
 8015102:	429d      	cmp	r5, r3
 8015104:	d11b      	bne.n	801513e <_vfiprintf_r+0x56>
 8015106:	6875      	ldr	r5, [r6, #4]
 8015108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801510a:	07d9      	lsls	r1, r3, #31
 801510c:	d405      	bmi.n	801511a <_vfiprintf_r+0x32>
 801510e:	89ab      	ldrh	r3, [r5, #12]
 8015110:	059a      	lsls	r2, r3, #22
 8015112:	d402      	bmi.n	801511a <_vfiprintf_r+0x32>
 8015114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015116:	f7fb fc70 	bl	80109fa <__retarget_lock_acquire_recursive>
 801511a:	89ab      	ldrh	r3, [r5, #12]
 801511c:	071b      	lsls	r3, r3, #28
 801511e:	d501      	bpl.n	8015124 <_vfiprintf_r+0x3c>
 8015120:	692b      	ldr	r3, [r5, #16]
 8015122:	b9eb      	cbnz	r3, 8015160 <_vfiprintf_r+0x78>
 8015124:	4629      	mov	r1, r5
 8015126:	4630      	mov	r0, r6
 8015128:	f000 fb4a 	bl	80157c0 <__swsetup_r>
 801512c:	b1c0      	cbz	r0, 8015160 <_vfiprintf_r+0x78>
 801512e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015130:	07dc      	lsls	r4, r3, #31
 8015132:	d50e      	bpl.n	8015152 <_vfiprintf_r+0x6a>
 8015134:	f04f 30ff 	mov.w	r0, #4294967295
 8015138:	b01d      	add	sp, #116	; 0x74
 801513a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801513e:	4b7b      	ldr	r3, [pc, #492]	; (801532c <_vfiprintf_r+0x244>)
 8015140:	429d      	cmp	r5, r3
 8015142:	d101      	bne.n	8015148 <_vfiprintf_r+0x60>
 8015144:	68b5      	ldr	r5, [r6, #8]
 8015146:	e7df      	b.n	8015108 <_vfiprintf_r+0x20>
 8015148:	4b79      	ldr	r3, [pc, #484]	; (8015330 <_vfiprintf_r+0x248>)
 801514a:	429d      	cmp	r5, r3
 801514c:	bf08      	it	eq
 801514e:	68f5      	ldreq	r5, [r6, #12]
 8015150:	e7da      	b.n	8015108 <_vfiprintf_r+0x20>
 8015152:	89ab      	ldrh	r3, [r5, #12]
 8015154:	0598      	lsls	r0, r3, #22
 8015156:	d4ed      	bmi.n	8015134 <_vfiprintf_r+0x4c>
 8015158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801515a:	f7fb fc4f 	bl	80109fc <__retarget_lock_release_recursive>
 801515e:	e7e9      	b.n	8015134 <_vfiprintf_r+0x4c>
 8015160:	2300      	movs	r3, #0
 8015162:	9309      	str	r3, [sp, #36]	; 0x24
 8015164:	2320      	movs	r3, #32
 8015166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801516a:	f8cd 800c 	str.w	r8, [sp, #12]
 801516e:	2330      	movs	r3, #48	; 0x30
 8015170:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015334 <_vfiprintf_r+0x24c>
 8015174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015178:	f04f 0901 	mov.w	r9, #1
 801517c:	4623      	mov	r3, r4
 801517e:	469a      	mov	sl, r3
 8015180:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015184:	b10a      	cbz	r2, 801518a <_vfiprintf_r+0xa2>
 8015186:	2a25      	cmp	r2, #37	; 0x25
 8015188:	d1f9      	bne.n	801517e <_vfiprintf_r+0x96>
 801518a:	ebba 0b04 	subs.w	fp, sl, r4
 801518e:	d00b      	beq.n	80151a8 <_vfiprintf_r+0xc0>
 8015190:	465b      	mov	r3, fp
 8015192:	4622      	mov	r2, r4
 8015194:	4629      	mov	r1, r5
 8015196:	4630      	mov	r0, r6
 8015198:	f7ff ff93 	bl	80150c2 <__sfputs_r>
 801519c:	3001      	adds	r0, #1
 801519e:	f000 80aa 	beq.w	80152f6 <_vfiprintf_r+0x20e>
 80151a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151a4:	445a      	add	r2, fp
 80151a6:	9209      	str	r2, [sp, #36]	; 0x24
 80151a8:	f89a 3000 	ldrb.w	r3, [sl]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	f000 80a2 	beq.w	80152f6 <_vfiprintf_r+0x20e>
 80151b2:	2300      	movs	r3, #0
 80151b4:	f04f 32ff 	mov.w	r2, #4294967295
 80151b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151bc:	f10a 0a01 	add.w	sl, sl, #1
 80151c0:	9304      	str	r3, [sp, #16]
 80151c2:	9307      	str	r3, [sp, #28]
 80151c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80151c8:	931a      	str	r3, [sp, #104]	; 0x68
 80151ca:	4654      	mov	r4, sl
 80151cc:	2205      	movs	r2, #5
 80151ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151d2:	4858      	ldr	r0, [pc, #352]	; (8015334 <_vfiprintf_r+0x24c>)
 80151d4:	f7eb f814 	bl	8000200 <memchr>
 80151d8:	9a04      	ldr	r2, [sp, #16]
 80151da:	b9d8      	cbnz	r0, 8015214 <_vfiprintf_r+0x12c>
 80151dc:	06d1      	lsls	r1, r2, #27
 80151de:	bf44      	itt	mi
 80151e0:	2320      	movmi	r3, #32
 80151e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151e6:	0713      	lsls	r3, r2, #28
 80151e8:	bf44      	itt	mi
 80151ea:	232b      	movmi	r3, #43	; 0x2b
 80151ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151f0:	f89a 3000 	ldrb.w	r3, [sl]
 80151f4:	2b2a      	cmp	r3, #42	; 0x2a
 80151f6:	d015      	beq.n	8015224 <_vfiprintf_r+0x13c>
 80151f8:	9a07      	ldr	r2, [sp, #28]
 80151fa:	4654      	mov	r4, sl
 80151fc:	2000      	movs	r0, #0
 80151fe:	f04f 0c0a 	mov.w	ip, #10
 8015202:	4621      	mov	r1, r4
 8015204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015208:	3b30      	subs	r3, #48	; 0x30
 801520a:	2b09      	cmp	r3, #9
 801520c:	d94e      	bls.n	80152ac <_vfiprintf_r+0x1c4>
 801520e:	b1b0      	cbz	r0, 801523e <_vfiprintf_r+0x156>
 8015210:	9207      	str	r2, [sp, #28]
 8015212:	e014      	b.n	801523e <_vfiprintf_r+0x156>
 8015214:	eba0 0308 	sub.w	r3, r0, r8
 8015218:	fa09 f303 	lsl.w	r3, r9, r3
 801521c:	4313      	orrs	r3, r2
 801521e:	9304      	str	r3, [sp, #16]
 8015220:	46a2      	mov	sl, r4
 8015222:	e7d2      	b.n	80151ca <_vfiprintf_r+0xe2>
 8015224:	9b03      	ldr	r3, [sp, #12]
 8015226:	1d19      	adds	r1, r3, #4
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	9103      	str	r1, [sp, #12]
 801522c:	2b00      	cmp	r3, #0
 801522e:	bfbb      	ittet	lt
 8015230:	425b      	neglt	r3, r3
 8015232:	f042 0202 	orrlt.w	r2, r2, #2
 8015236:	9307      	strge	r3, [sp, #28]
 8015238:	9307      	strlt	r3, [sp, #28]
 801523a:	bfb8      	it	lt
 801523c:	9204      	strlt	r2, [sp, #16]
 801523e:	7823      	ldrb	r3, [r4, #0]
 8015240:	2b2e      	cmp	r3, #46	; 0x2e
 8015242:	d10c      	bne.n	801525e <_vfiprintf_r+0x176>
 8015244:	7863      	ldrb	r3, [r4, #1]
 8015246:	2b2a      	cmp	r3, #42	; 0x2a
 8015248:	d135      	bne.n	80152b6 <_vfiprintf_r+0x1ce>
 801524a:	9b03      	ldr	r3, [sp, #12]
 801524c:	1d1a      	adds	r2, r3, #4
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	9203      	str	r2, [sp, #12]
 8015252:	2b00      	cmp	r3, #0
 8015254:	bfb8      	it	lt
 8015256:	f04f 33ff 	movlt.w	r3, #4294967295
 801525a:	3402      	adds	r4, #2
 801525c:	9305      	str	r3, [sp, #20]
 801525e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015344 <_vfiprintf_r+0x25c>
 8015262:	7821      	ldrb	r1, [r4, #0]
 8015264:	2203      	movs	r2, #3
 8015266:	4650      	mov	r0, sl
 8015268:	f7ea ffca 	bl	8000200 <memchr>
 801526c:	b140      	cbz	r0, 8015280 <_vfiprintf_r+0x198>
 801526e:	2340      	movs	r3, #64	; 0x40
 8015270:	eba0 000a 	sub.w	r0, r0, sl
 8015274:	fa03 f000 	lsl.w	r0, r3, r0
 8015278:	9b04      	ldr	r3, [sp, #16]
 801527a:	4303      	orrs	r3, r0
 801527c:	3401      	adds	r4, #1
 801527e:	9304      	str	r3, [sp, #16]
 8015280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015284:	482c      	ldr	r0, [pc, #176]	; (8015338 <_vfiprintf_r+0x250>)
 8015286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801528a:	2206      	movs	r2, #6
 801528c:	f7ea ffb8 	bl	8000200 <memchr>
 8015290:	2800      	cmp	r0, #0
 8015292:	d03f      	beq.n	8015314 <_vfiprintf_r+0x22c>
 8015294:	4b29      	ldr	r3, [pc, #164]	; (801533c <_vfiprintf_r+0x254>)
 8015296:	bb1b      	cbnz	r3, 80152e0 <_vfiprintf_r+0x1f8>
 8015298:	9b03      	ldr	r3, [sp, #12]
 801529a:	3307      	adds	r3, #7
 801529c:	f023 0307 	bic.w	r3, r3, #7
 80152a0:	3308      	adds	r3, #8
 80152a2:	9303      	str	r3, [sp, #12]
 80152a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152a6:	443b      	add	r3, r7
 80152a8:	9309      	str	r3, [sp, #36]	; 0x24
 80152aa:	e767      	b.n	801517c <_vfiprintf_r+0x94>
 80152ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80152b0:	460c      	mov	r4, r1
 80152b2:	2001      	movs	r0, #1
 80152b4:	e7a5      	b.n	8015202 <_vfiprintf_r+0x11a>
 80152b6:	2300      	movs	r3, #0
 80152b8:	3401      	adds	r4, #1
 80152ba:	9305      	str	r3, [sp, #20]
 80152bc:	4619      	mov	r1, r3
 80152be:	f04f 0c0a 	mov.w	ip, #10
 80152c2:	4620      	mov	r0, r4
 80152c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152c8:	3a30      	subs	r2, #48	; 0x30
 80152ca:	2a09      	cmp	r2, #9
 80152cc:	d903      	bls.n	80152d6 <_vfiprintf_r+0x1ee>
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d0c5      	beq.n	801525e <_vfiprintf_r+0x176>
 80152d2:	9105      	str	r1, [sp, #20]
 80152d4:	e7c3      	b.n	801525e <_vfiprintf_r+0x176>
 80152d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80152da:	4604      	mov	r4, r0
 80152dc:	2301      	movs	r3, #1
 80152de:	e7f0      	b.n	80152c2 <_vfiprintf_r+0x1da>
 80152e0:	ab03      	add	r3, sp, #12
 80152e2:	9300      	str	r3, [sp, #0]
 80152e4:	462a      	mov	r2, r5
 80152e6:	4b16      	ldr	r3, [pc, #88]	; (8015340 <_vfiprintf_r+0x258>)
 80152e8:	a904      	add	r1, sp, #16
 80152ea:	4630      	mov	r0, r6
 80152ec:	f7fb fd12 	bl	8010d14 <_printf_float>
 80152f0:	4607      	mov	r7, r0
 80152f2:	1c78      	adds	r0, r7, #1
 80152f4:	d1d6      	bne.n	80152a4 <_vfiprintf_r+0x1bc>
 80152f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80152f8:	07d9      	lsls	r1, r3, #31
 80152fa:	d405      	bmi.n	8015308 <_vfiprintf_r+0x220>
 80152fc:	89ab      	ldrh	r3, [r5, #12]
 80152fe:	059a      	lsls	r2, r3, #22
 8015300:	d402      	bmi.n	8015308 <_vfiprintf_r+0x220>
 8015302:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015304:	f7fb fb7a 	bl	80109fc <__retarget_lock_release_recursive>
 8015308:	89ab      	ldrh	r3, [r5, #12]
 801530a:	065b      	lsls	r3, r3, #25
 801530c:	f53f af12 	bmi.w	8015134 <_vfiprintf_r+0x4c>
 8015310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015312:	e711      	b.n	8015138 <_vfiprintf_r+0x50>
 8015314:	ab03      	add	r3, sp, #12
 8015316:	9300      	str	r3, [sp, #0]
 8015318:	462a      	mov	r2, r5
 801531a:	4b09      	ldr	r3, [pc, #36]	; (8015340 <_vfiprintf_r+0x258>)
 801531c:	a904      	add	r1, sp, #16
 801531e:	4630      	mov	r0, r6
 8015320:	f7fb ff9c 	bl	801125c <_printf_i>
 8015324:	e7e4      	b.n	80152f0 <_vfiprintf_r+0x208>
 8015326:	bf00      	nop
 8015328:	08015efc 	.word	0x08015efc
 801532c:	08015f1c 	.word	0x08015f1c
 8015330:	08015edc 	.word	0x08015edc
 8015334:	08016374 	.word	0x08016374
 8015338:	0801637e 	.word	0x0801637e
 801533c:	08010d15 	.word	0x08010d15
 8015340:	080150c3 	.word	0x080150c3
 8015344:	0801637a 	.word	0x0801637a

08015348 <_scanf_chars>:
 8015348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801534c:	4615      	mov	r5, r2
 801534e:	688a      	ldr	r2, [r1, #8]
 8015350:	4680      	mov	r8, r0
 8015352:	460c      	mov	r4, r1
 8015354:	b932      	cbnz	r2, 8015364 <_scanf_chars+0x1c>
 8015356:	698a      	ldr	r2, [r1, #24]
 8015358:	2a00      	cmp	r2, #0
 801535a:	bf0c      	ite	eq
 801535c:	2201      	moveq	r2, #1
 801535e:	f04f 32ff 	movne.w	r2, #4294967295
 8015362:	608a      	str	r2, [r1, #8]
 8015364:	6822      	ldr	r2, [r4, #0]
 8015366:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80153f4 <_scanf_chars+0xac>
 801536a:	06d1      	lsls	r1, r2, #27
 801536c:	bf5f      	itttt	pl
 801536e:	681a      	ldrpl	r2, [r3, #0]
 8015370:	1d11      	addpl	r1, r2, #4
 8015372:	6019      	strpl	r1, [r3, #0]
 8015374:	6816      	ldrpl	r6, [r2, #0]
 8015376:	2700      	movs	r7, #0
 8015378:	69a0      	ldr	r0, [r4, #24]
 801537a:	b188      	cbz	r0, 80153a0 <_scanf_chars+0x58>
 801537c:	2801      	cmp	r0, #1
 801537e:	d107      	bne.n	8015390 <_scanf_chars+0x48>
 8015380:	682b      	ldr	r3, [r5, #0]
 8015382:	781a      	ldrb	r2, [r3, #0]
 8015384:	6963      	ldr	r3, [r4, #20]
 8015386:	5c9b      	ldrb	r3, [r3, r2]
 8015388:	b953      	cbnz	r3, 80153a0 <_scanf_chars+0x58>
 801538a:	bb27      	cbnz	r7, 80153d6 <_scanf_chars+0x8e>
 801538c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015390:	2802      	cmp	r0, #2
 8015392:	d120      	bne.n	80153d6 <_scanf_chars+0x8e>
 8015394:	682b      	ldr	r3, [r5, #0]
 8015396:	781b      	ldrb	r3, [r3, #0]
 8015398:	f813 3009 	ldrb.w	r3, [r3, r9]
 801539c:	071b      	lsls	r3, r3, #28
 801539e:	d41a      	bmi.n	80153d6 <_scanf_chars+0x8e>
 80153a0:	6823      	ldr	r3, [r4, #0]
 80153a2:	06da      	lsls	r2, r3, #27
 80153a4:	bf5e      	ittt	pl
 80153a6:	682b      	ldrpl	r3, [r5, #0]
 80153a8:	781b      	ldrbpl	r3, [r3, #0]
 80153aa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80153ae:	682a      	ldr	r2, [r5, #0]
 80153b0:	686b      	ldr	r3, [r5, #4]
 80153b2:	3201      	adds	r2, #1
 80153b4:	602a      	str	r2, [r5, #0]
 80153b6:	68a2      	ldr	r2, [r4, #8]
 80153b8:	3b01      	subs	r3, #1
 80153ba:	3a01      	subs	r2, #1
 80153bc:	606b      	str	r3, [r5, #4]
 80153be:	3701      	adds	r7, #1
 80153c0:	60a2      	str	r2, [r4, #8]
 80153c2:	b142      	cbz	r2, 80153d6 <_scanf_chars+0x8e>
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	dcd7      	bgt.n	8015378 <_scanf_chars+0x30>
 80153c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80153cc:	4629      	mov	r1, r5
 80153ce:	4640      	mov	r0, r8
 80153d0:	4798      	blx	r3
 80153d2:	2800      	cmp	r0, #0
 80153d4:	d0d0      	beq.n	8015378 <_scanf_chars+0x30>
 80153d6:	6823      	ldr	r3, [r4, #0]
 80153d8:	f013 0310 	ands.w	r3, r3, #16
 80153dc:	d105      	bne.n	80153ea <_scanf_chars+0xa2>
 80153de:	68e2      	ldr	r2, [r4, #12]
 80153e0:	3201      	adds	r2, #1
 80153e2:	60e2      	str	r2, [r4, #12]
 80153e4:	69a2      	ldr	r2, [r4, #24]
 80153e6:	b102      	cbz	r2, 80153ea <_scanf_chars+0xa2>
 80153e8:	7033      	strb	r3, [r6, #0]
 80153ea:	6923      	ldr	r3, [r4, #16]
 80153ec:	441f      	add	r7, r3
 80153ee:	6127      	str	r7, [r4, #16]
 80153f0:	2000      	movs	r0, #0
 80153f2:	e7cb      	b.n	801538c <_scanf_chars+0x44>
 80153f4:	08016005 	.word	0x08016005

080153f8 <_scanf_i>:
 80153f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153fc:	4698      	mov	r8, r3
 80153fe:	4b74      	ldr	r3, [pc, #464]	; (80155d0 <_scanf_i+0x1d8>)
 8015400:	460c      	mov	r4, r1
 8015402:	4682      	mov	sl, r0
 8015404:	4616      	mov	r6, r2
 8015406:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801540a:	b087      	sub	sp, #28
 801540c:	ab03      	add	r3, sp, #12
 801540e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015412:	4b70      	ldr	r3, [pc, #448]	; (80155d4 <_scanf_i+0x1dc>)
 8015414:	69a1      	ldr	r1, [r4, #24]
 8015416:	4a70      	ldr	r2, [pc, #448]	; (80155d8 <_scanf_i+0x1e0>)
 8015418:	2903      	cmp	r1, #3
 801541a:	bf18      	it	ne
 801541c:	461a      	movne	r2, r3
 801541e:	68a3      	ldr	r3, [r4, #8]
 8015420:	9201      	str	r2, [sp, #4]
 8015422:	1e5a      	subs	r2, r3, #1
 8015424:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015428:	bf88      	it	hi
 801542a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801542e:	4627      	mov	r7, r4
 8015430:	bf82      	ittt	hi
 8015432:	eb03 0905 	addhi.w	r9, r3, r5
 8015436:	f240 135d 	movwhi	r3, #349	; 0x15d
 801543a:	60a3      	strhi	r3, [r4, #8]
 801543c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8015440:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8015444:	bf98      	it	ls
 8015446:	f04f 0900 	movls.w	r9, #0
 801544a:	6023      	str	r3, [r4, #0]
 801544c:	463d      	mov	r5, r7
 801544e:	f04f 0b00 	mov.w	fp, #0
 8015452:	6831      	ldr	r1, [r6, #0]
 8015454:	ab03      	add	r3, sp, #12
 8015456:	7809      	ldrb	r1, [r1, #0]
 8015458:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801545c:	2202      	movs	r2, #2
 801545e:	f7ea fecf 	bl	8000200 <memchr>
 8015462:	b328      	cbz	r0, 80154b0 <_scanf_i+0xb8>
 8015464:	f1bb 0f01 	cmp.w	fp, #1
 8015468:	d159      	bne.n	801551e <_scanf_i+0x126>
 801546a:	6862      	ldr	r2, [r4, #4]
 801546c:	b92a      	cbnz	r2, 801547a <_scanf_i+0x82>
 801546e:	6822      	ldr	r2, [r4, #0]
 8015470:	2308      	movs	r3, #8
 8015472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015476:	6063      	str	r3, [r4, #4]
 8015478:	6022      	str	r2, [r4, #0]
 801547a:	6822      	ldr	r2, [r4, #0]
 801547c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8015480:	6022      	str	r2, [r4, #0]
 8015482:	68a2      	ldr	r2, [r4, #8]
 8015484:	1e51      	subs	r1, r2, #1
 8015486:	60a1      	str	r1, [r4, #8]
 8015488:	b192      	cbz	r2, 80154b0 <_scanf_i+0xb8>
 801548a:	6832      	ldr	r2, [r6, #0]
 801548c:	1c51      	adds	r1, r2, #1
 801548e:	6031      	str	r1, [r6, #0]
 8015490:	7812      	ldrb	r2, [r2, #0]
 8015492:	f805 2b01 	strb.w	r2, [r5], #1
 8015496:	6872      	ldr	r2, [r6, #4]
 8015498:	3a01      	subs	r2, #1
 801549a:	2a00      	cmp	r2, #0
 801549c:	6072      	str	r2, [r6, #4]
 801549e:	dc07      	bgt.n	80154b0 <_scanf_i+0xb8>
 80154a0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80154a4:	4631      	mov	r1, r6
 80154a6:	4650      	mov	r0, sl
 80154a8:	4790      	blx	r2
 80154aa:	2800      	cmp	r0, #0
 80154ac:	f040 8085 	bne.w	80155ba <_scanf_i+0x1c2>
 80154b0:	f10b 0b01 	add.w	fp, fp, #1
 80154b4:	f1bb 0f03 	cmp.w	fp, #3
 80154b8:	d1cb      	bne.n	8015452 <_scanf_i+0x5a>
 80154ba:	6863      	ldr	r3, [r4, #4]
 80154bc:	b90b      	cbnz	r3, 80154c2 <_scanf_i+0xca>
 80154be:	230a      	movs	r3, #10
 80154c0:	6063      	str	r3, [r4, #4]
 80154c2:	6863      	ldr	r3, [r4, #4]
 80154c4:	4945      	ldr	r1, [pc, #276]	; (80155dc <_scanf_i+0x1e4>)
 80154c6:	6960      	ldr	r0, [r4, #20]
 80154c8:	1ac9      	subs	r1, r1, r3
 80154ca:	f000 f8a5 	bl	8015618 <__sccl>
 80154ce:	f04f 0b00 	mov.w	fp, #0
 80154d2:	68a3      	ldr	r3, [r4, #8]
 80154d4:	6822      	ldr	r2, [r4, #0]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d03d      	beq.n	8015556 <_scanf_i+0x15e>
 80154da:	6831      	ldr	r1, [r6, #0]
 80154dc:	6960      	ldr	r0, [r4, #20]
 80154de:	f891 c000 	ldrb.w	ip, [r1]
 80154e2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80154e6:	2800      	cmp	r0, #0
 80154e8:	d035      	beq.n	8015556 <_scanf_i+0x15e>
 80154ea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80154ee:	d124      	bne.n	801553a <_scanf_i+0x142>
 80154f0:	0510      	lsls	r0, r2, #20
 80154f2:	d522      	bpl.n	801553a <_scanf_i+0x142>
 80154f4:	f10b 0b01 	add.w	fp, fp, #1
 80154f8:	f1b9 0f00 	cmp.w	r9, #0
 80154fc:	d003      	beq.n	8015506 <_scanf_i+0x10e>
 80154fe:	3301      	adds	r3, #1
 8015500:	f109 39ff 	add.w	r9, r9, #4294967295
 8015504:	60a3      	str	r3, [r4, #8]
 8015506:	6873      	ldr	r3, [r6, #4]
 8015508:	3b01      	subs	r3, #1
 801550a:	2b00      	cmp	r3, #0
 801550c:	6073      	str	r3, [r6, #4]
 801550e:	dd1b      	ble.n	8015548 <_scanf_i+0x150>
 8015510:	6833      	ldr	r3, [r6, #0]
 8015512:	3301      	adds	r3, #1
 8015514:	6033      	str	r3, [r6, #0]
 8015516:	68a3      	ldr	r3, [r4, #8]
 8015518:	3b01      	subs	r3, #1
 801551a:	60a3      	str	r3, [r4, #8]
 801551c:	e7d9      	b.n	80154d2 <_scanf_i+0xda>
 801551e:	f1bb 0f02 	cmp.w	fp, #2
 8015522:	d1ae      	bne.n	8015482 <_scanf_i+0x8a>
 8015524:	6822      	ldr	r2, [r4, #0]
 8015526:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801552a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801552e:	d1bf      	bne.n	80154b0 <_scanf_i+0xb8>
 8015530:	2310      	movs	r3, #16
 8015532:	6063      	str	r3, [r4, #4]
 8015534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015538:	e7a2      	b.n	8015480 <_scanf_i+0x88>
 801553a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801553e:	6022      	str	r2, [r4, #0]
 8015540:	780b      	ldrb	r3, [r1, #0]
 8015542:	f805 3b01 	strb.w	r3, [r5], #1
 8015546:	e7de      	b.n	8015506 <_scanf_i+0x10e>
 8015548:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801554c:	4631      	mov	r1, r6
 801554e:	4650      	mov	r0, sl
 8015550:	4798      	blx	r3
 8015552:	2800      	cmp	r0, #0
 8015554:	d0df      	beq.n	8015516 <_scanf_i+0x11e>
 8015556:	6823      	ldr	r3, [r4, #0]
 8015558:	05d9      	lsls	r1, r3, #23
 801555a:	d50d      	bpl.n	8015578 <_scanf_i+0x180>
 801555c:	42bd      	cmp	r5, r7
 801555e:	d909      	bls.n	8015574 <_scanf_i+0x17c>
 8015560:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015564:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015568:	4632      	mov	r2, r6
 801556a:	4650      	mov	r0, sl
 801556c:	4798      	blx	r3
 801556e:	f105 39ff 	add.w	r9, r5, #4294967295
 8015572:	464d      	mov	r5, r9
 8015574:	42bd      	cmp	r5, r7
 8015576:	d028      	beq.n	80155ca <_scanf_i+0x1d2>
 8015578:	6822      	ldr	r2, [r4, #0]
 801557a:	f012 0210 	ands.w	r2, r2, #16
 801557e:	d113      	bne.n	80155a8 <_scanf_i+0x1b0>
 8015580:	702a      	strb	r2, [r5, #0]
 8015582:	6863      	ldr	r3, [r4, #4]
 8015584:	9e01      	ldr	r6, [sp, #4]
 8015586:	4639      	mov	r1, r7
 8015588:	4650      	mov	r0, sl
 801558a:	47b0      	blx	r6
 801558c:	f8d8 3000 	ldr.w	r3, [r8]
 8015590:	6821      	ldr	r1, [r4, #0]
 8015592:	1d1a      	adds	r2, r3, #4
 8015594:	f8c8 2000 	str.w	r2, [r8]
 8015598:	f011 0f20 	tst.w	r1, #32
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	d00f      	beq.n	80155c0 <_scanf_i+0x1c8>
 80155a0:	6018      	str	r0, [r3, #0]
 80155a2:	68e3      	ldr	r3, [r4, #12]
 80155a4:	3301      	adds	r3, #1
 80155a6:	60e3      	str	r3, [r4, #12]
 80155a8:	1bed      	subs	r5, r5, r7
 80155aa:	44ab      	add	fp, r5
 80155ac:	6925      	ldr	r5, [r4, #16]
 80155ae:	445d      	add	r5, fp
 80155b0:	6125      	str	r5, [r4, #16]
 80155b2:	2000      	movs	r0, #0
 80155b4:	b007      	add	sp, #28
 80155b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ba:	f04f 0b00 	mov.w	fp, #0
 80155be:	e7ca      	b.n	8015556 <_scanf_i+0x15e>
 80155c0:	07ca      	lsls	r2, r1, #31
 80155c2:	bf4c      	ite	mi
 80155c4:	8018      	strhmi	r0, [r3, #0]
 80155c6:	6018      	strpl	r0, [r3, #0]
 80155c8:	e7eb      	b.n	80155a2 <_scanf_i+0x1aa>
 80155ca:	2001      	movs	r0, #1
 80155cc:	e7f2      	b.n	80155b4 <_scanf_i+0x1bc>
 80155ce:	bf00      	nop
 80155d0:	08015d84 	.word	0x08015d84
 80155d4:	080129f5 	.word	0x080129f5
 80155d8:	080128f9 	.word	0x080128f9
 80155dc:	0801639e 	.word	0x0801639e

080155e0 <_read_r>:
 80155e0:	b538      	push	{r3, r4, r5, lr}
 80155e2:	4d07      	ldr	r5, [pc, #28]	; (8015600 <_read_r+0x20>)
 80155e4:	4604      	mov	r4, r0
 80155e6:	4608      	mov	r0, r1
 80155e8:	4611      	mov	r1, r2
 80155ea:	2200      	movs	r2, #0
 80155ec:	602a      	str	r2, [r5, #0]
 80155ee:	461a      	mov	r2, r3
 80155f0:	f7ed f86c 	bl	80026cc <_read>
 80155f4:	1c43      	adds	r3, r0, #1
 80155f6:	d102      	bne.n	80155fe <_read_r+0x1e>
 80155f8:	682b      	ldr	r3, [r5, #0]
 80155fa:	b103      	cbz	r3, 80155fe <_read_r+0x1e>
 80155fc:	6023      	str	r3, [r4, #0]
 80155fe:	bd38      	pop	{r3, r4, r5, pc}
 8015600:	20006e38 	.word	0x20006e38
 8015604:	00000000 	.word	0x00000000

08015608 <nan>:
 8015608:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015610 <nan+0x8>
 801560c:	4770      	bx	lr
 801560e:	bf00      	nop
 8015610:	00000000 	.word	0x00000000
 8015614:	7ff80000 	.word	0x7ff80000

08015618 <__sccl>:
 8015618:	b570      	push	{r4, r5, r6, lr}
 801561a:	780b      	ldrb	r3, [r1, #0]
 801561c:	4604      	mov	r4, r0
 801561e:	2b5e      	cmp	r3, #94	; 0x5e
 8015620:	bf0b      	itete	eq
 8015622:	784b      	ldrbeq	r3, [r1, #1]
 8015624:	1c48      	addne	r0, r1, #1
 8015626:	1c88      	addeq	r0, r1, #2
 8015628:	2200      	movne	r2, #0
 801562a:	bf08      	it	eq
 801562c:	2201      	moveq	r2, #1
 801562e:	1e61      	subs	r1, r4, #1
 8015630:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8015634:	f801 2f01 	strb.w	r2, [r1, #1]!
 8015638:	42a9      	cmp	r1, r5
 801563a:	d1fb      	bne.n	8015634 <__sccl+0x1c>
 801563c:	b90b      	cbnz	r3, 8015642 <__sccl+0x2a>
 801563e:	3801      	subs	r0, #1
 8015640:	bd70      	pop	{r4, r5, r6, pc}
 8015642:	f082 0101 	eor.w	r1, r2, #1
 8015646:	54e1      	strb	r1, [r4, r3]
 8015648:	1c42      	adds	r2, r0, #1
 801564a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801564e:	2d2d      	cmp	r5, #45	; 0x2d
 8015650:	f102 36ff 	add.w	r6, r2, #4294967295
 8015654:	4610      	mov	r0, r2
 8015656:	d006      	beq.n	8015666 <__sccl+0x4e>
 8015658:	2d5d      	cmp	r5, #93	; 0x5d
 801565a:	d0f1      	beq.n	8015640 <__sccl+0x28>
 801565c:	b90d      	cbnz	r5, 8015662 <__sccl+0x4a>
 801565e:	4630      	mov	r0, r6
 8015660:	e7ee      	b.n	8015640 <__sccl+0x28>
 8015662:	462b      	mov	r3, r5
 8015664:	e7ef      	b.n	8015646 <__sccl+0x2e>
 8015666:	7816      	ldrb	r6, [r2, #0]
 8015668:	2e5d      	cmp	r6, #93	; 0x5d
 801566a:	d0fa      	beq.n	8015662 <__sccl+0x4a>
 801566c:	42b3      	cmp	r3, r6
 801566e:	dcf8      	bgt.n	8015662 <__sccl+0x4a>
 8015670:	4618      	mov	r0, r3
 8015672:	3001      	adds	r0, #1
 8015674:	4286      	cmp	r6, r0
 8015676:	5421      	strb	r1, [r4, r0]
 8015678:	dcfb      	bgt.n	8015672 <__sccl+0x5a>
 801567a:	43d8      	mvns	r0, r3
 801567c:	4430      	add	r0, r6
 801567e:	1c5d      	adds	r5, r3, #1
 8015680:	42b3      	cmp	r3, r6
 8015682:	bfa8      	it	ge
 8015684:	2000      	movge	r0, #0
 8015686:	182b      	adds	r3, r5, r0
 8015688:	3202      	adds	r2, #2
 801568a:	e7de      	b.n	801564a <__sccl+0x32>

0801568c <__submore>:
 801568c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015690:	460c      	mov	r4, r1
 8015692:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015698:	4299      	cmp	r1, r3
 801569a:	d11d      	bne.n	80156d8 <__submore+0x4c>
 801569c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80156a0:	f7fb fa3e 	bl	8010b20 <_malloc_r>
 80156a4:	b918      	cbnz	r0, 80156ae <__submore+0x22>
 80156a6:	f04f 30ff 	mov.w	r0, #4294967295
 80156aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80156b2:	63a3      	str	r3, [r4, #56]	; 0x38
 80156b4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80156b8:	6360      	str	r0, [r4, #52]	; 0x34
 80156ba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80156be:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80156c2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80156c6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80156ca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80156ce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80156d2:	6020      	str	r0, [r4, #0]
 80156d4:	2000      	movs	r0, #0
 80156d6:	e7e8      	b.n	80156aa <__submore+0x1e>
 80156d8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80156da:	0077      	lsls	r7, r6, #1
 80156dc:	463a      	mov	r2, r7
 80156de:	f7ff f985 	bl	80149ec <_realloc_r>
 80156e2:	4605      	mov	r5, r0
 80156e4:	2800      	cmp	r0, #0
 80156e6:	d0de      	beq.n	80156a6 <__submore+0x1a>
 80156e8:	eb00 0806 	add.w	r8, r0, r6
 80156ec:	4601      	mov	r1, r0
 80156ee:	4632      	mov	r2, r6
 80156f0:	4640      	mov	r0, r8
 80156f2:	f7fb f995 	bl	8010a20 <memcpy>
 80156f6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80156fa:	f8c4 8000 	str.w	r8, [r4]
 80156fe:	e7e9      	b.n	80156d4 <__submore+0x48>

08015700 <__swbuf_r>:
 8015700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015702:	460e      	mov	r6, r1
 8015704:	4614      	mov	r4, r2
 8015706:	4605      	mov	r5, r0
 8015708:	b118      	cbz	r0, 8015712 <__swbuf_r+0x12>
 801570a:	6983      	ldr	r3, [r0, #24]
 801570c:	b90b      	cbnz	r3, 8015712 <__swbuf_r+0x12>
 801570e:	f7fb f8b1 	bl	8010874 <__sinit>
 8015712:	4b21      	ldr	r3, [pc, #132]	; (8015798 <__swbuf_r+0x98>)
 8015714:	429c      	cmp	r4, r3
 8015716:	d12b      	bne.n	8015770 <__swbuf_r+0x70>
 8015718:	686c      	ldr	r4, [r5, #4]
 801571a:	69a3      	ldr	r3, [r4, #24]
 801571c:	60a3      	str	r3, [r4, #8]
 801571e:	89a3      	ldrh	r3, [r4, #12]
 8015720:	071a      	lsls	r2, r3, #28
 8015722:	d52f      	bpl.n	8015784 <__swbuf_r+0x84>
 8015724:	6923      	ldr	r3, [r4, #16]
 8015726:	b36b      	cbz	r3, 8015784 <__swbuf_r+0x84>
 8015728:	6923      	ldr	r3, [r4, #16]
 801572a:	6820      	ldr	r0, [r4, #0]
 801572c:	1ac0      	subs	r0, r0, r3
 801572e:	6963      	ldr	r3, [r4, #20]
 8015730:	b2f6      	uxtb	r6, r6
 8015732:	4283      	cmp	r3, r0
 8015734:	4637      	mov	r7, r6
 8015736:	dc04      	bgt.n	8015742 <__swbuf_r+0x42>
 8015738:	4621      	mov	r1, r4
 801573a:	4628      	mov	r0, r5
 801573c:	f7fe f89a 	bl	8013874 <_fflush_r>
 8015740:	bb30      	cbnz	r0, 8015790 <__swbuf_r+0x90>
 8015742:	68a3      	ldr	r3, [r4, #8]
 8015744:	3b01      	subs	r3, #1
 8015746:	60a3      	str	r3, [r4, #8]
 8015748:	6823      	ldr	r3, [r4, #0]
 801574a:	1c5a      	adds	r2, r3, #1
 801574c:	6022      	str	r2, [r4, #0]
 801574e:	701e      	strb	r6, [r3, #0]
 8015750:	6963      	ldr	r3, [r4, #20]
 8015752:	3001      	adds	r0, #1
 8015754:	4283      	cmp	r3, r0
 8015756:	d004      	beq.n	8015762 <__swbuf_r+0x62>
 8015758:	89a3      	ldrh	r3, [r4, #12]
 801575a:	07db      	lsls	r3, r3, #31
 801575c:	d506      	bpl.n	801576c <__swbuf_r+0x6c>
 801575e:	2e0a      	cmp	r6, #10
 8015760:	d104      	bne.n	801576c <__swbuf_r+0x6c>
 8015762:	4621      	mov	r1, r4
 8015764:	4628      	mov	r0, r5
 8015766:	f7fe f885 	bl	8013874 <_fflush_r>
 801576a:	b988      	cbnz	r0, 8015790 <__swbuf_r+0x90>
 801576c:	4638      	mov	r0, r7
 801576e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015770:	4b0a      	ldr	r3, [pc, #40]	; (801579c <__swbuf_r+0x9c>)
 8015772:	429c      	cmp	r4, r3
 8015774:	d101      	bne.n	801577a <__swbuf_r+0x7a>
 8015776:	68ac      	ldr	r4, [r5, #8]
 8015778:	e7cf      	b.n	801571a <__swbuf_r+0x1a>
 801577a:	4b09      	ldr	r3, [pc, #36]	; (80157a0 <__swbuf_r+0xa0>)
 801577c:	429c      	cmp	r4, r3
 801577e:	bf08      	it	eq
 8015780:	68ec      	ldreq	r4, [r5, #12]
 8015782:	e7ca      	b.n	801571a <__swbuf_r+0x1a>
 8015784:	4621      	mov	r1, r4
 8015786:	4628      	mov	r0, r5
 8015788:	f000 f81a 	bl	80157c0 <__swsetup_r>
 801578c:	2800      	cmp	r0, #0
 801578e:	d0cb      	beq.n	8015728 <__swbuf_r+0x28>
 8015790:	f04f 37ff 	mov.w	r7, #4294967295
 8015794:	e7ea      	b.n	801576c <__swbuf_r+0x6c>
 8015796:	bf00      	nop
 8015798:	08015efc 	.word	0x08015efc
 801579c:	08015f1c 	.word	0x08015f1c
 80157a0:	08015edc 	.word	0x08015edc

080157a4 <__ascii_wctomb>:
 80157a4:	b149      	cbz	r1, 80157ba <__ascii_wctomb+0x16>
 80157a6:	2aff      	cmp	r2, #255	; 0xff
 80157a8:	bf85      	ittet	hi
 80157aa:	238a      	movhi	r3, #138	; 0x8a
 80157ac:	6003      	strhi	r3, [r0, #0]
 80157ae:	700a      	strbls	r2, [r1, #0]
 80157b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80157b4:	bf98      	it	ls
 80157b6:	2001      	movls	r0, #1
 80157b8:	4770      	bx	lr
 80157ba:	4608      	mov	r0, r1
 80157bc:	4770      	bx	lr
	...

080157c0 <__swsetup_r>:
 80157c0:	4b32      	ldr	r3, [pc, #200]	; (801588c <__swsetup_r+0xcc>)
 80157c2:	b570      	push	{r4, r5, r6, lr}
 80157c4:	681d      	ldr	r5, [r3, #0]
 80157c6:	4606      	mov	r6, r0
 80157c8:	460c      	mov	r4, r1
 80157ca:	b125      	cbz	r5, 80157d6 <__swsetup_r+0x16>
 80157cc:	69ab      	ldr	r3, [r5, #24]
 80157ce:	b913      	cbnz	r3, 80157d6 <__swsetup_r+0x16>
 80157d0:	4628      	mov	r0, r5
 80157d2:	f7fb f84f 	bl	8010874 <__sinit>
 80157d6:	4b2e      	ldr	r3, [pc, #184]	; (8015890 <__swsetup_r+0xd0>)
 80157d8:	429c      	cmp	r4, r3
 80157da:	d10f      	bne.n	80157fc <__swsetup_r+0x3c>
 80157dc:	686c      	ldr	r4, [r5, #4]
 80157de:	89a3      	ldrh	r3, [r4, #12]
 80157e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80157e4:	0719      	lsls	r1, r3, #28
 80157e6:	d42c      	bmi.n	8015842 <__swsetup_r+0x82>
 80157e8:	06dd      	lsls	r5, r3, #27
 80157ea:	d411      	bmi.n	8015810 <__swsetup_r+0x50>
 80157ec:	2309      	movs	r3, #9
 80157ee:	6033      	str	r3, [r6, #0]
 80157f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80157f4:	81a3      	strh	r3, [r4, #12]
 80157f6:	f04f 30ff 	mov.w	r0, #4294967295
 80157fa:	e03e      	b.n	801587a <__swsetup_r+0xba>
 80157fc:	4b25      	ldr	r3, [pc, #148]	; (8015894 <__swsetup_r+0xd4>)
 80157fe:	429c      	cmp	r4, r3
 8015800:	d101      	bne.n	8015806 <__swsetup_r+0x46>
 8015802:	68ac      	ldr	r4, [r5, #8]
 8015804:	e7eb      	b.n	80157de <__swsetup_r+0x1e>
 8015806:	4b24      	ldr	r3, [pc, #144]	; (8015898 <__swsetup_r+0xd8>)
 8015808:	429c      	cmp	r4, r3
 801580a:	bf08      	it	eq
 801580c:	68ec      	ldreq	r4, [r5, #12]
 801580e:	e7e6      	b.n	80157de <__swsetup_r+0x1e>
 8015810:	0758      	lsls	r0, r3, #29
 8015812:	d512      	bpl.n	801583a <__swsetup_r+0x7a>
 8015814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015816:	b141      	cbz	r1, 801582a <__swsetup_r+0x6a>
 8015818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801581c:	4299      	cmp	r1, r3
 801581e:	d002      	beq.n	8015826 <__swsetup_r+0x66>
 8015820:	4630      	mov	r0, r6
 8015822:	f7fb f92d 	bl	8010a80 <_free_r>
 8015826:	2300      	movs	r3, #0
 8015828:	6363      	str	r3, [r4, #52]	; 0x34
 801582a:	89a3      	ldrh	r3, [r4, #12]
 801582c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015830:	81a3      	strh	r3, [r4, #12]
 8015832:	2300      	movs	r3, #0
 8015834:	6063      	str	r3, [r4, #4]
 8015836:	6923      	ldr	r3, [r4, #16]
 8015838:	6023      	str	r3, [r4, #0]
 801583a:	89a3      	ldrh	r3, [r4, #12]
 801583c:	f043 0308 	orr.w	r3, r3, #8
 8015840:	81a3      	strh	r3, [r4, #12]
 8015842:	6923      	ldr	r3, [r4, #16]
 8015844:	b94b      	cbnz	r3, 801585a <__swsetup_r+0x9a>
 8015846:	89a3      	ldrh	r3, [r4, #12]
 8015848:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801584c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015850:	d003      	beq.n	801585a <__swsetup_r+0x9a>
 8015852:	4621      	mov	r1, r4
 8015854:	4630      	mov	r0, r6
 8015856:	f000 f845 	bl	80158e4 <__smakebuf_r>
 801585a:	89a0      	ldrh	r0, [r4, #12]
 801585c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015860:	f010 0301 	ands.w	r3, r0, #1
 8015864:	d00a      	beq.n	801587c <__swsetup_r+0xbc>
 8015866:	2300      	movs	r3, #0
 8015868:	60a3      	str	r3, [r4, #8]
 801586a:	6963      	ldr	r3, [r4, #20]
 801586c:	425b      	negs	r3, r3
 801586e:	61a3      	str	r3, [r4, #24]
 8015870:	6923      	ldr	r3, [r4, #16]
 8015872:	b943      	cbnz	r3, 8015886 <__swsetup_r+0xc6>
 8015874:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015878:	d1ba      	bne.n	80157f0 <__swsetup_r+0x30>
 801587a:	bd70      	pop	{r4, r5, r6, pc}
 801587c:	0781      	lsls	r1, r0, #30
 801587e:	bf58      	it	pl
 8015880:	6963      	ldrpl	r3, [r4, #20]
 8015882:	60a3      	str	r3, [r4, #8]
 8015884:	e7f4      	b.n	8015870 <__swsetup_r+0xb0>
 8015886:	2000      	movs	r0, #0
 8015888:	e7f7      	b.n	801587a <__swsetup_r+0xba>
 801588a:	bf00      	nop
 801588c:	20000188 	.word	0x20000188
 8015890:	08015efc 	.word	0x08015efc
 8015894:	08015f1c 	.word	0x08015f1c
 8015898:	08015edc 	.word	0x08015edc

0801589c <__swhatbuf_r>:
 801589c:	b570      	push	{r4, r5, r6, lr}
 801589e:	460e      	mov	r6, r1
 80158a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158a4:	2900      	cmp	r1, #0
 80158a6:	b096      	sub	sp, #88	; 0x58
 80158a8:	4614      	mov	r4, r2
 80158aa:	461d      	mov	r5, r3
 80158ac:	da07      	bge.n	80158be <__swhatbuf_r+0x22>
 80158ae:	2300      	movs	r3, #0
 80158b0:	602b      	str	r3, [r5, #0]
 80158b2:	89b3      	ldrh	r3, [r6, #12]
 80158b4:	061a      	lsls	r2, r3, #24
 80158b6:	d410      	bmi.n	80158da <__swhatbuf_r+0x3e>
 80158b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80158bc:	e00e      	b.n	80158dc <__swhatbuf_r+0x40>
 80158be:	466a      	mov	r2, sp
 80158c0:	f000 f858 	bl	8015974 <_fstat_r>
 80158c4:	2800      	cmp	r0, #0
 80158c6:	dbf2      	blt.n	80158ae <__swhatbuf_r+0x12>
 80158c8:	9a01      	ldr	r2, [sp, #4]
 80158ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80158ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80158d2:	425a      	negs	r2, r3
 80158d4:	415a      	adcs	r2, r3
 80158d6:	602a      	str	r2, [r5, #0]
 80158d8:	e7ee      	b.n	80158b8 <__swhatbuf_r+0x1c>
 80158da:	2340      	movs	r3, #64	; 0x40
 80158dc:	2000      	movs	r0, #0
 80158de:	6023      	str	r3, [r4, #0]
 80158e0:	b016      	add	sp, #88	; 0x58
 80158e2:	bd70      	pop	{r4, r5, r6, pc}

080158e4 <__smakebuf_r>:
 80158e4:	898b      	ldrh	r3, [r1, #12]
 80158e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80158e8:	079d      	lsls	r5, r3, #30
 80158ea:	4606      	mov	r6, r0
 80158ec:	460c      	mov	r4, r1
 80158ee:	d507      	bpl.n	8015900 <__smakebuf_r+0x1c>
 80158f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80158f4:	6023      	str	r3, [r4, #0]
 80158f6:	6123      	str	r3, [r4, #16]
 80158f8:	2301      	movs	r3, #1
 80158fa:	6163      	str	r3, [r4, #20]
 80158fc:	b002      	add	sp, #8
 80158fe:	bd70      	pop	{r4, r5, r6, pc}
 8015900:	ab01      	add	r3, sp, #4
 8015902:	466a      	mov	r2, sp
 8015904:	f7ff ffca 	bl	801589c <__swhatbuf_r>
 8015908:	9900      	ldr	r1, [sp, #0]
 801590a:	4605      	mov	r5, r0
 801590c:	4630      	mov	r0, r6
 801590e:	f7fb f907 	bl	8010b20 <_malloc_r>
 8015912:	b948      	cbnz	r0, 8015928 <__smakebuf_r+0x44>
 8015914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015918:	059a      	lsls	r2, r3, #22
 801591a:	d4ef      	bmi.n	80158fc <__smakebuf_r+0x18>
 801591c:	f023 0303 	bic.w	r3, r3, #3
 8015920:	f043 0302 	orr.w	r3, r3, #2
 8015924:	81a3      	strh	r3, [r4, #12]
 8015926:	e7e3      	b.n	80158f0 <__smakebuf_r+0xc>
 8015928:	4b0d      	ldr	r3, [pc, #52]	; (8015960 <__smakebuf_r+0x7c>)
 801592a:	62b3      	str	r3, [r6, #40]	; 0x28
 801592c:	89a3      	ldrh	r3, [r4, #12]
 801592e:	6020      	str	r0, [r4, #0]
 8015930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015934:	81a3      	strh	r3, [r4, #12]
 8015936:	9b00      	ldr	r3, [sp, #0]
 8015938:	6163      	str	r3, [r4, #20]
 801593a:	9b01      	ldr	r3, [sp, #4]
 801593c:	6120      	str	r0, [r4, #16]
 801593e:	b15b      	cbz	r3, 8015958 <__smakebuf_r+0x74>
 8015940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015944:	4630      	mov	r0, r6
 8015946:	f000 f827 	bl	8015998 <_isatty_r>
 801594a:	b128      	cbz	r0, 8015958 <__smakebuf_r+0x74>
 801594c:	89a3      	ldrh	r3, [r4, #12]
 801594e:	f023 0303 	bic.w	r3, r3, #3
 8015952:	f043 0301 	orr.w	r3, r3, #1
 8015956:	81a3      	strh	r3, [r4, #12]
 8015958:	89a0      	ldrh	r0, [r4, #12]
 801595a:	4305      	orrs	r5, r0
 801595c:	81a5      	strh	r5, [r4, #12]
 801595e:	e7cd      	b.n	80158fc <__smakebuf_r+0x18>
 8015960:	0801080d 	.word	0x0801080d

08015964 <_malloc_usable_size_r>:
 8015964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015968:	1f18      	subs	r0, r3, #4
 801596a:	2b00      	cmp	r3, #0
 801596c:	bfbc      	itt	lt
 801596e:	580b      	ldrlt	r3, [r1, r0]
 8015970:	18c0      	addlt	r0, r0, r3
 8015972:	4770      	bx	lr

08015974 <_fstat_r>:
 8015974:	b538      	push	{r3, r4, r5, lr}
 8015976:	4d07      	ldr	r5, [pc, #28]	; (8015994 <_fstat_r+0x20>)
 8015978:	2300      	movs	r3, #0
 801597a:	4604      	mov	r4, r0
 801597c:	4608      	mov	r0, r1
 801597e:	4611      	mov	r1, r2
 8015980:	602b      	str	r3, [r5, #0]
 8015982:	f7ec fee8 	bl	8002756 <_fstat>
 8015986:	1c43      	adds	r3, r0, #1
 8015988:	d102      	bne.n	8015990 <_fstat_r+0x1c>
 801598a:	682b      	ldr	r3, [r5, #0]
 801598c:	b103      	cbz	r3, 8015990 <_fstat_r+0x1c>
 801598e:	6023      	str	r3, [r4, #0]
 8015990:	bd38      	pop	{r3, r4, r5, pc}
 8015992:	bf00      	nop
 8015994:	20006e38 	.word	0x20006e38

08015998 <_isatty_r>:
 8015998:	b538      	push	{r3, r4, r5, lr}
 801599a:	4d06      	ldr	r5, [pc, #24]	; (80159b4 <_isatty_r+0x1c>)
 801599c:	2300      	movs	r3, #0
 801599e:	4604      	mov	r4, r0
 80159a0:	4608      	mov	r0, r1
 80159a2:	602b      	str	r3, [r5, #0]
 80159a4:	f7ec fee7 	bl	8002776 <_isatty>
 80159a8:	1c43      	adds	r3, r0, #1
 80159aa:	d102      	bne.n	80159b2 <_isatty_r+0x1a>
 80159ac:	682b      	ldr	r3, [r5, #0]
 80159ae:	b103      	cbz	r3, 80159b2 <_isatty_r+0x1a>
 80159b0:	6023      	str	r3, [r4, #0]
 80159b2:	bd38      	pop	{r3, r4, r5, pc}
 80159b4:	20006e38 	.word	0x20006e38

080159b8 <_init>:
 80159b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ba:	bf00      	nop
 80159bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159be:	bc08      	pop	{r3}
 80159c0:	469e      	mov	lr, r3
 80159c2:	4770      	bx	lr

080159c4 <_fini>:
 80159c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159c6:	bf00      	nop
 80159c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159ca:	bc08      	pop	{r3}
 80159cc:	469e      	mov	lr, r3
 80159ce:	4770      	bx	lr
